["```kt\nfind [path-to-search] –perm  0444 –exec ls –al {} \\;\n\n```", "```kt\nfind [path-to-search] –perm  0222 –exec ls –al {} \\;\n\n```", "```kt\nfind [path-to-search] –perm  0111 –exec ls –al {} \\;\n\n```", "```kt\nfind [path-to-search] –perm  a=r –exec ls –al {} \\;\n\n```", "```kt\nfind [path-to-search] –perm  -444 –exec ls –al {} \\;\n\n```", "```kt\nfind [path-to-search] –perm  -4111 –exec ls –al {} \\;\n\n```", "```kt\nfind [path-to-search] –perm  -2111 –exec ls –al {} \\;\n\n```", "```kt\n    find [path-to-search] –user 0 –exec ls –al {} \\;\n\n    ```", "```kt\n    find [path-to-search] –user 1000 –exec ls –al {} \\;\n\n    ```", "```kt\n    find [path-to-search] –group 0 –exec ls –al {} \\;\n\n    ```", "```kt\nfind /data/data/ -user 10170 –exec ls –al {} \\;  2> /dev/null\n\n```", "```kt\nfind . –perm [permission mode] –exec stat –c \"[format]\" {} \\;\n\n```", "```kt\nfind . –perm [permission] –exec stat –c \"%A %u %g  %f  %N\" {} \\;\n\n```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    # give module name\n    LOCAL_MODULE    := buffer-overflow  #name of folder\n    # list your C files to compile\n    LOCAL_SRC_FILES :=  buffer-overflow.c #name of source to compile\n    # this option will build executables instead of building library for Android application.\n    include $(BUILD_EXECUTABLE)\n\n    ```", "```kt\n    #include <stdio.h>\n    #include <string.h>\n    void vulnerable(char *src){\n      char dest[10]; //declare a stack based buffer\n      strcpy(dest,src);\n      printf(\"[%s]\\n\",dest); //print the result\n      return;  }\n\n    void call_me_maybe(){\n      printf(\"so much win!!\\n\");\n      return;  }\n\n    int main(int argc, char **argv){\n      vulnerable(argv[1]); //call vulnerable function\n      return (0);  }\n    ```", "```kt\n    [path-to-ndk]/ndk-build\n\n    ```", "```kt\n[path-to-ndk]/toolchains/arm-linux-Androideabi-[version]/prebuilt/linux-x86_64/bin/arm-linux-Androideabi-objdump –D /[module name]/obj/local/armeabi/[module name] | less\n\n```", "```kt\n[path-to-ndk]/toolchains/arm-linux-Androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-Androideabi-objdump –D /buffer-overflow/obj/local/armeabi/buffer-overflow | less\n\n```", "```kt\n00008524 <vulnerable>:\n 8524:  b51f        push  {r0, r1, r2, r3, r4, lr}\n 8526:  4c0a        ldr  r4, [pc, #40]  ; (8550 <vulnerable+0x2c>)\n 8528:  1c01        adds  r1, r0, #0\n 852a:  4668        mov  r0, sp\n 852c:  447c        add  r4, pc\n 852e:  6824        ldr  r4, [r4, #0]\n 8530:  6823        ldr  r3, [r4, #0]\n 8532:  9303        str  r3, [sp, #12]\n 8534:  f7ff ef7e   blx  8434 <strcpy@plt>\n 8538:  4806        ldr  r0, [pc, #24]  ; (8554 <vulnerable+0x30>)\n 853a:  4669        mov  r1, sp\n 853c:  4478        add  r0, pc\n 853e:  f7ff ef80   blx  8440 <printf@plt>\n 8542:  9a03        ldr  r2, [sp, #12]\n 8544:  6823        ldr  r3, [r4, #0]\n 8546:  429a        cmp  r2, r3\n 8548:  d001        beq.n  854e <vulnerable+0x2a>\n 854a:  f7ff ef80   blx  844c <__stack_chk_fail@plt>\n 854e:  bd1f        pop  {r0, r1, r2, r3, r4, pc}\n 8550:  00002a7c   andeq  r2, r0, ip, ror sl\n 8554:  00001558   andeq  r1, r0, r8, asr r5\n\n00008558 <main>:\n 8558:  b508        push  {r3, lr}\n 855a:  6848        ldr  r0, [r1, #4]\n 855c:  f7ff ffe2   bl  8524 <vulnerable>\n 8560:  2000        movs  r0, #0\n 8562:  bd08        pop  {r3, pc}\n\n```", "```kt\n    cp setup.mk setup.mk.bk\n\n    ```", "```kt\n    000084bc <vulnerable>:\n     84bc:  b51f        push  {r0, r1, r2, r3, r4, lr}\n     84be:  1c01        adds  r1, r0, #0\n     84c0:  a801        add  r0, sp, #4\n     84c2:  f7ff ef8a   blx  83d8 <strcpy@plt>\n     84c6:  4803        ldr  r0, [pc, #12]  ; (84d4 <vulnerable+0x18>)\n     84c8:  a901        add  r1, sp, #4\n     84ca:  4478        add  r0, pc\n     84cc:  f7ff ef8a   blx  83e4 <printf@plt>\n     84d0:  b005        add  sp, #20\n     84d2:  bd00        pop  {pc}\n     84d4:  0000154a   andeq  r1, r0, sl, asr #10\n\n    000084d8 <main>:\n     84d8:  b508        push  {r3, lr}\n     84da:  6848        ldr  r0, [r1, #4]\n     84dc:  f7ff ffee   bl  84bc <vulnerable>\n     84e0:  2000        movs  r0, #0\n     84e2:  bd08        pop  {r3, pc}\n\n    ```", "```kt\n    #include <stdio.h>\n    #include <unistd.h>\n    #include <errno.h>\n    #define MAX_COMMANDSIZE 100\n    int main(int argc,char *argv[],char **envp){\n      char opt_buf[MAX_COMMANDSIZE];\n      char *args[2];\n      args[0] = opt_buf;\n      args[1] = NULL;\n      int opt_int;\n      const char *command_filename = \"/data/race-condition/commands.txt\";\n      FILE *command_file;\n      printf(\"option: \");\n      opt_int = atoi(gets(opt_buf));\n      printf(\"[*] option %d selected...\\n\",opt_int);\n      if (access(command_filename,R_OK|F_OK) == 0){\n        printf(\"[*] access okay...\\n\");\n        command_file = fopen(command_filename,\"r\");\n        for (;opt_int>0;opt_int--){\n          fscanf(command_file,\"%s\",opt_buf);\n        }\n        printf(\"[*] executing [%s]...\\n\",opt_buf);\n        fclose(command_file);\n      }\n      else{\n        printf(\"[x] access not granted...\\n\");\n      }\n      int ret = execve(args[0],&args,(char **)NULL);\n      if (ret != NULL){\n        perror(\"[x] execve\");\n      }\n      return 0;\n    }\n    ```", "```kt\n    chmod 4711 /system/bin/race-condition\n\n    ```", "```kt\n    echo \"/system/bin/sh\" >> /data/race-condition/commands.txt\n\n    ```", "```kt\n    #include <stdio.h>\n    #include <string.h>\n    void\n    vulnerable(char *src){\n      char dest[10]; //declare a stack based buffer\n      strcpy(dest,src); //always good not to do bounds checking\n      printf(\"[%s]\\n\",dest); //print the result\n      return;  }\n\n    int\n    main(int argc, char **argv){\n      vulnerable(argv[1]); //call vulnerable function\n      printf(\"you lose...\\n\");\n      return (0);  }\n    ```", "```kt\n    x/32xw $sp\n\n    ```", "```kt\n    push  {r0, r1, r2, r3, r4, lr}\n\n    ```", "```kt\n    pop   {pc}\n\n    ```", "```kt\n    disass main\n\n    ```", "```kt\n    0x000084ec <+0>:  push {r3,lr}\n    0x000084ee <+2>:  ldr r0,[r1, #4]\n    0x000084f0 <+4>:  bl 0x84d0 <vulnerable>\n    0x000084f4 <+8>:  ldr r0, [pc, #8]\n    0x000084f6 <+10>:  add r0,pc\n    0x000084f8 <+12>:  blx 0x83f8\n    0x000084fc <+16>:  movs r0,#0\n    0x000084f3 <+18>:  pop {r3,pc}\n    0x00008500 <+20>:  andeq r1,r0,r2,asr,r5\n\n    ```", "```kt\n    echo –e \"1234567890123456\\xfc\\x84\"`\n\n    ```", "```kt\n    sudo apt-get install gcc curl\n\n    ```", "```kt\n    curl http://ouspg.googlecode.com/files/radamsa-0.3.tar.gz > radamsa-0.3.tar.gz\n\n    ```", "```kt\n    tar –zxvf radamsa-0.3.tar.gz\n\n    ```", "```kt\n    radamsa –-help\n\n    ```", "```kt\n    echo \"99 bottles of beer on the wall\" | radamsa\n\n    ```", "```kt\n    adb push [path to busybox] /data/busybox/.\n\n    ```", "```kt\n    /data/busybox –-install\n\n    ```", "```kt\n    #!/bin/bash\n    ROOT=$1\n    TARGET=dexdump\n    ITER=$2\n    for ((c=0;1;c++))\n    do\n     cat $ROOT | radamsa -m bf,br,sr -p bu > fuzz.dex\n     $TARGET -d fuzz.dex 2>&1 > /dev/null\n     RET_CODE=$?\n     echo \"[$c] {$RET_CODE} ($WINS)\"\n     test $RET_CODE -gt 127 && cp fuzz.dex win-dexdump_$ITER\"_\"$c.dex && WINS=`expr $WINS + 1`\n    done\n\n    ```", "```kt\n    /data/busybox/bash; /data/busybox/source [fuzz script name] [example.dex]\n\n    ```", "```kt\ntypedef unsigned long in_addr_t;\n\n```", "```kt\ncat $ROOT | radamsa -m bf,br,sr -p bu > fuzz.dex\n\n```", "```kt\n$TARGET -d fuzz.dex 2>&1 > /dev/null\n\n```", "```kt\nRET_CODE=$?\n```", "```kt\necho \"[$c] {$RET_CODE} ($WINS)\"\ntest $RET_CODE -gt 127 && cp fuzz.dex win-dexdump_$ITER\"_\"$c.dex && WINS=`expr $WINS + 1\n```"]