- en: Chapter 3. Building Our First Game – Breakout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章. 制作我们的第一个游戏 - 破坏者
- en: '*So far, we have gone through some important basics of programming in Lua and
    applied some code to run in the Corona simulator. Knowing the terminology is a
    small part of learning how to create an application. We''ll need to take a step
    further and get some hands-on experience of what it''s like to structure a project
    from start to finish. We''re going to accomplish this by creating our first game
    from scratch. This will push you further to understand larger chunks of code and
    apply some game logic to create a functional game.*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*到目前为止，我们已经学习了 Lua 编程中的一些重要基础，并在 Corona 模拟器中应用了一些代码。了解术语只是学习如何创建应用程序的一小部分。我们需要更进一层，亲身体验从开始到结束构建一个项目的全过程。我们将通过从零开始创建我们的第一个游戏来实现这一点。这将推动你进一步理解更大的代码块，并应用一些游戏逻辑来创建一个功能性的游戏。*'
- en: 'By the end of this chapter, you will understand:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解：
- en: How to structure game files in a Corona project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Corona 项目中构建游戏文件结构
- en: How to create variables for the game
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为游戏创建变量
- en: How to add game objects to the screen
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向屏幕添加游戏对象
- en: How to create an alert message
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建警告信息
- en: How to display the score and level number
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何显示得分和关卡数字
- en: Let the fun begin!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始享受乐趣！
- en: Breakout – bringing back old-school gaming
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破坏者 - 重温旧式游戏
- en: 'You have probably seen many forms of the game Breakout in the past couple of
    decades, especially during the Atari days. To give you a good idea of what the
    game is about, here is a brief editorial by Big Fish Games about the history of
    Breakout: [http://www.bigfishgames.com/blog/the-history-of-breakout/](http://www.bigfishgames.com/blog/the-history-of-breakout/).
    The following screenshot is an example of Breakout:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几十年里，你可能已经见过许多破坏者的版本，尤其是在雅达利时代。为了让你对这款游戏有一个大致的了解，以下是 Big Fish Games 关于破坏者历史的简要编辑：[http://www.bigfishgames.com/blog/the-history-of-breakout/](http://www.bigfishgames.com/blog/the-history-of-breakout/)。以下截图是破坏者游戏的示例：
- en: '![Breakout – bringing back old-school gaming](img/9343OT_03_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![破坏者 - 重温旧式游戏](img/9343OT_03_01.jpg)'
- en: On the game screen, there are several columns and rows of bricks placed near
    the top of the screen. A ball travels across the screen, bouncing off the top
    and side walls of the screen. When a brick is hit, the ball bounces away and the
    brick is destroyed. The player loses the round when the ball touches the bottom
    of the screen. To prevent this from happening, the player has a movable paddle
    to bounce the ball upward, keeping it in play.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏屏幕上，有几列砖块放置在屏幕顶部附近。一个球在屏幕上移动，从屏幕顶部和侧壁弹回。当击中砖块时，球会弹开，砖块被摧毁。当球触碰到屏幕底部时，玩家将输掉这一轮。为了防止这种情况发生，玩家有一个可移动的挡板来将球弹起，保持游戏进行。
- en: We're going to create a clone using touch events and the accelerometer for the
    paddle movement that will be controlled by the player. We'll be adding some physics
    to the ball so that it can bounce around the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用触摸事件和加速度计来创建一个克隆版本，玩家将控制挡板的活动。我们将为球添加一些物理效果，使其能在屏幕上弹跳。
- en: In the next chapter, we'll be adding the movement of the game objects, collision
    detection, score keeping, and win/lose conditions. Right now, we're going to focus
    on how to set up the game template of Breakout.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将添加游戏对象的活动、碰撞检测、计分以及胜利/失败条件。现在，我们要专注于如何设置破坏者游戏模板。
- en: Understanding the Corona physics API
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Corona 物理API
- en: Corona has made it convenient to add physics to your games, especially if you've
    never worked on one before. The engine uses Box2D and takes only a few lines to
    incorporate it into your application than what it normally takes to have it set
    up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Corona 使向游戏中添加物理效果变得方便，尤其是如果你以前从未处理过这类工作。这个引擎使用 Box2D，只需几行代码就可以将其集成到你的应用程序中，而这通常需要更多的设置。
- en: Working with the physics engine in Corona is fairly easy. You use display objects
    and set them as a physical body in your code. Images, sprites, and vector shapes
    can be turned into a physical object. This is substantial in visualizing how you
    want your objects to react in an environment you have created. You can see results
    right away rather than guessing about how they might act in the physical world.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Corona 中使用物理引擎相当简单。你使用显示对象并在代码中将它们设置为物理实体。图像、精灵和矢量形状可以被转化为物理对象。这对于可视化你想要在创建的环境中对象如何反应非常有帮助。你可以立即看到结果，而不是猜测它们在物理世界中可能的行为。
- en: Setting up the physics world
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置物理世界
- en: 'Making the physics engine available in your app requires the following line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序中使物理引擎可用需要以下这行代码：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Starting, pausing, and stopping the physics engine
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动、暂停和停止物理引擎
- en: 'There are three main functions that affect the physics simulation. The following
    will start, pause, and stop the physics engine:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个主要函数会影响物理模拟。以下是启动、暂停和停止物理引擎的命令：
- en: '`physics.start()`: This will start or resume the physical environment. It is
    usually activated at the beginning of the application for physics bodies to take
    effect.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.start()`：这将启动或恢复物理环境。通常在应用程序开始时激活，使物理实体生效。'
- en: '`physics.pause()`: This stops the physics engine temporarily.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.pause()`：这会暂时停止物理引擎。'
- en: '`physics.stop()`: This basically destroys the physical world altogether.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.stop()`：这基本上完全销毁物理世界。'
- en: physics.setGravity
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setGravity
- en: 'This function sets the x and y parameters of the global gravity vector in units
    of meters per second square (acceleration units). The default is (0, 9.8) to simulate
    standard earth gravity, pointing downwards on the *y* axis. The syntax is `physics.setGravity(gx,
    gy)`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于设置全局重力向量的 x 和 y 参数，单位为每秒平方米（加速度单位）。默认值为 (0, 9.8)，以模拟标准的地球重力，指向 *y* 轴的下方。其语法为
    `physics.setGravity(gx, gy)`：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: physics.getGravity
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.getGravity
- en: This function returns the x and y parameters of the global gravity vector in
    units of meter per second square (acceleration units).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回全局重力向量的 x 和 y 参数，单位为每秒平方厘米（加速度单位）。
- en: The syntax is `gx, gy = physics.getGravity()`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 语法为 `gx, gy = physics.getGravity()`。
- en: Tilt-based gravity
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于倾斜的重力
- en: 'When you have `physics.setGravity(gx, gy)` and the accelerometer API applied,
    implementing tilt-based dynamic gravity is simple. The following is an example
    of creating the tilt-based function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你应用了 `physics.setGravity(gx, gy)` 和加速度计 API，实现基于倾斜的动态重力是简单的。以下是创建基于倾斜功能的示例：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The accelerometer is not present in the Corona simulator; a device build must
    be created to see the effect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Corona 模拟器中没有加速度计；必须创建设备构建才能看到效果。
- en: physics.setScale
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setScale
- en: This function sets the internal pixels-per-meter ratio used to convert between
    the onscreen Corona coordinates and simulated physics coordinates. This should
    be done before any of the physical objects are instantiated.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数设置内部每米像素比率，用于在屏幕上的 Corona 坐标和模拟物理坐标之间转换。这应该在实例化任何物理对象之前完成。
- en: The default scaling value is 30\. For devices of higher resolution, such as
    iPad, Android, or iPhone 4, you might wish to increase this value to 60 or more.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 默认缩放值为 30。对于分辨率较高的设备，如 iPad、Android 或 iPhone 4，你可能希望将此值增加到 60 或更多。
- en: 'The syntax is `physics.setScale(value)`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 语法为 `physics.setScale(value)`：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: physics.setDrawMode
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setDrawMode
- en: There are three rendering modes for the physics engine. This can be altered
    at any time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 物理引擎有三种渲染模式。这可以在任何时候更改。
- en: 'The syntax is `physics.setDrawMode(mode)`. The three rendering modes are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 语法为 `physics.setDrawMode(mode)`。三种渲染模式分别为：
- en: '`physics.setDrawMode("debug")`: This mode shows collision engine outlines only,
    as you can see in the following screenshot:![physics.setDrawMode](img/9343OT_03_02.jpg)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.setDrawMode("debug")`：此模式仅显示碰撞引擎轮廓，如下面的截图所示：![physics.setDrawMode](img/9343OT_03_02.jpg)'
- en: '`physics.setDrawMode("hybrid")`: This mode overlays collision outlines on normal
    Corona objects, as you can see in the following screenshot:![physics.setDrawMode](img/9343OT_03_03.jpg)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.setDrawMode("hybrid")`：此模式在正常 Corona 对象上叠加碰撞轮廓，如下面的截图所示：![physics.setDrawMode](img/9343OT_03_03.jpg)'
- en: '`physics.setDrawMode("normal")`: This mode is the default Corona renderer with
    no collision outlines:![physics.setDrawMode](img/9343OT_03_04.jpg)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.setDrawMode("normal")`：此模式是默认的 Corona 渲染器，没有碰撞轮廓：![physics.setDrawMode](img/9343OT_03_04.jpg)'
- en: 'The physics data is displayed using color-coded vector graphics, which reflect
    different object types and attributes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 物理数据使用颜色编码的矢量图形显示，反映了不同的对象类型和属性：
- en: '**Orange**: This is used to denote dynamic physics bodies (the default body
    type)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**橙色**：用于表示动态物理实体（默认实体类型）'
- en: '**Dark blue**: This is used to denote kinematic physics bodies'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深蓝色**：用于表示运动学物理实体'
- en: '**Green**: This is used to denote static physics bodies such as the ground
    or walls'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绿色**：用于表示静态物理实体，如地面或墙壁'
- en: '**Gray**: This is used to denote a body that is in a *sleeping* state due to
    lack of activity'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灰色**：用于表示因缺乏活动而处于 *休眠* 状态的实体'
- en: '**Light blue**: This is used to denote joints'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浅蓝色**：用于表示关节'
- en: physics.setPositionIterations
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setPositionIterations
- en: This function sets the accuracy of the engine's position calculations. The default
    value is `8`, meaning that the engine will iterate through eight position approximations
    per frame for every object, but will increase processor engagement, so it should
    be handled carefully, because it might slow down the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数设置了引擎位置计算的精确度。默认值是 `8`，意味着引擎将每帧为每个对象进行八次位置近似迭代，但这会增加处理器的参与度，因此需要小心处理，因为它可能会减慢应用程序的运行。
- en: 'The syntax is `physics.setPositionIterations(value)`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是 `physics.setPositionIterations(值)`：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: physics.setVelocityIterations
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`physics.setVelocityIterations`'
- en: This function sets the accuracy of the engine's velocity calculations. The default
    value is 3, meaning that the engine will iterate through three velocity approximations
    per frame for every object. However, this will increase processor engagement,
    so it should be handled carefully because it might slow down the application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数设置了引擎速度计算的精确度。默认值是3，意味着引擎将每帧为每个对象进行三次速度近似迭代。然而，这将增加处理器的参与度，因此需要小心处理，因为它可能会减慢应用程序的运行。
- en: 'The syntax is `physics.setVelocityIterations( value )`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是 `physics.setVelocityIterations(值)`：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Configuring the application
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置应用程序
- en: This tutorial is compatible for both iOS and Android devices. The graphics have
    been designed to accommodate the varying screen dimensions of both platforms.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程兼容 iOS 和 Android 设备。图形设计已调整以适应两个平台的多种屏幕尺寸。
- en: Build configuration
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建配置
- en: By default, all items displayed on all device screens are shown in the portrait
    mode. We'll be creating this game specifically in the landscape mode, so we'll
    have to alter some build settings and configure how all the items on the screen
    will be displayed. Playing the game in the landscape mode will actually add more
    player interactivity since the paddle will have more screen space to move about
    and less airtime for the ball.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有设备屏幕上显示的项目都以竖屏模式展示。我们将特别在横屏模式下创建这个游戏，因此我们需要更改一些构建设置并配置屏幕上所有项目的显示方式。在横屏模式下玩游戏实际上会增加更多玩家互动，因为挡板将有更多的屏幕空间移动，球体的空中时间也会减少。
- en: Time for action – adding the build.settings file
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间——添加 `build.settings` 文件
- en: 'The build-time properties can be provided in an optional `build.settings` file,
    which uses the Lua syntax. The `build.settings` file is used to set the application
    orientation and autorotation behavior along with a variety of platform-specific
    build parameters. To add the `build.settings` file in your project folder, perform
    the following steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时属性可以在可选的 `build.settings` 文件中提供，该文件使用 Lua 语法。`build.settings` 文件用于设置应用程序的屏幕方向和自动旋转行为以及各种特定平台的构建参数。要在你的项目文件夹中添加
    `build.settings` 文件，请执行以下步骤：
- en: Create a new project folder called `Breakout` on your desktop.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的桌面上创建一个名为 `Breakout` 的新项目文件夹。
- en: In your preferred text editor, create a new file called `build.settings` and
    save it in your project folder.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你偏好的文本编辑器中，创建一个名为 `build.settings` 的新文件，并将其保存在你的项目文件夹中。
- en: 'Type in the following lines:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下几行：
- en: '[PRE6]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save and close the file. The `build.settings` file is completed.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。`build.settings` 文件已完成。
- en: '*What just happened?*'
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The default orientation setting determines the initial launch orientation on
    the device and the initial orientation of the Corona simulator.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方向设置决定了设备上的初始启动方向以及 Corona 模拟器的初始方向。
- en: The default orientation doesn't affect Android devices. The orientation is initialized
    to the actual orientation of the device (unless only one orientation is specified).
    Also, the only supported orientations are `landscapeRight` and `portrait`. On
    a device, you can flip to either `landscapeRight` or `landscapeLeft`, but the
    operating system only reports one flavor of landscape, and Corona's orientation
    event chooses `landscapeRight`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方向不会影响 Android 设备。方向初始化为设备的实际方向（除非只指定了一个方向）。另外，唯一支持的方向是 `landscapeRight` 和
    `portrait`。在设备上，你可以切换到 `landscapeRight` 或 `landscapeLeft`，但操作系统只报告一种横屏模式，而 Corona
    的方向事件选择 `landscapeRight`。
- en: We have created this application to work with landscape orientations that support
    `landscapeRight`. We have set this orientation as its default so it won't switch
    to `landscapeLeft` or even any `portrait` mode. While working on an iOS device,
    if the `build.settings` isn't set before launching the application, it will go
    to the default portrait mode.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建这个应用程序是为了支持`landscapeRight`的横屏方向。我们将这个方向设置为默认值，这样它就不会切换到`landscapeLeft`或任何`portrait`模式。在iOS设备上工作时，如果在启动应用程序之前没有设置`build.settings`，它将进入默认的竖屏模式。
- en: Dynamic scaling
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态缩放
- en: Corona can target builds made for multiple devices across iOS and Android, which
    display various art assets in different resolutions. Corona can scale upward or
    downward depending on your starting resolution. It can also substitute higher-resolution
    image files when needed, ensuring that your app appears clear and sharp on all
    devices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Corona可以针对iOS和Android多个设备构建应用程序，显示不同分辨率的各种艺术资源。Corona可以根据你的起始分辨率向上或向下缩放。它还可以在需要时替换高分辨率的图像文件，确保你的应用程序在所有设备上清晰锐利。
- en: Time for action – adding the config.lua file
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间——添加`config.lua`文件
- en: 'If no content size is specified, the content width and height returned will
    be the same as the physical screen width and height of the device. If you specify
    a different content width and height in `config.lua`, the content width and height
    will take on those values. To add the config.lua file in your project folder,
    perform the following steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定内容大小，返回的内容宽度和高度将与设备的物理屏幕宽度和高度相同。如果在`config.lua`中指定了不同的内容宽度和高度，内容宽度和高度将采用这些值。要在你的项目文件夹中添加`config.lua`文件，请执行以下步骤：
- en: In your text editor, create a new file called `config.lua` and save it to your
    project folder.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中，创建一个名为`config.lua`的新文件，并将其保存到你的项目文件夹中。
- en: 'Type in the following lines:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下几行：
- en: '[PRE7]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save and close your file.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭你的文件。
- en: '*What just happened?*'
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The content width and height allow you to choose a virtual screen size that
    is independent of the physical device screen size. We have set the size to target
    the iPhone 3GS since it displays one of the common dimensions across most devices
    for both iOS and Android platforms.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 内容宽度和高度允许你选择一个与物理设备屏幕尺寸无关的虚拟屏幕尺寸。我们将尺寸设置为针对iPhone 3GS，因为它在iOS和Android平台的大多数设备上显示的是常见的尺寸之一。
- en: The scale used for this application is set to `letterbox`. It will uniformly
    scale up content as much as possible while still displaying all content on the
    screen.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序使用的缩放比例设置为`letterbox`。它将尽可能统一放大内容，同时仍然在屏幕上显示所有内容。
- en: We set `fps` to `60`. By default, the frame rate is 30 fps. In this application,
    this will make the movement of the ball appear faster and allow us to increase
    the speed conveniently. We can stretch the frame rate to 60 fps, which is the
    maximum that Corona can allow.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`fps`设置为`60`。默认情况下，帧率是30 fps。在这个应用程序中，这将使球的移动看起来更快，便于我们方便地提高速度。我们可以将帧率拉伸到60
    fps，这是Corona允许的最大值。
- en: Building the application
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: 'Now that we have configured our application to the landscape mode and set the
    display contents to scale on multiple devices, we''re ready to start designing
    the game. Before we start writing some code for the game, we need to add in some
    art assets that will be displayed on the screen. You can find them in the `Chapter
    3 Resources` folder. You can download the project files that accompany this book
    from the Packt Publishing website. The following are the files that you''ll need
    to add to your `Breakout` project folder:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将应用程序配置为横屏模式，并设置显示内容在多个设备上缩放，我们准备开始设计游戏。在我们开始为游戏编写代码之前，我们需要添加一些将在屏幕上显示的艺术资源。你可以在`第3章资源`文件夹中找到它们。你可以从Packt
    Publishing网站下载伴随这本书的项目文件。以下是你需要添加到你的`Breakout`项目文件夹中的文件：
- en: '`alertBox.png`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alertBox.png`'
- en: '`bg.png`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bg.png`'
- en: '`mmScreen.png`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mmScreen.png`'
- en: '`ball.png`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ball.png`'
- en: '`paddle.png`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paddle.png`'
- en: '`brick.png`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brick.png`'
- en: '`playbtn.png`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playbtn.png`'
- en: Displaying groups
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示组
- en: An important function that we'll be introducing in this game is `display.newGroup()`.
    Display groups allow you to add and remove child display objects and collect the
    related display objects. Initially, there are no children in a group. The local
    origin is at the parent object's origin; the anchor point is initialized to this
    local origin. You can easily organize your display objects in separate groups
    and refer to them by their group name. For example, in Breakout, we'll combine
    menu items such as the **Title** screen and **Play** button in a group called
    `menuScreenGroup`. Every time we access `menuScreenGroup`, any display object
    contained within the display group will be processed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在游戏中介绍一个重要的功能 `display.newGroup()`。显示组允许你添加和移除子显示对象，并收集相关的显示对象。最初，组中没有子对象。本地原点位于父对象的原点；锚点初始化为此本地原点。你可以轻松地将显示对象组织在单独的组中，并通过组名称引用它们。例如，在
    Breakout 中，我们将**标题**屏幕和**播放**按钮等菜单项组合在一个名为 `menuScreenGroup` 的组中。每次我们访问 `menuScreenGroup`，显示组中包含的任何显示对象都将被处理。
- en: display.newGroup()
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: display.newGroup()
- en: This function creates a group in which you can add and remove child display
    objects.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数创建了一个组，你可以在其中添加和移除子显示对象。
- en: The syntax is `display.newGroup()`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是 `display.newGroup()`。
- en: 'For example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Working with system functions
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用系统函数
- en: The system functions that we're going to introduce in this chapter will return
    information about the system (device information and current orientation) and
    control system functions (enabling multi-touch and controlling the idle time,
    accelerometer, and GPS). We'll be using the following system functions to return
    the environment information that our application will be running in and the response
    frequency for the accelerometer events.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中将要介绍的系统函数将返回有关系统（设备信息和当前方向）的信息，并控制系统函数（启用多点触控和控制空闲时间、加速度计和 GPS）。我们将使用以下系统函数返回应用程序将运行的环境信息以及加速度计事件的响应频率。
- en: system.getInfo()
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: system.getInfo()
- en: This function returns information about the system on which the application
    is running.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数返回有关应用程序正在运行上的系统的信息。
- en: 'The syntax is `system.getInfo(param)`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '语法是 `system.getInfo(param)`:'
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Valid values for parameters are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的有效值如下：
- en: '`"name"`: This returns the model name of the device. For example, on the iTouch,
    this would be the name of the phone as it appears in iTunes, such as "Pat''s iTouch".'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"name"`: 这将返回设备的型号名称。例如，在 iTouch 上，这将是出现在 iTunes 中的手机名称，如"Pat''s iTouch"。'
- en: '`"model"`: This returns the device type. These include:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"model"`: 这将返回设备类型。包括以下内容：'
- en: iPhone
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: iPhone
- en: iPad
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: iPad
- en: iPhone Simulator
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: iPhone 模拟器
- en: Nexus One
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nexus One
- en: Droid
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Droid
- en: myTouch
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: myTouch
- en: Galaxy Tab
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Galaxy Tab
- en: '`"deviceID"`: This returns a hash-encoded device ID of the device.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"deviceID"`: 这将返回设备的哈希编码设备 ID。'
- en: '`"environment"`: This returns the environment that the app is running on. These
    include:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"environment"`: 这将返回应用程序正在运行的环境。包括以下内容：'
- en: '`"simulator"`: The Corona simulator'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"simulator"`: Corona 模拟器'
- en: '`"device"`: iOS, Android device, and the Xcode simulator'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"device"`: iOS, Android 设备以及 Xcode 模拟器'
- en: '`"platformName"`: This returns the platform name (the OS name), which can be
    any one of the following:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"platformName"`: 这将返回平台名称（操作系统名称），可以是以下任何一个：'
- en: Mac OS X (Corona simulator on Mac)
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OS X (Corona 模拟器在 Mac 上)
- en: Win (Corona simulator on Windows)
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win (Corona 模拟器在 Windows 上)
- en: iPhone OS (all iOS devices)
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: iPhone OS (所有 iOS 设备)
- en: Android (all Android devices)
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android (所有 Android 设备)
- en: '`"platformVersion"`: This returns a string representation of the platform version.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"platformVersion"`: 这将返回平台版本的字符串表示。'
- en: '`"build"`: This returns the Corona build string.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"build"`: 这将返回 Corona 构建字符串。'
- en: '`"textureMemoryUsed"`: This returns the texture memory usage in bytes.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"textureMemoryUsed"`: 这将返回纹理内存使用量（字节）。'
- en: '`"maxTextureSize"`: This returns the maximum texture width or height supported
    by the device.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"maxTextureSize"`: 这将返回设备支持的最大纹理宽度或高度。'
- en: '`"architectureInfo"`: This returns a string that describes the underlying CPU
    architecture of the device you are running on.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"architectureInfo"`: 这将返回描述你正在运行的设备底层 CPU 架构的字符串。'
- en: system.setAccelerometerInterval()
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: system.setAccelerometerInterval()
- en: This function sets the frequency of accelerometer events. On the iPhone, the
    minimum frequency is 10 Hz and the maximum is 100 Hz. Accelerometer events are
    a significant drain on battery, so only increase the frequency when you need faster
    responses, as in games. Always try to lower the frequency whenever possible to
    conserve battery life.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数设置加速度计事件的频率。在iPhone上，最低频率为10 Hz，最高为100 Hz。加速度计事件对电池的消耗很大，因此只有在你需要更快响应时，比如在游戏中，才增加频率。尽可能降低频率以节省电池寿命。
- en: 'The syntax is `system.setAccelerometerInterval( frequency )`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是 `system.setAccelerometerInterval( frequency )`：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The function sets the sample interval in Hertz. Hertz is cycles per second,
    that is, the number of measurements to take per second. If you set the frequency
    to 75, then the system will take 75 measurements per second.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数设置样本间隔，单位为赫兹。赫兹是每秒的周期数，即每秒要进行的测量次数。如果你将频率设置为75，那么系统将每秒进行75次测量。
- en: After you have the assets from the `Chapter 3` `Resources` folder added in your
    project folder, we will begin writing some code!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 `第3章` 的 `Resources` 文件夹中的资源添加到你的项目文件夹后，我们将开始编写一些代码！
- en: Time for action – creating variables for the game
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手操作——为游戏创建变量
- en: For any application to start, we'll need to create a `main.lua` file. This has
    been discussed in [Chapter 2](ch02.html "Chapter 2. Lua Crash Course and the Corona
    Framework"), *Lua Crash Course and the Corona Framework*, when we worked with
    some sample code and ran it with the simulator.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动任何应用程序，我们需要创建一个 `main.lua` 文件。这在[第2章](ch02.html "第2章. Lua速成与Corona框架") *Lua速成与Corona框架*
    中讨论过，当时我们使用了一些示例代码并通过模拟器运行了它。
- en: 'The code will be structured accordingly in your `main.lua` file by the time
    the game is completed:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏完成时，代码将相应地在你的 `main.lua` 文件中构建：
- en: Necessary classes (for example, `physics` or `ui`)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要的类（例如，`physics` 或 `ui`）
- en: Variables and constants
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量和常量
- en: Main function
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主函数
- en: Object methods
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象方法
- en: Call main function (this has to be called always, or your application will not
    run)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用主函数（必须始终调用，否则你的应用程序将无法运行）
- en: Arranging your code to make it look like the preceding structure is a good practice
    on keeping things organized and running your application efficiently.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码组织成前面的结构是一种保持事物有序和高效运行应用程序的好习惯。
- en: In this section, we'll be introducing the display group that will show the main
    menu screen and a **Play** button that the user will be able to interact with
    in order to move on to the main game screen. All in-game elements such as the
    paddle, ball, brick objects, and heads-up display elements follow after the player
    interacts with the **Play** button. We'll also be introducing win and lose conditions
    that will be referred as `alertDisplayGroup`. All these game elements will be
    initialized in the beginning of our code.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一个显示组，该显示组将展示主菜单屏幕和一个**播放**按钮，用户可以通过与该按钮互动进入主游戏屏幕。游戏中的所有元素，如挡板、球、砖块对象以及抬头显示元素，都是在玩家与**播放**按钮互动后出现的。我们还将介绍胜利和失败的条件，这些条件将被称作`alertDisplayGroup`。所有这些游戏元素都将在代码开始时初始化。
- en: Create a new `main.lua` file in your text editor and save it to your project
    folder.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中创建一个新的 `main.lua` 文件，并将其保存到项目文件夹中。
- en: 'We''re going to hide the status bar (specifically for iOS devices) and load
    the physics engine. Corona uses the Box2D engine that is already built into the
    SDK:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将隐藏状态栏（特别是针对iOS设备）并加载物理引擎。Corona使用的是已经内置在SDK中的Box2D引擎：
- en: '[PRE11]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information on the Corona Physics API can be found on the Corona website
    at [http://docs.coronalabs.com/guide/physics/physicsSetup/index.html](http://docs.coronalabs.com/guide/physics/physicsSetup/index.html).
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关Corona物理API的更多信息可以在Corona网站找到，地址是[http://docs.coronalabs.com/guide/physics/physicsSetup/index.html](http://docs.coronalabs.com/guide/physics/physicsSetup/index.html)。
- en: The Box2D physics engine used in Corona SDK was written by Erin Catto of Blizzard
    Entertainment. More information on Box2D can be found at [http://box2d.org/manual.pdf](http://box2d.org/manual.pdf).
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Corona SDK中使用的Box2D物理引擎是由Blizzard Entertainment的Erin Catto编写的。关于Box2D的更多信息可以在[http://box2d.org/manual.pdf](http://box2d.org/manual.pdf)找到。
- en: 'Add in the menu screen objects:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加菜单屏幕对象：
- en: '[PRE12]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add in the in-game screen objects:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加游戏屏幕对象：
- en: '[PRE13]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add in HUD elements for the score and level:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加分数和等级的HUD元素：
- en: '[PRE14]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The HUD is also known as the heads-up display. It is a method of visually representing
    character information on the game screen.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HUD也被称为抬头显示。它是在游戏屏幕上视觉化表示角色信息的方法。
- en: 'Next, we''ll add in the alert display group for the win/lose conditions:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加用于胜利/失败条件的警告显示组：
- en: '[PRE15]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following variables hold the values for the bricks display group, score,
    ball velocity, and in-game events:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下变量保存了砖块显示组、得分、球速度和游戏内事件的值：
- en: '[PRE16]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Accelerometer events can only be tested on a device, so we''re going to add
    a variable for touch events on the paddle by calling the `"simulator"` environment.
    This is so that we can test the paddle movement in the Corona simulator. If you
    were to test the application on a device, the event listeners for touch and accelerometer
    on the paddle won''t conflict:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加速度计事件只能在设备上测试，因此我们将通过调用 `"simulator"` 环境为桨添加一个触摸事件变量。这样我们可以在 Corona 模拟器中测试桨的运动。如果你在设备上测试应用程序，桨上的触摸和加速度计事件监听器不会发生冲突：
- en: '[PRE17]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Lastly, add in the `main()` function. This will start our application:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，加入 `main()` 函数。这将启动我们的应用程序：
- en: '[PRE18]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*What just happened?*'
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `display.setStatusBar(display.HiddenStatusBar)` method is only applicable
    for iOS devices. It hides the appearance of the status bar on the device.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`display.setStatusBar(display.HiddenStatusBar)` 方法仅适用于 iOS 设备。它隐藏了设备上状态栏的外观。'
- en: The new Corona API that we added to this game is the physics engine. We'll be
    adding physics parameters to the main game objects (paddle, ball, and bricks)
    for collision detection. Having `setGravity(0,0)` will allow the ball to bounce
    around the playing field freely.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个游戏添加的新 Corona API 是物理引擎。我们将为主要的游戏对象（桨、球和砖块）添加物理参数以进行碰撞检测。设置 `setGravity(0,0)`
    将允许球在游戏场内自由弹跳。
- en: The `local menuScreenGroup`, `local alertDisplayGroup`, and `local bricks` objects
    are all forms of display groups that we can separate and organize our display
    objects in. For example, `local menuScreenGroup` is designated for objects that
    show up on the main menu screen. Hence, they can be removed as a group and not
    as individual objects.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`local menuScreenGroup`、`local alertDisplayGroup` 和 `local bricks` 对象都是显示组的类型，我们可以通过它们来分离和组织显示对象。例如，`local
    menuScreenGroup` 专门用于主菜单屏幕上出现的对象。因此，它们可以作为一个组被移除，而不是单个对象。'
- en: Some of the variables added already have values that are applied to certain
    game objects. There is already a set velocity for the ball using `local vx = 3`
    and `local vy = -3`. The x and y velocities determine how the ball moves on the
    game screen. Depending on the position the ball collides with an object, the ball
    will follow a continuous path. The `brickWidth` and `brickHeight` objects have
    a value that will stay constant throughout the application, so we can line the
    brick objects evenly onscreen.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 某些已添加的变量已经具有应用于特定游戏对象的值。球体已经使用 `local vx = 3` 和 `local vy = -3` 设置了速度。x 和 y
    速度决定了球在游戏屏幕上的移动方式。根据球与对象碰撞的位置，球将沿着连续的路径移动。`brickWidth` 和 `brickHeight` 对象具有在应用程序的整个过程中保持恒定的值，因此我们可以将砖块对象在屏幕上均匀排列。
- en: '`local gameEvent = " "` will store the game events such as `"win"`, `"lose"`,
    and `"finished"`. When a function checks the game status for any of these events,
    it will display the proper condition on screen.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`local gameEvent = " "` 将存储游戏事件，如 `"win"`、`"lose"` 和 `"finished"`。当函数检查游戏状态是否有这些事件之一时，它将在屏幕上显示适当的状态。'
- en: We have added some system functions as well. We created `local isSimulator =
    "simulator" == system.getInfo("environment")` so that it returns information about
    the system on which the application is running. This will be directed for the
    paddle touch events so that we can test the application in the simulator. If the
    build were to be ported on a device, you would only be able to use the accelerometer
    to move the paddle. The simulator can't test accelerometer events. The other system
    function is `system.setAccelerometerInterval( 100 )`. It sets the frequency of
    the accelerometer events. The minimum frequency on an iPhone is 10 Hz and the
    maximum is 100 Hz.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还加入了一些系统函数。我们创建了 `local isSimulator = "simulator" == system.getInfo("environment")`
    以返回有关运行应用程序的系统的信息。这将用于桨触控事件，以便我们可以在模拟器中测试应用程序。如果将构建移植到设备上，你只能使用加速度计来移动桨。模拟器无法测试加速度计事件。另一个系统函数是
    `system.setAccelerometerInterval( 100 )`。它设置了加速度计事件的频率。iPhone 上的最低频率是 10 Hz，最高是
    100 Hz。
- en: The `main()` empty function set will start out the display hierarchy. Think
    of it as a storyboard. The first thing you see is an introduction, and then some
    action happens in the middle that tells you about the main content. In this case,
    the main content is the game play. The last thing you see is some kind of ending
    or closure to tie the story together. The ending is the display of the win/lose
    conditions at the end of a level.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`空函数集将开始显示层次结构。可以把它看作是一个故事板。你首先看到的是介绍，然后中间发生一些动作，告诉你主要内容是什么。在这种情况下，主要内容是游戏玩法。你最后看到的是某种结尾或闭合，将故事联系在一起。结尾是在关卡结束时显示的胜负条件。'
- en: Understanding events and listeners
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事件和监听器
- en: Events are sent to listeners that are executed by a touch on the mobile screen,
    tap, accelerometer, and so on. Functions or objects can be event listeners. When
    an event occurs, the listener is called by a table that represents the event.
    All events will have a property name that identifies the kind of event.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 事件被发送到监听者，由移动屏幕上的触摸、点击、加速度计等执行。函数或对象可以作为事件监听器。当事件发生时，监听器将被调用，并通过一个表示事件的表进行通知。所有事件都将有一个标识事件类型的属性名。
- en: Register events
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册事件
- en: 'Display objects and global runtime objects can be event listeners. You can
    add and remove listeners for events using the following object methods:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 显示对象和全局运行时对象可以作为事件监听器。你可以使用以下对象方法添加和移除事件监听器：
- en: '`object:addEventListener()`: This adds a listener to the object''s list of
    listeners. When the named event occurs, the listener will be invoked and supplied
    with a table that represents the event.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:addEventListener()`: 这将一个监听器添加到对象的监听器列表中。当命名的事件发生时，将调用监听器，并提供一个表示事件的表。'
- en: '`object:removeEventListener()`: This removes the specified listener from the
    object''s list of listeners so that it is no longer notified of events that correspond
    to the specified event.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:removeEventListener()`: 这将指定的监听器从对象监听器列表中移除，使其不再接收与指定事件对应的事件通知。'
- en: 'In the following example, an image display object registers to receive a touch
    event. Touch events are not broadcast globally. Display objects that register
    for the event and lie underneath it will be candidates to receive the event:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，一个图像显示对象注册以接收触摸事件。触摸事件不会全局广播。注册了事件并在其下方的显示对象将成为接收事件的候选对象：
- en: '[PRE19]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Runtime events are sent by the system. They broadcast to all listeners. The
    following is an example of registering for an `enterFrame` event:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时事件由系统发送，会广播给所有监听者。以下是注册`enterFrame`事件的一个例子：
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Runtime events
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时事件
- en: The application that we're creating uses runtime events. Runtime events have
    no specific target and are only sent to the global runtime. They broadcast to
    all registered listeners.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建的应用程序使用了运行时事件。运行时事件没有特定的目标，只发送到全局运行时。它们广播给所有注册的监听者。
- en: 'Runtime events are sent by the system. They broadcast to all listeners. The
    following is an example of registering for an `enterFrame` event:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时事件由系统发送，会广播给所有监听者。以下是注册`enterFrame`事件的一个例子：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The following events all have string names and will be applied to the Breakout
    game.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下事件都有字符串名称，并将应用于Breakout游戏。
- en: enterFrame
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: enterFrame
- en: The `enterFrame` events occur at the frame interval of the application. They
    are only sent to the global runtime object. For example, if the frame rate is
    30 fps, then it will occur approximately 30 times per second.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`enterFrame`事件在应用程序的帧间隔发生。它们只发送到全局运行时对象。例如，如果帧率是30 fps，那么它将大约每秒发生30次。'
- en: 'The following properties are available in this event:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件中可用的属性如下：
- en: '`event.name` is the string `"enterFrame"`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name`是字符串`"enterFrame"`'
- en: '`event.time` is the time in milliseconds since the start of the application'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.time`是自应用程序开始以来的毫秒数'
- en: Accelerometer
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速度计
- en: Accelerometer events let you detect movements and determine the device's orientation
    in relation to gravity. These events are only sent to devices that support accelerometer.
    They are only sent to the global runtime object.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计事件允许你检测移动并确定设备相对于重力的方向。这些事件只发送到支持加速度计的设备。它们只发送到全局运行时对象。
- en: 'The following properties are available for this event:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件可用的属性如下：
- en: '`event.name` is the string `"accelerometer"`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name`是字符串`"accelerometer"`'
- en: '`event.xGravity` is the acceleration due to gravity in the *x* direction'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.xGravity`是*x*方向上的重力加速度'
- en: '`event.yGravity` is the acceleration due to gravity in the *y* direction'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.yGravity` 是 *y* 方向的由重力引起的加速度。'
- en: '`event.zGravity` is the acceleration due to gravity in the *z* direction'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.zGravity` 是 *z* 方向的由重力引起的加速度。'
- en: '`event.xInstant` is the instantaneous acceleration in the *x* direction'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.xInstant` 是 *x* 方向的瞬时加速度。'
- en: '`event.yInstant` is the instantaneous acceleration in the *y* direction'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.yInstant` 是 *y* 方向的瞬时加速度。'
- en: '`event.zInstant` is the instantaneous acceleration in the *z* direction'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.zInstant` 是 *z* 方向的瞬时加速度。'
- en: '`event.isShake` is true when the user shakes the device'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.isShake` 是当用户摇动设备时为真。'
- en: Touch events
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触摸事件（Touch events）
- en: When the user's finger touches the screen, a hit event is generated and dispatched
    to display objects in the display hierarchy. Only those objects that intersect
    with the location of the finger on the screen will potentially receive the event.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户的手指触摸屏幕时，会生成一个命中事件并将其派发到显示层次结构中的显示对象。只有与屏幕上手指位置相交的对象才可能接收到事件。
- en: Touch (single touch)
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单点触摸（Touch，single touch）
- en: Touch events are a special kind of hit event. When a user's finger touches the
    screen, they are starting a sequence of touch events, each with different phases.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸事件是一种特殊的命中事件。当用户的手指触摸屏幕时，它们开始了一系列具有不同阶段的触摸事件。
- en: '`event.name` is the string `"touch"`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name` 是字符串 `"touch"`。'
- en: '`event.x` is the *x* position in the screen coordinates of the touch'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.x` 是触摸点在屏幕坐标中的 *x* 位置。'
- en: '`event.y` is the *y* position in the screen coordinates of the touch'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.y` 是触摸点在屏幕坐标中的 *y* 位置。'
- en: '`event.xStart` is the *x* position of the touch from the `"began"` phase of
    the touch sequence'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.xStart` 是触摸序列 `"began"` 阶段的 *x* 位置。'
- en: '`event.yStart` is the *y* position of the touch from the `"began"` phase of
    the touch sequence'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.yStart` 是触摸序列 `"began"` 阶段的 *y* 位置。'
- en: '`event.phase` is a string that identifies where in the touch sequence the event
    occurred:'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.phase` 是一个字符串，用于标识事件在触摸序列中的哪个阶段发生：'
- en: '`"began"`: This indicates that a finger touched the screen'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"began"`：这表示手指触摸了屏幕。'
- en: '`"moved"`: This indicates that a finger moved on the screen'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"moved"`：这表示手指在屏幕上移动。'
- en: '`"ended"`: This indicates that a finger was lifted from the screen'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"ended"`：这表示手指从屏幕上抬起。'
- en: '`"cancelled"`: This indicates that the system canceled tracking of the touch'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"cancelled"`：这表示系统取消了触摸的跟踪。'
- en: tap
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轻击（tap）
- en: 'It generates a hit event when the user touches the screen. The event is dispatched
    to display objects in the display hierarchy. This is similar to the touch event,
    except that a hit count (number of taps) is available in the event callback and
    doesn''t use event phases. The event APIs are as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户触摸屏幕时，它会生成一个命中事件。该事件被派发到显示层次结构中的显示对象。这与触摸事件类似，不同之处在于事件回调中提供了点击次数（轻击次数），并且不使用事件阶段。事件
    API 如下：
- en: '`event.name` is the string `"tap"`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name` 是字符串 `"tap"`。'
- en: '`event.numTaps` returns the number of taps on the screen'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.numTaps` 返回屏幕上的轻击次数。'
- en: '`event.x` is the *x* position in the screen coordinates of the tap'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.x` 是轻击在屏幕坐标中的 *x* 位置。'
- en: '`event.y` is the *y* position in the screen coordinates of the tap'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.y` 是触摸点在屏幕坐标中的 *y* 位置。'
- en: Transitions
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡（Transitions）
- en: 'In this chapter, we''ll be touching base with `transition.to()` and `transition.from()`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 `transition.to()` 和 `transition.from()`：
- en: '`transition.to()`: This animates a display object''s properties over time using
    the `easing` transitions.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition.to()`：这会随着时间的推移，使用 `easing` 过渡动画显示对象的属性。'
- en: The syntax is `handle = transition.to( target, params )`.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法为 `handle = transition.to( target, params )`。
- en: '`transition.from()`: This is similar to `transition.to()` except that the starting
    property values are specified in the function''s parameter table, and the final
    values are the corresponding property values in the target prior to the call.
    The syntax is `handle = transition.from( target, params )`.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition.from()`：这与 `transition.to()` 类似，不同之处在于起始属性值在函数参数表中指定，最终值是在调用之前目标中的相应属性值。语法为
    `handle = transition.from( target, params )`。'
- en: 'The parameters used are as follows:'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用的参数如下：
- en: '`target`: This is a display object that will be the target of the transition.'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`：这是过渡动画的目标显示对象。'
- en: '`params`: This is a table that specifies the properties of the display object,
    which will be animated, and one or more of the following optional non-animated
    properties:'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params`：这是一个指定将进行动画的显示对象属性以及以下一个或多个可选的非动画属性的表：'
- en: '`params.time`: This specifies the duration of the transition in milliseconds.
    By default, the duration is 500 ms (0.5 seconds).'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.time`：这指定了过渡的持续时间（以毫秒为单位）。默认情况下，持续时间为500毫秒（0.5秒）。'
- en: '`params.transition`: This is by default `easing.linear`.'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.transition`：默认为`easing.linear`。'
- en: '`params.delay`: This specifies the delay in milliseconds (none by default)
    before the tween begins.'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.delay`：这指定了补间开始前延迟的毫秒数（默认为无）。'
- en: '`params.delta`: This is a Boolean that specifies whether non-control parameters
    are interpreted as final ending values or as changes in value. The default is
    `nil`, meaning false.'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.delta`：这是一个布尔值，指定非控制参数是作为最终结束值还是作为值的变化来解释。默认为`nil`，即假。'
- en: '`params.onStart`: This is a function or table listener that is called before
    the tween begins.'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.onStart`：这是一个在补间开始之前调用的函数或表监听器。'
- en: '`params.onComplete`: This is a function or a table listener that is called
    after the tween completes.'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.onComplete`：这是一个在补间完成后调用的函数或表监听器。'
- en: 'For example:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE22]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding example shows how two display objects transition throughout the
    space on a device screen. From its current position, the `square` display object
    will move to a new location of `x = 250` and `y = 400` in 1500 milliseconds. The
    `square2` display object will transition from `x = 275` and `y = 0` to its initial
    location in 1500 milliseconds.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例展示了两个显示对象如何在设备屏幕上过渡空间。从当前位置开始，`square`显示对象将在1500毫秒内移动到新的位置`x = 250`和`y
    = 400`。`square2`显示对象将从`x = 275`和`y = 0`的位置在1500毫秒内过渡到其初始位置。
- en: Creating menu screens
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建菜单屏幕
- en: Having menu screens allows the player to transition through different parts
    of your application. Typically, a game will start out with some kind of screen
    that displays the game title with an interactive user interface button labeled
    **Play** or **Start** to give the player the option to play the game. It is standard
    in any mobile application to have a menu screen before transitioning to the main
    content.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有菜单屏幕可以让玩家在应用程序的不同部分之间过渡。通常，游戏会从显示游戏标题的某种屏幕开始，并带有一个标有**播放**或**开始**的交互式用户界面按钮，让玩家选择玩游戏。在任何移动应用程序中，在过渡到主要内容之前都有一个菜单屏幕是标准的。
- en: Time for action – adding the main menu screen
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加主菜单屏幕
- en: The main menu screen will be the first thing in our menu system that the player
    interacts with after the application is launched. It's a great way to introduce
    the title of the game and also give the player an idea of what type of gaming
    environment they should expect. We wouldn't want the player to jump abruptly into
    the app without any proper notification. It's important to allow the player to
    prepare for what is to come when they launch the app.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 主菜单界面将是玩家在应用程序启动后与菜单系统交互的第一个东西。这是介绍游戏标题并让玩家了解他们将面对的游戏环境类型的好方法。我们肯定不希望玩家在没有适当通知的情况下突然跳入应用程序。当玩家启动应用程序时，让他们为即将到来的内容做好准备是很重要的。
- en: 'We''re going to create a function called `mainMenu()` to introduce the title
    screen. So after `function main()` ends, add in the following lines:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`mainMenu()`的函数来介绍标题屏幕。所以，在`function main()`结束后，加入以下几行：
- en: '[PRE23]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We''ll be adding in a display group and two display objects to this function.
    One display object is the image that will represent the main menu screen, and
    the other will be a UI button called **Play**. Add them inside `function mainMenu()`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将向这个函数中添加一个显示组和两个显示对象。一个显示对象是将代表主菜单屏幕的图像，另一个是一个名为**播放**的UI按钮。将它们添加到`function
    mainMenu()`内部：
- en: '[PRE24]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Remember the empty `main()` function set? We need to call `mainMenu()` inside
    it. The entire function should look like this:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得那个空的`main()`函数集吗？我们需要在其中调用`mainMenu()`。整个函数应该像这样：
- en: '[PRE25]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After the `mainMenu()` function, we''re going to create another function called
    `loadGame()`. This function will initiate the event from `playbtn` to transition
    to the main game screen. The event will change the alpha of `menuScreenGroup`
    to `0`, which makes it invisible on the screen. Complete the transition by calling
    the `addGameScreen()` function (`addGameScreen()` will be discussed later in the
    *Time for action – adding game objects* section of this chapter):'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mainMenu()`函数之后，我们将创建另一个名为`loadGame()`的函数。这个函数将初始化来自`playbtn`的事件以过渡到主游戏屏幕。事件将改变`menuScreenGroup`的alpha为`0`，使其在屏幕上不可见。通过调用`addGameScreen()`函数完成过渡（将在本章的*行动时间——添加游戏对象*部分讨论`addGameScreen()`）：
- en: '[PRE26]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we need to add in an event listener to `playBtn`, so when it is tapped,
    it will call the `loadGame()` function. Add the following line in the `mainMenu()`
    function after the last method:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为`playBtn`添加一个事件监听器，这样当它被点击时，就会调用`loadGame()`函数。在`mainMenu()`函数中的最后一个方法后添加以下这行代码：
- en: '[PRE27]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run the project in the simulator. You should see the main menu screen display
    **Breakout** and the **Play** button.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器中运行项目。你应该会看到主菜单屏幕显示**Breakout**和**Play**按钮。
- en: '*What just happened?*'
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Creating a main menu screen only requires a couple of blocks of code. For `loadGame(event)`,
    we passed a parameter called `event`. When the `if` statement is called, it takes
    `playbutton`, which references to the display object `playBtn`, and checks to
    see whether it is true. Since it is, the `menuScreenGroup` will be removed from
    the stage and called in the `addGameScreen()` function. At the same time, the
    event listener for `playBtn` is removed from the scene.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个主菜单屏幕只需要几块代码。对于`loadGame(event)`，我们传递了一个名为`event`的参数。当调用`if`语句时，它取`playbutton`，它引用显示对象`playBtn`，并检查它是否为真。既然如此，`menuScreenGroup`将从舞台中移除并在`addGameScreen()`函数中被调用。同时，`playBtn`的事件监听器将从场景中移除。
- en: Have a go hero – creating a help screen
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手试试——创建帮助屏幕
- en: Right now, the design of the menu system is set up so that from the main menu
    screen it transitions to the game play screen. You have the option to extend the
    menu screens without jumping into the game right away. Something additional that
    can be added is a help menu screen after the main menu screen, which explains
    to the players how to play the game.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，菜单系统的设计是设置成从主菜单屏幕过渡到游戏玩法屏幕。你可以选择扩展菜单屏幕，而不必立即跳转到游戏中。可以在主菜单屏幕之后添加的一个额外功能是帮助菜单屏幕，它向玩家解释如何玩游戏。
- en: Create a new image in your preferred image editing program and write out the
    steps for how to play the game. You can then create a new button called **Next**
    and add both art assets to your project folder. In your code, you'll have to create
    a new function and event listener for your **Next** button, which will transition
    to the game play screen.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在你喜欢的图像编辑程序中创建一个新的图像，并写出如何进行游戏的步骤。然后你可以创建一个名为**Next**的新按钮，并将这两个艺术资源添加到你的项目文件夹中。在你的代码中，你将必须为你的**Next**按钮创建一个新的函数和事件监听器，它会过渡到游戏玩法屏幕。
- en: Creating the game play scene
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建游戏玩法场景
- en: Now that we have a menu system in place, we can start on the game play elements
    of the application. We'll start adding all of the main game objects that the player
    will interact with. One thing to note when adding in game objects is their placement
    on the screen. Given that this game will be played in the landscape mode, we have
    to remember that there is plenty of space available in the *x* direction and a
    smaller amount in the *y* direction. Based on the original design of the game,
    the bottom wall of the screen causes the player to lose the level or turn if the
    ball lands in that area. So if we were to pinpoint an area to place the paddle
    object, we wouldn't set it near the top of the screen. It makes more sense for
    the paddle to be as close to the bottom of the screen to protect the ball better.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个菜单系统在位，我们可以开始处理应用程序的游戏玩法元素。我们将开始添加玩家将与之互动的所有主要游戏对象。在添加游戏对象时需要注意的一件事是它们在屏幕上的位置。考虑到这个游戏将在横屏模式下进行，我们必须记住在*x*方向上有足够的空间，而在*y*方向上的空间较少。根据游戏的原始设计，屏幕底部的墙壁会导致玩家失去关卡或转向，如果球落在这个区域。因此，如果我们要确定一个放置挡板对象的位置，我们不会将其设置在屏幕顶部附近。让挡板尽可能靠近屏幕底部以更好地保护球更有意义。
- en: Time for action – adding game objects
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间——添加游戏对象
- en: 'Let''s add in the display objects the player will see while in game play:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加玩家在游戏玩法中会看到的显示对象：
- en: 'After the `loadGame()` function, we''re going to create another function that
    will display all our game objects on screen. The following lines will display
    the art assets that were created for this tutorial:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`loadGame()`函数之后，我们将创建另一个函数，用于在屏幕上显示所有游戏对象。以下几行将显示为这个教程创建的艺术资源：
- en: '[PRE28]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we''ll add in the text that will display the score and level number during
    the game:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加在游戏中显示分数和关卡编号的文本：
- en: '[PRE29]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To build the first game level, we''re going to call the `gameLevel1()` function,
    which will be explained later in this chapter. Don''t forget to close the `addGameScreen()`
    function with `end`:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了构建第一个游戏关卡，我们将调用`gameLevel1()`函数，该函数将在本章后面解释。别忘了用`end`结束`addGameScreen()`函数：
- en: '[PRE30]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*What just happened?*'
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `addGameScreen()` function displays all the game objects shown during game
    play. We have added the `background`, `paddle`, and `ball` display objects from
    the art assets provided for this chapter.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`addGameScreen()` 函数显示游戏过程中出现的所有游戏对象。我们从本章提供的美工资源中添加了 `background`、`paddle`
    和 `ball` 显示对象。'
- en: We have added text for the score and level at the top of the game screen. `scoreNum`
    is initially set to `0`. In the next chapter, we'll discuss how to update the
    score number when a brick collision is made. `levelNum` starts at 1, updates when
    the level is completed, and moves on to the next one.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在游戏屏幕顶部添加了分数和等级的文本。`scoreNum` 最初设置为 `0`。在下一章，我们将讨论当砖块碰撞时如何更新分数。`levelNum`
    从1开始，完成等级后更新，并进入下一个等级。
- en: We ended the function by calling `gameLevel1()`, which will be implemented in
    the next section to start the first level.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用 `gameLevel1()` 来结束函数，这将在下一节中实现，以开始第一关。
- en: Time for action – building bricks
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——构建砖块。
- en: 'The bricks are the last of the game objects we need to add in for this application.
    We''ll be creating two different levels for this game. Each one will have a different
    brick layout from the other:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 砖块是我们需要为这个应用程序添加的最后一个游戏对象。我们将为这个游戏创建两个不同的等级，每个等级的砖块布局都不同于另一个：
- en: 'We''re going to create the function for the first level. Let''s create a new
    function, `gameLevel1()`. We will also set `currentLevel` to `1` since the application
    begins at level 1\. Then, we''ll add in the `bricks` display group and set it
    as `toFront()` so that it appears in front of the game background:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要为第一关创建一个函数。让我们创建一个新函数 `gameLevel1()`。我们还将 `currentLevel` 设置为 `1`，因为应用程序从第一关开始。然后，我们将添加
    `bricks` 显示组并将其设置为 `toFront()`，使其在游戏背景前显示：
- en: '[PRE31]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The method `object:toFront()` moves the target object to the visual front of
    its parent group (`object.parent`). In this case, we are setting the `bricks`
    group to appear as the front-most display group during game play so that it appears
    in front of the background image.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`object:toFront()` 方法将目标对象移动到其父组 (`object.parent`) 的视觉最前方。在这种情况下，我们将 `bricks`
    组设置为游戏过程中最前端的显示组，使其在背景图片前方显示。'
- en: 'Next, add some local variables that will show how many rows and columns of
    bricks will be displayed on screen and where each brick will be placed in the
    playing field:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一些局部变量，以显示屏幕上将显示多少行和列的砖块，以及每个砖块在游戏场中的位置：
- en: '[PRE32]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create double `for` loops, one for `numOfRows` and the other for `numOfColumns`.
    Create a brick instance placed according to its width, height, and the number
    corresponding to `numOfRows` and `numOfColumns`. The art asset for the brick display
    object is provided with this chapter. Then, close the function with `end`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建双重 `for` 循环，一个用于 `numOfRows`，另一个用于 `numOfColumns`。根据其宽度、高度以及 `numOfRows` 和
    `numOfColumns` 的对应数字创建一个砖块实例。本章提供了砖块显示对象的美工资源。然后，使用 `end` 结束函数：
- en: '[PRE33]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The setup for level 2 is similar to how level 1 is arranged. The code is almost
    the same, except that our new function is called `gameLevel2()`, `currentLevel`
    is set to `2`, and the values for `numOfRows` and `numOfColumns` have different
    values. Add the following block after the `gameLevel1()` function:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二关的设置与第一关的排列类似。代码几乎相同，除了我们新的函数名为 `gameLevel2()`，`currentLevel` 设置为 `2`，并且 `numOfRows`
    和 `numOfColumns` 的值不同。在 `gameLevel1()` 函数后添加以下代码块：
- en: '[PRE34]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Save your file and relaunch the simulator. You'll be able to interact with the
    **Play** button and see the transition from the main menu screen to the game screen.
    You will see the game layout for level 1 displayed on screen.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的文件并重新启动模拟器。你将能够与 **Play** 按钮互动，并从主菜单屏幕过渡到游戏屏幕。你将在屏幕上看到第一关的游戏布局。
- en: '*What just happened?*'
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `bricks` display group is set as `bricks:toFront()`. This means that the
    group will always be put in front of the display hierarchy, apart from the `background`,
    `paddle`, and `ball` display objects.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`bricks` 显示组被设置为 `bricks:toFront()`。这意味着除了 `background`、`paddle` 和 `ball` 显示对象之外，该组将始终位于显示层次结构的前面。'
- en: The `gameLevel1()` method has set values for the amount of brick objects displayed
    in the playing field. They will be centered based on `contentWidth` of the device
    shell and set at `50` in the y direction. The brick group is placed near the top
    left-hand corner by `brickPlacement`, takes the middle of the screen, and subtracts
    it by half the width of all the brick objects put together. Then, we add 20 more
    pixels in the x direction to center it with the paddle.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`gameLevel1()`方法为游戏场地中显示的砖块对象数量设定了固定值。它们将基于设备外壳的`contentWidth`居中，并在y方向上设置为`50`。通过`brickPlacement`将砖块组放置在左上角附近，占据屏幕中间位置，并减去所有砖块对象总宽度的一半。然后在x方向上再加上20个像素，使其与挡板居中。'
- en: We created double `for` loops for `numOfRows` and `numOfColumns`, which start
    the creation of the brick objects from the left-hand corner of the screen.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`numOfRows`和`numOfColumns`创建了双层`for`循环，从屏幕左上角开始创建砖块对象。
- en: 'Notice that the `brick` display object is given the name `brick`. Just remember
    that `brick` cannot be used the same way as `brick` when calling the object. The
    `brick` object is an instance of `brick`. It is merely used as a string when event
    parameters are called, for example:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`brick`显示对象被命名为`brick`。只需记住，在调用对象时，不能像使用`brick`那样使用`brick`。`brick`对象是`brick`的一个实例。它仅当调用事件参数时作为字符串使用，例如：
- en: '[PRE35]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The physics body of `brick` is set to `"static"`, so it is not affected by gravity
    pulling down. Then, it is added to the `bricks` group under `bricks.insert(bricks,
    brick)`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick`的物理体被设置为`"static"`，因此它不会受到重力下拉的影响。然后，通过`bricks.insert(bricks, brick)`将其添加到`bricks`组中。'
- en: Have a go hero – focused platform gaming
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做一个尝试英雄——专注于平台游戏
- en: On completing this chapter and the next one, feel free to redesign the display
    images to focus on a specific platform. For example, you can easily convert the
    code to be compatible for all iOS devices. This can be done by converting display
    objects to `display.newImageRect( [parentGroup,] filename [, baseDirectory] w,
    h )`, so you can substitute image dimensions on devices with larger screen sizes
    (such as iPhone 5/Samsung Galaxy S5). Remember that you'll have to adjust your
    configuration settings to have the changes applied. This pertains to adding a
    unique image suffix (or your preferred suffix naming convention) to your `config.lua`
    file.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本章和下一章后，请随意重新设计显示图像，以便关注特定平台。例如，你可以轻松地将代码转换为兼容所有iOS设备。这可以通过将显示对象转换为`display.newImageRect(
    [parentGroup,] filename [, baseDirectory] w, h )`来实现，这样你就可以替换具有更大屏幕尺寸的设备（如iPhone
    5/Samsung Galaxy S5）上的图像尺寸。请记住，你将不得不调整配置设置以应用这些更改。这涉及到在你的`config.lua`文件中添加独特的图像后缀（或你喜欢的后缀命名约定）。
- en: Red alert!
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 红色警报！
- en: In every game, there is some kind of message that tells you the status of your
    progress when the main action has ended. For this application, we need a way to
    let the player know if they have won or lost a round, how they can play again,
    or when the game is officially completed.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个游戏中，当主要动作结束时，都会有一种消息告诉你进度状态。对于这个应用程序，我们需要一种方法让玩家知道他们是否赢得或输掉了一轮，他们如何再次玩，或者游戏何时正式完成。
- en: Time for action – displaying game messages
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候采取行动了——显示游戏消息
- en: 'Let''s set up some win/lose notifications so that we can display these events
    that occur in game:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一些胜利/失败的提示，以便我们可以显示游戏中发生的事件：
- en: 'Create a new function called `alertScreen()` and pass two parameters called
    `title` and `message`. Add in a new display object called `alertbox` and have
    it transition from `xScale` and `yScale` of 0.5 using `easing.outExpo`:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`alertScreen()`的新函数，并传递两个名为`title`和`message`的参数。添加一个新的显示对象`alertbox`，并使用`easing.outExpo`使其从`xScale`和`yScale`为0.5的过渡效果：
- en: '[PRE36]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Store the `title` parameter in the text object called `conditionDisplay`:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`title`参数存储在名为`conditionDisplay`的文本对象中：
- en: '[PRE37]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Store the `message` parameter in the text object called `messageText`:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`message`参数存储在名为`messageText`的文本对象中：
- en: '[PRE38]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a new display group called `alertDisplayGroup` and insert all the objects
    into the group. Close the function:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的显示组，名为`alertDisplayGroup`，并将所有对象插入到该组中。关闭函数：
- en: '[PRE39]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Save your file and run the project in the simulator. The functionality of the
    **Play** button still goes to the game play screen for **Level: 1**. Currently,
    none of the objects have any movement. We''ll be adding touch events, ball movement,
    and collisions in the next chapter. All the game objects should be laid out as
    shown in the following screenshot:![Time for action – displaying game messages](img/9343OT_03_05.jpg)'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '保存你的文件并在模拟器中运行项目。**Play**按钮的功能仍然会进入**Level: 1**的游戏玩法屏幕。目前，所有对象都没有任何移动。我们将在下一章添加触摸事件、球体移动和碰撞。所有游戏对象应如以下截图所示布局：![Time
    for action – displaying game messages](img/9343OT_03_05.jpg)'
- en: '*What just happened?*'
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have set up the alert system for the game, but it is not operable at the
    moment until we add in more game functions to set the game objects in motion.
    The next chapter will demonstrate how the `alertScreen()` function passes two
    parameters, `title` and `message`. An `alertBox` display object is added as a
    background to the alert texts when they pop up after a condition occurs. When
    the `alertBox` pops up, it transitions from 0.5 of `xScale` and `yScale` to full
    image scale in 500 milliseconds. This is basically the equivalent of half a second.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为游戏设置了警报系统，但在我们添加更多游戏功能使游戏对象动起来之前，它目前还不能操作。下一章将展示`alertScreen()`函数如何传递两个参数，`title`和`message`。当满足条件后，`alertBox`显示对象会作为警报文本的背景弹出。当`alertBox`弹出时，它会从0.5的`xScale`和`yScale`过渡到全图像大小，耗时500毫秒。这基本上相当于半秒钟。
- en: The `conditionDisplay` object passes the `title` parameter. This will be the
    text that displays **You Win** or **You Lose**.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`conditionDisplay`对象传递`title`参数。这将显示**You Win**或**You Lose**的文本。'
- en: The `messageText` object passes the `message` parameter. The text with this
    parameter displays a message such as **Play Again** or **Continue** after a condition
    is reached.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`messageText`对象传递`message`参数。当达到某个条件后，带有此参数的文本会显示如**Play Again**或**Continue**的消息。'
- en: All the objects in this function are then inserted into `alertDisplayGroup =
    display.newGroup()`. They will act as one group instead of individual objects
    when they appear on and off the stage.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数中的所有对象都将被插入到`alertDisplayGroup = display.newGroup()`中。它们在舞台上出现和消失时，会作为一个整体而不是单独的对象。
- en: When running the code in the simulator, if errors pop up in your terminal window,
    be sure to check the line(s) that caused the errors. Sometimes, a simple capitalization
    error or even a comma or quotation mark that is missing can keep your app from
    running in the simulator. Make sure you're aware of those common mistakes. They
    can be easily overlooked.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器中运行代码时，如果终端窗口出现错误，务必检查导致错误的行。有时，一个简单的字母大小写错误，甚至是一个缺失的逗号或引号，都可能导致你的应用无法在模拟器中运行。请留意这些常见错误，它们很容易被忽视。
- en: You can refer to the `Breakout – Part 1` folder in the `Chapter 3` folder to
    see how the first half of the code for this tutorial is set up.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考`第三章`文件夹中的`Breakout – Part 1`文件夹，了解本教程前半部分代码的设置。
- en: Pop quiz – building a game
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验——构建一个游戏
- en: Q1\. When adding the physics engine in your code, which functions are valid
    to add to your application?
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 在你的代码中添加物理引擎时，哪些函数可以添加到你的应用程序中？
- en: '`physics.start()`'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`physics.start()`'
- en: '`physics.pause()`'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`physics.pause()`'
- en: '`physics.stop()`'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`physics.stop()`'
- en: None of the above
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不对
- en: Q2\. Which is correct when adding an event listener?
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 添加事件监听器以下哪个是正确的？
- en: '`button:addeventlistener("touch", listener)`'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`button:addeventlistener("touch", listener)`'
- en: '`button:AddEventListener("touch", listener)`'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`button:AddEventListener("touch", listener)`'
- en: '`button:addEventListener(touch, listener)`'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`button:addEventListener(touch, listener)`'
- en: '`button:addEventListener("touch", listener)`'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`button:addEventListener("touch", listener)`'
- en: Q3\. What is the correct way to make the following display object transition
    to `x = 300`, `y = 150`, and have the alpha changed to 0.5, in 2 seconds?
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. 以下显示对象正确过渡到`x = 300`，`y = 150`，并将alpha改为0.5，耗时2秒的方式是？
- en: '[PRE40]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`transition.to( square, { time=2000, x=300, y=150, alpha=0.5 })`'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transition.to( square, { time=2000, x=300, y=150, alpha=0.5 })`'
- en: '`transition.from( square, { time=2000, x=300, y=150, alpha=0.5 })`'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transition.from( square, { time=2000, x=300, y=150, alpha=0.5 })`'
- en: '`transition.to( square, { time=2, x=300, y=150, alpha=0.5 })`'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transition.to( square, { time=2, x=300, y=150, alpha=0.5 })`'
- en: None of the above
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不对
- en: Summary
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have completed the first half of this game tutorial. Understanding how to
    structure a Corona project properly makes it easier to keep your code organized
    and tracks your assets better. We have got a taste of working with blocks of code
    that pertain to a small part of the game logic needed to allow the application
    to run.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了这个游戏教程的前半部分。正确理解如何构建Corona项目结构，可以让你的代码更有组织性，更好地追踪你的资源。我们已经尝试处理了与游戏中所需的小部分逻辑相关的代码块，这些代码块使得应用程序能够运行。
- en: 'So far we have:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完成了：
- en: Specified the build configuration on displaying the content for Android and
    iOS devices
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定了在Android和iOS设备上显示内容的构建配置
- en: Introduced the main variables and constants that will run in the application
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了将在应用程序中运行的主要变量和常量
- en: Instantiated the physics engine and started to apply it to the game objects
    that require physical bodies
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化了物理引擎，并开始将其应用到需要物理体的游戏对象上
- en: Created transitions from menus to game play screens
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了从菜单到游戏玩屏幕的过渡
- en: Added display objects and game messages to the screen
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向屏幕添加了显示对象和游戏信息
- en: It's quite an accomplishment of how much we've done so far, including learning
    a new API in the process of coding the application. We still have a lot more to
    add before the game can be fully functional.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们已经完成了很多工作，包括在编码应用程序的过程中学习了一个新的API，这已经是一个相当大的成就了。在游戏能够完全功能之前，我们还有很多内容需要添加。
- en: In the next chapter, we'll be finishing the second half of this game tutorial.
    We'll be working with collision detection of the paddle, ball, brick, and wall
    objects. Also, we'll learn how to update the score when a brick is removed from
    the scene and get our win/lose conditions active as well. We're in the home stretch.
    Let's keep going!
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将完成这个游戏教程的后半部分。我们将处理挡板、球、砖块和墙壁对象的碰撞检测。同时，我们还将学习如何在移除场景中的砖块时更新得分，并激活我们的赢/输条件。我们已经进入最后的冲刺阶段，让我们继续前进！
