- en: 'Chapter 10. Avoiding Problems: Debugging and Resource Considerations'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。避免问题：调试和资源考虑
- en: 'This chapter will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Debugging an application with Flash Professional
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flash Professional 调试应用程序
- en: Debugging an application with Flash Builder
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flash Builder 调试应用程序
- en: Rendering application Elements using the Device GPU
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设备 GPU 渲染应用程序元素
- en: Automating application Shutdown upon Device Interruption Events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设备中断事件发生时自动化应用程序关闭
- en: Exiting your application with the Device Back Button
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设备后退按钮退出应用程序
- en: Monitoring Memory Usage and Frame Rate in an Application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控应用程序中的内存使用和帧率
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Being that Android is a mobile operating system, it presents a new set of specific
    challenges in regard to optimizing both for performance and user experience. This
    is something Flash Platform developers must take into consideration when developing
    applications with AIR for Android and mobile Flash Player. This chapter will provide
    an overview of debugging and optimization techniques along with user experience
    tweaks to make our AIR for Android applications behave as nicely as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Android 是一个移动操作系统，因此在性能和用户体验优化方面提出了新的特定挑战。Flash 平台开发者在开发 AIR for Android
    和移动 Flash Player 应用程序时必须考虑这一点。本章将提供调试和优化技术以及用户体验调整的概览，以使我们的 AIR for Android 应用程序尽可能良好地运行。
- en: Debugging an application with Flash Professional
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flash Professional 调试应用程序
- en: Debugging AIR for Android applications using Flash Professional is very similar
    to debugging desktop AIR or Flash projects, with some notable exceptions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Flash Professional 调试 AIR for Android 应用程序与调试桌面 AIR 或 Flash 项目非常相似，但有一些值得注意的区别。
- en: Getting ready…
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪…
- en: 'Be sure your AIR for Android project is open in Flash Professional and that
    your Player is AIR for Android. This can be verified through the **Properties**
    panel:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您的 AIR for Android 项目在 Flash Professional 中已打开，并且您的播放器是 AIR for Android。这可以通过**属性**面板进行验证：
- en: '![Getting ready…](img/1420_10_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪…](img/1420_10_01.jpg)'
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Use the mobile debug launcher or debug on the device itself through USB:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用移动调试启动器或在通过 USB 连接的设备上进行调试：
- en: In the application menu, choose **Debug** and hover over the option labeled
    **Debug Movie**. This will cause a submenu of debug options to appear:![How to
    do it...](img/1420_10_02.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序菜单中，选择**调试**，并将鼠标悬停在标有**调试影片**的选项上。这将导致出现一个调试选项的子菜单：![如何操作…](img/1420_10_02.jpg)
- en: When choosing to debug **in AIR Debug Launcher (Mobile)**, Flash Professional
    will switch to the full Debug Console and launch the application within the device
    debugger. This is useful for performing quick debugging of your application when
    multi-touch, accelerometer, or other device-specific inputs and sensors are not
    involved. Breakpoints, trace statements, and other debug tools will function exactly
    the same as within a normal desktop project.![How to do it...](img/1420_10_03.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当选择在**AIR 调试启动器（移动）**中调试时，Flash Professional 将切换到完整的调试控制台，并在设备调试器中启动应用程序。这对于在涉及多触控、加速度计或其他设备特定输入和传感器时快速调试应用程序非常有用。断点、跟踪语句和其他调试工具将完全与普通桌面项目中的功能一样。![如何操作…](img/1420_10_03.jpg)
- en: Once we have performed our preliminary tests in the debug player and are ready
    to debug on the device through USB, we can switch to that option in the **Debug**
    menu. If we have never configured the AIR for Android Settings for this project,
    a dialog window will appear, allowing us to do so. This window should not appear
    during subsequent debug sessions. Be sure to choose the **Debug** option under
    **Android deployment type** and have the **Install and Launch** options selected
    in the **After publishing** section.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们在调试播放器中完成了初步测试，并准备好通过 USB 在设备上进行调试，我们可以在**调试**菜单中切换到该选项。如果我们从未为此项目配置过 AIR
    for Android 设置，将出现一个对话框窗口，允许我们进行配置。在随后的调试会话中不应出现此窗口。确保在**Android部署类型**下选择**调试**选项，并在**发布后**部分选择**安装并启动**选项。
- en: 'You will notice there are fields for determining a certificate to sign your
    application at this point. To learn more about the code-signing process, please
    refer to [Chapter 11](ch11.html "Chapter 11. Final Considerations: Application
    Compilation and Distribution"), *Final Considerations: Application Compilation
    and Distribution.*![How to do it...](img/1420_10_04.jpg)'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，你会注意到有用于确定证书来签署你的应用程序的字段。要了解更多关于代码签名过程的信息，请参考[第11章](ch11.html "第11章. 最后的考虑：应用程序编译和分发")，*最后的考虑：应用程序编译和分发*。![如何操作...](img/1420_10_04.jpg)
- en: After initiating a debug session to deploy on our device, Flash Professional
    will take a few seconds to compile and deploy the application. As the application
    begins to load upon the device, AIR will launch a small dialog letting us know
    that it is attempting to connect to the debugger on our computer. Once this connection
    occurs, the window will go away and our full application will launch, allowing
    us to test and debug as normal.![How to do it...](img/1420_10_05.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动调试会话以在我们的设备上部署后，Flash Professional 将需要几秒钟来编译和部署应用程序。当应用程序开始在设备上加载时，AIR 将会启动一个小对话框，告诉我们它正在尝试连接到我们计算机上的调试器。一旦建立连接，窗口将消失，我们的完整应用程序将启动，使我们能够像平常一样进行测试和调试。![如何操作...](img/1420_10_05.jpg)
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Debugging applications through breakpoints and variable inspection is on par
    with the course when developing applications using any Flash Platform technology.
    With AIR for Android, we are dealing with external hardware and a few extra steps
    must be taken to ensure that we are able to debug within our normal environment,
    while also interacting with an application running on a real device. This recipe
    demonstrates the steps necessary to get this all functioning within our present
    workflow.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过断点和变量检查来调试应用程序与使用任何 Flash 平台技术开发应用程序的课程相同。在使用 AIR for Android 时，我们需要处理外部硬件，并采取一些额外的步骤以确保我们能够在正常环境中进行调试，同时与在真实设备上运行的应用程序进行交互。本食谱展示了在我们当前工作流程中实现这一切所需步骤。
- en: See also...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information about project setup using Flash Professional, you may
    refer to [Chapter 1](ch01.html "Chapter 1. Getting Ready to Work with Android:
    Development Environment and Project Setup"), *Getting Ready to Work with Android:
    Development Environment and Project Setup.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 若想了解更多关于使用 Flash Professional 进行项目设置的信息，你可以参考[第1章](ch01.html "第1章. 准备使用Android：开发环境和项目设置")，*准备使用Android：开发环境和项目设置*。
- en: Debugging an application with Flash Builder
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flash Builder 调试应用程序
- en: The ability to define debug configurations in Flash Builder is an excellent
    workflow improvement that we should take advantage of when setting up a new mobile
    project or preparing to test a project we have been working on for some time.
    We are able to set up multiple configurations for the same project using the Flash
    Builder **Debug Configurations** panel.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flash Builder 中定义调试配置的能力是一个优秀的工作流程改进，我们在设置新的移动项目或准备测试我们工作了一段时间的项目时应该利用这一点。我们可以使用
    Flash Builder 的**调试配置**面板为同一个项目设置多个配置。
- en: How to do it…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We are going to explore the **Debug Configurations** panel to configure a custom
    set of launch settings for our mobile project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索**调试配置**面板，为我们的移动项目配置一组自定义的启动设置：
- en: Select a mobile project and click the arrow next to the **Debug** button in
    the Flash Builder toolbar. Choose the **Debug Configurations** option from this
    menu. The Debug Configurations dialog window will open up:![How to do it…](img/1420_10_06.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个移动项目，点击 Flash Builder 工具栏中**调试**按钮旁边的箭头。从菜单中选择**调试配置**选项。调试配置对话框窗口将会打开：![如何操作…](img/1420_10_06.jpg)
- en: Double click on the left-hand menu entry labeled **MobileApp** to edit the particular
    settings for this selected project. From this window, we can select another project
    to configure, specify the default `Application` file for the project, set a `Target`
    platform (Google Android, in our case), and configure a `Launch` method. If debugging
    on the desktop, we can also select from a variety of device profiles and even
    configure our own. In the next screenshot , we have chosen to debug using the
    dimensions and resolution present on the Motorola Droid:![How to do it…](img/1420_10_07.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击左侧菜单中标记为**MobileApp**的条目，以编辑此选定项目的特定设置。从这个窗口，我们可以选择另一个要配置的项目，为项目指定默认的`Application`文件，设置一个`Target`平台（在我们的情况下是Google
    Android），并配置一个`Launch`方法。如果在桌面上调试，我们还可以从各种设备配置文件中选择，甚至可以配置我们自己的。在下一个截图中，我们选择使用摩托罗拉Droid上的尺寸和分辨率进行调试：![如何操作…](img/1420_10_07.jpg)
- en: If it is necessary to define additional devices, we can click the **Configure**
    button to launch the **Device Configurations** screen, which allows us to Import
    device profiles, or even add our own:![How to do it…](img/1420_10_08.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有必要定义其他设备，我们可以点击**配置**按钮以启动**设备配置**屏幕，该屏幕允许我们导入设备配置文件，甚至添加我们自己的配置文件：![如何操作…](img/1420_10_08.jpg)
- en: When adding a custom device profile, we are given options for specifying width
    and height of our display along with supported pixels per inch. Google Android
    has a standard platform UI that can differ between devices depending upon how
    much customization the manufacturer performs over the standard display elements.
    The notifications bar, for instance, always appears unless the device is in full
    screen mode. If the notifications bar was taller or shorter on a specific device,
    we can account for it here.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加自定义设备配置文件时，我们可以指定显示的宽度和高度以及支持的每英寸像素。Google Android有一个标准平台UI，根据制造商对标准显示元素进行的定制程度，在不同设备之间可能有所不同。例如，通知栏除非设备处于全屏模式，否则始终会出现。如果特定设备上的通知栏更高或更短，我们可以在这一步进行相应调整。
- en: Note
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While resolution and PPI can be simulated here, unless the development machine
    has a multi-touch interface, we will have to test any touch or gesture input on
    an actual device. Of course, device performance is not part of the simulation
    either.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管这里可以模拟分辨率和PPI，但除非开发机器具有多点触控界面，否则我们仍需要在实际设备上测试任何触摸或手势输入。当然，设备性能也不是模拟的一部分。
- en: '![How to do it…](img/1420_10_09.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/1420_10_09.jpg)'
- en: When choosing to debug on actual physical hardware, we can choose to debug on
    a device through USB or over a wireless network. USB debugging is often the more
    direct way and is recommended for most situations. Within the following screenshot,
    you can see that we have now defined one configuration for desktop debug and one
    for debugging on a USB-connected device:![How to do it…](img/1420_10_10.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当选择在实际物理硬件上调试时，我们可以选择通过USB或无线网络在设备上进行调试。USB调试通常更为直接，大多数情况下推荐使用。在以下屏幕截图中，您可以看到我们已经为桌面调试定义了一个配置，以及一个用于通过USB连接的设备调试的配置：![如何操作…](img/1420_10_10.jpg)
- en: When finished, click **Apply** and then **Close**. We can now access any of
    the defined configurations from the Flash Builder debug icon or the project context
    menu:![How to do it…](img/1420_10_11.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击**应用**然后**关闭**。我们现在可以通过Flash Builder调试图标或项目上下文菜单访问任何已定义的配置：![如何操作…](img/1420_10_11.jpg)
- en: Once we choose to launch a debug session for our project, it will open within
    the Flash Builder mobile debug player when debugging on the desktop, or in the
    case of USB device debug; it will be compiled, pushed to the device, and installed.
    For a device debug session, AIR will launch a small dialog letting us know that
    it is attempting to connect to the debugger on our computer. Once this connection
    occurs, the window will go away and our full application will launch, allowing
    us to test and debug as normal.![How to do it…](img/1420_10_12.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们选择为项目启动调试会话，那么在桌面调试时，它将在Flash Builder移动调试播放器中打开；如果是USB设备调试，它将被编译、推送到设备并安装。对于设备调试会话，AIR将启动一个小对话框，告知我们它正在尝试连接到计算机上的调试器。一旦建立连接，窗口将消失，我们的完整应用程序将启动，使我们能够正常测试和调试。![如何操作…](img/1420_10_12.jpg)
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: If you choose to launch on desktop, you will be able to debug locally within
    Flash Builder. You can also emulate a variety of Android devices by choosing from
    a set of profiles. If you wish to create your own profile, you can do so by clicking
    the **Configure** button.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择在桌面上启动，你将能够在Flash Builder中进行本地调试。你也可以通过选择一系列配置文件来模拟各种Android设备。如果你想创建自己的配置文件，可以点击**配置**按钮。
- en: When choosing to launch on a device, you also have the option of debugging on
    the device, through Flash Builder. This is, by far, the best way of debugging
    your mobile application, because it is tested on true Android hardware.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择在设备上启动时，你也可以通过Flash Builder在设备上进行调试。这是迄今为止调试移动应用程序的最佳方式，因为它是在真正的Android硬件上进行测试的。
- en: See also...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information about project setup using Flash Builder, you may refer
    to [Chapter 1](ch01.html "Chapter 1. Getting Ready to Work with Android: Development
    Environment and Project Setup"), *Getting Ready to Work with Android: Development
    Environment and Project Setup.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用Flash Builder进行项目设置的信息，你可以参考[第1章](ch01.html "第1章. 准备使用Android：开发环境和项目设置")，*准备使用Android：开发环境和项目设置。*
- en: Rendering application elements using the device GPU
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设备GPU渲染应用程序元素
- en: While older Android devices must rely on the CPU for everything being rendered
    within a mobile Adobe AIR project, many of the newer devices on the market have
    full support for Graphics Processing Unit (GPU) rendering and providing necessary
    hooks for our applications to take advantage of this. This recipe will demonstrate
    the necessary steps we must take to enable GPU acceleration upon application elements.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然较旧的Android设备必须依赖CPU来渲染移动Adobe AIR项目中的所有内容，但市场上许多较新的设备完全支持图形处理单元（GPU）渲染并提供必要的钩子让我们的应用程序利用这一点。本食谱将展示我们必须采取的必要步骤，以启用应用程序元素的GPU加速。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will modify settings in the AIR descriptor file and enable `DisplayObject`
    instances to take advantage of these modifications:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改AIR描述符文件中的设置，并使`DisplayObject`实例能够利用这些修改：
- en: Locate the AIR descriptor file in your project. It is normally named something
    like `{MyProject}-app.xml` and resides at the project root.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目中找到AIR描述符文件。它通常被命名为类似`{MyProject}-app.xml`，并位于项目根目录。
- en: Browse the file for a node named `<initialWindow>` near the beginning of this
    document. This node contains many default settings dealing with the visual aspects
    of our application window.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览文件，找到名为`<initialWindow>`的节点，位于本文档的开头部分。这个节点包含了许多关于我们应用程序窗口视觉方面的默认设置。
- en: We now must locate the child node named `<renderMode>`. If this node does not
    exist, we can easily add it here. The `renderMode` value determines whether the
    application will use the CPU or GPU for rendering content. There are three possible
    values for application `renderMode:`
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在必须找到名为`<renderMode>`的子节点。如果此节点不存在，我们可以轻松地在这里添加它。`renderMode`的值决定了应用是使用CPU还是GPU来渲染内容。应用程序`renderMode`有三个可能的值：
- en: '**AUTO:** The application will attempt to use the device GPU to render visual
    display objects:'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AUTO:** 应用将尝试使用设备GPU来渲染视觉显示对象：'
- en: '[PRE0]'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**GPU:** The application will be locked to GPU mode. If the device does not
    support GPU rendering within Adobe AIR, problems will ensue:'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPU:** 应用将被锁定在GPU模式下。如果设备不支持Adobe AIR中的GPU渲染，将会出现问题：'
- en: '[PRE1]'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**CPU:** The application will use the device CPU for rendering all visual display
    objects. This is the safest setting, but provides the fewest benefits:'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU:** 应用将使用设备CPU来渲染所有视觉显示对象。这是最安全的设置，但提供的优势最少：'
- en: '[PRE2]'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, whenever we want to take advantage of this with `DisplayObject` instances
    within our application, we must set both the `DisplayObject` instances `cacheAsBitmap`
    property to `true` and assign the `cacheAsBitmapMatrix` property to a new Matrix
    object. This will enable 2D content rendering for these individual objects through
    the device GPU. When using objects in 2.5D space, they will automatically be rendered
    using the GPU and do not require these additional settings.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，每当我们想在应用程序中的`DisplayObject`实例利用这一点时，我们必须将`DisplayObject`实例的`cacheAsBitmap`属性设置为`true`，并将`cacheAsBitmapMatrix`属性分配给一个新的Matrix对象。这将使这些单个对象通过设备GPU进行2D内容渲染。当在2.5D空间中使用对象时，它们将自动使用GPU进行渲染，不需要这些额外的设置。
- en: '[PRE3]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: Setting the application `renderMode` within the AIR descriptor file to `gpu`
    will force the application to render visual objects using the GPU. However, individual
    objects not being rendered in 2.5D space will require that both the `cacheAsBitmap`
    property be set to `true` and the `cacheAsBitmapMatix` property be assigned to
    a Matrix object. When setting `renderMode` to `auto`, the application will attempt
    to render these objects through the GPU, and will fall back to CPU rendering if
    GPU acceleration is not supported on a particular device. We can also set the
    `renderMode` to `cpu`, which simply renders everything through the CPU, bypassing
    any GPU rendering altogether.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在AIR描述符文件中将应用的`renderMode`设置为`gpu`将强制应用使用GPU渲染视觉对象。然而，不在2.5D空间中渲染的个别对象需要将`cacheAsBitmap`属性设置为`true`，并将`cacheAsBitmapMatix`属性分配给一个Matrix对象。当设置`renderMode`为`auto`时，应用将尝试通过GPU渲染这些对象，如果特定设备不支持GPU加速，则回退到CPU渲染。我们还可以将`renderMode`设置为`cpu`，这样会完全绕过GPU渲染，只通过CPU渲染所有内容。
- en: 'When used appropriately, setting the application `renderMode` can greatly speed
    up visual object rendering within an application. It is important to realize that
    many devices will not have full GPU support available through AIR for Android,
    in which case forcing GPU may actually be quite problematic for the application
    and may even render it unusable on particular devices. There are also a number
    of limitations present when using the GPU. For instance: filters, PixelBender
    blends, and a variety of standard blend modes are not supported.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当适当使用时，设置应用的`renderMode`可以显著提高应用内部视觉对象的渲染速度。重要的是要意识到许多设备可能无法通过AIR for Android获得完整的GPU支持，在这种情况下，强制使用GPU可能会对应用造成问题，甚至可能导致在某些特定设备上无法使用。在使用GPU时也存在一些限制，例如：不支持滤镜、PixelBender混合以及各种标准的混合模式。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: If using Flash Professional, we can also set the `Render` mode through the AIR
    for **Android Settings** panel. This is accessible through the **Properties**
    panel. Click the little wrench icon next to **Player selection** to configure
    these settings.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用Flash Professional，我们还可以通过AIR的**Android设置**面板设置`渲染`模式。这可以通过**属性**面板访问。点击**播放器选择**旁边的扳手图标来配置这些设置。
- en: '![There''s more...](img/1420_10_13.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1420_10_13.jpg)'
- en: Automating application shutdown upon device interruption events
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设备中断事件时自动化应用关闭
- en: When an application is running on an Android device, there is a good chance
    that a user session can be interrupted by a telephone call, or some other unforeseen
    event. When a situation like this occurs, we should consider whether it may be
    appropriate to exit the application and free up system resources for other tasks.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用在Android设备上运行时，用户会话很可能因为电话来电或其他不可预见的事件而中断。当发生此类情况时，我们应该考虑是否应该退出应用并释放系统资源供其他任务使用。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will listen to the application to fire a deactivate event and exit the application
    in response:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将监听一个应用发出的停用事件并响应退出应用：
- en: 'To begin, we will need to import the following classes into our application:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将以下类导入到我们的应用中：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We must register an event listener of type `Event.DEACTIVATE` upon our `NativeApplication.nativeApplication`
    object. This event will fire in response to the application losing focus on the
    device in the event of a telephone call or some other interruption:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在`NativeApplication.nativeApplication`对象上注册一个类型为`Event.DEACTIVATE`的事件监听器。当设备上发生电话来电或其他中断导致应用失去焦点时，将触发此事件：
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Within the following function, we will invoke the `exit()` method upon the
    `NativeApplication.nativeApplication` object, closing the application completely.
    This will free up resources for other device applications:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的函数中，我们将在`NativeApplication.nativeApplication`对象上调用`exit()`方法，完全关闭应用。这将释放资源供其他设备应用使用：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We want to be good stewards of the resources set aside for our application to
    run while active on a user's device. An effective way to do this is to make sure
    to release any memory that our application is using when not in an active state.
    Listening for a deactivate event will allow us to know when some other application
    receives focus. At this point, we can exit the application completely which frees
    up the resources being used for whatever the user is currently doing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在使用用户设备上的资源时，成为我们应用程序运行的良好管理者。有效的方法是确保在应用程序处于非活动状态时释放应用程序使用的任何内存。监听停用事件将允许我们知道何时有其他应用程序获得焦点。在这一点上，我们可以完全退出应用程序，释放用户当前正在使用的资源。
- en: See also…
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'Before actually exiting the application, we have a chance to preserve any session
    data through local shared objects or local databases. For more information on
    how to do this, take a look at [Chapter 8](ch08.html "Chapter 8. Abundant Access:
    File System and Local Database"), *Abundant Access: File System and Local Database.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际退出应用程序之前，我们有机会通过本地共享对象或本地数据库保存会话数据。有关如何执行此操作的信息，请查看[第8章](ch08.html "第8章.
    丰富的访问：文件系统和本地数据库")，*丰富的访问：文件系统和本地数据库。*
- en: Exiting your application with the device back button
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设备后退按钮退出应用程序
- en: Android devices generally have a set of four soft-keys along one side of the
    device which are always present to the user. Two of these keys involve navigation—the
    back and home keys. When a user activates an event such as when pressing the back
    button, we should consider whether it may be appropriate to fully exit the application
    and free up system resources for other tasks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备通常在设备的一侧有一组四个软键，这些软键始终对用户可见。其中两个键涉及导航——后退和主页键。当用户激活某个事件，例如按下后退按钮时，我们应该考虑是否完全退出应用程序并释放系统资源以供其他任务使用。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The home button will always return the user to the Android desktop, thus deactivating
    our application. To see how to close an application in such an event, refer the
    previous recipe.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 主页按钮将始终使用户返回到Android桌面，从而停用我们的应用程序。要了解如何在发生此类事件时关闭应用程序，请参阅之前的食谱。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will listen to the dedicated Android back button to be pressed and exit
    the application in response:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将监听专用安卓后退按钮的按下，并在响应中退出应用程序：
- en: To begin, we will need to import the following classes into our application.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将以下类导入到我们的应用程序中。
- en: '[PRE7]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We must register an event listener of type `KeyboardEvent.KEY_DOWN` upon our
    `NativeApplication.nativeApplication` object. This event will fire in response
    to the user activating the dedicated Android back key:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在`NativeApplication.nativeApplication`对象上注册一个类型为`KeyboardEvent.KEY_DOWN`的事件监听器。当用户激活专用的安卓后退键时，此事件将被触发：
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the event of the back key being pressed by the user, we will invoke the
    `exit()` method upon the `NativeApplication.nativeApplication` object, closing
    the application completely. This will free up resources for other device applications:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下后退键时，我们将调用`NativeApplication.nativeApplication`对象的`exit()`方法，完全关闭应用程序。这将释放资源供其他设备应用程序使用：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We want to be good stewards of the resources set aside for our application to
    run while active on a user's device. An effective way to do this is to make sure
    to release any memory that our application is using when not in an active state.
    One way of doing this is to listen for keyboard events and intercepting a back
    key press. At this point, we can exit the application completely which frees up
    the resources being used for whatever the user is currently doing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在使用用户设备上的资源时，成为我们应用程序运行的良好管理者。有效的方法是确保在应用程序处于非活动状态时释放应用程序使用的任何内存。做到这一点的方法之一是监听键盘事件并拦截后退键的按下。在这一点上，我们可以完全退出应用程序，释放用户当前正在使用的资源。
- en: Depending upon the current state of our application, we can choose whether it
    is appropriate to exit the application or simply return to some previous state.
    When performing such actions within a Flex-based mobile project, we would probably
    only exit the application if our current view was the initial view within our
    application `ViewNavigator.`
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们应用程序的当前状态，我们可以选择是退出应用程序还是仅返回到某个之前的状态。在基于Flex的移动项目中执行此类操作时，我们可能只有在当前视图是我们应用程序中的初始视图`ViewNavigator`时才会退出应用程序。
- en: There's more…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: It is also possible to prevent the Android back button from doing anything at
    all by using `KeyboardEvent.preventDefault():`
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`KeyboardEvent.preventDefault()`，也可以阻止安卓返回按钮执行任何操作：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'Note that before actually exiting the application, we have a chance to preserve
    any session data through local shared objects or local databases. For more information
    on how to do this, take a look at [Chapter 8](ch08.html "Chapter 8. Abundant Access:
    File System and Local Database"), *Abundant Access: File System and Local Database.*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在实际退出应用程序之前，我们有机会通过本地共享对象或本地数据库保存任何会话数据。有关如何执行此操作的更多信息，请查看[第8章](ch08.html
    "第8章. 丰富的访问：文件系统和本地数据库")，*丰富的访问：文件系统和本地数据库*。
- en: Monitoring memory usage and frame rate in an application
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控应用程序中的内存使用和帧率
- en: Android devices generally have a lot less memory and much less CPU power than
    a traditional desktop or laptop machine. We have to be very careful when building
    Android applications so as not to create something so power-hungry, that the frame
    rate drops to unacceptable levels or the application becomes unresponsive. To
    assist us in troubleshooting and monitoring these issues, we can keep track of
    the memory consumption and calculated frame rate of the running application which
    should respond accordingly.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备通常与传统桌面或笔记本电脑相比，内存较少且CPU性能较弱。在构建安卓应用时，我们必须非常小心，以免创建出过于耗能的应用，导致帧率降至不可接受的水平或应用无响应。为了帮助我们排查和监控这些问题，我们可以跟踪运行中应用的内存消耗和计算出的帧率，以便相应地作出响应。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can monitor many system properties through use of the `flash.system` package
    along with the `flash.utils.getTimer` class for calculating the present application
    frame rate:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`flash.system`包以及`flash.utils.getTimer`类来监控许多系统属性，以计算当前应用程序的帧率：
- en: 'To begin, we will need to import the following classes into our application:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将以下类导入到我们的应用程序中：
- en: '[PRE11]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We need to declare a set of `Number` objects to hold persistent timing values
    in order to calculate the application frame rate. Also, declare a `TextField`
    and `TextFormat` pair to trace out this and other device messages to the user:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要声明一组`Number`对象来保存持久的计时值，以便计算应用程序的帧率。同时，声明一个`TextField`和`TextFormat`对，以向用户输出此和其他设备消息：
- en: '[PRE12]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will, at this point, continue to set up our `TextField`, apply a `TextFormat`,
    and add it to the `DisplayList`. Here, we create a method to perform all of these
    actions for us:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们继续设置我们的`TextField`，应用`TextFormat`，并将其添加到`DisplayList`中。这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE13]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The next step entails creation of the mechanism which handles our frame rate
    calculation. We will set the `prevTimeNumber` to the current elapsed milliseconds
    as the application has been initialized. We''ll also set the `numFrames` variable
    to `0` for the moment. This provides us with a base set of numbers to work off.
    Finally, we register an event listener of type `Event.ENTER_FRAME` upon our application
    to periodically perform new frame rate calculations for us:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步包括创建处理我们帧率计算的机制。我们将`prevTimeNumber`设置为应用程序初始化后当前经过的毫秒数。我们还将`numFrames`变量设置为`0`。这为我们提供了一组基础数字。最后，我们在应用程序上注册一个`Event.ENTER_FRAME`类型的事件监听器，以定期为我们执行新的帧率计算：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This lengthy method will refresh everything within our `TextField`, every time
    a frame is entered. First, we will write out some information about the CPU architecture,
    manufacturer, and the memory available to our application. The memory is the important
    bit in this step.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个冗长的方法会在每次进入帧时刷新我们`TextField`中的所有内容。首先，我们将输出一些关于CPU架构、制造商以及应用程序可用的内存的信息。在这一步中，内存是重要的部分。
- en: To calculate the running frame rate, we will first increment our frame counter
    and once again gather the number of milliseconds elapsed from the initialization
    of our application. The previous reading of this can be then subtracted, giving
    us the time that has elapsed since this function last ran.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了计算运行帧率，我们首先会递增我们的帧计数器，并再次获取从应用程序初始化开始经过的毫秒数。可以减去上一次读取的值，这样我们就得到了自上次运行此函数以来经过的时间。
- en: 'If the time elapsed is over 1000, a second has transpired and we can then perform
    some calculations to determine our actual frames per second. We will retrieve
    the frames per minute by dividing the number of frames we are dealing with in
    this cycle by the variable holding our previous time, multiplied by 1000\. Setting
    the previous time variable to the present time elapsed, and resetting our frame
    count to `0`, will begin a new cycle:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果经过的时间超过1000，那么已经过去了一秒钟，然后我们可以进行一些计算来确定我们实际每秒的帧数。我们将通过将本次循环中处理的帧数除以持有我们之前时间的变量乘以1000，来获取每分钟的帧数。将上一个时间变量设置为当前经过的时间，并将我们的帧数重置为`0`，将开始一个新的周期：
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When we run the application upon a device, we can see the CPU and OS information,
    along with memory usage and the calculated frame rate:![How to do it...](img/1420_10_14.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在设备上运行应用程序时，我们可以看到CPU和操作系统信息，以及内存使用情况和计算出的帧率：![如何操作...](img/1420_10_14.jpg)
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: There is a wealth of information which can be accessed through the Capabilities
    and System classes regarding CPU and memory use. We can gather additional information
    about the current frame rate by calculating actual FPS based upon data gathered
    from the `getTimer()` utility method. Using all of this together will provide
    us with a reasonable set of data to determine how well our application is running
    upon a particular device. We can then use this data to make smart decisions while
    the application is running by modifying application properties, changing the way
    we are rendering content, or even alerting the user that there may be a problem.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 关于CPU和内存使用，可以通过Capabilities和System类访问大量信息。我们可以通过从`getTimer()`实用方法获取的数据计算实际FPS，来获取有关当前帧率的更多信息。将这些信息综合使用，将为我们提供一组合理的数据，以确定应用程序在特定设备上的运行情况。然后，我们可以使用这些数据在应用程序运行时通过修改应用程序属性、改变我们渲染内容的方式，甚至提醒用户可能存在问题。
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If the frame rate becomes too sluggish, we may want to consider lowering the
    frame rate or even dropping the rendering quality of our application to improve
    performance. This can be done using the following code snippets:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果帧率变得太慢，我们可能需要考虑降低帧率，甚至降低应用程序的渲染质量以改善性能。这可以通过使用以下代码片段来完成：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: We can also recommend the use of a package like `Hi-ReS-Stats` which can be
    downloaded from [https://github.com/mrdoob/Hi-ReS-Stats](http://https://github.com/mrdoob/Hi-ReS-Stats)
    and used on mobile Android applications to monitor resource usage. Usage of this
    class will produce a graph overlay within our application to monitor application
    performance.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以推荐使用像`Hi-ReS-Stats`这样的包，可以从[https://github.com/mrdoob/Hi-ReS-Stats](http://https://github.com/mrdoob/Hi-ReS-Stats)下载，并在移动Android应用程序上使用来监控资源使用情况。使用这个类将在我们的应用程序中生成一个图形覆盖层，以监控应用程序性能。
