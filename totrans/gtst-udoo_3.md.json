["```kt\n    #define LED 2\n    #define LED_TWO3\n\n    ```", "```kt\n    void setup(){\n     pinMode(LED, OUTPUT);\n     pinMode(LED_TWO, OUTPUT);\n     digitalWrite(LED, LOW);\n     digitalWrite(LED_TWO, LOW);\n    }\n    ```", "```kt\n    switch(command) {\n     case 0:\n       digitalWrite(LED, LOW);\n       break;\n     case 1:\n       digitalWrite(LED, HIGH);\n       break;\n     case 2:\n     digitalWrite(LED_TWO, LOW);\n     break;\n     case 3:\n     digitalWrite(LED_TWO, HIGH);\n     break;\n     default:\n      // noop\n       break;\n    }\n    ```", "```kt\n    char versionNumber[] = \"0.2.0\";\n    ```", "```kt\n    <Switch\n     android:layout_width=\"wrap_content\"\n     android:layout_height=\"wrap_content\"\n     android:text=\"LED 3\"\n     android:id=\"@+id/secondLed\"\n     android:onClick=\"switchLightTwo\"/>\n    ```", "```kt\n    private boolean mSwitchLed = false;\n    private boolean mSwitchLedTwo = false;\n\n    ```", "```kt\n    public void switchLightTwo(View v) {\n     mSwitchLedTwo = !mSwitchLedTwo;\n     int command = mSwitchLedTwo ? 3 : 2;\n     mManager.writeSerial(command);\n    }\n    ```", "```kt\n    <resources>\n     <usb-accessory\n     version=\"0.2.0\"\n     model=\"LedLamp\"\n     manufacturer=\"Example, Inc.\"/>\n    </resources>\n    ```", "```kt\n    ADKadk(&Usb, manufacturer, model, accessoryName, versionNumber, url, serialNumber);\n    int reading = LOW;\n    int previous = LOW;\n    long lastPress = 0;\n\n    ```", "```kt\n    #define LED_TWO3\n    #define BUTTON 4\n    #define DEBOUNCE 200\n\n    ```", "```kt\n    pinMode(LED_TWO, OUTPUT);\n    pinMode(BUTTON, INPUT);\n\n    ```", "```kt\n    void readCommand() {\n     Usb.Task();\n     if (adk.isReady()) {\n       adk.read(&bytesRead, BUFFSIZE, buffer);\n       if (bytesRead> 0) {\n         executor(buffer[0]);\n      }\n     }\n    }\n    ```", "```kt\n    void loop(){\n      // Reads the digital signal from the circuit\n     reading = digitalRead(BUTTON);\n      // Checks the button press if it's outside a\n      // debounce threshold\n     if (reading == HIGH && previous == LOW &&millis() - lastPress>DEBOUNCE) {\n       lastPress = millis();\n        // Visual effect prior to diagnostic activation\n       digitalWrite(LED, HIGH);\n       digitalWrite(LED_TWO, HIGH);\n       delay(500);\n       digitalWrite(LED, LOW);\n       digitalWrite(LED_TWO, LOW);\n       delay(500);\n       startDiagnostic();\n     }\n     previous = reading;\n     readCommand();\n    }\n    ```", "```kt\n    void startDiagnostic() {\n     // Turn on the first LED\n     executor(1);\n     delay(1000);\n     executor(0);\n     // Turn on the second LED\n     executor(3);\n     delay(1000);\n     executor(2);\n     // Turn on both\n     executor(1);\n     executor(3);\n     delay(1000);\n     executor(0);\n     executor(2);\n    }\n    ```"]