- en: Chapter 11. Multimedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing sound effects with SoundPool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio with MediaPlayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to hardware media controls in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo with the default camera app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo using the (old) Camera API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo using the Camera2 (the new) API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve explored graphics and animations in the previous chapters,
    it''s time to look at the sound options available in Android. The two most popular
    options to play sound include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SoundPool**: This is for short sound clips'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MediaPlayer**: This is designed for larger sound files (like music) and video
    files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two recipes will look at using these libraries. We'll also look at
    how to use hardware related to sound, such as the volume controls and media playback
    controls (play, pause, and so on often found on headphones).
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the chapter will focus on using the camera, both indirectly through
    Intents (to pass the camera request to the default camera application) and directly
    using the camera APIs. We'll examine the new Camera2 APIs released with Android
    5.0 Lollipop (API 21), but we'll also look at the original Camera API since roughly
    75 percent of the market doesn't have Lollipop yet. (To help you take advantage
    of the new features offered in the Camera2 API, we'll show a newer method for
    using the old Camera APIs to make it easier to use both Camera APIs in your own
    application.)
  prefs: []
  type: TYPE_NORMAL
- en: Playing sound effects with SoundPool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you need sound effects in your application, SoundPool is usually a good
    starting point.
  prefs: []
  type: TYPE_NORMAL
- en: SoundPool is interesting in that it allows us to create special effects with
    our sounds by changing the play rate and by allowing multiple sounds to play simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Popular audio file types supported include:'
  prefs: []
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FLAC (`.flac`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MP3 (`.mp3`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ogg (`.ogg`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAVE (`.wav`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the *Supported Media Formats* link for a complete list, including network
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: As is common in Android, new releases to the OS bring changes to the APIs. The
    `SoundPool` is no exception and the original `SoundPool` constructor was deprecated
    in Lollipop (API 21). Rather than setting our minimum API to 21 or relying on
    deprecated code (that may stop working at some point), we'll implement both the
    old and the new approach and check the OS version at runtime to use the appropriate
    method.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to play sound effects using the Android `SoundPool`
    library. To demonstrate playing sounds simultaneously, we'll create two buttons,
    and each will play a sound when pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `SoundPool`. Use the default
    **Phone & Tablet** options, and select **Empty Activity** when prompted for **Activity
    Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate playing sounds simultaneously, we need at least two audio files
    in the project. We went to SoundBible.com([http://soundbible.com/royalty-free-sounds-5.html](http://soundbible.com/royalty-free-sounds-5.html)
    ) and found two royalty-free public domain sounds to include in the download project
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first sound is a longer playing sound:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second sound is shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://soundbible.com/1615-Metal-Drop.html](http://soundbible.com/1615-Metal-Drop.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As explained previously, we''ll need two audio files to include in the project.
    Once you have your sound files ready, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new raw folder (**File** | **New** | **Android resource directory**)
    and chose `raw` in the **Resource type** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy your sound files to `res/raw` as `sound_1` and `sound_2`. (Keep their original
    extensions.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    Buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `ActivityMain.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the existing `onCreate()` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `createSoundPoolNew()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `createSoundPooolOld()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the button `onClick()` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `onStop()` callback as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first detail to notice is how we construct the object itself. As we mentioned
    in the introduction, the SoundPool constructor was changed in Lollipop (API 21).
    The old constructor was deprecated in favor of using `SoundPool.Builder()`. With
    a constantly changing environment like Android, changes in the API are very common,
    so it''s a good idea to learn how to work with the changes. As you can see, it''s
    not difficult in this case. We just check the current OS version and call the
    appropriate method. It is worth noting the method annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After creating SoundPool, we set an `setOnLoadCompleteListener()` listener.
    Enabling the buttons is mostly for demonstration purposes to illustrate that SoundPool
    needs to load the sound resources before they are available.
  prefs: []
  type: TYPE_NORMAL
- en: The final point to make on using SoundPool is the call to `play()`. We need
    to pass in the `soundID`, which was returned when we loaded the sound using `load()`.
    The `Play()` gives us a few options, including sound volume (left and right),
    loop count, and playback rate. To demonstrate the flexibility, we play the first
    sound (which is longer) at a lower volume to create more of a background effect
    with the running water. The second sound plays at a higher volume and we play
    it twice.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you only need a basic sound effect, such as a click, you can use the AudioManager
    `playSoundEffect()` method. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can only specify a sound from the `SoundEffectConstants`; you cannot use
    your own sound files.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer** **Docs: SoundPool**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/media/SoundPool.html](https://developer.android.com/reference/android/media/SoundPool.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Developer** **Docs:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Playing audio with MediaPlayer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MediaPlayer is probably one of the most important classes for adding multimedia
    capability to your applications. It supports the following media sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Project resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External resources (such as URLs, including streaming)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MediaPlayer supports the following popular audio files:'
  prefs: []
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FLAC (`.flac`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MP3 (`.mp3`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ogg (`.ogg`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAVE (`.wav`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And these popular file types:'
  prefs: []
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matroska (`.mkv`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebM (`.webm`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MPEG-4 (`.mp4`, `.m4a`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the *Supported Media Formats* link for a complete list, including network
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up MediaPlayer in your app to play a
    sound included with your project. (For a complete review of the full capability
    offered by MediaPlayer, see the Developer Docs link at the end of this recipe.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `MediaPlayer`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: We will also need a sound for this recipe and will use the same longer playing
    "water" sound used in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The first sound is a longer playing sound:[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As explained previously, we''ll need a sound file to include in the project.
    Once you have your sound file ready, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new raw folder (**File** | **New** | **Android resource directory**)
    and chose `raw` in the **resource type** dropdown
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy your sound file to `res/raw` as `sound_1`. (Keep the original extension.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `ActivityMain.java` and add the following global variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `buttonPlay()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `buttonPause()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `buttonStop()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, override the `onStop()` callback with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code here is pretty straightforward. We create MediaPlayer with our sound
    and start playing the sound. The buttons will replay, pause, and stop accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Even this basic example illustrates one very important concept regarding MediaPlayer,
    and that is the *state*. If you're making serious use of MediaPlayer, review the
    link provided below for detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make our demonstration easier to follow, we use the UI thread for all our
    operations. For this example, using a short audio file included with the project,
    we aren''t likely going to experience any UI delays. In general, it''s a good
    idea to use a background thread when preparing MediaPlayer. To make this common
    task easier, MediaPlayer already includes an asynchronous prepare method called
    `prepareAsync()`. The following code will create an `OnPreparedListener()` listener
    and use the `prepareAsync()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Playing music in the background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our example is meant to play audio when the application is in the foreground,
    and will release the MediaPlayer resources in the `onStop()` callback. What if
    you are creating a music player and want to play music in the background, even
    when the user is using another application? In that scenario, you'll want to use
    MediaPlayer in a service, instead of an Activity. You'll use the MediaPlayer library
    the same way; you'll just need to pass information (such as sound selection) from
    the UI to your service.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that since a service runs in the same UI thread as the activities, you
    still do not want to perform potentially blocking operations in a service. MediaPlayer
    does handle background threads to prevent blocking your UI Thread, otherwise,
    you would want to perform threading yourself. (See [Chapter 14](ch14.html "Chapter 14. Getting
    your app ready for the Play Store"), *Getting Your App Ready for the Play Store*
    for more information on threading and options.)
  prefs: []
  type: TYPE_NORMAL
- en: Using hardware volume keys to control your app's audio volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want the volume controls to control the volume in your app, use the
    `setVolumeControlStream()` method to specify your application''s audio stream,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See the following `AudioManager` link for the other stream options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Supported Media Format [https://developer.android.com/guide/appendix/media-formats.html](https://developer.android.com/guide/appendix/media-formats.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer** **Docs: MediaPlayer** [http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer** **Docs: AudioManager**: [https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to hardware media controls in your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having your app respond to media controls, such as Play, Pause, Skip, and so
    on, is a nice touch your users will appreciate.
  prefs: []
  type: TYPE_NORMAL
- en: Android makes this possible through the media library. As with the *Playing
    sound effects with SoundPool* recipe earlier, the Lollipop release changed how
    this is done. Unlike the `SoundPool` example, this recipe is able to take advantage
    of another approach—the compatibility library.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to set up `MediaSession` to respond to the hardware
    buttons, which will work on Lollipop and later, as well as previous `Lollilop`
    versions using the `MediaSessionCompat` library. (The Compatibility Library will
    take care of checking the OS version and using the correct API calls automatically.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `HardwareMediaControls`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll just be using Toasts messages to respond to the hardware events and
    therefore will not need to make any changes to the activity layout. To get started,
    open `ActivityMain.java` and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following `mMediaSessionCallback` to respond to the media buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application on a device or emulator with media controls (such as headphones)
    to see the Toast messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four steps to setting this up:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `MediaSession.Callback` and attach it to MediaSession
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the MediaSession flags to indicate we want the media buttons
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `SessionState` to `active`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `PlayBackState` with the actions we're going to handle
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Steps 4 and 1 work together as the Callback will only get the events set in
    the `PlayBackState`.
  prefs: []
  type: TYPE_NORMAL
- en: Since we're not actually controlling any playback in this recipe, we just demonstrate
    how to respond to the hardware events. You'll want to implement actual functionality
    in `PlayBackState` and include a call to `setState()` after the `setActions()`
    call.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very nice example of how the changes to the API can make things easier.
    And since new `MediaSession` and `PlaybackState` were rolled in to the Compatibility
    Library, we can take advantage of these new APIs on older versions of the OS.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Checking the hardware being used
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want your app to respond differently based on the current output hardware,
    you can use `AudioManager` to check. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer** **Docs: MediaSession**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Developer** **Docs: MediaSessionCompat**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html](https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Developer** **Docs: PlaybackState**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Developer** **Docs: PlaybackStateCompat**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Taking a photo with the default camera app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your application needs an image from the camera, but is not a camera replacement
    app, it may be better to allow the "default" camera app to take the picture. This
    also respects your user's choice of a preferred camera application.
  prefs: []
  type: TYPE_NORMAL
- en: When you take a photo, unless it is specific to just your application, it's
    considered good practice to make the photo publicly available. (This allows it
    to be included in the user's photo gallery.) This recipe will demonstrate using
    the default photo application to click a picture, save it to the public folder,
    and display the image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `UsingTheDefaultCameraApp`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create a layout with an ImageView and button. The button will
    create an Intent to launch the default Camera app. When the camera app is done,
    our app will get a callback. Start by opening the Android Manifest and follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `activity_main.xml` file and replace the existing `TextView` with
    the following views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables to the `MainActivity`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to create the URI for the photo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new method to override `onActivityResult()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two parts to working with the default camera app. The first is to
    set up the intent to launch the app. We create the Intent using `MediaStore.ACTION_IMAGE_CAPTURE`
    to indicate we want a photo app. We verify a default app exists by checking the
    results from `resolveActivity()`. As long as it''s not null, we know an application
    is available to handle the intent. (Otherwise, our app will crash.) We create
    a filename and add it to the intent with: `putExtra(MediaStore.EXTRA_OUTPUT, mLastPhotoURI)`.'
  prefs: []
  type: TYPE_NORMAL
- en: When we get the callback in `onActivityResult()`, we first make sure it's the
    `PHOTO_RESULT` and `RESULT_OK` (the user could have cancelled), then we load the
    photo in `ImageView`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t care where the picture is stored, you can call the intent without
    using the `MediaStore.EXTRA_OUTPUT` extra. If you don''t specify the output file,
    the `onActivityResult()` will include a thumbnail of the image in data Intent.
    Here is how you can display the thumbnail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the code to load the full resolution image, using the URI returned
    in `data Intent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Calling the default video app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s the same process if you want to call the default video capture application.
    Just change the intent in Step 5, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get the URI to the video in the `onActivityResult()`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scaling down large images to avoid Out of Memory exceptions* recipe in
    [Chapter 9](ch09.html "Chapter 9. Graphics and Animation"), *Graphics and Animation*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a picture using the (old) Camera API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe demonstrated how to use an intent to call the default photo
    application. If you only need a quick photo, the intent is probably the ideal
    solution. If not, and you need more control of the camera, this recipe will show
    you how to use the camera directly with the Camera API.
  prefs: []
  type: TYPE_NORMAL
- en: There are actually two recipes for using the Camera API—one for the original
    Camera API released in Android 1.0 (API 1) and Camera2 API, released in Android
    5.0 (API 21). We'll cover both the new and the old APIs. Ideally, you will want
    to write your application to the latest and greatest APIs available, but at the
    time of this writing, Android 5.0 (API 21) only has about a 23 percent market
    share. If you only use the Camera2 API, you exclude over 75 percent of the market.
  prefs: []
  type: TYPE_NORMAL
- en: Write your app to use Camera2 API to take advantage of the new features available,
    but still have a functional application using the original Camera API for the
    rest of your users. To help facilitate using both, this recipe is going to take
    advantage of newer features in Android, specifically the `TextureView`, introduced
    in Android 4.0 (API 14). We'll use the `TextureView`, in place of the more traditional
    `SurfaceView`, for displaying the camera preview. This will allow you to use the
    same layout with the newer Camera2 API as it uses the `TextureView` as well. (Setting
    the minimum API to Android 4.0 (API 14) and above, which has over 96 percent market
    share, isn't limiting your user base much.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `CameraAPI`. \On the **Target
    Android Devices** dialog, select the **Phone & Tablet** option and chose API 14
    (or above) for the **Minimum SDK.** Select **Empty Activity** when prompted for
    **Activity Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by opening the Android Manifest and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `activity_main.xml` and replace the existing TextView with the following
    views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and modify the `MainActivity` class declaration to
    implement the `SurfaceTextureListener`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following global declarations to `MainActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `PictureCallback` to handle saving the photo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods to implement the `SurfaceTextureListener` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application on a device or emulator with a camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing to note is, when you''re looking at this code in Android Studio,
    you''re going to see a lot of strikethrough code with the following warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned in the introduction, the `android.hardware.camera2` API was introduced
    in Android 5.0 (API 19) and replaces the `android.hardware.camera` APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can add the following annotation to suppress the Deprecation warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two main steps when using the Camera API:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the preview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capture the image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We get the `TextureView` from our layout, then assign our activity (which implements
    `SurfaceTextureListener`) as the listener using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `TextureView` surface is ready, we get the `onSurfaceTextureAvailable`
    callback, where we set the preview surface with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to take the picture when the button is pressed. We do that
    with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: When the picture is ready, we get the `onPictureTaken()` callback in the `Camera.PictureCallback`
    class we created.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keep in mind, this code is meant to show you how it works, not to create a full
    commercial application. As most developers know, the real challenge in coding
    is to handle all the problem cases. Some areas to improve include adding the ability
    to switch cameras, as the app currently uses the default camera. Also, take a
    look at the device orientation for both the preview and when saving a picture.
    A more sophisticated app would handle some of the work on a background thread
    to avoid delays on the UI thread. (Take a look at the next recipe to see how we
    do some of the camera processing on a background thread.)
  prefs: []
  type: TYPE_NORMAL
- en: Setting the camera parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Camera API includes parameters, which allow us to adjust the camera settings.
    With this example, we can change the size of the preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind, the hardware must also support the setting we want. In this example,
    we'd want to query the hardware first to get all available preview modes, then
    set the one that matches our requirements. (See an example of this in the next
    recipe when we set the picture resolution.) See `getParameters()` in the Camera
    documentation link.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next recipe: *Taking a picture using the Camera2 (the new) API*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading device orientation* recipe in [Chapter 8](ch08.html "Chapter 8. Using
    the Touchscreen and Sensors"), *Using the Touchscreen and Sensors* for examples
    on detecting the current device orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: Building a Camera App** at: [https://developer.android.com/guide/topics/media/camera.html#custom-camera](https://developer.android.com/guide/topics/media/camera.html#custom-camera)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/hardware/Camera.html](https://developer.android.com/reference/android/hardware/Camera.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a picture using the Camera2 (the new) API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've looked at the old Camera API, it's time to learn about the new
    Camera2 API. Unfortunately, it's a bit more complicated due to the asynchronous
    nature of the APIs. Fortunately, the overall concept is the same as the previous
    Camera API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `Camera2API`. On the **Target
    Android Devices** dialog, select the **Phone & Tablet** option and chose API 21
    (or higher) for the **Minimum SDK**. Select **Empty Activity** when prompted for
    **Activity Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you''ll see, there''s a lot of code for this recipe. Start by opening the
    Android Manifest and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `activity_main.xml` and replace the existing TextView with the following
    views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open the `MainActivity.java` file and add the following global variables
    to the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `Comparator` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `CameraDevice.StateCallback`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `SurfaceTextureListener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `CameraCaptureSession.StateCallback`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods to override `onPause()` and `onResume()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `openCamera()`method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `startPreview()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `getPictureFile()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `takePicture()` method that saves the image file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application on a device or emulator with a camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we learned about the TextureView in the previous recipe, we can jump to
    the new Camera2 API information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though there are more classes involved, just like the older Camera API, there
    are two basic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the preview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing the image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the preview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s a rundown on how the code sets up the preview:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we set up the `TextureView.SurfaceTextureListener` with the `setSurfaceTextureListener()`
    method in `onCreate()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we get the `onSurfaceTextureAvailable()` callback, we open the camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We pass our `CameraDevice.StateCallback` class to the `openCamera()` method,
    which eventually calls the `onOpened()` callback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`onOpened()` gets the surface for the preview by calling `getSurfaceTexture()`
    and passes it to the CameraDevice by calling `createCaptureSession()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, when `CameraCaptureSession.StateCallback onConfigured()` is called,
    we start the preview with the `setRepeatingRequest()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capturing the image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even though the `takePicture()` method may appear to be procedural, capturing
    an image also involves several classes and relies on callbacks. Here''s a breakdown
    on how the code takes a picture:'
  prefs: []
  type: TYPE_NORMAL
- en: The user clicks the **Take Picture** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then queries the camera to find the largest available image size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then creates an `ImageReader`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, he/she sets up `OnImageAvailableListener`, and saves the image in the
    `onImageAvailable()` callback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, creates `CaptureRequest.Builder` and includes the `ImageReader` surface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, creates `CameraCaptureSession.CaptureCallback`, which defines the `onCaptureCompleted()`
    callback. When the capture is complete, it restarts the preview.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, calls the `createCaptureSession()` method, creating a `CameraCaptureSession.StateCallback`.
    This is where the `capture()` method is called, passing in the `CameraCaptureSession.CaptureCallback`
    created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the previous Camera example, we've just created the base code to demonstrate
    a working Camera application. Again, there are areas for improvement. First, you
    should handle the device orientation, for both the preview and when saving the
    images. (See the previous recipe for the link.) Also, with Android 6.0 (API 23)
    now available, it would be a good time to start using the new permission model.
    Instead of just checking for an exception as we do in the `openCamera()` method,
    it would be better to check for the required permission.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The previous recipe: *Taking a picture using the (old) Camera API*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The new Android 6.0 Run-Time permission model* in [Chapter 14](ch14.html "Chapter 14. Getting
    your app ready for the Play Store")*, Getting Your App Ready for the Play Store*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer Docs: Camera2 API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
