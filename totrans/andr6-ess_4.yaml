- en: Chapter 4. Changes Unfold
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Marshmallow holds some changes that might get overlooked. A lot of these
    changes are short but will require your full attention to fully understand them
    and make sure you don't miss out when trying to use a removed/deprecated API,
    a new *flow*, or a new and improved API.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve bundled up a group of changes that you might use or need to know and
    understand when building your applications for Android 6.0 (Marshmallow):'
  prefs: []
  type: TYPE_NORMAL
- en: Power-saving modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removable storage adoption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP client removal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support library notice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Keystore changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wi-Fi and networking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APK validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct Share
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voice interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Assist API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluetooth API changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding group doesn't include a separate chapter for major changes, for
    example, the permissions model covered in [Chapter 1](part0015_split_000.html#E9OE2-d332ea27e7224e4f9f2d9e09fae9c7cb
    "Chapter 1. Android Marshmallow Permissions"), *Android Marshmallow Permissions*,
    or an improved API, such as the video/audio/camera API that we will cover in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Power-saving modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android 6.0 has added new power-saving modes, **Doze** and **App Standby**,
    prolonged battery life by up to 2 times according to Google's measurements. The
    Doze mode has been created to improve the sleep efficiency of idle devices, while
    the App Standby mode has been designed to prevent apps from eating up power while
    in the idle state. On both occasions, plugging in the device to chargers allows
    normal operations to resume.
  prefs: []
  type: TYPE_NORMAL
- en: The Doze mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dozing is when a device is unplugged, the screen is off, and it''s stationary
    (this can be determined via sensors, such as the accelerometer) for a determined
    period of time. What we get is a state where the system is kept in the sleep state
    as long as possible. When an Android 6.0 device is in the Doze mode, not much
    will happen in the background, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Doze mode](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In short, everything you think will happen in the background will not actually
    happen.
  prefs: []
  type: TYPE_NORMAL
- en: What happens to apps when a device is dozing?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a device enters the dozing state, you will encounter some battery-efficient
    system behavior, which will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Network access is restricted unless your app receives a high-priority GCM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wake locks** are ignored but are granted to apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Syncs and jobs are deferred using the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sync adapters
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JobScheduler` (not allowed to run; this is enforced by the system)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Alarms are deferred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have important alarms and need to trigger the UI:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the `setAndAllowWhileIdle()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can't be abused; this is allowed once every 15 minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wi-Fi scans are off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPS is off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Doze mode will end shortly before any `setAlarmClock()` alarms; it can also
    end when the states of being stationary and unplugged are exchanged. Exiting the
    Doze mode will trigger the device to execute any jobs and syncs that are pending.
  prefs: []
  type: TYPE_NORMAL
- en: Testing apps with Doze mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Test apps using your device (with Android 6.0) and `adb` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simulate an unplugged device using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will cause your battery icon to show as if the device is not plugged in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Take the step to the next state using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This can be seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Testing apps with Doze mode](img/00014.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Reset the battery state back to its normal condition using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also list the available commands using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This prints more information about the `deviceidle` usage, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing apps with Doze mode](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The App Standby mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'App Standby is a special mode that apps will be in when a system determines
    that an app is idle. An app is considered idle after a period of time unless the
    app exhibits the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It has a foreground process at that time (an activity or service)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It displays notifications on the lock screen or in the notification tray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was explicitly launched by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was marked as excluded from optimizations via the settings app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens to apps when in the App Standby mode?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the device is unplugged, syncs and jobs are deferred and network access is
    restricted.
  prefs: []
  type: TYPE_NORMAL
- en: If the device is plugged in, the system releases the app lock in the standby
    state, allowing the device to resume access to the network and/or execute any
    pending jobs and syncs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When in the idle state for a long period of time, the system allows idle apps
    to access the network just once a day.
  prefs: []
  type: TYPE_NORMAL
- en: Testing apps with the App Standby mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Test apps using your device (with Android 6.0) and `adb` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simulate the app that''s going into the standby mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Simulate by waking your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See what happens when your app awakens. Test recovering gracefully from standby
    mode. Check whether your app's notifications and background jobs function as you
    would anticipate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can set your app as inactive via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also check the status of your app via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sample test was done on Google Photos behavior; all rights are reserved.
  prefs: []
  type: TYPE_NORMAL
- en: 'The console output, for example, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Excluded apps and settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can exclude apps from the App Standby mode via the settings apps, as mentioned
    earlier. The procedure to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Settings** | **Apps**.![Excluded apps and settings](img/00016.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the cog/gear icon to open the **Configure apps** screen.![Excluded
    apps and settings](img/00017.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Battery optimization**.![Excluded apps and settings](img/00018.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows a list of the apps excluded from the App Standby
    mode—that is, the ones that are not optimized. You can open the selection for
    all apps and choose the exact behavior you require for each application.![Excluded
    apps and settings](img/00019.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tips
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few points and tips for you to note and remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `isIgnoringBatteryOptimizations()` with a `PowerManager` instance and check
    whether your app is on the **whitelist**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Navigate the user directly to the configuration screen using the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform the following steps to display a system dialog asking about adding
    a specific app to the whitelist:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `REQUEST_IGNORE_BATTERY_OPTIMIZATIONS` permission to the application's
    manifest.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a URI package pointing to your application.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wrap the URI in an intent and call `startActivity()` with it as shown in the
    following code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Note that if our app is already whitelisted, the dialog won't be displayed again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removable storage adoption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Marshmallow allows users to *adopt* external storage devices, such as
    SD cards. Such adoptions will format and encrypt the storage device and mount
    it as internal storage. Once done, users can move apps and apps' private data
    between storage devices. The `android:installLocation` preference in the manifest
    will then be used by the system to determine the available locations for each
    app. What you need to keep in mind is that using `Context` methods for directories
    or files and `ApplicationInfo` fields will return values that can change between
    runs. You should always call these APIs dynamically. Don't use hardcoded file
    paths or persist fully qualified file paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Context` methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getFilesDir()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCacheDir()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCodeCacheDir()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getDatabasePath()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getDir()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getNoBackupFilesDir()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFileStreamPath()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPackageCodePath()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPackageResourcePath()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ApplicationInfo` fields are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dataDir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sourceDir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nativeLibraryDir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`publicSourceDir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`splitSourceDirs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`splitPublicSourceDirs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can debug this feature and enable the adoption of a USB drive connected
    via an **OTG** (short for **On The Go**) cable using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For more on USB, head to [https://developer.android.com/guide/topics/connectivity/usb/index.html](https://developer.android.com/guide/topics/connectivity/usb/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Apache HTTP client removal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Apache HTTP client** has been deprecated for quite some time—since 2011
    or so. Using this client on Android 2.3 and higher was not recommended; now with
    Android 6.0 Marshmallow, this API has been removed. So, we'll use the `HttpURLConnection`
    class instead.
  prefs: []
  type: TYPE_NORMAL
- en: This API is more efficient, reduces network use, and minimizes power consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to continue using the Apache HTTP APIs, you must first declare
    the following compile-time dependencies in your `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have compile errors in the Android studio, you can head to these questions
    and solutions on stackoverflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://stackoverflow.com/q/30856785/529518](http://stackoverflow.com/q/30856785/529518)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://stackoverflow.com/q/31653002/529518](http://stackoverflow.com/q/31653002/529518)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few changes to the notifications feature, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Notification.setLatestEventInfo()` method is now removed. When constructing
    notifications, we must use the `Notification.Builder` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a notification is also done via the `Notification.Builder` instance
    using the same instance of the builder, and calling the `build()` method will
    get us an updated `Notification` instance. If legacy support is required, you
    can use `NotificationCompat.Builder` instead, which is available in the **Android
    Support Library**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `adb shell dumpsys notification` command no longer prints out notification
    text. The proper usage now is `adb shell dumpsys notification --noredact`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The newly added `INTERRUPTION_FILTER_ALARMS` filter level corresponds to a
    new mode: *Alarms only do not disturb*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The newly added `CATEGORY_REMINDER` category is used for user-scheduled reminders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The newly added `Icon` class allows icons to be attached to notifications via
    the `setSmallIcon()` and `setLargeIcon()` methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The updated `addAction()`method now accepts an `Icon` object instead of a drawable
    resource ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The newly added `getActiveNotifications()` method allows you to find out which
    notifications are currently alive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can obtain some knowledge about what the user is and is not expecting to
    see under notifications when using the following methods:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The newly added `getCurrentInterruptionFilter()` method returns the current
    notification interruption filter in which notifications are allowed to interrupt
    the user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The newly added `getNotificationPolicy()` method returns the current notification
    policy
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Text selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part of the material design guide specifications discuss text selection in your
    applications. Users select text within your app, and you now have an API to incorporate
    a **floating toolbar** design pattern that's similar to a contextual action bar.
    For more information about the design specifications, head to [http://www.google.com/design/spec/patterns/selection.html#selection-item-selection](http://www.google.com/design/spec/patterns/selection.html#selection-item-selection).
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Change your `ActionMode` calls to `startActionMode(Callback,ActionMode.TYPE_FLOATING)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extend `ActionMode.Callback2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override the `onGetContentRect()` method and provide coordinates for the content
    `Rect` object in the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the `invalidateContentRect()` method when you need to invalidate the `Rect`
    object and it's position is no longer valid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Support library notice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Floating toolbars are not backward-compatible. `Appcompat` takes control over
    `ActionMode` objects by default. This will prevent floating toolbars from being
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Call `getDelegate()` and `setHandleNativeActionModesEnabled()` on the returned
    `AppCompatDelegate` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the input parameter to `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This call will return control of `ActionMode` objects to the framework, allowing
    6.0 devices to support `ActionBar` or floating toolbar modes and allowing earlier
    versions to support the `ActionBar` modes.
  prefs: []
  type: TYPE_NORMAL
- en: Android Keystore changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From Android 6.0 onward, the Android Keystore provider no longer supports **Digital
    Signature Algorithm** (**DSA**).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about keystore and its usage, visit [https://developer.android.com/training/articles/keystore.html](https://developer.android.com/training/articles/keystore.html).
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi and networking changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Marshmallow has introduced a few changes to the Wi-Fi and networking
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the state of `WifiConfiguration` objects is only possible for self-created
    objects. You are restricted from modifying or deleting `WifiConfiguration` objects
    created by the user or other apps.
  prefs: []
  type: TYPE_NORMAL
- en: In earlier versions, forcing the device to connect to a specific Wi-Fi network
    using `enableNetwork()` and setting up `disableAllOthers=true` caused the device
    to disconnect from other networks. This does not happen in Android 6.0\. With
    `targetSdkVersion <=20`, your app is pinned to use the selected Wi-Fi network.
    When `targetSdkVersion >=21`, you need to use the `MultiNetwork` APIs and ensure
    that network traffic is assigned to the proper network. For more information on
    the `MultiNetwork` API, refer to [https://developer.android.com/about/versions/android-5.0.html#Wireless](https://developer.android.com/about/versions/android-5.0.html#Wireless).
  prefs: []
  type: TYPE_NORMAL
- en: Runtime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android **ART** (short for **Android runtime**) runtime was also updated
    in Android Marshmallow, and the following are the updates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `newInstance()` method: The **Dalvik** (another runtime) issue for the
    checking of access rules incorrectly was fixed. If you wish to override access
    checks, call the `setAccessible()` method with the input parameter set to `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `v7 Appcompat` library or the `v7 Recyclerview` library? You must
    update to the latest version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that any custom classes referenced from XML are updated so that their
    class constructors are accessible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior of the dynamic linker is updated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ART runtime understands the difference between a library''s `soname` and
    its path; search by `soname` is now implemented. There was an open bug with this
    issue that was fixed; if you wish to extend your reading, visit here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://code.google.com/p/android/issues/detail?id=6670](https://code.google.com/p/android/issues/detail?id=6670)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Hardware identifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android 6.0 has introduced a major change for greater data protection; the `WifiInfo.getMacAddress()`
    and `BluetoothAdapter.getAddress()` methods now return a constant value of `02:00:00:00:00:00`,
    which means you can't rely on these methods to get information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you''re trying to use some of the methods in the API, you need to
    add permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WifiManager.getScanResults()` and `BluetoothLeScanner.startScan()` need one
    of these two permissions granted:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ACCESS_FINE_LOCATION` permission
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ACCESS_COARSE_LOCATION` permission
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BluetoothDevice.ACTION_FOUND`: This must have the `ACCESS_COARSE_LOCATION`
    permission'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a device running Android 6.0 (Marshmallow) initiates a background Wi-Fi
    or Bluetooth scan, external devices see the origin as a randomized MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: APK validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The platform now performs strict validation of **Android Package Kits** (**APKs**).
  prefs: []
  type: TYPE_NORMAL
- en: If a file declared in the manifest is not present in the APK itself, then the
    APK is considered corrupted. Removing contents from the APK requires re-signing
    of the APK.
  prefs: []
  type: TYPE_NORMAL
- en: USB connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the USB connection is charge-only. Users must now grant permissions
    to interact via the USB port. Your applications should take this into account
    and be aware that permissions might not be granted.
  prefs: []
  type: TYPE_NORMAL
- en: Direct Share
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best things about technology, in my humble opinion, is that it gives
    users great options to interact and benefit from them. **Direct Share** can be
    treated as a great addition to the list of merits, with great, fluid user experience
    all around the app world. So, what is Direct Share? Well, almost every app today
    uses some sort of information/data exchange with other applications on the user's
    device or with the outside world via the sharing mechanism. The sharing mechanism
    exposes a piece of information from one application to another. Usually, a user
    will interact with a few close companions (family, close friends, or colleagues),
    and this is where Direct Share comes to your aid.
  prefs: []
  type: TYPE_NORMAL
- en: Direct Share is about a set of APIs required to make sharing intuitive and quick
    for users. You define Direct Share targets that launch a specific activity in
    your app. These targets are shown in the **Share** menu, allowing faster sharing
    and fluid data flow.
  prefs: []
  type: TYPE_NORMAL
- en: With Direct Share, users can share content to targets—say, contacts in other
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a class that extends the `ChooserTargetService` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare your service in the manifest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the `BIND_CHOOSER_TARGET_SERVICE` permission and an intent filter `SERVICE_INTERFACE`
    action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example service declaration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a service declared and, for each target we want to expose, we
    add a `<meta-data>` element with the `android.service.chooser.chooser_target_service`
    name in your app manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the code in our service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can head to the **gist** if you wish to better view the code; you can visit
    [https://gist.github.com/MaTriXy/adeacdf5496bcdae5f42](https://gist.github.com/MaTriXy/adeacdf5496bcdae5f42).
  prefs: []
  type: TYPE_NORMAL
- en: You have to implement the `onGetChooserTargets()` method as it will be called
    when direct-share is triggered. You return a list of `ChooserTarget` objects that
    represent sharing entry points to your application. The `onGetChooserTargets()`
    results are included along with the regular `ACTION_SEND` activity itself. So,
    we only want `ChooserTarget` objects that improve the flow and not duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: When creating several `ChooserTarget` objects, each of them will probably point
    to the same activity. You must ensure that the extras bundle will contain distinguishing
    information so that each request will be unique. *Do not* put custom `Parcelable`
    objects in this bundle as it will cause crashes. You can find out more about `ChooserTarget`
    at [https://developer.android.com/reference/android/service/chooser/ChooserTarget.html#ChooserTarget](https://developer.android.com/reference/android/service/chooser/ChooserTarget.html#ChooserTarget).
  prefs: []
  type: TYPE_NORMAL
- en: What if we have nothing to share?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you won''t have any direct-share targets for a particular request;
    then, returning an empty list would be great. You can also disable the service
    via `android:enabled="false"` if you know that no results will be available until
    future usage of the app. Another option is to enable the service just for Android
    6.0\. This can easily be done using Boolean resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a Boolean resource named `is_share_targets_on`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value is `res/values/bools.xml`; set it to `false`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Android 6.0 is API 23, so in `res/values-v23/bools.xml`, set it to `true`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `android:enabled="@bool/is_share_targets_on"` to your service declaration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct Share best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are few of the best practices followed in Direct Share:'
  prefs: []
  type: TYPE_NORMAL
- en: Android 6.0 limits the number of share targets, only showing eight of them.
    Providing more than eight share targets will show the best eight according to
    the score.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FAILED BINDER TRANSACTION` exception can pop in for a visit if your list
    of targets exceeds 1 MB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to limit/cap how many share targets you try to return from your `ChooserTargetService`
    class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your app's icon is shown properly as it will be applied as a badge
    over the icons that you use for Direct Share targets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voice interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Voice interactions** usually originate from user voice action. However, the
    voice interaction activity starts without any user input. Android Marshmallow
    has a new voice interaction API that, together with **voice actions**, allows
    us to build conversational voice experiences into our apps. Use the `isVoiceInteraction()`
    method to determine whether an activity is triggered by a voice action. Then,
    you can use the `VoiceInteractor` class and interact with the user.'
  prefs: []
  type: TYPE_NORMAL
- en: Don't get confused with the `isVoiceInteractionRoot()` method, which returns
    `true` only if the activity is also the root of a voice interaction. Here, you
    will get `true` if your activity was started directly by the voice interaction
    service and not by another activity (another app) while undergoing voice interaction.
  prefs: []
  type: TYPE_NORMAL
- en: A best practice would be to prompt the users and confirm that this is their
    intended action. You already know that voice input is invoked from **Google Now**,
    where you can open URLs with a simple voice input, such as `open android.com`.
    Now, you can invent new voice actions and register them with Google, driving traffic
    directly and specifically to your app.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about implementing voice actions, head to [https://developers.google.com/voice-actions/interaction/](https://developers.google.com/voice-actions/interaction/).
  prefs: []
  type: TYPE_NORMAL
- en: The Assist API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in **Google I/O 2015**, we saw the *Now on Tap* feature, where Google Now
    could peek into a running app and provide contextual assistance. The `Assist`
    API offers a new way for users to engage through an **assistant**. The assistant
    must be enabled prior to using it, allowing it to be aware of the current context.
    Triggering the assistant is done by long-pressing the *Home* button, no matter
    which app is active.
  prefs: []
  type: TYPE_NORMAL
- en: You can opt out of this by setting the `WindowManager.LayoutParams.FLAG_SECURE`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: Opting in requires you to use the new `AssistContent` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for us to be able to feed additional context from our app to the assistant,
    we need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `Application.OnProvideAssistDataListener` interface, which is
    called when the user requests assistance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register it using `Application.registerOnProvideAssistDataListener()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override the `onProvideAssistData()` callback, which is called when the user
    requests assistance. It is used to build an `ACTION_ASSIST` intent with all of
    the context of the current app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override the `onProvideAssistContent()` callback; this is optional. It is called
    when the user requests assistance, allowing us to provide references to content
    related to the current activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When done, unregister yourself using `Application.unregisterOnProvideAssistDataListener()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bluetooth API Changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the changes mentioned previously, Android Marshmallow 6.0 has introduced
    a few more changes to the Bluetooth API.
  prefs: []
  type: TYPE_NORMAL
- en: Bluetooth stylus support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Stylus** has been here a for a while; Bluetooth stylus didn''t have full
    support for specifications in versions before Android Marshmallow. You can pair
    and connect a compatible Bluetooth stylus with either a phone or a tablet. Because
    you are not bound just to touches on screen, you can fuse the position, pressure,
    and button state data, allowing more precise user input and experience. Your app
    can add a listener to the stylus buttons and act accordingly. Just use the `View.OnContextClickListener`
    and `GestureDetector.OnContextClickListener` objects in your activity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to detect stylus button interactions and movement, you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `MotionEvent` methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getTooltype()` method, which returns `TOOL_TYPE_STYLUS` if a stylus with
    a button is touched on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `getButtonState()` method, which returns (on Android 6.0-targeted apps)
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUTTON_STYLUS_PRIMARY`: Press the primary stylus button'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUTTON_STYLUS_SECONDARY`: Press the secondary button'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUTTON_STYLUS_PRIMARY` | `BUTTON_STYLUS_SECONDARY`: Press both the buttons'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Targeted apps with a lower API level than Android 6.0 will result in the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUTTON_SECONDARY`: Press the primary stylus button'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUTTON_TERTIARY`: Press the secondary button'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUTTON_SECONDARY` | `BUTTON_TERTIARY`: Press both the buttons'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved Bluetooth low energy scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Used to Bluetooth low energy in your app? Well, now the scanning process is
    easier and improved. Use the new `setCallbackType()` method and specify that you
    want a callback when the system finds/sees an advertisement packet matching the
    `ScanFilter` class. You get more power-efficiency than in previous Android versions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We went over a few of the changes in Android Marshmallow. All of these changes
    are important to follow and will help you in your app development cycles. There
    are a few more changes to be discussed in future chapters in a more detailed manner.
    Our next chapter talks about audio, video, and camera features and the changes
    made in Android 6.0.6.
  prefs: []
  type: TYPE_NORMAL
