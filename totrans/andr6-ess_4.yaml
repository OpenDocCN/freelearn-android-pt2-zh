- en: Chapter 4. Changes Unfold
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 变化展开
- en: Android Marshmallow holds some changes that might get overlooked. A lot of these
    changes are short but will require your full attention to fully understand them
    and make sure you don't miss out when trying to use a removed/deprecated API,
    a new *flow*, or a new and improved API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓棉花糖有一些可能会被忽视的变化。这些变化虽短，但需要你全神贯注地理解它们，确保在使用已移除/不推荐使用的API、新的*流程*或新的改进API时不会遗漏。
- en: 'I''ve bundled up a group of changes that you might use or need to know and
    understand when building your applications for Android 6.0 (Marshmallow):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我整理了一系列变化，这些变化在为安卓6.0（Marshmallow）构建应用时你可能需要了解或需要知道：
- en: Power-saving modes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节能模式
- en: Removable storage adoption
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用可移动存储
- en: Apache HTTP client removal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除Apache HTTP客户端
- en: Notifications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知
- en: Text selection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本选择
- en: Support library notice
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持库通知
- en: Android Keystore changes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓Keystore更改
- en: Wi-Fi and networking changes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi和网络更改
- en: Runtime
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时
- en: Hardware identifier
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件标识符
- en: APK validation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APK验证
- en: USB connection
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB连接
- en: Direct Share
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接分享
- en: Voice interactions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语音交互
- en: The Assist API
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Assist API
- en: Bluetooth API changes
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙API更改
- en: The preceding group doesn't include a separate chapter for major changes, for
    example, the permissions model covered in [Chapter 1](part0015_split_000.html#E9OE2-d332ea27e7224e4f9f2d9e09fae9c7cb
    "Chapter 1. Android Marshmallow Permissions"), *Android Marshmallow Permissions*,
    or an improved API, such as the video/audio/camera API that we will cover in the
    next chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前一组没有为重大变化单独设立章节，例如[第1章](part0015_split_000.html#E9OE2-d332ea27e7224e4f9f2d9e09fae9c7cb
    "第1章. 安卓棉花糖权限")中涵盖的权限模型，*Android Marshmallow Permissions*，或者改进的API，比如我们将在下一章讨论的视频/音频/摄像头API。
- en: Power-saving modes
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节能模式
- en: Android 6.0 has added new power-saving modes, **Doze** and **App Standby**,
    prolonged battery life by up to 2 times according to Google's measurements. The
    Doze mode has been created to improve the sleep efficiency of idle devices, while
    the App Standby mode has been designed to prevent apps from eating up power while
    in the idle state. On both occasions, plugging in the device to chargers allows
    normal operations to resume.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓6.0增加了新的节能模式，**Doze**和**App Standby**，根据谷歌的测量，可将电池寿命延长多达2倍。Doze模式旨在提高空闲设备的睡眠效率，而App
    Standby模式旨在防止应用在空闲状态下耗电。在这两种情况下，将设备插入充电器将允许恢复正常操作。
- en: The Doze mode
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Doze模式
- en: 'Dozing is when a device is unplugged, the screen is off, and it''s stationary
    (this can be determined via sensors, such as the accelerometer) for a determined
    period of time. What we get is a state where the system is kept in the sleep state
    as long as possible. When an Android 6.0 device is in the Doze mode, not much
    will happen in the background, as shown in the following figure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备未插入电源，屏幕关闭且处于静止状态（可以通过加速度传感器等传感器确定）一段时间后，就会进入休眠状态。我们得到的是一个尽可能长时间保持系统在睡眠状态的状态。当安卓6.0设备处于Doze模式时，后台不会发生太多事情，如下图所示：
- en: '![The Doze mode](img/00013.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Doze模式](img/00013.jpeg)'
- en: In short, everything you think will happen in the background will not actually
    happen.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，你认为会在后台发生的一切实际上并不会发生。
- en: What happens to apps when a device is dozing?
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设备进入休眠状态时应用会发生什么？
- en: 'When a device enters the dozing state, you will encounter some battery-efficient
    system behavior, which will include the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备进入休眠状态时，你会遇到一些节能的系统行为，包括以下内容：
- en: Network access is restricted unless your app receives a high-priority GCM
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非你的应用接收到高优先级的GCM，否则网络访问受限
- en: '**Wake locks** are ignored but are granted to apps'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唤醒锁**被忽略，但会被授予应用'
- en: 'Syncs and jobs are deferred using the following:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下方式延迟同步和工作：
- en: Sync adapters
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步适配器
- en: '`JobScheduler` (not allowed to run; this is enforced by the system)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JobScheduler`（不允许运行；这是由系统强制执行的）'
- en: Alarms are deferred
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闹钟延迟
- en: Note
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you have important alarms and need to trigger the UI:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你有关键的闹钟并需要触发UI：
- en: Use the `setAndAllowWhileIdle()` method
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`setAndAllowWhileIdle()`方法
- en: Can't be abused; this is allowed once every 15 minutes
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能滥用；每15分钟允许一次
- en: Wi-Fi scans are off
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi扫描关闭
- en: GPS is off
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPS关闭
- en: The Doze mode will end shortly before any `setAlarmClock()` alarms; it can also
    end when the states of being stationary and unplugged are exchanged. Exiting the
    Doze mode will trigger the device to execute any jobs and syncs that are pending.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Doze模式将在任何`setAlarmClock()`闹钟响起前不久结束；当静止和未插入状态互换时，它也可能结束。退出Doze模式将触发设备执行所有待定的工作和同步。
- en: Testing apps with Doze mode
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试应用在 Doze 模式下的表现
- en: 'Test apps using your device (with Android 6.0) and `adb` commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的设备（搭载 Android 6.0）和 `adb` 命令测试应用：
- en: 'Simulate an unplugged device using the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令模拟未插电的设备：
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will cause your battery icon to show as if the device is not plugged in.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将导致你的电池图标显示为设备未插电的状态。
- en: 'Take the step to the next state using the following command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令进入下一个状态：
- en: '[PRE1]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This can be seen in the following screenshot:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可以在以下截图中看到：
- en: '![Testing apps with Doze mode](img/00014.jpeg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![测试应用在 Doze 模式下](img/00014.jpeg)'
- en: 'Reset the battery state back to its normal condition using the following command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将电池状态重置回正常条件：
- en: '[PRE2]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also list the available commands using the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令列出可用的命令：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This prints more information about the `deviceidle` usage, as shown in the
    following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出更多关于 `deviceidle` 使用的信息，如下面的截图所示：
- en: '![Testing apps with Doze mode](img/00015.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用在 Doze 模式下](img/00015.jpeg)'
- en: The App Standby mode
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: App Standby 模式
- en: 'App Standby is a special mode that apps will be in when a system determines
    that an app is idle. An app is considered idle after a period of time unless the
    app exhibits the following features:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统确定一个应用处于空闲状态时，应用待机模式是一种特殊的模式。除非应用表现出以下特点，否则在一段时间后会被视为空闲：
- en: It has a foreground process at that time (an activity or service)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在那时它有一个前台进程（一个活动或服务）
- en: It displays notifications on the lock screen or in the notification tray
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在锁屏或通知托盘中显示通知
- en: It was explicitly launched by the user
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是由用户明确启动的
- en: It was marked as excluded from optimizations via the settings app
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过设置应用被标记为不参与优化
- en: What happens to apps when in the App Standby mode?
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用在 App Standby 模式下会发生什么？
- en: If the device is unplugged, syncs and jobs are deferred and network access is
    restricted.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备未插电，同步和任务会被推迟，网络访问也会受到限制。
- en: If the device is plugged in, the system releases the app lock in the standby
    state, allowing the device to resume access to the network and/or execute any
    pending jobs and syncs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备插电，系统会释放待机状态下的应用锁，允许设备恢复网络访问和/或执行任何挂起的工作和同步。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When in the idle state for a long period of time, the system allows idle apps
    to access the network just once a day.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在长时间处于空闲状态时，系统允许空闲应用每天访问网络一次。
- en: Testing apps with the App Standby mode
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试应用在 App Standby 模式下的表现
- en: 'Test apps using your device (with Android 6.0) and `adb` commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的设备（搭载 Android 6.0）和 `adb` 命令测试应用：
- en: 'Simulate the app that''s going into the standby mode:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模拟应用进入待机模式：
- en: '[PRE4]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Simulate by waking your app:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过唤醒你的应用来模拟：
- en: '[PRE5]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See what happens when your app awakens. Test recovering gracefully from standby
    mode. Check whether your app's notifications and background jobs function as you
    would anticipate.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察应用唤醒时会发生什么。测试从待机模式优雅地恢复。检查你的应用通知和后台任务是否如你所预期的那样工作。
- en: 'You can set your app as inactive via the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令将你的应用设置为非活动状态：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also check the status of your app via the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过以下命令检查应用的状态：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The sample test was done on Google Photos behavior; all rights are reserved.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 示例测试是对 Google Photos 行为进行的；保留所有权利。
- en: 'The console output, for example, is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出例如如下所示：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Excluded apps and settings
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排除应用和设置
- en: 'You can exclude apps from the App Standby mode via the settings apps, as mentioned
    earlier. The procedure to do this is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过设置应用排除应用参与 App Standby 模式，如前所述。执行此操作的步骤如下：
- en: Go to **Settings** | **Apps**.![Excluded apps and settings](img/00016.jpeg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **设置** | **应用**。![排除应用和设置](img/00016.jpeg)
- en: Click on the cog/gear icon to open the **Configure apps** screen.![Excluded
    apps and settings](img/00017.jpeg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击齿轮图标打开 **配置应用** 屏幕。![排除应用和设置](img/00017.jpeg)
- en: Choose **Battery optimization**.![Excluded apps and settings](img/00018.jpeg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **电池优化**。![排除应用和设置](img/00018.jpeg)
- en: The following screenshot shows a list of the apps excluded from the App Standby
    mode—that is, the ones that are not optimized. You can open the selection for
    all apps and choose the exact behavior you require for each application.![Excluded
    apps and settings](img/00019.jpeg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的截图显示了一个从 App Standby 模式中排除的应用列表——即那些未被优化的应用。你可以打开所有应用的选择，并为每个应用程序选择你需要的确切行为。![排除应用和设置](img/00019.jpeg)
- en: Tips
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Here are a few points and tips for you to note and remember:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你需要注意和记住的要点和提示：
- en: Use `isIgnoringBatteryOptimizations()` with a `PowerManager` instance and check
    whether your app is on the **whitelist**
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `PowerManager` 实例的 `isIgnoringBatteryOptimizations()`，检查你的应用是否在 **白名单** 上
- en: 'Navigate the user directly to the configuration screen using the following:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下方法直接引导用户到配置屏幕：
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Perform the following steps to display a system dialog asking about adding
    a specific app to the whitelist:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行以下步骤以显示系统对话框，询问是否将特定应用添加到白名单：
- en: Add the `REQUEST_IGNORE_BATTERY_OPTIMIZATIONS` permission to the application's
    manifest.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用的清单中添加 `REQUEST_IGNORE_BATTERY_OPTIMIZATIONS` 权限。
- en: Create a URI package pointing to your application.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个指向你应用的 URI 包。
- en: 'Wrap the URI in an intent and call `startActivity()` with it as shown in the
    following code:'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 URI 包装在意图中，并像以下代码所示调用 `startActivity()`：
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that if our app is already whitelisted, the dialog won't be displayed again
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，如果我们的应用已经被加入白名单，则不会再次显示对话框
- en: Removable storage adoption
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可移动存储的采用
- en: Android Marshmallow allows users to *adopt* external storage devices, such as
    SD cards. Such adoptions will format and encrypt the storage device and mount
    it as internal storage. Once done, users can move apps and apps' private data
    between storage devices. The `android:installLocation` preference in the manifest
    will then be used by the system to determine the available locations for each
    app. What you need to keep in mind is that using `Context` methods for directories
    or files and `ApplicationInfo` fields will return values that can change between
    runs. You should always call these APIs dynamically. Don't use hardcoded file
    paths or persist fully qualified file paths.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Android Marshmallow 允许用户 *采用* 外部存储设备，如 SD 卡。这类采用将格式化并加密存储设备，并将其作为内部存储挂载。完成后，用户可以在存储设备之间移动应用及其私有数据。系统的
    `android:installLocation` 首选在清单中将用于确定每个应用可用的位置。你需要记住的是，使用 `Context` 方法获取目录或文件以及
    `ApplicationInfo` 字段返回的值可能会在运行之间发生变化。你应始终动态调用这些 API。不要使用硬编码的文件路径或持久化完全合格的文件路径。
- en: 'The `Context` methods are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Context` 方法如下：'
- en: '`getFilesDir()`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getFilesDir()`'
- en: '`getCacheDir()`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCacheDir()`'
- en: '`getCodeCacheDir()`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCodeCacheDir()`'
- en: '`getDatabasePath()`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDatabasePath()`'
- en: '`getDir()`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDir()`'
- en: '`getNoBackupFilesDir()`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getNoBackupFilesDir()`'
- en: '`getFileStreamPath()`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getFileStreamPath()`'
- en: '`getPackageCodePath()`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPackageCodePath()`'
- en: '`getPackageResourcePath()`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPackageResourcePath()`'
- en: 'The `ApplicationInfo` fields are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationInfo` 字段如下：'
- en: '`dataDir`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataDir`'
- en: '`sourceDir`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sourceDir`'
- en: '`nativeLibraryDir`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nativeLibraryDir`'
- en: '`publicSourceDir`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publicSourceDir`'
- en: '`splitSourceDirs`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splitSourceDirs`'
- en: '`splitPublicSourceDirs`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splitPublicSourceDirs`'
- en: 'You can debug this feature and enable the adoption of a USB drive connected
    via an **OTG** (short for **On The Go**) cable using the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令调试此功能，并启用通过 **OTG**（即 **On The Go**）线连接的 USB 驱动的采用：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For more on USB, head to [https://developer.android.com/guide/topics/connectivity/usb/index.html](https://developer.android.com/guide/topics/connectivity/usb/index.html).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 USB 的更多信息，请访问 [Android USB 指南](https://developer.android.com/guide/topics/connectivity/usb/index.html)。
- en: Apache HTTP client removal
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache HTTP 客户端的移除
- en: The **Apache HTTP client** has been deprecated for quite some time—since 2011
    or so. Using this client on Android 2.3 and higher was not recommended; now with
    Android 6.0 Marshmallow, this API has been removed. So, we'll use the `HttpURLConnection`
    class instead.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Apache HTTP 客户端**已经被弃用有一段时间了——从 2011 年左右开始。在 Android 2.3 及更高版本上使用这个客户端并不推荐；现在随着
    Android 6.0 Marshmallow 的发布，这个 API 已经被移除。因此，我们将使用 `HttpURLConnection` 类代替。'
- en: This API is more efficient, reduces network use, and minimizes power consumption.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 API 更高效，减少了网络使用，并最小化了功耗。
- en: 'If you wish to continue using the Apache HTTP APIs, you must first declare
    the following compile-time dependencies in your `build.gradle` file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望继续使用 Apache HTTP API，你必须在你的 `build.gradle` 文件中首先声明以下编译时依赖：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you have compile errors in the Android studio, you can head to these questions
    and solutions on stackoverflow:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Android Studio 中遇到编译错误，可以参考 stackoverflow 上的这些问题及其解决方案：
- en: '[http://stackoverflow.com/q/30856785/529518](http://stackoverflow.com/q/30856785/529518)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关于 Android Marshmallow 的 stackoverflow 问题](http://stackoverflow.com/q/30856785/529518)'
- en: '[http://stackoverflow.com/q/31653002/529518](http://stackoverflow.com/q/31653002/529518)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关于编译错误的 stackoverflow 问题](http://stackoverflow.com/q/31653002/529518)'
- en: Notifications
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通知
- en: 'There are a few changes to the notifications feature, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 通知功能有一些变化，如下：
- en: The `Notification.setLatestEventInfo()` method is now removed. When constructing
    notifications, we must use the `Notification.Builder` class.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Notification.setLatestEventInfo()`方法现在已经移除。在构建通知时，我们必须使用`Notification.Builder`类。'
- en: Updating a notification is also done via the `Notification.Builder` instance
    using the same instance of the builder, and calling the `build()` method will
    get us an updated `Notification` instance. If legacy support is required, you
    can use `NotificationCompat.Builder` instead, which is available in the **Android
    Support Library**.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新通知也是通过使用相同的`Notification.Builder`实例完成的，并调用`build()`方法将获得一个更新的`Notification`实例。如果需要支持旧版本，可以使用`NotificationCompat.Builder`，它包含在**Android
    Support Library**中。
- en: The `adb shell dumpsys notification` command no longer prints out notification
    text. The proper usage now is `adb shell dumpsys notification --noredact`.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adb shell dumpsys notification`命令不再打印通知文本。现在的正确用法是`adb shell dumpsys notification
    --noredact`。'
- en: 'The newly added `INTERRUPTION_FILTER_ALARMS` filter level corresponds to a
    new mode: *Alarms only do not disturb*.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增的`INTERRUPTION_FILTER_ALARMS`过滤器级别对应于新模式：*仅闹钟不干扰*。
- en: The newly added `CATEGORY_REMINDER` category is used for user-scheduled reminders.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增的`CATEGORY_REMINDER`类别用于用户计划的提醒。
- en: The newly added `Icon` class allows icons to be attached to notifications via
    the `setSmallIcon()` and `setLargeIcon()` methods.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增的`Icon`类允许通过`setSmallIcon()`和`setLargeIcon()`方法将图标附加到通知上。
- en: The updated `addAction()`method now accepts an `Icon` object instead of a drawable
    resource ID.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新的`addAction()`方法现在接受一个`Icon`对象，而不是drawable资源ID。
- en: The newly added `getActiveNotifications()` method allows you to find out which
    notifications are currently alive.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增的`getActiveNotifications()`方法允许你找出当前存活的通知。
- en: 'We can obtain some knowledge about what the user is and is not expecting to
    see under notifications when using the following methods:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们使用以下方法时，可以获取用户希望在通知下看到和不希望看到的内容的一些知识：
- en: The newly added `getCurrentInterruptionFilter()` method returns the current
    notification interruption filter in which notifications are allowed to interrupt
    the user
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增的`getCurrentInterruptionFilter()`方法返回当前允许通知打断用户的通知干扰过滤器。
- en: The newly added `getNotificationPolicy()` method returns the current notification
    policy
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增的`getNotificationPolicy()`方法返回当前的通知策略。
- en: Text selection
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本选择
- en: Part of the material design guide specifications discuss text selection in your
    applications. Users select text within your app, and you now have an API to incorporate
    a **floating toolbar** design pattern that's similar to a contextual action bar.
    For more information about the design specifications, head to [http://www.google.com/design/spec/patterns/selection.html#selection-item-selection](http://www.google.com/design/spec/patterns/selection.html#selection-item-selection).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计指南规范部分讨论了应用程序中的文本选择。用户在你的应用内选择文本，现在你有一个API来集成类似于上下文操作栏的**浮动工具栏**设计模式。有关设计规范的更多信息，请访问[http://www.google.com/design/spec/patterns/selection.html#selection-item-selection](http://www.google.com/design/spec/patterns/selection.html#selection-item-selection)。
- en: 'The implementation steps are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 实现步骤如下：
- en: Change your `ActionMode` calls to `startActionMode(Callback,ActionMode.TYPE_FLOATING)`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的`ActionMode`调用改为`startActionMode(Callback,ActionMode.TYPE_FLOATING)`。
- en: Extend `ActionMode.Callback2`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展`ActionMode.Callback2`。
- en: Override the `onGetContentRect()` method and provide coordinates for the content
    `Rect` object in the view.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onGetContentRect()`方法，并在视图中为内容`Rect`对象提供坐标。
- en: Call the `invalidateContentRect()` method when you need to invalidate the `Rect`
    object and it's position is no longer valid.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你需要使`Rect`对象和其位置不再有效时，调用`invalidateContentRect()`方法。
- en: Support library notice
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持库通知
- en: Floating toolbars are not backward-compatible. `Appcompat` takes control over
    `ActionMode` objects by default. This will prevent floating toolbars from being
    displayed.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动工具栏不具备向后兼容性。`Appcompat`默认控制`ActionMode`对象。这将阻止浮动工具栏的显示。
- en: 'The implementation steps are as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 实现步骤如下：
- en: Call `getDelegate()` and `setHandleNativeActionModesEnabled()` on the returned
    `AppCompatDelegate` object.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在返回的`AppCompatDelegate`对象上调用`getDelegate()`和`setHandleNativeActionModesEnabled()`。
- en: Set the input parameter to `false`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输入参数设置为`false`。
- en: This call will return control of `ActionMode` objects to the framework, allowing
    6.0 devices to support `ActionBar` or floating toolbar modes and allowing earlier
    versions to support the `ActionBar` modes.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用将`ActionMode`对象的控制权返回给框架，使得6.0设备支持`ActionBar`或浮动工具栏模式，并允许早期版本支持`ActionBar`模式。
- en: Android Keystore changes
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Keystore更改
- en: From Android 6.0 onward, the Android Keystore provider no longer supports **Digital
    Signature Algorithm** (**DSA**).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android 6.0开始，Android Keystore提供者不再支持**数字签名算法**（**DSA**）。
- en: For more information about keystore and its usage, visit [https://developer.android.com/training/articles/keystore.html](https://developer.android.com/training/articles/keystore.html).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有关keystore及其使用方式的更多信息，请访问[https://developer.android.com/training/articles/keystore.html](https://developer.android.com/training/articles/keystore.html)。
- en: Wi-Fi and networking changes
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wi-Fi和网络更改
- en: Android Marshmallow has introduced a few changes to the Wi-Fi and networking
    APIs.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Android Marshmallow对Wi-Fi和网络API进行了一些更改。
- en: Changing the state of `WifiConfiguration` objects is only possible for self-created
    objects. You are restricted from modifying or deleting `WifiConfiguration` objects
    created by the user or other apps.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 更改`WifiConfiguration`对象的状态仅限于自行创建的对象。你被限制修改或删除用户或其他应用创建的`WifiConfiguration`对象。
- en: In earlier versions, forcing the device to connect to a specific Wi-Fi network
    using `enableNetwork()` and setting up `disableAllOthers=true` caused the device
    to disconnect from other networks. This does not happen in Android 6.0\. With
    `targetSdkVersion <=20`, your app is pinned to use the selected Wi-Fi network.
    When `targetSdkVersion >=21`, you need to use the `MultiNetwork` APIs and ensure
    that network traffic is assigned to the proper network. For more information on
    the `MultiNetwork` API, refer to [https://developer.android.com/about/versions/android-5.0.html#Wireless](https://developer.android.com/about/versions/android-5.0.html#Wireless).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期版本中，使用`enableNetwork()`强制设备连接到特定Wi-Fi网络并设置`disableAllOthers=true`会导致设备断开与其他网络的连接。这在Android
    6.0中不会发生。当`targetSdkVersion <=20`时，你的应用将固定使用选定的Wi-Fi网络。当`targetSdkVersion >=21`时，你需要使用`MultiNetwork`
    API并确保网络流量分配给正确的网络。有关`MultiNetwork` API的更多信息，请参考[https://developer.android.com/about/versions/android-5.0.html#Wireless](https://developer.android.com/about/versions/android-5.0.html#Wireless)。
- en: Runtime
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时
- en: 'The Android **ART** (short for **Android runtime**) runtime was also updated
    in Android Marshmallow, and the following are the updates:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Android **ART**（即**Android运行时**）在Android Marshmallow中也有所更新，以下是更新内容：
- en: 'The `newInstance()` method: The **Dalvik** (another runtime) issue for the
    checking of access rules incorrectly was fixed. If you wish to override access
    checks, call the `setAccessible()` method with the input parameter set to `true`.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`newInstance()`方法：修复了**Dalvik**（另一个运行时）在检查访问规则时的问题。如果你想覆盖访问检查，请使用输入参数设置为`true`的`setAccessible()`方法。'
- en: Using the `v7 Appcompat` library or the `v7 Recyclerview` library? You must
    update to the latest version.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`v7 Appcompat`库或`v7 Recyclerview`库？你必须更新到最新版本。
- en: Make sure that any custom classes referenced from XML are updated so that their
    class constructors are accessible.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保从XML引用的任何自定义类都已更新，使其类构造函数可访问。
- en: Behavior of the dynamic linker is updated.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态链接器的行为已更新。
- en: 'The ART runtime understands the difference between a library''s `soname` and
    its path; search by `soname` is now implemented. There was an open bug with this
    issue that was fixed; if you wish to extend your reading, visit here:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ART运行时区分库的`soname`和其路径；现在实现了通过`soname`的搜索。此问题有一个公开的bug已被修复；如果你想扩展阅读，请访问：
- en: '[https://code.google.com/p/android/issues/detail?id=6670](https://code.google.com/p/android/issues/detail?id=6670)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://code.google.com/p/android/issues/detail?id=6670](https://code.google.com/p/android/issues/detail?id=6670)'
- en: Hardware identifier
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件标识符
- en: Android 6.0 has introduced a major change for greater data protection; the `WifiInfo.getMacAddress()`
    and `BluetoothAdapter.getAddress()` methods now return a constant value of `02:00:00:00:00:00`,
    which means you can't rely on these methods to get information.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Android 6.0引入了一项重大更改，以增强数据保护；`WifiInfo.getMacAddress()`和`BluetoothAdapter.getAddress()`方法现在返回一个常量值`02:00:00:00:00:00`，这意味着你不能依赖这些方法获取信息。
- en: 'Now, when you''re trying to use some of the methods in the API, you need to
    add permissions:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你尝试使用API中的某些方法时，你需要添加权限：
- en: '`WifiManager.getScanResults()` and `BluetoothLeScanner.startScan()` need one
    of these two permissions granted:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WifiManager.getScanResults()`和`BluetoothLeScanner.startScan()`需要授予这两个权限中的一个：'
- en: The `ACCESS_FINE_LOCATION` permission
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACCESS_FINE_LOCATION`权限'
- en: The `ACCESS_COARSE_LOCATION` permission
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACCESS_COARSE_LOCATION`权限'
- en: '`BluetoothDevice.ACTION_FOUND`: This must have the `ACCESS_COARSE_LOCATION`
    permission'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BluetoothDevice.ACTION_FOUND`：这必须具有`ACCESS_COARSE_LOCATION`权限'
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When a device running Android 6.0 (Marshmallow) initiates a background Wi-Fi
    or Bluetooth scan, external devices see the origin as a randomized MAC address.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行Android 6.0（棉花糖）的设备启动后台Wi-Fi或蓝牙扫描时，外部设备看到的源地址是一个随机化的MAC地址。
- en: APK validation
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: APK验证
- en: The platform now performs strict validation of **Android Package Kits** (**APKs**).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 平台现在对**Android软件包工具**（**APKs**）进行严格验证。
- en: If a file declared in the manifest is not present in the APK itself, then the
    APK is considered corrupted. Removing contents from the APK requires re-signing
    of the APK.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果清单中声明的文件在APK本身中不存在，那么APK就被认为是损坏的。从APK中删除内容需要重新签名APK。
- en: USB connection
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: USB连接
- en: By default, the USB connection is charge-only. Users must now grant permissions
    to interact via the USB port. Your applications should take this into account
    and be aware that permissions might not be granted.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，USB连接仅用于充电。用户现在必须授权通过USB端口进行交互。你的应用程序应考虑到这一点，并意识到可能不会获得授权。
- en: Direct Share
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接分享
- en: One of the best things about technology, in my humble opinion, is that it gives
    users great options to interact and benefit from them. **Direct Share** can be
    treated as a great addition to the list of merits, with great, fluid user experience
    all around the app world. So, what is Direct Share? Well, almost every app today
    uses some sort of information/data exchange with other applications on the user's
    device or with the outside world via the sharing mechanism. The sharing mechanism
    exposes a piece of information from one application to another. Usually, a user
    will interact with a few close companions (family, close friends, or colleagues),
    and this is where Direct Share comes to your aid.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，技术最棒的事情之一是它为用户提供了很好的互动和受益选择。**直接分享**可以作为优点列表中的一个伟大补充，为整个应用世界带来极佳流畅的用户体验。那么，直接分享是什么呢？几乎现在每个应用都会使用某种信息/数据交换机制与用户设备上的其他应用或通过分享机制与外部世界进行交互。分享机制将一个应用程序的信息暴露给另一个应用程序。通常，用户会与几个亲密伙伴（家人、亲密朋友或同事）互动，这正是直接分享能提供帮助的地方。
- en: Direct Share is about a set of APIs required to make sharing intuitive and quick
    for users. You define Direct Share targets that launch a specific activity in
    your app. These targets are shown in the **Share** menu, allowing faster sharing
    and fluid data flow.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 直接分享是一组使分享直观快速的API。你定义了直接分享目标，这些目标会在你的应用程序中启动特定的活动。这些目标显示在**分享**菜单中，允许更快地分享和流畅的数据流。
- en: With Direct Share, users can share content to targets—say, contacts in other
    apps.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直接分享，用户可以将内容分享到目标，比如其他应用中的联系人。
- en: 'The implementation steps are as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 实现步骤如下：
- en: Define a class that extends the `ChooserTargetService` class.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个扩展了`ChooserTargetService`类的类。
- en: Declare your service in the manifest.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在清单中声明你的服务。
- en: Specify the `BIND_CHOOSER_TARGET_SERVICE` permission and an intent filter `SERVICE_INTERFACE`
    action.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定`BIND_CHOOSER_TARGET_SERVICE`权限和意图过滤器`SERVICE_INTERFACE`动作。
- en: 'An example service declaration is as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个服务声明的示例如下：
- en: '[PRE13]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we have a service declared and, for each target we want to expose, we
    add a `<meta-data>` element with the `android.service.chooser.chooser_target_service`
    name in your app manifest:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经声明了一个服务，对于每个我们想要公开的目标，我们在应用程序清单中添加了一个带有`android.service.chooser.chooser_target_service`名称的`<meta-data>`元素。
- en: '[PRE14]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s take a look at the code in our service:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们服务中的代码：
- en: '[PRE15]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can head to the **gist** if you wish to better view the code; you can visit
    [https://gist.github.com/MaTriXy/adeacdf5496bcdae5f42](https://gist.github.com/MaTriXy/adeacdf5496bcdae5f42).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望更好地查看代码，可以访问**代码片段**；你可以访问[https://gist.github.com/MaTriXy/adeacdf5496bcdae5f42](https://gist.github.com/MaTriXy/adeacdf5496bcdae5f42)。
- en: You have to implement the `onGetChooserTargets()` method as it will be called
    when direct-share is triggered. You return a list of `ChooserTarget` objects that
    represent sharing entry points to your application. The `onGetChooserTargets()`
    results are included along with the regular `ACTION_SEND` activity itself. So,
    we only want `ChooserTarget` objects that improve the flow and not duplicates.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须实现`onGetChooserTargets()`方法，因为当触发直接分享时，会调用它。你返回一个表示应用程序分享入口点的`ChooserTarget`对象列表。`onGetChooserTargets()`的结果与常规`ACTION_SEND`活动本身一起包含。因此，我们只希望`ChooserTarget`对象能改善流程，而不是重复项。
- en: When creating several `ChooserTarget` objects, each of them will probably point
    to the same activity. You must ensure that the extras bundle will contain distinguishing
    information so that each request will be unique. *Do not* put custom `Parcelable`
    objects in this bundle as it will cause crashes. You can find out more about `ChooserTarget`
    at [https://developer.android.com/reference/android/service/chooser/ChooserTarget.html#ChooserTarget](https://developer.android.com/reference/android/service/chooser/ChooserTarget.html#ChooserTarget).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建几个`ChooserTarget`对象时，每个对象可能都指向同一个活动。你必须确保额外的捆绑包将包含区分信息，以便每个请求都是唯一的。*不要*将自定义的`Parcelable`对象放在这个捆绑包中，因为它会导致崩溃。你可以通过[https://developer.android.com/reference/android/service/chooser/ChooserTarget.html#ChooserTarget](https://developer.android.com/reference/android/service/chooser/ChooserTarget.html#ChooserTarget)了解更多关于`ChooserTarget`的信息。
- en: What if we have nothing to share?
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我们没有东西可以分享怎么办？
- en: 'Sometimes, you won''t have any direct-share targets for a particular request;
    then, returning an empty list would be great. You can also disable the service
    via `android:enabled="false"` if you know that no results will be available until
    future usage of the app. Another option is to enable the service just for Android
    6.0\. This can easily be done using Boolean resources:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，对于特定的请求，你可能没有任何直接分享目标；那么，返回一个空列表会很棒。如果你知道在将来使用应用之前不会有任何结果，你也可以通过`android:enabled="false"`来禁用服务。另一个选择是只为Android
    6.0启用服务。这可以通过使用布尔资源轻松完成：
- en: 'Let''s add a Boolean resource named `is_share_targets_on`:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们添加一个名为`is_share_targets_on`的布尔资源：
- en: The default value is `res/values/bools.xml`; set it to `false`
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认值是`res/values/bools.xml`；将其设置为`false`
- en: Android 6.0 is API 23, so in `res/values-v23/bools.xml`, set it to `true`
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 6.0是API 23，所以在`res/values-v23/bools.xml`中，将其设置为`true`
- en: Add `android:enabled="@bool/is_share_targets_on"` to your service declaration
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的服务声明中添加`android:enabled="@bool/is_share_targets_on"`
- en: Direct Share best practices
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接分享最佳实践
- en: 'The following are few of the best practices followed in Direct Share:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在直接分享中遵循的一些最佳实践：
- en: Android 6.0 limits the number of share targets, only showing eight of them.
    Providing more than eight share targets will show the best eight according to
    the score.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 6.0限制了分享目标的数量，只显示其中的八个。提供超过八个分享目标将根据分数显示最佳的八个。
- en: The `FAILED BINDER TRANSACTION` exception can pop in for a visit if your list
    of targets exceeds 1 MB.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的目标列表超过1 MB，可能会出现`FAILED BINDER TRANSACTION`异常。
- en: Try to limit/cap how many share targets you try to return from your `ChooserTargetService`
    class.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试限制/封顶你从`ChooserTargetService`类中尝试返回的分享目标数量。
- en: Make sure your app's icon is shown properly as it will be applied as a badge
    over the icons that you use for Direct Share targets.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的应用图标显示正确，因为它将作为徽章应用于你用于直接分享目标的图标上。
- en: Voice interactions
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音交互
- en: '**Voice interactions** usually originate from user voice action. However, the
    voice interaction activity starts without any user input. Android Marshmallow
    has a new voice interaction API that, together with **voice actions**, allows
    us to build conversational voice experiences into our apps. Use the `isVoiceInteraction()`
    method to determine whether an activity is triggered by a voice action. Then,
    you can use the `VoiceInteractor` class and interact with the user.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**语音交互**通常源于用户的语音动作。然而，语音交互活动在没有用户输入的情况下启动。Android棉花糖有一个新的语音交互API，结合**语音动作**，它允许我们将对话式语音体验构建到我们的应用中。使用`isVoiceInteraction()`方法来确定活动是否由语音动作触发。然后，你可以使用`VoiceInteractor`类与用户交互。'
- en: Don't get confused with the `isVoiceInteractionRoot()` method, which returns
    `true` only if the activity is also the root of a voice interaction. Here, you
    will get `true` if your activity was started directly by the voice interaction
    service and not by another activity (another app) while undergoing voice interaction.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 不要与`isVoiceInteractionRoot()`方法混淆，该方法仅在活动也是语音交互的根时返回`true`。在这里，如果你的活动直接由语音交互服务启动，而不是在语音交互过程中由另一个活动（另一个应用）启动，你将得到`true`。
- en: A best practice would be to prompt the users and confirm that this is their
    intended action. You already know that voice input is invoked from **Google Now**,
    where you can open URLs with a simple voice input, such as `open android.com`.
    Now, you can invent new voice actions and register them with Google, driving traffic
    directly and specifically to your app.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最佳实践是提示用户并确认这是他们预期的操作。你已经知道语音输入是从**Google Now**中触发的，你只需简单的语音输入，如`open android.com`，就可以打开URL。现在，你可以发明新的语音动作并将它们注册到Google，直接且具体地引导流量到你的应用。
- en: To learn more about implementing voice actions, head to [https://developers.google.com/voice-actions/interaction/](https://developers.google.com/voice-actions/interaction/).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于实现语音操作的信息，请访问[https://developers.google.com/voice-actions/interaction/](https://developers.google.com/voice-actions/interaction/)。
- en: The Assist API
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助API
- en: Back in **Google I/O 2015**, we saw the *Now on Tap* feature, where Google Now
    could peek into a running app and provide contextual assistance. The `Assist`
    API offers a new way for users to engage through an **assistant**. The assistant
    must be enabled prior to using it, allowing it to be aware of the current context.
    Triggering the assistant is done by long-pressing the *Home* button, no matter
    which app is active.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在**2015年的Google I/O**上，我们看到了*Now on Tap*功能，Google Now能够窥视正在运行的应用并提供上下文辅助。`Assist`
    API 为用户通过**助手**进行互动提供了一种新方式。在使用助手之前，必须先启用它，使其能够了解当前上下文。通过长按*主页*按钮来触发助手，无论哪个应用处于活动状态都可以。
- en: You can opt out of this by setting the `WindowManager.LayoutParams.FLAG_SECURE`
    flag.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过设置`WindowManager.LayoutParams.FLAG_SECURE`标志来选择退出。
- en: Opting in requires you to use the new `AssistContent` class.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入，你需要使用新的`AssistContent`类。
- en: 'In order for us to be able to feed additional context from our app to the assistant,
    we need to follow these steps:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够从我们的应用向助手提供额外的上下文信息，我们需要遵循以下步骤：
- en: Implement the `Application.OnProvideAssistDataListener` interface, which is
    called when the user requests assistance.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`Application.OnProvideAssistDataListener`接口，当用户请求帮助时调用。
- en: Register it using `Application.registerOnProvideAssistDataListener()`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Application.registerOnProvideAssistDataListener()`注册它。
- en: Override the `onProvideAssistData()` callback, which is called when the user
    requests assistance. It is used to build an `ACTION_ASSIST` intent with all of
    the context of the current app.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onProvideAssistData()`回调，当用户请求帮助时调用。它用于构建带有当前应用所有上下文的`ACTION_ASSIST`意图。
- en: Override the `onProvideAssistContent()` callback; this is optional. It is called
    when the user requests assistance, allowing us to provide references to content
    related to the current activity.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onProvideAssistContent()`回调，这是可选的。当用户请求帮助时调用，允许我们提供与当前活动相关的内容引用。
- en: When done, unregister yourself using `Application.unregisterOnProvideAssistDataListener()`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，使用`Application.unregisterOnProvideAssistDataListener()`注销自己。
- en: Bluetooth API Changes
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝牙API变更
- en: Besides the changes mentioned previously, Android Marshmallow 6.0 has introduced
    a few more changes to the Bluetooth API.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前提到的变化，Android Marshmallow 6.0还在蓝牙API中引入了一些其他变化。
- en: Bluetooth stylus support
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蓝牙手写笔支持
- en: '**Stylus** has been here a for a while; Bluetooth stylus didn''t have full
    support for specifications in versions before Android Marshmallow. You can pair
    and connect a compatible Bluetooth stylus with either a phone or a tablet. Because
    you are not bound just to touches on screen, you can fuse the position, pressure,
    and button state data, allowing more precise user input and experience. Your app
    can add a listener to the stylus buttons and act accordingly. Just use the `View.OnContextClickListener`
    and `GestureDetector.OnContextClickListener` objects in your activity.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**手写笔**已经存在一段时间了；在Android棉花糖版本之前，蓝牙手写笔没有完全支持规范。你可以将兼容的蓝牙手写笔与手机或平板配对并连接。由于你不仅限于屏幕上的触摸，还可以融合位置、压力和按钮状态数据，从而提供更精确的用户输入和体验。你的应用可以为手写笔按钮添加监听器并相应地作出反应。只需在你的活动中使用`View.OnContextClickListener`和`GestureDetector.OnContextClickListener`对象。'
- en: 'In order to detect stylus button interactions and movement, you need the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测手写笔按钮的交互和移动，你需要以下内容：
- en: The `MotionEvent` methods
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MotionEvent`方法'
- en: The `getTooltype()` method, which returns `TOOL_TYPE_STYLUS` if a stylus with
    a button is touched on the screen
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTooltype()`方法，如果带有按钮的手写笔在屏幕上触摸，将返回`TOOL_TYPE_STYLUS`'
- en: 'The `getButtonState()` method, which returns (on Android 6.0-targeted apps)
    the following:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getButtonState()`方法，在针对Android 6.0的应用中返回以下内容：'
- en: '`BUTTON_STYLUS_PRIMARY`: Press the primary stylus button'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUTTON_STYLUS_PRIMARY`: 按下手写笔主按钮'
- en: '`BUTTON_STYLUS_SECONDARY`: Press the secondary button'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUTTON_STYLUS_SECONDARY`: 按下副按钮'
- en: '`BUTTON_STYLUS_PRIMARY` | `BUTTON_STYLUS_SECONDARY`: Press both the buttons'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUTTON_STYLUS_PRIMARY` | `BUTTON_STYLUS_SECONDARY`: 同时按下这两个按钮'
- en: 'Targeted apps with a lower API level than Android 6.0 will result in the following:'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对低于Android 6.0 API级别的应用将导致以下结果：
- en: '`BUTTON_SECONDARY`: Press the primary stylus button'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUTTON_SECONDARY`: 按下手写笔主按钮'
- en: '`BUTTON_TERTIARY`: Press the secondary button'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUTTON_TERTIARY`: 按下次级按钮'
- en: '`BUTTON_SECONDARY` | `BUTTON_TERTIARY`: Press both the buttons'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUTTON_SECONDARY` | `BUTTON_TERTIARY`：按下这两个按钮'
- en: Improved Bluetooth low energy scanning
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进的蓝牙低能耗扫描
- en: Used to Bluetooth low energy in your app? Well, now the scanning process is
    easier and improved. Use the new `setCallbackType()` method and specify that you
    want a callback when the system finds/sees an advertisement packet matching the
    `ScanFilter` class. You get more power-efficiency than in previous Android versions.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用里使用过蓝牙低能耗（BLE）吗？现在，扫描过程变得更加简单和高效了。使用新的 `setCallbackType()` 方法，并指定当系统发现/看到与
    `ScanFilter` 类匹配的广告包时，你希望获得回调。与之前安卓版本相比，你将获得更高的电源效率。
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: We went over a few of the changes in Android Marshmallow. All of these changes
    are important to follow and will help you in your app development cycles. There
    are a few more changes to be discussed in future chapters in a more detailed manner.
    Our next chapter talks about audio, video, and camera features and the changes
    made in Android 6.0.6.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了安卓棉花糖版本中的一些变化。所有这些变化都值得关注，并将在你的应用开发周期中为你提供帮助。在后续章节中，我们还会更详细地讨论一些其他变化。我们的下一章将讨论音频、视频和摄像头特性，以及在安卓6.0.6中做出的改变。
