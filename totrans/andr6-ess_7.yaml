- en: Chapter 7. Chrome Custom Tabs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章. Chrome自定义标签
- en: Have you ever wanted to add a **WebView** to your application? Maybe you've
    wanted to add browsing for a few web pages and show some relevant content from
    within your application? I know I had to. On almost every occasion, I was reluctant
    to use the WebView feature as this was one of the ugliest parts of the app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有想过在你的应用程序中添加一个**WebView**？也许你想要添加一些网页的浏览，并在你的应用程序中显示相关内容？我知道我必须这样做。几乎在每次，我都犹豫使用WebView功能，因为这是应用中最丑陋的部分之一。
- en: You can clearly see that the WebView feature is a web portion and the UI was
    added quite a few Android versions back, which caused my OCD UI/UX sense go kaboom.
    One of the newest additions released by Google was **Chrome custom tabs**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以清楚地看到，WebView功能是一个网页部分，UI在相当多的Android版本之前就已经添加，这让我的OCD UI/UX感觉爆炸了。谷歌发布的最新功能之一就是**Chrome自定义标签**。
- en: 'In this chapter, we will explore Chrome custom tabs and try to explain and
    demonstrate the benefits of using it instead of the plain old WebView:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Chrome自定义标签，并尝试解释和演示使用它而不是普通的旧WebView的好处：
- en: What is a Chrome custom tab?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Chrome自定义标签？
- en: When to use Chrome custom tabs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用Chrome自定义标签
- en: The implementation guide
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现指南
- en: What is a Chrome custom tab?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Chrome自定义标签？
- en: Well, most of us know tabs from every day Internet browsing. It doesn't really
    matter which browser you use; all browsers support tabs and multiple tabs' browsing.
    This allows us to have more than one website open at the same time and navigate
    between the opened instances. In Android, things are much the same, but when using
    WebView, you don't have tabs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们大多数人都从每天的互联网浏览中知道标签。你使用哪个浏览器并不重要；所有浏览器都支持标签和多标签浏览。这允许我们同时打开多个网站，并在打开的实例之间导航。在Android中，事情差不多，但是使用WebView时，你没有标签。
- en: What is WebView?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是WebView？
- en: WebView is the part in the Android OS that's responsible for rendering web pages
    in most Android apps. If you see web content in an Android app, chances are you're
    looking at WebView. The major exceptions to this rule are some of the Android
    browsers, such as Chrome, Firefox, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WebView是Android操作系统的一部分，负责在大多数Android应用中渲染网页。如果你在Android应用中看到网页内容，很可能你正在看WebView。这个规则的主要例外是一些Android浏览器，比如Chrome、Firefox等。
- en: In Android 4.3 and lower, WebView uses code based on Apple's **Webkit**. In
    Android 4.4 and higher, WebView is based on the **Chromium** project, which is
    the open source base of Google Chrome. In Android 5.0, WebView was decoupled into
    a separate app that allowed timely updates through Google Play without requiring
    firmware updates to be issued, and the same technique was used with Google Play
    services.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android 4.3及以下版本中，WebView使用基于苹果**Webkit**的代码。在Android 4.4及更高版本中，WebView基于**Chromium**项目，这是谷歌Chrome的开源基础。在Android
    5.0中，WebView被解耦成一个单独的应用程序，允许通过Google Play及时更新，而无需发布固件更新，与Google Play服务采用了同样的技术。
- en: 'Now, let''s talk again about a simple scenario: we want to display web content
    (URL-related) in our application. We have two options: either launch a browser
    or build our own in-app browser using WebView. Both options have trade-offs or
    disadvantages if we write them down. A browser is an external application and
    you can''t really change its UI; while using it, you push the users to other apps
    and you may lose them in *the wild*. On the other hand, using WebView will keep
    the users tightly inside. However, actually dealing with all possible actions
    in WebView is quite an overhead.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次讨论一个简单场景：我们希望在我们的应用程序中显示网页内容（与URL相关）。我们有两个选择：要么启动浏览器，要么使用WebView构建自己的应用内浏览器。如果我们列出这两种选择，它们都有权衡或缺点。浏览器是一个外部应用程序，你实际上无法改变它的UI；在使用它的过程中，你将用户推向其他应用，并且可能会在*野外*丢失他们。另一方面，使用WebView将用户紧密地留在应用内。然而，实际上处理WebView中所有可能的行为相当有负担。
- en: Google heard our rant and came to the rescue with Chrome custom tabs. Now we
    have better control over the web content in our application, and we can stitch
    web content into our app in a cleaner, prettier manner.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌听到了我们的抱怨，并推出了Chrome自定义标签来拯救。现在我们可以在应用程序中更好地控制网页内容，并且可以更干净、更美观地将网页内容嵌入到我们的应用中。
- en: Customization options
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义选项
- en: 'Chrome custom tabs allow several modifications and tweaks:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome自定义标签允许进行几项修改和调整：
- en: The toolbar color
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具栏颜色
- en: Enter and exit animations
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入和退出动画
- en: Custom actions for the toolbar and overflow menu
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具栏和溢出菜单的自定义操作
- en: Prestarted and prefetched content for faster loading
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预启动和预取内容以加快加载速度
- en: When to use Chrome custom tabs
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用Chrome自定义标签
- en: Ever since WebView came out, applications have been using it in multiple ways,
    embedding content—local static content inside the APK and dynamic content as loading
    web pages that were not designed for mobile devices at the beginning. Later on
    we saw the rise of the mobile web era complete with hybrid applications).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自从WebView推出以来，应用程序一直在以多种方式使用它，嵌入内容——在APK内的本地静态内容以及动态内容，加载最初并非为移动设备设计的网页。后来，我们见证了移动网络时代的兴起，包括混合应用程序的出现。
- en: Chrome custom tabs are a bit more than just loading local content or mobile-compatible
    web content. They should be used when you load web data and want to allow simple
    implementation and easier code maintenance and, furthermore, make the web content
    part of your application—as if it's always there within your app.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome自定义标签页不仅仅是加载本地内容或移动兼容的网页内容。当你加载网页数据并希望允许简单实现、更容易的代码维护，以及进一步将网页内容变为应用程序的一部分时，应该使用它——就像它一直存在于你的应用中一样。
- en: 'Among the reasons why you should use custom tabs are the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用自定义标签页的原因包括以下：
- en: 'Easy implementation: you use the support library when required or just add
    extras to your `View` intent. It''s that simple.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易实现：在需要时使用支持库，或者只需向你的`View`意图中添加额外内容。就这么简单。
- en: 'In app UI modifications, you can do the following:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用用户界面修改中，你可以执行以下操作：
- en: Set the toolbar color
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置工具栏颜色
- en: Add/change the action button
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加/更改操作按钮
- en: Add custom menu items to the overflow menu
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向溢出菜单中添加自定义菜单项
- en: Set and create custom in/out animations when entering the tab or exiting to
    the previous location
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置并创建自定义的进入/退出标签页时的动画效果，回到上一个位置
- en: 'Easier navigation and navigation logic: you can get a callback notifying you
    about an external navigation, if required. You know when the user navigates to
    web content and where they should return when done.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更简单的导航和导航逻辑：如果需要，你可以获得一个回调通知，了解外部导航的情况。你知道用户何时导航到网页内容，以及他们完成后应该返回哪里。
- en: 'Chrome custom tabs allow added performance optimizations that you can use:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome自定义标签页允许你使用以下性能优化：
- en: You can keep the engine running, so to speak, and actually give the custom tab
    a head start to start itself and do some warm up prior to using it. This is done
    without interfering or taking away precious application resources.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以保持引擎运行，这么说吧，实际上给自定义标签页一个提前启动的机会，在使用它之前进行一些预热。这样做不会干扰或占用宝贵的应用程序资源。
- en: You can provide a URL to load in advance in the background while waiting for
    other user interactions. This speeds up the user-visible page loading time and
    gives the user a sense of blazing fast application where all the content is just
    a click away.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以提供一个URL，在等待其他用户交互时在后台提前加载。这加快了用户可见的页面加载时间，并给用户一种应用程序非常快速的感觉，所有内容都只需点击一下即可访问。
- en: While using the custom tab, the application won't be evicted as the application
    level will still be in the foreground even though the tab is on top of it. So,
    we remain at the top level for the entire usage time (unless a phone call or some
    other user interaction leads to a change).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用自定义标签页时，应用程序不会被移除，因为即使标签页位于其顶部，应用程序级别仍然在前台。因此，在整个使用期间我们保持在顶级（除非电话来电或其他用户交互导致变更）。
- en: Using the same Chrome container means that users are already signed in to sites
    they connected to in the past; specific permissions that were granted previously
    apply here as well; even fill data, autocomplete, and sync work here.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相同的Chrome容器意味着用户已经登录到他们过去连接的网站；之前授予的特定权限在这里同样适用；甚至填充数据、自动完成和同步在这里也能工作。
- en: Chrome custom tabs allow us give the users the latest browser implementation
    on pre-Lollipop devices where WebView is not the latest version.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome自定义标签页允许我们在预Lollipop设备上为用户提供最新的浏览器实现，这些设备上的WebView不是最新版本。
- en: The implementation guide
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现指南
- en: As discussed earlier, we have a couple of features integrated into Chrome custom
    tabs. The first customizes the UI and interaction with the custom tabs. The second
    allows pages to be loaded faster and keeps the application alive.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如先前所讨论的，Chrome自定义标签页集成了几个功能。第一个是自定义用户界面与自定义标签页的交互。第二个可以让页面加载更快，并保持应用程序活跃。
- en: Can we use Chrome custom tabs?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们可以使用Chrome自定义标签页吗？
- en: 'Before we start using custom tabs, we want to make sure they''re supported.
    Chrome custom tabs expose a service, so the best check for support is to try and
    bind to the service. Success means that custom tabs are supported and can be used.
    You can check out this gist, which shows a helper how to to check it, or check
    the project source code later on at:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用自定义标签之前，我们希望确保它们得到支持。Chrome自定义标签公开了一个服务，因此最好的支持检查就是尝试绑定到该服务。成功意味着自定义标签得到支持并且可以使用。你可以查看这个代码片段，它展示了一个帮助器如何进行检查，或者稍后查看项目源代码：
- en: '[https://gist.github.com/MaTriXy/5775cb0ff98216b2a99d](https://gist.github.com/MaTriXy/5775cb0ff98216b2a99d)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://gist.github.com/MaTriXy/5775cb0ff98216b2a99d](https://gist.github.com/MaTriXy/5775cb0ff98216b2a99d)'
- en: After checking and learning that support exists, we will start with the UI and
    interaction part.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认并了解到存在支持之后，我们将从UI和交互部分开始。
- en: Custom UI and tab interaction
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义UI和标签交互
- en: Here, we will use the well-known `ACTION_VIEW` intent action, and by appending
    extras to the intent sent to Chrome, we will trigger changes in the UI. Remember
    that the `ACTION_VIEW` intent is compatible with all browsers, including Chrome.
    There are some phones without Chrome out there, or there are instances where the
    device's default browser isn't Chrome. In these cases, the user will navigate
    to the specific browser application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用众所周知的`ACTION_VIEW`意图动作，并通过向发送到Chrome的意图中附加额外内容，触发UI的变化。记住，`ACTION_VIEW`意图与所有浏览器兼容，包括Chrome。有些手机没有Chrome，或者设备的默认浏览器不是Chrome的情况也时有发生。在这些情况下，用户将导航到特定的浏览器应用。
- en: Intent is a convenient way to pass that extra data we want Chrome to get.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 意图是我们传递给Chrome额外数据的一种便捷方式。
- en: 'Don''t use any of these flags when calling to the Chrome custom tabs:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用Chrome自定义标签时，不要使用这些标志：
- en: '`FLAG_ACTIVITY_NEW_TASK`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FLAG_ACTIVITY_NEW_TASK`'
- en: '`FLAG_ACTIVITY_NEW_DOCUMENT`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FLAG_ACTIVITY_NEW_DOCUMENT`'
- en: 'Before using the API, we need to add it to our `gradle` file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用API之前，我们需要将其添加到我们的`gradle`文件中：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will allow us to use the custom tab support library in our application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在应用中使用自定义标签支持库：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code is an extra from the custom tabs support library; it's used
    to match the session. It must be included in the intent when opening a custom
    tab. It can be null if there is no need to match any service-side sessions with
    the intent.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码是自定义标签支持库的额外内容；它用于匹配会话。在打开自定义标签时，必须在意图中包含它。如果不需要与意图匹配任何服务端会话，它可以为null。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We have a sample project to show the options for the UI called **ChubbyTabby**
    at [https://github.com/MaTriXy/ChubbyTabby](https://github.com/MaTriXy/ChubbyTabby).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个示例项目，展示了UI的选项，名为**ChubbyTabby**，在[https://github.com/MaTriXy/ChubbyTabby](https://github.com/MaTriXy/ChubbyTabby)。
- en: 'We will go over the important parts here as well. Our main interaction comes
    from a special builder from the support library called `CustomTabsIntent.Builder`;
    this class will help us build the intent we need for the custom tab:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里也将讨论重要的部分。我们的主要交互来自于支持库中一个特殊的构建器，称为`CustomTabsIntent.Builder`；这个类将帮助我们构建自定义标签所需的意图。
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A few things to notice here are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的几件事如下：
- en: 'Every menu item uses a pending intent; if you don''t know what a pending intent
    is, head to:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个菜单项都使用了一个待定意图；如果你不知道待定意图是什么，可以访问：
- en: '[http://developer.android.com/reference/android/app/PendingIntent.html](http://developer.android.com/reference/android/app/PendingIntent.html)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/reference/android/app/PendingIntent.html](http://developer.android.com/reference/android/app/PendingIntent.html)'
- en: When we set custom icons, such as *close* buttons or an *action* button, for
    that matter, we use bitmaps and we must decode the bitmap prior to passing it
    to the builder
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们设置自定义图标，比如*关闭*按钮或*动作*按钮时，我们使用位图，并且在传递给构建器之前必须对位图进行解码
- en: Setting animations is easy and you can use animations' XML files that you created
    previously; just make sure that you test the result before releasing the app
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置动画很容易，你可以使用之前创建的动画XML文件；只需确保在发布应用之前测试结果。
- en: 'The following screenshot is an example of a Chrome custom tab:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图是一个Chrome自定义标签的例子：
- en: '![Custom UI and tab interaction](img/00020.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![自定义UI和标签交互](img/00020.jpeg)'
- en: The custom action button
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义动作按钮
- en: As developers, we have full control over the action buttons presented in our
    custom tab. For most use cases, we can think of a share action or maybe a more
    common option that your users will perform. The action button is basically a bundle
    with an icon of the action button and a pending intent that will be called by
    Chrome when your user hits the action button. The icon should be 24 dp in height
    and 24-48 dp in width according to specifications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们对自定义标签中显示的操作按钮拥有完全控制权。在大多数用例中，我们可以考虑一个分享动作，或者可能是用户会执行的一个更常见的选项。操作按钮基本上是一个捆绑包，包含动作按钮的图标和待定意图，当用户点击动作按钮时，Chrome
    会调用它。根据规范，图标的高度应为 24 dp，宽度应为 24-48 dp。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Configuring a custom menu
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置自定义菜单
- en: By default, Chrome custom tabs usually have a three-icon row with **Forward**,
    **Page Info**, and **Refresh** on top at all times and **Find in page** and **Open
    in Browser (Open in Chrome** can appear as well) at the footer of the menu.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Chrome 自定义标签通常在顶部始终显示带有**前进**、**页面信息**和**刷新**三个图标的行，而**在页面中查找**和**在浏览器中打开（在
    Chrome 中打开）**也可能出现在菜单底部。
- en: 'We, developers, have the ability to add and customize up to three menu items
    that will appear between the icon row and foot items as shown in the following
    screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们有能力添加和定制最多三个菜单项，这些菜单项将显示在图标行和底部项目之间，如下面的截图所示：
- en: '![Configuring a custom menu](img/00021.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![配置自定义菜单](img/00021.jpeg)'
- en: 'The menu we see is actually represented by an array of bundles, each with menu
    text and a pending intent that Chrome will call on our behalf when the user taps
    the item:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的菜单实际上由一系列包含菜单文本和待定意图的捆绑包表示，当用户点击该项目时，Chrome 会代表我们调用这些意图。
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configuring custom enter and exit animations
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置自定义进入和退出动画
- en: 'Nothing is complete without a few animations to tag along. This is no different,
    as we have two transitions to make: one for the custom tab to enter and another
    for its exit; we have the option to set a specific animation for each start and
    exit animation:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 没有动画伴随总是不完整的。这里也不例外，因为我们需要制作两个过渡：一个是自定义标签进入，另一个是退出；我们可以为每个开始和退出动画设置特定的动画：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Chrome warm-up
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chrome 预热
- en: Normally, after we finish setting up the intent with the intent builder, we
    should call `CustomTabsIntent.launchUrl (Activity context, Uri url)`, which is
    a nonstatic method that will trigger a new custom tab activity to load the URL
    and show it in the custom tab. This can take up quite some time and impact the
    impression of smoothness the app provides.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在使用意图构建器设置好意图之后，我们应该调用`CustomTabsIntent.launchUrl(Activity context, Uri url)`方法，这是一个非静态方法，会触发新的自定义标签活动来加载
    URL，并在自定义标签中显示。这可能会花费一些时间，并影响应用提供的流畅性体验。
- en: 'We all know that users demand a near-instantaneous experience, so Chrome has
    a service that we can connect to and ask it to warm up the browser and its native
    components. Calling this will ask Chrome to perform the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道用户要求近乎即时的体验，所以 Chrome 有一个我们可以连接的服务，并要求它预热浏览器及其本地组件。调用这个方法会要求 Chrome 执行以下操作：
- en: The DNS preresolution of the URL's main domain
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 URL 的主域进行 DNS 预解析
- en: The DNS preresolution of the most likely subresources
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对最可能使用的子资源的 DNS 预解析
- en: Preconnection to the destination, including HTTPS/TLS negotiation
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与目的地的预连接，包括 HTTPS/TLS 协商
- en: 'The process to warm up Chrome is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 预热 Chrome 的过程如下：
- en: Connect to the service.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到服务。
- en: Attach a navigation callback to get notified upon finishing the page load.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 附加一个导航回调，以便在页面加载完成时得到通知。
- en: On the service, call `warmup` to start Chrome behind the scenes.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务中，调用`warmup`方法在后台启动 Chrome。
- en: Create `newSession`; this session is used for all requests to the API.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`newSession`；此会话用于所有 API 请求。
- en: Tell Chrome which pages the user is likely to load with `mayLaunchUrl`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mayLaunchUrl`告诉 Chrome 用户可能会加载哪些页面。
- en: Launch the intent with the session ID generated in step 4.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用步骤 4 中生成的会话 ID 启动意图。
- en: Connecting to the Chrome service
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到 Chrome 服务
- en: Connecting to the Chrome service involves dealing with **Android Interface Definition
    Language** (**AIDL**).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Chrome 服务需要处理**Android 接口定义语言**（**AIDL**）。
- en: 'If you don''t know about AIDL, read:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不了解 AIDL，请阅读：
- en: '[http://developer.android.com/guide/components/aidl.html](http://developer.android.com/guide/components/aidl.html)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/guide/components/aidl.html](http://developer.android.com/guide/components/aidl.html)'
- en: 'The interface is created with AIDL, and it automatically creates a proxy service
    class for us:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接口是用 AIDL 创建的，它会自动为我们创建一个代理服务类：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, we check for the Chrome package name; in our sample project, we have a
    special method to check whether Chrome is present in all variations. After we
    set the package, we bind to the service and get a `CustomTabsClient` object that
    we can use until we''re disconnected from the service:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们会检查Chrome包名称；在我们的示例项目中，我们有一个特殊的方法来检查在各种变体中是否包含Chrome。设置包之后，我们绑定到服务，并获取一个
    `CustomTabsClient` 对象，我们可以使用它直到与服务断开连接：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After we bind to the service, we can call the proper methods we need.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定到服务后，我们可以调用我们需要的适当方法。
- en: Warming up the browser process
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加热浏览器进程
- en: 'The method for this is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法如下所示：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Flags are currently not being used, so we pass `0` for now.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当前未使用标志，因此现在我们传递 `0`。
- en: The warm-up procedure loads native libraries and the browser process required
    to support custom tab browsing later on. This is asynchronous, and the return
    value indicates whether the request has been accepted or not. It returns `true`
    to indicate success.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 温习过程会加载本地库和浏览器进程，以便稍后支持自定义标签浏览。这个过程是异步的，返回值表示请求是否已被接受。它返回 `true` 以表示成功。
- en: Creating a new tab session
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新标签会话
- en: 'The method for this is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法如下所示：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The new tab session is used as the grouping object tying the `mayLaunchUrl`
    call, the `VIEW` intent that we build, and the tab generated altogether. We can
    get a callback associated with the created session that would be passed for any
    consecutive `mayLaunchUrl` calls. This method returns `CustomTabsSession` when
    a session is created successfully; otherwise, it returns `Null`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 新标签会话用作将 `mayLaunchUrl` 调用、我们构建的 `VIEW` 意图以及生成的标签捆绑在一起的分组对象。我们可以获取与创建的会话相关联的回调，该回调将传递给任何连续的
    `mayLaunchUrl` 调用。此方法在成功创建会话时返回 `CustomTabsSession`；否则，它返回 `Null`。
- en: Setting the prefetching URL
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置预取URL
- en: 'The method for this is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法如下所示：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This method will notify the browser that a navigation to this URL will happen
    soon. Make sure to `warmup()` prior to calling this method – this is a must. The
    most likely URL has to be specified first, and we can send an optional list of
    other likely URLs (`otherLikelyBundles`). The list have to be sorted in a descending
    order and the optional list may be ignored. A new call to this method will lower
    the priority of previous calls and can result in URLs not being prefetched. Boolean
    values inform us whether the operation has been completed successfully.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将通知浏览器，很快就会导航到此URL。在调用此方法之前，请确保先执行 `warmup()` ——这是必须的。首先必须指定最可能的URL，我们可以发送一个可选的其他可能URL列表（`otherLikelyBundles`）。列表必须按降序排序，可选列表可能会被忽略。对此方法的新的调用将降低之前调用的优先级，可能导致URL没有被预取。布尔值告诉我们操作是否已成功完成。
- en: Custom tabs connection callback
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义标签连接回调
- en: 'The method for this is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '该方法如下所示： '
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have a callback triggered upon each navigation event in the custom tab.
    The `int navigationEvent` element is one of the six that defines the state the
    page is in. Refer to the following code for more information:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在自定义标签的每次导航事件中都有触发回调。`int navigationEvent` 元素定义页面状态的六个中的一个。更多信息请参考以下代码：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We learned about a newly added feature, Chrome custom tabs, which allows us
    to embed web content into our application and modify the UI. Chrome custom tabs
    allow us to provide a fuller, faster in-app web experience for our users. We use
    the Chrome engine under the hood, which allows faster loading than regular WebViews
    or loading the entire Chrome (or another browser) application.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到一项新增加的功能——Chrome自定义标签，它允许我们将网页内容嵌入到我们的应用程序中并修改用户界面。Chrome自定义标签使我们可以为用户提供更加完整、快速的应用内网页体验。我们在幕后使用Chrome引擎，这比常规WebView加载更快，甚至比加载整个Chrome（或其他浏览器）应用程序还要快。
- en: We saw that we can preload pages in the background, making it appear as if our
    data is blazing fast. We can customize the look and feel of our Chrome tab so
    that it matches our app. Among the changes we saw were the toolbar color, transition
    animations, and even the addition of custom actions to the toolbar.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们可以在后台预加载页面，使得我们的数据看起来非常快。我们可以自定义Chrome标签的外观，使其与我们的应用相匹配。我们看到的改变包括工具栏颜色、过渡动画，甚至是在工具栏中添加自定义操作。
- en: Custom tabs also benefit from Chrome features such as saved passwords, autofill,
    tap to search, and sync; these are all available within a custom tab. For developers,
    integration is quite easy and requires only a few extra lines of code in the basic
    level. The support library helps with more complex integration, if required.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义标签页同样能够享受到 Chrome 浏览器的功能，比如保存的密码、自动填充、点击搜索以及同步；所有这些功能在自定义标签页内都可以使用。对于开发者来说，集成这些功能相当简单，在基础层面上仅需添加几行代码。如果需要，支持库可以帮助实现更复杂的集成。
- en: This is a Chrome feature, which means you get it on any Android device where
    the latest versions of Chrome are installed. Remember that the Chrome custom tab
    support library changes with new features and fixes, which is the same as other
    support libraries, so please update your version and make sure that you use the
    latest API to avoid any issues.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Chrome 浏览器的一个功能，意味着在任何安装了最新版 Chrome 的 Android 设备上都可以使用它。请记住，随着新功能和修复的推出，Chrome
    自定义标签页支持库会发生变化，这与其他支持库是一样的，因此请更新您的版本，并确保使用最新的 API 以避免任何问题。
- en: In our next chapter, we will take a deep breath and look at some of the new
    authentication/security features Android Marshmallow has to offer.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节中，我们将深入探讨一下 Android Marshmallow 提供的一些新的认证/安全特性。
