["```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_CFLAGS := \n    LOCAL_MODULE    := libpng\n    LOCAL_SRC_FILES :=\\\n      png.c \\\n      pngerror.c \\\n      pngget.c \\\n      pngmem.c \\\n      pngpread.c \\\n      pngread.c \\\n      pngrio.c \\\n      pngrtran.c \\\n      pngrutil.c \\\n      pngset.c \\\n      pngtrans.c \\\n      pngwio.c \\\n      pngwrite.c \\\n      pngwtran.c \\\n      pngwutil.c \n    LOCAL_LDLIBS := -lz\n    LOCAL_EXPORT_LDLIBS := -lz\n    LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)\n    include $(BUILD_STATIC_LIBRARY)\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE    := libseamcarv\n    LOCAL_SRC_FILES :=\\\n      sc_core.c  \\\n      sc_carve.c  \\\n      sc_color.c  \\\n      sc_shift.c \\\n      sc_mgmnt.c \\\n      seamcarv.c\n    LOCAL_CFLAGS := -std=c99 \n    LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)\n    include $(BUILD_STATIC_LIBRARY)\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE    := fusch\n    LOCAL_SRC_FILES := fusch.c\n    LOCAL_CFLAGS := -std=c99\n    LOCAL_STATIC_LIBRARIES := libpng libseamcarv\n    include $(BUILD_EXECUTABLE)\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(call all-subdir-makefiles)\n    ```", "```kt\n    $ adb push fusch /data/data/\n    ```", "```kt\n    $ adb shell\n    # cd /data/data\n    # chmod 755 fusch\n    # ./fusch\n    ```", "```kt\n    $ adb push cookbook_ch9_test.png /data/data/\n    ```", "```kt\n    # ./fusch cookbook_ch9_test.png 1.png h-200\n    ```", "```kt\n    $ adb pull /data/data/1.png .\n    ```", "```kt\n    include $(BUILD_EXECUTABLE)\n    ```", "```kt\n    #!/bin/bash\n    NDK=~/Desktop/android/android-ndk-r8b\n    SYSROOT=$NDK/platforms/android-8/arch-arm/\n    export CFLAGS=\"-fpic \\\n       -ffunction-sections \\\n       -funwind-tables \\\n       -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ \\\n       -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ \\\n      -Wno-psabi \\\n      -march=armv5te \\\n       -mtune=xscale \\\n       -msoft-float \\\n      -mthumb \\\n       -Os \\\n      -DANDROID \\\n       -fomit-frame-pointer \\\n       -fno-strict-aliasing \\\n       -finline-limit=64\"\n    export LDFLAGS=\"-lz\"\n    export CC=\"$NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-gcc --sysroot=$SYSROOT\"\n    ./configure \\\n       --host=arm-linux-androideabi \\\n       --prefix=$(pwd) \\\n       --exec-prefix=$(pwd) \\\n      --enable-shared=false \\\n      --enable-static=true\n    make clean\n    make \n    make install\n    ```", "```kt\n    #!/bin/bash\n    NDK=~/Desktop/android/android-ndk-r8b\n    SYSROOT=$NDK/platforms/android-8/arch-arm/\n    export CFLAGS=\"-fpic \\\n       -ffunction-sections \\\n       -funwind-tables \\\n       -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ \\\n       -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ \\\n      -Wno-psabi \\\n      -march=armv5te \\\n       -mtune=xscale \\\n       -msoft-float \\\n      -mthumb \\\n       -Os \\\n       -fomit-frame-pointer \\\n       -fno-strict-aliasing \\\n       -finline-limit=64 \\\n      -std=c99 \\\n      -DANDROID \"\n    export CC=\"$NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-gcc --sysroot=$SYSROOT\"\n    AR=\"$NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-ar\"\n    SRC_FILES=\"\\\n      sc_core.c  \\\n      sc_carve.c  \\\n      sc_color.c  \\\n      sc_shift.c \\\n      sc_mgmnt.c \\\n      seamcarv.c\"\n    $CC $SRC_FILES $CFLAGS -c\n    $AR cr libseamcarv.a *.o \n    ```", "```kt\n    #!/bin/bash\n    NDK=~/Desktop/android/android-ndk-r8b\n    SYSROOT=$NDK/platforms/android-8/arch-arm\n    CUR_D=$(pwd)\n    export CFLAGS=\"-fpic \\\n       -ffunction-sections \\\n       -funwind-tables \\\n       -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ \\\n       -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ \\\n      -Wno-psabi \\\n      -march=armv5te \\\n       -mtune=xscale \\\n       -msoft-float \\\n      -mthumb \\\n       -Os \\\n       -fomit-frame-pointer \\\n       -fno-strict-aliasing \\\n       -finline-limit=64 \\\n      -std=c99 \\\n      -DANDROID \\\n      -I$CUR_D/../fusch_lib \\\n      -I$CUR_D/../libpng-1.2.50/include\"\n    export LDFLAGS=\"-Wl,--no-undefined -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -lz -lc -lm -lpng -lseamcarv -L$CUR_D/../fusch_lib -L$CUR_D/../libpng-1.2.50/lib\"\n    export CC=\"$NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-gcc --sysroot=$SYSROOT\"\n    SRC_FILES=\"fusch.c\"\n    $CC $SRC_FILES $CFLAGS $LDFLAGS -o fusch\n    ```", "```kt\n    $ cd <path to project folder>/PortingExecutableBuildSystem/jni/fusch\n    $ adb push fusch /data/data/\n    ```", "```kt\n    $ adb shell\n    # cd /data/data\n    # chmod 755 fusch\n    # ./fusch\n    ```", "```kt\n    $ adb push cookbook_ch9_test.png /data/data/\n    ```", "```kt\n    # ./fusch cookbook_ch9_test.png 1.png v-200\n    ```", "```kt\n    $ adb pull /data/data/1.png .\n    ```", "```kt\n$ ./configure â€“help\n```", "```kt\n-lpng -lseamcarv -L$CUR_D/../fusch_lib -L$CUR_D/../libpng-1.2.50/lib\n```", "```kt\n    #ifdef ANDROID_BUILD\n    #include <jni.h>\n    #include \"mylog.h\"\n    int naMain(JNIEnv* env, jclass clazz, jstring pCmdStr);\n\n    jint JNI_OnLoad(JavaVM* pVm, void* reserved) {\n      JNIEnv* env;\n      if ((*pVm)->GetEnv(pVm, (void **)&env, JNI_VERSION_1_6) != JNI_OK) {\n        return -1;\n      }\n      JNINativeMethod nm[1];\n      nm[0].name = \"naMain\";\n      nm[0].signature = \"(Ljava/lang/String;)I\";\n      nm[0].fnPtr = (void*)naMain;\n      jclass cls = (*env)->FindClass(env, \"cookbook/chapter9/portingexecutableaui/MainActivity\");\n      // Register methods with env->RegisterNatives.\n      (*env)->RegisterNatives(env, cls, nm, 1);\n      return JNI_VERSION_1_6;\n    }\n\n     int naMain(JNIEnv* env, jclass clazz, jstring pCmdStr) {\n      int argc = 0;\n      char** argv = (char**) malloc (sizeof(char*)*4);\n      *argv = \"fusch\";\n      char** targv = argv + 1;\n      argc++;\n      jboolean isCopy;\n       char *cmdstr = (*env)->GetStringUTFChars(env, pCmdStr, &isCopy);\n       if (NULL == cmdstr) {\n         LOGI(2, \"get string failed\");\n       }\n       LOGI(2, \"naMain assign parse string %s\", cmdstr);\n       char* pch;\n       pch = strtok(cmdstr, \" \");\n       while (NULL != pch) {\n         *targv = pch;\n         argc++;\n         targv++;\n         pch = strtok(NULL, \" \");\n       }\n       LOGI(1, \"No. of arguments: %d\", argc);\n       LOGI(1, \"%s %s %s %s\", argv[0], argv[1], argv[2], argv[3]);\n    #else\n     int main(int argc, char *argv[]) {\n    #endif\n    ```", "```kt\n    #ifdef ANDROID_BUILD\n       (*env)->ReleaseStringUTFChars(env, pCmdStr, cmdstr);\n    #endif\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE    := fusch\n    LOCAL_SRC_FILES := fusch.c\n    LOCAL_CFLAGS := -std=c99 -DANDROID_BUILD\n    LOCAL_STATIC_LIBRARIES := libpng libseamcarv\n    LOCAL_LDLIBS := -llog\n    include $(BUILD_SHARED_LIBRARY)\n\n    ```", "```kt\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    ```", "```kt\n    public static final int MSG_TYPE_PROG = 1;\n    public static final int MSG_TYPE_SUCCESS = 2;\n    public static final int MSG_TYPE_FAILURE = 3;\n    Handler handler = new Handler() {\n      @Override\n      public void handleMessage(Message msg) {\n        switch(msg.what) {\n          case MSG_TYPE_PROG:\n            String updateMsg = (String)msg.obj;\n            if (1 == msg.arg1) {\n              String curText = text1.getText().toString();\n              String newText = curText.substring(0, curText.lastIndexOf(\"\\n\")) + \"\\n\" + updateMsg;\n              text1.setText(newText);\n            } else if (2 == msg.arg1) {\n              text1.append(updateMsg);\n            } else {\n              text1.append(\"\\n\" + updateMsg);\n            }\n            break;\n          case MSG_TYPE_SUCCESS:\n            Uri uri = Uri.fromFile(new File(outputImageDir + outputImgFileName));\n            img2.setImageURI(uri);\n            text1.append(\"\\nprocessing done!\");\n            text2.setText(getImageDimension(inputImagePath) + \";\" + \n            getImageDimension(outputImageDir + outputImgFileName));\n            break;\n          case MSG_TYPE_FAILURE:\n            text1.append(\"\\nerror processing the image\");\n            break;\n        }\n      }\n    };\n    ```", "```kt\n    private class ImageProcRunnable implements Runnable {\n      String procCmd;\n      public ImageProcRunnable(String cmd) {\n        procCmd = cmd;\n      }\n      @Override\n      public void run() {\n        int res = naMain(procCmd, MainActivity.this);\n        if (0 == res) {\n          //success, send message to handler\n          Message msg = new Message();\n          msg.what = MSG_TYPE_SUCCESS;\n          handler.sendMessage(msg);\n        } else {\n          //failure, send message to handler\n          Message msg = new Message();\n          msg.what = MSG_TYPE_FAILURE;\n          handler.sendMessage(msg);\n        }\n      }\n    }\n    ```", "```kt\n    public void updateProgress(String pContent, int pInPlaceUpdate) {\n      Message msg = new Message();\n      msg.what = MSG_TYPE_PROG;\n      msg.arg1 = pInPlaceUpdate;\n      msg.obj = pContent;\n      handler.sendMessage(msg);\n    }\n    ```", "```kt\n    #ifdef ANDROID_BUILD\n    int naMain(JNIEnv* env, jobject pObj, jstring pCmdStr, jobject pMainActObj);\n    jint JNI_OnLoad(JavaVM* pVm, void* reserved) {\n      JNIEnv* env;\n      if ((*pVm)->GetEnv(pVm, (void **)&env, JNI_VERSION_1_6) != JNI_OK) {\n        return -1;\n      }\n      cachedJvm = pVm;\n      JNINativeMethod nm[1];\n      nm[0].name = \"naMain\";\n      nm[0].signature = \"(Ljava/lang/String;Lcookbook/chapter9/portingexecutableaui/MainActivity;)I\";\n      nm[0].fnPtr = (void*)naMain;\n      jclass cls = (*env)->FindClass(env, \"cookbook/chapter9/portingexecutableaui/MainActivity\");\n      (*env)->RegisterNatives(env, cls, nm, 1);\n      return JNI_VERSION_1_6;\n    }\n    int naMain(JNIEnv* env, jobject pObj, jstring pCmdStr, jobject pMainActObj) {\n      char progBuf[500];\n      jmethodID updateProgMID, toStringMID;\n      jstring progStr;\n      jclass mainActivityClass = (*env)->GetObjectClass(env, pMainActObj);\n      cachedMainActObj = (*env)->NewGlobalRef(env, pMainActObj);\n      updateProgMID = (*env)->GetMethodID(env, mainActivityClass, \"updateProgress\", \"(Ljava/lang/String;I)V\");\n      if (NULL == updateProgMID) {\n        LOGE(1, \"error finding method updateProgress\");\n        return EXIT_FAILURE;\n      }\n      int argc = 0;\n      char** argv = (char**) malloc (sizeof(char*)*4);\n      *argv = \"fusch\";\n      char** targv = argv + 1;\n      argc++;\n      jboolean isCopy = JNI_TRUE;\n        char *cmdstr = (*env)->GetStringUTFChars(env, pCmdStr, &isCopy);\n        if (NULL == cmdstr) {\n           LOGI(2, \"get string failed\");\n           return EXIT_FAILURE;\n         }\n         char* pch;\n        pch = strtok(cmdstr, \" \");\n        while (NULL != pch) {\n           *targv = pch;\n           argc++;\n           targv++;\n           pch = strtok(NULL, \" \");\n       }\n        LOGI(1, \"No. of arguments: %d\", argc);\n         LOGI(1, \"%s %s %s %s\", argv[0], argv[1], argv[2], argv[3]);\n    #else\n     int main(int argc, char *argv[]) {\n    #endif\n    ```", "```kt\n    #ifdef ANDROID_BUILD\n       (*env)->ReleaseStringUTFChars(env, pCmdStr, cmdstr);\n       (*env)->DeleteGlobalRef(env, cachedMainActObj);\n       cachedMainActObj = NULL;\n    #endif\n    ```", "```kt\n    #ifdef ANDROID_BUILD\n      progStr = (*env)->NewStringUTF(env, MSG[I_NOTHINGTODO]);\n      (*env)->CallVoidMethod(env, pMainActObj, updateProgMID, progStr, 0);\n    #else\n      puts(MSG[I_NOTHINGTODO]);\n    #endif\n    ```", "```kt\n    #ifdef ANDROID_BUILD\n      char progBuf[500];\n      JNIEnv *env;\n      jmethodID updateProgMID;\n      (*cachedJvm)->AttachCurrentThread(cachedJvm, &env, NULL);\n      jstring progStr;\n      jclass mainActivityClass = (*env)->GetObjectClass(env, cachedMainActObj);\n      updateProgMID = (*env)->GetMethodID(env, mainActivityClass, \"updateProgress\", \"(Ljava/lang/String;I)V\");\n      if (NULL == updateProgMID) {\n        LOGE(1, \"error finding method updateProgress at seam_progress\");\n        (*cachedJvm)->DetachCurrentThread(cachedJvm);\n        pthread_exit((void*)NULL);\n      }\n    #endif\n    ```", "```kt\n    #ifdef ANDROID_BUILD\n      sprintf(progBuf, \"%6d %6d %3d%%\", max, pro, lrintf((float)(pro * 100) / max));\n      progStr = (*env)->NewStringUTF(env, progBuf);\n      (*env)->CallVoidMethod(env, cachedMainActObj, updateProgMID, progStr, 1);\n    #else\n      printf(\"%6d %3d%% \", pro, lrintf((float)(pro * 100) / max));\n    #endif\n    ```"]