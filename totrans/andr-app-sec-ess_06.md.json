["```kt\nfor (Provider provider: Security.getProviders()) {\n    System.out.println(provider.getName());\n}\n```", "```kt\nfor (Provider provider: Security.getProviders()) {\n    System.out.println(provider.getName());\n    for (String key: provider.stringPropertyNames()) {\n      System.out.println(\"\\t\" + key +\n        \"\\t\" + provider.getProperty(key));\n    }\n}\n```", "```kt\nint min = 1;\nint max = 100;\n\npublic int getRandom(int min, int max) {\n  Random random = new Random();\n  int num = random.nextInt(max - min + 1) + min;\n  return num;\n}\n```", "```kt\nfinal MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\ndigest.update(s.getBytes());\nbyte messageDigest[] = digest.digest();\n```", "```kt\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyGen.initialize(2048);\nKeyPair key = keyGen.generateKeyPair();\n```", "```kt\nKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\nkeyFactory.generatePublic(keySpecs);\n```", "```kt\nprivate String rsaEncrypt (String plainText) {\n    Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n    PublicKey publicKey = key.getPublic();\n    cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n    byte [] cipherBytes = cipher.doFinal(plainText.getBytes());\n    String cipherText = new String(cipherBytes,\n        \"UTF8\").toString();\n    return cipherText;\n}\n```", "```kt\nprivate String rsaDecrypt (String cipherText) {\n    Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n    PrivateKey privateKey = key.getPrivate();\n    cipher.init(Cipher.DECRYPT_MODE, privateKey);\n    byte [] plainBytes = cipher.doFinal(cipherText.getBytes());\n    String plainText = new String(plainBytes, \"UTF8\").toString();\n    return plainText;\n}\n```", "```kt\n// DH params\nBigInteger g = new BigInteger(\"0123456789\", 16);\nBigInteger p = new BigInteger(\"0123456789\", 16);\nDHParameterSpec dhParams = new DHParameterSpec(p, g);\n\n// Generate Key pair\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"DH\");\nkeyGen.initialize(dhParams, new SecureRandom());\n\n// Generate individual keys\nKeyAgreement aKeyAgree = KeyAgreement.getInstance(\"DH\");\nKeyPair aPair = keyGen.generateKeyPair();\naKeyAgree.init(aPair.getPrivate());\n\nKeyAgreement bKeyAgree = KeyAgreement.getInstance(\"DH\");\nKeyPair bPair = keyGen.generateKeyPair();\nbKeyAgree.init(bPair.getPrivate());\n\n// Do the final phase of key agreement using other party's \n  public key\naKeyAgree.doPhase(bPair.getPublic(), true);\nbKeyAgree.doPhase(aPair.getPublic(), true);\n```", "```kt\nCipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n```", "```kt\nCipher cipher = Cipher.getInstance(\"AES/ECB\");\n```", "```kt\nCipher cipher = Cipher.getInstance(\"RSA/CBC/PKCS1Padding\");\n```", "```kt\nCipher cipher = Cipher.getInstance(\"AES/CBC\");\n```", "```kt\nCipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n```", "```kt\nCipher cipher = Cipher.getInstance(\"AES/CFB\");\n```", "```kt\nCipher cipher = Cipher.getInstance(\"RSA/OFB/PKCS1Padding\");\n```", "```kt\nCipher cipher = Cipher.getInstance(\"AES/OFB\");\n```", "```kt\n//Generate individual keys\nCipher cipher = Cipher.getInstance(\"AES\");\nKeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\ngenerator.init(128);\nKey secretKey = keyGen.generateKey();\nbyte[] key = skey.getEncoded();\n```", "```kt\nbyte[] plaintext = \"plainText\".getBytes();\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] cipherText = cipher.doFinal(plainText);\n```", "```kt\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] encrypted = cipher.doFinal(cipherText);\n```", "```kt\nString plainText = \"This is my test string.\";\nString key = \"This is my test key.\";\nMac mac = Mac.getInstance(\"HmacSHA1\");\nSecretKeySpec secret = new SecretKeySpec(key.getBytes(\"UTF-8\"),\n    mac.getAlgorithm());\nmac.init(secret);\nbyte[] digest = mac.doFinal(plainText.getBytes());\nString stringDigest = new String(digest);\n```"]