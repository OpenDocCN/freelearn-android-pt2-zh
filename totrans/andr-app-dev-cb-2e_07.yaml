- en: Chapter 7. Alerts and Notifications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 警报和通知
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Lights, Action, and Sound – getting the user's attention!
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灯光、动作和声音——吸引用户的注意！
- en: Creating a Toast using a custom layout
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义布局创建Toast
- en: Displaying a message box with AlertDialog
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AlertDialog显示消息框
- en: Displaying a progress dialog
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示进度对话框
- en: Lights, Action, and Sound Redux using Notifications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用通知重新实现灯光、动作和声音
- en: Creating a Media Player Notification
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建媒体播放器通知
- en: Making a Flashlight with a Heads-Up Notification
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用抬头通知制作手电筒
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Android provides many ways to notify your user—from non-visual methods, including
    sounds, lights, and vibration, to visual methods including Toasts, Dialogs, and
    Status Bar notifications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了多种方式来通知用户——从非视觉方法，包括声音、灯光和振动，到视觉方法，包括Toast、对话框和状态栏通知。
- en: Keep in mind, notifications distract your user, so it's a good idea to be very
    judicious when using any notification. Users like to be in control of their device
    (it is theirs, after all) so give them the option to enable and disable notifications
    as they desire. Otherwise, your user might get annoyed and uninstall your app
    altogether.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，通知会分散用户的注意力，因此在使用任何通知时都应该非常谨慎。用户喜欢控制他们的设备（毕竟这是他们的设备），所以给他们启用和禁用通知的选择。否则，用户可能会感到烦恼，并完全卸载你的应用。
- en: 'We''ll start by reviewing the following non-UI based notification options:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从以下基于非UI的通知选项开始回顾：
- en: Flash LED
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闪烁LED
- en: Vibrate phone
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 振动手机
- en: Play ringtone
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放铃声
- en: 'Then we''ll move on to visual notifications, including:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将继续讨论视觉通知，包括：
- en: Toasts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toasts
- en: '`AlertDialog`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AlertDialog`'
- en: '`ProgressDialog`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProgressDialog`'
- en: Status Bar Notifications
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态栏通知
- en: 'The recipes that follow will show you how to implement these features in your
    own applications. It''s worth reading the following link to understand "best practices"
    when using notifications:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的食谱将向你展示如何在你的应用程序中实现这些功能。阅读以下链接以了解使用通知时的“最佳实践”是非常值得的：
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Refer to **Android Notification Design Guidelines** at [http://developer.android.com/design/patterns/notifications.html](http://developer.android.com/design/patterns/notifications.html)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考**Android通知设计指南**，网址为：[http://developer.android.com/design/patterns/notifications.html](http://developer.android.com/design/patterns/notifications.html)
- en: Lights, Action, and Sound – getting the user's attention!
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灯光、动作和声音——吸引用户的注意！
- en: Most of the recipes in this chapter use the Notification object to alert your
    users, so this recipe will show an alternative approach for when you don't actually
    need a notification.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的大部分食谱使用Notification对象来提醒用户，所以这个食谱将展示当你实际上不需要通知时的替代方法。
- en: 'As the recipe title implies, we''re going to use lights, action, and sound:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如标题所示，我们将使用灯光、动作和声音：
- en: '**Lights**: Normally, you''d use the LED device, but that is only available
    through the Notification object, which we''ll demonstrate later in the chapter.
    Instead we''ll take this opportunity to use `setTorchMode()` (added in API 23—Android
    6.0), to use the camera flash as a flashlight. (Note: as you''ll see in the code,
    this feature will only work on an Android 6.0 device with a camera flash.)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灯光**：通常，你会使用LED设备，但这仅通过Notification对象才可用，我们将在本章后面演示。相反，我们将借此机会使用`setTorchMode()`（在API
    23—Android 6.0中添加），使用相机闪光灯作为手电筒。（注意：正如你在代码中看到的，这个功能只会在带有相机闪光灯的Android 6.0设备上工作。）'
- en: '**Action**: We''ll vibrate the phone.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：我们将使手机振动。'
- en: '**Sound**: We''ll use the `RingtoneManager` to play the default notification
    sound.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声音**：我们将使用`RingtoneManager`播放默认通知声音。'
- en: As you'll see, the code for each of these is quite simple.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这些的代码都非常简单。
- en: 'As demonstrated in the following *Lights, Action, and Sound Redux using Notifications*
    recipe, all three options: LED, vibrate, and sounds, are available through the
    Notification object. The Notification object would certainly be the most appropriate
    method to provide alerts and reminders when the user is not actively engaged in
    your app. But for those times when you want to provide feedback while they are
    using your app, these options are available. The vibrate option is a good example;
    if you want to provide haptic feedback to a button press (common with keyboard
    apps), call the vibrate method directly.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下 *使用通知的 Lights, Action, 和 Sound Redux* 配方所示，LED、振动和声音这三个选项都可以通过 Notification
    对象使用。当用户没有积极使用你的应用时，Notification 对象当然是最合适的方法来提供警报和提醒。但是，当你想在用户使用你的应用时提供反馈时，这些选项是可用的。振动选项就是一个很好的例子；如果你想对按钮按下提供触觉反馈（键盘应用中很常见），可以直接调用振动方法。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `LightsActionSound`. When
    prompted for the API level, we need API 21 or above to compile the project. Select
    **Empty Activity** when prompted for the **Activity Type**.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新项目，命名为 `LightsActionSound`。当提示选择 API 级别时，我们需要 API 21
    或更高版本来编译项目。在选择 **Activity 类型** 时，选择 **Empty Activity**。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll use three buttons to initiate each action, so start by opening `activity_main.xml`
    and follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用三个按钮来启动每个操作，首先打开 `activity_main.xml` 并按照以下步骤操作：
- en: 'Replace the existing `<TextView>` element with the following three buttons:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下三个按钮替换现有的 `<TextView>` 元素：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following permission to the Android Manifest:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 Android Manifest 添加以下权限：
- en: '[PRE1]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `ActivityMain.java` and add the following global variables:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ActivityMain.java` 并添加以下全局变量：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following method to get the Camera ID:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以获取相机 ID：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onCreate()` 方法中添加以下代码：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now add the code to handle each of the button clicks:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加处理每个按钮点击的代码：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You're ready to run the application on a physical device. The code presented
    here will need Android 6.0 (or higher) to use the flashlight option.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在物理设备上运行应用程序了。这里提供的代码需要 Android 6.0（或更高版本）才能使用手电筒选项。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'As you can see from the previous paragraphs, most of the code is related to
    finding and opening the camera to use the flash feature. `setTorchMode()` was
    introduced in API 23, which is why we have the API version check:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文所述，大部分代码都是关于查找并打开摄像头以使用闪光灯功能。`setTorchMode()` 在 API 23 中引入，这就是为什么我们要进行 API
    版本检查：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This app demonstrates using the new `camera2` libraries, which were introduced
    in Lollipop (API 21). The `vibrate` and `ringtone` methods have both been available
    since API 1.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用展示了使用在 Lollipop (API 21) 中引入的新的 `camera2` 库。`vibrate` 和 `ringtone` 方法自 API
    1 以来都已可用。
- en: The `getCameraId()` method is where we check for the camera. We want an outward-facing
    camera with a flash. If one is found, the ID is returned, otherwise it is null.
    If the camera id is null, we disable the button.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCameraId()` 方法是我们检查摄像头的位置。我们想要一个带闪光灯的外向摄像头。如果找到，则返回其 ID，否则为 null。如果摄像头
    ID 为 null，我们将禁用按钮。'
- en: 'For playing the sound, we use the `Ringtone` object from the `RingtoneManager`.
    Besides it being relatively easy to implement, another benefit to this method
    is that we can use the default notification sound, which we get with this code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了播放声音，我们使用来自 `RingtoneManager` 的 `Ringtone` 对象。除了实现相对简单之外，这种方法的好处是我们可以使用默认通知声音，通过以下代码获取：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This way, if the user changes their preferred notification sound, we use it
    automatically.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果用户更改了他们首选的通知声音，我们会自动使用它。
- en: 'Last is the call to vibrate the phone. This was the simplest code to use, but
    it does require permission, which we added to the Manifest:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是调用手机振动的部分。这是最简单的代码使用，但它确实需要权限，我们已经将其添加到 Manifest 中：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In a production-level application, you wouldn't want to simply disable the button
    if you didn't have to. In this case, there are other means to use the camera flash
    as a flashlight. Take a look at the multi-media chapter for additional examples
    on using the camera, where we'll see `getCameraId()` used again.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个生产级别的应用中，如果你不必这样做，你不会想要简单地禁用按钮。在这种情况下，还有其他方法可以使用相机闪光灯作为手电筒。查看多媒体章节，了解更多关于使用摄像头的示例，我们将会再次看到
    `getCameraId()` 的使用。
- en: See also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to the *Lights, Action, and Sound Redux with Notifications* recipe later
    in this chapter to see the equivalent features using the Notification object
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章后面的*用通知的灯光、动作和声音Redux*食谱中，可以看到使用通知对象的等效功能。
- en: Refer to [Chapter 11](ch11.html "Chapter 11. Multimedia"), *Multimedia*, for
    examples using the new camera API and other sound options
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用新相机API和其他声音选项的示例，请参考[第11章](ch11.html "第11章. 多媒体")，*多媒体*。
- en: Creating a Toast using a custom layout
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义布局创建Toast
- en: We've used Toasts quite a bit already in previous chapters as they provide a
    quick and easy way to display information—both for the user and for ourselves
    when debugging.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经大量使用了Toast，因为它们提供了一种快速简便的方式来显示信息——既适用于用户，也适用于我们调试时。
- en: The previous examples have all used the simple one-line syntax, but the Toast
    isn't limited to this. Toasts, like most components in Android, can be customized,
    as we'll demonstrate in this recipe.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子都使用了简单的一行语法，但Toast并不限于此。与Android中的大多数组件一样，Toast也可以自定义，我们将在本节中演示这一点。
- en: 'Android Studio offers a shortcut for making the simple Toast statement. As
    you start to type the Toast command, press *Ctrl* + *Spacebar* and you''ll see
    the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio为制作简单的Toast语句提供了快捷方式。当你开始输入Toast命令时，按下*Ctrl* + *Spacebar*，你会看到以下内容：
- en: '![Creating a Toast using a custom layout](img/B05057_07_01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义布局创建Toast](img/B05057_07_01.jpg)'
- en: 'Press *Enter* to auto-complete. Then, press *Ctrl* + *Spacebar* again and you''ll
    see the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*键以自动完成。然后，再次按下*Ctrl* + *Spacebar*，你会看到以下内容：
- en: '![Creating a Toast using a custom layout](img/B05057_07_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义布局创建Toast](img/B05057_07_02.jpg)'
- en: 'When you press *Enter* again, it will auto-complete with the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次按下*Enter*键时，它会自动完成以下内容：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this recipe, we''ll use the Toast Builder to change the default layout,
    and gravity to create a custom Toast as shown in this screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Toast Builder来更改默认布局和定位，以创建一个自定义的Toast，如以下屏幕截图所示：
- en: '![Creating a Toast using a custom layout](img/B05057_07_03.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义布局创建Toast](img/B05057_07_03.jpg)'
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Create a new project in Android Studio and call it: `CustomToast`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，将其命名为`CustomToast`。使用默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to change the shape of the Toast to a square and create a custom
    layout to display an image and text message. Start by opening `activity_main.xml`
    and follow these steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变Toast的形状为正方形，并创建一个自定义布局来显示图像和文本信息。首先打开`activity_main.xml`并按照以下步骤操作：
- en: 'Replace the existing `<TextView>` element with a `<Button>` as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容替换现有的`<TextView>`元素为`<Button>`：
- en: '[PRE10]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a new resource file in the `res/drawable` folder named: `border_square.xml`
    and type the following code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/drawable`文件夹中创建一个名为`border_square.xml`的新资源文件，并输入以下代码：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a new resource file in the `res/layout` folder named: `toast_custom.xml`
    and type the following code:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/layout`文件夹中创建一个名为`toast_custom.xml`的新资源文件，并输入以下代码：
- en: '[PRE12]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now open `ActivityMain.java` and type the following method:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`ActivityMain.java`并输入以下方法：
- en: '[PRE13]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run the program on a device or emulator.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This custom Toast changes the default gravity, shape, and adds an image just
    to show that "it can be done".
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义的Toast更改了默认的定位、形状，并添加了图像，只是展示“这是可以做到的”。
- en: The first step is to create a new Toast layout, which we do by inflating our
    `custom_toast` layout. Once we have the new layout, we need to get the `TextView`
    so we can set our message, which we do with the standard `setText()` method. With
    this done, we create a Toast object and set the individual properties. We set
    the Toast gravity with the `setGravity()` method. The gravity determines where
    on the screen our Toast will display. We specify our custom layout with the `setView()`
    method call. And just like in the single line variation, we display the Toast
    with the `show()` method.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个新的Toast布局，我们通过膨胀我们的`custom_toast`布局来实现。一旦我们有了新的布局，我们需要获取`TextView`，这样我们就可以设置我们的信息，我们使用标准的`setText()`方法来完成这个操作。完成这些后，我们创建一个Toast对象并设置各个属性。我们使用`setGravity()`方法设置Toast的定位。定位决定了我们的Toast在屏幕上的显示位置。我们通过`setView()`方法调用指定我们的自定义布局。与单行版本一样，我们使用`show()`方法显示Toast。
- en: Displaying a message box with AlertDialog
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AlertDialog显示消息框
- en: 'In [Chapter 4](ch04.html "Chapter 4. Menus"), *Menus*, we created a theme to
    make an Activity look like a dialog. In this recipe, we''ll demonstrate how to
    create a dialog using the `AlertDialog` class. The `AlertDialog` offers a Title,
    up to three buttons, and a list or custom layout area, as shown in this example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](ch04.html "第 4 章. 菜单")，*菜单*中，我们创建了一个主题，使活动看起来像一个对话框。在这个菜谱中，我们将演示如何使用`AlertDialog`类创建对话框。`AlertDialog`提供了标题，最多三个按钮，以及一个列表或自定义布局区域，如下例所示：
- en: '![Displaying a message box with AlertDialog](img/B05057_07_04.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![使用 AlertDialog 显示消息框](img/B05057_07_04.jpg)'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The button placement can vary depending on the OS version.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的位置可能会根据操作系统版本而有所不同。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Create a new project in Android Studio and call it: `AlertDialog`. Use the
    default **Phone & Tablet** options and select the **Empty Activity** option when
    prompted for the **Activity Type**.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新项目，将其命名为：`AlertDialog`。使用默认的**手机 & 平板**选项，在选择**活动类型**时选择**空活动**选项。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To demonstrate, we''ll create a **Confirm Delete** dialog to prompt the user
    for confirmation after pressing the *Delete* button. Start by opening the `main_activity.xml`
    layout file and follow these steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将创建一个**确认删除**对话框，在用户按下*删除*按钮后提示用户确认。首先打开`main_activity.xml`布局文件，并按照以下步骤操作：
- en: 'Add the following `<Button>`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`<Button>`：
- en: '[PRE14]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the `confirmDelete()` method called by the button:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加由按钮调用的`confirmDelete()`方法：
- en: '[PRE15]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the application on a device or emulator.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用机理...
- en: This dialog is meant to serve as a simple confirmation dialog—such as confirming
    a delete action. Basically, just create an `AlertDialog.Builder` object and set
    the properties as needed. We use a Toast message to indicate the user selection
    and we don't even have to close the dialog; it's taken care of by the base class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对话框旨在作为一个简单的确认对话框——例如确认删除操作。基本上，只需创建一个`AlertDialog.Builder`对象并根据需要设置属性。我们使用一个
    Toast 消息来指示用户的选择，甚至不需要关闭对话框；它由基类处理。
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As shown in the recipe introduction screenshot, the `AlertDialog` also has
    a third button, called the Neutral button, and can be set using the following
    method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如菜谱介绍截图所示，`AlertDialog`还有一个第三按钮，称为中性按钮，可以通过以下方法设置：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add an icon
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个图标
- en: 'To add an icon to the dialog, use the `setIcon()` method. Here is an example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在对话框中添加图标，请使用`setIcon()`方法。以下是一个示例：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using a list
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用列表
- en: 'We can also create a list of items to select with various list-setting methods,
    including:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建一个项目列表供选择，包括各种列表设置方法：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, there are also methods for single-choice (using a radio button)
    and multi-choice lists (using a checkbox).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，也有用于单选（使用单选按钮）和多选列表（使用复选框）的方法。
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can't use both the Message and the Lists, as `setMessage()` will take priority.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能同时使用消息和列表，因为`setMessage()`将优先处理。
- en: Custom Layout
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义布局
- en: 'Finally, we can also create a custom layout, and set it using:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以创建一个自定义布局，并通过以下方式设置：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you use a custom layout and replace the standard buttons, you are also responsible
    for closing the dialog. Use `hide()` if you plan to reuse the dialog and `dismiss()`
    when finished to release the resources.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用自定义布局并替换标准按钮，你还需要负责关闭对话框。如果你打算重用对话框，请使用`hide()`，完成后使用`dismiss()`释放资源。
- en: Displaying a progress dialog
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示进度对话框
- en: 'The `ProgressDialog` has been available since API 1, and is widely used. As
    we''ll demonstrate in this recipe, it''s simple to use, but keep this statement
    in mind (from the Android Dialog Guidelines site):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProgressDialog`从 API 1 开始可用，并被广泛使用。正如我们在这个食谱中展示的，它使用起来很简单，但请记住（来自 Android
    对话框指南网站）的这句话：'
- en: Avoid ProgressDialog
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 避免使用 ProgressDialog
- en: ''
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Android includes another dialog class called ProgressDialog that shows a dialog
    with a progress bar. However, if you need to indicate loading or indeterminate
    progress, you should instead follow the design guidelines for Progress & Activity
    and use a ProgressBar in your layout.
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Android 另外提供了一个名为 ProgressDialog 的对话框类，它显示带有进度条的对话框。然而，如果你需要指示加载或不确定的进度，你应该遵循进度与活动的设计指南，并在你的布局中使用
    ProgressBar。
- en: '[http://developer.android.com/guide/topics/ui/dialogs.html](http://developer.android.com/guide/topics/ui/dialogs.html)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/guide/topics/ui/dialogs.html](http://developer.android.com/guide/topics/ui/dialogs.html)'
- en: This message doesn't mean the `ProgressDialog` is deprecated or is bad code.
    It's suggesting that the use of the `ProgressDialog` should be avoided, since
    the user cannot interact with your app while the dialog is displayed. If possible,
    use a layout that includes a progress bar, instead of using a `ProgressDialog`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息并不意味着`ProgressDialog`已经废弃或者代码不好。它建议应避免使用`ProgressDialog`，因为当对话框显示时，用户无法与你的应用互动。如果可能，使用包含进度条的布局，而不是使用`ProgressDialog`。
- en: The Google Play app provides a good example. When adding items to download,
    Google Play shows a progress bar, but it's not a dialog, so the user can continue
    interacting with the app, even adding more items to download. If possible, use
    that approach instead.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play应用提供了一个很好的例子。当添加下载项时，Google Play显示一个进度条，但它不是一个对话框，所以用户可以继续与应用互动，甚至可以添加更多下载项。如果可能，请使用这种方法。
- en: 'There are times when you may not have that luxury, such as after placing an
    order, the user is going to expect an order confirmation. (Even with Google Play,
    you still see a confirmation dialog when actually purchasing apps.) So, remember,
    avoid the progress dialog if possible. But, for those times when something must
    complete before continuing, this recipe provides an example of how to use the
    `ProgressDialog`. The following screenshot shows the `ProgressDialog` from the
    recipe:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能没有这种奢侈，比如在下了订单之后，用户会期待一个订单确认。（即使是使用Google Play，在实际购买应用时你仍然会看到一个确认对话框。）所以，请记住，如果可能的话，避免使用进度对话框。但是，对于那些必须在继续之前完成的事情，这个示例提供了一个如何使用`ProgressDialog`的例子。以下截图展示了示例中的`ProgressDialog`：
- en: '![Displaying a progress dialog](img/B05057_07_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![显示进度对话框](img/B05057_07_05.jpg)'
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `ProgressDialog`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，并将其命名为：`ProgressDialog`。使用默认的**手机和平板电脑**选项，并在提示**活动类型**时选择**空活动**。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Since this is just a demonstration on using the ProgressDialog, we will create
    a button to show the dialog. To simulate waiting for a server response, we will
    use a delayed message to dismiss the dialog. To start, open `activity_main.xml`
    and follow these steps:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这只是一个使用`ProgressDialog`的演示，我们将创建一个按钮来显示对话框。为了模拟等待服务器响应，我们将使用一个延迟消息来关闭对话框。首先，打开`activity_main.xml`并按照以下步骤操作：
- en: 'Replace the `<TextView>` with the following `<Button>`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<TextView>`替换为以下`<Button>`：
- en: '[PRE20]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open `MainActivity.java` and add the following two global variables:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并添加以下两个全局变量：
- en: '[PRE21]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the `showDialog()` method referenced by the button click:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加由按钮点击引用的`showDialog()`方法：
- en: '[PRE22]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run the program on a device or emulator. When you press the **Show Dialog**
    button, you'll see the dialog as shown in the screen from the Intro.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。当你按下**显示对话框**按钮时，你会看到与简介中屏幕显示的对话框一样的内容。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We use the `ProgressDialog` class to display our dialog. The options should
    be self-explanatory, but this setting is worth noting:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ProgressDialog`类来显示我们的对话框。这些选项应该是自解释的，但这个设置值得注意：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Normally, a dialog can be cancelled using the *back* key, but when this is set
    to false, the user is stuck on the dialog until it is hidden/dismissed from the
    code. To simulate a delayed response from a server, we use a `Handler` and the
    `postDelayed()` method. After the specified milliseconds (30,000 in this case,
    to represent 30 seconds), the `run()` method will be called, which dismisses our
    dialog.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，可以通过按下*返回*键来取消对话框，但当这被设置为false时，用户将停留在对话框上，直到从代码中隐藏/关闭它。为了模拟服务器的延迟响应，我们使用了一个`Handler`和`postDelayed()`方法。在指定的毫秒数（在本例中是30,000，代表30秒）之后，将调用`run()`方法，该方法将关闭我们的对话框。
- en: There's more...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We used the default `ProgressDialog` settings for this recipe, which creates
    an indeterminate dialog indicator, for example, the continuously spinning circle.
    If you can measure the task at hand, such as loading files, you can use a determinate
    style instead. Add and run this line of code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了默认的`ProgressDialog`设置，创建了一个不确定的对话框指示器，例如，连续旋转的圆圈。如果你可以衡量当前的任务，比如加载文件，你可以使用确定样式代替。添加并运行这行代码：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will get the following dialog style as an output to the preceding line
    of code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下对话框样式作为前一行代码的输出：
- en: '![There''s more...](img/B05057_07_06.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/B05057_07_06.jpg)'
- en: Lights, Action, and Sound Redux using Notifications
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用通知重新实现灯光、动作和声音
- en: You're probably already familiar with Notifications as they've become a prominent
    feature (even making their way to the desktop environment) and for good reason.
    They provide an excellent means to send information to your user. They provide
    the least intrusive option of all the alerts and notification options available.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经对通知（Notifications）很熟悉了，因为它们已经成为一个突出的功能（甚至已经应用到桌面环境中），而且有充分的理由。它们为向用户发送信息提供了极好的方式。与其他可用的警告和通知选项相比，它们提供了最小侵扰性的选择。
- en: As we saw in the first recipe, *Lights, Action, and Sound – getting the user's
    attention!*, lights, vibration, and sound are all very useful for getting the
    user's attention. That's why the Notification object includes support for all
    three methods, as we'll demonstrate in this recipe. Given this ability to get
    your user's attention, care should still be taken not to abuse your user. Otherwise,
    they'll likely uninstall your app. It's generally a good idea to give your users
    the option to enable/disable notifications and even how to present the notification—with
    sound or without, and so on.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第一个食谱“*灯光、动作和声音——吸引用户的注意！*”中所看到的，灯光、振动和声音都是吸引用户注意力的非常有用的方法。这就是为什么通知对象包括支持这三种方式的原因，我们将在本食谱中展示这一点。鉴于这种吸引用户注意力的能力，仍然应该注意不要滥用用户。否则，他们很可能会卸载你的应用。通常来说，给用户选择启用/禁用通知甚至如何显示通知是一个好主意——带声音或不带声音等。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Create a new project in Android Studio and call it: `LightsActionSoundRedux`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for the **Activity Type**.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为：`LightsActionSoundRedux`。使用默认的**手机 & 平板**选项，并在提示选择**活动类型**时选择**空活动**。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll need permission to use the vibrate option, so start by opening the Android
    Manifest file, and follow these steps:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要获得使用振动功能的权限，因此首先打开Android Manifest文件，并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE25]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open `activity_main.xml` and replace the existing `<TextView>` with the following
    buttons:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，用以下按钮替换现有的`<TextView>`：
- en: '[PRE26]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now open `MainActivity.java` and add the following methods to handle the button
    click:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`MainActivity.java`，并添加以下方法来处理按钮点击：
- en: '[PRE27]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run the program on a device or emulator.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'First, we combined all three actions into a single notification, simply because
    we could. You don''t have to use all three extra notification options, or even
    any. Only the following are required:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将三个动作合并为一个通知，仅仅是因为我们可以这样做。你不必使用所有三个额外的通知选项，甚至一个也不用。以下内容是必需的：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you don't set both the icon and text, the notification will not show.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不设置图标和文本，通知将不会显示。
- en: Second, we used the `NotificationCompat` to build our notification. This comes
    from the support library and makes it easier to be backward compatible with older
    OS versions. If we request a notification feature that is not available on the
    user's version of OS, it will simply be ignored.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们使用了`NotificationCompat`来构建我们的通知。这是来自支持库的，使得更容易与旧操作系统版本向后兼容。如果我们请求的通知功能在用户的操作系统版本上不可用，它将被简单地忽略。
- en: 'The three lines of code that produce our extra notification options include
    the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 产生我们额外通知选项的三行代码包括以下内容：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It's worth noting that we use the same sound URI with the notification as we
    did with the `RingtoneManager` from the earlier *Lights, Action, and Sound* recipe.
    The vibrate feature also required the same vibrate permission as the previous
    recipe, but notice the value we send is different. Instead of sending just a duration
    for the vibration, we are sending a vibrate pattern. The first value represents
    the `off` duration (in milliseconds), the next value represents the vibration
    `on` duration, and repeats.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们在此通知中使用与之前的“*灯光、动作和声音*”食谱中的`RingtoneManager`相同的铃声URI。振动功能也要求与之前的食谱相同的振动权限，但请注意我们发送的值是不同的。我们不是只发送振动的持续时间，而是发送一个振动模式。第一个值表示`关闭`的持续时间（以毫秒为单位），下一个值表示振动的`开启`持续时间，并重复。
- en: Tip
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: On devices with LED notification, you won't see the LED notification while the
    screen is active.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有LED通知功能的设备上，当屏幕处于激活状态时，你不会看到LED通知。
- en: There's more...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe shows the basics of a notification, but like many features on Android,
    options have expanded with later OS releases.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南展示了通知的基础知识，但与Android上的许多功能一样，随着后来操作系统版本的更新，选项也扩展了。
- en: Adding a button to the notification using addAction()
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用addAction()向通知中添加按钮
- en: 'There are several design considerations you should keep in mind when adding
    action buttons, as listed in the Notification Guidelines linked in the chapter
    introduction. You can add a button (up to three) using the `addAction()` method
    on the notification builder. Here''s an example of a notification with one action
    button:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加操作按钮时，你应该考虑到一些设计上的注意事项，如本章引言中链接的通知指南所述。你可以使用通知构建器上的`addAction()`方法添加一个按钮（最多三个）。下面是一个带有一个操作按钮的通知的示例：
- en: '![Adding a button to the notification using addAction()](img/B05057_07_07.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![使用addAction()向通知中添加按钮](img/B05057_07_07.jpg)'
- en: 'Here''s the code to create this notification:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建此通知的代码：
- en: '[PRE30]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: An `Action` requires three parameters—the image, the text, and a `PendingIntent`.
    The first two items are for the visual display, while the third item, the `PendingIntent`,
    is called when the user presses the button.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`Action`需要三个参数——图像、文本和一个`PendingIntent`。前两项用于视觉显示，而第三项，即`PendingIntent`，在用户按下按钮时调用。'
- en: 'The previous code creates a very simple `PendingIntent;` it just launches the
    app. This is probably the most common intent for notifications, and is often used
    for when the user presses the notification. To set the notification intent, use
    the following code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码创建了一个非常简单的`PendingIntent`；它只是启动了应用。这可能是通知中最常见的意图，通常用于用户点击通知时。要设置通知意图，请使用以下代码：
- en: '[PRE31]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'A button action would probably require more information as it should take the
    user to the specific item in your app. You should also create an application back-stack
    for the best user experience. Take a look at the topic "**Preserving Navigation
    when Starting an Activity**" at the following link:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮操作可能需要更多信息，因为它应该引导用户到应用中的特定项目。你也应该创建一个应用的后退栈以获得最佳用户体验。查看以下链接中的话题"**启动活动时保持导航**"：
- en: '[http://developer.android.com/guide/topics/ui/notifiers/notifications.html#NotificationResponse](http://developer.android.com/guide/topics/ui/notifiers/notifications.html#NotificationResponse)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/guide/topics/ui/notifiers/notifications.html#NotificationResponse](http://developer.android.com/guide/topics/ui/notifiers/notifications.html#NotificationResponse)'
- en: Expanded notifications
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 展开式通知
- en: Expanded notifications were introduced in Android 4.1 (API 16) and are available
    by using the `setStyle()` method on the Notification Builder. If the user's OS
    does not support expanded notifications, the notification will appear as a normal
    notification.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 展开式通知在Android 4.1（API 16）中引入，可以通过在通知构建器上使用`setStyle()`方法来使用。如果用户的操作系统不支持展开式通知，通知将显示为普通通知。
- en: 'The three expanded styles currently available in the `NotificationCompat` library
    include:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`NotificationCompat`库中当前可用的三种展开式样式包括：'
- en: '`InboxStyle`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InboxStyle`'
- en: '`BigPictureStyle`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigPictureStyle`'
- en: '`BigTextStyle`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigTextStyle`'
- en: 'Here''s an example of each notification style, and the code used to create
    the example:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是每种通知样式的示例，以及创建示例的代码：
- en: '![Expanded notifications](img/B05057_07_08.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![展开式通知](img/B05057_07_08.jpg)'
- en: '`InboxStyle`:'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InboxStyle`：'
- en: '[PRE32]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![Expanded notifications](img/B05057_07_09.jpg)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![展开式通知](img/B05057_07_09.jpg)'
- en: '`BigPictureStyle`:'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigPictureStyle`：'
- en: '[PRE33]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Expanded notifications](img/B05057_07_10.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![展开式通知](img/B05057_07_10.jpg)'
- en: '`BigTextStyle`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigTextStyle`'
- en: '[PRE34]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Lock screen notifications
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 锁屏通知
- en: 'Android 5.0 (API 21) and above can show notifications on the lock screen, based
    on the user''s lock screen visibility. Use `setVisibility()` to specify the notification
    visibility using the following values:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Android 5.0（API 21）及以上版本可以根据用户的锁屏可见性在锁屏上显示通知。使用`setVisibility()`指定通知可见性，使用以下值：
- en: '`VISIBILITY_PUBLIC`: All content can be displayed'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VISIBILITY_PUBLIC`：所有内容都可以显示'
- en: '`VISIBILITY_SECRET`: No content should be displayed'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VISIBILITY_SECRET`：不显示任何内容'
- en: '`VISIBILITY_PRIVATE`: Display the basic content (title and icon) but the rest
    is hidden'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VISIBILITY_PRIVATE`：显示基本内容（标题和图标），其余内容隐藏'
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: See the *Creating a Media Player Notification* and *Making a Flashlight with
    a Heads-Up Notification* recipes for additional notification options with Android
    5.0 (API 21) and greater
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看关于Android 5.0（API 21）及更高版本的通知选项的*创建媒体播放器通知*和*使用抬头通知制作手电筒*的食谱。
- en: Creating a Media Player Notification
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建媒体播放器通知
- en: This recipe is going to take a look at the new Media Player style introduced
    in Android 5.0 (API 21). Unlike the previous recipe, *Lights, Action, and Sound
    Redux using Notifications,* which used `NotificationCompat`, this recipe does
    not, as this style is not available in the support library.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将查看在Android 5.0（API 21）中引入的新媒体播放器样式。与之前使用`NotificationCompat`的示例*使用通知的灯光、动作和声音重做*不同，这个示例没有使用，因为这种样式在支持库中不可用。
- en: 'Here''s a screenshot showing how the notification will appear:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是通知显示方式的截图：
- en: '![Creating a Media Player Notification](img/B05057_07_11.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![创建媒体播放器通知](img/B05057_07_11.jpg)'
- en: 'This screenshot shows an example of the Media Player Notification on a lock
    screen:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这张截图展示了锁定屏幕上媒体播放器通知的一个示例：
- en: '![Creating a Media Player Notification](img/B05057_07_12.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![创建媒体播放器通知](img/B05057_07_12.jpg)'
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Create a new project in Android Studio and call it: `MediaPlayerNotification`.
    When prompted for the API level, we need API 21 (or higher) for this project.
    Select **Empty Activity** when prompted for the **Activity Type**.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，并将其命名为：`MediaPlayerNotification`。当提示选择API级别时，我们需要为这个项目选择API
    21（或更高）。在选择**活动类型**时，选择**空活动**。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We just need a single button to call our code to send the notification. Open
    `activity_main.xml` and follow these steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一个按钮来调用我们的代码发送通知。打开`activity_main.xml`并按照以下步骤操作：
- en: 'Replace the existing `<TextView>` with the following button code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下按钮代码替换现有的`<TextView>`：
- en: '[PRE35]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open `MainActivity.java` and add the `showNotification()` method:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并添加`showNotification()`方法：
- en: '[PRE36]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Run the program on a device or emulator.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。
- en: How it works...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The first detail to note is that we decorate our `showNotification()` method
    with:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的细节是，我们对`showNotification()`方法进行了以下装饰：
- en: '[PRE37]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This tells the compiler we know we are using deprecated calls. (Without this,
    the compiler will flag the code.) We follow this with an API check, using this
    call:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉编译器我们知道我们正在使用弃用的调用。（如果没有这个，编译器会标记代码。）我们接着使用API检查，通过以下调用：
- en: '[PRE38]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The icon resource was changed in API 23, but we want this application to run
    on API 21 (Android 5.0) and later, so we still need to call the old methods when
    running on API 21 and API 22.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图标资源在API 23中进行了更改，但我们希望这个应用程序能在API 21（Android 5.0）及更高版本上运行，所以在API 21和API 22上仍然需要调用旧的方法。
- en: If the user is running on Android 6.0 (or higher), we use the new `Icon` class
    to create our icons, otherwise we use the old constructor. (You'll notice the
    IDE will show the deprecated calls with a strikethrough.) Checking the current
    OS version during runtime is a common strategy for remaining backward compatible.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户运行在Android 6.0（或更高版本）上，我们使用新的`Icon`类来创建我们的图标，否则我们使用旧的构造函数。（你会注意到IDE会用删除线显示弃用的调用。）在运行时检查当前的操作系统版本是一种保持向后兼容的常见策略。
- en: We create three actions using `addAction()` to handle the media player functionality.
    Since we don't really have a media player going, we use the same intent for all
    the actions, but you'll want to create separate intents in your application.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`addAction()`创建了三个动作来处理媒体播放器的功能。由于我们实际上并没有一个正在运行的媒体播放器，所以所有动作我们都使用了相同的意图，但在你的应用程序中，你应创建独立的意图。
- en: 'To make the notification visible on the lock screen, we need to set the visibility
    level to `VISIBILITY_PUBLIC`, which we do with the following call:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让通知在锁定屏幕上可见，我们需要将可见性级别设置为`VISIBILITY_PUBLIC`，我们通过以下调用实现：
- en: '[PRE39]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This call is worth noting:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用值得注意：
- en: '[PRE40]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Just as the method name implies, this sets the actions to show when the notification
    is shown with a reduced layout. (See the lock screen image in the recipe introduction.)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 正如方法名称所暗示的，这设置了在通知以简化布局显示时展示的动作。（请参阅菜谱介绍中的锁定屏幕图片。）
- en: There's more...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We only created the visual notification in this recipe. If we were creating
    an actual media player, we could instantiate a `MediaSession` class and pass in
    the session token with this call:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只创建了视觉通知。如果我们正在创建一个实际的媒体播放器，我们可以实例化一个`MediaSession`类，并通过以下调用传递会话令牌：
- en: '[PRE41]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This will allow the system to recognize the media content and react accordingly,
    such as updating the lock screen with the current album artwork.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许系统识别媒体内容并做出相应的反应，例如在锁定屏幕上用当前专辑封面进行更新。
- en: See also
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to **Developer doc – MediaSession** at [https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)的**开发者文档——媒体会话**
- en: The *Lock Screen Visibility* section in the *Lights, Action, and Sound Redux
    using Notifications* recipe discusses the visibility options.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在“使用通知的灯光、动作和声音Redux”食谱中的“锁屏可见性”部分讨论了可见性选项。*'
- en: Making a Flashlight with a Heads-Up Notification
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用抬头通知制作手电筒
- en: Android 5.0—Lollipop (API 21) introduced a new type of notification called the
    Heads-Up Notification. Many people do not care for this new notification as it
    can be extremely intrusive, as it forces its way on top of other apps. (See the
    following screenshot.) Keep this in mind when using this type of notification.
    We're going to demonstrate the Heads-Up Notification with a Flashlight as this
    demonstrates a good use-case scenario.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓5.0—棒棒糖（API 21）引入了一种新的通知类型，称为抬头通知。很多人不喜欢这种新通知，因为它可能会非常侵入式，强制出现在其他应用之上。（请看以下截图。）在使用这种类型的通知时要记住这一点。我们将通过一个手电筒来演示抬头通知，因为这展示了一个好的使用场景。
- en: 'Here''s a screenshot showing the Heads-Up Notification we''ll create further
    on:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一张稍后我们将要创建的抬头通知的截图：
- en: '![Making a Flashlight with a Heads-Up Notification](img/B05057_07_13.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![使用抬头通知制作手电筒](img/B05057_07_13.jpg)'
- en: If you have a device running Android 6.0, you may have noticed the new Flashlight
    settings option. As a demonstration, we're going to create something similar in
    this recipe.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个运行安卓6.0的设备，你可能已经注意到了新的手电筒设置选项。作为演示，我们将在本食谱中创建类似的东西。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Create a new project in Android Studio and call it: `FlashlightWithHeadsUp`.
    When prompted for the API level, we need API 23 (or higher) for this project.
    Select **Empty Activity** when prompted for the **Activity Type**.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，并将其命名为`FlashlightWithHeadsUp`。当被提示选择API级别时，我们需要为这个项目选择API
    23（或更高）。在选择**活动类型**时，选择**空活动**。
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Our activity layout will consist of just a `ToggleButton` to control the flashlight
    mode. We''ll be using the same `setTorchMode()` code as the *Lights, Action, and
    Sound – getting the user''s attention!* recipe presented earlier, and add a Heads-Up
    Notification. We''ll need permission to use the vibrate option, so start by opening
    the Android Manifest and following these steps:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的活动布局将仅包含一个`ToggleButton`来控制手电筒模式。我们将使用与之前提供的*灯光、动作和声音——吸引用户的注意！*食谱相同的`setTorchMode()`代码，并添加一个抬头通知。我们需要使用振动选项的权限，因此首先打开Android清单，并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE42]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Specify that we only want a single instance of `MainActivity` by adding `android:launchMode="singleInstance"`
    to the `<MainActivity>` element. It will look as follows:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向`<MainActivity>`元素添加`android:launchMode="singleInstance"`来指定我们只希望有一个`MainActivity`的实例。它将如下所示：
- en: '[PRE43]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'With the changes to `AndroidManifest` done, open the `activity_main.xml` layout
    and replace the existing `<TextView>` element with this `<ToggleButton>` code:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`AndroidManifest`的更改完成后，打开`activity_main.xml`布局，并将现有的`<TextView>`元素替换为此`<ToggleButton>`代码：
- en: '[PRE44]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now open `ActivityMain.java` and add the following global variables:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`ActivityMain.java`并添加以下全局变量：
- en: '[PRE45]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the following code to the `onCreate()` to set up the camera:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate()`中添加以下代码来设置相机：
- en: '[PRE46]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add the following method to handle the response when the user presses the notification:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来处理用户按下通知时的响应：
- en: '[PRE47]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the method to get the camera id:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加获取相机id的方法：
- en: '[PRE48]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add these two methods to handle the flashlight mode:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加这两个方法来处理手电筒模式：
- en: '[PRE49]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, add this method to create the notification:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加这个方法来创建通知：
- en: '[PRE50]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You're ready to run the application on a physical device. As noted previously,
    you'll need an Android 6.0 (or higher) device, with an outward-facing camera flash.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在物理设备上运行应用程序了。如前所述，你需要一个运行安卓6.0（或更高版本）且具有外向摄像头闪光灯的设备。
- en: How it works...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Since this recipe uses the same flashlight code as *Lights, Action, and Sound
    – getting the user''s attention!*, we''ll jump to the `showNotification()` method.
    Most of the notification builder calls are the same as previous examples, but
    there are two significant differences:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个食谱使用了与*灯光、动作和声音——吸引用户的注意！*相同的闪光灯代码，我们将跳到`showNotification()`方法。大部分通知构建器的调用与之前的示例相同，但有两个重要的区别：
- en: '[PRE51]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Tip
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Notifications will not be escalated to Heads-Up Notifications unless the priority
    is set to `HIGH` (or above) and uses either vibrate or sound.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 除非将优先级设置为 `HIGH`（或更高）并使用振动或声音，否则通知不会被升级为浮动通知。
- en: 'Note this from the Developer documentation given at: [http://developer.android.com/reference/android/app/Notification.html#headsUpContentView](http://developer.android.com/reference/android/app/Notification.html#headsUpContentView):'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意来自开发者文档的以下内容，文档地址为：[http://developer.android.com/reference/android/app/Notification.html#headsUpContentView](http://developer.android.com/reference/android/app/Notification.html#headsUpContentView)：
- en: '"At its discretion, the system UI may choose to show this as a heads-up notification."'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '"系统界面可以自行决定是否将此作为浮动通知显示。"'
- en: 'We create a `PendingIntent` as we''ve done previously, but here we set the
    action with:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像之前一样创建了一个 `PendingIntent`，但在这里我们通过以下方式设置动作：
- en: '[PRE52]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We set the app to only allow a single instance in the `AndroidManifest` file,
    as we don't want to start a new instance of the app when the user presses the
    notification. The `PendingIntent` we created sets the action, which we check in
    the `onNewIntent()` callback. If the user opens the app without pressing the notification,
    they can still disable the flashlight with the `ToggleButton`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `AndroidManifest` 文件中将应用设置为只允许单个实例，因为当用户点击通知时，我们不希望启动应用的新实例。我们创建的 `PendingIntent`
    设定了动作，我们在 `onNewIntent()` 回调中检查这个动作。如果用户在没有点击通知的情况下打开应用，他们仍然可以使用 `ToggleButton`
    关闭闪光灯。
- en: There's more...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Just like in the *Creating a Toast using a custom layout* recipe earlier, we
    can use a custom layout with notifications. Use the following method on the builder
    to specify the layout:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前在*使用自定义布局创建 Toast* 的方法中一样，我们也可以在通知中使用自定义布局。在构建器上使用以下方法来指定布局：
- en: '[PRE53]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: See also
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to the *Lights, Action, and Sou**nd – getting the user's attention!* recipe
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 *灯光、动作和声音 —— 获取用户的注意!* 的方法
