- en: Chapter 7. Alerts and Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Lights, Action, and Sound – getting the user's attention!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Toast using a custom layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a message box with AlertDialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a progress dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lights, Action, and Sound Redux using Notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Media Player Notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a Flashlight with a Heads-Up Notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android provides many ways to notify your user—from non-visual methods, including
    sounds, lights, and vibration, to visual methods including Toasts, Dialogs, and
    Status Bar notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind, notifications distract your user, so it's a good idea to be very
    judicious when using any notification. Users like to be in control of their device
    (it is theirs, after all) so give them the option to enable and disable notifications
    as they desire. Otherwise, your user might get annoyed and uninstall your app
    altogether.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by reviewing the following non-UI based notification options:'
  prefs: []
  type: TYPE_NORMAL
- en: Flash LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vibrate phone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play ringtone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we''ll move on to visual notifications, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Toasts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AlertDialog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProgressDialog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status Bar Notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The recipes that follow will show you how to implement these features in your
    own applications. It''s worth reading the following link to understand "best practices"
    when using notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to **Android Notification Design Guidelines** at [http://developer.android.com/design/patterns/notifications.html](http://developer.android.com/design/patterns/notifications.html)
  prefs: []
  type: TYPE_NORMAL
- en: Lights, Action, and Sound – getting the user's attention!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the recipes in this chapter use the Notification object to alert your
    users, so this recipe will show an alternative approach for when you don't actually
    need a notification.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the recipe title implies, we''re going to use lights, action, and sound:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lights**: Normally, you''d use the LED device, but that is only available
    through the Notification object, which we''ll demonstrate later in the chapter.
    Instead we''ll take this opportunity to use `setTorchMode()` (added in API 23—Android
    6.0), to use the camera flash as a flashlight. (Note: as you''ll see in the code,
    this feature will only work on an Android 6.0 device with a camera flash.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action**: We''ll vibrate the phone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sound**: We''ll use the `RingtoneManager` to play the default notification
    sound.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you'll see, the code for each of these is quite simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'As demonstrated in the following *Lights, Action, and Sound Redux using Notifications*
    recipe, all three options: LED, vibrate, and sounds, are available through the
    Notification object. The Notification object would certainly be the most appropriate
    method to provide alerts and reminders when the user is not actively engaged in
    your app. But for those times when you want to provide feedback while they are
    using your app, these options are available. The vibrate option is a good example;
    if you want to provide haptic feedback to a button press (common with keyboard
    apps), call the vibrate method directly.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `LightsActionSound`. When
    prompted for the API level, we need API 21 or above to compile the project. Select
    **Empty Activity** when prompted for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll use three buttons to initiate each action, so start by opening `activity_main.xml`
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing `<TextView>` element with the following three buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following permission to the Android Manifest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `ActivityMain.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to get the Camera ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the code to handle each of the button clicks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a physical device. The code presented
    here will need Android 6.0 (or higher) to use the flashlight option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see from the previous paragraphs, most of the code is related to
    finding and opening the camera to use the flash feature. `setTorchMode()` was
    introduced in API 23, which is why we have the API version check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This app demonstrates using the new `camera2` libraries, which were introduced
    in Lollipop (API 21). The `vibrate` and `ringtone` methods have both been available
    since API 1.
  prefs: []
  type: TYPE_NORMAL
- en: The `getCameraId()` method is where we check for the camera. We want an outward-facing
    camera with a flash. If one is found, the ID is returned, otherwise it is null.
    If the camera id is null, we disable the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'For playing the sound, we use the `Ringtone` object from the `RingtoneManager`.
    Besides it being relatively easy to implement, another benefit to this method
    is that we can use the default notification sound, which we get with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This way, if the user changes their preferred notification sound, we use it
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last is the call to vibrate the phone. This was the simplest code to use, but
    it does require permission, which we added to the Manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a production-level application, you wouldn't want to simply disable the button
    if you didn't have to. In this case, there are other means to use the camera flash
    as a flashlight. Take a look at the multi-media chapter for additional examples
    on using the camera, where we'll see `getCameraId()` used again.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Lights, Action, and Sound Redux with Notifications* recipe later
    in this chapter to see the equivalent features using the Notification object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [Chapter 11](ch11.html "Chapter 11. Multimedia"), *Multimedia*, for
    examples using the new camera API and other sound options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Toast using a custom layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've used Toasts quite a bit already in previous chapters as they provide a
    quick and easy way to display information—both for the user and for ourselves
    when debugging.
  prefs: []
  type: TYPE_NORMAL
- en: The previous examples have all used the simple one-line syntax, but the Toast
    isn't limited to this. Toasts, like most components in Android, can be customized,
    as we'll demonstrate in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio offers a shortcut for making the simple Toast statement. As
    you start to type the Toast command, press *Ctrl* + *Spacebar* and you''ll see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Toast using a custom layout](img/B05057_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Press *Enter* to auto-complete. Then, press *Ctrl* + *Spacebar* again and you''ll
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Toast using a custom layout](img/B05057_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you press *Enter* again, it will auto-complete with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this recipe, we''ll use the Toast Builder to change the default layout,
    and gravity to create a custom Toast as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Toast using a custom layout](img/B05057_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `CustomToast`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to change the shape of the Toast to a square and create a custom
    layout to display an image and text message. Start by opening `activity_main.xml`
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing `<TextView>` element with a `<Button>` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new resource file in the `res/drawable` folder named: `border_square.xml`
    and type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new resource file in the `res/layout` folder named: `toast_custom.xml`
    and type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `ActivityMain.java` and type the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the program on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This custom Toast changes the default gravity, shape, and adds an image just
    to show that "it can be done".
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create a new Toast layout, which we do by inflating our
    `custom_toast` layout. Once we have the new layout, we need to get the `TextView`
    so we can set our message, which we do with the standard `setText()` method. With
    this done, we create a Toast object and set the individual properties. We set
    the Toast gravity with the `setGravity()` method. The gravity determines where
    on the screen our Toast will display. We specify our custom layout with the `setView()`
    method call. And just like in the single line variation, we display the Toast
    with the `show()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a message box with AlertDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 4](ch04.html "Chapter 4. Menus"), *Menus*, we created a theme to
    make an Activity look like a dialog. In this recipe, we''ll demonstrate how to
    create a dialog using the `AlertDialog` class. The `AlertDialog` offers a Title,
    up to three buttons, and a list or custom layout area, as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a message box with AlertDialog](img/B05057_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The button placement can vary depending on the OS version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `AlertDialog`. Use the
    default **Phone & Tablet** options and select the **Empty Activity** option when
    prompted for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To demonstrate, we''ll create a **Confirm Delete** dialog to prompt the user
    for confirmation after pressing the *Delete* button. Start by opening the `main_activity.xml`
    layout file and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `<Button>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `confirmDelete()` method called by the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This dialog is meant to serve as a simple confirmation dialog—such as confirming
    a delete action. Basically, just create an `AlertDialog.Builder` object and set
    the properties as needed. We use a Toast message to indicate the user selection
    and we don't even have to close the dialog; it's taken care of by the base class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the recipe introduction screenshot, the `AlertDialog` also has
    a third button, called the Neutral button, and can be set using the following
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Add an icon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add an icon to the dialog, use the `setIcon()` method. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using a list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also create a list of items to select with various list-setting methods,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are also methods for single-choice (using a radio button)
    and multi-choice lists (using a checkbox).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can't use both the Message and the Lists, as `setMessage()` will take priority.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, we can also create a custom layout, and set it using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you use a custom layout and replace the standard buttons, you are also responsible
    for closing the dialog. Use `hide()` if you plan to reuse the dialog and `dismiss()`
    when finished to release the resources.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a progress dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ProgressDialog` has been available since API 1, and is widely used. As
    we''ll demonstrate in this recipe, it''s simple to use, but keep this statement
    in mind (from the Android Dialog Guidelines site):'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid ProgressDialog
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Android includes another dialog class called ProgressDialog that shows a dialog
    with a progress bar. However, if you need to indicate loading or indeterminate
    progress, you should instead follow the design guidelines for Progress & Activity
    and use a ProgressBar in your layout.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/topics/ui/dialogs.html](http://developer.android.com/guide/topics/ui/dialogs.html)'
  prefs: []
  type: TYPE_NORMAL
- en: This message doesn't mean the `ProgressDialog` is deprecated or is bad code.
    It's suggesting that the use of the `ProgressDialog` should be avoided, since
    the user cannot interact with your app while the dialog is displayed. If possible,
    use a layout that includes a progress bar, instead of using a `ProgressDialog`.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play app provides a good example. When adding items to download,
    Google Play shows a progress bar, but it's not a dialog, so the user can continue
    interacting with the app, even adding more items to download. If possible, use
    that approach instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are times when you may not have that luxury, such as after placing an
    order, the user is going to expect an order confirmation. (Even with Google Play,
    you still see a confirmation dialog when actually purchasing apps.) So, remember,
    avoid the progress dialog if possible. But, for those times when something must
    complete before continuing, this recipe provides an example of how to use the
    `ProgressDialog`. The following screenshot shows the `ProgressDialog` from the
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a progress dialog](img/B05057_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `ProgressDialog`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since this is just a demonstration on using the ProgressDialog, we will create
    a button to show the dialog. To simulate waiting for a server response, we will
    use a delayed message to dismiss the dialog. To start, open `activity_main.xml`
    and follow these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `<TextView>` with the following `<Button>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following two global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `showDialog()` method referenced by the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the program on a device or emulator. When you press the **Show Dialog**
    button, you'll see the dialog as shown in the screen from the Intro.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the `ProgressDialog` class to display our dialog. The options should
    be self-explanatory, but this setting is worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Normally, a dialog can be cancelled using the *back* key, but when this is set
    to false, the user is stuck on the dialog until it is hidden/dismissed from the
    code. To simulate a delayed response from a server, we use a `Handler` and the
    `postDelayed()` method. After the specified milliseconds (30,000 in this case,
    to represent 30 seconds), the `run()` method will be called, which dismisses our
    dialog.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We used the default `ProgressDialog` settings for this recipe, which creates
    an indeterminate dialog indicator, for example, the continuously spinning circle.
    If you can measure the task at hand, such as loading files, you can use a determinate
    style instead. Add and run this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following dialog style as an output to the preceding line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/B05057_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lights, Action, and Sound Redux using Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You're probably already familiar with Notifications as they've become a prominent
    feature (even making their way to the desktop environment) and for good reason.
    They provide an excellent means to send information to your user. They provide
    the least intrusive option of all the alerts and notification options available.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the first recipe, *Lights, Action, and Sound – getting the user's
    attention!*, lights, vibration, and sound are all very useful for getting the
    user's attention. That's why the Notification object includes support for all
    three methods, as we'll demonstrate in this recipe. Given this ability to get
    your user's attention, care should still be taken not to abuse your user. Otherwise,
    they'll likely uninstall your app. It's generally a good idea to give your users
    the option to enable/disable notifications and even how to present the notification—with
    sound or without, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `LightsActionSoundRedux`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll need permission to use the vibrate option, so start by opening the Android
    Manifest file, and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing `<TextView>` with the following
    buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `MainActivity.java` and add the following methods to handle the button
    click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the program on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we combined all three actions into a single notification, simply because
    we could. You don''t have to use all three extra notification options, or even
    any. Only the following are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If you don't set both the icon and text, the notification will not show.
  prefs: []
  type: TYPE_NORMAL
- en: Second, we used the `NotificationCompat` to build our notification. This comes
    from the support library and makes it easier to be backward compatible with older
    OS versions. If we request a notification feature that is not available on the
    user's version of OS, it will simply be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three lines of code that produce our extra notification options include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It's worth noting that we use the same sound URI with the notification as we
    did with the `RingtoneManager` from the earlier *Lights, Action, and Sound* recipe.
    The vibrate feature also required the same vibrate permission as the previous
    recipe, but notice the value we send is different. Instead of sending just a duration
    for the vibration, we are sending a vibrate pattern. The first value represents
    the `off` duration (in milliseconds), the next value represents the vibration
    `on` duration, and repeats.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On devices with LED notification, you won't see the LED notification while the
    screen is active.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe shows the basics of a notification, but like many features on Android,
    options have expanded with later OS releases.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to the notification using addAction()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are several design considerations you should keep in mind when adding
    action buttons, as listed in the Notification Guidelines linked in the chapter
    introduction. You can add a button (up to three) using the `addAction()` method
    on the notification builder. Here''s an example of a notification with one action
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a button to the notification using addAction()](img/B05057_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the code to create this notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: An `Action` requires three parameters—the image, the text, and a `PendingIntent`.
    The first two items are for the visual display, while the third item, the `PendingIntent`,
    is called when the user presses the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous code creates a very simple `PendingIntent;` it just launches the
    app. This is probably the most common intent for notifications, and is often used
    for when the user presses the notification. To set the notification intent, use
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'A button action would probably require more information as it should take the
    user to the specific item in your app. You should also create an application back-stack
    for the best user experience. Take a look at the topic "**Preserving Navigation
    when Starting an Activity**" at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/topics/ui/notifiers/notifications.html#NotificationResponse](http://developer.android.com/guide/topics/ui/notifiers/notifications.html#NotificationResponse)'
  prefs: []
  type: TYPE_NORMAL
- en: Expanded notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Expanded notifications were introduced in Android 4.1 (API 16) and are available
    by using the `setStyle()` method on the Notification Builder. If the user's OS
    does not support expanded notifications, the notification will appear as a normal
    notification.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three expanded styles currently available in the `NotificationCompat` library
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InboxStyle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BigPictureStyle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BigTextStyle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example of each notification style, and the code used to create
    the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanded notifications](img/B05057_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`InboxStyle`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Expanded notifications](img/B05057_07_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`BigPictureStyle`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Expanded notifications](img/B05057_07_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`BigTextStyle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Lock screen notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Android 5.0 (API 21) and above can show notifications on the lock screen, based
    on the user''s lock screen visibility. Use `setVisibility()` to specify the notification
    visibility using the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VISIBILITY_PUBLIC`: All content can be displayed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VISIBILITY_SECRET`: No content should be displayed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VISIBILITY_PRIVATE`: Display the basic content (title and icon) but the rest
    is hidden'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the *Creating a Media Player Notification* and *Making a Flashlight with
    a Heads-Up Notification* recipes for additional notification options with Android
    5.0 (API 21) and greater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Media Player Notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is going to take a look at the new Media Player style introduced
    in Android 5.0 (API 21). Unlike the previous recipe, *Lights, Action, and Sound
    Redux using Notifications,* which used `NotificationCompat`, this recipe does
    not, as this style is not available in the support library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot showing how the notification will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Media Player Notification](img/B05057_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This screenshot shows an example of the Media Player Notification on a lock
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Media Player Notification](img/B05057_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `MediaPlayerNotification`.
    When prompted for the API level, we need API 21 (or higher) for this project.
    Select **Empty Activity** when prompted for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We just need a single button to call our code to send the notification. Open
    `activity_main.xml` and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing `<TextView>` with the following button code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the `showNotification()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the program on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first detail to note is that we decorate our `showNotification()` method
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells the compiler we know we are using deprecated calls. (Without this,
    the compiler will flag the code.) We follow this with an API check, using this
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The icon resource was changed in API 23, but we want this application to run
    on API 21 (Android 5.0) and later, so we still need to call the old methods when
    running on API 21 and API 22.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is running on Android 6.0 (or higher), we use the new `Icon` class
    to create our icons, otherwise we use the old constructor. (You'll notice the
    IDE will show the deprecated calls with a strikethrough.) Checking the current
    OS version during runtime is a common strategy for remaining backward compatible.
  prefs: []
  type: TYPE_NORMAL
- en: We create three actions using `addAction()` to handle the media player functionality.
    Since we don't really have a media player going, we use the same intent for all
    the actions, but you'll want to create separate intents in your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the notification visible on the lock screen, we need to set the visibility
    level to `VISIBILITY_PUBLIC`, which we do with the following call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This call is worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Just as the method name implies, this sets the actions to show when the notification
    is shown with a reduced layout. (See the lock screen image in the recipe introduction.)
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We only created the visual notification in this recipe. If we were creating
    an actual media player, we could instantiate a `MediaSession` class and pass in
    the session token with this call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This will allow the system to recognize the media content and react accordingly,
    such as updating the lock screen with the current album artwork.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to **Developer doc – MediaSession** at [https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Lock Screen Visibility* section in the *Lights, Action, and Sound Redux
    using Notifications* recipe discusses the visibility options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a Flashlight with a Heads-Up Notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android 5.0—Lollipop (API 21) introduced a new type of notification called the
    Heads-Up Notification. Many people do not care for this new notification as it
    can be extremely intrusive, as it forces its way on top of other apps. (See the
    following screenshot.) Keep this in mind when using this type of notification.
    We're going to demonstrate the Heads-Up Notification with a Flashlight as this
    demonstrates a good use-case scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot showing the Heads-Up Notification we''ll create further
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a Flashlight with a Heads-Up Notification](img/B05057_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you have a device running Android 6.0, you may have noticed the new Flashlight
    settings option. As a demonstration, we're going to create something similar in
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `FlashlightWithHeadsUp`.
    When prompted for the API level, we need API 23 (or higher) for this project.
    Select **Empty Activity** when prompted for the **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our activity layout will consist of just a `ToggleButton` to control the flashlight
    mode. We''ll be using the same `setTorchMode()` code as the *Lights, Action, and
    Sound – getting the user''s attention!* recipe presented earlier, and add a Heads-Up
    Notification. We''ll need permission to use the vibrate option, so start by opening
    the Android Manifest and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify that we only want a single instance of `MainActivity` by adding `android:launchMode="singleInstance"`
    to the `<MainActivity>` element. It will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the changes to `AndroidManifest` done, open the `activity_main.xml` layout
    and replace the existing `<TextView>` element with this `<ToggleButton>` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `ActivityMain.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `onCreate()` to set up the camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to handle the response when the user presses the notification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the method to get the camera id:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add these two methods to handle the flashlight mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add this method to create the notification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a physical device. As noted previously,
    you'll need an Android 6.0 (or higher) device, with an outward-facing camera flash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since this recipe uses the same flashlight code as *Lights, Action, and Sound
    – getting the user''s attention!*, we''ll jump to the `showNotification()` method.
    Most of the notification builder calls are the same as previous examples, but
    there are two significant differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notifications will not be escalated to Heads-Up Notifications unless the priority
    is set to `HIGH` (or above) and uses either vibrate or sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note this from the Developer documentation given at: [http://developer.android.com/reference/android/app/Notification.html#headsUpContentView](http://developer.android.com/reference/android/app/Notification.html#headsUpContentView):'
  prefs: []
  type: TYPE_NORMAL
- en: '"At its discretion, the system UI may choose to show this as a heads-up notification."'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a `PendingIntent` as we''ve done previously, but here we set the
    action with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We set the app to only allow a single instance in the `AndroidManifest` file,
    as we don't want to start a new instance of the app when the user presses the
    notification. The `PendingIntent` we created sets the action, which we check in
    the `onNewIntent()` callback. If the user opens the app without pressing the notification,
    they can still disable the flashlight with the `ToggleButton`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like in the *Creating a Toast using a custom layout* recipe earlier, we
    can use a custom layout with notifications. Use the following method on the builder
    to specify the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Lights, Action, and Sou**nd – getting the user's attention!* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
