- en: Chapter 3. Social APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New Social APIs have been introduced with Android Ice Cream Sandwich and this
    API makes it easy to integrate social networks. Furthermore, high resolution photos
    could be used as contact photos after Android Ice Cream Sandwich was released.
    This chapter shows Social API usage with examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Basics of contacts in Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Social API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics of contacts in Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A person may have multiple contact information details. In Android, these multiple
    contact information details are joined and displayed as one contact detail. For
    instance; a person may have a Google+ contact, a Skype contact, and a phone contact,
    and Android joins all these contacts into one contact. Each of these sources of
    contacts is **RawContact**. Each RawContact has one or more data row, which holds
    some data about the contact such as phone number, e-mail, and so on. Refer to
    the following block diagram for a better understanding of their relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basics of contacts in Android](img/9526OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each RawContact has support for storing social network streams—texts and photos—with
    Android Ice Cream Sandwich. Each RawContact is associated with **StreamItems**
    which contains texts, timestamp, and comments from social media updates, such
    as Google+, and each StreamItem is associated with **StreamItemPhotos** which
    contains photos (such as photos in a Google+ post). However, there is a limit
    for the number of StreamItems stored in RawContact. This number can be fetched
    with a query with `StreamItems.CONTENT_LIMIT_URI URI`. When the number exceeds
    the limit, the stream item with the oldest time stamp is removed. The following
    block diagram depicts the relationship between these blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basics of contacts in Android](img/9526OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Social API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example, we are going to show how to add **StreamItem** and
    then how to display added StreamItems. Firstly, we inserted two buttons into the
    user interface, one for triggering an insert and one for listing StreamItems.
    In order to display StreamItems, we put three `TextView` components in the layout.
    The layout XML should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will implement the `Activity` class step-by-step that firstly adds a contact
    and then adds `StreamItems` and displays them. The `Activity` class with the `onCreate()`
    method is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in this code, we firstly get instances of `Button` and `TextView`
    in the layout in the `onCreate(Bundle savedInstanceState`) method. The `Chapter3_1Activity`
    class implements `OnClickListener` for the buttons. As you can see in the `onClick(View
    v)` method, when the **Insert** button is clicked, the `addContact()` method is
    called. The `addContact()` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `addContact()` method, firstly a RawContact is created with the `addRawContact()`
    method. In the `addRawContact()` method, we use `accountName` and `accountType`
    to create a raw contact. The `addRawContact()` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After the raw contact is created, we use the ID of the created raw contact
    in creating the name, e-mail, phone number, and StreamItems. `addName()`, `addEmail()`,
    and `addPhoneNumber()` methods are using `ContentValues` class to create the name,
    e-mail, and phone number data as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `addContactStreamItem()` method, we create the StreamItems. We provide
    the raw contact ID, text of the StreamItem, time stamp in milliseconds in which
    the StreamItem is created, account name, and type to create StreamItems. Raw contact
    ID, account name, and type are required fields for creating a StreamItem. The
    `addContactStreamItem()` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `addContactStreamPhoto()` method is used for creating StreamItemPhotos
    for a StreamItem. We have to provide a photo in binary, or `PHOTO_FILE_ID`, or
    `PHOTO_URI`. As you can see in the following code block, we used a drawable to
    create a photo in binary using `loadPhotoFromResource` and `readInputStream` methods.
    We also provide the StreamItem ID, sort index, account name, and type for creating
    a stream photo. If we don''t provide a sort index, the ID column will be used
    for sorting. The `addContactStreamPhoto()` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When the **List** button is clicked, the `getStreams()` method is called. As
    you can see in the following code, in the `getStream()` method, we firstly retrieve
    the `contactId` details of the raw contact using the `getContactId()` method.
    Then we use this contact ID in querying StreamItems by passing `contactId` as
    the search parameter. Since we query the StreamItems, `ContactsContract.StreamItems.CONTENT_URI`
    is used as the URI. Lastly, StreamItems are retrieved with a cursor and texts
    of StreamItems are displayed in TextViews. The `getStreams()` method and the `getContactId()`
    method are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we need some permissions for reading and writing social streams and
    contacts: `READ_SOCI` `AL_STREAM`, `WRITE_SOCIAL_STREAM, READ_CONTACTS`, and `WRITE_CONTACTS`.
    Furthermore, we have to set the minimum SDK to the API Level 15 in order to use
    Social APIs. The `AndroidManifest.xml` file should look like the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute the application in the emulator, click the **Insert** button
    and then click the **List** button; the screen will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Social API](img/9526_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you execute the `People` app in the emulator, you will see that the contact
    named **Murat Aydın** is created as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Social API](img/9526_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also see the recent social network updates with photos that we created
    programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Social API](img/9526_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Device user profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Starting from API Level 14, Android displays the device user profile at the
    top of the contacts as **ME** as seen in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Device user profile](img/9526_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`ContactsContract.Profile. CONTENT_URI and ContactsContract.Profile.CONTENT_RAW_CONTACTS_URI`
    URIs could be used in order to read and write the device user profile. Operations
    are similar to reading and writing a contact except that `READ_PROFILE` and `WRITE_PROFILE`
    permissions are needed in the `AndroidManifest.xml` file.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integration of contacts and social networks became easier with the new Social
    APIs introduced with Android Ice Cream Sandwich. `StreamItems` and `StreamItemPhotos`
    classes are used for storing social network updates to be stored in contacts.
    In this chapter, we learned how to use these classes. Furthermore, we learned
    the device user profile that displays the contact information of the device user.
  prefs: []
  type: TYPE_NORMAL
- en: New APIs have been introduced with Android Ice Cream Sandwich for managing calendars.
    In the next chapter, we will learn the new Calendar API and how to use it.
  prefs: []
  type: TYPE_NORMAL
