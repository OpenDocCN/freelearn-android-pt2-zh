- en: Chapter 4. Simple Voice Interactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 简单的语音交互
- en: Wouldn't it be great if you could just speak to your mobile device to ask it
    for information or to get it to do something? This chapter looks at simple voice
    interactions that allow you to do just this. Two tutorial examples will show you
    how to implement a query to search for information as well as a request to launch
    one of the apps on your device.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以仅通过向移动设备说话来获取信息或让它做事，那不是很好吗？本章介绍简单的语音交互，让你能够这样做。两个教程示例将向你展示如何实现查询信息以及请求启动设备上的一个应用程序。
- en: 'Speech recognition is not perfect, thus it is interesting to implement some
    mechanisms to choose only the best recognition results. In previous chapters,
    we studied how to obtain confidence measures. In this chapter, we will cover two
    new mechanisms: similarity measures to compare the recognized input with what
    the user said, and confirmations to directly ask the user if the system understood
    correctly.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 语音识别并不完美，因此实施一些机制来选择最佳的识别结果很有意义。在前面的章节中，我们学习了如何获得置信度度量。在本章中，我们将介绍两种新机制：相似度度量，用于将识别的输入与用户所说的内容进行比较，以及确认机制，直接询问用户系统是否正确理解。
- en: By the end of this chapter, you should be able to develop simple voice interactions
    to request information and carry out commands on your device. You should also
    be aware of how to use similarity measures and confirm what the user has said.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够开发简单的语音交互，以请求信息并在设备上执行命令。你也应该了解如何使用相似度度量并确认用户所说的话。
- en: Voice interactions
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音交互
- en: As discussed in [Chapter 1](ch01.html "Chapter 1. Speech on Android Devices"),
    *Speech on Android Devices*, Google Voice Actions are simple interactions in which
    the user speaks a question or a command and the app responds with an action or
    a verbal response (or a combination of both).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第1章](ch01.html "第1章. 安卓设备上的语音")，*安卓设备上的语音*中讨论的，谷歌语音动作是简单的交互，用户说出一个问题或命令，应用程序通过动作或语音回应（或两者的组合）进行响应。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following are examples of similar interactions with a simple structure
    and involving a small number of turns:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是具有简单结构和少量交互回合的类似交互示例：
- en: Example 1
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1
- en: 'User: BBC News'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用户：BBC新闻
- en: 'App: (launches BBC News)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序：（启动BBC新闻）
- en: Example 2
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2
- en: 'App: What is your query?'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序：你的查询是什么？
- en: 'User: What is the capital of France?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用户：法国的首都是什么？
- en: 'App: (returns web pages about Paris and France)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序：（返回关于巴黎和法国的网页）
- en: 'The interactions are simple in the following ways:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下交互方式简单：
- en: '**Limited dialog management**: The interactions consist of at most two or three
    turns.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的对话管理**：交互最多由两到三个回合组成。'
- en: '**Limited spoken language understanding**: The user is restricted to inputs
    consisting of single words or phrases, such as the name of a website or of an
    app, or a stretch of text that can be handled by the Google search engine.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的语音理解能力**：用户仅限于由单个单词或短语组成的输入，例如网站名称或应用程序名称，或可以由谷歌搜索引擎处理的文本段落。'
- en: VoiceSearch app
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VoiceSearch应用程序
- en: 'This app illustrates the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序说明了以下内容：
- en: When clicking on the **Press the button to speak** option, the user is prompted
    to say some words.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**按下按钮说话**选项时，提示用户说一些词语。
- en: The user speaks some words.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户说出一些词语。
- en: '`VoiceSearch` initiates a search query based on the words spoken by the user.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`VoiceSearch`根据用户的语音发起搜索查询。'
- en: The opening screen has a button asking the user to press and speak. On pressing
    the button, the next screen displays the Google speech prompt **What is your query?**
    The results are displayed in a browser window.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开屏界面有一个按钮，提示用户按下并说话。按下按钮后，下一界面显示谷歌语音提示**你的查询是什么？**结果会在浏览器窗口中显示。
- en: 'In this case, the app uses the two libraries developed previously: `TTSLib`
    (see [Chapter 2](ch02.html "Chapter 2. Text-to-Speech Synthesis"), *Text-to-Speech
    Synthesis*) and `ASRLib` (see [Chapter 3](ch03.html "Chapter 3. Speech Recognition"),
    *Speech Recognition*). Their `jar` files are included in the `libs` folder of
    the `VoiceSearch` project. The ASR methods are used to recognize the user input
    and use it as the search criterion. The TTS is employed to provide spoken feedback
    to the user about the status of the app.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在此案例中，应用程序使用了之前开发的两个库：`TTSLib`（见[第2章](ch02.html "第2章. 文本到语音合成")，*文本到语音合成*）和`ASRLib`（见[第3章](ch03.html
    "第3章. 语音识别")，*语音识别*）。它们的`jar`文件包含在`VoiceSearch`项目的`libs`文件夹中。ASR方法用于识别用户输入并将其用作搜索条件。TTS用于向用户提供关于应用程序状态的语音反馈。
- en: This app combines the code that was already presented for the `TTSWithLib` ([Chapter
    2](ch02.html "Chapter 2. Text-to-Speech Synthesis"), *Text-to-Speech Synthesis*)
    and the `ASRWithLib` ([Chapter 3](ch03.html "Chapter 3. Speech Recognition"),
    *Speech Recognition*) apps. It uses an instance of TTS as in `TTSWithLib`, and
    the same methods for ASR in `ASRWithDemo`. It also provides visual feedback on
    whether the app is listening to the user or not by changing the color and text
    of the button.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序结合了`TTSWithLib`（[第二章](ch02.html "第二章. 语音合成")，*语音合成*）和`ASRWithLib`（[第三章](ch03.html
    "第三章. 语音识别")，*语音识别*）应用程序中已经呈现的代码。它使用与`TTSWithLib`中相同的TTS实例，以及`ASRWithDemo`中的相同ASR方法。它还通过改变按钮的颜色和文字，提供视觉反馈以指示应用程序是否正在监听用户。
- en: 'Once the ASR produces a result, it is used to carry out a Google search using
    a web search intent, as shown in the `processAsrResults` method:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦ASR产生结果，它将被用于执行谷歌搜索，使用一个网页搜索意图，如`processAsrResults`方法所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As can be observed, the app always initiates a web search using the best result.
    However, the system might have misrecognized what the user said, in which case
    the search launched would be incorrect. In order to avoid this situation, it is
    possible to make use of confirmations. An introduction to confirmations and a
    simple example using the `VoiceSearch` app will be presented at the end of this
    chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以观察到，应用程序总是使用最佳结果启动网络搜索。然而，系统可能误解了用户说的话，在这种情况下，启动的搜索可能是错误的。为了避免这种情况，可以使用确认。本章末尾将介绍确认的引入以及使用`VoiceSearch`应用程序的一个简单示例。
- en: VoiceLaunch app
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VoiceLaunch应用程序
- en: 'The functionality of this app is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '这个应用程序的功能如下： '
- en: When clicking on the **Press to speak** button, the user is prompted for the
    name of an app.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击**按下说话**按钮时，系统会提示用户说出一个应用程序的名称。
- en: The user says the name of an app.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户说出一个应用程序的名字。
- en: '`VoiceLaunch` compares the recognized input against the names of all the apps
    installed in the device, and launches the one whose name is the most similar.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`VoiceLaunch`会将识别的输入与设备上安装的所有应用程序的名称进行比较，并启动名称最相似的应用程序。'
- en: 'An application like `VoiceLaunch` does not require any interface, as the user
    could just speak the name of the app they want to be launched. However, for illustration
    purposes, we have created a simple interface in which the user can choose the
    values of two parameters: a similarity threshold and a similarity criterion, as
    shown in the following screenshot. The screenshot shows the scenario in which
    the user has asked to launch **Email**. `VoiceLaunch` shows the screen in the
    figure and launches the **Email** application (the one with the highest similarity,
    in this case **1.00**):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 像VoiceLaunch这样的应用程序不需要任何界面，因为用户只需说出他们想要启动的应用程序名称即可。然而，为了说明起见，我们创建了一个简单的界面，用户可以在其中选择两个参数的值：一个相似度阈值和一个相似度准则，如下面的截图所示。截图显示了用户要求启动**邮件**的场景。`VoiceLaunch`显示了图中的屏幕并启动了**邮件**应用程序（在这种情况下是相似度最高的，为**1.00**）：
- en: '![VoiceLaunch app](img/5297_04_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![VoiceLaunch应用程序](img/5297_04_01.jpg)'
- en: We have introduced the technique of similarity criteria to show how to improve
    on the results from the ASR. For example, when you have a list of keywords that
    you want to recognize, but you cannot restrict the ASR to listen only for those
    words, it is possible that the recognition results are not exactly equivalent
    to the keywords you expected. For example, if your keywords are ice cream flavors,
    you may consider *chocolate*, *strawberry*, and *vanilla*, but if your ASR is
    not restricted, the recognition result for *strawberry* could be *cranberry*.
    If your app is expecting an exact match, it would discard the recognition result.
    However with a similarity measure, your app would know that the user said something
    similar to *strawberry*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了相似性准则的技术，以展示如何改善ASR的结果。例如，当你有一个需要识别的关键词列表，但你不能限制ASR只监听这些词时，识别结果可能并不完全等同于你所期望的关键词。比如，如果你的关键词是冰淇淋口味，你可能考虑*巧克力*、*草莓*和*香草*，但如果你的ASR没有限制，对*草莓*的识别结果可能是*蔓越莓*。如果你的应用程序期待一个完全匹配，它会丢弃识别结果。然而，有了相似性度量，你的应用程序会知道用户说了与*草莓*相似的内容。
- en: In `VoiceLaunch`, the similarity criterion is used to control how the app measures
    the similarity between the name recognized and the names of the apps installed
    in the device. The similarity threshold is employed so that an app is not launched
    if its name is not similar enough to what was recognized from the user input.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`VoiceLaunch`中，相似度标准用于控制应用如何测量识别的名称与设备中安装的应用名称之间的相似度。使用相似度阈值，以便如果应用的名称与用户输入的识别内容不够相似，则不会启动该应用。
- en: 'We consider the following two options for computing similarity:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们考虑以下两种计算相似度的选项：
- en: '**Orthographic similarity**: `VoiceLaunch` computes Levenshtein distance between
    the words. This metric considers the distance between words A and B as the minimum
    number of character insertions, deletions, or substitutions that must be carried
    out in A to obtain B. `VoiceLaunch` translates the distance value into a value
    of similarity between 0 and 1.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正字法相似度**：`VoiceLaunch`计算单词之间的Levenshtein距离。这个度量标准将单词A和B之间的距离视为在A中执行插入、删除或替换以获得B所需的最小字符数。`VoiceLaunch`将距离值转换为0到1之间的相似度值。'
- en: '**Phonetic similarity**: `VoiceLaunch` uses the *Soundex* algorithm to compute
    the phonetic similarity between the names. The implementation used is only valid
    for English, which is why the `VoiceLaunch` app is only available in this language.
    In this way, words that sound the same would be considered to be similar even
    if their spelling is different. The similarity is also measured using the interval
    from 0 to 1.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音相似度**：`VoiceLaunch`使用*Soundex*算法来计算名称之间的语音相似度。所使用的实现仅对英语有效，这就是为什么`VoiceLaunch`应用仅提供英语版本。这样，即使拼写不同，发音相同的单词也会被认为是相似的。相似度也使用从0到1的区间进行测量。'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: 'There are many alternatives to the distances considered: Euclidean distance,
    Jaccard index, Hamming distance, Sorensen similarity index, or Metaphone.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑的距离度量有很多：欧几里得距离、杰卡德指数、汉明距离、索伦森相似度指数或梅特afone。
- en: 'Usually homophones have a similar spelling, so the values for orthographic
    and phonetic similarity are almost the same, for example, *to* and *too*, or *flower*
    and *flour*. As can be observed, phonetic similarity is more convenient when working
    with ASR results, while orthographic similarity is better when working with results
    from text where misspellings are more frequent. The following table shows some
    examples:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通常同音词的拼写相似，因此正字法和语音相似度的值几乎相同，例如，*to*和*too*，或*flower*和*flour*。可以观察到，当处理ASR结果时，语音相似度更为方便，而当处理文本结果时，正字法相似度更好，因为文本中拼写错误更常见。以下表格显示了一些示例：
- en: '| Similarity criteria | Sample word pairs |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 相似度标准 | 示例单词对 |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|   | Addition – Edition | Flower - Flour | Plane – Plain | Browser – Mail
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|   | Addition – Edition | Flower - Flour | Plane – Plain | Browser – Mail
    |'
- en: '| Orthographic similarity | 0.75 | 0.66 | 0.60 | 0.00 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 正字法相似度 | 0.75 | 0.66 | 0.60 | 0.00 |'
- en: '| Phonetic similarity | 0.75 | 1.00 | 1.00 | 0.00 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 语音相似度 | 0.75 | 1.00 | 1.00 | 0.00 |'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: A small Java project to make tests is available on the book's web page. You
    can make your own tests using the `ComparisonTest` java project. In order to use
    it, you must include the apache library for Soundex, and include the words to
    be compared as run parameters. To include the library using Eclipse, right-click
    on **Project** | **Properties** | **Libraries** | **Add external JARs**. To run
    the project, right-click on **Run as** | **Run configurations** and in the **Arguments**
    tab under **Program arguments**, include the two words separated by a space (for
    example, `to too`).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一本配套的小型Java项目可在书籍网页上找到，你可以使用`ComparisonTest` java项目来创建自己的测试。为了使用它，你必须包含Soundex的apache库，并将要比较的单词作为运行参数。在Eclipse中包含库，请右键点击**项目**
    | **属性** | **库** | **添加外部JARs**。要运行项目，请右键点击**运行方式** | **运行配置**，在**程序参数**标签下，用空格分隔两个单词（例如，`to
    too`）。
- en: The code that deals with the ASR and TTS is similar to the `VoiceSearch` app.
    However, after the recognition is completed, `VoiceLaunch` must find apps that
    are similar to the recognized words of the user and launch the one which is the
    most similar. This is done in the `processAsrResults` method (take a look at it
    in the code bundle in the `VoiceLaunch.java` file under the `VoiceLaunch` project),
    which invokes the methods `getSimilarAppsSorted` and `launchApp` that will be
    described in the following pages.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 ASR 和 TTS 的代码与 `VoiceSearch` 应用相似。然而，在识别完成后，`VoiceLaunch` 必须找到与用户识别词相似的应
    用，并启动最相似的一个。这通过在 `processAsrResults` 方法中完成（在代码包的 `VoiceLaunch.java` 文件中查看），该方法调用
    `getSimilarAppsSorted` 和 `launchApp` 方法，这些方法将在以下页面中描述。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Have you noticed that…**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**你是否注意到…**'
- en: The use of the ASR library in all the apps enables them to have a similar structure,
    in which the processing of the recognized information is carried out in the `processAsrResults`
    method. For example, in the `VoiceSearch` app it started a search with the recognized
    criteria, while in `VoiceLaunch` it gets the list of similar apps installed and
    launches the most similar one.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用中使用的语音识别（ASR）库使它们具有相似的结构，其中在 `processAsrResults` 方法中处理识别信息。例如，在 `VoiceSearch`
    应用中，它使用识别条件开始搜索，而在 `VoiceLaunch` 中，它获取已安装的类似应用列表并启动最相似的一个。
- en: Additionally, `VoiceLaunch` must store and manage information about the apps
    available on the device. In order to do this efficiently without losing the legibility
    of the code, we have created an auxiliary class named `MyApp` (you can find it
    in the code bundle, in `VoiceLaunch.java` under the `VoiceLaunch` project), in
    which for each app we save its user-friendly name (for example, Adobe Reader),
    its package name recognizable by Android (for example, com.adobe.reader), and
    its similarity with the user input (a value from 0 to 1, for example, 0.7).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`VoiceLaunch` 必须存储和管理关于设备上可用应用的信息。为了高效地完成这项工作同时保持代码的可读性，我们创建了一个名为 `MyApp`
    的辅助类（你可以在代码包中找到，位于 `VoiceLaunch` 项目的 `VoiceLaunch.java` 文件中），对于每个应用，我们保存其用户友好的名称（例如，Adobe
    Reader），其被 Android 可识别的包名（例如，com.adobe.reader），以及其与用户输入的相似度（从0到1的值，例如，0.7）。
- en: 'As it is necessary to sort the installed apps, we also define a comparator
    for the objects of the `MyApp` class. Comparators return a negative number if
    the first element is smaller than the second, 0 if they are equal, and a positive
    number if the first is higher than the second. They can then be employed to sort
    collections from the minimum to the maximum value. In our case, we want to sort
    a collection of `MyApps` from the highest to the lowest similarity. Thus, we multiply
    the results of the comparator of the similarity values by -1 to get the results
    in the reverse order:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要排序已安装的应用，我们还为 `MyApp` 类的对象定义了一个比较器。比较器如果第一个元素小于第二个元素返回负数，如果它们相等返回0，如果第一个元素大于第二个元素返回正数。然后它们可以用来将集合从最小值排序到最大值。在我们的案例中，我们希望从最高相似度到最低相似度排序
    `MyApps` 的集合。因此，我们将相似度值的比较器结果乘以-1，以得到反向排序的结果：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As stated before, `VoiceLaunch` uses the method `getSimilarAppsSorted` to obtain
    the list of apps in the device sorted by similarity, but it only takes into account
    those apps whose similarity with the recognized name is higher than the specified
    threshold.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`VoiceLaunch` 使用 `getSimilarAppsSorted` 方法来获取设备上按相似度排序的应用列表，但它只考虑那些与识别名称相似度高于指定阈值的应用。
- en: 'As can be observed in the code bundle (in `VoiceLaunch.java` under the `VoiceLaunch`
    project), the process is carried out through the following steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码包所示（在 `VoiceLaunch` 项目下的 `VoiceLaunch.java` 文件中），该过程通过以下步骤进行：
- en: A list of all the installed apps is retrieved from the Package Manager.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从包管理器中检索所有已安装应用的列表。
- en: For each app in the list, its similarity with the recognized name is computed
    using the algorithm chosen by the user in the GUI. If the similarity value obtained
    is higher than the threshold, the name, package name, and similarity values for
    the app are saved by creating an instance of the `MyApp` class, which is added
    to the `similarApps` collection.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于列表中的每个应用，使用用户在 GUI 中选择的算法计算其与识别名称的相似度。如果获得的相似度值高于阈值，通过创建 `MyApp` 类的实例来保存应用的名称、包名和相似度值，该实例被添加到
    `similarApps` 集合中。
- en: 'The `similarApps` collection is sorted using our similarity comparator: `Collections.sort(similarApps,
    new AppComparator());`'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`similarApps`集合是使用我们的相似度比较器进行排序的：`Collections.sort(similarApps, new AppComparator());`'
- en: The information is saved in the log, so that the developer can be aware of which
    apps were considered in terms of similarity.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些信息被保存在日志中，以便开发者了解在相似度方面考虑了哪些应用。
- en: '[PRE2]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**You can also try…**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**你也可以尝试…**'
- en: An additional method could be used so that the system does not choose one of
    the similarity measures and selects the most similar app taking into account the
    results of both the methods, for example, using a weighted voting approach.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用另一种方法，使系统不仅仅选择一个相似度度量，而是综合考虑两种方法的结果来选择最相似的应用，例如，使用加权投票方法。
- en: 'Depending on the similarity algorithm employed, `getSimilarAppsSorted` invokes
    one of the following methods: `compareOrthographic` or `comparePhonetic` (see
    `VoiceLaunch.java` under the `VoiceLaunch` project in the code bundle). The former
    computes orthographic distance using the Levenshtein measure, the latter computes
    the phonetic distance using the Soundex algorithm.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据所使用的相似度算法，`getSimilarAppsSorted`调用以下方法之一：`compareOrthographic`或`comparePhonetic`（见代码捆绑包中`VoiceLaunch`项目下的`VoiceLaunch.java`）。前者使用Levenshtein度量计算正字法距离，后者使用Soundex算法计算语音距离。
- en: To compute Levenshtein distance, we use the `LevenshteinDistance.java` class
    in the `com.voicedemos` package. It is based on the code proposed by wikibooks
    available at [http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Java](http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Java),
    to which we have added the code to translate the distance to a similarity value
    between 0 and 1.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算Levenshtein距离，我们使用了`com.voicedemos`包中的`LevenshteinDistance.java`类。它基于维基教科书提供的代码，该代码可以在[http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Java](http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Java)找到，我们在此基础上添加了将距离转换为0到1之间相似度值的代码。
- en: To compute the phonetic distance, we use the Soundex implementation provided
    by Apache Commons available at [http://commons.apache.org/proper/commons-codec/index.html](http://commons.apache.org/proper/commons-codec/index.html).
    In order to do this, we have added the `jar` file corresponding to `commons-code-1.8
    lib` to the `libs` folder of the `VoiceLaunch` project.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算语音距离，我们使用了Apache Commons提供的Soundex实现，可在[http://commons.apache.org/proper/commons-codec/index.html](http://commons.apache.org/proper/commons-codec/index.html)找到。为此，我们将对应的`commons-codec-1.8
    lib`的`jar`文件添加到了`VoiceLaunch`项目的`libs`文件夹中。
- en: 'The input parameters of the two similarity calculation methods are two strings,
    corresponding to the name of the app under consideration and the recognized input.
    These strings were previously normalized by erasing spaces and using lowercase:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个相似度计算方法的输入参数是两个字符串，分别对应考虑中的应用名称和识别的输入。这些字符串之前通过删除空格并使用小写进行了标准化处理：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: A more sophisticated normalization could be carried out in order to cope with
    the situation in which the user says just one word of a two word name, for example,
    *kindle* instead of *kindle reader*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可以进行更复杂的标准化处理，以应对用户只说了一个双词名称中的一个词的情况，例如，说*kindle*而不是*kindle reader*。
- en: Once the apps are ordered, the most similar app is launched using the `launchApp`
    method, which uses `launchintent` with the package name of the app (you can find
    it in the `VoiceLaunch.java` file in the code bundle).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 应用排序后，最相似的应用通过使用`launchApp`方法启动，该方法使用带有应用包名的`launchintent`（你可以在代码捆绑包中的`VoiceLaunch.java`文件中找到它）。
- en: VoiceSearchConfirmation app
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VoiceSearchConfirmation应用
- en: Confirmations are a very important aspect of a transactional dialog and are
    also used extensively by humans in service transactions to ensure that everything
    has been understood correctly. Since the current speech recognition technology
    cannot guarantee that the app heard exactly what the user said, the app should
    confirm what the user wants, especially if the next action could result in unrecoverable
    consequences. However, confirmations should be used judiciously as they prolong
    the interaction and can be annoying for the user if they are overused.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 确认是事务性对话中非常重要的一个方面，人类在服务交易中也广泛使用以确信一切都已被正确理解。由于当前的语音识别技术不能保证应用确切听到了用户所说的内容，应用应该确认用户的意图，尤其是如果下一个动作可能导致不可恢复的后果时。然而，确认应该谨慎使用，因为它们会延长交互时间，如果过度使用可能会让用户感到烦恼。
- en: 'The `VoiceSearchConfirmation` app has the same functionality as `VoiceSearch`,
    but it confirms the search criteria before performing the search. Two sample interactions
    with this app are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`VoiceSearchConfirmation`应用程序与`VoiceSearch`功能相同，但在执行搜索之前会确认搜索条件。与该应用程序的两个示例交互如下：'
- en: '**Confirmation scenario**: This scenario is characterized by the following
    steps:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认情景**：此情景的特点如下：'
- en: The user pushes the button to talk and says *Weather in Belfast*.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下按钮说话，并说出了*贝尔法斯特的天气*。
- en: The system understands *Weather in Belfast* and asks *Did you say weather in
    Belfast?*
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统理解了*贝尔法斯特的天气*并询问*你是说贝尔法斯特的天气吗？*
- en: The user pushes the button to talk and says *Yes*.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下按钮说话，并说*是的*。
- en: The system launches a search with *Weather in Belfast* as the criterion.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统使用*贝尔法斯特的天气*作为条件启动搜索。
- en: '**Negation scenario**: It is characterized by the following steps:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**否定情景**：其特点如下：'
- en: The user pushes the button to talk and says *Weather in Granada*.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下按钮说话，并说*格拉纳达的天气*。
- en: The system understands *Weather in Canada* and asks *Did you say weather in
    Canada?*
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统理解了*加拿大的天气*并询问*你是说加拿大的天气吗？*
- en: The user pushes the button to talk and says *No*.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下按钮说话，并说*不*。
- en: The dialogue goes back to step 1 until the user is satisfied.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对话返回到步骤1，直到用户满意为止。
- en: The `processResults` method is invoked any time the ASR recognizes something
    from the user input. Thus, in order to provide the app with confirmation capabilities,
    it is necessary to distinguish whether the method was invoked after recognizing
    the search criterion or whether it recognized the yes/no response from a confirmation
    request. In order to do this, we introduce the new attribute `searchCriterion`
    that stores the criterion recognized. If it is null, we try to recognize a new
    criterion, if not, we confirm its value. You can take a look at the code in the
    `VoiceSearchConfirmation.java` file under the `VoiceSearchConfirmation` project
    of the code bundle.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`processResults`方法在ASR识别出用户输入的任何内容时都会被调用。因此，为了给应用程序提供确认功能，需要区分方法是识别搜索条件后调用，还是识别确认请求的“是/否”响应。为此，我们引入了新的属性`searchCriterion`来存储已识别的条件。如果为空，我们会尝试识别新的条件，如果不是，则确认其值。您可以查看`VoiceSearchConfirmation.java`文件中的代码，该文件位于`VoiceSearchConfirmation`项目的代码包中。'
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Other similarity measures and techniques**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他相似度衡量方法和技术**'
- en: 'Other similarity measures and techniques for enhancing the results returned
    by the Google speech recognizer are described in the book by Greg Milette and
    Adam Stroud called *Professional Android™ Sensor Programming* in Chapter 17\.
    Among the techniques discussed are:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其他相似度衡量方法和用于增强谷歌语音识别器返回结果的技巧在Greg Milette和Adam Stroud所著的《Professional Android™
    Sensor Programming》第17章中有所描述。讨论的技巧包括：
- en: Using stemming to improve word spotting, that is, reducing words to their roots
    by removing suffixes, for example, reducing walk, walks, walked, and walking to
    the same root.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用词干提取来提高词汇识别，即通过去掉词尾来将单词简化为词根，例如，将walk、walks、walked和walking都简化为同一个词根。
- en: Phonetic indexing, that is, matching words that are similar in terms of how
    they sound, for example, being able to return *apple* if the recognizer returns
    the similarly sounding word *appeal*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 音韵索引，即匹配在发音上相似的词汇，例如，如果识别器返回发音相似的词*appeal*，能够返回*apple*。
- en: Matching using Lucene, a search engine library designed for searching text.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Lucene进行匹配，这是一个为文本搜索而设计的搜索引擎库。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have shown how to develop simple voice interactions using
    the Google speech recognition and TTS APIs. The first example showed how to take
    an input of some words from the user and initiate a search query. The second example
    involved using speech to launch apps on the device. Here we introduced the technique
    of using similarity measures to compare the recognition of the user''s input with
    what might have been said. Two different measures were illustrated: orthographic
    similarity and phonetic similarity. The final example showed how to use confirmations
    in order to check with the user that the system had recognized the input correctly.
    These techniques, along with the use of confidence scores introduced in the previous
    chapter, are useful tools for the development of speech-enabled apps.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了如何使用谷歌语音识别和TTS API开发简单的语音交互。第一个示例说明了如何从用户那里获取一些词语作为输入并启动搜索查询。第二个示例涉及使用语音在设备上启动应用程序。这里我们介绍了使用相似度度量来比较用户输入的识别结果与可能说出内容的技术。文中展示了两种不同的度量方法：正字法相似性和音韵相似性。最后一个示例展示了如何使用确认来检查系统是否正确识别了输入。这些技术，加上前一章引入的置信度分数，对于开发支持语音的应用程序非常有用。
- en: However, these interactions are limited in two ways. Firstly, they do not involve
    the use of dialog state information to control the interaction and to determine
    what the app should say and do. The app's behavior is hard-coded within the particular
    voice action. Secondly, the interactions restrict the user to a simple one word
    or a short phrase input. More complex dialogs require both a representation of
    the dialog state and more advanced spoken language understanding. [Chapter 5](ch05.html
    "Chapter 5. Form-filling Dialogs"), *Form-filling Dialogs* shows how to include
    a representation of dialog state in order to provide more flexible dialog management,
    while [Chapter 6](ch06.html "Chapter 6. Grammars for Dialog"), *Grammars for Dialog*
    shows how to use grammar to allow more advanced spoken language understanding.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些交互在两个方面受到限制。首先，它们没有涉及使用对话状态信息来控制交互，以及确定应用程序应该说什么和做什么。应用程序的行为在特定的语音动作中是硬编码的。其次，这些交互限制了用户只能输入一个简单单词或短句。更复杂的对话需要对话状态的表示以及更高级的口语语言理解。[第五章](ch05.html
    "第五章. 表单填充对话")展示了如何包含对话状态的表示，以提供更灵活的对话管理，而[第六章](ch06.html "第六章. 对话语法")则展示了如何使用语法来允许更高级的口语语言理解。
- en: As far as confirmations are concerned, we have presented a very naive solution
    for the case in which only a single piece of data has to be confirmed. In the
    next chapters, we will study how to create a more sophisticated behavior in which
    several pieces of data can be confirmed as well as confirmation policies that
    take into account recognition confidences. We will also introduce an approach
    that does away with the need to push the button to talk.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就确认而言，我们针对只需确认单个数据的情况提出了一种非常简单的解决方案。在接下来的章节中，我们将研究如何创建更为复杂的行为，以便可以确认多个数据，同时考虑识别置信度的确认策略。我们还将介绍一种无需按下按钮即可进行对话的方法。
