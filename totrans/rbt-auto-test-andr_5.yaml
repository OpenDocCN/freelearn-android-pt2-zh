- en: Chapter 5. Comparison with Other Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provides a comparison between Robotium and other testing frameworks
    based on certain parameters. This will provide you a way to select a proper framework
    according to your project needs. In this chapter, we will compare Robotium with
    MonkeyRunner, Robolectric, UI Automator, and Calabash frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: MonkeyRunner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MonkeyRunner** is a tool used to write programs that can access the Android
    emulator/device from outside of the Android code. Python programs are written
    to install the Android test app and send keystrokes to the app. The program takes
    the screenshots of the Android UI and sends it to the workstation for storage.'
  prefs: []
  type: TYPE_NORMAL
- en: MonkeyRunner is an API, not a program. It uses **Jython** (an implementation
    of python) that uses the Java programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Since MonkeyRunner is a module of Python, you can do anything that is supported
    by Python. All you need to do is create a Python program and add MonkeyRunner
    to it and you're done!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the difference between Robotium and MonkeyRunner in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Features | Robotium | MonkeyRunner |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Object selection | Object selection is based on attributes such as index,
    text/name, image, and ID. | Object selection is based on its location (x, y co-ordinates),
    which can change when the application evolves. There are high chances that touch
    events can''t be used as the exact location is not provided. |'
  prefs: []
  type: TYPE_TB
- en: '| Actions | It can perform actions only on the tested app. | It can click throughout
    the device, that is, all the applications present. |'
  prefs: []
  type: TYPE_TB
- en: '| Assertion | JUnit based. A red/green bar is displayed for asserts (verification).
    | Screenshot-based verification. |'
  prefs: []
  type: TYPE_TB
- en: '| Language | Java. | Python scripts. |'
  prefs: []
  type: TYPE_TB
- en: '| Installation | The Robotium JAR can be imported inside the Eclipse plugin
    and the test case can be executed as a `.apk` file. | To use MonkeyRunner, run
    the `monkeyrunner` tool present in `<android sdk>/tools/` and pass the filename
    to be used as a test case. It does not install any program inside the emulator/device.
    |'
  prefs: []
  type: TYPE_TB
- en: There are some points common to the two frameworks. They can run on an emulator/device
    and control devices/emulators from a workstation by sending specific commands
    and events from an API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Android testing domain, different frameworks are present for different
    needs. Since Robotium is mostly used for UI testing, it doesn''t support some
    of the following features of MonkeyRunner:'
  prefs: []
  type: TYPE_NORMAL
- en: Extensible automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple application and device control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robolectric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Robolectric** is a test framework that mocks a part of the Android framework
    and allows the running of test cases directly on the **Java Virtual Machine**
    (**JVM**) with the help of the JUnit 4 framework. The most important thing about
    Robolectric is that it does not need an emulator/device.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Robolectric](img/8010OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Robolectric contains the shallow Android objects that behave like objects present
    in the Android SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the difference between Robotium and Robolectric in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Features | Robotium | Robolectric |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Emulator/Device | Robotium needs either an emulator or a device to execute
    tests. | Robolectric does not need any emulator/device to execute tests. This
    is why it is much faster than Robotium. |'
  prefs: []
  type: TYPE_TB
- en: '| Build server | It needs an emulator or a device on the build server to run
    test cases; otherwise, the test project can''t be added to the build process.
    | It can be configured easily on the build server. |'
  prefs: []
  type: TYPE_TB
- en: '| Test-driven development | It is used to test on an actual Android device
    and the API edges that are not simulated by Robolectric. | It helps to speed up
    the test driven development cycle more than Robotium. |'
  prefs: []
  type: TYPE_TB
- en: '| Instrumentation | It uses JUnit 3 instrumentation testing. | It uses JUnit
    4 non instrumentation testing. |'
  prefs: []
  type: TYPE_TB
- en: UI Automator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UI Automator is a Java library used to create customized-UI test cases for an
    android application and it provides an execution engine to automate and run test
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the difference between Robotium and UI Automator in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Features | Robotium | UI Automator |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Cross-application package | Robotium can''t cross the application package
    boundary. | UI Automator can cross application package boundaries. For example,
    if your application opens the gallery and clicks on any album, this can be achieved
    using UI Automator. The gallery is another application package and clicking on
    an album inside the gallery is a cross-application operation. |'
  prefs: []
  type: TYPE_TB
- en: '| API set | Robotium has an enormous API set, containing methods for clicking
    on views, getting views, and so on. Due to this, Robotium provides more control
    over testing than UI Automator. | UI Automator contains methods to click and get
    views, but implements a different access to these views. |'
  prefs: []
  type: TYPE_TB
- en: '| API-level support | Robotium supports API level 4 and above. | UI Automator
    supports devices with only API level 16 (or above) and doesn''t go back to support
    older API levels; thus, there is no backward compatibility. |'
  prefs: []
  type: TYPE_TB
- en: '| Integration with IDE | Robotium integrates smoothly with Eclipse IDE. | UI
    Automator integration with IDE is cumbersome as you need to manually add the JUnit
    library with `Android.jar` and `uiautomator.jar`, and build it using Ant. |'
  prefs: []
  type: TYPE_TB
- en: '| Web support | Robotium has full support for Web Elements in the application.
    | UI Automator lacks this feature. |'
  prefs: []
  type: TYPE_TB
- en: Calabash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calabash is the cross-platform that enables you to write automated-functional
    acceptance tests for mobile applications, supporting Android and iOS Native apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the difference between Robotium and Calabash in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Features | Robotium | Calabash |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Language | Robotium test cases are written in Java | You don''t need to write
    your tests in Java, you can use a more flexible language **Ruby**, which fits
    better |'
  prefs: []
  type: TYPE_TB
- en: '| Control | Robotium tests need to be controlled from a device | Calabash tests
    can be controlled from a computer instead of a device |'
  prefs: []
  type: TYPE_TB
- en: '| Rotation | Robotium can set the device orientation to Landscape or Portrait
    | Calabash-Android doesn''t mimic the phone rotation to Landscape or Portrait
    |'
  prefs: []
  type: TYPE_TB
- en: So, which is better? Robotium or Calabash? I think both are good. They are still
    being improved and more versions are being released.
  prefs: []
  type: TYPE_NORMAL
- en: You can always use the `android.test.ActivityInstrumentationTestCase2` class
    when neither satisfies your needs.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed, each framework has its pros and cons and is available for different
    needs of the automation testers. As we have seen from the previous comparison,
    Robotium and Calabash are quite popular and are leading all the way in automated
    UI testing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we compared Robotium with different testing frameworks based
    on different factors and came to the conclusion that all the frameworks are used
    according to different needs. No framework is perfect, there are always some pros
    and cons associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into the remote control feature and its usage
    in Robotium.
  prefs: []
  type: TYPE_NORMAL
