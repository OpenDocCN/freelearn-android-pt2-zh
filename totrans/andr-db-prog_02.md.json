["```kt\npublic class StudentTable {\n// EACH STUDENT HAS UNIQUE ID\npublic static final String ID = \"_id\";\n// NAME OF THE STUDENT\npublic static final String NAME = \"student_name\";\n// STATE OF STUDENT'S RESIDENCE\npublic static final String STATE = \"state\";\n// GRADE IN SCHOOL OF STUDENT\npublic static final String GRADE = \"grade\";\n// NAME OF THE TABLE\npublic static final String TABLE_NAME = \"students\";\n}\npublic class CourseTable {\n// UNIQUE ID OF THE COURSE\npublic static final String ID = \"_id\";\n// NAME OF THE COURSE\npublic static final String NAME = \"course_name\";\n// NAME OF THE TABLE\npublic static final String TABLE_NAME = \"courses\";\n}\n// THIS ESSENTIALLY REPRESENTS A MAPPING FROM STUDENTS TO COURSES\npublic class ClassTable {\n// UNIQUE ID OF EACH ROW - NO REAL MEANING HERE\npublic static final String ID = \"_id\";\n// THE ID OF THE STUDENT\npublic static final String STUDENT_ID = \"student_id\";\n// THE ID OF ASSOCIATED COURSE\npublic static final String COURSE_ID = \"course_id\";\n// THE NAME OF THE TABLE\npublic static final String TABLE_NAME = \"classes\";\n}\n\n```", "```kt\npublic class SchemaHelper extends SQLiteOpenHelper {\nprivate static final String DATABASE_NAME = \"adv_data.db\";\n// TOGGLE THIS NUMBER FOR UPDATING TABLES AND DATABASE\nprivate static final int DATABASE_VERSION = 1;\nSchemaHelper(Context context) {\nsuper(context, DATABASE_NAME, null, DATABASE_VERSION);\n}\n@Override\npublic void onCreate(SQLiteDatabase db) {\n// CREATE STUDENTS TABLE\ndb.execSQL(\"CREATE TABLE \" + StudentTable.TABLE_NAME\n+ \" (\" + StudentTable.ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\"\n+ StudentTable.NAME + \" TEXT,\"\n+ StudentTable.STATE + \" TEXT,\"\n+ StudentTable.GRADE + \" INTEGER);\");\n// CREATE COURSES TABLE\ndb.execSQL(\"CREATE TABLE \" + CourseTable.TABLE_NAME + \" (\" + CourseTable.ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\"\n+ CourseTable.NAME + \" TEXT);\");\n// CREATE CLASSES MAPPING TABLE\ndb.execSQL(\"CREATE TABLE \" + ClassTable.TABLE_NAME + \" (\" + ClassTable.ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\"\n+ ClassTable.STUDENT_ID + \" INTEGER,\"\n+ ClassTable.COURSE_ID + \" INTEGER);\");\n}\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\nLog.w(\"LOG_TAG\", \"Upgrading database from version \" + oldVersion + \" to \" + newVersion + \", which will destroy all old data\");\n// KILL PREVIOUS TABLES IF UPGRADED\ndb.execSQL(\"DROP TABLE IF EXISTS \" + StudentTable.TABLE_NAME);\ndb.execSQL(\"DROP TABLE IF EXISTS \" + CourseTable.TABLE_NAME);\ndb.execSQL(\"DROP TABLE IF EXISTS \" + ClassTable.TABLE_NAME);\n// CREATE NEW INSTANCE OF SCHEMA\nonCreate(db);\n}\n}\n\n```", "```kt\npublic class SchemaHelper extends SQLiteOpenHelper {\nprivate static final String DATABASE_NAME = \"adv_data.db\";\n// TOGGLE THIS NUMBER FOR UPDATING TABLES AND DATABASE\nprivate static final int DATABASE_VERSION = 1;\nSchemaHelper(Context context) {\nsuper(context, DATABASE_NAME, null, DATABASE_VERSION);\n}\n@Override\npublic void onCreate(SQLiteDatabase db) {\n...\n}\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n...\n}\n// WRAPPER METHOD FOR ADDING A STUDENT\npublic long addStudent(String name, String state, int grade) {\n// CREATE A CONTENTVALUE OBJECT\nContentValues cv = new ContentValues();\ncv.put(StudentTable.NAME, name);\ncv.put(StudentTable.STATE, state);\ncv.put(StudentTable.GRADE, grade);\n// RETRIEVE WRITEABLE DATABASE AND INSERT\nSQLiteDatabase sd = getWritableDatabase();\nlong result = sd.insert(StudentTable.TABLE_NAME, StudentTable.NAME, cv);\nreturn result;\n}\n// WRAPPER METHOD FOR ADDING A COURSE\npublic long addCourse(String name) {\nContentValues cv = new ContentValues();\ncv.put(CourseTable.NAME, name);\nSQLiteDatabase sd = getWritableDatabase();\nlong result = sd.insert(CourseTable.TABLE_NAME, CourseTable.NAME, cv);\nreturn result;\n}\n// WRAPPER METHOD FOR ENROLLING A STUDENT INTO A COURSE\npublic boolean enrollStudentClass(int studentId, int courseId) {\nContentValues cv = new ContentValues();\ncv.put(ClassTable.STUDENT_ID, studentId);\ncv.put(ClassTable.COURSE_ID, courseId);\nSQLiteDatabase sd = getWritableDatabase();\nlong result = sd.insert(ClassTable.TABLE_NAME, ClassTable.STUDENT_ID, cv);\nreturn (result >= 0);\n}\n}\n\n```", "```kt\npublic class SchemaHelper extends SQLiteOpenHelper {\npublic long addStudent(String name, String state, int grade) {\n}\npublic long addCourse(String name) {\n}\npublic boolean enrollStudentClass(int studentId, int courseId) {\n}\n// GET ALL STUDENTS IN A COURSE\npublic Cursor getStudentsForCourse(int courseId) {\nSQLiteDatabase sd = getWritableDatabase();\n// WE ONLY NEED TO RETURN STUDENT IDS\nString[] cols = new String[] { ClassTable.STUDENT_ID };\nString[] selectionArgs = new String[] { String.valueOf(courseId) };\n// QUERY CLASS MAP FOR STUDENTS IN COURSE\nCursor c = sd.query(ClassTable.TABLE_NAME, cols, ClassTable.COURSE_ID + \"= ?\", selectionArgs, null, null, null);\nreturn c;\n}\n// GET ALL COURSES FOR A GIVEN STUDENT\npublic Cursor getCoursesForStudent(int studentId) {\nSQLiteDatabase sd = getWritableDatabase();\n// WE ONLY NEED TO RETURN COURSE IDS\nString[] cols = new String[] { ClassTable.COURSE_ID };\nString[] selectionArgs = new String[] { String.valueOf(studentId) };\nCursor c = sd.query(ClassTable.TABLE_NAME, cols, ClassTable.STUDENT_ID + \"= ?\", selectionArgs, null, null, null);\nreturn c;\n}\npublic Set<Integer> getStudentsByGradeForCourse(int courseId, int grade) {\nSQLiteDatabase sd = getWritableDatabase();\n// WE ONLY NEED TO RETURN COURSE IDS\nString[] cols = new String[] { ClassTable.STUDENT_ID };\nString[] selectionArgs = new String[] { String.valueOf(courseId) };\n// QUERY CLASS MAP FOR STUDENTS IN COURSE\nCursor c = sd.query(ClassTable.TABLE_NAME, cols, ClassTable.COURSE_ID + \"= ?\", selectionArgs, null, null, null);\nSet<Integer> returnIds = new HashSet<Integer>();\nwhile (c.moveToNext()) {\nint id = c.getInt(c.getColumnIndex\n(ClassTable.STUDENT_ID));\nreturnIds.add(id);\n}\n// MAKE SECOND QUERY\ncols = new String[] { StudentTable.ID };\nselectionArgs = new String[] { String.valueOf(grade) };\nc = sd.query(StudentTable.TABLE_NAME, columns, StudentTable.GRADE + \"= ?\", selectionArgs, null, null, null);\nSet<Integer> gradeIds = new HashSet<Integer>();\nwhile (c.moveToNext()) {\nint id = c.getInt(c.getColumnIndex(StudentTable.ID));\ngradeIds.add(id);\n}\n// RETURN INTERSECTION OF ID SETS\nreturnIds.retainAll(gradeIds);\nreturn returnIds;\n}\n}\n\n```", "```kt\npublic Cursor query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy)\n\n```", "```kt\npublic Cursor query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)\npublic Cursor query(boolean distinct, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)\n\n```", "```kt\nCursor c = sd.query(ClassTable.TABLE_NAME, cols, ClassTable.COURSE_ID + \"= ?\", selectionArgs, null, null, null);\n\n```", "```kt\nWHERE course_id = ?\n\n```", "```kt\npublic class SchemaHelper extends SQLiteOpenHelper {\npublic Cursor getStudentsForCourse(int courseId) {\n...\n}\npublic Cursor getCoursesForStudent(int studentId) {\n...\n}\npublic Set<Integer> getStudentsAndGradeForCourse(int courseId, int grade) {\n...\n}\n// METHOD FOR SAFELY REMOVING A STUDENT\npublic boolean removeStudent(int studentId) {\nSQLiteDatabase sd = getWritableDatabase();\nString[] whereArgs = new String[] { String.valueOf(studentId) };\n// DELETE ALL CLASS MAPPINGS STUDENT IS SIGNED UP FOR\nsd.delete(ClassTable.TABLE_NAME, ClassTable.STUDENT_ID + \"= ? \", whereArgs);\n// THEN DELETE STUDENT\nint result = sd.delete(StudentTable.TABLE_NAME, StudentTable.ID + \"= ? \", whereArgs);\nreturn (result > 0);\n}\n// METHOD FOR SAFELY REMOVING A STUDENT\npublic boolean removeCourse(int courseId) {\nSQLiteDatabase sd = getWritableDatabase();\nString[] whereArgs = new String[] { String.valueOf(courseId) };\n// MAKE SURE YOU REMOVE COURSE FROM ALL STUDENTS ENROLLED\nsd.delete(ClassTable.TABLE_NAME, ClassTable.COURSE_ID + \"= ? \", whereArgs);\n// THEN DELETE COURSE\nint result = sd.delete(CourseTable.TABLE_NAME, CourseTable.ID + \"= ? \", whereArgs);\nreturn (result > 0);\n}\n}\n\n```", "```kt\npublic class SchemaActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nSchemaHelper sh = new SchemaHelper(this);\n// ADD STUDENTS AND RETURN THEIR IDS\nlong sid1 = sh.addStudent(\"Jason Wei\", \"IL\", 12);\nlong sid2 = sh.addStudent(\"Du Chung\", \"AR\", 12);\nlong sid3 = sh.addStudent(\"George Tang\", \"CA\", 11);\nlong sid4 = sh.addStudent(\"Mark Bocanegra\", \"CA\", 11);\nlong sid5 = sh.addStudent(\"Bobby Wei\", \"IL\", 12);\n// ADD COURSES AND RETURN THEIR IDS\nlong cid1 = sh.addCourse(\"Math51\");\nlong cid2 = sh.addCourse(\"CS106A\");\nlong cid3 = sh.addCourse(\"Econ1A\");\n// ENROLL STUDENTS IN CLASSES\nsh.enrollStudentClass((int) sid1, (int) cid1);\nsh.enrollStudentClass((int) sid1, (int) cid2);\nsh.enrollStudentClass((int) sid2, (int) cid2);\nsh.enrollStudentClass((int) sid3, (int) cid1);\nsh.enrollStudentClass((int) sid3, (int) cid2);\nsh.enrollStudentClass((int) sid4, (int) cid3);\nsh.enrollStudentClass((int) sid5, (int) cid2);\n// GET STUDENTS FOR COURSE\nCursor c = sh.getStudentsForCourse((int) cid2);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(ClassTable.STUDENT_ID);\nint sid = c.getInt(colid);\nSystem.out.println(\"STUDENT \" + sid + \" IS ENROLLED IN COURSE \" + cid2);\n}\n// GET STUDENTS FOR COURSE AND FILTER BY GRADE\nSet<Integer> sids = sh.getStudentsByGradeForCourse ((int) cid2, 11);\nfor (Integer sid : sids) {\nSystem.out.println(\"STUDENT \" + sid + \" OF GRADE 11 IS ENROLLED IN COURSE \" + cid2);\n}\n}\n}\n\n```", "```kt\npublic class SchemaActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nSchemaHelper sh = new SchemaHelper(this);\nlong sid1 = sh.addStudent(\"Jason Wei\", \"IL\", 12);\n// GET CLASSES I'M TAKING\nc = sh.getCoursesForStudent((int) sid1);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(ClassTable.COURSE_ID);\nint cid = c.getInt(colid);\nSystem.out.println(\"STUDENT \" + sid1 + \" IS ENROLLED IN COURSE \" + cid);\n}\n// TRY REMOVING A COURSE\nsh.removeCourse((int) cid1);\nSystem.out.println(\"------------------------------\");\n// SEE IF REMOVAL KEPT SCHEMA CONSISTENT\nc = sh.getCoursesForStudent((int) sid1);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(ClassTable.COURSE_ID);\nint cid = c.getInt(colid);\nSystem.out.println(\"STUDENT \" + sid1 + \" IS ENROLLED IN COURSE \" + cid);\n}\n}\n}\n\n```", "```kt\nadb shell\n\n```", "```kt\nadb –s emulator-xxxx shell\n\n```", "```kt\n# sqlite3 /data/data/<your-package-path>/databases/<your-database>.db\n\n```", "```kt\n# sqlite3 /data/data/jwei.apps.dataforandroid/databases/adv_data.db\n\n```"]