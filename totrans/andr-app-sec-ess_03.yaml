- en: Chapter 3. Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Permissions are the focus of this chapter. They are an integral part of an Android
    application and almost all application developers and users will encounter them
    at one time or the other. As we discussed in [Chapter 1](ch01.html "Chapter 1. The
    Android Security Model – the Big Picture"), *Android Security Model – the Big
    Picture*, install time application review is the most important security gate.
    This step is an all or nothing decision by the user; a user either accepts all
    the listed permissions or declines to download the app. So, as a user of an Android
    phone, it is important to understand permissions to make prudent decisions about
    which application to install. Permissions form the basis for securing components
    and protecting user data.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter begins with an introduction of an existing permission in the Android
    system. We discuss the four permission protection levels namely Normal, Dangerous,
    Signature, and SignatureOrSystem. Then, we will discuss about how to secure an
    application and its components using permissions. Next, we learn how to extend
    the permission model by adding user defined permissions. This section will discuss
    permission groups, permission trees, and the syntax to create a new permission
    in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Permission protection levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the application level, Android security is based on permissions. Using this
    permission-based model, the Android system protects system resources, such as
    camera and Bluetooth, and application resources, such as files and components.
    An application should have privileges to act upon or use these resources. Any
    application intending to use these resources needs to declare to the user that
    it will be accessing these resources. For example, if an application will be sending
    and reading a SMS, it will need to declare `android.permission.SEND_SMS` and `android.permission.READ_SMS`
    in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions are also an effective method for access control between applications.
    An application's manifest file contains a list of permissions. Any external application
    that wishes to access this application's resources should possess these permissions.
    This is discussed in greater detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: All Android permissions are declared as constants in the `Manifest.permission`
    class. However, this class does not mention the type of permission. This can be
    used to check the Android source code. I have tried to list some of these permissions
    in the following sections. The list of permissions keeps changing based on the
    functionality, so it is best to refer to the Android source code for an up-to-date
    listing of permissions. For example, `android.permission.BLUETOOTH` has been around
    since API level 1 but `android.permission.AUTHENTICATE_ACCOUNTS` was added in
    API 5\. You can get information to get the Android source code at [source.android.com](http://source.android.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'All Android permissions lie in one of the four protection levels. Permissions
    of any protection levels need to be declared in the manifest file. Third party
    apps can only use permissions with protection level 0 and 1\. These protection
    levels are discussed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Normal permissions: Permissions in this level (level 0) cannot do much harm
    to the user. They generally do not cost users money, but they might cause users
    some annoyance. When downloading an app, these permissions can be viewed by clicking
    on the **See All** arrow. These permissions are automatically granted to the app.
    For example, permissions `android.permission.GET_PACKAGE_SIZE` and `android.permission.FLASHLIGHT`
    lets the application get the size of any package and access a flashlight respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following is a list of some of the normal permissions that exist in the
    Android system at the time of writing the book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Permissions that are used to set user preferences include:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.EXPAND_STATUS_BAR`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.KILL_BACKGROUND_PROCESSES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_WALLPAPER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_WALLPAPER_HINTS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.VIBRATE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.DISABLE_KEYGUARD`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.FLASHLIGHT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Permissions that allow user to access system or application information include:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.ACCESS_LOCATION_EXTRA_COMMANDS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.ACCESS_NETWORK_STATE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.ACCESS_WIFI_STATE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BATTERY_STATS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.GET_ACCOUNTS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.GET_PACKAGE_SIZE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_SYNC_SETTINGS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_SYNC_STATS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.RECEIVE_BOOT_COMPLETED`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SUBSCRIBED_FEEDS_READ`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_USER_DICTIONARY`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions that users should be asked for carefully include `android.permission.BROADCAST_STICKY`,
    that lets an application send a sticky broadcast which stays alive even after
    the broadcast has been delivered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Dangerous permissions: Permissions in this protection level (level 1) are always
    shown to the user. Granting dangerous permissions to apps allow them to access
    device features and data. These permissions cause user privacy or financial loss.
    For example, granting dangerous permissions, such as `android.permission.ACCESS_FINE_LOCATION`
    and `android.permission.ACCESS_COARSE_LOCATION`, lets an app access the user''s
    location that might be a privacy concern if the app does not need such a capability.
    Similarly, granting an app `android.permission.READ_SMS` and `android.permission.SEND_SMS`
    permission lets an application send and receive SMS which might be a privacy issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At any given point, a user can check the permissions granted to any application
    by going to the settings and selecting the application. Refer to the following
    two images that show the permissions for the Gmail application. The first image
    shows the dangerous permissions that are always displayed to the user. Notice
    the drop-down menu button **Show All**. This option shows all the permissions
    requested by the application. Notice the permission, **Hardware controls**, and
    a normal permission that is not displayed to the user by default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Permission protection levels](img/5603_03_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The following is a list of some of the dangerous permissions in the Android
    system at the time of writing the book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Some dangerous permissions can be costly for the users. For example, an application
    that sends a SMS or subscribes to paid feeds can cause users huge bucks. The following
    are some other examples:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.RECEIVE_MMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.RECEIVE_SMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SEND_SMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SUBSCRIBED_FEEDS_WRITE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Permissions that have the power to change the state of the phone include the
    following. These should be used carefully, as they can make the system unstable,
    cause annoyance, and can also make the system less secure. For example, permission
    to mount and unmount filesystems can change the state of the phone. Any malicious
    application with the permission to record audio can easily eat up phone''s memory
    with garbage audio. The following are some examples:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.MODIFY_AUDIO_SETTINGS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MODIFY_PHONE_STATE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MOUNT_FORMAT_FILESYSTEMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WAKE_LOCK`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_APN_SETTINGS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_CALENDAR`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_CONTACTS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_EXTERNAL_STORAGE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_OWNER_DATA`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_SETTINGS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_SMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_ALWAYS_FINISH`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_ANIMATION_SCALE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_DEBUG_APP`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_PROCESS_LIMIT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_TIME_ZONE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SIGNAL_PERSISTENT_PROCESSES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SYSTEM_ALERT_WINDOW`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some dangerous permissions can be privacy risks. Permissions that let users
    read SMS, logs, and calendar can be easily used by botnets and Trojans to do interesting
    stuff on a command of their remote owners. The following are some other examples:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.MANAGE_ACCOUNTS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MODIFY_AUDIO_SETTINGS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MODIFY_PHONE_STATE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MOUNT_FORMAT_FILESYSTEMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MOUNT_UNMOUNT_FILESYSTEMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.PERSISTENT_ACTIVITY`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.PROCESS_OUTGOING_CALLS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_CALENDAR`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_CONTACTS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_LOGS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_OWNER_DATA`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_PHONE_STATE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_SMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_USER_DICTIONARY`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.USE_CREDENTIALS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Signature permissions: Permissions in this protection level (level 2) allow
    two applications authored by the same developer, access each other''s components.
    This permission is automatically granted to the app if the app being downloaded
    has the same certificate as the application that declared the permission. For
    example, application A defines a permission `com.example.permission.ACCESS_BOOK_STORE`.
    Application B, signed by the same certificate as application A, declares it in
    its manifest file. Since both application A and B have the same certificate, this
    permission is not shown to the user when installing the application B. A user
    can certainly view it, using **See All**. An app can perform really powerful actions
    with this permission of this group. For example, with `android.permission.INJECT_EVENTS`,
    an app can inject events such as keys, touch, and trackball into any application
    and `android.permission.BROADCAST_SMS` can broadcast an SMS acknowledgement. This
    permission defined by the Android systems that lie in this protection group is
    reserved for system apps only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some permissions in this level allow applications to use system level features.
    For example, `ACCOUNT_MANAGER` permission lets the applications use account authenticators
    and BRIK permissions allow the applications to brick the phone. The following
    is a list of some of the signature permissions at the time of writing the book.
    For a complete reference check the Android source code or the `Manifest.permission`
    class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.ACCESS_SURFACE_FLINGER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.ACCOUNT_MANAGER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BRICK`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BIND_INPUT_METHOD`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SHUTDOWN`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_ACTIVITY_WATCHER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_ORIENTATION`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.HARDWARE_TEST`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.UPDATE_DEVICE_STATS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.CLEAR_APP_USER_DATA`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.COPY_PROTECTED_DATA`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.CHANGE_COMPONENT_ENABLED_STATE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.FORCE_BACK`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.INJECT_EVENTS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.INTERNAL_SYSTEM_WINDOW`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MANAGE_APP_TOKENS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some permissions in this level allow applications to send system level broadcasts
    and intents such as broadcasting intents and SMS. These permissions include:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.BROADCAST_PACKAGE_REMOVED`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BROADCAST_SMS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BROADCAST_WAP_PUSH`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other permissions in this level allow applications to access system level data
    that third party applications do not have. These permissions include:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.PACKAGE_USAGE_STATS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.CHANGE_BACKGROUND_DATA_SETTING`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BIND_DEVICE_ADMIN`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.READ_FRAME_BUFFER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.DEVICE_POWER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.DIAGNOSTIC`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.FACTORY_TEST`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.FORCE_STOP_PACKAGES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.GLOBAL_SEARCH_CONTROL`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SignatureOrSystem permissions: As with signature protection level, this permission
    is granted to applications with the same certificate as the application that defined
    the permission. In addition, this protection level includes applications with
    the same certificate as the Android system image. This permission level is mainly
    used for applications that are built by handset manufacturers, carriers, and system
    applications. These permissions are not allowed for third party apps. These permissions
    let apps perform some very powerful functions. For example, the permission `android.permission.REBOOT`
    allows an app to reboot the device. The permission `android.permission.SET_TIME`
    lets an app set system time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of some of the SignatureOrSystem permissions as of the time of writing
    the book is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`android.permission.ACCESS_CHECKIN_PROPERTIES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BACKUP`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BIND_APPWIDGET`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.BIND_WALLPAPER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.CALL_PRIVILEGED`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.CONTROL_LOCATION_UPDATES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.DELETE_CACHE_FILES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.DELETE_PACKAGES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.GLOBAL_SEARCH`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.INSTALL_LOCATION_PROVIDER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.INSTALL_PACKAGES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.MASTER_CLEAR`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.REBOOT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.SET_TIME`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.STATUS_BAR`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_GSERVICES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.permission.WRITE_SECURE_SETTINGS`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Application level permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to apply permissions to the entire application. In the first
    case, an application declares what permissions the application requires to function
    properly. So, an application that will be sending out SMS will declare such permission
    in the manifest file. In the second case, the application can declare what permissions
    other applications trying to interact with this application should have. For example,
    an application can declare that any application that wants to interact with one
    of its components should have permissions to access the camera. Both these kinds
    of permissions have to be declared in the manifest file. Let us go through them
    one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `<uses-permission>` tag is declared inside `<manifest>` and declares what
    permissions the application requests to function properly. The syntax of the tag
    is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The user, when downloading the application, has to accept these permissions.
    `android:name` is the name of the permission. An example declaration of this tag
    is as follows. The following permission declares that the application that the
    user is about to install would access the user''s SMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<application>` tag has an attribute called `android:permission` that declares
    blanket permissions for components. These are the permissions any application
    trying to interact with this application''s components need to have. This is shown
    in the following code. The following code shows that applications interacting
    with any component of `MyApplication` should have permission to access the camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As discussed in the next section, individual components can set permissions
    as well. Component permissions override the permission set using the `<application>`
    tag. The preceding method is the best place to declare the blanket permissions
    for all components.
  prefs: []
  type: TYPE_NORMAL
- en: Component level permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All Android components can be secured using permissions. The following figure
    illustrates this concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Component level permissions](img/5603OT_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's talk about permission declaration and enforcement for each component.
  prefs: []
  type: TYPE_NORMAL
- en: Activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any Activity can be secured by permission, by calling out the permission in
    Activity declaration in the `<activity>` tag. For example, the Activity `OrderActivity`
    with a custom permission `com.example.project.ORDER_BOOK` will be declared as
    follows. Any component that tries to launch `OrderActivity` needs to have this
    custom permission.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In case of activities, permission enforcement happens when launching the Activity,
    by using `Context.startActivity()` and `Context.startActivityForResult()`. In
    case the launching component does not have appropriate permissions, a `SecurityException`
    is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any Service can be protected using permission by listing out the required permissions
    in the `<service>` tag. For example, the Service `FindUsefulSMS` that identifies
    the SMS based on keywords declares a permission `android.permission.READ_SMS`.
    This permission will be declared as follows. Any component that tries to launch
    `FindUsefulSMS` needs to have this permission.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Permission enforcement for a Service is done at the time of launching a Service
    by using `Context.startService()`, stopping a Service by using `Context.stopService()`,
    and binding to a Service by using `Context.bindService()`. In case the requesting
    component does not have the appropriate permissions, a `SecurityException` is
    thrown.
  prefs: []
  type: TYPE_NORMAL
- en: If the Service exposes a binder interface that other applications can bind to,
    caller permissions can be checked when binding to the binder by using `Context.checkCallingPermission()`.
  prefs: []
  type: TYPE_NORMAL
- en: Content Provider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Content providers can be secured with permissions specified in the `<provider>`
    tag. In the following example, any component that wants to talk to the provider
    should have the `android.permission.READ_SMS` permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As discussed in [Chapter 2](ch02.html "Chapter 2. Application Building Blocks"),
    *Application Building Blocks*, the `<provider>` tag also has fine-grained read
    and write permission attributes. To be able to read from a `<provider>` tag, the
    application should have the read permission. This is checked during `ContentResolver.query()`.
    To be able to update, delete, and insert into a provider, a component should have
    read and write permissions. These permissions are checked during `ContentResolver.insert()`,
    `ContentResolver.update()`, and `ContentResolver.delete()`. Failure to have appropriate
    permission will result in `SecurityException` being thrown by the call.
  prefs: []
  type: TYPE_NORMAL
- en: The `<grant-uri-permission>` tag is a child of the `<provider>` tag and is used
    to grant access to some specific data sets of a provider for a limited amount
    of time. Consider an example of an app that saves SMS to a database. Some SMSs
    may have a photo attached to it. For an application to view the SMS correctly,
    it will launch the image viewer, which might not have access to the provider.
    The **URI** (**Universal Resource Identifier**) permissions will let the image
    viewer have read permission for that particular picture. In the previous example,
    where the provider set `android:grantIriPermissions="true"`, the image viewer
    will have read permission to the entire provider. This poses a security risk.
    To give limited access, the provider can declare which parts of the provider it
    wants to be open to the URI permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the URI permission is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The URI permissions are not recursive.
  prefs: []
  type: TYPE_NORMAL
- en: 'What I find most interesting is that we can use wildcards and patterns to define
    which parts of the provider we want to be able to enforce the URI permissions
    to. An example of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Remember to revoke the URI permissions once the task is completed by using `Context.revokeUriPermission()`.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast receiver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Broadcasts can be secured with permissions in two ways. In the first case, the
    receiver protects itself with permissions so it receives only the broadcasts it
    wants to hear. In the other case, a broadcaster selects which receivers can receive
    the broadcast. We will discuss both the scenarios in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Any receiver can be secured by calling out the permission in the receiver declaration
    in the `<receiver>` tag. For example, the receiver `MyListener` declares a permission
    `android.permission.READ_SMS` and this will be declared as follows. `MyListener`
    will receive broadcasts only from broadcasters with the permission `android.permission.READ_SMS`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, sticky broadcasts cannot be protected by permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The required permissions for receiving a broadcast are checked after the broadcast
    intent is delivered, that is, after the call to `Context.sendBroadcast()` returns.
    So, no exception is thrown if the broadcaster does not have the appropriate permissions;
    just that the broadcast will not be delivered. If the receiver is dynamically
    created by using `Context.registerReceiver()`, the permission can be set when
    creating this receiver.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second case, where a broadcaster restricts which receivers can receive
    an intent, is done by using the method `sendBroadcast()`. An example of a broadcast
    that will only be sent to receivers of applications with the `android.permission.READ_SMS`
    permission is defined in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Permissions declared with components are not granted to the application. They
    are permissions that an application whose component is trying to interact with
    it should have.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Android permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers can extend the permission system by adding their own permissions.
    These permissions will be displayed to the user during the time of downloading
    the app, so it is important that they are localized and labeled properly.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new permission
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Developers may choose to add just a new permission or an entire tree of permissions.
    Declaring new permissions is done in the manifest file. To add a new permission,
    an application can declare it by using the `<permission>` tag as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A description of the attributes used in the preceding code snippet for the
    new permission group is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`android:name`: This is the name of the new permission being declared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:description`: This describes the new permission being declared in
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:icon`: This is the permission icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:label`: This is the label displayed to the user at install time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:permissionGroup`: This assigns a permission to a pre-existing user
    defined group or a new group. If no name is specified, permission does not belong
    to any group, which is also fine. I will discuss how to create a permission group
    later in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:protectionLevel`: This specifies the protection level of the new permission.
    These protection levels have been discussed earlier in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example for such permission can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To account for localization and maintenance, it is always better to use a string
    resource than a raw string.
  prefs: []
  type: TYPE_NORMAL
- en: Once you declare a new permission, make sure to declare it in the `<uses-permission>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a permission group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A permission group can be created by using a `<permission-group>` tag. It is
    a logical grouping of permissions and when presenting them to the user, they are
    all presented together. A permission group is created by using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'A description of the attributes used in the preceding code snippet for the
    new permission group is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`android:name`: This is the name of the new permission group. This is the name
    mentioned in the `<permission>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:description`: This describes the new permission group being declared
    in detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:icon`: This is the permission group icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:label`: This is the label to be displayed at the time of install.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of a permission group with permissions for the bookstore can be
    declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating a permission tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If there is a need to arrange permissions as a namespace, such that a permission
    tree can be created, then the application can declare a `<permission-tree>` tag.
    An example of such a tree is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This tag does not define any new permissions, it just creates a namespace for
    you to group permissions. I see this concept being used by developers that have
    multiple applications and all such applications talk to each other. The syntax
    for a `<permission-tree>` tag is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'A description of the attributes used in the preceding code snippet for the
    new permission group is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`android:name`: This is the name of the new permission group. The name should
    have at least three segments separated by a period, for example, `com.example.android`
    is fine, but `com.example` is not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:icon`: This is the permission group icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:label`: This is the label to be displayed to the user at the time
    of install.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example declaration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Permissions are the core of Android application security and this chapter covered
    permissions in detail. We learned the four permission protection levels, how to
    protect the components with permissions, and how to define new permissions. Awareness
    and understanding of the permission model is essential both for developers and
    users of an Android phone. Now that we are armed with the knowledge of components,
    inter-component communication and permissions, let's march to the next chapter
    and learn how to define an application's policy file.
  prefs: []
  type: TYPE_NORMAL
