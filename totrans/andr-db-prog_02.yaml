- en: Chapter 2. Using a SQLite Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 使用SQLite数据库
- en: 'Earlier we were introduced to various methods for storing data on Android data
    ranging from small and simple primitive values to large and complex file types.
    In this chapter, we''ll dive deeper into an extremely powerful and efficient way
    to save and retrieve structured data: namely, by using SQLite databases. For the
    time being, we''ll focus on the versatility and robustness of the SQLite database
    as a local backend for your application, before switching focus in later chapters
    and looking at ways to bind this SQLite backend with the user interface frontend.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们介绍了在Android上存储数据的各种方法，从小型简单的原始值到大型的复杂文件类型。在本章中，我们将深入探讨一种极其强大且高效的方式来保存和检索结构化数据：即使用SQLite数据库。目前，我们将关注SQLite数据库的灵活性和健壮性，将其作为应用程序的本地后端，在后续章节中，我们再关注如何将这个SQLite后端与用户界面前端绑定。
- en: Creating advanced SQLite schemas
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建高级SQLite模式
- en: 'In the previous chapter, we ran through a simple example of creating and using
    a table with two fields: an integer ID field and a String name field. However,
    oftentimes the database schema that your application will need will require much
    more than one table. And so, now that you suddenly need multiple tables, some
    potentially dependent on one another, how can you effectively leverage the `SQLiteOpenHelper`
    class to make the development of the application clean and straightforward without
    compromising the robustness of your schema? Let''s walk through an example together
    to tackle this problem!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过一个简单的例子了解了如何创建和使用包含两个字段的表：一个整数ID字段和一个字符串名称字段。然而，你的应用程序所需的数据库模式通常会比一个表复杂得多。因此，当你突然需要多个表，有些可能还相互依赖时，如何有效地利用`SQLiteOpenHelper`类来使应用程序的开发保持清晰和直接，同时又不损害模式的健壮性呢？让我们通过一个例子一起来解决这个问题！
- en: 'Consider a simple schema with three tables: the first a `Students` table with
    fields ID, name, state, and grade, and the second a `Courses` table with fields
    ID, and name, and the third a `Classes` table with fields ID, student ID, and
    course ID. What we''re going to try and create is a schema where we can add/remove
    students, add/remove courses, and enroll/drop students from different courses.
    Some of the challenges we can immediately think of are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含三个表的简单模式：第一个是`Students`表，包含字段ID、姓名、状态和年级；第二个是`Courses`表，包含字段ID和名称；第三个是`Classes`表，包含字段ID、学生ID和课程ID。我们将尝试创建一个模式，在这个模式中，我们可以添加/移除学生，添加/移除课程，以及注册/退选不同课程的学生。我们可以立即想到的一些挑战如下：
- en: How do we obtain simple analytics, such as number of students per course?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何获得简单的分析，比如每个课程的学生人数？
- en: What happens when we drop a course with students in it?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们删除一个还有学生的课程时会发生什么？
- en: What happens when we remove a student who is enrolled in courses?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们移除一个已选课的学生时会发生什么？
- en: 'On that note, let''s go straight into the code. We begin by defining the schema
    with a couple of classes:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，让我们直接进入代码。我们从定义几个类的模式开始：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here''s the code for creating the database schema (this should look very
    similar to what we saw earlier):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建数据库模式的代码（这应该和我们之前看到的非常相似）：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So here we see that in our `onCreate()` method we execute SQL commands to create
    all three tables, and furthermore, in the `onUpgrade()` method we execute SQL
    commands that drop all three tables and subsequently recreate all three tables.
    Of course, since we are overriding the `SQLiteOpenHelper` class, in theory we
    can customize the behavior of these methods in any way we want (for instance,
    some developer's might not want to drop the entire schema in the `onUpgrade()`
    method), but for now let's keep the functionality simple.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这里我们看到，在我们的`onCreate()`方法中，我们执行SQL命令来创建所有三个表，而且，在`onUpgrade()`方法中，我们执行SQL命令来删除所有三个表，随后重新创建所有三个表。当然，由于我们重写了`SQLiteOpenHelper`类，理论上我们可以按照自己的方式定制这些方法的行为（例如，一些开发者可能不希望在`onUpgrade()`方法中删除整个模式），但现在让我们保持功能简单。
- en: At this point, for those who are well versed in SQL programming and database
    schemas, you might be wondering if it's possible to add triggers and key constraints
    to your SQLite database schemas. The answer is, "yes, you can use triggers but
    no, you cannot use foreign key constraints." In any case, to spend any time on
    writing and implementing triggers would be deviating too much from the core content
    of this book, and so I chose to omit that discussion (though these could certainly
    be helpful even in our simple example).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，对于那些精通SQL编程和数据库模式的读者，您可能想知道是否可以向SQLite数据库模式中添加触发器和键约束。答案是：“是的，您可以使用触发器，但不行，您不能使用外键约束。”无论如何，花时间编写和实施触发器将偏离本书的核心内容，因此我选择省略这一讨论（尽管这些在我们的简单示例中也可能非常有帮助）。
- en: Now that we have our schema created, before moving on to designing all kinds
    of complex queries for pulling different groups of data (this we'll see in the
    next chapter), it's time to write some wrapper methods. This will help us to address
    some of the questions mentioned previously, which will ultimately help us in creating
    a robust database.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建好了模式，在开始设计各种复杂查询以提取不同的数据组之前（我们将在下一章看到这些内容），是时候编写一些包装方法了。这将帮助我们解决之前提到的一些问题，最终帮助我们创建一个健壮的数据库。
- en: Wrappers for your SQLite database
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的SQLite数据库提供包装方法
- en: So we have this somewhat complicated schema in front of us now, and earlier
    we mentioned the questions of what would happen if we removed a student who is
    enrolled in courses, and vice versa what would happen if we dropped a course with
    multiple students enrolled in it? Certainly, we wouldn't want either case to happen
    - in the first, we'd have courses filled with students who are no longer even
    enrolled in the university, and in the second, we'd have students showing up for
    courses that are no longer even being offered!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们面前有一个相当复杂的模式，之前我们提到过，如果我们移除一个已选课的学生会发生什么，反之，如果我们删除一个有多个学生选课的课程会发生什么？显然，我们不想出现任何一种情况——在第一种情况下，我们会有充满已不再就读于大学的学生课程，而在第二种情况下，我们会遇到学生参加已经不再提供的课程！
- en: 'And so it''s time to enforce some of these rules and we''ll do this by adding
    some convenient methods to our `SchemaHelper` class. Again, some of these rules
    could be enforced by using trigger statements (remember that Android''s SQLite
    database doesn''t support key constraints), but one of the benefits of using wrapper
    methods is that they are much more intuitive to developers who may be new to your
    application''s code base. By using a wrapper class, a developer is able to safely
    interact with a database whose schema the developer may know very little about.
    Now, let''s start by tackling the simple wrappers:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，是时候实施一些这些规则了，我们将通过向我们的`SchemaHelper`类添加一些方便的方法来实现这一点。同样，这些规则可以通过使用触发语句来实施（记住，Android的SQLite数据库不支持键约束），但使用包装方法的好处在于，它们对于可能刚接触应用程序代码库的开发人员来说更加直观。通过使用包装类，开发人员可以安全地与可能对其模式知之甚少的数据库进行交互。现在，让我们从简单的包装方法开始：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we have three simple wrapper methods for adding data into our schema. The
    first two involve adding new students and new courses into the database and the
    last one involves adding a new mapping between a student (represented by his/her
    ID) and a course (essentially, we are enrolling a student into a course through
    this mapping). Notice that in each wrapper method, we''re simply adding the values
    into a `ContentValue` object, retrieving the writeable SQLite database, and then
    inserting this `ContentValue` as a new row into the specified table. Next, let''s
    write some wrapper methods for retrieving data:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了三个向模式中添加数据的简单包装方法。前两个涉及向数据库中添加新学生和新课程，最后一个涉及在学生（由他的/她的ID表示）和课程之间添加新的映射（本质上，我们是通过这个映射将学生注册到课程中）。注意，在每个包装方法中，我们只是将值添加到`ContentValue`对象中，获取可写的SQLite数据库，然后将这个`ContentValue`作为新行插入到指定的表中。接下来，让我们编写一些用于检索数据的包装方法：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here we have three fairly similar methods which allow us to get very practical
    datasets from our schema:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有三个相当类似的方法，它们允许我们从模式中获得非常实用的数据集：
- en: Being able to grab a list of students in a given course
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够获取给定课程的学生列表
- en: Being able to grab a list of courses for a given student
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够获取给定学生的课程列表
- en: Lastly (just to add some complexity), being able to grab a list of students
    of a certain grade for a given course
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后（为了增加一些复杂性），能够获取给定课程特定年级的学生列表
- en: 'Note that in all three methods we begin to play with some of the parameters
    in the `SQLiteDatabase` object''s `query()` method, and so now seems like a great
    time to take a closer look at what those parameters are and what exactly we did
    previously:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在所有三种方法中，我们开始尝试`SQLiteDatabase`对象的`query()`方法中的一些参数，所以现在似乎是仔细看看这些参数是什么以及我们之前到底做了什么的好时机：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And alternatively:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And just for simplicity, here''s how we''re calling the previous method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '为了简单起见，以下是调用上一个方法的方式： '
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So a quick explanation of the three methods. The first `query()` method is
    the standard one, where you specify the table in the first argument and then which
    columns you want to return in the second argument. This is equivalent to performing
    a `SELECT` statement in standard SQL. Then, in the third argument we begin to
    filter our query and the syntax for these filters is equivalent to including a
    `WHERE` clause at the end of our `SELECT` query. In our example, we see that we
    only ask to return the column containing student IDs, as this is the only column
    we care about (since we''re filtering on the course ID column, it would be unnecessarily
    redundant to return this column as well). Then, in the filter parameter, we ask
    to filter by the course ID and the syntax is equivalent to passing in the following
    String:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里快速解释一下这三种方法。第一个`query()`方法是标准方法，你首先在第一个参数中指定表，然后在第二个参数中指定要返回的列。这相当于在标准SQL中执行一个`SELECT`语句。然后，在第三个参数中我们开始过滤我们的查询，这些过滤器的语法等同于在`SELECT`查询的末尾包含一个`WHERE`子句。在我们的示例中，我们只要求返回包含学生ID的列，因为这是我们唯一关心的列（由于我们按课程ID列进行过滤，因此返回此列将是不必要的重复）。然后，在过滤参数中，我们要求按课程ID进行过滤，其语法等同于传入以下字符串：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, the question mark acts as a place card for whatever value we will pass
    into the filter. In other words, the format of the `WHERE` statement is there,
    but we just need to substitute into the question mark the actual value we want
    to filter by. In this case, we pass into the fourth parameter the given course
    ID.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，问号充当占位符，代表我们将要传递到过滤器的任何值。换句话说，`WHERE`语句的格式已经存在，但我们只需要将实际的过滤值替换到问号中。在这种情况下，我们将给定的课程ID传递到第四个参数中。
- en: 'The last three arguments (`groupBy`, `having`, and `orderBy)` should make a
    lot of sense for those familiar with SQL, but for those who aren''t, here''s a
    quick explanation of each:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后三个参数（`groupBy`、`having`和`orderBy`）对于熟悉SQL的人来说应该很有意义，但对于那些不熟悉的人，以下是每个参数的快速解释：
- en: '`groupBy` - adding this will allow you to group the results by a specified
    column(s). This would come in handy if you needed to obtain, say, a table with
    course IDs and the number of students enrolled in that course: simply grouping
    by course ID in the `Class` table would accomplish this.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupBy` - 添加这个功能可以让你按照指定的列对结果进行分组。如果你需要获取例如课程ID和该课程学生数量的表格，这个功能将非常有用：只需在`Class`表中按课程ID分组即可实现这一点。'
- en: '`having` - used in conjunction with a `groupBy` clause, this clause allows
    you to filter the aggregated results. Say you grouped by course ID in the `Class`
    table and wanted to filter out all classes with having less than 10 students enrolled,
    you could accomplish this with the `having` clause.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`having` - 与`groupBy`子句结合使用，这个子句允许你过滤聚合后的结果。假设你在`Class`表中按课程ID分组，并希望过滤掉所有注册学生少于10人的班级，你可以使用`having`子句来实现这一点。'
- en: '`orderBy` - a fairly straightforward clause to use, the `orderBy` clause allows
    us to sort our query''s resulting sub table by a specified column(s) and by ascending
    or descending order. For instance, say you wanted to sort the `Students` table
    by grade and then by name — specifying an `orderBy` clause would allow you to
    do this.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderBy` - 这是一个相当直观的子句，`orderBy`子句允许我们按指定列（们）以及升序或降序对查询结果子表进行排序。例如，假设你想按成绩和姓名对`Students`表进行排序——指定一个`orderBy`子句将允许你这样做。'
- en: Lastly, in the two `query()` variants, you'll see the added parameters `limit`
    and `distinct:` the `limit` parameter allows you to limit how many rows you want
    back, and the `distinct` boolean allows you to specify whether you only want to
    return distinct rows. If this still doesn't make too much sense to you, no fears
    - we'll focus on building complex queries in the next chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在两个`query()`变体中，你会看到增加了`limit`和`distinct`参数：`limit`参数允许你限制返回的行数，而`distinct`布尔值允许你指定是否只返回唯一的行。如果这些对你来说还是不太明白，不用害怕——我们将在下一章重点介绍构建复杂查询。
- en: 'Now that we understand how the `query()` method works, let''s revisit our earlier
    example and flush out the `getStudentsByGradeForCourse()` method. Though there
    are many ways to execute this method, conceptually they are all very similar:
    first, we query for all the students in the given course, and then of these students
    we want to filter and only keep those in the specified grade. The way I implemented
    it was by first obtaining a set of all student IDs from the given course, then
    obtaining a set of all the students for the given grade, and simply returning
    the intersection of those two sets. As for whether or not this is the optimal
    implementation simply depends on the size of your database.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经理解了`query()`方法的工作原理，让我们回顾一下之前的例子，并详细阐述`getStudentsByGradeForCourse()`方法。尽管执行这个方法有很多种方式，但从概念上讲它们都非常相似：首先，我们查询给定课程的所有学生，然后在这些学生中筛选并只保留指定年级的学生。我的实现方式是首先从给定课程获取所有学生ID的集合，然后获取给定年级的所有学生的集合，并简单地返回这两个集合的交集。至于这是否是最优实现，完全取决于你的数据库大小。
- en: 'And now, last but not least, let''s enforce those removal rules mentioned earlier
    with some special remove wrapper methods:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后但同样重要的是，让我们通过一些特殊的移除包装方法来加强之前提到的移除规则：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So here we have two remove methods, and in each one we manually enforce some
    schema rules by preventing someone from dropping a course without first removing
    those courses from the `Class` mapping table and vice versa. We call the `SQLiteDatabase`
    class's `delete()` method which, much like the `query()` method, allows you to
    pass in the table name, specify a filter argument (that is, a `WHERE` clause),
    and then allows you to pass in those filters' values (note that in both the `delete()`
    and `query()` methods, you can specify multiple filters, but more on this later).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有两个移除方法，在每一个方法中，我们通过阻止有人在从`Class`映射表中先移除这些课程之前取消课程，以及反之亦然，手动实施一些模式规则。我们调用`SQLiteDatabase`类的`delete()`方法，这个方法与`query()`方法类似，允许你传入表名，指定一个过滤参数（即一个`WHERE`子句），然后允许你传入这些过滤器的值（注意，在`delete()`和`query()`方法中，你可以指定多个过滤器，但关于这一点稍后会详细介绍）。
- en: 'Finally, let''s put these methods in action and implement an `Activity` class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们将这些方法付诸实践，并实现一个`Activity`类：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So first we add some dummy data into our schema; in my case, I will add five
    students and three courses, and then enroll those students into some classes.
    Once the schema has some data in it, I will try out some methods and first request
    all the students signed up for CS106A. Afterwards, I will test another wrapper
    method we wrote and request all the students signed up for CS106A, but this time
    only those students in grade 11\. And so the output from running this `Activity`
    is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在模式中添加一些虚拟数据；在我这个案例中，我会添加五个学生和三门课程，然后将这些学生报名到一些课程中。当模式中有了数据后，我会尝试一些方法，并首先请求所有报名CS106A的学生。之后，我会测试我们编写的另一个包装方法，并请求所有11年级报名CS106A的学生。以下是运行这个`Activity`的输出结果：
- en: '![Wrappers for your SQLite database](img/8123OS_02_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![为您的SQLite数据库提供包装器](img/8123OS_02_01.jpg)'
- en: 'And voila! We quickly see that Students 1, 2, 3, and 5 were all enrolled in
    CS106A. However, after filtering by grade 11, we see that Student 3 is the only
    one signed up for CS106A in grade 11 - poor George. Now let''s test out the remove
    methods:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 看吧！我们很快发现学生1、2、3和5都报名了CS106A。然而，在按11年级筛选后，我们发现只有学生3在11年级报名了CS106A —— 可怜的乔治。现在让我们测试一下移除方法：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This time around, we first ask for all the classes that Student 1 (myself)
    is enrolled in. But oh no! Something happened to Math51 this quarter and so it
    was cancelled! We remove the course and make another request to look at all the
    classes that Student 1 is – enrolled in expecting to see that Math51 has been
    removed from the list. The output is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们首先查询学生1（我自己）所报名的所有课程。但是哎呀！这个季度数学51出了点问题，所以被取消了！我们删除这门课程，并再次请求查看学生1所——报名的所有课程，期待看到数学51已经从列表中移除。输出结果如下：
- en: '![Wrappers for your SQLite database](img/8123OS_02_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![为您的SQLite数据库提供包装器](img/8123OS_02_02.jpg)'
- en: Indeed, we see that at first I was enrolled in both Math51 and CS106A, but after
    the course was removed, I'm not only enrolled in CS106A! By putting wrappers around
    some of these common insert, get, and remove functions, we can both simplify our
    development lives going forward while also enforcing certain schema rules.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可以看到一开始我同时选了Math51和CS106A，但课程移除后，我不仅仅只选了CS106A！通过对这些常见的插入、获取和删除函数进行封装，我们既可以简化未来的开发工作，同时也可以强制实施某些架构规则。
- en: Finally, let's conclude this chapter with how you can hook into a SQLite terminal
    to look at your data in table form and also issue SQLite queries - something extremely
    useful when debugging your application and making sure that your data is being
    added/updated/removed correctly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们通过介绍如何连接到SQLite终端以表格形式查看你的数据以及发送SQLite查询来结束本章内容——这在调试你的应用程序并确保你的数据被正确添加/更新/删除时非常有用。
- en: Debugging your SQLite database
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试你的SQLite数据库
- en: The Android platform provides you with a very powerful debugging friend called
    the **Android Debug Bridge (adb)**. The adb shell is a versatile command-line
    interface that allows you to communicate with a running emulator or a connected
    Android device. The adb tool can be found in your SDK's/platform-tools directory
    and, once, started is capable of doing everything from installing applications,
    to pushing and pulling data from your emulator, to plugging into your sqlite3
    database and issuing queries (see the developer docs [http://developer.android.com/guide/developing/tools/adb.html](http://developer.android.com/guide/developing/tools/adb.html)
    for more details).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Android平台为你提供了一个非常强大的调试工具，名为**Android Debug Bridge (adb)**。adb shell是一个多功能的命令行接口，可以让你与正在运行的模拟器或连接的Android设备进行通信。adb工具可以在你的SDK的/platform-tools目录中找到，一旦启动，它就能做到从安装应用程序，到从模拟器推送和拉取数据，再到连接到sqlite3数据库并发送查询（更多详情请见开发者文档[http://developer.android.com/guide/developing/tools/adb.html](http://developer.android.com/guide/developing/tools/adb.html)）。
- en: 'In order to use adb, simply open your terminal and navigate to `/<your-sdk-directory>/platform-tools/`
    and type the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用adb，只需打开你的终端，导航到 `/<你的-sdk-目录>/platform-tools/` 并输入以下命令：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'or type the following command if you want to target a specific emulator to
    connect to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要连接到特定的模拟器，可以输入以下命令：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'At this point, you should have started the adb tool, at which point you need
    to tell it to connect to the emulator''s sqlite3 database. This can be done by
    issuing the command sqlite3 and then passing the path to your application''s database
    file as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，你应该已经启动了adb工具，这时你需要告诉它连接到模拟器的sqlite3数据库。可以通过发出sqlite3命令，然后传递到你的应用程序的数据库文件路径，如下所示：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In our case, the command looked like the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，命令如下所示：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And at this point, we should be able to issue all kinds of SQL queries that
    allow us to do everything from looking at our database schema to updating and
    removing individual rows of data in any of our tables. Some sample commands that
    you''ll probably find most useful are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们应该能够发出各种SQL查询，从查看数据库架构到更新和删除我们任何表中的单个数据行。以下是一些你可能觉得最有用的示例命令：
- en: '`.tables` shows you a list of all the tables in your database'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.tables` 显示你数据库中的所有表'
- en: '`.output FILENAME` allows you to output the results of a query into a file
    (say, for further analysis)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.output FILENAME` 允许你将查询结果输出到文件中（例如，用于进一步分析）'
- en: '`.mode MODE` allows you to specify the output file format (that is, as a CSV,
    HTML, and so on, could be useful for spreadsheet type analytics)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.mode MODE` 允许你指定输出文件格式（即CSV、HTML等，对于电子表格类型的分析可能很有用）'
- en: '`SELECT * FROM table_name` standard query for selecting all columns of a given
    table (this is equivalent to a `get()` command for rows of a table)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT * FROM table_name` 是选择给定表所有列的标准查询（这相当于表的行执行 `get()` 命令）'
- en: '`SELECT * FROM table_name WHERE col = ''value''` standard query for selecting
    all columns of a given table but with a column filter'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT * FROM table_name WHERE col = ''value''` 是选择给定表的所有列但带有列筛选的标准查询'
- en: '`SELECT col1, col2 FROM table_name` standard query for selecting specific columns
    of a given table'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT col1, col2 FROM table_name` 是选择给定表特定列的标准查询'
- en: 'And here''s an example of us putting some of these commands to use with our
    previous schema:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们使用之前架构中的一些命令的例子：
- en: '![Debugging your SQLite database](img/8123OS_02_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![调试你的SQLite数据库](img/8123OS_02_03.jpg)'
- en: Hopefully this should get you going, but for a full list of sqlite3 commands
    just check out [http://www.sqlite.org/sqlite.html](http://www.sqlite.org/sqlite.html),
    and for a more extensive list of complex queries just stay put - it's coming up
    next.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能帮助您开始，但若要获取sqlite3命令的完整列表，请查看[http://www.sqlite.org/sqlite.html](http://www.sqlite.org/sqlite.html)，若要获取更详尽的复杂查询列表，请稍等片刻——接下来将会介绍。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章概要
- en: In this chapter, we went from a super bare-bones database schema that just contained
    one table to an entire schema containing multiple interdependent tables. We first
    saw how to create and upgrade multiple tables through overriding the `SQLiteOpenHelper`
    class, and then thought about some of the challenges surrounding a database schema
    with interdependencies. We decided to tackle these challenges by surrounding our
    database schema and its tables with an army of wrapper methods, designed for both
    ease of future development, as well as robustness in future data. These wrapper
    methods included everything from simple add methods, helpful as we were able to
    conceal the need to constantly request a writeable `SQLiteDatabase`, to more complex
    remove methods which concealed all of the functionality needed for enforcing various
    schema rules.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从仅包含一个表的超级基础数据库架构，发展到了包含多个相互依赖的表的完整架构。我们首先了解了如何通过重写`SQLiteOpenHelper`类来创建和升级多个表，然后考虑了围绕具有相互依赖关系的数据库架构的一些挑战。我们决定通过围绕我们的数据库架构及其表创建一系列包装方法来应对这些挑战，这些方法旨在便于未来的开发，同时也确保未来数据的健壮性。这些包装方法包括从简单的添加方法（因为我们能够隐藏不断请求可写`SQLiteDatabase`的需求），到更复杂的删除方法，隐藏了实施各种架构规则所需的所有功能。
- en: Then, we actually implemented an `Activity` class to show off our new database
    schema and ran through some sample database commands to test their functionality.
    Though we were able to validate and output the results of all our commands, we
    realized that this was a pretty verbose and suboptimal way for debugging our sqlite3
    database, and so we looked into the Android Debug Bridge (adb) tool. With the
    adb tool, we were able to open a command-line terminal that then hooked into a
    running instance of an emulator or Android device, and subsequently, connect to
    that emulator/device's sqlite3 database. Here we were able to interact with the
    sqlite3 database in a very natural way by issuing various SQL commands and queries.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们实际实现了一个`Activity`类来展示我们的新数据库架构，并运行了一些示例数据库命令以测试其功能。尽管我们能够验证和输出所有命令的结果，但我们意识到这对于调试我们的sqlite3数据库来说相当冗长且不是最佳方式，因此我们研究了Android调试桥（adb）工具。通过adb工具，我们能够打开一个命令行终端，进而连接到正在运行的模拟器或Android设备实例，随后连接到该模拟器/设备的sqlite3数据库。在这里，我们可以通过发出各种SQL命令和查询，以非常自然的方式与sqlite3数据库进行交互。
- en: Now, the queries that we've seen so far have been pretty elementary, but if
    necessary, will do the trick for the majority of your application development
    needs. However, we'll see in the next chapter that by mastering more advanced
    SQL query concepts, we can enjoy both a substantial performance boost as well
    as a substantial memory boost in our application!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们迄今为止所见到的查询相当基础，但在必要时，它们将满足大多数应用程序开发的需求。然而，我们将在下一章看到，通过掌握更高级的SQL查询概念，我们可以在应用程序中获得显著的性能提升和内存提升！
