["```kt\n    #define RADIO_POLL_PERIOD 100\n    #define PLAY_BUTTON 12\n    #define KNOB_VOLUME A0\n    #define KNOB_TUNER A1\n    ```", "```kt\n    boolean playback = true;\n    int buttonRead = LOW;\n    int previousRead = LOW;\n    int tuner = 0;\n    int volume = 0;\n    ```", "```kt\n    void setup() {\n      pinMode(PLAY_BUTTON, INPUT);\n      Serial.begin(115200);\n    }\n    ```", "```kt\n    void readData() {\n      buttonRead = digitalRead(PLAY_BUTTON);\n      if (buttonRead == HIGH && previousRead != buttonRead) {\n        playback = !playback;\n      }\n      previousRead = buttonRead;\n      tuner = analogRead(KNOB_TUNER);\n      volume = analogRead(KNOB_VOLUME);\n    }\n    ```", "```kt\n    void loop() {\n      readData();\n      Serial.print(\"Playing music: \");\n      Serial.println(playback);\n      Serial.print(\"Radio station: \");\n      Serial.println(tuner);\n      Serial.print(\"Volume: \");\n      Serial.println(volume);\n      delay(RADIO_POLL_PERIOD);\n    }\n    ```", "```kt\n    #define KNOB_TUNER A1\n    #define STATIONS 5\n    #define MAX_ANALOG_READ 1024.0\n    const float tunerInterval = MAX_ANALOG_READ / STATIONS;\n    boolean playback = true;\n    ```", "```kt\n    int mapStations(int analogValue) {\n      int currentStation = analogValue / tunerInterval;\n    }\n    ```", "```kt\n    float normalizeVolume(int analogValue) {\n      return analogValue / MAX_ANALOG_READ;\n    }\n    ```", "```kt\n    void loop() {\n      readData();\n      Serial.print(\"Playing music: \");\n      Serial.println(playback);\n      Serial.print(\"Radio station: \");\n      Serial.println(mapStations(tuner));\n      Serial.print(\"Volume: \");\n      Serial.println(normalizeVolume(volume));\n      delay(RADIO_POLL_PERIOD);\n    }\n    ```", "```kt\n0,0.332768,2\n1,0.951197,4\n```", "```kt\n#include <adk.h>\n#define BUFFSIZE 128\nchar accessoryName[] = \"Web radio\";\nchar manufacturer[] = \"Example, Inc.\";\nchar model[] = \"WebRadio\";\nchar versionNumber[] = \"0.1.0\";\nchar serialNumber[] = \"1\";\nchar url[] = \"http://www.example.com\";\nuint8_t buffer[BUFFSIZE];\nUSBHost Usb;\nADK adk(&Usb, manufacturer, model, accessoryName, versionNumber, url, serialNumber);\n```", "```kt\nchar triple[BUFFSIZE];\nuint8_t buffer[BUFFSIZE];\n```", "```kt\nvoid writeBuffer(int playback, float volume, int station) {\n  sprintf(triple, \"%f,%f,%f\", (float) playback, normalizeVolume(volume), (float) mapStations(station));\n  memcpy(buffer, triple, BUFFSIZE);\n}\n```", "```kt\nvoid loop() {\n  Usb.Task();\n  if (adk.isReady()) {\n    readData();\n    writeBuffer(playback, volume, tuner);\n    adk.write(BUFFSIZE, buffer);\n  }\n  delay(RADIO_POLL_PERIOD);\n}\n```", "```kt\n    <resources>\n      <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n      <dimen name=\"activity_vertical_margin\">16dp</dimen>\n      <dimen name=\"activity_frame_height\">220dp</dimen>\n      <dimen name=\"activity_image_square\">180dp</dimen>\n      <dimen name=\"layout_padding\">50dp</dimen>\n      <dimen name=\"title_size\">40sp</dimen>\n      <dimen name=\"description_size\">25sp</dimen>\n    </resources>\n    ```", "```kt\n    <resources>\n      <color name=\"picton_blue\">#33B5E5</color>\n      <color name=\"white\">#FFFFFF</color>\n      <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n      </style>\n    </resources>\n    ```", "```kt\n    <FrameLayout \n\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"@dimen/activity_frame_height\"\n      android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n      android:paddingRight=\"@dimen/activity_horizontal_margin\"\n      android:paddingTop=\"@dimen/activity_vertical_margin\"\n      android:paddingBottom=\"@dimen/activity_vertical_margin\"\n      android:background=\"@color/picton_blue\"\n      tools:context=\".Radio\">\n    </FrameLayout>\n\n    ```", "```kt\n    <LinearLayout\n      android:orientation=\"horizontal\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\">\n\n        <ImageView\n          android:id=\"@+id/radio_image\"\n          android:src=\"img/ic_launcher\"\n          android:layout_height=\"@dimen/activity_image_square\"\n          android:layout_width=\n            \"@dimen/activity_image_square\" />\n\n        <LinearLayout\n          android:orientation=\"vertical\"\n          android:layout_marginLeft=\"@dimen/layout_padding\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"match_parent\">\n        </LinearLayout>\n    </LinearLayout>\n    ```", "```kt\n    <TextView\n      android:id=\"@+id/radio_name\"\n      android:text=\"Radio name\"\n      android:textColor=\"@color/white\"\n      android:textSize=\"@dimen/title_size\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\" />\n\n    <TextView\n      android:id=\"@+id/radio_description\"\n      android:text=\"Description\"\n      android:textSize=\"@dimen/description_size\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\" />\n    ```", "```kt\n    private TextView mRadioName;\n    private TextView mRadioDescription;\n    private ImageView mRadioImage;\n    ```", "```kt\n    setContentView(R.layout.activity_radio);\n    mRadioName = (TextView) findViewById(R.id.radio_name);\n    mRadioDescription = (TextView) findViewById(R.id.radio_description);\n    mRadioImage = (ImageView) findViewById(R.id.radio_image);\n\n    ```", "```kt\n    <resources>\n      <usb-accessory\n       version=\"0.1.0\"\n       model=\"WebRadio\"\n       manufacturer=\"Example, Inc.\"/>\n    </resources>\n    ```", "```kt\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    ```", "```kt\n    private final static String STREAMING_BASE_URL = \"https://streaming.jamendo.com/\";\n    private String title;\n    private String description;\n    private int imageId;\n    public Station(String title, String description, int imageId) {\n      this.title = title;\n      this.description = description;\n      this.imageId = imageId;\n    }\n    ```", "```kt\n    public String getTitle() {\n      return title;\n    }\n    public String getDescription() {\n      return description;\n    }\n    public int getImageId() {\n      return imageId;\n    }\n    public String getStreamUrl() {\n      return STREAMING_BASE_URL + title;\n    }\n    ```", "```kt\n    private static ArrayList<Station> mChannels;\n    private static MediaPlayer mMediaPlayer;\n    private static int mPlayback;\n    private static int mIndex;\n    private static Station mActiveStation;\n    ```", "```kt\n    public static void initialize() {\n      // Prepare all stations object\n      mChannels = new ArrayList();\n      mChannels.add(new Station(\"JamPop\", \"Pop\", R.drawable.ic_launcher));\n      mChannels.add(new Station(\"JamClassical\", \"Classical\", R.drawable.ic_launcher));\n      mChannels.add(new Station(\"JamJazz\", \"Jazz\", R.drawable.ic_launcher));\n      mChannels.add(new Station(\"JamElectro\", \"Electronic\", R.drawable.ic_launcher));\n      mChannels.add(new Station(\"JamRock\", \"Rock\", R.drawable.ic_launcher));\n      // Initializes the MediaPlayer with listeners\n      mMediaPlayer = new MediaPlayer();\n      mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n      mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n        @Override\n        public void onPrepared(MediaPlayer mediaPlayer) {\n          mediaPlayer.start();\n        }\n      });\n    }\n    ```", "```kt\n    private static void stop() {\n      mMediaPlayer.reset();\n    }\n    private static void play() {\n      try {\n        mMediaPlayer.setDataSource(mActiveStation.getStreamUrl());\n        mMediaPlayer.prepareAsync();\n      }\n      catch (IOException e) {\n        // noop\n      }\n    }\n    ```", "```kt\n    public static void playback(int value) {\n      // If the playback status has changed\n      if (value != mPlayback) {\n        // Play or stop the playback\n        if (value == 0) {\n          stop();\n        }\n        else {\n          play();\n        }\n        mPlayback = value;\n      }\n    }\n    ```", "```kt\n    public static Station changeStation(int stationId) {\n      Station station = null;\n      if (stationId != mIndex) {\n        mIndex = stationId;\n        // Set the current station\n        mActiveStation = mChannels.get(mIndex);\n        station = mActiveStation;\n        stop();\n        if (mPlayback == 1) {\n          play();\n        }\n      }\n      return station;\n    }\n    ```", "```kt\n    public interface OnDataChanges {\n      void updateStation(Station station);\n    }\n    ```", "```kt\n    public class Radio extends ActionBarActivity implements OnDataChanges {\n    ```", "```kt\n    @Override\n    public void updateStation(Station station) {\n      mRadioName.setText(station.getTitle());\n      mRadioDescription.setText(station.getDescription());\n      mRadioImage.setImageResource(station.getImageId());\n    }\n    ```", "```kt\n    private final static int INPUT_POLLING = 100;\n    private final static int STATION_UPDATE = 0;\n    private AdkManager mAdkManager;\n    private OnDataChanges mCaller;\n    private ScheduledExecutorService mScheduler;\n    private Handler mMainLoop;\n    ```", "```kt\n    public DataReader(AdkManager adkManager, OnDataChanges caller) {\n      this.mAdkManager = adkManager;\n      this.mCaller = caller;\n      mMainLoop = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(Message message) {\n          switch (message.what) {\n            case STATION_UPDATE:\n              mCaller.updateStation((Station) message.obj);\n              break;\n          }\n        }\n      };\n    }\n    ```", "```kt\n    private class InputThread implements Runnable {\n      @Override\n      public void run() {\n        // Read from ADK\n        AdkMessage response = mAdkManager.read();\n        // Parse the response\n        String[] collectedInputs = response.getString().split(\",\");\n        int playback = (int) Float.parseFloat(collectedInputs[0]);\n        int station = (int) Float.parseFloat(collectedInputs[2]);\n        // Start radio and get the changed station\n        RadioManager.playback(playback);\n        Station currentStation = RadioManager.changeStation(station);\n        // Updated station back to the main thread\n        if (currentStation != null) {\n          Message message = mMainLoop.obtainMessage(STATION_UPDATE, currentStation);\n          message.sendToTarget();\n        }\n      }\n    }\n    ```", "```kt\n    public void start() {\n      // Initialize threads\n      InputThread thread = new InputThread();\n      // Should start over and over while publishing results\n      mScheduler = Executors.newSingleThreadScheduledExecutor();\n      mScheduler.scheduleAtFixedRate(thread, 0, INPUT_POLLING, TimeUnit.MILLISECONDS);\n    }\n    ```", "```kt\n    public void stop() {\n      mScheduler.shutdown();\n    }\n    ```", "```kt\n    private AdkManager mAdkManager;\n    private DataReader mReader;\n\n    ```", "```kt\n    mRadioImage = (ImageView) findViewById(R.id.radio_image);\n    RadioManager.initialize();\n    mAdkManager = new AdkManager(this);\n    mReader = new DataReader(mAdkManager, this);\n\n    ```", "```kt\n    @Override\n    protected void onPause() {\n      super.onPause();\n      mReader.stop();\n      mAdkManager.close();\n    }\n\n    @Override\n    protected void onResume() {\n      super.onResume();\n      mAdkManager.open();\n      mReader.start();\n    }\n    ```", "```kt\n    private static Station mActiveStation;\n    private static float mVolume = 1.0f;\n\n    ```", "```kt\n    public static void setVolume(float volume) {\n      if (Math.abs(mVolume - volume) > 0.05) {\n        mVolume = volume;\n        mMediaPlayer.setVolume(volume, volume);\n      }\n    }\n    ```", "```kt\n    float volume = Float.parseFloat(collectedInputs[1]);\n    int station = (int) Float.parseFloat(collectedInputs [2]);\n    RadioManager.playback(playback);\n    RadioManager.setVolume(volume);\n\n    ```"]