["```kt\nmyVariable = 10\nprint( myVariable ) -- prints the number 10\n```", "```kt\nlocal i = 5 -- local variable\n```", "```kt\nx = 10    -- global 'x' variable\nlocal i = 1\n\nwhile i <= 10 do\n   local x = i * 2  -- a local 'x' variable for the while block\n   print( x )       -- 2, 4, 6, 8, 10 ... 20\n   i = i + 1\nend\n\nprint( x )  -- prints 10 from global x\n```", "```kt\nx = { y=\"Monday\" }  -- create table \nprint( x.y )  -- \"Monday\"\nz = \"Tuesday\"    -- assign a new value to property \"Tuesday\"\nprint( z )  -- \"Tuesday\"\nx.z = 20  -- create a new property \nprint( x.z )  -- 20\nprint( x[\"z\"] )  -- 20\n```", "```kt\na = 2\n--print(a)    -- 2\n```", "```kt\n--[[\nk = 50\nprint(k)    -- 50\n--]]\n```", "```kt\n    local x = 10 -- Local to the chunk\n    local i = 1  -- Local to the chunk        \n    ```", "```kt\n    while (i<=x) do\n      local x = i  -- Local to the \"do\" body\n      print(x)       -- Will print out numbers 1 through 10 \n      i = i + 1\n    end\n    ```", "```kt\n    if i < 20 then\n      local x          -- Local to the \"then\" body\n      x = 20\n      print(x + 5)  -- 25\n    else\n      print(x)         -- This line will never execute since the above \"then\" body is already true\n    end\n\n    print(x)  -- 10\n    ```", "```kt\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    25\n    10\n\n    ```", "```kt\nt = 2*(2-5.5)/13+26\nprint(t)  -- 25.461538461538\n```", "```kt\nm = 18%4\nprint(m)  -- 2\n```", "```kt\nn = 7^2\nprint(n)  -- 49\n```", "```kt\nprint(0 > 1)  --false\nprint(4 > 2)  --true\nprint(1 >= 1)  --true\nprint(1 >= 1.5)  --false\nprint(0 == 0)  --true\nprint(3 == 2)  --false\nprint(2 ~= 2)  -- false\nprint(0 ~= 2)  -- true\n```", "```kt\nprint(10 and 20)      -- 20\nprint(nil and 1)      -- nil\nprint(false and 1)    -- false\nprint(10 or 20)       -- 10\nprint(false or 1)     -- 1\n```", "```kt\nprint(not nil)      -- true\nprint(not true)    -- false\nprint(not 2)        -- false\n```", "```kt\nprint(\"Hello \" .. \"World\")  -- Hello World\n\nmyString = \"Hello\"\nprint(myString .. \" World\")   -- Hello World\n```", "```kt\nprint(#\"*\") --1\nprint(#\"\\n\") --1\nprint(#\"hello\") --5\nmyName = \"Jane Doe\"\nprint(#myName) --8\n```", "```kt\nprint(5 + 4 – 2) -- This returns the number 7\n```", "```kt\nprint((5 + 4) – 2) -- This returns the number 7\n```", "```kt\nprint (7 + 3 * 9) -- This returns the number 34\n```", "```kt\nprint (7 + (3 * 9)) -- This returns the number 34\n```", "```kt\nprint(\"This is my string.\")  -- This is my string.\n```", "```kt\nprint('This is another string.')  -- This is another string.\n\nprint('She said, \"Hello!\" ')  -- She said, \"Hello!\"\n```", "```kt\nprint([[Is it 'this' or \"that?\"]]) -- Is it 'this' or \"that?\"\n```", "```kt\n    1 print(\"This is a string!\") -- This is a string!\n    2 print(\"15\" + 1) -- Returns the value 16\n    ```", "```kt\n    3 myVar = 28\n    4 print(myVar)  -- Returns 28\n\n    5 myVar = \"twenty-eight\"\n    6 print(myVar) -- Returns twenty-eight\n    ```", "```kt\n    7 Name1, Phone = \"John Doe\", \"123-456-7890\"\n    8 Name2 = \"John Doe\"\n\n    9 print(Name1, Phone) -- John Doe  123-456-7890\n    10 print(Name1 == Phone) -- false\n    11 print(Name1 <= Phone) -- false\n    12 print(Name1 == Name2) -- true\n    ```", "```kt\n    This is a string!\n    16\n    28\n    twenty-eight\n    John Doe  123-456-7890\n    false\n    false\n    true\n\n    ```", "```kt\n1 a = {}    -- create a table with reference to \"a\"\n2 b = \"y\"\n3 a[b] = 10    -- new entry, with key=\"y\" and value=10\n4 a[20] = \"Monday\"  -- new entry, with key=20 and value=\"Monday\"\n5 print(a[\"y\"])    -- 10\n6 b = 20\n7 print(a[b])     -- \"Monday\"\n8 c = \"hello\"     -- new value assigned to \"hello\" property\n9 print( c )    -- \"hello\"\n```", "```kt\ncolors =  {\n[1] = \"Green\", \n[2] = \"Blue\", \n[3] = \"Yellow\", \n[4] = \"Orange\", \n[5] = \"Red\"\n}\nprint(colors[4]) -- Orange\n```", "```kt\ncolors = {\"Green\", \"Blue\", \"Yellow\", \"Orange\", \"Red\"}\nprint(colors[4]) -- Orange\n```", "```kt\ndrinks = {Jim = \"orange juice\", Matt = \"soda\", Jackie = \"milk\"}\ndrinks.Jackie = \"lemonade\" -- A change.\ndrinks.Anne = \"water\" -- An addition.\ndrinks.Jim = nil -- A removal.\n\nprint(drinks.Jackie, drinks.Anne, drinks.Matt, drinks.Jim)\n-- lemonade water soda nil\n```", "```kt\nmyNumbers = {} -- Empty table constructor\n\nfor i = 1, 5 do\n  myNumbers[i] = i \nend\n\nfor i = 1, 5 do\nprint(\"This is number \" .. myNumbers[i])\nend\n```", "```kt\n--This is number 1\n--This is number 2\n--This is number 3\n--This is number 4\n--This is number 5\n\n```", "```kt\nobject = display.newRect(110, 100, 50, 50)\nobject.setFillColor(1.0, 1.0, 1.0)\nobject.translate( object, 10, 10 )\n```", "```kt\nobject = display.newRect(110, 100, 50, 50)\nobject:setFillColor(1.0, 1.0, 1.0)\nobject:translate( 10, 10 )\n```", "```kt\ndisplay.newImage( [parentGroup,] filename [, baseDirectory] [, x, y] [,isFullResolution] )\n```", "```kt\n    local centerX = display.contentCenterX\n    local centerY = display.contentCenterY\n\n    local background = display.newImage( \"glassbg.png\", centerX, centerY, true)\n    local image01 = display.newImage( \"moon.png\", 160, 80 )\n\n    local image02 = display.newImage( \"moon.png\" )\n    image02.x = 160; image02.y = 200\n\n    image03 = display.newImage( \"moon.png\" )\n    image03.x = 160; image03.y = 320\n    ```", "```kt\n    local background = display.newImage( \"glassbg.png\", centerX, centerY, true)\n    ```", "```kt\n    image02.x = 160\n    image02.y = 200\n    ```", "```kt\napplication =\n{\n  content =\n  {\n    width = 320,\n    height = 480,\n    scale = \"letterbox\",\n\n    imageSuffix =\n    {\n       [\"@2x\"] = 2,\n    },\n  },\n}\n```", "```kt\n    application =\n    {\n      content =\n      {\n        width = 320,\n        height = 480,\n        scale = \"letterbox\",\n        xAlign = \"left\",\n        yAlign = \"top\"\n      },\n    }\n    ```", "```kt\nmyImage = display.newImageRect( \"image.png\", 128, 128 )\n```", "```kt\nMy New Project/    name of your project folder\n  Icon.png         required for iPhone/iPod/iPad\n  Icon@2x.png      required for iPhone/iPod with Retina display\n  main.lua\n  config.lua\n  myImage.png      Base image (Ex. Resolution 128 x 128 pixels)\n  myImage@2x.png   Double resolution image (Ex. Resolution 256 x 256 pixels)\n```", "```kt\napplication =\n{\n  content =\n  {\n    width = 320,\n    height = 480,\n    scale = \"letterbox\",\n\n    imageSuffix =\n    {\n      [\"@2x\"] = 2,\n    },\n  },\n}\n```", "```kt\nlocal rect = display.newRect(160, 130, 150, 150)\nrect:setFillColor(1.0, 1.0, 1.0) \nrect:setStrokeColor(0.1, 0.6, 0.2) \nrect.strokeWidth = 5\n```", "```kt\nprint(\"My favorite number is 8\") -- My favorite number is 8\n```", "```kt\nfunction myName()\n  print(\"My name is Jane.\")\nend\n\nmyName()  -- My name is Jane.\n```", "```kt\nfunction myName(Name)\n  print(\"My name is \" .. Name .. \".\")\nend\n\nmyName(\"Jane\")  -- My name is Jane.\nmyName(\"Cory\")  -- My name is Cory.\nmyName(\"Diane\")  -- My name is Diane.\n```", "```kt\n    display.setStatusBar(display.HiddenStatusBar)\n    ```", "```kt\n    display.setStatusBar(display.DefaultStatusBar)\n    ```", "```kt\n    display.setStatusBar(display.TranslucentStatusBar)\n    ```", "```kt\n    display.setStatusBar(display.DarkStatusBar)\n    ```", "```kt\n    print(display.viewableContentWidth)\n    ```", "```kt\n    print(display.viewableContentHeight)\n    ```", "```kt\n    print(display.statusBarHeight)\n    ```", "```kt\n-- myImage is a global variable\nmyImage = display.newImage( \"image.png\" )\nmyImage.x = 160;  myImage.y = 240\n\n-- A touch listener to remove object\nlocal removeBody = function( event )\n  local t = event.target\n  local phase = event.phase\n\n  if \"began\" == phase then\n    -- variable \"myImage\" still exists even if it's not displayed\n    t:removeSelf() -- Destroy object\n  end\n\n  -- Stop further propagation of touch event\n  return true\nend\n\nmyImage:addEventListener( \"touch\", removeBody )\n```", "```kt\n-- myImage is a local variable\nlocal myImage = display.newImage( \"image.png\" )\nmyImage.x = 160;  myImage.y = 240\n\n-- A touch listener to remove object\nlocal removeBody = function( event )\n  local t = event.target\n  local phase = event.phase\n\n  if \"began\" == phase then\n    t:removeSelf() -- Destroy object\n    t = nil\n  end\n\n  -- Stop further propagation of touch event\n  return true\nend\n\nmyImage:addEventListener( \"touch\", removeBody )\n```", "```kt\nimage.parent:remove( image ) -- remove image from hierarchy\n```", "```kt\nimage:removeSelf( ) -- same as above\n```", "```kt\nimage = nil\n```"]