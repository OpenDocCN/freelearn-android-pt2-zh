- en: Chapter 4. Web Support in Robotium
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章. Robotium中的Web支持
- en: This chapter will brief you about accessing WebElements in Android using web
    support in Robotium. We will see these methods in the initial part of this chapter,
    and will move on to one simple example of testing a hybrid application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将简要介绍如何使用Robotium的Web支持在Android中访问WebElements。我们将在本章的前部分看到这些方法，并继续一个简单的测试混合应用程序的示例。
- en: API set
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API集
- en: 'Web support has been added to the Robotium framework since Robotium 4.0 released.
    Robotium has full support for hybrid applications. There are some key differences
    between native and hybrid applications. Let''s go through them one by one, as
    follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自Robotium 4.0发布以来，Robotium框架已添加Web支持。Robotium完全支持混合应用程序。本地应用程序和混合应用程序之间存在一些关键差异。让我们逐一了解它们：
- en: '| Native Application | Hybrid Application |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 本地应用程序 | 混合应用程序 |'
- en: '| --- | --- |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Platform dependent | Cross platform |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 平台相关 | 跨平台 |'
- en: '| Run on the device''s internal software and hardware | Built using HTML5 and
    JavaScript and wrapped inside a thin native container that provides access to
    native platform features |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 在设备的内部软件和硬件上运行 | 使用HTML5和JavaScript构建，并封装在一个薄本地容器中，提供对本地平台功能的访问 |'
- en: '| Need more developers to build apps on different platforms and learning time
    is more | Save development cost and time |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 需要更多开发人员在不同的平台上构建应用程序，学习时间更长 | 节省开发成本和时间 |'
- en: '| Excellent performance | Less performance |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 优秀的性能 | 较低的性能 |'
- en: 'The native and hybrid applications are shown as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本地和混合应用程序如下所示：
- en: '![API set](img/8010OS_04_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![API集](img/8010OS_04_01.jpg)'
- en: 'Let''s see some of the existing methods in Robotium that support access to
    web content. They are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Robotium中一些支持访问Web内容的方法。它们如下：
- en: '`searchText (String text)`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`searchText (String text)`'
- en: '`scrollUp/Down()`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scrollUp/Down()`'
- en: '`clickOnText (String text)`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clickOnText (String text)`'
- en: '`takeScreenshot()`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`takeScreenshot()`'
- en: '`waitForText (String text)`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`waitForText (String text)`'
- en: In the methods specifically added for web support, the class `By` is used as
    a parameter. It is an abstract class used as a conjunction with the web methods.
    These methods are used to select different WebElements by their properties, such
    as ID and name.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在专门为Web支持添加的方法中，`By`类被用作参数。它是一个抽象类，与Web方法结合使用。这些方法用于根据属性（如ID和名称）选择不同的WebElements。
- en: 'The element used in a web view is referred to as a WebElement. It is similar
    to the WebDriver implemented in Selenium. The following table lists all the methods
    inside the class `By`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在web视图中使用的元素称为WebElement。它与Selenium中实现的WebDriver相似。以下表格列出了`By`类中的所有方法：
- en: '| Method | Description |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `className (String className)` | Select a WebElement by its class name |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `className (String className)` | 通过其类名选择WebElement |'
- en: '| `cssSelector (String selectors)` | Select a WebElement by its CSS selector
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `cssSelector (String selectors)` | 通过其CSS选择器选择WebElement |'
- en: '| `getValue()` | Return the value |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `getValue()` | 返回值 |'
- en: '| `id (String id)` | Select a WebElement by its id |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `id (String id)` | 通过其id选择WebElement |'
- en: '| `name (String name)` | Select a WebElement by its name |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `name (String name)` | 通过其名称选择WebElement |'
- en: '| `tagName (String tagName)` | Select a WebElement by its tag name |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `tagName (String tagName)` | 通过其标签名选择WebElement |'
- en: '| `textContent (String textContent)` | Select a WebElement by its text content
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `textContent (String textContent)` | 通过其文本内容选择WebElement |'
- en: '| `xpath (String xpath)` | Select a WebElement by its xpath |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `xpath (String xpath)` | 通过其xpath选择WebElement |'
- en: 'Some of the important methods in the Robotium framework, that aim at direct
    communication with web content in Android applications, are listed as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Robotium框架中一些重要的方法，旨在与Android应用程序中的Web内容直接通信，如下所示：
- en: '`clickOnWebElement(By by)`: It clicks on the WebElement matching the specified
    `By` class object.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clickOnWebElement(By by)`: 点击匹配指定`By`类对象的WebElement。'
- en: '`waitForWebElement(By by)`: It waits for the WebElement matching the specified
    `By` class object.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`waitForWebElement(By by)`: 等待匹配指定`By`类对象的WebElement。'
- en: '`getWebElement(By by, int index)`: It returns a WebElement matching the specified
    `By` class object and index.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getWebElement(By by, int index)`: 返回匹配指定`By`类对象和索引的WebElement。'
- en: '`enterTextInWebElement(By by, String text)`: It enters the text in a WebElement
    matching the specified `By` class object.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enterTextInWebElement(By by, String text)`: 该方法用于在匹配指定`By`类对象的WebElement中输入文本。'
- en: '`typeTextInWebElement(By by)`: It types the text in a WebElement matching the
    specified `By` class object. In this method, the program actually types the text
    letter by letter using the keyboard, whereas `enterTextInWebElement` directly
    enters the text in the particular.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typeTextInWebElement(By by)`: 它在匹配指定 `By` 类对象的 WebElement 中输入文本。在此方法中，程序实际上通过键盘逐个字母输入文本，而
    `enterTextInWebElement` 直接在特定位置输入文本。'
- en: '`clearTextInWebElement(By by)`: It clears the text in a WebElement matching
    the specified `By` class object.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clearTextInWebElement(By by)`: 它清除与指定 `By` 类对象匹配的 WebElement 中的文本。'
- en: '`getCurrentWebElements(By by)`: It returns the `ArrayList` of WebElements displayed
    in the active web view matching the specified `By` class object.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCurrentWebElements(By by)`: 它返回与指定的 `By` 类对象匹配的、在活动 web 视图中显示的 WebElements
    的 `ArrayList`。'
- en: Before actually looking into the hybrid test example, let's gain more information
    about `WebViews`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际查看混合测试示例之前，让我们获取更多关于 `WebViews` 的信息。
- en: 'You can get an instance of `WebView` using the `Solo` class as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下方式通过 `Solo` 类获取 `WebView` 的实例：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that you have control of `WebView`, you can inject your JavaScript code
    as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您控制了 `WebView`，可以如下注入您的 JavaScript 代码：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is very powerful, as we can call every function on the current page; thus,
    it helps automation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常强大，因为我们可以调用当前页面上的每个函数；因此，它有助于自动化。
- en: Hybrid test example
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合测试示例
- en: Let's see one hybrid application, that is, the application under test, and create
    a simple test project to test this application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个混合应用程序，即被测应用程序，并创建一个简单的测试项目来测试这个应用程序。
- en: 'The application provides a `WebView` control in its layout and loads Google''s
    homepage in it (as shown in the following screenshot). You can see the source
    code of the application before moving onto writing test cases:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序在其布局中提供了一个 `WebView` 控件，并在其中加载了谷歌主页（如下面的截图所示）。在编写测试用例之前，您可以查看应用程序的源代码：
- en: '![Hybrid test example](img/8010OS_04_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![混合测试示例](img/8010OS_04_02.jpg)'
- en: 'The source code of the `WebViewActivity.java` file is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebViewActivity.java` 文件的源代码如下：'
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following code in your `web_main.xml` layout file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `web_main.xml` 布局文件中添加以下代码：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you have not specified any permission in `AndroidManifest.xml`, provide
    the following permission:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 `AndroidManifest.xml` 中没有指定任何权限，请提供以下权限：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This sets up your application with `WebView`. Now, let's write a test case that
    accesses some of the WebElements of the Google homepage , `WebView`, and provides
    results.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用 `WebView` 设置您的应用程序。现在，让我们编写一个测试用例，访问谷歌主页的一些 WebElements ，`WebView`，并提供结果。
- en: 'Use the following code as a Google search test case in your hybrid test project:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的混合测试项目中使用以下代码作为谷歌搜索测试用例：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code types the text `Robotium` in the Google search box and clicks
    on the search button. It asserts if the word `Robotium` is not found in the input
    search bar. If it is present, the program clicks on the search button and the
    results page is displayed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在谷歌搜索框中输入文本 `Robotium` 并点击搜索按钮。它断言输入搜索栏中是否找不到单词 `Robotium`。如果存在，程序将点击搜索按钮并显示结果页面。
- en: 'It then waits for the test results and takes a screenshot as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它等待测试结果，并如下截图：
- en: '![Hybrid test example](img/8010OS_04_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![混合测试示例](img/8010OS_04_03.jpg)'
- en: This screenshot is saved in the `/sdcard/Robotium-Screenshots/` directory by
    the API. It requires write permission (`android.permission.WRITE_EXTERNAL_STORAGE`)
    in the `AndroidManifest.xml` file of the application under test.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该截图通过 API 保存在 `/sdcard/Robotium-Screenshots/` 目录中。它需要被测应用程序的 `AndroidManifest.xml`
    文件中的写入权限 (`android.permission.WRITE_EXTERNAL_STORAGE`)。
- en: This result can be viewed under JUnit view. This view is automatically started
    when the test project is executed as an Android JUnit test. You can see the following
    screenshot to follow the process to run the test project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果可以在 JUnit 视图中查看。当测试项目作为 Android JUnit 测试执行时，会自动启动此视图。您可以查看以下截图以了解运行测试项目的流程。
- en: 'Right-click on the test project, click on **Run As** and then on **2 Android
    JUnit Test**:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击测试项目，选择 **运行方式** 然后点击 **2 Android JUnit 测试**：
- en: '![Hybrid test example](img/8010OS_04_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![混合测试示例](img/8010OS_04_04.jpg)'
- en: 'The `testSearchRobotium` test case is passed and indicated by the green bar,
    as shown in the following screenshot. It took around 66.1062 seconds to complete
    the test:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`testSearchRobotium` 测试用例已通过，如下面的截图所示，由绿色条指示。完成测试大约需要 66.1062 秒：'
- en: '![Hybrid test example](img/8010OS_04_05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![混合测试示例](img/8010OS_04_05.jpg)'
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概括
- en: In this chapter, we learned about testing a hybrid application and different
    APIs that are used to access WebElements. With Robotium's web view support, we
    can basically test mobile webpages. In this way, we emulate the same conditions
    like opening mobile webpages using native browsers, because a native browser has
    tabs which contain WebView.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何测试混合应用程序以及访问 WebElement 的不同 API。借助 Robotium 对 web 视图的支持，我们基本上可以测试移动网页。这种方式，我们模拟了使用原生浏览器打开移动网页的相同条件，因为原生浏览器中的标签包含
    WebView。
- en: In the next chapter, we will compare the Robotium framework with other testing
    frameworks and see some interesting facts.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将比较 Robotium 框架与其他测试框架，并了解一些有趣的事实。
