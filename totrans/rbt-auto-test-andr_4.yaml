- en: Chapter 4. Web Support in Robotium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will brief you about accessing WebElements in Android using web
    support in Robotium. We will see these methods in the initial part of this chapter,
    and will move on to one simple example of testing a hybrid application.
  prefs: []
  type: TYPE_NORMAL
- en: API set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web support has been added to the Robotium framework since Robotium 4.0 released.
    Robotium has full support for hybrid applications. There are some key differences
    between native and hybrid applications. Let''s go through them one by one, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Native Application | Hybrid Application |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Platform dependent | Cross platform |'
  prefs: []
  type: TYPE_TB
- en: '| Run on the device''s internal software and hardware | Built using HTML5 and
    JavaScript and wrapped inside a thin native container that provides access to
    native platform features |'
  prefs: []
  type: TYPE_TB
- en: '| Need more developers to build apps on different platforms and learning time
    is more | Save development cost and time |'
  prefs: []
  type: TYPE_TB
- en: '| Excellent performance | Less performance |'
  prefs: []
  type: TYPE_TB
- en: 'The native and hybrid applications are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![API set](img/8010OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see some of the existing methods in Robotium that support access to
    web content. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`searchText (String text)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scrollUp/Down()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clickOnText (String text)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`takeScreenshot()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`waitForText (String text)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the methods specifically added for web support, the class `By` is used as
    a parameter. It is an abstract class used as a conjunction with the web methods.
    These methods are used to select different WebElements by their properties, such
    as ID and name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The element used in a web view is referred to as a WebElement. It is similar
    to the WebDriver implemented in Selenium. The following table lists all the methods
    inside the class `By`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `className (String className)` | Select a WebElement by its class name |'
  prefs: []
  type: TYPE_TB
- en: '| `cssSelector (String selectors)` | Select a WebElement by its CSS selector
    |'
  prefs: []
  type: TYPE_TB
- en: '| `getValue()` | Return the value |'
  prefs: []
  type: TYPE_TB
- en: '| `id (String id)` | Select a WebElement by its id |'
  prefs: []
  type: TYPE_TB
- en: '| `name (String name)` | Select a WebElement by its name |'
  prefs: []
  type: TYPE_TB
- en: '| `tagName (String tagName)` | Select a WebElement by its tag name |'
  prefs: []
  type: TYPE_TB
- en: '| `textContent (String textContent)` | Select a WebElement by its text content
    |'
  prefs: []
  type: TYPE_TB
- en: '| `xpath (String xpath)` | Select a WebElement by its xpath |'
  prefs: []
  type: TYPE_TB
- en: 'Some of the important methods in the Robotium framework, that aim at direct
    communication with web content in Android applications, are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clickOnWebElement(By by)`: It clicks on the WebElement matching the specified
    `By` class object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`waitForWebElement(By by)`: It waits for the WebElement matching the specified
    `By` class object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getWebElement(By by, int index)`: It returns a WebElement matching the specified
    `By` class object and index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enterTextInWebElement(By by, String text)`: It enters the text in a WebElement
    matching the specified `By` class object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`typeTextInWebElement(By by)`: It types the text in a WebElement matching the
    specified `By` class object. In this method, the program actually types the text
    letter by letter using the keyboard, whereas `enterTextInWebElement` directly
    enters the text in the particular.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clearTextInWebElement(By by)`: It clears the text in a WebElement matching
    the specified `By` class object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCurrentWebElements(By by)`: It returns the `ArrayList` of WebElements displayed
    in the active web view matching the specified `By` class object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before actually looking into the hybrid test example, let's gain more information
    about `WebViews`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get an instance of `WebView` using the `Solo` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have control of `WebView`, you can inject your JavaScript code
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is very powerful, as we can call every function on the current page; thus,
    it helps automation.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid test example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see one hybrid application, that is, the application under test, and create
    a simple test project to test this application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application provides a `WebView` control in its layout and loads Google''s
    homepage in it (as shown in the following screenshot). You can see the source
    code of the application before moving onto writing test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hybrid test example](img/8010OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The source code of the `WebViewActivity.java` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code in your `web_main.xml` layout file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have not specified any permission in `AndroidManifest.xml`, provide
    the following permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This sets up your application with `WebView`. Now, let's write a test case that
    accesses some of the WebElements of the Google homepage , `WebView`, and provides
    results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following code as a Google search test case in your hybrid test project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code types the text `Robotium` in the Google search box and clicks
    on the search button. It asserts if the word `Robotium` is not found in the input
    search bar. If it is present, the program clicks on the search button and the
    results page is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'It then waits for the test results and takes a screenshot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hybrid test example](img/8010OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot is saved in the `/sdcard/Robotium-Screenshots/` directory by
    the API. It requires write permission (`android.permission.WRITE_EXTERNAL_STORAGE`)
    in the `AndroidManifest.xml` file of the application under test.
  prefs: []
  type: TYPE_NORMAL
- en: This result can be viewed under JUnit view. This view is automatically started
    when the test project is executed as an Android JUnit test. You can see the following
    screenshot to follow the process to run the test project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the test project, click on **Run As** and then on **2 Android
    JUnit Test**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hybrid test example](img/8010OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `testSearchRobotium` test case is passed and indicated by the green bar,
    as shown in the following screenshot. It took around 66.1062 seconds to complete
    the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hybrid test example](img/8010OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about testing a hybrid application and different
    APIs that are used to access WebElements. With Robotium's web view support, we
    can basically test mobile webpages. In this way, we emulate the same conditions
    like opening mobile webpages using native browsers, because a native browser has
    tabs which contain WebView.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will compare the Robotium framework with other testing
    frameworks and see some interesting facts.
  prefs: []
  type: TYPE_NORMAL
