- en: Chapter 3. Creating a New Android Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will demonstrate how to create a new Android app with a simple
    interaction using the button and text field. We will also write interactivity
    code, compile and run an app on the emulator/actual device. To illustrate this
    chapter, we will be creating a simple project named HelloU app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new Android application project string resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the graphical layout designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The XML layout editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widgets' interactions through the source code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toast message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application on the emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application on an Android device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Android application project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a new Android project in the Eclipse, navigate to **File** | **New**
    | **Project**. A new project window will appear, then choose **Android** | **Android
    Application Project** from the list. Click on the **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: '**Application Name**: This is the name of your application, it will appear
    side-by-side to the launcher icon. Choose a project name that is relevant to your
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project Name**: This is typically similar to your application name. Avoid
    having the same name with existing projects in Eclipse, it is not permitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package Name**: This is the package name of the application. It will act
    as an ID in the Google Play app store if we wish to publish. Typically it will
    be the reverse of your domain name if we have one (since this is unique) followed
    by the application name, and a valid Java package name, else we can have anything
    now and refactor it before publishing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `android:minSdkVersion` is an integer designating the minimum API Level
    required for the application to run. If not sure, leave it to whatever is selected.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might have your app set to `android:minSdkVersion="7"`. This
    setting will guarantee that your app works on devices with Android Éclair (2.1)
    or above, but not below.
  prefs: []
  type: TYPE_NORMAL
- en: The `targetSdkVersion` is the target devices you are focusing on. Let's say
    your app has `android:minSdkVersion="16"`, it means the apps could utilize all
    the features of Android Jelly Bean. However, bear in mind that features, such
    as the ability to move the app to an SD card and native Unicode are not supported
    in Android (2.1) Eclair. Though these features are available starting in the API
    level 8 (Android 2.2/Froyo) and level 11 (Android 3.0/Honeycomb), they cannot
    be utilized in the lower version of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Do keep in mind that your `targetSdkVersion` has to be equal or more than the
    `minSdkVersion`. Otherwise, it doesn't really make much sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Next** to move to the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Android application project](img/1103OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create a new Android project
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the window to configure your launcher icon. The launcher icon is the
    icon that will appear in the home screen or in the application drawer. This is
    an important aspect of your app as it will be representing the app. For this purpose,
    you may use the icon creator wizard using the available text and icon shape pre-customized
    in the ADT. Set the foreground as text, provide the letter `U` as the **Text**,
    pick the circle as the icon shape and adjust your color preference, as shown in
    the following screenshot. This wizard will create a simple icon and provides the
    ldpi (36x36 pixels), mdpi (48x48 pixels), hdpi (72x72 pixels) and xhdpi (96x96
    pixels) of the launcher icon. Icons of different sizes are created to address
    various devices with different configuration of screen sizes and resolution. Click
    on **Next** to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Android application project](img/1103OS-03-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Launcher icon creator
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **BlankActivity** in the window, as shown in following screenshot, and
    click on **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Android application project](img/1103OS-03-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choose blank activity
  prefs: []
  type: TYPE_NORMAL
- en: 'The next window appears to input the `MainActivity` name, as shown in the following
    screenshot and click on the **Finish** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Android application project](img/1103OS-03-03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: String resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, it is a practice for Android application to store the string values
    for user interface reference in the XML file due to the nature of mobile apps,
    which is distributed internationally. So it is best to provide multiple language
    options. However, this practice is optional, and you may use direct string assigning
    if you wish to do so.
  prefs: []
  type: TYPE_NORMAL
- en: The string resource file is in an XML form and available through the project
    tree in `res/values/strings.xml`. These string resources can also be used to store
    color information, integer arrays to name some.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a new string value by clicking on the **Add** button, provide the
    variable name in the **Name** box and the **Value** of the string. Press *Ctrl*
    + *S* to save the changes. For example, in the following screenshot, a new string
    variable is created as `hello_u` and the value is **Hello,**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![String resources](img/1103OS-03-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new string value
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two more string values based on the table that follows. These strings will
    be used as the widgets'' caption:'
  prefs: []
  type: TYPE_NORMAL
- en: '| String variable | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `s_tvName` | Your name: |'
  prefs: []
  type: TYPE_TB
- en: '| `s_btnDisplay` | Display name! |'
  prefs: []
  type: TYPE_TB
- en: If you notice, we use `s_` to indicate it is a string variable from the resources,
    `tv` to indicate a `TextView`, and `btn` to indicate a button. Bear in mind that
    these conventions are not fixed, you may use your own preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new string values created will be saved in the `string.xml` file. The XML
    code is available by clicking on the tab on the red arrow, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![String resources](img/1103OS-03-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The string.xml code file
  prefs: []
  type: TYPE_NORMAL
- en: Using the graphical layout designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next exercise is to add a text label, a text box and a button. These elements
    are called widgets in Android which has the class name `TextView`, `EditText`
    and `Button` in the Android API. We will not go through the details of these classes;
    most importantly we could apply these widgets in our app.
  prefs: []
  type: TYPE_NORMAL
- en: To open this layout, double-click the `res/layout/activity_main.xml` file from
    the project explorer.
  prefs: []
  type: TYPE_NORMAL
- en: On the left of the app screen, you'll see the **Palette**. Browse the **Form
    Widgets**, there are several widgets including the `TextView`. Click and drag
    the `TextView` widgets to the app screen. Change the widget ID into `"@+id/tvName"`,
    and make sure to press *Enter* to confirm your changes and save them to the XML
    file. The `"@+id/"` is the ADT representation to say that the new ID has to be
    created and assigned to the widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, set the Text properties to point the value defined in the string
    resources, `s_tvName`. This could be done by clicking on the button with three
    dots, on the right side of each property. Press *Ctrl* + *S* to save the changes
    and to make sure the changes appear in the XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the graphical layout designer](img/1103OS-03-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the caption of a TextView
  prefs: []
  type: TYPE_NORMAL
- en: 'The next widget to add is the EditText with **Id** `txtName`, associate label
    as **Your name:** to accept user input, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the graphical layout designer](img/1103OS-03-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding an EditText
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another widget, button, specify ID `btnDisplay` and associate label as
    **Display Name**, as shown, and expand it horizontally across the screen. You
    may use the resize feature by clicking and dragging the bluish resize mark on
    the edge of the widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the graphical layout designer](img/1103OS-03-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a Button
  prefs: []
  type: TYPE_NORMAL
- en: The XML layout code editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code editor is an alternative to change the layout properties. We recommend
    you change this code directly if you have prior knowledge of XML. It''s a straight
    forward XML code actually. To access this code directly, just click the `activity_main.xml`
    on the bottom of the layout editor, as shown in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The XML layout code editor](img/1103OS-03-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Accessing the XML layout code editor
  prefs: []
  type: TYPE_NORMAL
- en: Widget interactions through the source code editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The layout we designed previously does not have to interact with each other
    automatically; let's make it happen. To put in simple words, when we execute the
    project, clicking on the button on the app will not trigger any action. We need
    to add the code for the interactions.
  prefs: []
  type: TYPE_NORMAL
- en: What we are trying to do is when the user taps on the button **Display Name!**,
    the app will capture any text inside the `TextView` and produce a simple popup
    to display your name.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve our goal let's play around, go to `src`, double click on the `package`
    folder and double click again on the file `MainActivity.java`. This Java file
    will contain the code to load the layout of the XML file `main_activity.xml` in
    order to create a UI. The Java code as follows is the default code provided by
    ADT.
  prefs: []
  type: TYPE_NORMAL
- en: You will see the package name on line one and several classes imported to the
    project. The code in line six is the main class declaration which inherits the
    `Activity` class. method `onCreate` in line eight is the first method to be called
    when the apps start. The `setContentView(R.layout.activity_main)` is the command
    to initialize the screen layout based on the main screen designed previously.
    And the method in line 13, which is to create the screen menu, will be discussed
    later in [Chapter 5](ch05.html "Chapter 5. Adding RadioButton, CheckBox, Menu,
    and Preferences"), *Adding RadioButton, Checkbox, Menu, and Preferences*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In order to provide button interaction, we need to add implements `OnClickListener`
    to the main class header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the import section of the code, add this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, initialize all the widgets that will get involved in the process. Immediately
    after the main class header, add the widgets' member declaration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Since `EditText` and `Button` are also another class which needs to be imported
    from the Android API, so add a couple of lines in the import section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Eclipse you do not need to memorize all the classes and the packages' names
    that are needed to be imported. Just put the cursor (caret) to the class and press
    *Ctrl* + *Shift* + *O*. The IDE will help you to include the packages involved
    or point your mouse to the additional class, a menu will come out, and choose
    to import the class.
  prefs: []
  type: TYPE_NORMAL
- en: '![Widget interactions through the source code editor](img/1103OS-03-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Menu to import class from the Android API
  prefs: []
  type: TYPE_NORMAL
- en: Next is to link the code and the layout design in the `MainActivity.xml file`.
    This is needed since the ADT is incorporating the MVC (Model-View-Controller)
    development method. It means that the screen layout is separated from the code
    to provide high project maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Basically after the layout has been loaded using `setContentView` you need to
    have access to these widgets that hide within that layout. This is where `findViewById
    ()` comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The button is the action; we need to add the event listener to the button.
    The line to add is as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here we made the Activity itself implement `onClickListener`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For any on-click event to be handled, Java needs a special method to be included.
    Inside the method is where the task will be executed. In our case, if the user
    clicks (or taps) the button (`btnDisplay`), the app will extract the content of
    the text field (`txtName`) and display the content on the screen. The action can
    be coded as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`View arg0` is the element that triggers the action. `arg0.getId()` is the
    method to get the ID of the widget triggering the action. If the widget ID is
    the `btnDisplay`, then do the action of capturing the input and display it to
    the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To fetch the string of text field widgets, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`Toast.makeText()` is the method to display a short/brief message on the screen,
    we will discuss it in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Toast message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the common practices to pop-up a message box for notifying the
    user. This kind of notification is a type of notification that does not require
    a user answer or feedback.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`Toast.makeText()` contains three parameters which are the application context,
    the message and the time length.'
  prefs: []
  type: TYPE_NORMAL
- en: The application context is the current screen to display the message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The message is the string to be displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time length is consisting of a short or longer duration of the message display
    and has to be one of `Toast.LENGTH_*` constants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The arrow in the following screenshot is pointing to a Toast:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toast message](img/1103OS-03-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of a Toast
  prefs: []
  type: TYPE_NORMAL
- en: Running the application on the emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running the **HelloU** app in the emulator would need you to start the emulator
    first. Start the emulator that has the Android version that suits your target
    platform. Once the emulator is fully loaded, we can compile and run the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **HelloU** project on the project explorer (this is to activate
    the project). Navigate to **Run** in the Eclipse menu, and choose **Run** or press
    *Ctrl* + *F11* for a shortcut. Select run as Android Application, and *Enter*.
    Wait for a couple of seconds and view your emulator. The **HelloU** app will appear
    shortly, as in shown in the following screenshot. Enter your name and tap on the
    **Display Name!** button, the Toast message will appear with the name entered
    on the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application on the emulator](img/1103OS-03-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The HelloU app running in the Emulator
  prefs: []
  type: TYPE_NORMAL
- en: Running the application on an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run and deploy on a real device, first install the driver of the device.
    This varies as per device model and manufacturer.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are some links you could refer:'
  prefs: []
  type: TYPE_NORMAL
- en: For Google Android devices only [http://developer.android.com/sdk/win-usb.html](http://developer.android.com/sdk/win-usb.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Others: [http://www.teamandroid.com/download-android-usb-drivers/](http://www.teamandroid.com/download-android-usb-drivers/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the Android phone is connected to the computer through the USB cable.
    To check whether the phone is properly connected to your PC and in debug mode,
    please switch to the DDMS perspective.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application on an Android device](img/1103OS-03-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Android phone as appear in the DDMS.
  prefs: []
  type: TYPE_NORMAL
- en: If everything goes well, then run the app. Notice that a window appears asking
    you to select between the emulator and a real Android device; select the Android
    device. A few seconds later, the app will be running in the Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application on an Android device](img/1103OS-03-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: HelloU app in the actual Android device. Getting help
  prefs: []
  type: TYPE_NORMAL
- en: The following are some references to guide you on using the Eclipse and ADT.
    You can spend some time going through the documentation and tutorial to get updated.
    Reading the tutorials and discussions at [stackoverflow.com](http://stackoverflow.com)
    are among the convenient way of learning these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Help** in the menu, and choose **Search**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Eclipse help: [http://help.eclipse.org/juno/index.jsp](http://help.eclipse.org/juno/index.jsp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ADT help: [http://developer.android.com/tools/help/adt.html](http://developer.android.com/tools/help/adt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android Developer''s official reference: [http://developer.android.com](http://developer.android.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ADT Update: regularly check the ADT update from the menu, **Help** | **Check
    for Updates**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More on DDMS: [http://developer.android.com/tools/debugging/ddms.html](http://developer.android.com/tools/debugging/ddms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You now have an Android app of your own. You have designed
    the screen layout, added a label, text field and a button. The simple interactivity
    exposed you to how to develop an android mobile app. In the next chapter, we will
    add more widgets and learn to develop more complex apps involving multiple screens.
  prefs: []
  type: TYPE_NORMAL
