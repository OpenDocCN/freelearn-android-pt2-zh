- en: Chapter 3. Creating a New Android Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 创建新的Android项目
- en: This chapter will demonstrate how to create a new Android app with a simple
    interaction using the button and text field. We will also write interactivity
    code, compile and run an app on the emulator/actual device. To illustrate this
    chapter, we will be creating a simple project named HelloU app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将演示如何使用按钮和文本字段创建一个新的具有简单交互的Android应用。我们还将编写交互代码，编译并在模拟器/实际设备上运行应用。为了说明本章内容，我们将创建一个名为HelloU的简单项目。
- en: Creating new Android application project string resources
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的Android应用项目字符串资源
- en: Using the graphical layout designer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图形布局设计器
- en: String resources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串资源
- en: The XML layout editor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML布局编辑器
- en: Widgets' interactions through the source code editor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过源代码编辑器实现小部件的交互
- en: Toast message
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示信息
- en: Running the application on the emulator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模拟器上运行应用
- en: Running the application on an Android device
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android设备上运行应用
- en: Getting help
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取帮助
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你在[http://www.packtpub.com](http://www.packtpub.com)的账户下载你所购买的所有Packt图书的示例代码文件。如果你在其他地方购买了这本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)注册，我们会将文件直接通过电子邮件发送给你。
- en: Creating a new Android application project
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Android应用项目
- en: To create a new Android project in the Eclipse, navigate to **File** | **New**
    | **Project**. A new project window will appear, then choose **Android** | **Android
    Application Project** from the list. Click on the **Next** button.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中创建新的Android项目，选择**文件** | **新建** | **项目**。将出现新的项目窗口，然后从列表中选择**Android**
    | **Android Application Project**。点击**下一步**按钮。
- en: '**Application Name**: This is the name of your application, it will appear
    side-by-side to the launcher icon. Choose a project name that is relevant to your
    application.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用名称**：这是你的应用程序的名称，它将与应用启动图标并排显示。选择一个与你的应用相关的项目名称。'
- en: '**Project Name**: This is typically similar to your application name. Avoid
    having the same name with existing projects in Eclipse, it is not permitted.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目名称**：这通常与应用名称相似。避免与Eclipse中现有项目的名称相同，这是不允许的。'
- en: '**Package Name**: This is the package name of the application. It will act
    as an ID in the Google Play app store if we wish to publish. Typically it will
    be the reverse of your domain name if we have one (since this is unique) followed
    by the application name, and a valid Java package name, else we can have anything
    now and refactor it before publishing.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包名称**：这是应用程序的包名称。如果我们希望发布到Google Play应用商店，它将作为ID。通常，如果我们有一个域名（因为这是唯一的），它将是域名反转后跟应用程序名称，并是一个有效的Java包名称；否则，我们现在可以是任何名称，并在发布前进行重构。'
- en: The `android:minSdkVersion` is an integer designating the minimum API Level
    required for the application to run. If not sure, leave it to whatever is selected.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`android:minSdkVersion`是一个指定应用运行所需最低API级别的整数。如果不确定，可以保持默认选择。'
- en: For example, you might have your app set to `android:minSdkVersion="7"`. This
    setting will guarantee that your app works on devices with Android Éclair (2.1)
    or above, but not below.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能将应用设置为`android:minSdkVersion="7"`。这个设置将保证你的应用在Android Éclair（2.1）或更高版本的设备上运行，但不会在更低版本上运行。
- en: The `targetSdkVersion` is the target devices you are focusing on. Let's say
    your app has `android:minSdkVersion="16"`, it means the apps could utilize all
    the features of Android Jelly Bean. However, bear in mind that features, such
    as the ability to move the app to an SD card and native Unicode are not supported
    in Android (2.1) Eclair. Though these features are available starting in the API
    level 8 (Android 2.2/Froyo) and level 11 (Android 3.0/Honeycomb), they cannot
    be utilized in the lower version of Android.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`targetSdkVersion`是你关注的目标设备。假设你的应用有`android:minSdkVersion="16"`，这意味着应用可以利用Android
    Jelly Bean的所有功能。但是，请记住，如将应用移动到SD卡和原生Unicode支持等功能在Android（2.1）Eclair中是不支持的。尽管这些功能从API级别8（Android
    2.2/Froyo）和级别11（Android 3.0/Honeycomb）开始提供，但它们不能在更低版本的Android上使用。'
- en: Do keep in mind that your `targetSdkVersion` has to be equal or more than the
    `minSdkVersion`. Otherwise, it doesn't really make much sense.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你的`targetSdkVersion`必须等于或高于`minSdkVersion`。否则，这样做没有太大意义。
- en: 'Click on **Next** to move to the next step:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**移到下一步：
- en: '![Creating a new Android application project](img/1103OS_03_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的Android应用项目](img/1103OS_03_01.jpg)'
- en: Create a new Android project
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Android项目
- en: 'This is the window to configure your launcher icon. The launcher icon is the
    icon that will appear in the home screen or in the application drawer. This is
    an important aspect of your app as it will be representing the app. For this purpose,
    you may use the icon creator wizard using the available text and icon shape pre-customized
    in the ADT. Set the foreground as text, provide the letter `U` as the **Text**,
    pick the circle as the icon shape and adjust your color preference, as shown in
    the following screenshot. This wizard will create a simple icon and provides the
    ldpi (36x36 pixels), mdpi (48x48 pixels), hdpi (72x72 pixels) and xhdpi (96x96
    pixels) of the launcher icon. Icons of different sizes are created to address
    various devices with different configuration of screen sizes and resolution. Click
    on **Next** to proceed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是配置你的启动图标的窗口。启动图标是在主屏幕或应用抽屉中出现的图标。这是你应用的一个重要方面，因为它将代表你的应用。为此，你可以使用ADT中预定制好的文本和图标形状的图标创建向导。将前景设置为文本，提供字母`U`作为**文本**，选择圆形作为图标形状，并根据以下截图调整你的颜色偏好。这个向导将创建一个简单的图标，并提供ldpi（36x36像素）、mdpi（48x48像素）、hdpi（72x72像素）和xhdpi（96x96像素）的启动图标。创建不同大小的图标是为了适应各种具有不同屏幕尺寸和分辨率配置的设备。点击**下一步**继续：
- en: '![Creating a new Android application project](img/1103OS-03-02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的Android应用项目](img/1103OS-03-02.jpg)'
- en: Launcher icon creator
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 启动图标创建器
- en: 'Choose **BlankActivity** in the window, as shown in following screenshot, and
    click on **Next**:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在如下截图所示的窗口中选择**BlankActivity**，然后点击**下一步**：
- en: '![Creating a new Android application project](img/1103OS-03-03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的Android应用项目](img/1103OS-03-03.jpg)'
- en: Choose blank activity
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择空白活动
- en: 'The next window appears to input the `MainActivity` name, as shown in the following
    screenshot and click on the **Finish** button:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个窗口将出现以输入`MainActivity`的名称，如下截图所示，然后点击**完成**按钮：
- en: '![Creating a new Android application project](img/1103OS-03-03_1.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的Android应用项目](img/1103OS-03-03_1.jpg)'
- en: String resources
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串资源
- en: Usually, it is a practice for Android application to store the string values
    for user interface reference in the XML file due to the nature of mobile apps,
    which is distributed internationally. So it is best to provide multiple language
    options. However, this practice is optional, and you may use direct string assigning
    if you wish to do so.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于Android应用来说，将字符串值存储在XML文件中以便于用户界面引用是一种做法，这是因为移动应用具有国际化的特性。因此，最好提供多种语言选项。然而，这一做法是可选的，如果你愿意，也可以直接分配字符串。
- en: The string resource file is in an XML form and available through the project
    tree in `res/values/strings.xml`. These string resources can also be used to store
    color information, integer arrays to name some.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串资源文件以XML格式存在，可以通过项目树在`res/values/strings.xml`中找到。这些字符串资源还可以用来存储颜色信息、整型数组等。
- en: 'Now, add a new string value by clicking on the **Add** button, provide the
    variable name in the **Name** box and the **Value** of the string. Press *Ctrl*
    + *S* to save the changes. For example, in the following screenshot, a new string
    variable is created as `hello_u` and the value is **Hello,**:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**添加**按钮新增一个字符串值，在**名称**框中提供变量名和字符串的**值**。按*Ctrl* + *S*保存更改。例如，在以下截图中，创建了一个新的字符串变量`hello_u`，其值为**Hello,**：
- en: '![String resources](img/1103OS-03-04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![字符串资源](img/1103OS-03-04.jpg)'
- en: Adding a new string value
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的字符串值
- en: 'Add two more string values based on the table that follows. These strings will
    be used as the widgets'' caption:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据下表添加另外两个字符串值。这些字符串将用作小部件的标题：
- en: '| String variable | Value |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 字符串变量 | 值 |'
- en: '| --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `s_tvName` | Your name: |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `s_tvName` | 你的名字： |'
- en: '| `s_btnDisplay` | Display name! |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `s_btnDisplay` | 显示名字！ |'
- en: If you notice, we use `s_` to indicate it is a string variable from the resources,
    `tv` to indicate a `TextView`, and `btn` to indicate a button. Bear in mind that
    these conventions are not fixed, you may use your own preferences.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，我们使用`s_`来表示它是一个来自资源的字符串变量，`tv`表示`TextView`，`btn`表示按钮。请记住，这些约定不是固定的，你可以使用你自己的偏好。
- en: 'The new string values created will be saved in the `string.xml` file. The XML
    code is available by clicking on the tab on the red arrow, as shown in the following
    screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的字符串值将被保存在 `string.xml` 文件中。通过点击如下截图所示的红箭头指向的标签，可以查看 XML 代码：
- en: '![String resources](img/1103OS-03-05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![字符串资源](img/1103OS-03-05.jpg)'
- en: The string.xml code file
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: string.xml 代码文件
- en: Using the graphical layout designer
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图形布局设计器
- en: The next exercise is to add a text label, a text box and a button. These elements
    are called widgets in Android which has the class name `TextView`, `EditText`
    and `Button` in the Android API. We will not go through the details of these classes;
    most importantly we could apply these widgets in our app.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个练习是添加一个文本标签、一个文本框和一个按钮。这些元素在 Android 中被称为控件，其类名为 `TextView`、`EditText` 和
    `Button`。我们将不详细介绍这些类，最重要的是我们可以将这些控件应用到我们的应用中。
- en: To open this layout, double-click the `res/layout/activity_main.xml` file from
    the project explorer.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开这个布局，请从项目浏览器中双击 `res/layout/activity_main.xml` 文件。
- en: On the left of the app screen, you'll see the **Palette**. Browse the **Form
    Widgets**, there are several widgets including the `TextView`. Click and drag
    the `TextView` widgets to the app screen. Change the widget ID into `"@+id/tvName"`,
    and make sure to press *Enter* to confirm your changes and save them to the XML
    file. The `"@+id/"` is the ADT representation to say that the new ID has to be
    created and assigned to the widget.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用屏幕的左侧，你会看到 **Palette（调色板）**。浏览 **Form Widgets（表单控件）**，其中有几个控件包括 `TextView`。点击并将
    `TextView` 控件拖到应用屏幕上。将控件 ID 更改为 `"@+id/tvName"`，并确保按 *Enter* 键确认更改并将其保存到 XML 文件中。`"@+id/"`
    是 ADT 表示法，表示必须创建新的 ID 并将其分配给控件。
- en: 'After that, set the Text properties to point the value defined in the string
    resources, `s_tvName`. This could be done by clicking on the button with three
    dots, on the right side of each property. Press *Ctrl* + *S* to save the changes
    and to make sure the changes appear in the XML file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将 Text 属性设置为指向字符串资源中定义的值，`s_tvName`。可以通过点击每个属性右侧带有三个点的按钮来完成此操作。按下 *Ctrl*
    + *S* 保存更改，确保更改出现在 XML 文件中：
- en: '![Using the graphical layout designer](img/1103OS-03-06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![使用图形布局设计器](img/1103OS-03-06.jpg)'
- en: Changing the caption of a TextView
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 更改 TextView 的标题
- en: 'The next widget to add is the EditText with **Id** `txtName`, associate label
    as **Your name:** to accept user input, as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要添加的控件是带有 **Id** `txtName` 的 EditText，关联标签为 **Your name:** 以接受用户输入，如下截图所示：
- en: '![Using the graphical layout designer](img/1103OS-03-07.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![使用图形布局设计器](img/1103OS-03-07.jpg)'
- en: Adding an EditText
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个 EditText
- en: 'Add another widget, button, specify ID `btnDisplay` and associate label as
    **Display Name**, as shown, and expand it horizontally across the screen. You
    may use the resize feature by clicking and dragging the bluish resize mark on
    the edge of the widget:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 添加另一个控件，按钮，指定 ID `btnDisplay` 并关联标签为 **Display Name**，如下所示，并将其水平扩展到整个屏幕。你可以通过点击并拖动控件边缘的蓝色调整标记来使用调整大小的功能：
- en: '![Using the graphical layout designer](img/1103OS-03-08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用图形布局设计器](img/1103OS-03-08.jpg)'
- en: Adding a Button
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个 Button
- en: The XML layout code editor
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML 布局代码编辑器
- en: 'The code editor is an alternative to change the layout properties. We recommend
    you change this code directly if you have prior knowledge of XML. It''s a straight
    forward XML code actually. To access this code directly, just click the `activity_main.xml`
    on the bottom of the layout editor, as shown in following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器是更改布局属性的另一种方式。如果你有 XML 的先验知识，我们建议直接更改此代码。这实际上是一段简单的 XML 代码。要直接访问此代码，只需点击布局编辑器底部的
    `activity_main.xml`，如下截图所示：
- en: '![The XML layout code editor](img/1103OS-03-09.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![XML 布局代码编辑器](img/1103OS-03-09.jpg)'
- en: Accessing the XML layout code editor
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 XML 布局代码编辑器
- en: Widget interactions through the source code editor
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过源代码编辑器进行控件交互
- en: The layout we designed previously does not have to interact with each other
    automatically; let's make it happen. To put in simple words, when we execute the
    project, clicking on the button on the app will not trigger any action. We need
    to add the code for the interactions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前设计的布局不需要自动相互交互；让我们实现这一点。简单来说，当我们执行项目时，点击应用上的按钮不会触发任何操作。我们需要添加交互的代码。
- en: What we are trying to do is when the user taps on the button **Display Name!**,
    the app will capture any text inside the `TextView` and produce a simple popup
    to display your name.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们试图实现的是当用户点击 **显示名称！** 按钮时，应用将捕获 `TextView` 内的任何文本，并生成一个简单的弹出窗口来显示你的名字。
- en: To achieve our goal let's play around, go to `src`, double click on the `package`
    folder and double click again on the file `MainActivity.java`. This Java file
    will contain the code to load the layout of the XML file `main_activity.xml` in
    order to create a UI. The Java code as follows is the default code provided by
    ADT.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到我们的目标，让我们随意操作，进入 `src` 目录，双击 `package` 文件夹，再次双击文件 `MainActivity.java`。这个
    Java 文件将包含加载 XML 文件 `main_activity.xml` 的布局代码，以创建一个 UI。以下是由 ADT 提供的默认代码。
- en: You will see the package name on line one and several classes imported to the
    project. The code in line six is the main class declaration which inherits the
    `Activity` class. method `onCreate` in line eight is the first method to be called
    when the apps start. The `setContentView(R.layout.activity_main)` is the command
    to initialize the screen layout based on the main screen designed previously.
    And the method in line 13, which is to create the screen menu, will be discussed
    later in [Chapter 5](ch05.html "Chapter 5. Adding RadioButton, CheckBox, Menu,
    and Preferences"), *Adding RadioButton, Checkbox, Menu, and Preferences*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在第一行看到包名和导入项目的几个类。第六行的代码是主类声明，它继承了 `Activity` 类。第八行的 `onCreate` 方法是应用启动时第一个被调用的方法。`setContentView(R.layout.activity_main)`
    是根据之前设计的主屏幕初始化屏幕布局的命令。第13行的创建屏幕菜单的方法将在 [第五章](ch05.html "第五章. 添加单选按钮、复选框、菜单和偏好设置")
    *添加单选按钮、复选框、菜单和偏好设置* 中讨论。
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In order to provide button interaction, we need to add implements `OnClickListener`
    to the main class header.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供按钮交互，我们需要在主类头部添加实现 `OnClickListener`。
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the import section of the code, add this line:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的导入部分，添加这一行：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, initialize all the widgets that will get involved in the process. Immediately
    after the main class header, add the widgets' member declaration.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，初始化将在过程中涉及的所有小部件。在主类头部之后，立即添加小部件的成员声明。
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since `EditText` and `Button` are also another class which needs to be imported
    from the Android API, so add a couple of lines in the import section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `EditText` 和 `Button` 也是需要从 Android API 导入的另一个类，所以在导入部分添加几行。
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Eclipse you do not need to memorize all the classes and the packages' names
    that are needed to be imported. Just put the cursor (caret) to the class and press
    *Ctrl* + *Shift* + *O*. The IDE will help you to include the packages involved
    or point your mouse to the additional class, a menu will come out, and choose
    to import the class.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Eclipse 中，你不需要记住所有需要导入的类和包的名称。只需将光标（插入符号）放在类上，按 *Ctrl* + *Shift* + *O*。IDE
    将帮助你包含相关的包或者将鼠标指向其他类，会弹出一个菜单，选择导入该类。
- en: '![Widget interactions through the source code editor](img/1103OS-03-10.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![通过源代码编辑器进行小部件交互](img/1103OS-03-10.jpg)'
- en: Menu to import class from the Android API
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Android API 导入类的菜单
- en: Next is to link the code and the layout design in the `MainActivity.xml file`.
    This is needed since the ADT is incorporating the MVC (Model-View-Controller)
    development method. It means that the screen layout is separated from the code
    to provide high project maintainability.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在 `MainActivity.xml` 文件中将代码与布局设计相链接。这是必要的，因为 ADT 正在采用 MVC（模型-视图-控制器）开发方法。这意味着屏幕布局与代码分离，以提高项目的可维护性。
- en: Basically after the layout has been loaded using `setContentView` you need to
    have access to these widgets that hide within that layout. This is where `findViewById
    ()` comes into play.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在通过 `setContentView` 加载布局之后，你需要访问隐藏在该布局中的这些小部件。这时 `findViewById()` 就派上用场了。
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The button is the action; we need to add the event listener to the button.
    The line to add is as follow:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮是动作；我们需要为按钮添加事件监听器。需要添加的行如下：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we made the Activity itself implement `onClickListener`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们让 Activity 本身实现 `onClickListener`。
- en: 'For any on-click event to be handled, Java needs a special method to be included.
    Inside the method is where the task will be executed. In our case, if the user
    clicks (or taps) the button (`btnDisplay`), the app will extract the content of
    the text field (`txtName`) and display the content on the screen. The action can
    be coded as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理任何点击事件，Java需要包含一个特殊的方法。在这个方法内部，将执行任务。在我们的案例中，如果用户点击（或轻触）按钮（`btnDisplay`），应用将提取文本字段（`txtName`）的内容并在屏幕上显示。该动作可以按以下方式编码：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`View arg0` is the element that triggers the action. `arg0.getId()` is the
    method to get the ID of the widget triggering the action. If the widget ID is
    the `btnDisplay`, then do the action of capturing the input and display it to
    the screen.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`View arg0`是触发动作的元素。`arg0.getId()`是获取触发动作的小部件ID的方法。如果小部件ID是`btnDisplay`，则执行捕获输入并在屏幕上显示的动作。'
- en: 'To fetch the string of text field widgets, use the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取文本字段小部件的字符串，请使用以下代码：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Toast.makeText()` is the method to display a short/brief message on the screen,
    we will discuss it in the next section.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Toast.makeText()`是在屏幕上显示简短消息的方法，我们将在下一节讨论它。'
- en: 'The complete code would be:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码将是：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Toast message
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Toast消息
- en: This is one of the common practices to pop-up a message box for notifying the
    user. This kind of notification is a type of notification that does not require
    a user answer or feedback.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种常见的做法，用于弹出消息框以通知用户。这种通知是一种不需要用户回答或反馈的通知类型。
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`Toast.makeText()` contains three parameters which are the application context,
    the message and the time length.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Toast.makeText()`包含三个参数，分别是应用上下文、消息和显示时长。'
- en: The application context is the current screen to display the message
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用上下文是当前要显示消息的屏幕
- en: The message is the string to be displayed
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要显示的消息是字符串
- en: The time length is consisting of a short or longer duration of the message display
    and has to be one of `Toast.LENGTH_*` constants
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示时长包括消息显示的短时间或长时间，必须是`Toast.LENGTH_*`常量之一
- en: 'The arrow in the following screenshot is pointing to a Toast:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图中的箭头指向一个Toast：
- en: '![Toast message](img/1103OS-03-11.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Toast消息](img/1103OS-03-11.jpg)'
- en: Example of a Toast
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Toast的一个示例
- en: Running the application on the emulator
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模拟器上运行应用
- en: Running the **HelloU** app in the emulator would need you to start the emulator
    first. Start the emulator that has the Android version that suits your target
    platform. Once the emulator is fully loaded, we can compile and run the app.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器中运行**HelloU**应用需要你先启动模拟器。启动一个与你的目标平台相匹配的Android版本的模拟器。一旦模拟器完全加载，我们就可以编译并运行应用。
- en: 'Click on the **HelloU** project on the project explorer (this is to activate
    the project). Navigate to **Run** in the Eclipse menu, and choose **Run** or press
    *Ctrl* + *F11* for a shortcut. Select run as Android Application, and *Enter*.
    Wait for a couple of seconds and view your emulator. The **HelloU** app will appear
    shortly, as in shown in the following screenshot. Enter your name and tap on the
    **Display Name!** button, the Toast message will appear with the name entered
    on the bottom of the screen:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目资源管理器上点击**HelloU**项目（这是为了激活项目）。在Eclipse菜单中导航到**运行**，选择**运行**或按快捷键*Ctrl* +
    *F11*。选择作为Android应用运行，并按下*Enter*。等待几秒钟，查看你的模拟器。**HelloU**应用很快就会显示，如下面的截图所示。输入你的名字，点击**显示名字！**按钮，屏幕底部将出现带有输入名字的Toast消息：
- en: '![Running the application on the emulator](img/1103OS-03-12.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![在模拟器上运行应用](img/1103OS-03-12.jpg)'
- en: The HelloU app running in the Emulator
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器中运行的HelloU应用
- en: Running the application on an Android device
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android设备上运行应用
- en: To run and deploy on a real device, first install the driver of the device.
    This varies as per device model and manufacturer.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要在真实设备上运行和部署，首先安装设备的驱动程序。这会根据设备型号和制造商而有所不同。
- en: 'These are some links you could refer:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些你可以参考的链接：
- en: For Google Android devices only [http://developer.android.com/sdk/win-usb.html](http://developer.android.com/sdk/win-usb.html).
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅适用于Google Android设备[http://developer.android.com/sdk/win-usb.html](http://developer.android.com/sdk/win-usb.html)。
- en: 'Others: [http://www.teamandroid.com/download-android-usb-drivers/](http://www.teamandroid.com/download-android-usb-drivers/).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他：[http://www.teamandroid.com/download-android-usb-drivers/](http://www.teamandroid.com/download-android-usb-drivers/)。
- en: Make sure the Android phone is connected to the computer through the USB cable.
    To check whether the phone is properly connected to your PC and in debug mode,
    please switch to the DDMS perspective.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安卓手机通过 USB 线连接到电脑。要检查手机是否已正确连接到你的电脑并处于调试模式，请切换到 DDMS 视角。
- en: '![Running the application on an Android device](img/1103OS-03-13.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![在安卓设备上运行应用](img/1103OS-03-13.jpg)'
- en: The Android phone as appear in the DDMS.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DDMS 中显示的安卓手机。
- en: If everything goes well, then run the app. Notice that a window appears asking
    you to select between the emulator and a real Android device; select the Android
    device. A few seconds later, the app will be running in the Android phone.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，运行应用。注意会弹出一个窗口，让你选择模拟器和一个真实的安卓设备；选择安卓设备。几秒钟后，应用将在安卓手机上运行。
- en: '![Running the application on an Android device](img/1103OS-03-14.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![在安卓设备上运行应用](img/1103OS-03-14.jpg)'
- en: HelloU app in the actual Android device. Getting help
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际安卓设备上运行 HelloU 应用。获取帮助
- en: The following are some references to guide you on using the Eclipse and ADT.
    You can spend some time going through the documentation and tutorial to get updated.
    Reading the tutorials and discussions at [stackoverflow.com](http://stackoverflow.com)
    are among the convenient way of learning these tools.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于如何使用 Eclipse 和 ADT 的参考资料。你可以花些时间阅读文档和教程以获取更新。在[stackoverflow.com](http://stackoverflow.com)上阅读教程和讨论是学习这些工具的便捷方式之一。
- en: Go to **Help** in the menu, and choose **Search**.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在菜单中选择**帮助**，然后选择**搜索**。
- en: 'Eclipse help: [http://help.eclipse.org/juno/index.jsp](http://help.eclipse.org/juno/index.jsp)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse 帮助：[http://help.eclipse.org/juno/index.jsp](http://help.eclipse.org/juno/index.jsp)
- en: 'ADT help: [http://developer.android.com/tools/help/adt.html](http://developer.android.com/tools/help/adt.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ADT 帮助：[http://developer.android.com/tools/help/adt.html](http://developer.android.com/tools/help/adt.html)
- en: 'Android Developer''s official reference: [http://developer.android.com](http://developer.android.com)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓开发者官方参考文档：[http://developer.android.com](http://developer.android.com)
- en: 'ADT Update: regularly check the ADT update from the menu, **Help** | **Check
    for Updates**.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ADT 更新：定期从菜单中的**帮助** | **检查更新**来检查 ADT 更新。
- en: 'More on DDMS: [http://developer.android.com/tools/debugging/ddms.html](http://developer.android.com/tools/debugging/ddms.html)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于 DDMS 的信息：[http://developer.android.com/tools/debugging/ddms.html](http://developer.android.com/tools/debugging/ddms.html)
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! You now have an Android app of your own. You have designed
    the screen layout, added a label, text field and a button. The simple interactivity
    exposed you to how to develop an android mobile app. In the next chapter, we will
    add more widgets and learn to develop more complex apps involving multiple screens.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！现在你拥有了自己的安卓应用。你已经设计了屏幕布局，添加了标签、文本字段和按钮。简单的交互性让你了解了如何开发安卓移动应用。在下一章中，我们将添加更多小部件并学习开发涉及多个屏幕的更复杂应用。
