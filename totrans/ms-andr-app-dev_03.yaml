- en: Chapter 3. Creating and Accessing Content from the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to consume content from the Web using our
    application; this content could be a list of items inside an XML or JSON file
    (something that we wish to display), retrieved from the Internet. For instance,
    if we were building an app that shows the current weather conditions, we would
    need to contact an external API to retrieve all the information needed.
  prefs: []
  type: TYPE_NORMAL
- en: We will create our own cloud database in Parse, a service that allows us to
    do this really quickly without the hassle of creating and maintaining our own
    servers. Apart from this, we will populate the database with information to be
    displayed in `MasteringAndroidApp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also cover best practices regarding network requests with Google Volley,
    using the ultrafast HTTP library, OkHttp, and parsing the requested objects efficiently
    with Gson. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own cloud database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming content from Parse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Volley and OkHttp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing objects with Gson
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own cloud database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this stage of the project, we have to start modeling our own version of `MasteringAndroidApp`.
    Feel free to develop your own ideas and use the database for your own data. Follow
    this example as a guide; you don't necessarily have to copy all the lines of code
    exactly as I write them. In fact, if you develop your own example at the end of
    this book, you will have something that you can use. For instance, you can create
    an app for your own personal use, such as a task reminder, travel diary, personal
    photo gallery—or anything else that is suitable for storage in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: You could also try to monetize this app; in this case, you should try to develop
    something interesting for users. For instance, it can be a news feed reader or
    recipes reader for food; it can be any app where you can submit content to the
    cloud and notify users that new content is available.
  prefs: []
  type: TYPE_NORMAL
- en: During this process, we will explain the importance of the `Application` class,
    which is used to set up Parse in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Parse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parse is free if you have less than 30 requests per second. I imagine that if
    you have enough users requesting information from your app 30 times per second,
    which is 1,800 per minute, you can surely afford to upgrade to a paid account
    or even build your own server! This service is a very easy and reliable way to
    have the server side covered for your app. It also provides a push notifications
    service and analytics, that's another point in favor.
  prefs: []
  type: TYPE_NORMAL
- en: We will proceed with creating a new account; after this, we need to name our
    application in Parse. Here, I will use `MasteringAndroid`. Once you name the application,
    you will be on the main page of your account. We need to navigate to **Data Service**
    | **Mobile** | **Android** | **Native Java**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the data services as a cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Parse](img/B04887_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Parse SDK to our project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the data service from our app, we need to install the **Parse SDK**
    (**System Development Kit**). For this, Parse refers us to a quick start guide,
    which contains all of the code, including the API Keys for our application, that
    is ready to be copied and pasted into our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, we need to complete two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one is to download a `.jar` library file that we need to copy into
    the `libs` folder in our project. After copying it, we need to tell our build
    system to include this library in our application. To do this, we need to find
    the `build.gradle` file inside our Application folder (be careful, there are two
    `build.gradle` files in our project) and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the following image, you can see the two files named `build.gradle`; the
    one that is selected is the right one:![Adding the Parse SDK to our project](img/B04887_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second step is to initialize the Parse SDK in our project; for this, we
    can navigate directly to [https://www.parse.com/apps/quickstart?app_id=masteringandroidapp](https://www.parse.com/apps/quickstart?app_id=masteringandroidapp).
    Replace your own app ID in the link or find the link by clicking on your home
    page, as in the following screenshot:![Adding the Parse SDK to our project](img/B04887_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on **quickstart guide**, go to **Data** | **Mobile** | **Android**
    | **Native** | **Existing Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will ask you to add the `INTERNET` and `ACCESS_NETWORK_STATE` permissions
    to your `AndroidManifest.xml` file if they are not already added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android's Application class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing we can take note of is that we need to add the code to initialize
    Parse to our `Application` class; however, our `Application` class is not created
    by default in our project. We need to create and understand what the `Application`
    class is and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: To create an Application class, we will right-click on our package and create
    a new Java class called `MAApplication` extending `Application`. Once this extends
    `Application`, we can override the `onCreate` method. Then, we will right-click
    inside our **class** | **Generate.** | **Override Methods** | **onCreate**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will override the `onCreate` method, and we will be ready to implement
    our own functionality there. The `onCreate` method is called every time our `Application`
    is created; therefore, it''s the right place to initialize our libraries and third-party
    SDKs. Now, you can copy and paste the Parse initialization lines as seen in quick
    start guide:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful, this is unique, and for your own account you should have your own
    keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To finish, we need to tell our app that we have a new `Application` class and
    that that's the one we want to use; if we don't do this, our `Application` class
    won't be recognized and `onCreate` won't be called.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our manifest, inside the `<application>` tag, we need to set the attribute
    name to match our own application. Execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The Application class encapsulates everything in our app; the activities are
    contained in the application, and subsequently, the fragments are contained in
    the **Activities**. If we need a global variable in our app that needs to be accessed
    by all Activities/Fragments, this would be the right place to have it. In the
    next chapter, we will see how we can create this global variable. The following
    diagram is the graphic structure of an app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android''s Application class](img/B04887_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we know, the example that we will create during this book is an app that
    will have Android-related job offers; therefore, we need to create a database
    to store these job offers.
  prefs: []
  type: TYPE_NORMAL
- en: The database can be changed during development (this will be more difficult
    to do when the app is released and has users). However, for now we will look at
    the big picture, creating the whole system rather than having a final version
    of the database with all the fields completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a table, click on the **Core** section as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the database](img/B04887_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, create a table by clicking on the **+ Add Class** button and call it
    **JobOffer** with the following attributes, which can be added by clicking on
    the **Col+** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objectId`: This is created by default: `String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This is the job title: `String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This is the job description: `String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`salary`: This indicates the salary or daily rate: `String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`company`: This indicates the company offering the job: `String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This indicated the type of employee, which is permanent, contract,
    or freelancer: `String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imageLink`: This is the image of the company: `String`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Location`: This indicates the location of the job: `String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createdAt` , `updatedAt`: This is the date of the job; the columns are created
    with a default date'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To add data to the tables, select the table on the left and click on **+ Row**.
    We only need to complete the columns that we created; the columns created by default,
    such as the ID or date, will be completed automatically. So far, our table should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the database](img/B04887_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Feel free to add more details, such as the contact person, e-mail, and mobile
    number. You could also add more tables; for instance, a new `JobType` table containing
    the type of job and the field type instead of `String` would be `Relation<JobType>`.
  prefs: []
  type: TYPE_NORMAL
- en: We have what we need for our example; the next thing to do is consume this data
    using our app.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and consuming content from Parse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parse is a very powerful tool that allows us to not only consume content very
    easily but also to store content in the cloud database from our device, which
    is a tedious task to do using the traditional method.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we wanted to upload an image to a custom server from our device,
    we would have to create a `POST` request and send a form with the right encoding,
    while attaching the picture as a `FileBody` object in `MultiPartEntity` and importing
    the Apache HTTP libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s have a look at the Parse alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s not forget error handling on Parse. In a very elegant way, you can simply
    write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Storing content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To elaborate on the simplicity of Parse, we will upload job offers to our Parse
    Cloud from our app.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we can create a button inside Contact Fragment, which we will
    set to invisible in the final version of the app as we don't want the users to
    upload job offers themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this button, we will create `ParseObject`, which is similar to a map.
    We will add the fields that we want to complete, and after this we will call the
    `saveInBackground()` method, which is the method that will upload the object.
    Execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If, in your own version of `MasteringAndroidApp`, you want the user to upload
    content, you could display a dialog with `EditText` for every field so that the
    user can write the job offer, press upload, and have you send the `jobOffer` object
    with the fields written by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Run the app, navigate to **Contact**, and click on the button. If the data is
    uploaded correctly, upon opening the Parse Cloud database in a browser, you should
    see an extra row with the job offer just uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to add the permissions in `AndroidManifest.xml`, `android.permission.ACCESS_NETWORK_STATE`,
    and `android.permission.INTERNET`.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our objects in the Parse Cloud have an object identifier by default; it is
    the `objectId` field. Let''s start retrieving an object by the ID, and after this,
    we can retrieve a list of all the objects with and without filters. Run the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `ParseQuery` object will perform a query over the network asynchronously
    when the network request is finished. The method; `done (the ParseObject object,
    ParseException e)`, which is included in the callback, will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to test the result is to print a log; in cases where the exception
    is `null`, it means that everything is okay.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We could extract every field from `ParseObject` and create a `JobOffer` class
    in our app with a constructor whose parameters match the fields of the object.
    Use the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'However, there is a better way to do this. We can create a `JobOffer` class
    that extends `ParseObject` and where all fields will be automatically converted
    into variables in our class. This way, we can use our own class in a very convenient
    way instead of `ParseObject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to add the `@ParseClassName("Name")` annotation at the top of
    the class to let Parse know which object from the Cloud we want to instantiate
    and to register the subclass before initiating parse in `MAApplication`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our custom class created, it''s even easier to get a list
    with all the job offers. If we want, we can filter it with a parameter. For instance,
    I could retrieve all the permanent jobs with the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Displaying content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the list of objects is retrieved, it is possible to create `ListView` and
    an `Adapter` that receives the objects as the parameters. To finish with Parse,
    we will use another feature that allows us to create an adapter directly from
    the result of the query; so, we don't have to create an `Adapter` class ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'In both cases, we need to create `ListView` and view for the rows of the list.
    For now, just displaying the title and the first line of the description will
    do. We will customize this and add an image in [Chapter 7](ch07.html "Chapter 7. Image
    Handling and Memory Management"), *Image Handling and Memory Management*. Create
    a `row_job_offer.xml` layout as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to create `ParseQueryAdapter` and customize the `getItemView()`
    method. The huge advantage of this adapter is that we don't need to download data
    with a query because it is automatically done; basically, we can show a list of
    items from the cloud creating an adapter. It has never been so easy!
  prefs: []
  type: TYPE_NORMAL
- en: To override a method from a class—in this case, we want to override `getItemView`—we
    could create a subclass, a `MyQueryAdapter` class that extends `ParseQueryAdapter`
    and overrides the method inside this subclass. This is a good solution, especially
    if we want to instantiate the object more than once in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there is a way to override methods from a class without having to
    extend it; we can add `{ }` after the object instantiation. For instance, refer
    to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this approach, I can create a new `ParseQueryAdapter` and customize `getItemView`,
    as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We will now create `ListView` in the layout of our `ListFragment`, find this
    view in `OnCreateView`, set the adapter to the list, and that's all. No more code
    is needed to retrieve the items and display them. If your list is empty, ensure
    that you import `com.packtpub.masteringandroidapp.fragments.ListFragment;` instead
    of `android.support.v4.app.ListFragment` in `MyPagerAdapter`; they are different
    objects, and using the latter would lead to an empty android built-in `ListFragment`
    being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying content](img/B04887_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Google Volley and OkHttp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To master Android, we can't depend on a solution such as Parse. As developers,
    we must be prepared to face different server-side solutions. We can't always work
    with `ParseObjects` because we need to be able to do an HTTP `Post` request and
    consume the data in the JSON or XML format. However, this doesn't mean that we
    have to do all of this manually; we can use Google's official libraries to help
    us with parsing the data and the network requests.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will take a look at **Google Volley**, a powerful library, to manage
    our network requests. We will also discuss **OkHttp**, an ultrafast HTTP client,
    and combining the two them to get an amazing solution for network requests.
  prefs: []
  type: TYPE_NORMAL
- en: Google Volley
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to the official definition and list of features from [https://developer.android.com/training/volley/index.html](https://developer.android.com/training/volley/index.html),
    "*Volley is an HTTP library that makes networking for Android apps easier and,
    most importantly, faster*".
  prefs: []
  type: TYPE_NORMAL
- en: 'Volley offers the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic scheduling of network requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple concurrent network connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A transparent disk and memory response caching with a standard HTTP cache coherence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for request prioritization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cancellation of request API; this means that you can cancel a single request,
    or set blocks or scopes of requests to cancel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ease of customization; for example, for retry and backoff
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strong ordering, which makes it easy to correctly populate your UI with data
    fetched asynchronously from the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging and tracing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before Volley was born, managing network requests in Android was a hard task.
    Almost every application performs network requests. Features such as customizing
    retries—in case a connection fails and we need to try again—and managing concurrent
    network connections usually needed to be implemented manually by the developer.
    Nowadays, we are used to these kinds of libraries, but if we think about the situation
    some years ago, Volley is an excellent solution to this problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before taking a look at how to create a request, we need to understand the
    concept of the Volley request queue object, `RequestQueue`. Every request performed
    by Volley must be added to this queue in order for it to be executed. The idea
    behind this is to have one single request queue in our application where all the
    network requests can be added and accessed by us from any part of our app. We
    will see how we can have an instance of an object that can be accessed globally
    in, [Chapter 4](ch04.html "Chapter 4. Concurrency and Software Design Patterns"),
    *Concurrency and Software Design Patterns*. Take a look at the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This request queue will use the following `HttpURLConnection` or `AndroidHttpClient`
    methods only if the Android version of the device is later than Gingerbread; `HttpURLConnection`
    is unreliable in versions earlier than Gingerbread.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When the request queue is instantiated, we just need to add a request to it.
    For instance, a network requests [https://www.google.com](https://www.google.com),
    which logs the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The request will be performed, and the `onResponse(…)` or `onErrorResponse(…)`
    method will be called in the application main thread, also known as the UI thread.
    We will explain the threads in Android in more detail in [Chapter 4](ch04.html
    "Chapter 4. Concurrency and Software Design Patterns"), *Concurrency and Software
    Design Patterns*.
  prefs: []
  type: TYPE_NORMAL
- en: OkHttp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OkHttp is an HTTP and SPDY client for Android and Java from the company, Square.
    It is not an alternative to Volley as it doesn't include a request queue. In fact,
    we could use OkHttp as an underlying layer for Volley, as we will see in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: According to the official definition, "*HTTP is the way modern applications
    network. It's how we exchange data and media. Doing HTTP efficiently makes your
    stuff load faster and saves bandwidth*".
  prefs: []
  type: TYPE_NORMAL
- en: If we don't need to handle requests in a queue, prioritize requests, or schedule
    requests, we could use OkHttp directly in our app; we don't necessarily need Volley.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following method prints the contents of a response from a
    given URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Apart from being an easier way to do the requests than using `AsyncTask` or
    `HttpUrlConnection`, what convinces us to use OkHttp is the SPDY (**speedy**)
    protocol, which processes, tokenizes, simplifies, and compresses HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: A lightning-fast network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to keep the features of Volley to be able to have a flexible and
    manageable queue of requests and have quicker connections using the protocol SPDY,
    we can combine Volley and OkHttp.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is really easy to do; while instantiating the request queue, we can specify
    which `HttpStack` method we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `OkHttpStack` is a class that we will create ourselves by extending `HurlStack`,
    which will use `OkUrlFactory`. This `OkUrlFactory` will open a URL connection;
    this will be done internally and there is no need to override the `createConnection`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: JSON and Gson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an Android developer, sooner or later you will have to work with network
    requests in the JSON format. In some cases, you may also find XML, which makes
    it more tedious to translate to an object. It is important to know how to perform
    a network request by sending parameters in JSON and also how to consume data in
    the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON and GSON are two different things; we need to understand the difference.
    JSON, or JavaScript Object Notation, is an open standard format that uses human-readable
    text to transmit data objects consisting of attribute–value pairs. It is used
    primarily to transmit data between a server and web application as an alternative
    to XML. This is an example of a JSON file; as you can see, we can have different
    types of attributes, and we can have nested JSON structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Following are two examples of sending a network request with parameters as
    JSON. These examples cover Volley and OkHttp, which we discussed earlier in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Gson** (**Google Gson**) is an open source Java library used to serialize
    and deserialize Java objects to (and from) JSON.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were downloading the job offers for our application from a custom server
    in JSON, it would be in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Again, we don't want to create a new object manually and set all the parameters
    by retrieving them from JSON; what we want to do is create a `JobOffer` object
    from JSON. This is called **deserialization**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this, we need to import the GSON library as a dependency in `build.gradle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Gson has the `fromJSON` and `toJSON` methods to serialize and deserialize,
    respectively. The `fromJson` method takes the JSON code to convert, and the class
    of the object that we want it to be converted into, as the input. Use the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If instead of a single object we had a list, which is the typical scenario
    while requesting data, we would need an extra step to get the type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To finish, if we want the fields in our class to have a different name than
    the fields of the JSON code to be deserialized, we can use annotations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, you should be able to create your own database in
    Parse and consume content from the application. You should also have all the necessary
    knowledge to master network requests using Volley and OkHttp, especially while
    performing network requests and exchanging data in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explain in further detail, some of the patterns
    used in this chapter for the HTTP libraries. For instance, we will understand
    what a callback is and which pattern it follows, as well as other commonly used
    software patterns in Android.
  prefs: []
  type: TYPE_NORMAL
