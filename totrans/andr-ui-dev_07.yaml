- en: Chapter 7. Animating Widgets and Layouts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章. 动画小部件和布局
- en: '*Animations are an important element in the user interface design of a modern
    application. However, it''s also easy to overuse animations in your designs. A
    general guideline for animation use in a non-game application is—only animate
    user interactions and notifications, and keep the duration short so that it doesn''t
    impact the user''s experience negatively. For a game, more animation is generally
    acceptable (or even expected).*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*动画是现代应用程序用户界面设计的重要元素。然而，在设计中过度使用动画也是很容易的。在非游戏应用程序中使用动画的一般准则是——只对用户交互和通知进行动画处理，并保持动画时长简短，以免对用户体验产生负面影响。对于游戏来说，更多的动画通常是可以接受的（甚至可能是预期的）。*'
- en: So why animate user interaction and not (for example) the background of your
    application? For one thing, animating the background of an application is distracting,
    and if you are trying to capture or present important information to the user,
    it's unprofessional (no matter how good it looks). Animations are also very important
    in regards to notifications. Movement on the screen draws attention, thus what
    would normally be a large pop-up dialog can be replaced by a small animating icon.
    A perfect example of such an icon is the "downloading" icon which is placed at
    the top left of the notification area of an Android device when the Android **Market**
    application is downloading new software or updates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么动画要针对用户交互而不是（例如）应用程序的背景呢？一方面，动画化应用程序的背景是分散注意力的，如果你试图捕捉或向用户呈现重要信息，这是不专业的（无论它看起来多好）。关于通知，动画也非常重要。屏幕上的移动会吸引注意力，因此，通常需要一个大的弹出对话框可以被一个小型动画图标所替代。一个完美的例子就是在安卓设备的通知区域顶部左侧放置的“下载中”图标，当安卓**市场**应用程序正在下载新软件或更新时。
- en: Layout animations and transitions provide useful status information to the user.
    When using a screen transition you tell your user what has just happened, or what
    is about to happen. Different transitions signify different events to your users,
    knowing what transition to use for each different activity will let your users
    know what kind of action is about to be taken. Layout animations are an important
    part of your user feedback, leaving them out or using the wrong one in the wrong
    place can leave your users irritated, or slightly confused ("change dazed"). Using
    the right animations will improve user experience, and can even speed up their
    use of the application by giving them brief cues as to what they are expected
    to do next.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 布局动画和过渡为用户提供了有用的状态信息。当使用屏幕过渡时，你告诉用户刚刚发生了什么，或者即将发生什么。不同的过渡对用户意味着不同的事件，了解每个不同活动应使用哪种过渡，将让用户知道即将采取哪种类型的动作。布局动画是用户反馈的重要组成部分，如果省略它们或在错误的地方使用错误的动画，可能会让用户感到烦躁或稍微有些困惑（“改变茫然”）。使用正确的动画将提升用户体验，甚至可以通过提供简短的提示，告诉用户接下来需要做什么，从而加快他们使用应用程序的速度。
- en: In this chapter, there are two primary types of animation which we will be looking
    at—widget animations and layout animations. We'll look at the standard animation
    structures provided by Android, and we'll look at how to create new animation
    types and extend the existing ones. We'll also be looking at timing and "good
    practice" use of animations, and keeping users happy without slowing them down
    or distracting them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍两种主要的动画类型——小部件动画和布局动画。我们将查看安卓提供的标准动画结构，并探讨如何创建新的动画类型和扩展现有类型。我们还将探讨动画的定时和“良好实践”使用，以及在不降低速度或分散注意力的前提下让用户保持愉悦。
- en: Using standard Android animations
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准的安卓动画
- en: Any `View` or `ViewGroup` object in Android can have an animation attached to
    it. Animations are generally defined as application resources in an XML file,
    and Android provides a few useful defaults in the `android` package. Android also
    includes several `View` classes which are designed specifically to handle animations.
    With these classes you will find that they have layout attributes which allow
    you to set a particular types of animations that will be used upon certain actions.
    However, animations are generally not specified in a layout file, instead they
    rely on the Java code to set and start `Animation` objects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓中的任何`View`或`ViewGroup`对象都可以附加动画。动画通常在XML文件中定义为应用程序资源，安卓在`android`包中提供了一些有用的默认动画。同时，安卓还包含几个专门设计用来处理动画的`View`类。使用这些类时，你会发现它们具有布局属性，这些属性允许你为某些特定动作设置特定类型的动画。然而，通常在布局文件中并不指定动画，而是依赖Java代码来设置和启动`Animation`对象。
- en: The main reason why animations are not normally specified as part of the layout
    XML is very simple—when should they run? Many animations can be used as a response
    to user input, letting the user know what's happening. Most animations will in
    some way or the other be triggered by a user's action (unless they are there to
    serve as a notification). Thus you will need to specify both—which animation to
    run on a widget, and the signal about when the animation should run. The default
    Android animations will begin animating immediately, while other animation structures
    may have a scheduled delay before they start.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 动画通常不作为布局XML的一部分来指定，原因非常简单——它们应该在何时运行？许多动画可以作为对用户输入的响应，让用户知道正在发生什么。大多数动画在某种程度上都会由用户的行为触发（除非它们用于通知）。因此，你需要指定两个内容：应该在哪个小部件上运行哪个动画，以及关于动画何时运行的信号。默认的Android动画会立即开始动画，而其他动画结构可能有一个预定延迟才会开始。
- en: Time for action – animating a news feed
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手操作——动画新闻源
- en: We'll start off by creating a selector `Activity` and a simple `NewsFeedActivity`.
    In a news feed, we'll animate the latest headlines "in and out" using a timer.
    For this example we'll be working with some of the default animations provided
    by Android and driving the process mainly through the layout resources.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个选择器`Activity`和一个简单的`NewsFeedActivity`开始。在新闻源中，我们将使用计时器使最新的新闻标题“进入和退出”。对于这个示例，我们将使用Android提供的一些默认动画，并通过布局资源主要驱动这个过程。
- en: 'Create a new project to contain the animation examples from this chapter, with
    a main `Activity` named `AnimationSelectionActivity`:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新项目，包含本章的动画示例，主`Activity`名为`AnimationSelectionActivity`：
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open the `res/layout/main.xml` layout file in an editor or IDE.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器或IDE中打开`res/layout/main.xml`布局文件。
- en: Clear out the default content of the layout resource.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除布局资源的默认内容。
- en: 'Declare a vertical `LinearLayout` consuming all the available screen space:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个消耗所有可用屏幕空间的垂直`LinearLayout`：
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `Button` labeled `News Feed` to link to the first animation example:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个标签为“新闻源”的`Button`，链接到第一个动画示例：
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new layout resource file named `news.xml`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`news.xml`的新布局资源文件。
- en: 'Declare a vertical `LinearLayout` containing all of the available screen space:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个垂直的`LinearLayout`，包含所有可用的屏幕空间：
- en: '[PRE3]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a `TextSwitcher` object to the `LinearLayout`, specifying the "in" and
    "out" animations to the default "slide" animations:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`LinearLayout`添加一个`TextSwitcher`对象，指定默认的“滑动”动画作为“进入”和“退出”动画：
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open the `res/values/strings.xml` file in an editor or IDE.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器或IDE中打开`res/values/strings.xml`文件。
- en: 'Declare a string-array named `headlines` with elements for some mock news headlines:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`headlines`的字符串数组，包含一些模拟新闻标题的元素：
- en: '[PRE5]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the generated root package, declare a new Java source file named `NewsFeedActivity.java`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成的根包中，声明一个名为`NewsFeedActivity.java`的新Java源文件。
- en: 'Register the `NewsFeedActivity` class in your `AndroidManifest.xml` file:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`AndroidManifest.xml`文件中注册`NewsFeedActivity`类：
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The new class should extend the `Activity` class and implement `Runnable`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新类应继承`Activity`类并实现`Runnable`接口：
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Declare a `Handler` to be used as a timing structure for changing the headlines:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`Handler`，用作改变标题的时间结构：
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need a reference to the `TextSwitcher` object:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要引用`TextSwitcher`对象：
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Declare a string-array to hold the mock headlines you added to the `strings.xml`
    file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个字符串数组，用于保存你添加到`strings.xml`文件中的模拟新闻标题：
- en: '[PRE10]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You''ll also need to keep track of which headline is currently being displayed:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要跟踪当前正在显示的新闻标题：
- en: '[PRE11]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Override the `onCreate` method:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onCreate`方法：
- en: '[PRE12]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Invoke the `onCreate` method of `Activity`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`Activity`的`onCreate`方法：
- en: '[PRE13]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set the content view to the `news` layout resource:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内容视图设置为`news`布局资源：
- en: '[PRE14]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Store a reference to the headline string-array from the `strings.xml` application
    resource file:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`strings.xml`应用程序资源文件中存储对标题字符串数组的引用：
- en: '[PRE15]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Find the `TextSwitcher` widget and assign it to the field declared earlier:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找`TextSwitcher`小部件，并将其分配给之前声明的字段：
- en: '[PRE16]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Set the `ViewFactory` of the `TextSwitcher` to a new anonymous class that will
    create `TextView` objects when asked:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TextSwitcher`的`ViewFactory`设置为一个新的匿名类，当被请求时创建`TextView`对象：
- en: '[PRE17]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Override the `onStart` method:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onStart`方法：
- en: '[PRE18]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Invoke the `onStart` method of the `Activity` class:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`Activity`类的`onStart`方法：
- en: '[PRE19]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Reset the `headlineIndex` so that we start from the first headline:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重置`headlineIndex`，以便我们从第一条新闻标题开始：
- en: '[PRE20]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Post the `NewsFeedActivity` as a delayed action using the `Handler`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Handler`将`NewsFeedActivity`作为延迟动作发布：
- en: '[PRE21]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Override the `onStop` method:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onStop`方法：
- en: '[PRE22]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Invoke the `onStop` method of the `Activity` class:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`Activity`类的`onStop`方法：
- en: '[PRE23]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remove any pending calls to the `NewsFeedActivity`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除任何待处理的`NewsFeedActivity`调用：
- en: '[PRE24]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Implement the `run` method which we''ll use to swap to the next headline:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现我们将用来切换到下一个标题的`run`方法：
- en: '[PRE25]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open a `try` block to swap the headline inside.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个`try`块以交换内部标题：
- en: 'Use the `TextSwitcher.setText` method to swap to the next headline:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`TextSwitcher.setText`方法切换到下一个标题：
- en: '[PRE26]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If the `headlineIndex` is past the total number of headlines, reset the `headlineIndex`
    to zero:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`headlineIndex`超过了标题总数，将`headlineIndex`重置为零：
- en: '[PRE27]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Close the `try` block, and add a `finally` block. In the `finally` block, post
    the `NewsFeedActivity` back onto the `Handler` queue:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`try`块，并添加一个`finally`块。在`finally`块中，将`NewsFeedActivity`重新发布到`Handler`队列中：
- en: '[PRE28]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open the auto generated `AnimationSelector` Java source in an editor or IDE.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器或IDE中打开自动生成的`AnimationSelector` Java源文件。
- en: 'The `AnimationSelector` class needs to implement `OnClickListener`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AnimationSelector`类需要实现`OnClickListener`：'
- en: '[PRE29]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `onCreate` method, ensure that the content view is set to the `main`
    layout resource created earlier:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中，确保将内容视图设置为之前创建的`main`布局资源：
- en: '[PRE30]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Find the declared `Button` and set its `OnClickListener` to `this`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到声明的`Button`并将其`OnClickListener`设置为`this`：
- en: '[PRE31]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Declare the `onClick` method:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`onClick`方法：
- en: '[PRE32]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Use a switch to determine which `View` was clicked:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用switch来判断点击了哪个`View`：
- en: '[PRE33]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If it''s the news feed `Button`, then use the following `case`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是新闻源`Button`，则使用以下`case`：
- en: '[PRE34]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Start the `NewsFeedActivity` using a new `Intent`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的`Intent`启动`NewsFeedActivity`：
- en: '[PRE35]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Break from the `switch` statement, thus finishing the `onClick` method.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`switch`语句中断，从而完成`onClick`方法。
- en: '*What just happened?*'
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `TextSwitcher` is an example of an animation utility `View`. In this case
    it's the perfect structure to swap between the news headlines, displaying one
    headline at a time and animating a transition between each of the texts. The `TextSwitcher`
    object creates two `TextView` objects (using the anonymous `ViewFactory` class).
    When you use the `setText` method, the `TextSwitcher` changes the text of the
    "off screen" `TextView` and animates a transition between the "on screen" `TextView`
    and the "off screen" `TextView` (with the new text content displayed).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextSwitcher`是一个动画工具`View`的示例。在这种情况下，它是交换新闻标题的完美结构，一次显示一个标题并在每段文本之间动画过渡。`TextSwitcher`对象创建两个`TextView`对象（使用匿名`ViewFactory`类）。当你使用`setText`方法时，`TextSwitcher`会改变“离屏”`TextView`的文本，并在“在屏”`TextView`和“离屏”`TextView`之间动画过渡（显示新的文本内容）。'
- en: 'The `TextSwitcher` class requires that you specify two animation resources
    for it to work with, in order to create its transition effect:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextSwitcher`类要求你为其指定两个动画资源以创建过渡效果：'
- en: Animate text onto the screen
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本动画移到屏幕上
- en: Animate text off the screen
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本动画移出屏幕
- en: In the previous case, we made use of the default `slide_in_left` and `slide_out_right`
    animations. Both of these are examples of translation-based animations due to
    the fact that they actually alter the "on screen" position of the `TextView` objects
    in order to create their effect.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，我们使用了默认的`slide_in_left`和`slide_out_right`动画。这两个都是基于平移动画的示例，因为它们实际上改变了`TextView`对象的“在屏”位置以产生效果。
- en: Using flipper and switcher widgets
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用flipper和switcher小部件
- en: The first example of this chapter made use of the `TextSwitcher` class, an animating
    `View` class in the standard Android API. There are several other animation utility
    classes, some of which you may have encountered before (such as `ImageSwitcher`).
    Both `TextSwitcher` and `ImageSwitcher` are related classes, and both inherit
    from the more generic `ViewSwitcher` class.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个示例使用了`TextSwitcher`类，这是标准Android API中的一个动画`View`类。还有其他几个动画工具类，你可能之前遇到过（比如`ImageSwitcher`）。`TextSwitcher`和`ImageSwitcher`都是相关类，并且都继承自更通用的`ViewSwitcher`类。
- en: The `ViewSwitcher` class is a generic animation tool, and defines the `ViewFactory`
    interface that we implemented anonymously in the previous example. A `ViewSwitcher`
    is a `ViewGroup` with only two child `View` objects. One is displayed on the screen,
    while the other is hidden. The `getNext` utility method allows you to find out
    which is the "off screen" `View` object.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewSwitcher`类是一个通用的动画工具，并定义了我们在前一个示例中匿名实现的`ViewFactory`接口。`ViewSwitcher`是一个只包含两个子`View`对象的`ViewGroup`。一个在屏幕上显示，另一个隐藏。`getNext`实用方法允许你找出哪个是“离屏”的`View`对象。'
- en: While you generally use a `ViewFactory` to populate a `ViewSwitcher`, you have
    the option to populate it manually. You could have populated the `TextSwitcher`
    in the example by using the `addView` method that is inherited from `ViewGroup`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你通常使用`ViewFactory`来填充`ViewSwitcher`，但你也可以选择手动填充。例如，你可以通过继承自`ViewGroup`的`addView`方法，为`TextSwitcher`添加内容。
- en: '![Using flipper and switcher widgets](img/4484OS_07_01.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![使用翻转和切换小部件](img/4484OS_07_01.jpg)'
- en: Using the ImageSwitcher and TextSwitcher implementations
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ImageSwitcher和TextSwitcher的实现
- en: 'The `ImageSwitcher` and `TextSwitcher` classes are specialized implementations
    of the `ViewSwitcher` that understand the type of `View` objects they contain.
    When you invoke the `setText` method of the `TextSwitcher` object, it''s much
    like invoking the following code snippet on a `ViewSwitcher` containing two `TextView`
    children:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageSwitcher`和`TextSwitcher`类是`ViewSwitcher`的专业实现，它们了解所包含的`View`对象的类型。当你调用`TextSwitcher`对象的`setText`方法时，它类似于在包含两个`TextView`子项的`ViewSwitcher`上调用以下代码片段：'
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`TextSwitcher` can be used to display content such as (as in the example) a
    news feed, or as with the Android notification area, to display text content that
    doesn''t fit into a single line. Displaying multiple lines in a `TextSwitcher`
    is particularly effective when the animation runs the text upwards, causing the
    text to appear to scroll upwards behind the `TextSwitcher` object.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextSwitcher`可用于显示内容，如（示例中的）新闻源，或像Android通知区域一样，显示不适合单行显示的文本内容。当动画使文本向上运行时，在`TextSwitcher`中显示多行特别有效，这会使文本看起来在`TextSwitcher`对象后面向上滚动。'
- en: An `ImageSwitcher` is most commonly used in a gallery, slide show, or similar
    structure. You could also use an `ImageSwitcher` to allow the user to select from
    a small list of images, for example a short list of login avatars.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageSwitcher`通常用于画廊、幻灯片或类似结构中。你也可以使用`ImageSwitcher`让用户从一组小图片中选择，例如，选择登录头像的简短列表。'
- en: Have a go hero – populating the TextSwitcher
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手英雄 - 填充TextSwitcher
- en: As an alternative to populating the `TextSwitcher` with a `ViewFactory` in the
    news feed example, try populating it in the XML layout resource. Remember that
    it requires exactly two `TextView` child widgets. If you get this right, try giving
    each of the two `TextView` objects different font colors and styles.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在新闻源示例中，除了使用`ViewFactory`填充`TextSwitcher`外，还可以尝试在XML布局资源中填充。记住，它需要正好两个`TextView`子部件。如果做对了，尝试给两个`TextView`对象设置不同的字体颜色和样式。
- en: Animating layout widgets
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画布局小部件
- en: Using the animation utility widgets such as `TextSwitcher` and `ImageSwitcher`
    can allow you to display much more information over time than you could fit on
    the screen at a time. `ViewGroup` objects can also be animated without any serious
    modification through the `LayoutAnimationController` class. However, in this case,
    animation needs to be added in your Java code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用如`TextSwitcher`和`ImageSwitcher`这样的动画工具小部件，可以让你随着时间的推移显示比一次能容纳在屏幕上的更多信息。通过`LayoutAnimationController`类，`ViewGroup`对象也可以在不进行重大修改的情况下进行动画处理。然而，在这种情况下，需要在你的Java代码中添加动画。
- en: A `LayoutAnimationController` is best used to create "entry" or "exit" effects
    on a `ViewGroup` as it appears or just before it disappears off the screen. The
    controller simply starts a specified animation on each of the `View` children
    of a specified `ViewGroup`. However, it doesn't have to do it all at the same
    time, or in a sequential order. You can easily configure a `LayoutAnimationController`
    to leave a slight delay between the starting of an animation on each child widget,
    creating a staggered effect.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`LayoutAnimationController`最适合用于创建`ViewGroup`出现或即将从屏幕消失时的“进入”或“退出”效果。控制器只需在指定`ViewGroup`的每个`View`子项上启动一个指定的动画。然而，它不必同时进行，或按顺序进行。你可以轻松地配置`LayoutAnimationController`，使每个子部件动画开始之间有一小段延迟，从而产生交错效果。'
- en: 'If applied correctly to a `LinearLayout`, you could achieve a result similar
    to the one illustrated in the following diagram:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确应用于`LinearLayout`，你可以实现与以下图表类似的效果：
- en: '![Animating layout widgets](img/4484OS_07_02.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![动画布局小部件](img/4484OS_07_02.jpg)'
- en: Time for action – animating a GridView
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手操作时间 - 动画化GridView
- en: The `GridView` class has its own `LayoutAnimationController` specifically designed
    to animate it in terms of rows and columns, allowing more complex effects than
    can be achieved with a standard `LayoutAnimationController`. For this next part
    of the "animations" example we're going to build a lovely color selector out of
    a `GridView`. When the selector first appears on the screen, each color swatch
    will fade in, starting in the top left corner and ending on the bottom right corner.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`GridView`类拥有自己的`LayoutAnimationController`，专门设计用来以行和列的形式动画化它，可以实现比标准`LayoutAnimationController`更复杂的效果。在“动画”示例的下一部分，我们将使用`GridView`构建一个可爱的颜色选择器。当选择器首次出现在屏幕上时，每个颜色样本将从左上角开始淡入，直至右下角结束。'
- en: Start by declaring a new Java source file in the root package of your project
    named `ColorAdapter.java`, which will generate the color swatches for the `GridView`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在项目的根包中声明一个新的Java源文件，命名为`ColorAdapter.java`，它将为`GridView`生成颜色样本。
- en: 'The `ColorAdapter` needs to extend `BaseAdapter` to take care of the boiler
    plate `Adapter` requirements:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ColorAdapter`需要扩展`BaseAdapter`以处理`Adapter`的样板要求：'
- en: '[PRE37]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `ColorAdapter` will be created with a specified number of rows and columns,
    the same numbers which will be displayed on the `GridView`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ColorAdapter`将被创建，并指定行数和列数，这些数字将在`GridView`上显示：'
- en: '[PRE38]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The number of items that the `ColorAdapter` will provide is the number of rows
    multiplied by the number of columns:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ColorAdapter`将提供的项目数是行数乘以列数：'
- en: '[PRE39]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The ID of a color is the position or index at which it''s found:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 颜色的ID是它所在的位置或索引：
- en: '[PRE40]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We use a utility method to compose the color from an index in the "list." For
    this function we make use of the `HSVtoRGB` method in the Android `Color` class:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用一个实用方法从“列表”中的索引组合颜色。对于这个函数，我们利用了Android `Color`类中的`HSVtoRGB`方法：
- en: '[PRE41]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The item at an index in the Adapter model is returned as it''s color value:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适配器模型中索引处的项目作为其颜色值返回：
- en: '[PRE42]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To create the color swatch `View` objects, we implement the `getView` method
    of `Adapter` as usual:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建颜色样本`View`对象，我们像平常一样实现`Adapter`的`getView`方法：
- en: '[PRE43]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `View` we return is going to be an `ImageView` object, so we either re-use
    the one given by the parent widget, or create a new one:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们返回的`View`将是一个`ImageView`对象，因此我们要么复用父控件提供的对象，要么创建一个新的：
- en: '[PRE44]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We make use of the `ColorDrawable` class to fill the `ImageView` with the color
    specified by our `getColor` utility method:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们利用`ColorDrawable`类用我们的`getColor`实用方法指定的颜色填充`ImageView`：
- en: '[PRE45]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `ImageView` needs to have its `android.widget.AbsListView.LayoutParams`
    set, and then it can be returned to the `GridView` for display:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ImageView`需要设置其`android.widget.AbsListView.LayoutParams`，然后才能返回给`GridView`进行显示：'
- en: '[PRE46]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create a new XML layout resource file named `res/layout/colors.xml` to hold
    the declaration of the `GridView` that will act as the color selector.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的XML布局资源文件，名为`res/layout/colors.xml`，以保存将作为颜色选择器的`GridView`的声明。
- en: 'The contents of the `colors.xml` layout file are just a single `GridView` widget:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`colors.xml`布局文件的内容仅包含一个`GridView`小部件：'
- en: '[PRE47]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Define another new Java source file in the root package of your `AnimationExamples`
    project. Name this one `ColorSelectorActivity.java`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`AnimationExamples`项目的根包中定义另一个新的Java源文件。将这个命名为`ColorSelectorActivity.java`。
- en: 'The new class declaration should extend `Activity`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的类声明应该扩展`Activity`：
- en: '[PRE48]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Override the `onCreate` method as normal, and set the content view to the `colors`
    XML layout resource you just wrote:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正常重写`onCreate`方法，并将内容视图设置为刚刚编写的`colors` XML布局资源：
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now you can load the default `Android` "fade in" animation using the handy
    `AnimationUtils` class from the `android.view.animation` package:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以使用`android.view.animation`包中的便捷`AnimationUtils`类加载默认的Android“淡入”动画：
- en: '[PRE50]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In order to animate the `GridView` correctly, you need to instantiate a new
    `GridLayoutAnimationController` object, passing it the "fade in" animation:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了正确地动画化`GridView`，你需要实例化一个新的`GridLayoutAnimationController`对象，并传递给它“淡入”动画：
- en: '[PRE51]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now look for the `GridView` which you have declared in the `colors.xml` file:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在查找你在`colors.xml`文件中声明的`GridView`：
- en: '[PRE52]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Set the number of columns in the `GridView` to `10` (note that we didn''t do
    this in the XML layout resource as you normally would):'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`GridView`中的列数设置为`10`（注意我们并没有在XML布局资源中这样做，尽管通常你会这样做）：
- en: '[PRE53]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'When you set the adapter of the `GridView` to a `ColorAdapter`, you also need
    to know the number of columns, and the easiest way to do this is to keep both
    in Java:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你将`GridView`的适配器设置为`ColorAdapter`时，你还需要知道列数，最简单的方法是在Java中同时保持这两个值：
- en: '[PRE54]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `view` object is now ready for the `GridLayoutAnimationController`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在`view`对象已经准备好使用`GridLayoutAnimationController`了：
- en: '[PRE55]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In order to start the animation when the screen is displayed, we override the
    `onStart` method. It is in here that we look up the `GridView` again and start
    the animation:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在屏幕显示时开始动画，我们重写了`onStart`方法。在这里，我们再次查找`GridView`并开始动画：
- en: '[PRE56]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In order to integrate this new example with the other animation examples, you'll
    need to open the `res/layout/main.xml` file in an editor or IDE.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将这个新示例与其它动画示例整合，你需要在一个编辑器或IDE中打开`res/layout/main.xml`文件。
- en: 'Add a new `Button` to the end of the `LinearLayout`, the one we''ll use to
    start the color selection example:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LinearLayout`的末尾添加一个新的`Button`，我们将使用它来启动颜色选择示例：
- en: '[PRE57]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Open the `AnimationSelector` source file in your editor or IDE.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的编辑器或IDE中打开`AnimationSelector`源文件。
- en: 'After setting the `OnClickListener` of the `news_feed Button`, find and set
    the `OnClickListener` of the new `colors Button` in the same way:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置了`news_feed Button`的`OnClickListener`之后，以同样的方式找到并设置新的`colors Button`的`OnClickListener`：
- en: '[PRE58]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the `onClick` method, after the `switch case` for the `news_feed Button`,
    add another `switch case` for the new `colors Button`, and start the `ColorSelectorActivity`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onClick`方法中，在`news_feed Button`的`switch case`之后，为新的`colors Button`添加另一个`switch
    case`，并启动`ColorSelectorActivity`：
- en: '[PRE59]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Open the `AndroidManifest.xml` file in your editor or IDE.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的编辑器或IDE中打开`AndroidManifest.xml`文件。
- en: 'At the bottom of the `<application>` section, register the new `ColorSelectorActivity`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<application>`部分的底部，注册新的`ColorSelectorActivity`：
- en: '[PRE60]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '*What just happened?*'
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The new example makes use of the `GridLayoutAnimationController` to start each
    "fade in" animation a fraction of a second after the previous one started. This
    creates a fluid animation effect of the color swatches appearing from the top-left
    to the bottom-right of the screen.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 新示例使用了`GridLayoutAnimationController`，在上一动画开始后的几分之一秒内开始每个“淡入”动画。这创建了一个流畅的动画效果，颜色样本从屏幕左上角到右下角出现。
- en: When you instantiate a `GridLayoutAnimationController`, it requires you to provide
    the animation and two parameters which indicate the amount of time between starting
    animations for the next row, or the next column. The delay given is not specified
    in a "direct" time format, but instead by how long the given animation takes to
    complete. In our case, if the animation took one second to complete, the delay
    between each animation starting would be 200 milliseconds, since the delay is
    specified as `0.2`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你实例化一个`GridLayoutAnimationController`时，它需要你提供动画以及两个参数，这两个参数表示开始下一行或下一列动画之间的时间间隔。所给的延迟不是以“直接”时间格式指定，而是由给定动画完成所需的时间决定。在我们的例子中，如果动画需要一秒钟来完成，每个动画开始之间的延迟将是200毫秒，因为延迟被指定为`0.2`。
- en: 'The fact that we animate the swatches just as this `Activity` becomes visible,
    effectively makes this a transition animation, introducing the user to this new
    screen. For these types of animations, it''s imperative to take as little time
    as possible while still giving a pleasing introduction. When you run the new example
    you should get an animation similar to the ones illustrated in the following images:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Activity`一变为可见状态时对色块进行动画处理，实际上这成为了一个过渡动画，向用户介绍这个新屏幕。对于这类动画，尽可能缩短时间同时提供一个令人愉悦的介绍是至关重要的。当你运行这个新示例时，你应该会得到与以下图片中展示的动画相似的动画效果：
- en: '![What just happened?](img/4484_07_03b.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/4484_07_03b.jpg)'
- en: Creating Custom Animations
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义动画
- en: 'So far we''ve explored using Android''s stock animations with the normal widgets,
    but what about applying a custom animation to a widget that isn''t built for animations?
    Android includes support for four basic animation types that can be applied to
    `View` objects:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了使用Android的默认动画与普通小部件，但是如果是将自定义动画应用于一个不是为动画设计的小部件呢？Android支持四种基本动画类型，可以应用于`View`对象：
- en: Translate/Move
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平移/移动
- en: Rotate
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转
- en: Scale
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放
- en: Alpha/Transparency
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明度/Alpha
- en: These different animation structures can be applied by themselves, or merged
    together in an animation set where any combination of the three can be run at
    the same time. By creating an animation with a delay time before it starts, you
    can create complex animations by having simple sets of animations follow each
    other.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同的动画结构可以单独应用，或者在一个动画集合中合并在一起，任意三种组合都可以同时运行。通过在动画开始前设置延迟时间，你可以通过简单的动画集合一个接一个地创建复杂的动画。
- en: Like so many things in Android, the easiest way to create your own custom animations
    is to define it in a resource XML file. The elements in the animation format used
    by Android correspond directly to the classes in the `android.animation.view`
    package. An animation file can also reference animations in other animation resources,
    which makes it much easier to compose complex animations and re-use simple animations.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 与Android中的许多事物一样，创建自定义动画的最简单方法是在资源XML文件中定义它。Android使用的动画格式中的元素直接对应于`android.animation.view`包中的类。动画文件还可以引用其他动画资源中的动画，这使得组合复杂动画和复用简单动画变得更加容易。
- en: Time for action – writing a custom animation
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践——编写自定义动画
- en: Writing a custom animation is very simple, but not entirely intuitive. For this
    section you'll define a custom animation which will increase the size of its animated
    widget by a factor of five, while at the same time fading it until its entirely
    transparent.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自定义动画非常简单，但并不完全直观。在本节中，你将定义一个自定义动画，它将使动画组件的大小增加五倍，同时逐渐淡出直至完全透明。
- en: Create a new XML resource file named `res/anim/vanish.xml` and open it in an
    editor or IDE.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`res/anim/vanish.xml`的新XML资源文件，并在编辑器或IDE中打开它。
- en: 'The root element of the animation file will be an animation `set` element:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画文件的根元素将是一个动画`set`元素：
- en: '[PRE61]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the `<set>` element, declare an element to define the scale up animation:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<set>`元素中，声明一个元素来定义缩放动画：
- en: '[PRE62]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The duration of the scale up animation needs to be set as `300` milliseconds:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩放动画的持续时间需要设置为`300`毫秒：
- en: '[PRE63]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The animation starts to scale from the original size:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画从原始大小开始缩放：
- en: '[PRE64]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The scale animation needs to increase the size by a factor of `5.0`:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩放动画需要将大小增加`5.0`倍：
- en: '[PRE65]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We want the scale to expand from the center of the widget:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望缩放效果从组件的中心向外扩展：
- en: '[PRE66]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The last part of the `<scale>` element defines the acceleration curve of the
    animation. Here we want the scale up to decelerate as it runs:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<scale>`元素的最后一部分定义了动画的加速曲线。在这里，我们希望缩放效果在运行时减速：'
- en: '[PRE67]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Next, define a new element to handle the fade out part of the animation:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义一个新元素来处理动画的淡出部分：
- en: '[PRE68]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The duration of the fade out animation is also `300` milliseconds:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 淡出动画的持续时间也是`300`毫秒：
- en: '[PRE69]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We start with no transparency:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从没有透明度开始：
- en: '[PRE70]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The fade out ends with a completely invisible widget:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 淡出效果以组件完全不可见结束：
- en: '[PRE71]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The fade out should accelerate as it runs, so we use an accelerate interpolator:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 淡出效果应该随着运行而加速，因此我们使用了加速插值器：
- en: '[PRE72]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '*What just happened?*'
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: This is a relatively simple animation set, but its effect is visually pleasing.
    Keeping the animation at `300` milliseconds is quick enough to not interfere with
    the user's interaction, but just long enough to be seen in full by the user.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对简单的动画集合，但其效果视觉效果令人满意。将动画保持在`300`毫秒内，足够快，不会干扰用户的交互，但又足够长，能让用户完全看到。
- en: When defining animations in an animation `<set>` element, each non-set sub animation
    needs to have its `duration` defined. The `<set>` element has no concept of its
    own `duration`. However, you can define a single `interpolator` for the entire
    set to share.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<set>`元素中定义动画时，每个非集合子动画都需要定义其`duration`。`<set>`元素没有它自己的`duration`的概念。然而，你可以为整个集合定义一个单一的`interpolator`来共享。
- en: The `<scale>` animation will by default, scale the widget using the top-left
    corner as the "pivot" point, causing the widget to grow to the right and downward,
    but not left and upward. This causes a lopsided animation which is not very appealing.
    In the preceding example, the scale animation runs with the pivot at the center
    of the animated widget.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`<scale>`动画默认会使用左上角作为"轴心"点来缩放组件，导致组件向右和向下增长，而不是向左和向上。这会造成一边倒的动画效果，看起来并不吸引人。在上一个示例中，缩放动画以动画组件的中心作为轴心点运行。'
- en: '![What just happened?](img/4484OS_07_05.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/4484OS_07_05.jpg)'
- en: Time for action – making a Button vanish
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践——让一个按钮消失
- en: So how can we apply the nice shiny animation to a `Button` object? The `Button`
    object doesn't have an animation attribute, and so you can't just reference it
    from the layout resource file. What we want, is the animation to run when the
    `Button` widget is clicked.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何将这个漂亮的光泽动画应用于 `Button` 对象呢？`Button` 对象没有动画属性，因此你不能直接从布局资源文件中引用它。我们想要的是当点击
    `Button` 控件时运行动画。
- en: Create a new layout resource file named `res/layout/vanish.xml` and open in
    an editor or IDE.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `res/layout/vanish.xml` 的新布局资源文件，并在编辑器或 IDE 中打开。
- en: 'At the root of the new layout, declare a `RelativeLayout` element:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新布局的根元素中，声明一个 `RelativeLayout` 元素：
- en: '[PRE73]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The `Button` needs to be nice and large, and centered on the screen. For this
    we give it some inner padding:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Button` 需要足够大，并在屏幕上居中。为此，我们给它一些内边距：'
- en: '[PRE74]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Create a new Java source file in the root package of the `AnimationExamples`
    project named `VanishingButtonActivity.java`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AnimationExamples` 项目的根包中创建一个名为 `VanishingButtonActivity.java` 的新 Java 源文件。
- en: 'The new class needs to extend `Activity` and implement the `OnClickListener`
    interface:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新类需要扩展 `Activity` 并实现 `OnClickListener` 接口：
- en: '[PRE75]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Override the `onCreate` method and invoke the `Activity.onCreate` method to
    perform the required Android setup:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写 `onCreate` 方法并调用 `Activity.onCreate` 方法以执行所需的 Android 设置：
- en: '[PRE76]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Set the content view to the new `vanish` layout resource:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内容视图设置为新的 `vanish` 布局资源：
- en: '[PRE77]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Find the `Button` widget declared in the XML layout resource and set its `OnClickListener`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 XML 布局资源中找到声明的 `Button` 控件并设置其 `OnClickListener`：
- en: '[PRE78]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Implement the `onClick` method of `OnClickListener`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `OnClickListener` 的 `onClick` 方法：
- en: '[PRE79]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Load the `Animation` from the resource file:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从资源文件中加载 `Animation`：
- en: '[PRE80]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Start the `Animation` on the `Button` object:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Button` 对象上启动 `Animation`：
- en: '[PRE81]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Open the `AndroidManifest.xml` file in an editor or IDE.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器或 IDE 中打开 `AndroidManifest.xml` 文件。
- en: 'Declare the `VanishingButtonActivity` at the end of the `<application>` section
    with a display label:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<application>` 部分的末尾，使用显示标签声明 `VanishingButtonActivity`：
- en: '[PRE82]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Open the `res/layout/main.xml` layout resource in your editor or IDE.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器或 IDE 中打开 `res/layout/main.xml` 布局资源。
- en: 'Add a new `Button` to the end of `LinearLayout` to activate the `VanishingButtonActivity`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `LinearLayout` 的末尾添加一个新的 `Button` 以激活 `VanishingButtonActivity`：
- en: '[PRE83]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Open the `AnimationSelector` Java source file in your editor or IDE.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器或 IDE 中打开 `AnimationSelector` Java 源文件。
- en: 'At the end of the `onCreate` method, fetch the new `vanish Button` from the
    layout and set its `OnClickListener`:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onCreate` 方法的末尾，从布局中获取新的 `vanish Button` 并设置其 `OnClickListener`：
- en: '[PRE84]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In the `onClick` method, add a new switch case to start the `VanishingButtonActivity`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onClick` 方法中，添加一个新的 switch case 以启动 `VanishingButtonActivity`：
- en: '[PRE85]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '*What just happened?*'
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The addition of the preceding example will display a single `Button` in the
    middle of the screen. When clicked, the `Button` will be mutated by the `vanish`
    animation for `300` milliseconds. When it is complete, the animation won't have
    any effect on the `Button` anymore. This is an important characteristic of animations—when
    they are complete, the widget they have animated is returned to its original state.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 前述示例的添加将在屏幕中央显示一个单独的 `Button`。点击后，`Button` 将被 `vanish` 动画改变 `300` 毫秒。完成时，动画将不再对
    `Button` 产生任何影响。这是动画的一个重要特点——当它们完成时，它们动画化的控件将返回到原始状态。
- en: It's also important to note that it's not the widget itself that is modified
    by an animation, but rather the state of the `Canvas` it's painted on. This is
    much the same concept as modifying the state of `Graphics` or `Graphics2D` object
    in Java AWT, or Swing before a widget uses the `Graphics` object to paint itself.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意到，被动画修改的不是控件本身，而是它所绘制的 `Canvas` 的状态。这与在 Java AWT 或 Swing 中修改 `Graphics`
    或 `Graphics2D` 对象的状态的概念相同，在控件使用 `Graphics` 对象绘制自身之前。
- en: In the following images you can see the effect that animation has on the `Button`
    when it's clicked. The `Button` is actually re-painted for each frame in the animation,
    and remains entirely active during that time.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图片中，你可以看到当点击 `Button` 时动画对其产生的影响。实际上，`Button` 在动画的每一帧都会重新绘制，并且在那个时间保持完全活跃。
- en: '![What just happened?](img/4484_07_06b.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/4484_07_06b.jpg)'
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the various methods by which you can apply animations
    to various parts of your user interface. We explored how some widgets are designed
    to animate themselves. Layouts can be animated for transitions in and out of an
    `Activity`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了将动画应用于用户界面各个部分的各种方法。我们研究了某些小部件是如何设计来自我动画化的，布局可以为了进出`Activity`而进行动画过渡。
- en: Several simple animations are available by default in the Android resource,
    but ultimately creating your own animations and applying them to your user interface
    manually creates, by far, the most visually appealing and user-friendly experience
    for your users.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓资源中默认提供了一些简单的动画，但最终，手动创建自己的动画并将它们应用到用户界面上，无疑会为用户带来最视觉吸引人且用户友好的体验。
- en: Many applications on a mobile device need to present a large amount of information
    on the screen, and present it in such a way that it can be easily absorbed. In
    the next chapter, we'll explore user interface design with regards to presenting
    information to the user in a friendly and useful manner. This allows users to
    access the information that they need as quickly as possible, in a swift and easy
    manner, while not limiting the information they have access to.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备上的许多应用程序需要在屏幕上展示大量信息，并以易于吸收的方式呈现。在下一章中，我们将探讨关于向用户友好且有用地展示信息方面的用户界面设计。这使得用户能够以快速简便的方式尽可能快地访问他们所需的信息，同时不限制他们所能获取的信息量。
