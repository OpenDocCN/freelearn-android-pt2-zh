- en: Chapter 7. Animating Widgets and Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Animations are an important element in the user interface design of a modern
    application. However, it''s also easy to overuse animations in your designs. A
    general guideline for animation use in a non-game application is—only animate
    user interactions and notifications, and keep the duration short so that it doesn''t
    impact the user''s experience negatively. For a game, more animation is generally
    acceptable (or even expected).*'
  prefs: []
  type: TYPE_NORMAL
- en: So why animate user interaction and not (for example) the background of your
    application? For one thing, animating the background of an application is distracting,
    and if you are trying to capture or present important information to the user,
    it's unprofessional (no matter how good it looks). Animations are also very important
    in regards to notifications. Movement on the screen draws attention, thus what
    would normally be a large pop-up dialog can be replaced by a small animating icon.
    A perfect example of such an icon is the "downloading" icon which is placed at
    the top left of the notification area of an Android device when the Android **Market**
    application is downloading new software or updates.
  prefs: []
  type: TYPE_NORMAL
- en: Layout animations and transitions provide useful status information to the user.
    When using a screen transition you tell your user what has just happened, or what
    is about to happen. Different transitions signify different events to your users,
    knowing what transition to use for each different activity will let your users
    know what kind of action is about to be taken. Layout animations are an important
    part of your user feedback, leaving them out or using the wrong one in the wrong
    place can leave your users irritated, or slightly confused ("change dazed"). Using
    the right animations will improve user experience, and can even speed up their
    use of the application by giving them brief cues as to what they are expected
    to do next.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, there are two primary types of animation which we will be looking
    at—widget animations and layout animations. We'll look at the standard animation
    structures provided by Android, and we'll look at how to create new animation
    types and extend the existing ones. We'll also be looking at timing and "good
    practice" use of animations, and keeping users happy without slowing them down
    or distracting them.
  prefs: []
  type: TYPE_NORMAL
- en: Using standard Android animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any `View` or `ViewGroup` object in Android can have an animation attached to
    it. Animations are generally defined as application resources in an XML file,
    and Android provides a few useful defaults in the `android` package. Android also
    includes several `View` classes which are designed specifically to handle animations.
    With these classes you will find that they have layout attributes which allow
    you to set a particular types of animations that will be used upon certain actions.
    However, animations are generally not specified in a layout file, instead they
    rely on the Java code to set and start `Animation` objects.
  prefs: []
  type: TYPE_NORMAL
- en: The main reason why animations are not normally specified as part of the layout
    XML is very simple—when should they run? Many animations can be used as a response
    to user input, letting the user know what's happening. Most animations will in
    some way or the other be triggered by a user's action (unless they are there to
    serve as a notification). Thus you will need to specify both—which animation to
    run on a widget, and the signal about when the animation should run. The default
    Android animations will begin animating immediately, while other animation structures
    may have a scheduled delay before they start.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – animating a news feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll start off by creating a selector `Activity` and a simple `NewsFeedActivity`.
    In a news feed, we'll animate the latest headlines "in and out" using a timer.
    For this example we'll be working with some of the default animations provided
    by Android and driving the process mainly through the layout resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project to contain the animation examples from this chapter, with
    a main `Activity` named `AnimationSelectionActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `res/layout/main.xml` layout file in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear out the default content of the layout resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a vertical `LinearLayout` consuming all the available screen space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Button` labeled `News Feed` to link to the first animation example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new layout resource file named `news.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a vertical `LinearLayout` containing all of the available screen space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `TextSwitcher` object to the `LinearLayout`, specifying the "in" and
    "out" animations to the default "slide" animations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `res/values/strings.xml` file in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a string-array named `headlines` with elements for some mock news headlines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the generated root package, declare a new Java source file named `NewsFeedActivity.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register the `NewsFeedActivity` class in your `AndroidManifest.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The new class should extend the `Activity` class and implement `Runnable`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `Handler` to be used as a timing structure for changing the headlines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need a reference to the `TextSwitcher` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a string-array to hold the mock headlines you added to the `strings.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll also need to keep track of which headline is currently being displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `onCreate` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the `onCreate` method of `Activity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the content view to the `news` layout resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store a reference to the headline string-array from the `strings.xml` application
    resource file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `TextSwitcher` widget and assign it to the field declared earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `ViewFactory` of the `TextSwitcher` to a new anonymous class that will
    create `TextView` objects when asked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `onStart` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the `onStart` method of the `Activity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reset the `headlineIndex` so that we start from the first headline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Post the `NewsFeedActivity` as a delayed action using the `Handler`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `onStop` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the `onStop` method of the `Activity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove any pending calls to the `NewsFeedActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `run` method which we''ll use to swap to the next headline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open a `try` block to swap the headline inside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `TextSwitcher.setText` method to swap to the next headline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the `headlineIndex` is past the total number of headlines, reset the `headlineIndex`
    to zero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the `try` block, and add a `finally` block. In the `finally` block, post
    the `NewsFeedActivity` back onto the `Handler` queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the auto generated `AnimationSelector` Java source in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `AnimationSelector` class needs to implement `OnClickListener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onCreate` method, ensure that the content view is set to the `main`
    layout resource created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the declared `Button` and set its `OnClickListener` to `this`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the `onClick` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a switch to determine which `View` was clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it''s the news feed `Button`, then use the following `case`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `NewsFeedActivity` using a new `Intent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Break from the `switch` statement, thus finishing the `onClick` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TextSwitcher` is an example of an animation utility `View`. In this case
    it's the perfect structure to swap between the news headlines, displaying one
    headline at a time and animating a transition between each of the texts. The `TextSwitcher`
    object creates two `TextView` objects (using the anonymous `ViewFactory` class).
    When you use the `setText` method, the `TextSwitcher` changes the text of the
    "off screen" `TextView` and animates a transition between the "on screen" `TextView`
    and the "off screen" `TextView` (with the new text content displayed).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TextSwitcher` class requires that you specify two animation resources
    for it to work with, in order to create its transition effect:'
  prefs: []
  type: TYPE_NORMAL
- en: Animate text onto the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animate text off the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous case, we made use of the default `slide_in_left` and `slide_out_right`
    animations. Both of these are examples of translation-based animations due to
    the fact that they actually alter the "on screen" position of the `TextView` objects
    in order to create their effect.
  prefs: []
  type: TYPE_NORMAL
- en: Using flipper and switcher widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first example of this chapter made use of the `TextSwitcher` class, an animating
    `View` class in the standard Android API. There are several other animation utility
    classes, some of which you may have encountered before (such as `ImageSwitcher`).
    Both `TextSwitcher` and `ImageSwitcher` are related classes, and both inherit
    from the more generic `ViewSwitcher` class.
  prefs: []
  type: TYPE_NORMAL
- en: The `ViewSwitcher` class is a generic animation tool, and defines the `ViewFactory`
    interface that we implemented anonymously in the previous example. A `ViewSwitcher`
    is a `ViewGroup` with only two child `View` objects. One is displayed on the screen,
    while the other is hidden. The `getNext` utility method allows you to find out
    which is the "off screen" `View` object.
  prefs: []
  type: TYPE_NORMAL
- en: While you generally use a `ViewFactory` to populate a `ViewSwitcher`, you have
    the option to populate it manually. You could have populated the `TextSwitcher`
    in the example by using the `addView` method that is inherited from `ViewGroup`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using flipper and switcher widgets](img/4484OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the ImageSwitcher and TextSwitcher implementations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ImageSwitcher` and `TextSwitcher` classes are specialized implementations
    of the `ViewSwitcher` that understand the type of `View` objects they contain.
    When you invoke the `setText` method of the `TextSwitcher` object, it''s much
    like invoking the following code snippet on a `ViewSwitcher` containing two `TextView`
    children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`TextSwitcher` can be used to display content such as (as in the example) a
    news feed, or as with the Android notification area, to display text content that
    doesn''t fit into a single line. Displaying multiple lines in a `TextSwitcher`
    is particularly effective when the animation runs the text upwards, causing the
    text to appear to scroll upwards behind the `TextSwitcher` object.'
  prefs: []
  type: TYPE_NORMAL
- en: An `ImageSwitcher` is most commonly used in a gallery, slide show, or similar
    structure. You could also use an `ImageSwitcher` to allow the user to select from
    a small list of images, for example a short list of login avatars.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – populating the TextSwitcher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As an alternative to populating the `TextSwitcher` with a `ViewFactory` in the
    news feed example, try populating it in the XML layout resource. Remember that
    it requires exactly two `TextView` child widgets. If you get this right, try giving
    each of the two `TextView` objects different font colors and styles.
  prefs: []
  type: TYPE_NORMAL
- en: Animating layout widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the animation utility widgets such as `TextSwitcher` and `ImageSwitcher`
    can allow you to display much more information over time than you could fit on
    the screen at a time. `ViewGroup` objects can also be animated without any serious
    modification through the `LayoutAnimationController` class. However, in this case,
    animation needs to be added in your Java code.
  prefs: []
  type: TYPE_NORMAL
- en: A `LayoutAnimationController` is best used to create "entry" or "exit" effects
    on a `ViewGroup` as it appears or just before it disappears off the screen. The
    controller simply starts a specified animation on each of the `View` children
    of a specified `ViewGroup`. However, it doesn't have to do it all at the same
    time, or in a sequential order. You can easily configure a `LayoutAnimationController`
    to leave a slight delay between the starting of an animation on each child widget,
    creating a staggered effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'If applied correctly to a `LinearLayout`, you could achieve a result similar
    to the one illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating layout widgets](img/4484OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – animating a GridView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GridView` class has its own `LayoutAnimationController` specifically designed
    to animate it in terms of rows and columns, allowing more complex effects than
    can be achieved with a standard `LayoutAnimationController`. For this next part
    of the "animations" example we're going to build a lovely color selector out of
    a `GridView`. When the selector first appears on the screen, each color swatch
    will fade in, starting in the top left corner and ending on the bottom right corner.
  prefs: []
  type: TYPE_NORMAL
- en: Start by declaring a new Java source file in the root package of your project
    named `ColorAdapter.java`, which will generate the color swatches for the `GridView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `ColorAdapter` needs to extend `BaseAdapter` to take care of the boiler
    plate `Adapter` requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ColorAdapter` will be created with a specified number of rows and columns,
    the same numbers which will be displayed on the `GridView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The number of items that the `ColorAdapter` will provide is the number of rows
    multiplied by the number of columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The ID of a color is the position or index at which it''s found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use a utility method to compose the color from an index in the "list." For
    this function we make use of the `HSVtoRGB` method in the Android `Color` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The item at an index in the Adapter model is returned as it''s color value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create the color swatch `View` objects, we implement the `getView` method
    of `Adapter` as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `View` we return is going to be an `ImageView` object, so we either re-use
    the one given by the parent widget, or create a new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We make use of the `ColorDrawable` class to fill the `ImageView` with the color
    specified by our `getColor` utility method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ImageView` needs to have its `android.widget.AbsListView.LayoutParams`
    set, and then it can be returned to the `GridView` for display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new XML layout resource file named `res/layout/colors.xml` to hold
    the declaration of the `GridView` that will act as the color selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The contents of the `colors.xml` layout file are just a single `GridView` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define another new Java source file in the root package of your `AnimationExamples`
    project. Name this one `ColorSelectorActivity.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new class declaration should extend `Activity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `onCreate` method as normal, and set the content view to the `colors`
    XML layout resource you just wrote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you can load the default `Android` "fade in" animation using the handy
    `AnimationUtils` class from the `android.view.animation` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to animate the `GridView` correctly, you need to instantiate a new
    `GridLayoutAnimationController` object, passing it the "fade in" animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now look for the `GridView` which you have declared in the `colors.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the number of columns in the `GridView` to `10` (note that we didn''t do
    this in the XML layout resource as you normally would):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you set the adapter of the `GridView` to a `ColorAdapter`, you also need
    to know the number of columns, and the easiest way to do this is to keep both
    in Java:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `view` object is now ready for the `GridLayoutAnimationController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to start the animation when the screen is displayed, we override the
    `onStart` method. It is in here that we look up the `GridView` again and start
    the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to integrate this new example with the other animation examples, you'll
    need to open the `res/layout/main.xml` file in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `Button` to the end of the `LinearLayout`, the one we''ll use to
    start the color selection example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `AnimationSelector` source file in your editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After setting the `OnClickListener` of the `news_feed Button`, find and set
    the `OnClickListener` of the new `colors Button` in the same way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onClick` method, after the `switch case` for the `news_feed Button`,
    add another `switch case` for the new `colors Button`, and start the `ColorSelectorActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `AndroidManifest.xml` file in your editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the `<application>` section, register the new `ColorSelectorActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new example makes use of the `GridLayoutAnimationController` to start each
    "fade in" animation a fraction of a second after the previous one started. This
    creates a fluid animation effect of the color swatches appearing from the top-left
    to the bottom-right of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: When you instantiate a `GridLayoutAnimationController`, it requires you to provide
    the animation and two parameters which indicate the amount of time between starting
    animations for the next row, or the next column. The delay given is not specified
    in a "direct" time format, but instead by how long the given animation takes to
    complete. In our case, if the animation took one second to complete, the delay
    between each animation starting would be 200 milliseconds, since the delay is
    specified as `0.2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fact that we animate the swatches just as this `Activity` becomes visible,
    effectively makes this a transition animation, introducing the user to this new
    screen. For these types of animations, it''s imperative to take as little time
    as possible while still giving a pleasing introduction. When you run the new example
    you should get an animation similar to the ones illustrated in the following images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_07_03b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Custom Animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far we''ve explored using Android''s stock animations with the normal widgets,
    but what about applying a custom animation to a widget that isn''t built for animations?
    Android includes support for four basic animation types that can be applied to
    `View` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Translate/Move
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alpha/Transparency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These different animation structures can be applied by themselves, or merged
    together in an animation set where any combination of the three can be run at
    the same time. By creating an animation with a delay time before it starts, you
    can create complex animations by having simple sets of animations follow each
    other.
  prefs: []
  type: TYPE_NORMAL
- en: Like so many things in Android, the easiest way to create your own custom animations
    is to define it in a resource XML file. The elements in the animation format used
    by Android correspond directly to the classes in the `android.animation.view`
    package. An animation file can also reference animations in other animation resources,
    which makes it much easier to compose complex animations and re-use simple animations.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – writing a custom animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a custom animation is very simple, but not entirely intuitive. For this
    section you'll define a custom animation which will increase the size of its animated
    widget by a factor of five, while at the same time fading it until its entirely
    transparent.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new XML resource file named `res/anim/vanish.xml` and open it in an
    editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The root element of the animation file will be an animation `set` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `<set>` element, declare an element to define the scale up animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The duration of the scale up animation needs to be set as `300` milliseconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The animation starts to scale from the original size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The scale animation needs to increase the size by a factor of `5.0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want the scale to expand from the center of the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last part of the `<scale>` element defines the acceleration curve of the
    animation. Here we want the scale up to decelerate as it runs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a new element to handle the fade out part of the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The duration of the fade out animation is also `300` milliseconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We start with no transparency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The fade out ends with a completely invisible widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The fade out should accelerate as it runs, so we use an accelerate interpolator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a relatively simple animation set, but its effect is visually pleasing.
    Keeping the animation at `300` milliseconds is quick enough to not interfere with
    the user's interaction, but just long enough to be seen in full by the user.
  prefs: []
  type: TYPE_NORMAL
- en: When defining animations in an animation `<set>` element, each non-set sub animation
    needs to have its `duration` defined. The `<set>` element has no concept of its
    own `duration`. However, you can define a single `interpolator` for the entire
    set to share.
  prefs: []
  type: TYPE_NORMAL
- en: The `<scale>` animation will by default, scale the widget using the top-left
    corner as the "pivot" point, causing the widget to grow to the right and downward,
    but not left and upward. This causes a lopsided animation which is not very appealing.
    In the preceding example, the scale animation runs with the pivot at the center
    of the animated widget.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – making a Button vanish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So how can we apply the nice shiny animation to a `Button` object? The `Button`
    object doesn't have an animation attribute, and so you can't just reference it
    from the layout resource file. What we want, is the animation to run when the
    `Button` widget is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new layout resource file named `res/layout/vanish.xml` and open in
    an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the root of the new layout, declare a `RelativeLayout` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Button` needs to be nice and large, and centered on the screen. For this
    we give it some inner padding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new Java source file in the root package of the `AnimationExamples`
    project named `VanishingButtonActivity.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new class needs to extend `Activity` and implement the `OnClickListener`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `onCreate` method and invoke the `Activity.onCreate` method to
    perform the required Android setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the content view to the new `vanish` layout resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `Button` widget declared in the XML layout resource and set its `OnClickListener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `onClick` method of `OnClickListener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `Animation` from the resource file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `Animation` on the `Button` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `AndroidManifest.xml` file in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the `VanishingButtonActivity` at the end of the `<application>` section
    with a display label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `res/layout/main.xml` layout resource in your editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `Button` to the end of `LinearLayout` to activate the `VanishingButtonActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `AnimationSelector` Java source file in your editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end of the `onCreate` method, fetch the new `vanish Button` from the
    layout and set its `OnClickListener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onClick` method, add a new switch case to start the `VanishingButtonActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The addition of the preceding example will display a single `Button` in the
    middle of the screen. When clicked, the `Button` will be mutated by the `vanish`
    animation for `300` milliseconds. When it is complete, the animation won't have
    any effect on the `Button` anymore. This is an important characteristic of animations—when
    they are complete, the widget they have animated is returned to its original state.
  prefs: []
  type: TYPE_NORMAL
- en: It's also important to note that it's not the widget itself that is modified
    by an animation, but rather the state of the `Canvas` it's painted on. This is
    much the same concept as modifying the state of `Graphics` or `Graphics2D` object
    in Java AWT, or Swing before a widget uses the `Graphics` object to paint itself.
  prefs: []
  type: TYPE_NORMAL
- en: In the following images you can see the effect that animation has on the `Button`
    when it's clicked. The `Button` is actually re-painted for each frame in the animation,
    and remains entirely active during that time.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_07_06b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the various methods by which you can apply animations
    to various parts of your user interface. We explored how some widgets are designed
    to animate themselves. Layouts can be animated for transitions in and out of an
    `Activity`.
  prefs: []
  type: TYPE_NORMAL
- en: Several simple animations are available by default in the Android resource,
    but ultimately creating your own animations and applying them to your user interface
    manually creates, by far, the most visually appealing and user-friendly experience
    for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Many applications on a mobile device need to present a large amount of information
    on the screen, and present it in such a way that it can be easily absorbed. In
    the next chapter, we'll explore user interface design with regards to presenting
    information to the user in a friendly and useful manner. This allows users to
    access the information that they need as quickly as possible, in a swift and easy
    manner, while not limiting the information they have access to.
  prefs: []
  type: TYPE_NORMAL
