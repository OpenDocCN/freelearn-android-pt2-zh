- en: Chapter 7. Animating Widgets and Layouts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Animations are an important element in the user interface design of a modern
    application. However, it''s also easy to overuse animations in your designs. A
    general guideline for animation use in a non-game application is—only animate
    user interactions and notifications, and keep the duration short so that it doesn''t
    impact the user''s experience negatively. For a game, more animation is generally
    acceptable (or even expected).*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: So why animate user interaction and not (for example) the background of your
    application? For one thing, animating the background of an application is distracting,
    and if you are trying to capture or present important information to the user,
    it's unprofessional (no matter how good it looks). Animations are also very important
    in regards to notifications. Movement on the screen draws attention, thus what
    would normally be a large pop-up dialog can be replaced by a small animating icon.
    A perfect example of such an icon is the "downloading" icon which is placed at
    the top left of the notification area of an Android device when the Android **Market**
    application is downloading new software or updates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Layout animations and transitions provide useful status information to the user.
    When using a screen transition you tell your user what has just happened, or what
    is about to happen. Different transitions signify different events to your users,
    knowing what transition to use for each different activity will let your users
    know what kind of action is about to be taken. Layout animations are an important
    part of your user feedback, leaving them out or using the wrong one in the wrong
    place can leave your users irritated, or slightly confused ("change dazed"). Using
    the right animations will improve user experience, and can even speed up their
    use of the application by giving them brief cues as to what they are expected
    to do next.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, there are two primary types of animation which we will be looking
    at—widget animations and layout animations. We'll look at the standard animation
    structures provided by Android, and we'll look at how to create new animation
    types and extend the existing ones. We'll also be looking at timing and "good
    practice" use of animations, and keeping users happy without slowing them down
    or distracting them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Using standard Android animations
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any `View` or `ViewGroup` object in Android can have an animation attached to
    it. Animations are generally defined as application resources in an XML file,
    and Android provides a few useful defaults in the `android` package. Android also
    includes several `View` classes which are designed specifically to handle animations.
    With these classes you will find that they have layout attributes which allow
    you to set a particular types of animations that will be used upon certain actions.
    However, animations are generally not specified in a layout file, instead they
    rely on the Java code to set and start `Animation` objects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The main reason why animations are not normally specified as part of the layout
    XML is very simple—when should they run? Many animations can be used as a response
    to user input, letting the user know what's happening. Most animations will in
    some way or the other be triggered by a user's action (unless they are there to
    serve as a notification). Thus you will need to specify both—which animation to
    run on a widget, and the signal about when the animation should run. The default
    Android animations will begin animating immediately, while other animation structures
    may have a scheduled delay before they start.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – animating a news feed
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll start off by creating a selector `Activity` and a simple `NewsFeedActivity`.
    In a news feed, we'll animate the latest headlines "in and out" using a timer.
    For this example we'll be working with some of the default animations provided
    by Android and driving the process mainly through the layout resources.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project to contain the animation examples from this chapter, with
    a main `Activity` named `AnimationSelectionActivity`:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open the `res/layout/main.xml` layout file in an editor or IDE.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear out the default content of the layout resource.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a vertical `LinearLayout` consuming all the available screen space:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `Button` labeled `News Feed` to link to the first animation example:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new layout resource file named `news.xml`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a vertical `LinearLayout` containing all of the available screen space:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a `TextSwitcher` object to the `LinearLayout`, specifying the "in" and
    "out" animations to the default "slide" animations:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open the `res/values/strings.xml` file in an editor or IDE.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a string-array named `headlines` with elements for some mock news headlines:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the generated root package, declare a new Java source file named `NewsFeedActivity.java`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register the `NewsFeedActivity` class in your `AndroidManifest.xml` file:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The new class should extend the `Activity` class and implement `Runnable`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Declare a `Handler` to be used as a timing structure for changing the headlines:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need a reference to the `TextSwitcher` object:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Declare a string-array to hold the mock headlines you added to the `strings.xml`
    file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You''ll also need to keep track of which headline is currently being displayed:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Override the `onCreate` method:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Invoke the `onCreate` method of `Activity`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set the content view to the `news` layout resource:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Store a reference to the headline string-array from the `strings.xml` application
    resource file:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Find the `TextSwitcher` widget and assign it to the field declared earlier:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Set the `ViewFactory` of the `TextSwitcher` to a new anonymous class that will
    create `TextView` objects when asked:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Override the `onStart` method:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Invoke the `onStart` method of the `Activity` class:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Reset the `headlineIndex` so that we start from the first headline:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Post the `NewsFeedActivity` as a delayed action using the `Handler`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Override the `onStop` method:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Invoke the `onStop` method of the `Activity` class:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remove any pending calls to the `NewsFeedActivity`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Implement the `run` method which we''ll use to swap to the next headline:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open a `try` block to swap the headline inside.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `TextSwitcher.setText` method to swap to the next headline:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If the `headlineIndex` is past the total number of headlines, reset the `headlineIndex`
    to zero:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Close the `try` block, and add a `finally` block. In the `finally` block, post
    the `NewsFeedActivity` back onto the `Handler` queue:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open the auto generated `AnimationSelector` Java source in an editor or IDE.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `AnimationSelector` class needs to implement `OnClickListener`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `onCreate` method, ensure that the content view is set to the `main`
    layout resource created earlier:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Find the declared `Button` and set its `OnClickListener` to `this`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Declare the `onClick` method:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Use a switch to determine which `View` was clicked:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If it''s the news feed `Button`, then use the following `case`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Start the `NewsFeedActivity` using a new `Intent`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Break from the `switch` statement, thus finishing the `onClick` method.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TextSwitcher` is an example of an animation utility `View`. In this case
    it's the perfect structure to swap between the news headlines, displaying one
    headline at a time and animating a transition between each of the texts. The `TextSwitcher`
    object creates two `TextView` objects (using the anonymous `ViewFactory` class).
    When you use the `setText` method, the `TextSwitcher` changes the text of the
    "off screen" `TextView` and animates a transition between the "on screen" `TextView`
    and the "off screen" `TextView` (with the new text content displayed).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TextSwitcher` class requires that you specify two animation resources
    for it to work with, in order to create its transition effect:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Animate text onto the screen
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animate text off the screen
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous case, we made use of the default `slide_in_left` and `slide_out_right`
    animations. Both of these are examples of translation-based animations due to
    the fact that they actually alter the "on screen" position of the `TextView` objects
    in order to create their effect.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Using flipper and switcher widgets
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first example of this chapter made use of the `TextSwitcher` class, an animating
    `View` class in the standard Android API. There are several other animation utility
    classes, some of which you may have encountered before (such as `ImageSwitcher`).
    Both `TextSwitcher` and `ImageSwitcher` are related classes, and both inherit
    from the more generic `ViewSwitcher` class.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: The `ViewSwitcher` class is a generic animation tool, and defines the `ViewFactory`
    interface that we implemented anonymously in the previous example. A `ViewSwitcher`
    is a `ViewGroup` with only two child `View` objects. One is displayed on the screen,
    while the other is hidden. The `getNext` utility method allows you to find out
    which is the "off screen" `View` object.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: While you generally use a `ViewFactory` to populate a `ViewSwitcher`, you have
    the option to populate it manually. You could have populated the `TextSwitcher`
    in the example by using the `addView` method that is inherited from `ViewGroup`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![Using flipper and switcher widgets](img/4484OS_07_01.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: Using the ImageSwitcher and TextSwitcher implementations
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ImageSwitcher` and `TextSwitcher` classes are specialized implementations
    of the `ViewSwitcher` that understand the type of `View` objects they contain.
    When you invoke the `setText` method of the `TextSwitcher` object, it''s much
    like invoking the following code snippet on a `ViewSwitcher` containing two `TextView`
    children:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`TextSwitcher` can be used to display content such as (as in the example) a
    news feed, or as with the Android notification area, to display text content that
    doesn''t fit into a single line. Displaying multiple lines in a `TextSwitcher`
    is particularly effective when the animation runs the text upwards, causing the
    text to appear to scroll upwards behind the `TextSwitcher` object.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: An `ImageSwitcher` is most commonly used in a gallery, slide show, or similar
    structure. You could also use an `ImageSwitcher` to allow the user to select from
    a small list of images, for example a short list of login avatars.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – populating the TextSwitcher
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As an alternative to populating the `TextSwitcher` with a `ViewFactory` in the
    news feed example, try populating it in the XML layout resource. Remember that
    it requires exactly two `TextView` child widgets. If you get this right, try giving
    each of the two `TextView` objects different font colors and styles.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Animating layout widgets
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the animation utility widgets such as `TextSwitcher` and `ImageSwitcher`
    can allow you to display much more information over time than you could fit on
    the screen at a time. `ViewGroup` objects can also be animated without any serious
    modification through the `LayoutAnimationController` class. However, in this case,
    animation needs to be added in your Java code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: A `LayoutAnimationController` is best used to create "entry" or "exit" effects
    on a `ViewGroup` as it appears or just before it disappears off the screen. The
    controller simply starts a specified animation on each of the `View` children
    of a specified `ViewGroup`. However, it doesn't have to do it all at the same
    time, or in a sequential order. You can easily configure a `LayoutAnimationController`
    to leave a slight delay between the starting of an animation on each child widget,
    creating a staggered effect.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'If applied correctly to a `LinearLayout`, you could achieve a result similar
    to the one illustrated in the following diagram:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating layout widgets](img/4484OS_07_02.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Time for action – animating a GridView
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GridView` class has its own `LayoutAnimationController` specifically designed
    to animate it in terms of rows and columns, allowing more complex effects than
    can be achieved with a standard `LayoutAnimationController`. For this next part
    of the "animations" example we're going to build a lovely color selector out of
    a `GridView`. When the selector first appears on the screen, each color swatch
    will fade in, starting in the top left corner and ending on the bottom right corner.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Start by declaring a new Java source file in the root package of your project
    named `ColorAdapter.java`, which will generate the color swatches for the `GridView`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `ColorAdapter` needs to extend `BaseAdapter` to take care of the boiler
    plate `Adapter` requirements:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `ColorAdapter` will be created with a specified number of rows and columns,
    the same numbers which will be displayed on the `GridView`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The number of items that the `ColorAdapter` will provide is the number of rows
    multiplied by the number of columns:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The ID of a color is the position or index at which it''s found:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We use a utility method to compose the color from an index in the "list." For
    this function we make use of the `HSVtoRGB` method in the Android `Color` class:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The item at an index in the Adapter model is returned as it''s color value:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To create the color swatch `View` objects, we implement the `getView` method
    of `Adapter` as usual:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `View` we return is going to be an `ImageView` object, so we either re-use
    the one given by the parent widget, or create a new one:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We make use of the `ColorDrawable` class to fill the `ImageView` with the color
    specified by our `getColor` utility method:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `ImageView` needs to have its `android.widget.AbsListView.LayoutParams`
    set, and then it can be returned to the `GridView` for display:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create a new XML layout resource file named `res/layout/colors.xml` to hold
    the declaration of the `GridView` that will act as the color selector.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The contents of the `colors.xml` layout file are just a single `GridView` widget:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Define another new Java source file in the root package of your `AnimationExamples`
    project. Name this one `ColorSelectorActivity.java`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new class declaration should extend `Activity`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Override the `onCreate` method as normal, and set the content view to the `colors`
    XML layout resource you just wrote:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now you can load the default `Android` "fade in" animation using the handy
    `AnimationUtils` class from the `android.view.animation` package:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In order to animate the `GridView` correctly, you need to instantiate a new
    `GridLayoutAnimationController` object, passing it the "fade in" animation:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now look for the `GridView` which you have declared in the `colors.xml` file:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Set the number of columns in the `GridView` to `10` (note that we didn''t do
    this in the XML layout resource as you normally would):'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'When you set the adapter of the `GridView` to a `ColorAdapter`, you also need
    to know the number of columns, and the easiest way to do this is to keep both
    in Java:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `view` object is now ready for the `GridLayoutAnimationController`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In order to start the animation when the screen is displayed, we override the
    `onStart` method. It is in here that we look up the `GridView` again and start
    the animation:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In order to integrate this new example with the other animation examples, you'll
    need to open the `res/layout/main.xml` file in an editor or IDE.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `Button` to the end of the `LinearLayout`, the one we''ll use to
    start the color selection example:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Open the `AnimationSelector` source file in your editor or IDE.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After setting the `OnClickListener` of the `news_feed Button`, find and set
    the `OnClickListener` of the new `colors Button` in the same way:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the `onClick` method, after the `switch case` for the `news_feed Button`,
    add another `switch case` for the new `colors Button`, and start the `ColorSelectorActivity`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Open the `AndroidManifest.xml` file in your editor or IDE.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the `<application>` section, register the new `ColorSelectorActivity`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '*What just happened?*'
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new example makes use of the `GridLayoutAnimationController` to start each
    "fade in" animation a fraction of a second after the previous one started. This
    creates a fluid animation effect of the color swatches appearing from the top-left
    to the bottom-right of the screen.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: When you instantiate a `GridLayoutAnimationController`, it requires you to provide
    the animation and two parameters which indicate the amount of time between starting
    animations for the next row, or the next column. The delay given is not specified
    in a "direct" time format, but instead by how long the given animation takes to
    complete. In our case, if the animation took one second to complete, the delay
    between each animation starting would be 200 milliseconds, since the delay is
    specified as `0.2`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'The fact that we animate the swatches just as this `Activity` becomes visible,
    effectively makes this a transition animation, introducing the user to this new
    screen. For these types of animations, it''s imperative to take as little time
    as possible while still giving a pleasing introduction. When you run the new example
    you should get an animation similar to the ones illustrated in the following images:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_07_03b.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: Creating Custom Animations
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far we''ve explored using Android''s stock animations with the normal widgets,
    but what about applying a custom animation to a widget that isn''t built for animations?
    Android includes support for four basic animation types that can be applied to
    `View` objects:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Translate/Move
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotate
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alpha/Transparency
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These different animation structures can be applied by themselves, or merged
    together in an animation set where any combination of the three can be run at
    the same time. By creating an animation with a delay time before it starts, you
    can create complex animations by having simple sets of animations follow each
    other.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Like so many things in Android, the easiest way to create your own custom animations
    is to define it in a resource XML file. The elements in the animation format used
    by Android correspond directly to the classes in the `android.animation.view`
    package. An animation file can also reference animations in other animation resources,
    which makes it much easier to compose complex animations and re-use simple animations.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – writing a custom animation
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a custom animation is very simple, but not entirely intuitive. For this
    section you'll define a custom animation which will increase the size of its animated
    widget by a factor of five, while at the same time fading it until its entirely
    transparent.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Create a new XML resource file named `res/anim/vanish.xml` and open it in an
    editor or IDE.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The root element of the animation file will be an animation `set` element:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the `<set>` element, declare an element to define the scale up animation:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The duration of the scale up animation needs to be set as `300` milliseconds:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The animation starts to scale from the original size:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The scale animation needs to increase the size by a factor of `5.0`:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We want the scale to expand from the center of the widget:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The last part of the `<scale>` element defines the acceleration curve of the
    animation. Here we want the scale up to decelerate as it runs:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Next, define a new element to handle the fade out part of the animation:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The duration of the fade out animation is also `300` milliseconds:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We start with no transparency:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The fade out ends with a completely invisible widget:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The fade out should accelerate as it runs, so we use an accelerate interpolator:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '*What just happened?*'
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a relatively simple animation set, but its effect is visually pleasing.
    Keeping the animation at `300` milliseconds is quick enough to not interfere with
    the user's interaction, but just long enough to be seen in full by the user.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: When defining animations in an animation `<set>` element, each non-set sub animation
    needs to have its `duration` defined. The `<set>` element has no concept of its
    own `duration`. However, you can define a single `interpolator` for the entire
    set to share.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: The `<scale>` animation will by default, scale the widget using the top-left
    corner as the "pivot" point, causing the widget to grow to the right and downward,
    but not left and upward. This causes a lopsided animation which is not very appealing.
    In the preceding example, the scale animation runs with the pivot at the center
    of the animated widget.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484OS_07_05.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: Time for action – making a Button vanish
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So how can we apply the nice shiny animation to a `Button` object? The `Button`
    object doesn't have an animation attribute, and so you can't just reference it
    from the layout resource file. What we want, is the animation to run when the
    `Button` widget is clicked.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Create a new layout resource file named `res/layout/vanish.xml` and open in
    an editor or IDE.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the root of the new layout, declare a `RelativeLayout` element:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The `Button` needs to be nice and large, and centered on the screen. For this
    we give it some inner padding:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Create a new Java source file in the root package of the `AnimationExamples`
    project named `VanishingButtonActivity.java`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new class needs to extend `Activity` and implement the `OnClickListener`
    interface:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Override the `onCreate` method and invoke the `Activity.onCreate` method to
    perform the required Android setup:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Set the content view to the new `vanish` layout resource:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Find the `Button` widget declared in the XML layout resource and set its `OnClickListener`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Implement the `onClick` method of `OnClickListener`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Load the `Animation` from the resource file:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Start the `Animation` on the `Button` object:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Open the `AndroidManifest.xml` file in an editor or IDE.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the `VanishingButtonActivity` at the end of the `<application>` section
    with a display label:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Open the `res/layout/main.xml` layout resource in your editor or IDE.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `Button` to the end of `LinearLayout` to activate the `VanishingButtonActivity`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Open the `AnimationSelector` Java source file in your editor or IDE.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end of the `onCreate` method, fetch the new `vanish Button` from the
    layout and set its `OnClickListener`:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In the `onClick` method, add a new switch case to start the `VanishingButtonActivity`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '*What just happened?*'
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The addition of the preceding example will display a single `Button` in the
    middle of the screen. When clicked, the `Button` will be mutated by the `vanish`
    animation for `300` milliseconds. When it is complete, the animation won't have
    any effect on the `Button` anymore. This is an important characteristic of animations—when
    they are complete, the widget they have animated is returned to its original state.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: It's also important to note that it's not the widget itself that is modified
    by an animation, but rather the state of the `Canvas` it's painted on. This is
    much the same concept as modifying the state of `Graphics` or `Graphics2D` object
    in Java AWT, or Swing before a widget uses the `Graphics` object to paint itself.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: In the following images you can see the effect that animation has on the `Button`
    when it's clicked. The `Button` is actually re-painted for each frame in the animation,
    and remains entirely active during that time.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_07_06b.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the various methods by which you can apply animations
    to various parts of your user interface. We explored how some widgets are designed
    to animate themselves. Layouts can be animated for transitions in and out of an
    `Activity`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了将动画应用于用户界面各个部分的各种方法。我们研究了某些小部件是如何设计来自我动画化的，布局可以为了进出`Activity`而进行动画过渡。
- en: Several simple animations are available by default in the Android resource,
    but ultimately creating your own animations and applying them to your user interface
    manually creates, by far, the most visually appealing and user-friendly experience
    for your users.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓资源中默认提供了一些简单的动画，但最终，手动创建自己的动画并将它们应用到用户界面上，无疑会为用户带来最视觉吸引人且用户友好的体验。
- en: Many applications on a mobile device need to present a large amount of information
    on the screen, and present it in such a way that it can be easily absorbed. In
    the next chapter, we'll explore user interface design with regards to presenting
    information to the user in a friendly and useful manner. This allows users to
    access the information that they need as quickly as possible, in a swift and easy
    manner, while not limiting the information they have access to.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备上的许多应用程序需要在屏幕上展示大量信息，并以易于吸收的方式呈现。在下一章中，我们将探讨关于向用户友好且有用地展示信息方面的用户界面设计。这使得用户能够以快速简便的方式尽可能快地访问他们所需的信息，同时不限制他们所能获取的信息量。
