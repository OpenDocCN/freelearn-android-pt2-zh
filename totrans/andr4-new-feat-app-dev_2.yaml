- en: Chapter 2. A New Layout – GridLayout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 新布局——GridLayout
- en: A new layout is introduced with Android Ice Cream Sandwich known as the **GridLayout**.
    This layout is an optimized layout and could be used instead of **LinearLayout**
    and **RelativeLayout**. This chapter shows how to use and configure GridLayout.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Android Ice Cream Sandwich的推出，引入了一种新的布局，称为**GridLayout**。这个布局是一个优化的布局，可以代替**LinearLayout**和**RelativeLayout**。本章展示了如何使用和配置GridLayout。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Why to use GridLayout
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用GridLayout
- en: Adding a GridLayout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个GridLayout
- en: Configuring GridLayout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置GridLayout
- en: GridLayout
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GridLayout
- en: '**GridLayout** is a layout that divides its view space into rows, columns,
    and cells. GridLayout places views in it automatically, but it is also possible
    to define the column and row index to place a view into GridLayout. With the span
    property of cells, it is possible to make a view span multiple rows or columns.
    The following code block shows a sample layout file using a `GridLayout` layout:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**GridLayout**是一种将其视图空间划分为行、列和单元格的布局。GridLayout自动在其中放置视图，但也可以定义列和行索引来在GridLayout中放置视图。通过单元格的跨度属性，可以使一个视图跨越多行或多列。下面的代码块展示了一个使用`GridLayout`布局的示例布局文件：'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When this layout XML is viewed in the emulator it will look like the following
    screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个布局XML在模拟器中查看时，它将如下截图所示：
- en: '![GridLayout](img/9526_02_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![GridLayout](img/9526_02_01.jpg)'
- en: In this layout XML file, we placed four `TextView` components with the texts
    `Cell 1,1`, `Cell 1,2`, `Cell 2,1`, and `Cell 2,2`. With the GridLayout `orientation`
    set to `horizontal` and the `columnCount` and `rowCount` properties set to `2`,
    GridLayout firstly places items automatically to the first row, and when the number
    of items reaches `columnCount`; it starts placing items in the second row.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个布局XML文件中，我们放置了四个`TextView`组件，文本分别为`Cell 1,1`、`Cell 1,2`、`Cell 2,1`和`Cell
    2,2`。将GridLayout的`orientation`设置为`horizontal`，并且`columnCount`和`rowCount`属性设置为`2`，GridLayout首先自动将项目放置在第一行，当项目数量达到`columnCount`时，它开始将项目放置在第二行。
- en: The first thing you will notice in this layout is that `TextView` components
    don't have `layout_width` and `layout_height` properties. These properties are
    not used because `GridLayout` uses the `layout_gravity` property for determining
    the size of cells instead of `layout_width` and `layout_height` properties. Normally
    the `gravity` property is used to align the content of a view, but in `GridLayout`
    it is used for a different purpose. The available gravity constants include `left`,
    `top`, `right`, `bottom`, `center_horizontal`, `center_vertical`, `center`, `fill_horizontal`,
    `fill_vertical`, and `fill`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这个布局中首先会注意到的就是`TextView`组件没有`layout_width`和`layout_height`属性。这些属性没有被使用，因为`GridLayout`使用`layout_gravity`属性来确定单元格的大小，而不是`layout_width`和`layout_height`属性。通常`gravity`属性用于对齐视图的内容，但在`GridLayout`中它被用于不同的目的。可用的重力常数包括`left`、`top`、`right`、`bottom`、`center_horizontal`、`center_vertical`、`center`、`fill_horizontal`、`fill_vertical`和`fill`。
- en: In `GridLayout`, you can explicitly define the cell that a view will be placed
    in by specifying the index of the column and row. If the index is not specified,
    `GridLayout` will automatically place the views to the first available position
    according to the orientation of the `GridLayout` layout.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GridLayout`中，你可以通过指定列和行的索引明确地定义一个视图将被放置的单元格。如果没有指定索引，`GridLayout`会根据`GridLayout`布局的取向自动将视图放置在第一个可用的位置。
- en: Why to use GridLayout
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用GridLayout
- en: '**LinearLayout** and **RelativeLayout** are the most common layouts used in
    user interface design in Android. For simple user interfaces they are a good choice
    but when the user interface gets complicated, the use of nested LinearLayout tends
    to increase. Nested layouts (of any type) can hurt performance, and furthermore
    nested LinearLayout deeper than 10 may cause a crash in your application. Thus,
    you should either avoid using too many nested LinearLayout blocks or you should
    use RelativeLayout in order to decrease nested LinearLayout blocks. Another drawback
    of these layouts for complicated user interfaces is the difficulty in readability.
    It is difficult to maintain nested LinearLayout or RelativeLayout layouts that
    have many views. It is a good choice to use **GridLayout** in these cases. Too
    many nested LinearLayouts could be avoided by using GridLayout. Furthermore, it
    is much easier to maintain GridLayout. Many of the user interfaces that use LinearLayout,
    RelativeLayout, or **TableLayout** can be converted to GridLayout where GridLayout
    will provide performance enhancements. One of the major advantages of GridLayout
    over other layouts is that you can control the alignment of a view in both horizontal
    and vertical axes.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**LinearLayout**和**RelativeLayout**是Android用户界面设计中使用最普遍的布局。对于简单的用户界面，它们是一个不错的选择，但是当用户界面变得复杂时，嵌套LinearLayout的使用往往会增加。嵌套布局（任何类型）可能会影响性能，而且嵌套超过10层的LinearLayout可能会导致应用程序崩溃。因此，你应该避免使用过多的嵌套LinearLayout块，或者使用RelativeLayout以减少嵌套LinearLayout块。这些布局对于复杂用户界面的另一个缺点是可读性差。维护具有许多视图的嵌套LinearLayout或RelativeLayout布局很困难。在这些情况下，使用**GridLayout**是一个不错的选择。通过使用GridLayout，可以避免使用过多的嵌套LinearLayout。此外，维护GridLayout要容易得多。许多使用LinearLayout、RelativeLayout或**TableLayout**的用户界面可以转换为GridLayout，其中GridLayout将提供性能提升。与其他布局相比，GridLayout的主要优势之一是你可以控制视图在水平和垂直轴上的对齐方式。'
- en: Adding a GridLayout
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个GridLayout
- en: 'In this section we are going to migrate an Android application from **LinearLayout**
    to **GridLayout**. The layout''s XML code of the application with `LinearLayout`
    is shown in the following code block:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把一个Android应用程序从**LinearLayout**迁移到**GridLayout**。使用`LinearLayout`的应用程序的布局XML代码如下代码块所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The drawable `borders_bottom_right` background used in the preceding layout
    file is shown in the following code block:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个布局文件中使用的drawable `borders_bottom_right`背景如下代码块所示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The screen will look like the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕将如下所示：
- en: '![Adding a GridLayout](img/9526_02_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![添加GridLayout](img/9526_02_02.jpg)'
- en: 'As you can see in the layout XML code, we used three nested `LinearLayout`
    instances in order to achieve a simple login screen. If this screen was designed
    with `GridLayout`, the XML code of the layout would look like the following code
    block:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在布局XML代码中看到的，我们使用了三个嵌套的`LinearLayout`实例来实现一个简单的登录屏幕。如果这个屏幕是用`GridLayout`设计的，布局的XML代码将如下代码块所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We set the `columnCount` property to `2` because we have a `TextView` component
    and an `EditText` component in a row. After that we placed the views and didn't
    specify the row or column index. **GridLayout** placed them automatically according
    to `orientation` and `columnCount`. We set the `layout_columnSpan` property to
    `2` in order to make the button span two columns. With the `layout_gravity` property
    we made the button appear in the center of the row. As you can see in the XML
    code of the layout, it is very simple and easy to design the same screen with
    GridLayout. Furthermore, alignments are much easier with GridLayout and this code
    has better readability.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`columnCount`属性设置为`2`，因为我们在一行中有一个`TextView`组件和一个`EditText`组件。之后我们放置了视图，并没有指定行或列的索引。**GridLayout**会根据`orientation`和`columnCount`自动放置它们。我们将`layout_columnSpan`属性设置为`2`，以使按钮跨越两列。通过`layout_gravity`属性，我们使按钮在行的中心显示。正如你在布局的XML代码中看到的，使用GridLayout设计相同的屏幕非常简单和容易。此外，GridLayout的对其方式更加简单，并且代码的可读性更好。
- en: 'GridLayout has been available since API Level 14, so the minimum SDK property
    in the `AndroidManifest.xml` file should be set to `14` or greater as shown in
    the following code line:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`GridLayout`从API级别14开始可用，因此在`AndroidManifest.xml`文件中，最低SDK属性应设置为`14`或更高，如下代码行所示：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configuring GridLayout
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置GridLayout
- en: 'Firstly, we will write a sample `GridLayout` XML code and then we will use
    this code as a base for other examples. The XML code of the sample layout will
    look like the following code block:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将编写一个示例`GridLayout` XML代码，然后我们将使用此代码作为其他示例的基础。示例布局的XML代码将如下代码块所示：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using the preceding code block the screen will look like the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码块，屏幕将如下所示：
- en: '![Configuring GridLayout](img/9526_02_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![配置GridLayout](img/9526_02_03.jpg)'
- en: 'As you can see in the layout XML code, `TextView` components are placed without
    indices and they are automatically positioned in `GridLayout` according to `orientation`,
    `columnCount`, and `rowCount`. Now we will set the index number of `[1, 3]` to
    `[2, 1]`. The layout XML code should look like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在布局XML代码中所见，`TextView`组件没有索引地放置，并根据`orientation`、`columnCount`和`rowCount`在`GridLayout`中自动定位。现在我们将`[1,
    3]`的索引编号设置为`[2, 1]`。布局XML代码应如下所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The screen should look like the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕应如下所示：
- en: '![Configuring GridLayout](img/9526_02_04.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![配置GridLayout](img/9526_02_04.jpg)'
- en: As you see in the layout XML code (the highlighted part), we set the row and
    column index with `layout_row` and `layout_column` properties. The index is zero-based,
    thus the `TextView` component with text `[1, 3]` is placed to the second row and
    second column. The interesting part here is that the `TextView` component with
    text `[2, 1]` is placed after `[1, 3]`. This is because `[2, 1]` doesn't have
    an index and **GridLayout** continues positioning after `[1, 3]`. That is **GridLayout**
    looks for the first available position after the last placed view. Another noteworthy
    thing is that after shifting indices, the row count increased to `4` although
    we set the row count to `3`. **GridLayout** doesn't throw exception in such cases.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在布局XML代码（高亮部分）中所见，我们使用`layout_row`和`layout_column`属性设置行和列索引。索引是基于零的，因此带有文本`[1,
    3]`的`TextView`组件被放置在第二行和第二列。这里有趣的部分是，带有文本`[2, 1]`的`TextView`组件被放置在`[1, 3]`之后。这是因为`[2,
    1]`没有索引，**GridLayout**在`[1, 3]`之后继续定位。这就是**GridLayout**在最后一个放置视图之后寻找第一个可用位置的方式。另一个值得注意的是，在移动索引后，行数增加到了`4`，尽管我们设置了行数为`3`。**GridLayout**在这种情况下不会抛出异常。
- en: 'In the following sample, we will swap `[1, 2]` and `[2, 2]`.The layout XML
    code should look like the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将交换`[1, 2]`和`[2, 2]`。布局XML代码应如下所示：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The screen should look like the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕应如下所示：
- en: '![Configuring GridLayout](img/9526_02_05.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![配置GridLayout](img/9526_02_05.jpg)'
- en: As you see in the layout XML code, we firstly set `layout_row` of `[1, 2]` to
    `1`. By this way, it will appear in place of `[2, 2]`. Then we have to set `layout_row`
    of `[1, 3]` to `0` and `layout_column` to `2`, because the cursor position of
    `GridLayout` was changed by setting the index of `[1, 2]`. If we don't change
    the index of `[1, 3]`, it will be placed after the `[1, 2]` index's new position.
    After that, in order to make `[2, 2]` appear in position of `[1, 2]`, we set the
    `layout_row` of `[2, 2]` to `0` and `layout_column` to `1`. Lastly, we have to
    set `layout_row` of `[2, 3]` to `1` in order to make it appear after `[1, 2]`
    index's new position. It seems a little complex to configure views in **GridLayout**,
    but if you try it in an emulator, you will see that it isn't that difficult.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在布局XML代码中所见，我们首先将`[1, 2]`的`layout_row`设置为`1`。这样，它将出现在`[2, 2]`的位置。然后，我们必须将`[1,
    3]`的`layout_row`设置为`0`，将`layout_column`设置为`2`，因为`GridLayout`的游标位置通过设置`[1, 2]`的索引而改变了。如果我们不改变`[1,
    3]`的索引，它将被放置在`[1, 2]`索引新位置的后面。之后，为了使`[2, 2]`出现在`[1, 2]`的位置，我们将`[2, 2]`的`layout_row`设置为`0`，将`layout_column`设置为`1`。最后，我们必须将`[2,
    3]`的`layout_row`设置为`1`，以使其出现在`[1, 2]`索引新位置的后面。在**GridLayout**中配置视图看起来有点复杂，但如果你在模拟器中尝试，你会发现这并不那么困难。
- en: 'In the following sample code, we will delete `[2, 2]` and make `[1, 2]` to
    span two rows. The layout XML code look like the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例代码中，我们将删除`[2, 2]`并将`[1, 2]`设置为跨越两行。布局XML代码应如下所示：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using the preceding code block we get the following screen:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码块，我们得到以下屏幕：
- en: '![Configuring GridLayout](img/9526_02_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![配置GridLayout](img/9526_02_06.jpg)'
- en: As you can see in the layout XML code, we deleted the cell `[2,2]` and set the
    `layout_rowSpan` `property of `[1,2]` to `2`. By this way, `[1,2]` will cover
    two rows. We set the `layout_gravity` property to `fill` in order to make it fill
    the space of two rows. Then we set the `gravity` property to `center` in order
    to make the content of the `TextView` component to align to the center of space
    that it covers.`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在布局XML代码中所见，我们删除了单元格`[2,2]`并将`[1,2]`的`layout_rowSpan`属性设置为`2`。这样，`[1,2]`将覆盖两行。我们将`layout_gravity`属性设置为`fill`，以使其填充两行的空间。然后我们将`gravity`属性设置为`center`，以使`TextView`组件的内容对其覆盖的空间中心对齐。`
- en: '`# A new view – Space'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 一个新的视图 - 空间'
- en: '**Space** is a new view introduced with Android Ice Cream Sandwich. It is used
    for putting spaces between views. It is very useful in **GridLayout**. In the
    following sample layout XML code, we removed `TextView` components with text `[2,
    2]` and `[2, 3]` and then put **Space** instead of them as shown in the following
    code block:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**Space**是Android Ice Cream Sandwich中引入的一个新视图。它用于在视图之间放置空间。在**GridLayout**中它非常有用。在以下示例布局XML代码中，我们移除了带有文本`[2,
    2]`和`[2, 3]`的`TextView`组件，然后用**Space**替换它们，如下面的代码块所示：'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see in the layout XML code, we removed `TextView` components with
    text `[2,2]` and `[2,3]`. We put a `Space` view to row `1` and column `1`. We
    set `layout_columnSpan` to `2` in order to make it span two columns. The screen
    will look like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在布局XML代码中所见，我们移除了带有文本`[2,2]`和`[2,3]`的`TextView`组件。我们在第`1`行和第`1`列放置了一个`Space`视图。我们将`layout_columnSpan`设置为`2`，以使其跨越两列。屏幕将看起来像下面这样：
- en: '![A new view – Space](img/9526_02_07.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![新视图 - Space](img/9526_02_07.jpg)'
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: '**LinearLayout** and **RelativeLayout** are the most common layouts in Android
    application development. However, when designing complex user interfaces you may
    need to use nested LinearLayout or RelativeLayout. This is a drawback in the performance
    and readability of your code because these layouts increase the view hierarchy
    which results in unnecessary iterations on view refreshes. **GridLayout** is a
    new layout introduced in Android Ice Cream Sandwich that overcomes these kinds
    of issues. You may design user interfaces without the need for nesting layouts.
    If you are developing applications for API Level 14 and more, it is better to
    use GridLayout. In the next chapter, we are going to learn about the new Social
    APIs introduced with Android Ice Cream Sandwich.`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**LinearLayout**和**RelativeLayout**是Android应用开发中最常见的布局。然而，在设计复杂的用户界面时，你可能需要使用嵌套的LinearLayout或RelativeLayout。这对你的代码性能和可读性是一个缺点，因为这些布局增加了视图层次结构，导致在视图刷新时进行不必要的迭代。**GridLayout**是Android
    Ice Cream Sandwich中引入的一种新布局，它克服了这些问题。你可以设计用户界面，而无需嵌套布局。如果你正在为API级别14及以上的版本开发应用，使用GridLayout会更好。在下一章中，我们将学习到Android
    Ice Cream Sandwich引入的新社交APIs。`'
