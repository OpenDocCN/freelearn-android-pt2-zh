["```kt\npublic class ContactsQueryActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n/*\n* QUERY EXAMPLE\n*/\n// FIRST QUERY FOR CONTACT LOOKUPS\nCursor c = getContentResolver().query(\nContactsContract.Contacts.CONTENT_URI,\nnew String[] { ContactsContract.Contacts._ID, ContactsContract.Contacts.DISPLAY_NAME, ContactsContract.Contacts.LOOKUP_KEY }, ContactsContract.Contacts.DISPLAY_NAME + \" IS NOT NULL\", null, null);\nstartManagingCursor(c);\nint idCol = c.getColumnIndex(Contacts._ID);\nint nameCol = c.getColumnIndex(Contacts.DISPLAY_NAME);\nint lookCol = c.getColumnIndex(Contacts.LOOKUP_KEY);\n// USE A MAP TO KEEP TRACK OF LOOKUP VALUES\nMap<String, String> lookups = new HashMap<String, String>();\nwhile (c.moveToNext()) {\nint id = c.getInt(idCol);\nString name = c.getString(nameCol);\nString lookup = c.getString(lookCol);\nlookups.put(name, lookup);\nSystem.out.println(\"GOT \" + id + \" // \" + lookup + \" // \" + name + \" FROM CONTACTS\");\n}\n}\n}\n\n```", "```kt\n// ALTERNATIVELY - USE LOOKUP KEY LIKE THIS\nUri lookupUri = Uri.withAppendedPath( Contacts.CONTENT_LOOKUP_URI, lookups.get(\"Vicky Wei\"));\nCursor c3 = getContentResolver().query(lookupUri, new String[] { Contacts.DISPLAY_NAME }, null, null, null);\nif (c3.moveToFirst()) {\nint nameCol = c3.getColumnIndex(Contacts.DISPLAY_NAME);\nString displayName = c3.getString(nameCol);\nSystem.out.println(\"GOT NAME \" + displayName + \" FOR LOOKUP KEY \" + lookups.get(\"Vicky Wei\"));\n}\nc3.close();\n\n```", "```kt\nUri lookupUri = getLookupUri(contactId, lookupKey)\n\n```", "```kt\n// THEN WITH LOOKUP KEYS - FIND SPECIFIC DATA FIELDS\nCursor c2 = getContentResolver().query( ContactsContract.Data.CONTENT_URI,\nnew String[] { ContactsContract.CommonDataKinds.Phone.NUMBER, Phone.TYPE },ContactsContract.Data.LOOKUP_KEY + \"=?\", new String[] { lookups.get(\"Vicky Wei\") }, null);\nstartManagingCursor(c2);\nint numberCol = c2.getColumnIndex(Phone.NUMBER);\nint typeCol = c2.getColumnIndex(Phone.TYPE);\nif (c2.moveToFirst()) {\nString number = c2.getString(numberCol);\nint type = c2.getInt(typeCol);\nString strType = \"\";\nswitch (type) {\ncase Phone.TYPE_HOME:\nstrType = \"HOME\";\nbreak;\ncase Phone.TYPE_MOBILE:\nstrType = \"MOBILE\";\nbreak;\ncase Phone.TYPE_WORK:\nstrType = \"WORK\";\nbreak;\ndefault:\nstrType = \"MOBILE\";\nbreak;\n}\nSystem.out.println(\"GOT NUMBER \" + number + \" OF TYPE \" + strType + \" FOR VICKY WEI\");\n}\n\n```", "```kt\n// NOW LOOK AT RAW CONTACT IDS\nc = getContentResolver().query(\nContactsContract.RawContacts.CONTENT_URI,\nnew String[] { ContactsContract.RawContacts._ID, RawContacts.ACCOUNT_NAME, RawContacts.ACCOUNT_TYPE, RawContacts.CONTACT_ID }, null, null, null);\nstartManagingCursor(c);\nint rawIdCol = c.getColumnIndex(RawContacts._ID);\nint accNameCol = c.getColumnIndex(RawContacts.ACCOUNT_NAME);\nint accTypeCol = c.getColumnIndex(RawContacts.ACCOUNT_TYPE);\nint contactIdCol = c.getColumnIndex(RawContacts.CONTACT_ID);\nwhile (c.moveToNext()) {\nint rawId = c.getInt(rawIdCol);\nString accName = c.getString(accNameCol);\nString accType = c.getString(accTypeCol);\nint contactId = c.getInt(contactIdCol);\nSystem.out.println(\"GOT \" + rawId + \" // \" + accName + \" // \" + accType + \" REFRENCING CONTACT \" + contactId);\n}\n\n```", "```kt\npublic class ContactsQueryActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n/*\n* INSERT EXAMPLE\n*/\nContentValues values = new ContentValues();\n// IN THIS CASE - EACH RAW ID IS JUST THE CONTACT ID\nvalues.put(ContactsContract.Data.RAW_CONTACT_ID, 2);\nvalues.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);\nvalues.put(Phone.NUMBER, \"555-987-1234\");\nvalues.put(Phone.TYPE, Phone.TYPE_WORK);\nUri contactUri = getContentResolver().insert( Data.CONTENT_URI, values);\nCursor c4 = getContentResolver().query(contactUri, new String[] { Phone.NUMBER, Phone.TYPE }, null, null, null);\nstartManagingCursor(c4);\n// READ BACK THE ROW\nif (c4.moveToFirst()) {\nString number = c4.getString(numberCol);\nint type = c4.getInt(typeCol);\nString strType = \"\";\nswitch (type) {\ncase Phone.TYPE_HOME:\nstrType = \"HOME\";\nbreak;\ncase Phone.TYPE_MOBILE:\nstrType = \"MOBILE\";\nbreak;\ncase Phone.TYPE_WORK:\nstrType = \"WORK\";\nbreak;\ndefault:\nstrType = \"MOBILE\";\nbreak;\n}\nSystem.out.println(\"GOT NUMBER \" + number + \" OF TYPE \" + strType + \" FOR VICKY WEI\");\n}\n}\n}\n\n```", "```kt\n// NOW INSERT USING BATCH OPERATIONS\nArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();\nops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI)\n.withValue(Data.RAW_CONTACT_ID, 3)\n.withValue(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE)\n.withValue(Email.DATA, \"daniel@stanford.edu\")\n.withValue(Email.TYPE, Email.TYPE_WORK)\n.build());\ntry {\ngetContentResolver().applyBatch (ContactsContract.AUTHORITY, ops);\n} catch (Exception e) {\ne.printStackTrace();\nSystem.out.println(\"ERROR: BATCH TRANSACTION FAILED\");\n}\n\n```", "```kt\n/*\n* UPDATE EXAMPLE\n*/\nops = new ArrayList<ContentProviderOperation>();\nops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI)\n.withSelection(Data.RAW_CONTACT_ID + \"=? AND \" + Email.TYPE + \"=?\",new String[] { \"7\", String.valueOf(Email. TYPE_WORK) }).withValue(Email.DATA,\"james@android.com\"). build());\ntry {\ngetContentResolver().applyBatch( ContactsContract.AUTHORITY, ops);\n} catch (Exception e) {\ne.printStackTrace();\nSystem.out.println(\"ERROR: BATCH TRANSACTION FAILED\");\n}\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \npackage=\"jwei.apps.dataforandroid\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\">\n<application android:icon=\"@drawable/icon\" android:label= \"@string/app_name\">\n<activity android:name=\".ch5.ContactsQueryActivity\" android:label=\"@string/app_name\">\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n</application>\n<uses-sdk android:minSdkVersion=\"5\" />\n<uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\n<uses-permission android:name=\"android.permission.WRITE_CONTACTS\"/> \n</manifest>\n\n```"]