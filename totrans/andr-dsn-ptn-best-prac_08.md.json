["```kt\n    public interface Component { \n\n        void add(Component component); \n        String getName(); \n        void inflate(); \n    } \n\n    ```", "```kt\n    public class Leaf implements Component { \n        private static final String DEBUG_TAG = \"tag\"; \n        private String name; \n\n        public Leaf(String name) { \n            this.name = name; \n        } \n\n        @Override \n        public void add(Component component) { } \n\n        @Override \n        public String getName() { \n            return name; \n        } \n\n        @Override \n        public void inflate() { \n            Log.d(DEBUG_TAG, getName()); \n        } \n    } \n\n    ```", "```kt\n    public class Composite implements Component { \n        private static final String DEBUG_TAG = \"tag\"; \n\n        // Store components \n        List<Component> components = new ArrayList<>(); \n        private String name; \n\n        public Composite(String name) { \n            this.name = name; \n        } \n\n        @Override \n        public void add(Component component) { \n            components.add(component); \n        } \n\n        @Override \n        public String getName() { \n            return name; \n        } \n\n        @Override \n        public void inflate() { \n            Log.d(DEBUG_TAG, getName()); \n\n            // Inflate composites including children \n            for (Component component : components) { \n                component.inflate(); \n            } \n        } \n    } \n\n    ```", "```kt\nComponent newLeaf = new Leaf(\"New leaf\"); \n\n```", "```kt\nComponent composite1 = new Composite(\"New composite\"); \ncomposite1.add(newLeaf); \ncomposite1.add(oldLeaf); \n\n```", "```kt\nComponent composite2 = Composite(\"Another composite\"); \ncomposite2.add(someLeaf); \ncomposite2.add(composite1); \ncomposite2.add(anotherComponent); \n\n```", "```kt\npublic class Builder { \n\n    // Define individual components \n    Component image = new Leaf(\"  image view\"); \n    Component text = new Leaf(\"  text view\"); \n    Component list = new Leaf(\"  list view\"); \n\n    // Define composites \n    Component layout1(){ \n        Component c = new Composite(\"layout 1\"); \n        c.add(image); \n        c.add(text); \n        return c; \n    } \n\n    // Define nested composites \n    Component layout2() { \n        Component c = new Composite(\"layout 2\"); \n        c.add(list); \n        c.add(layout1()); \n        return c; \n    } \n\n    Component layout3(){ \n        Component c = new Composite(\"layout 3\"); \n        c.add(layout1()); \n        c.add(layout2()); \n        return c; \n    } \n} \n\n```", "```kt\n@Override \nprotected void onCreate(Bundle savedInstanceState) { \n\n    super.onCreate(savedInstanceState); \n    setContentView(R.layout.activity_main); \n\n```", "```kt\n    Builder builder = new Builder(); \n\n    // Inflate a single component \n    builder.list.inflate(); \n\n    // Inflate a composite component \n    builder.layout1().inflate(); \n\n    // Inflate nested components \n    builder.layout2().inflate(); \n    builder.layout3().inflate(); \n} \n\n```", "```kt\n    public interface Component { \n\n        void add(Component component); \n        void setContent(int id); \n        void inflate(ViewGroup layout); \n    } \n\n    ```", "```kt\n    public class TextLeaf implements Component { \n        public TextView textView; \n\n        public TextLeaf(TextView textView, int id) { \n            this.textView = textView; \n            setContent(id); \n        } \n\n        @Override \n        public void add(Component component) { } \n\n        @Override \n        public void setContent(int id) { \n            textView.setText(id); \n        } \n\n        @Override \n        public void inflate(ViewGroup layout) { \n            layout.addView(textView); \n        } \n    } \n\n    ```", "```kt\n    public class Builder { \n        Context context; \n        Component text; \n\n        Builder(Context context) { \n            this.context = context; \n            init(); \n            text = new TextLeaf(new TextView(context), \n                    R.string.headline); \n        } \n    } \n\n    ```", "```kt\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n\n        super.onCreate(savedInstanceState); \n\n        // Replace default layout \n        LinearLayout layout = new LinearLayout(this); \n\n        layout.setOrientation(LinearLayout.VERTICAL); \n        layout.setLayoutParams(new ViewGroup.LayoutParams( \n                ViewGroup.LayoutParams.MATCH_PARENT, \n                ViewGroup.LayoutParams.WRAP_CONTENT)); \n        setContentView(layout); \n\n        // Add component \n        Builder builder = new Builder(this); \n        builder.headline.inflate(layout); \n    } \n\n    ```", "```kt\npublic class ImageLeaf implements Component { \n    private ImageView imageView; \n\n    public ImageLeaf(ImageView imageView, int id) { \n        this.imageView = imageView; \n        setContent(id); \n    } \n\n    @Override \n    public void add(Component component) { } \n\n    @Override \n    public void setContent(int id) {         \n        imageView.setImageResource(id); \n    } \n\n    @Override \n    public void inflate(ViewGroup layout) { \n        layout.addView(imageView); \n    } \n} \n\n```", "```kt\nBuilder(Context context) { \n    this.context = context; \n    initLeaves(); \n} \n\nprivate void initLeaves() { \n\n    header = new ImageLeaf(new ImageView(context), \n            R.drawable.header); \n\n    headline = new TextLeaf(new TextView(context), \n            R.string.headline); \n} \n\n```", "```kt\nbuilder.header.inflate(layout); \n\n```", "```kt\n    public class CompositeImage implements Component { \n        List<Component> components = new ArrayList<>(); \n\n        ... \n\n        @Override \n        public void add(Component component) { \n            components.add(component); \n        } \n\n        ... \n\n        @Override \n        public void inflate(ViewGroup layout) { \n            layout.addView(imageView); \n\n            for (Component component : components) { \n                component.inflate(layout); \n            } \n        } \n    } \n\n    ```", "```kt\n    Component headerGroup() { \n        Component c = new CompositeImage(new ImageView(context), \n                R.drawable.header); \n        c.add(headline); \n        return c; \n    } \n\n    ```", "```kt\n    builder.headerGroup().inflate(layout); \n\n    ```", "```kt\nclass CompositeShell implements Component { \n    List<Component> components = new ArrayList<>(); \n\n    @Override \n    public void add(Component component) { \n        components.add(component); \n    } \n\n    @Override \n    public void setContent(int id) { } \n\n    @Override \n    public void inflate(ViewGroup layout) { \n\n        for (Component component : components) { \n            component.inflate(layout); \n        } \n    } \n} \n\n```", "```kt\npublic TextLeaf setText(int t) { \n    TextLeaf leaf = new TextLeaf(new TextView(context), t); \n    return leaf; \n} \n\npublic ImageLeaf setImage(int t) { \n    ImageLeaf leaf = new ImageLeaf(new ImageView(context), t); \n    return leaf; \n} \n\n```", "```kt\nComponent sandwichArray() { \n    Component c = new CompositeShell(); \n\n    c.add(setImage(R.drawable.sandwich1)); \n    c.add(setImage(R.drawable.sandwich2)); \n    c.add(setImage(R.drawable.sandwich3)); \n    return c; \n\n```", "```kt\nclass CompositeLayer implements Component { \n    List<Component> components = new ArrayList<>(); \n    private LinearLayout linearLayout; \n\n    CompositeLayer(LinearLayout linearLayout, int id) { \n        this.linearLayout = linearLayout; \n        setContent(id); \n    } \n\n    @Override \n    public void add(Component component) { \n        components.add(component); \n    } \n\n    @Override \n    public void setContent(int id) { \n        linearLayout.setBackgroundResource(id); \n        linearLayout.setOrientation(LinearLayout.HORIZONTAL); \n    } \n\n    @Override \n    public void inflate(ViewGroup layout) { \n        layout.addView(linearLayout); \n\n        for (Component component : components) { \n            component.inflate(linearLayout); \n        } \n    } \n} \n\n```", "```kt\nComponent sandwichLayout() { \n    Component c = new CompositeLayer(new LinearLayout(context), \n            R.color.colorAccent); \n    c.add(sandwichArray()); \n    return c; \n} \n\n```", "```kt\nBuilder builder = new Builder(this); \nbuilder.headerGroup().inflate(layout); \nbuilder.sandwichLayout().inflate(layout); \n\n```", "```kt\n    @Override \n    public void setContent(int id) { \n\n        textView.setText(id); \n\n        textView.setPadding(dp(24), dp(0), dp(0), dp(16)); \n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24); \n        textView.setLayoutParams(new ViewGroup.LayoutParams( \n                ViewGroup.LayoutParams.MATCH_PARENT, \n                ViewGroup.LayoutParams.WRAP_CONTENT)); \n    } \n\n    ```", "```kt\n    private int dp(int px) { \n        float scale = textView.getResources() \n                .getDisplayMetrics() \n                .density; \n        return (int) (px * scale + 0.5f); \n    } \n\n    ```", "```kt\n    @Override \n    public void setContent(int id) { \n        imageView.setScaleType(ImageView.ScaleType.FIT_CENTER); \n\n        imageView.setLayoutParams(new ViewGroup.LayoutParams( \n                ViewGroup.LayoutParams.WRAP_CONTENT, \n                dp(R.dimen.imageHeight))); \n\n        imageView.setImageResource(id); \n    } \n\n    ```", "```kt\n    Component story(){ \n        Component c = new CompositeText(new TextView(context) \n                ,R.string.story); \n        c.add(setImage(R.drawable.footer)); \n        return c; \n    } \n\n    ```", "```kt\n    Builder builder = new Builder(this); \n\n    builder.headerGroup().inflate(layout); \n    builder.sandwichLayout().inflate(layout); \n    builder.story().inflate(layout); \n\n    ```", "```kt\n    public static String readFile(Context context, int resId) { \n\n        InputStream stream = context.getResources() \n                .openRawResource(R.raw.wiki); \n        InputStreamReader inputReader = new InputStreamReader(stream); \n        BufferedReader bufferedReader = new BufferedReader(inputReader); \n        String line; \n        StringBuilder builder = new StringBuilder(); \n\n        try { \n            while ((line = bufferedReader.readLine()) != null) { \n                builder.append(line) \n                        .append('\\n'); \n            } \n        } catch (IOException e) { \n\n            return null; \n        } \n\n        return builder.toString(); \n    } \n\n    ```", "```kt\n    TextView textView = (TextView) findViewById(R.id.text_view); \n    String data = readFile(this, R.raw.wiki); \n    textView.setText(data); \n\n    ```", "```kt\n    public void saveFile(View view) { \n\n        try { \n            OutputStreamWriter writer = new OutputStreamWriter(openFileOutput(fspc, 0)); \n            writer.write(editText.getText().toString()); \n            writer.close(); \n\n        } catch (IOException e) { \n            e.printStackTrace(); \n        } \n    } \n\n    ```", "```kt\n    public void loadFile(View view) { \n\n        try { \n            InputStream stream = openFileInput(fspc); \n\n            if (stream != null) { \n                InputStreamReader inputReader = new InputStreamReader(stream); \n                BufferedReader bufferedReader = new BufferedReader(inputReader); \n                String line; \n                StringBuilder builder = new StringBuilder(); \n\n                while ((line = bufferedReader.readLine()) != null) { \n                    builder.append(line) \n                            .append(\"\\n\"); \n                } \n\n                stream.close(); \n                editText.setText(builder.toString()); \n            } \n\n        } catch (IOException e) { \n            e.printStackTrace(); \n        } \n    } \n\n    ```", "```kt\n@Override \npublic void onResume() { \n    super.onResume(); \n    Log.d(DEBUG_TAG, \"Resuming...\"); \n} \n\n```", "```kt\n    // Singleton class as only one user \n    public class User { \n        private static String building; \n        private static String floor; \n        private static String desk; \n        private static String phone; \n        private static String email; \n        private static User user = new User(); \n\n        public static User getInstance() { \n            return user; \n        } \n\n        public String getBuilding() { \n            return building; \n        } \n\n        public void setBuilding(String building) { \n            User.building = building; \n        } \n\n        public String getFloor() { \n            return floor; \n        } \n\n        public void setFloor(String floor) { \n            User.floor = floor; \n        } \n\n        public String getDesk() { \n            return desk; \n        } \n\n        public void setDesk(String desk) { \n            User.desk = desk; \n        } \n\n        public String getPhone() { \n            return phone; \n        } \n\n        public void setPhone(String phone) { \n            User.phone = phone; \n        } \n\n        public String getEmail() { \n            return email; \n        } \n\n        public void setEmail(String email) { \n            User.email = email; \n        } \n    } \n\n    ```", "```kt\n    public class MainActivity \n        extends AppCompatActivity \n        implements View.OnClickListener \n\n    ```", "```kt\n    private User user = User.getInstance(); \n\n    private EditText editBuilding; \n    private EditText editFloor; \n    private EditText editDesk; \n    private EditText editPhone; \n    private EditText editEmail; \n\n    private TextView textPreview; \n\n    ```", "```kt\n    Button actionLoad = (Button) findViewById(R.id.action_load); \n    Button actionSave = (Button) findViewById(R.id.action_save); \n    Button actionPreview = (Button) findViewById(R.id.action_preview); \n\n    actionLoad.setOnClickListener(this); \n    actionSave.setOnClickListener(this); \n    actionPreview.setOnClickListener(this); \n\n    ```", "```kt\n    public void loadPrefs() { \n        SharedPreferences prefs = getApplicationContext() \n            .getSharedPreferences(\"prefs\", MODE_PRIVATE); \n\n        // Retrieve settings \n        // Use second parameter if never saved \n        user.setBuilding(prefs.getString(\"building\", \"unknown\")); \n        user.setFloor(prefs.getString(\"floor\", \"unknown\")); \n        user.setDesk(prefs.getString(\"desk\", \"unknown\")); \n        user.setPhone(prefs.getString(\"phone\", \"unknown\")); \n        user.setEmail(prefs.getString(\"email\", \"unknown\")); \n    } \n\n    ```", "```kt\n    public void savePrefs() { \n        SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"prefs\", MODE_PRIVATE); \n        SharedPreferences.Editor editor = prefs.edit(); \n\n        // Store preferences \n        editor.putString(\"building\", user.getBuilding()); \n        editor.putString(\"floor\", user.getFloor()); \n        editor.putString(\"desk\", user.getDesk()); \n        editor.putString(\"phone\", user.getPhone()); \n        editor.putString(\"email\", user.getEmail()); \n\n        // Use apply() not commit() \n        // to perform operation in background \n        editor.apply(); \n    } \n\n    ```", "```kt\n    @Override \n    public void onPause() { \n        super.onPause(); \n        savePrefs(); \n    } \n\n    ```", "```kt\n    @Override \n    public void onClick(View view) { \n\n        switch (view.getId()) { \n\n            case R.id.action_load: \n                loadPrefs(); \n                break; \n\n            case R.id.action_save: \n                // Recover data from form \n                user.setBuilding(editBuilding.getText().toString()); \n                user.setFloor(editFloor.getText().toString()); \n                user.setDesk(editDesk.getText().toString()); \n                user.setPhone(editPhone.getText().toString()); \n                user.setEmail(editEmail.getText().toString()); \n                savePrefs(); \n                break; \n\n            default: \n                // Display as string \n                textPreview.setText(new StringBuilder() \n                        .append(user.getBuilding()).append(\", \") \n                        .append(user.getFloor()).append(\", \") \n                        .append(user.getDesk()).append(\", \") \n                        .append(user.getPhone()).append(\", \") \n                        .append(user.getEmail()).toString()); \n                break; \n        } \n    } \n\n    ```", "```kt\n<?xml version='1.0' encoding='utf-8' standalone='yes' ?> \n<map> \n    <string name=\"phone\">+44 0102 555 6789</string> \n    <string name=\"email\">kyle@blt.com</string>     <string name=\"floor\">5</string> \n    <string name=\"desk\">13</string>     <string name=\"user_id\"> \n        fbc08fca-f375-4786-9e2d-d610c9cd0377</string> \n    <boolean name=\"new_user\" value=\"false\" />     <string name=\"building\">Bagel Building</string> </map> \n\n```", "```kt\n    private static boolean newUser; \n    private static String userId; \n\n    ... \n\n    public boolean getNewUser() { \n        return newUser; \n    } \n\n    public void setNewUser(boolean newUser) { \n        User.newUser = newUser; \n    } \n\n    public String getUserId() { \n        return userId; \n    } \n\n    public void setUserId(String userId) { \n        User.userId = userId; \n    } \n\n    ```", "```kt\n    if (prefs.getBoolean(\"new_user\", true)) { \n        // Display welcome dialog \n        // Add free credit for new users \n        String uuid = UUID.randomUUID().toString(); \n        prefs.edit().putString(\"user_id\", uuid); \n        prefs.edit().putBoolean(\"new_user\", false).apply(); \n    } \n\n    ```"]