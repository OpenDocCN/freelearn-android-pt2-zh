["```kt\n    #define SENSOR A0\n    #define HEARTBEAT_POLL_PERIOD50\n    #define SECONDS 10\n    constint TIMESLOTS = SECONDS * 1000 / HEARTBEAT_POLL_PERIOD;\n    int sensorReading = 0;\n    ```", "```kt\n    void setup() {\n     Serial.begin(115200);\n    }\n    ```", "```kt\n    void printRawData() {\n     sensorReading = analogRead(SENSOR);\n     Serial.println(sensorReading);\n    }\n    ```", "```kt\n    void loop() {\n     for (int j = 0; j < TIMESLOTS; j++) {\n     printRawData();\n     delay(HEARTBEAT_POLL_PERIOD);\n     }\n     Serial.println(\"Done!\");\n     delay(1000);\n    }\n    ```", "```kt\n    #define SECONDS 10\n    #define SAMPLES 10\n\n    constint TIMESLOTS = SECONDS * 1000 / HEARTBEAT_POLL_PERIOD;\n\n    int sensorReading = 0;\n    int lastReading = 0;\n    int readings[SAMPLES];\n    int i = 0;\n    int delta = 0;\n    int totalReading = 0;\n\n    ```", "```kt\n    void setup() {\n     Serial.begin(115200);\n\n     for (int j = 0; j < SAMPLES; j++) {\n     readings[j] = 0;\n     }\n    }\n    ```", "```kt\n    void collectReads() {\n     sensorReading = analogRead(SENSOR);\n      delta = sensorReading - lastReading;\n     lastReading = sensorReading;\n     totalReading = totalReading - readings[i] + delta;\n      readings[i] = delta;\n     i = (i + 1) % SAMPLES;\n    }\n    ```", "```kt\n    for (int j = 0; j < TIMESLOTS; j++) {\n     collectReads();\n     Serial.println(totalReading);\n      delay(HEARTBEAT_POLL_PERIOD);\n    }\n    ```", "```kt\n    #define SECONDS 10\n    #define POS_THRESHOLD 3\n    #define NEG_THRESHOLD -3\n\n    const int TIMESLOTS = SECONDS * 1000 / HEARTBEAT_POLL_PERIOD;\n    const int PERMINUTE = 60 / SECONDS;\n    int beats = 0;\n    boolean hillClimb = false;\n\n    ```", "```kt\n    void findBeat() {\n      if (totalReading<NEG_THRESHOLD) {\n       hillClimb = true;\n      }\n      if ((totalReading>POS_THRESHOLD)&&hillClimb) {\n       hillClimb = false;\n        beats += 1;\n      }\n    }\n    ```", "```kt\n    int calcHeartRate() {\n      return beats * PERMINUTE;\n    }\n    ```", "```kt\n    for (int j = 0; j < TIMESLOTS; j++) {\n     collectReads();\n     findBeat();\n      delay(HEARTBEAT_POLL_PERIOD);\n    }\n    Serial.print(calcHeartRate());\n    Serial.print(\" with: \");\n    Serial.println(beats);\n    beats = 0;\n    delay(1000);\n    ```", "```kt\n    72 with: 12\n    84 with: 14\n    66 with: 11\n    78 with: 13\n    90 with: 15\n    84 with: 14\n    ```", "```kt\n#include <adk.h>\n#define BUFFSIZE 128\nchar accessoryName[] = \"Heartbeat monitor\";\nchar manufacturer[] = \"Example, Inc.\";\nchar model[] = \"HeartBeat\";\nchar versionNumber[] = \"0.1.0\";\nchar serialNumber[] = \"1\";\nchar url[] = \"http://www.example.com\";\nuint8_t buffer[BUFFSIZE];\nuint32_tbytesRead = 0;\nUSBHostUsb;\nADKadk(&Usb, manufacturer, model, accessoryName, versionNumber, url, serialNumber);\n```", "```kt\nvoid loop() {\nUsb.Task();\n  if (adk.isReady()) {\n    // Collect data\n    for (int j = 0; j < TIMESLOTS; j++) {\n      collectReads();\n      findBeat();\n      delay(HEARTBEAT_POLL_PERIOD);\n    }\n  buffer[0] = calcHeartRate();\n adk.write(1, buffer);\n  beats = 0;\n }\n}\n```", "```kt\n    <color name=\"sulu\">#CBE86B</color>\n    <color name=\"bright_red\">#A30006</color>\n\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat\">\n    <!-- Customize your theme here. -->\n    </style>\n    ```", "```kt\n    <LinearLayout\n\n     android:orientation=\"vertical\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n     android:paddingRight=\"@dimen/activity_horizontal_margin\"\n     android:paddingTop=\"@dimen/activity_vertical_margin\"\n     android:paddingBottom=\"@dimen/activity_vertical_margin\"\n     tools:context=\".Monitor\">\n    </LinearLayout>\n\n    ```", "```kt\n    <TextView\n     android:text=\"Android heart rate monitor\"\n     android:gravity=\"center\"\n     android:textColor=\"@color/sulu\"\n     android:textSize=\"30sp\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"wrap_content\" />\n    ```", "```kt\n    <LinearLayout\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"wrap_content\"\n     android:layout_marginTop=\"30sp\"\n     android:gravity=\"center\">\n    </LinearLayout>\n    ```", "```kt\n    <TextView\n     android:text=\"Current heartbeat: \"\n     android:textColor=\"@color/sulu\"\n     android:textSize=\"20sp\"\n     android:layout_width=\"wrap_content\"\n     android:layout_height=\"wrap_content\"/>\n\n    <TextView\n     android:id=\"@+id/bpm\"\n     android:text=\"0 bpm\"\n     android:textColor=\"@color/bright_red\"\n     android:textSize=\"20sp\"\n     android:layout_width=\"wrap_content\"\n     android:layout_height=\"wrap_content\"/>\n    ```", "```kt\n    private TextViewmBpm;\n    ```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n     super.onCreate(savedInstanceState);\n     setContentView(R.layout.activity_monitor);\n     mBpm = (TextView) findViewById(R.id.bpm);\n    }\n    ```", "```kt\ndependencies {\n  compile fileTree(dir: 'libs', include: ['*.jar'])\n compile 'com.android.support:appcompat-v7:21.0.3'\n compile 'me.palazzetti:adktoolkit:0.3.0'\n}\n```", "```kt\n    <resources>\n     <usb-accessory\n        version=\"0.1.0\"\n        model=\"HeartBeat\"\n        manufacturer=\"Example, Inc.\"/>\n    </resources>\n    ```", "```kt\n    private TextViewmBpm;\n    private AdkManagermAdkManager;\n\n    ```", "```kt\n    mBpm = (TextView) findViewById(R.id.bpm);\n    mAdkManager = new AdkManager(this);\n\n    ```", "```kt\n    @Override\n    protected void onResume() {\n     super.onResume();\n     mAdkManager.open();\n    }\n\n    @Override\n     protected void onPause() {\n     super.onPause();\n     mAdkManager.close();\n    }\n    ```", "```kt\n    public interface OnDataChanges {\n      void updateBpm(byte heartRate);\n    }\n    ```", "```kt\n    public class Monitor extends ActionBarActivity implements OnDataChanges {\n      private TextViewmBpm;\n      // ...\n    ```", "```kt\n    @Override\n    public void updateBpm(byte heartRate) {\n     mBpm.setText(String.format(\"%d bpm\", heartRate));\n    }\n    ```", "```kt\n    private final static int HEARTBEAT_POLLING = 10000;\n    private final static int HEARTBEAT_READ = 0;\n    private AdkManager mAdkManager;\n    private OnDataChanges mCaller;\n    private ScheduledExecutorService mScheduler;\n    private Handler mMainLoop;\n    ```", "```kt\n    public DataReader(AdkManageradkManager, OnDataChangescaller) {\n     this.mAdkManager = adkManager;\n     this.mCaller = caller;\n     mMainLoop = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(Message message) {\n          switch (message.what) {\n            case HEARTBEAT_READ:\n         mCaller.updateBpm((byte) message.obj);\n              break;\n          }\n        }\n      };\n    }\n    ```", "```kt\n    private class SensorThread implements Runnable {\n      @Override\n      public void run() {\n        // Read from ADK\n       AdkMessage response = mAdkManager.read();\n        // ADK response back to UI thread for update\n        Message message = mMainLoop.obtainMessage(HEARTBEAT_READ, response.getByte());\n       message.sendToTarget();\n      }\n    }\n    ```", "```kt\n    public void start() {\n      // Initialize threads\n     SensorThread thread = new SensorThread();\n      // Should start over and over publishing results\n\n     Executors.newSingleThreadScheduledExecutor();\n     mScheduler.scheduleAtFixedRate(thread, 0, HEARTBEAT_POLLING, TimeUnit.MILLISECONDS);\n    }\n    ```", "```kt\n    public void stop() {\n      // Should stop the calling function\n    mScheduler.shutdown();\n    }\n    ```", "```kt\n    private AdkManager mAdkManager;\n    private DataReader mReader;\n\n    ```", "```kt\n    @Override\n    protected void onResume() {\n     super.onResume();\n     mAdkManager.open();\n     mReader = new DataReader(mAdkManager, this);\n     mReader.start();\n    }\n    @Override\n    protected void onPause() {\n     super.onPause();\n     mReader.stop();\n     mAdkManager.close();\n    }\n    ```", "```kt\n#define SAMPLES 10\n#define POS_THRESHOLD 3\n#define NEG_THRESHOLD -3\n#define HEARTBEAT_POLL_PERIOD 50\n#define SECONDS 10\n```"]