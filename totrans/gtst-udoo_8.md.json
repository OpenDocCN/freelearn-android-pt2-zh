["```kt\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```", "```kt\n    private HttpURLConnection mConnector;\n    ```", "```kt\n    public UrlConnector(String encodedUrl) throws IOException {\n      URL url = new URL(encodedUrl);\n      mConnector = (HttpURLConnection) url.openConnection();\n      mConnector.setReadTimeout(10000);\n      mConnector.setConnectTimeout(15000);\n    }\n    ```", "```kt\n    public void addHeader(String header, String content) {\n      mConnector.setRequestProperty(header, content);\n    }\n    ```", "```kt\n    public int get() throws IOException {\n      mConnector.setRequestMethod(\"GET\");\n      return mConnector.getResponseCode();\n    }\n    ```", "```kt\n    public String getResponse() throws IOException {\n      BufferedReader readerBuffer = new BufferedReader(new InputStreamReader(mConnector.getInputStream()));\n      StringBuilder response = new StringBuilder();\n      String line;\n      while ((line = readerBuffer.readLine()) != null) {\n        response.append(line);\n      }\n      return response.toString();\n    }\n    ```", "```kt\n    public void disconnect() {\n      mConnector.disconnect();\n    }\n    ```", "```kt\n    private String mStatus;\n    private double mTemperature;\n    private int mHumidity;\n    ```", "```kt\n    public Weather(JSONObject apiResults) throws JSONException, NullPointerException {\n      mStatus = apiResults.getJSONArray(\"weather\").getJSONObject(0).getString(\"description\");\n      mTemperature = convertTempKtoC(apiResults.getJSONObject(\"main\").getDouble(\"temp\"));\n      mHumidity = apiResults.getJSONObject(\"main\").getInt(\"humidity\");\n    }\n    ```", "```kt\n    private double convertTempKtoC(double temperature) {\n      return temperature - 273.15;\n    }\n    ```", "```kt\n    public String getStatus() {\n      return mStatus;\n    }\n\n    public double getTemperature() {\n      return mTemperature;\n    }\n\n    public int getHumidity() {\n      return mHumidity;\n    }\n    ```", "```kt\n    private static final String BASE_URL = \"http://api.openweathermap.org/data/2.5/weather\";\n    private static final String API_PARAM = \"?q=%s&lang=%s\";\n    ```", "```kt\n    private static String getUrl(String location) {\n      String params = String.format(API_PARAM, location, Locale.US);\n      return BASE_URL + params;\n    }\n    ```", "```kt\n    public static Weather getForecast(String location) {\n      JSONObject results = null;\n      Weather weather = null;\n      UrlConnector api;\n      try {\n        api = new UrlConnector(getUrl(location));\n        api.addHeader(\"Content-Type\", \"application/json\");\n        // Do GET and grab tweets into a JSONArray\n        int statusCode = api.get();\n        if (statusCode == HttpURLConnection.HTTP_OK) {\n          results = new JSONObject(api.getResponse());\n          weather = new Weather(results);\n        }\n        else {\n          // manage 30x, 40x, and 50x status codes\n        }\n        api.disconnect();\n      }\n      catch (IOException e) {\n        // manage network errors\n      }\n      catch (JSONException e) {\n        // manage response parsing errors\n      }\n      return weather;\n    }\n    ```", "```kt\n    <LinearLayout\n      android:orientation=\"horizontal\"\n      android:gravity=\"center\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"0dp\"\n      android:layout_weight=\"1\">\n    ```", "```kt\n    <LinearLayout\n      android:orientation=\"horizontal\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"0dp\"\n      android:layout_weight=\"0.2\">\n    </LinearLayout>\n    ```", "```kt\n    <TextView\n      android:id=\"@+id/weather_antifreeze\"\n      android:clickable=\"true\"\n      android:onClick=\"changeAntifreeze\"\n      android:text=\"ANTIFREEZE: OFF\"\n      android:textColor=\"@color/mine_shaft\"\n      android:textSize=\"@dimen/text_title\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"match_parent\"/>\n\n    <TextView\n      android:id=\"@+id/weather_status\"\n      android:clickable=\"true\"\n      android:onClick=\"changeLocation\"\n      android:text=\"NO LOCATION SET\"\n      android:textSize=\"@dimen/text_title\"\n      android:gravity=\"end\"\n      android:layout_height=\"match_parent\"\n      android:layout_width=\"0dp\"\n      android:layout_weight=\"1\"/>\n    ```", "```kt\n    private TextView mCurrentPreset;\n    private TextView mTemperature;\n    private TextView mStatus;\n    private TextView mWeatherStatus;\n    private TextView mAntifreeze;\n\n    ```", "```kt\n    setContentView(R.layout.activity_overview);\n    mCurrentPreset = (TextView) findViewById(R.id.current_preset);\n    mTemperature = (TextView) findViewById(R.id.temperature);\n    mStatus = (TextView) findViewById(R.id.boiler_status);\n    mWeatherStatus = (TextView) findViewById(R.id.weather_status);\n    mAntifreeze = (TextView) findViewById(R.id.weather_antifreeze);\n\n    ```", "```kt\n    public interface OnDataChangeListener {\n      void onTemperatureChanged(float temperature);\n      void onBoilerChanged(boolean status);\n      void onWeatherChanged(Weather weather);\n    }\n    ```", "```kt\n    @Override\n    public void onWeatherChanged(Weather weather) {\n      if (weather != null && weather.getStatus() != null) {\n        String status = \"%s: %s, %.1fÂ° (%d%%)\";\n        status = String.format(status,\n          Preset.getLocation(this).toUpperCase(),\n          weather.getStatus().toUpperCase(),\n          weather.getTemperature(),\n          weather.getHumidity()\n        );\n        mWeatherStatus.setText(status);\n      }\n    else {\n        mWeatherStatus.setText(\"NO LOCATION SET\");\n      }\n    }\n    ```", "```kt\n    private static final String CURRENT_PRESET = \"__CURRENT__\";\n    private static final String CURRENT_LOCATION = \"__LOCATION__\";\n\n    ```", "```kt\n    public static void setLocation(Context ctx, String name) {\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor = sharedPref.edit();\n      editor.putString(CURRENT_LOCATION, name);\n      editor.apply();\n    }\n    ```", "```kt\n    public static String getLocation(Context ctx) {\n      String location;\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      location = sharedPref.getString(CURRENT_LOCATION, null);\n      return location;\n    }\n    ```", "```kt\n    public static final int VOICE_PRESET = 1000;\n    public static final int VOICE_LOCATION = 1002;\n\n    ```", "```kt\n    public void changeLocation(View v) {\n      startRecognition(\"Provide your location\", VOICE_LOCATION);\n    }\n    ```", "```kt\n    private void setLocation(String location) {\n      Preset.setLocation(this, location);\n      mWeatherStatus.setText(location.toUpperCase() + \": WAITING DATA\");\n      mVoice.speak(\"Loading forecast data for \" + location);\n    }\n    ```", "```kt\n    if (requestCode == VOICE_PRESET) {\n      setPreset(bestMatch);\n    }\n    else if (requestCode == VOICE_LOCATION) {\n      setLocation(bestMatch);\n    }\n\n    ```", "```kt\n    private final static int TEMPERATURE_POLLING = 1000;\n    private final static int WEATHER_POLLING = 5000;\n    private final static int TEMPERATURE_UPDATED = 0;\n    private final static int BOILER_UPDATED = 1;\n    private final static int WEATHER_UPDATED = 2;\n    private AdkManager mAdkManager;\n    private Context mContext;\n    private OnDataChangeListener mCaller;\n    private ScheduledExecutorService mSchedulerSensor;\n    private ScheduledExecutorService mSchedulerWeather;\n    private Handler mMainLoop;\n    private boolean mBoilerStatus = false;\n    private Weather mWeather = null;\n\n    ```", "```kt\n    private class WeatherThread implements Runnable {\n      @Override\n      public void run() {\n        String location = Preset.getLocation(mContext);\n        if (location != null) {\n          mWeather = WeatherApi.getForecast(location);\n          Message message = mMainLoop.obtainMessage(WEATHER_UPDATED, mWeather);\n          message.sendToTarget();\n        }\n      }\n    }\n    ```", "```kt\n    public void start() {\n      // Start thread that listens to ADK\n      SensorThread sensor = new SensorThread();\n      mSchedulerSensor = Executors.newSingleThreadScheduledExecutor();\n      mSchedulerSensor.scheduleAtFixedRate(sensor, 0, TEMPERATURE_POLLING, TimeUnit.MILLISECONDS);\n      // Start thread that updates weather forecast\n      WeatherThread weather = new WeatherThread();\n      mSchedulerWeather = Executors.  newSingleThreadScheduledExecutor();\n      mSchedulerWeather.scheduleAtFixedRate(weather, 0,   WEATHER_POLLING, TimeUnit.MILLISECONDS);\n    }\n    ```", "```kt\n    public void stop() {\n      mSchedulerSensor.shutdown();\n      mSchedulerWeather.shutdown();\n    }\n    ```", "```kt\n    case BOILER_UPDATED:\n      mCaller.onBoilerChanged((boolean) message.obj);\n      break;\n    case WEATHER_UPDATED:\n      mCaller.onWeatherChanged((Weather) message.obj);\n      break;\n\n    ```", "```kt\n    private static final String CURRENT_LOCATION = \"__LOCATION__\";\n    private static final String CURRENT_ANTIFREEZE = \"__ANTIFREEZE__\";\n    private static final float ANTIFREEZE_DISABLED = -Float.MAX_VALUE\n\n    ```", "```kt\n    public static void setAntifreeze(Context ctx, float temperature) {\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor = sharedPref.edit();\n      editor.putFloat(CURRENT_ANTIFREEZE, temperature);\n      editor.apply();\n    }\n    ```", "```kt\n    public static float getAntifreeze(Context ctx) {\n      float temperature;\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      temperature = sharedPref.getFloat(CURRENT_ANTIFREEZE, ANTIFREEZE_DISABLED);\n      return temperature;\n    }\n    ```", "```kt\n    public static void disableAntifreeze(Context ctx) {\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor = sharedPref.edit();\n      editor.remove(CURRENT_ANTIFREEZE);\n      editor.apply();\n    }\n    ```", "```kt\n    public static boolean antifreezeIsEnabled(Context ctx) {\n      return getAntifreeze(ctx) != ANTIFREEZE_DISABLED;\n    }\n    ```", "```kt\n    private TextView mWeatherStatus;\n    private TextView mAntifreeze;\n    private boolean mFreeze = false;\n\n    ```", "```kt\n    public void updateAntifreeze() {\n      float freezeTemperature = Preset.getAntifreeze(this);\n      mFreeze = Preset.antifreezeIsEnabled(this);\n      if (mFreeze) {\n        String status = \"ANTIFREEZE: %.1f Â°C\";\n        status = String.format(status, freezeTemperature);\n        mAntifreeze.setText(status);\n        mAntifreeze.setTextColor(getResources().getColor(R.color.pistachio));\n      }\n      else {\n        mAntifreeze.setText(\"ANTIFREEZE: OFF\");\n        mAntifreeze.setTextColor(getResources().getColor(R.color.mine_shaft));\n      }\n    }\n    ```", "```kt\n      // ...\n      mCurrentPreset.setText(activatedPreset.toUpperCase());\n      updateAntifreeze();\n    }\n    ```", "```kt\n    public static final int VOICE_LOCATION = 1002;\n    public static final int VOICE_ANTIFREEZE = 1003;\n\n    ```", "```kt\n    public void changeAntifreeze(View v) {\n      if (mFreeze) {\n        Preset.disableFreezeAlarm(this);\n        updateAntifreeze();\n        mVoice.speak(\"Antifreeze disabled\");\n      }\n      else {\n        startRecognition(\"Provide antifreeze degrees\", VOICE_ANTIFREEZE);\n      }\n    }\n    ```", "```kt\n    private void enableAntifreeze(float temperature) {\n      Preset.setAntifreeze(this, temperature);\n      updateAntifreeze();\n      mVoice.speak(\"Antifreeze set to \" + temperature + \" degrees\");\n    }\n    ```", "```kt\n    if (requestCode == VOICE_PRESET) {\n      setPreset(bestMatch);\n    }\n    else if (requestCode == VOICE_LOCATION) {\n      setLocation(bestMatch);\n    }\n    else if (requestCode == VOICE_ANTIFREEZE) {\n      try {\n        float temperature = Float.parseFloat(bestMatch);\n        enableAntifreeze(temperature);\n      }\n      catch (NumberFormatException e) {\n        mVoice.speak(\"Unrecognized number, \" + bestMatch);\n      }\n    }\n\n    ```", "```kt\nprivate boolean isBelowSetpoint(float temperature) {\n  int currentHour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);\n  String currentPreset = Preset.getCurrent(mContext);\n  ArrayList<Integer> currentValues = Preset.get(mContext, currentPreset);\n  float antifreeze = Preset.getAntifreeze(mContext);\n  if (mWeather != null && mWeather.getTemperature() < antifreeze) {\n    return true;\n  }\n  if (currentValues.size() > 0) {\n    return temperature < currentValues.get(currentHour);\n  } else {\n    return false;\n  }\n}\n```"]