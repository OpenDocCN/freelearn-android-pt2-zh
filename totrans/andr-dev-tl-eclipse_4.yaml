- en: Chapter 4. Incorporating Multimedia Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will discuss how to incorporate multimedia elements inside a project
    and handle several screens in an app. The readers will be shown how to add images,
    sounds and an HTML page in the project. We will discuss the following topics with
    the help of a project called `SimpleNumb3r5`:'
  prefs: []
  type: TYPE_NORMAL
- en: Forming the layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the image resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting ImageView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting ImageButtons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImageButton and handling events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding audio and multiple screen support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting HTML in a WebView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Intent and Activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new activity in the manifest file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final product – run, deploy, and test app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this chapter, we need a new project that will cover the Android devices
    from Version 2.1 (API level 7) to the latest version. So set `android:minSdkVersion`
    to 7, and `android:targetSdkVersion` to 16.
  prefs: []
  type: TYPE_NORMAL
- en: The icon and other resources are available in a downloadable source code (refer
    to the download tip mentioned in the *Preface* of this book). Download these materials
    prior to developing this app. We do not want to make your life miserable doing
    the graphic design.
  prefs: []
  type: TYPE_NORMAL
- en: 'The selected name for the new app is `SimpleNumb3r5`, as shown in the following
    screenshot. If you are wondering why we chose Android 2.1, this is to widen the
    device coverage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating Multimedia Elements](img/1103OS-04-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create a new Android project named SimpleNumb3r5
  prefs: []
  type: TYPE_NORMAL
- en: We provide the launcher icon in the resource materials and the image named `ic_launcher-web.png`
    in the **Image File** field, as shown in the following screenshot. This is the
    dedicated logo of this app. Should you prefer a different logo to suit your app,
    you are welcome to design it personally. By using this wizard, the icon launcher
    will be prepared to suit the `xhdpi`, `hdpi`, `mdpi`, and `ldpi` formats in the
    respective drawable folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating Multimedia Elements](img/1103OS-04-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the launcher icon
  prefs: []
  type: TYPE_NORMAL
- en: The next screen, as shown in the following screenshot, is to provide a name
    of the application. This can be any string that has the right meaning suitable
    to the app. The layout name will be created automatically for you, and could be
    changed to your preference. Choose the navigation type as **None** as it has no
    concern with respect to our application development.
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating Multimedia Elements](img/1103OS-04-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choose the blank activity
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot is the mock-up of the app being developed. We have
    a major section of the screen dedicated to display the image of the numbers zero
    to nine and the spelling. The bottom row of the screen is the navigation bar where
    the user may navigate to the previous and next screen. The button with the speaker
    is for the user to listen to the number spoken to them. The button with the lower
    case, **i**, is the icon to show the information screen.
  prefs: []
  type: TYPE_NORMAL
- en: The project title (appears by default).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image number location. This row consists of the three cells merged together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bottom row consists of previous, info, play sound, and next buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Incorporating Multimedia Elements](img/1103OS-04-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The main screen mock-up
  prefs: []
  type: TYPE_NORMAL
- en: Adding a TableLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our project will consist of one TableLayout and inside it there are two TableRows.
    By default, when you add a TableLayout, the IDE will include four sets of TableRows.
    Remove two rows by using the XML code editor, the previous app mock-up can provide
    some guidelines to remove the rows not in use. Adjust the TableLayout, so that
    it utilizes all the space of the screen layout, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a TableLayout](img/1103OS-04-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inserting a TableLayout
  prefs: []
  type: TYPE_NORMAL
- en: Adding the image resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copy the images provided in the supplement files for [Chapter 4](ch04.html "Chapter 4. Incorporating
    Multimedia Elements") to the `res/drawable-hdpi` folder through the Windows file
    manager, as shown in the following screenshot. In this exercise, we just provide
    the image resources for `hdpi` drawable. It's always a good practice to prepare
    all the suitable resources for `xhdpi`, `mdpi`, and `ldpi` accordingly. Do not
    forget we have a lot of screen size variant in the Android devices. Currently
    we also do not consider resources for the tablet size devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the image resources](img/1103OS-04-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The resources for the drawable
  prefs: []
  type: TYPE_NORMAL
- en: 'Then go to your project explorer (in Eclipse), right-click on `res/drawable-hdpi`
    and click on **Refresh**. The following screenshot shows the appearance of the
    `drawable-hdpi` folder after the image resources have been copied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the image resources](img/1103OS-04-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The resources for the drawable
  prefs: []
  type: TYPE_NORMAL
- en: Adding ImageView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown on the previous screenshot, our app has an image 0 that fills the entire
    screen and to achieve that let's add an ImageView to the first row of the TableLayout.
    Use the no0 image in the drawable folder as the initial image (zero is the first
    number to be displayed). Adjust the width and height of the ImageView to populate
    the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ImageView](img/1103OS-04-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding an ImageView to the app screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Distribute weight (specifies how much of the extra space in the layout to be
    allocated to the View) evenly to center the widget. Use the button shown in the
    following screenshot to adjust the ImageView to the center of the screen. Do this
    while the ImageView is active (selected):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ImageView](img/1103OS-04-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Distribute weight evenly
  prefs: []
  type: TYPE_NORMAL
- en: Adding ImageButtons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The second row in TableLayout is for the navigation buttons (previous and next)
    and the play sound button. ImageButton is more attractive for this kind of app.
    When you create an ImageButton, you will be asked to choose the image. For the
    first button use the image **prev** from the drawables. The second is **sound**
    and the last one is **next**. These buttons need to be added one at a time, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ImageButtons](img/1103OS-04-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding ImageButtons
  prefs: []
  type: TYPE_NORMAL
- en: Activate (select) one of the buttons and distribute evenly, as shown in the
    following screenshot. This is to make sure all the buttons are spread evenly across
    the screen's width.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ImageButtons](img/1103OS_04_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Distribute weight of the ImageButtons evenly
  prefs: []
  type: TYPE_NORMAL
- en: And if you prefer, change the background of your screen. A background image
    has been prepared for you; it is in the drawables and is named **bglight**. Activate
    the main layout by clicking on the app title/logo on the app screen. Change the
    background properties by clicking on the three dots button on the right-side of
    the attributes. Later, you may add the **btninfo** button to display the app's
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning the widget's ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are basically one ImageView and three ImageButtons. To change the ImageView
    ID, select it and go to the widget properties on the right-side. Click on the
    three dots button on the **Id** attribute. Change the ID of the ImageView to **imagenumber**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assigning the widget''s ID](img/1103OS-04-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the widget's ID through the Property window
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, change all the IDs of all the buttons to **btnprevious**, **btninfo**,
    **btnsound**, and **btnnext**. Use the following table as a guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget | ID |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ImageView | imagenumber |'
  prefs: []
  type: TYPE_TB
- en: '| Left most button | btnprevious |'
  prefs: []
  type: TYPE_TB
- en: '| Display app info | btninfo |'
  prefs: []
  type: TYPE_TB
- en: '| Play sound button | btnsound |'
  prefs: []
  type: TYPE_TB
- en: '| Right most button | btnnext |'
  prefs: []
  type: TYPE_TB
- en: 'Finally, you will get the screen, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assigning the widget''s ID](img/1103OS-04-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The whole layout design of the main activity
  prefs: []
  type: TYPE_NORMAL
- en: 'The following XML code is available through the XML editor in the tab `activity_simple_numb3rs.xml`
    across the **Graphical Layout** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ImageButtons and handling event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is where we code the ImageButtons click events. Open the Java source code
    from `src/net.kerul.simplenumb3r5/SimpleNumb3r5.java`. Here, we will be discussing
    the main activity class that will provide the screen navigation with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The main class, as usual, will inherit the `Activity` class, and implement `OnClickListener`
    to enable the widget interaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main variable declarations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Widget objects are `imagenumber` as for the container to display the number
    of images, and we have `btnprevious`, `btnsound`, and `btnnext` for the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: The `screennumber` is the variable to keep a track of the current screen position;
    initially it is given the value 0 because we have a list of numbers that start
    from zero (0).
  prefs: []
  type: TYPE_NORMAL
- en: The sound controller object is named `mp`, and the string array named `soundfile`
    is the list of all the recordings of the spoken numbers from zero to nine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onCreate` method is the place where all the widgets are initialized and
    linked together in a view, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we have the `onClick` method to handle the navigation interactions. What
    we do here is basically disabling the `btnprevious` button if the `screennumber`
    is 0, and enabling it on for `screennumber` more than 0\. `btnnext` will also
    be disabled if the `screennumber` value is 9, on when less than 9\. These are
    to prevent runtime errors when the user trying to access that is less than 0 or
    more than 9\. The `btnsound` value is currently ignored; it will be discussed
    later when we deal with sounds (that is, playing of sound/audio).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'There is an additional method to switch the image of the numbers. The `R.id.imagefile`
    is the representation of the actual drawable image resources. Since we have 10
    images altogether, and `R.id` returns `int`, so we can use the switch case 10
    times as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Adding audio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before doing this exercise, copy all the sound resources to the `assets` folder.
    You may do this by copying all the mp3 files to the `assets` folder through the
    `File Manager`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding audio](img/1103OS-04-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Copy the MP3 files to the folder assets
  prefs: []
  type: TYPE_NORMAL
- en: Add code for `btnsound` in the `onClick` method. Add the following lines so
    that when the `btnplay` button is clicked, it will execute the method named `playSound()`.
    This method will receive a string argument as the value of the sound file name
    to be played.
  prefs: []
  type: TYPE_NORMAL
- en: The `soundfile` array variable is the variable that stores the list of the mp3
    filenames, while the `screennumber` indicates the current number on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The next important method is the `playsound` method. This method will play an
    mp3 sound file. The `soundname` parameter is the string that contains the sound
    file name which resides in the `assets` folder of the Android project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the explanation of the variables and processes involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '`try…catch block`: This is an exception handler, whose purpose is to enclose
    the code that might throw an exception. In this case the exception is to try to
    catch any problem while trying to play the sound file using `MediaPlayer`. If
    you notice, the catch block is the statement that will be executed if a certain
    code execution causes an exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mp` is the object instantiated from the class `MediaPlayer`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isPlaying()`: Checks whether the `MediaPlayer` is playing, `True` is playing
    whereas `false` is otherwise'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setDataSource()`: Sets the data source to be used. In this case, the data
    source is `FileDescriptor`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prepare()`: Prepares the player for playback, synchronously'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`play()`: Plays the sound file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop()`: Stops the current sound playing'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release()`: Releases the sound from the memory'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`afd` is a variable instantiated from the class `AssetFileDescriptor`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAssets()`: Retrieves the underlying resources (from the `assets` folder)
    via the `AssetManager` API'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openFD()`: Opens the file specified in the `String` argument'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFileDescriptor()`: Returns the `FileDescriptor` data source that can be
    used to read the data in the file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getStartOffSet()`: Returns the byte offset where this asset entry''s data
    starts'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getLength()`: Returns the total number of bytes of this asset entry''s data'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding another screen in the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This exercise is to add an information screen on the `SimpleNumb3r5` app. The
    information regarding the developer, email, Facebook fan page, and other information
    is displayed in the next screen. Since the screen contains a lot of text information
    including several pictures, so we make use of an HTML page as our approach here:'
  prefs: []
  type: TYPE_NORMAL
- en: Now, create an activity class to handle the new screen. Open the `src` folder,
    right-click on the package name (`net.kerul.SimpleNumb3r5`), and choose **New**
    | **Other...** From the selections, choose to add a new Android activity, and
    click on the **Next** button. Then, choose a blank activity and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the activity name as **Info**, as shown in the following screenshot and
    the wizard will suggest the screen layout as **info_activity**. Click on the **Finish**
    button.![Adding another screen in the app](img/1103OS-04-14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new activity named Info
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A blank new screen layout will appear. Remove the `HelloWorld` TextView (that
    comes with default). On the **Palette** panel, open the folder named `Composite`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag the WebView widget. Change the ID of WebView to `webinfo`. This
    layout will be saved in the file `info_activity.xml`.![Adding another screen in
    the app](img/1103OS-04-15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a WebView widget
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding HTML to WebView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create an HTML page using your favorite web editor, or you may just reuse the
    HTML page in the resources provided (in the `assets` folder, file name `info.html`).
    The HTML page, as shown in the following screenshot, is a simple HTML page that
    contains the app information. If you find that the HTML is too simple, do add
    your own information. In this exercise, we will put the HTML pages and the resources
    inside the `assets` folder, hence before proceeding, copy all the related materials
    of the HTML page into the `assets` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding HTML to WebView](img/1103OS-04-16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The HTML page in info.html
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is to edit the source code for `Info.java` that resides in the folder
    `src/net.kerul.simplenumb3r5`. Add the following code to the existing template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s understand the following lines of code added to the template above:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setContentView(R.layout.activity_info)`: `R.layout.activity_info` is referring
    to the layout created previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webinfo.loadUrl("file:///android_asset/info.html")`: This is the method to
    load an HTML page from a specific URL. The path to point to an HTML file inside
    the `assets` folder is `file:///android_asset/info.html`. This path cannot be
    found on a real device, however it provides access to the `app asset` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intent and Activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Intent is an abstract description of an operation to be performed. To be more
    specific, it is an asynchronous call which allows the application to request functionality
    from other Android components, for example, services/activities. It can be used
    with the `startActivity()` command to launch an activity. The previous code in
    `SimpleNumb3r5.java` is the main activity (or class) for this application. We've
    just created the second activity (class) in the file `Info.java`. In order for
    the second activity to appear, it has to be started using an intent.
  prefs: []
  type: TYPE_NORMAL
- en: We have decided to use the button `btninfo` as the trigger to invoke the second
    activity. Again, open the file `SimpleNumb3r5.java` and add the following lines
    to invoke another activity. These lines must be added to the `btninfo` button's
    `onClick` method. Notice that an instance of `Intent` is created as info. The
    main class is able to call the second class using the `startActivity()` method.
    The `Info.class` argument is referring to the second class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to call the second class through `Intent`, the `Manifest.xml` files
    need to be modified. However, you will notice that this has been done automatically
    by the **Android Development Toolkits** since Version 20\. In case the following
    lines are missing in `AndroidManifest.xml` please add it manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Should you need to display a webpage from the Internet in the WebView, you
    must declare the user permission by adding this line in `AndroidManifest.xml`
    above the `<application>` tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The final product run and test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After all the processes we have gone through, run the app in the emulator and
    you''ll get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final product run and test](img/1103OS-04-17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: SimpleNumb3r5 in action
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored a simple approach to incorporate several multimedia
    elements, such as image, an HTML page, and voice. The latest SDK is much more
    user friendly than any of the previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn more about the different widgets, such as
    menu, checkbox, radio button, and also about adding the preference screen.
  prefs: []
  type: TYPE_NORMAL
