- en: Chapter 9. Push Notifications and Analytics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 推送通知和分析
- en: We will start the chapter by talking about push notifications. You will learn
    how to implement custom solutions with notifications using Google Cloud Messaging,
    both on the server side and app side. Then, we will add notifications with Parse
    to our example. To finish with notifications, we will display our custom notifications
    using `NotificationCompat`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从讨论推送通知开始本章。你将学习如何使用Google Cloud Messaging实现带通知的自定义解决方案，包括服务器端和应用程序端。然后，我们将在示例中添加Parse的通知。最后，我们将使用`NotificationCompat`显示自定义通知来结束通知部分。
- en: In the second half of the chapter, we will talk about analytics. Having analytics
    to track what the user does in our app is essential to know how the user behaves,
    allowing us to identify patterns and improve the experience. We will implement
    one example with Parse and take an overview of the most popular solutions in the
    market.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后半部分，我们将讨论分析。拥有分析工具来追踪用户在我们应用中的行为对于了解用户的行为模式至关重要，这使我们能够识别模式并改善用户体验。我们将使用Parse实现一个示例，并概述市场上最受欢迎的解决方案。
- en: Push notifications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推送通知
- en: Sending and receiving with GCM
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GCM发送和接收
- en: Notifications from Parse
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Parse的通知
- en: NotificationCompat
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: NotificationCompat
- en: Analytics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: Analytics with Parse
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Parse的分析
- en: Error report
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误报告
- en: Push notifications
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送通知
- en: Push notifications are important to engage users and provide real-time updates.
    They are useful to remind the user that there is an action pending. For instance,
    in the **Qkr!** app created by MasterCard, one can order food and drink in some
    restaurants, and if the user hasn't paid after a considerable period of time,
    they send a notification to remind the user that he/she needs to pay before leaving
    the restaurant.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 推送通知对于吸引用户并提供实时更新非常重要。它们有助于提醒用户有待处理的事项。例如，在万事达卡创建的**Qkr!**应用中，用户可以在一些餐厅点餐点饮料，如果用户在一段时间后仍未付款，系统会发送通知提醒用户在离开餐厅前需要付款。
- en: They also work very well when we need to tell the user that we have new content
    or that other users have sent them a message. Any change that happens on the server
    side and requires informing the user is the perfect scenario to use notifications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要告诉用户我们有新内容或者其他用户给他们发送了消息时，它们也非常有效。任何在服务器端发生的变化并且需要通知用户的情况都是使用通知的完美场景。
- en: Notifications can also be sent locally from our own app; for example, we can
    schedule an alarm and show a notification. They don't necessarily have to be sent
    from a server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通知也可以从我们自己的应用程序本地发送；例如，我们可以设置一个闹钟并显示通知。它们不一定非要从服务器发送。
- en: They are shown at the top of the screen in the status bar, in a place called
    the notification area.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它们显示在屏幕顶部的状态栏中，这个地方被称为通知区域。
- en: '![Push notifications](img/4887_09_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![推送通知](img/4887_09_01.jpg)'
- en: 'The minimum information required for a notification is an icon, a title, and
    detail text. With the arrival of material design, we can customize the notifications
    in different ways; for instance, we can add different actions to them:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通知所需的最少信息包括一个图标、一个标题和详细文本。随着材料设计的到来，我们可以以不同方式自定义通知；例如，我们可以为它们添加不同的操作：
- en: '![Push notifications](img/4887_09_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![推送通知](img/4887_09_02.jpg)'
- en: 'If we scroll down from the top of the screen, we will show the notification
    drawer where we can see all the information displayed by the notifications:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从屏幕顶部向下滚动，将会显示通知抽屉，我们可以在其中看到所有通知显示的信息：
- en: '![Push notifications](img/4887_09_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![推送通知](img/4887_09_03.jpg)'
- en: Notifications shouldn't be used as part of two-way channel communication. If
    our app needs constant communication with the server, as in the case of messaging
    apps, we should consider using sockets, XMPP, or any other messaging protocol.
    In theory, notifications are not reliable, and we can't control when exactly they
    will be received.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通知不应作为双向通道通信的一部分。如果我们的应用需要与服务器持续通信，如即时通讯应用的情况，我们应该考虑使用套接字、XMPP或任何其他消息传递协议。理论上，通知是不可靠的，我们无法控制它们何时会被确切接收。
- en: However, don't abuse notifications; they are a good reason for a user to uninstall
    your app. Try to keep them to a minimum and use them only when necessary.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不要滥用通知；这是用户卸载你应用的一个很好的理由。尽量将通知数量降到最低，只在必要时使用。
- en: You can assign a priority level to a notification, and Android Lollipop onward,
    you can filter the notifications you want to receive based on this priority level.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为通知分配一个优先级，从Android Lollipop开始，你可以根据这个优先级过滤你想接收的通知。
- en: These are the key points and concepts you should have in mind while working
    with notifications. Before going into more theory, we will practice sending notifications
    to our app.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是处理通知时你应该记住的关键点和概念。在深入了解更多理论知识之前，我们将练习向我们的应用发送通知。
- en: Sending and receiving notifications using GCM
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GCM发送和接收通知
- en: There are different solutions on the market to send push notifications; one
    of these is Parse, which has a friendly control panel where anyone can easily
    send push notifications. We will use Parse as an example, but first, it's good
    to understand how this works internally and how we can build our own system to
    send notifications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有很多不同的解决方案用于发送推送通知；其中一个是Parse，它有一个友好的控制面板，任何人都可以轻松地发送推送通知。我们将以Parse为例，但首先，了解其内部工作原理以及如何构建我们自己的通知发送系统是有好处的。
- en: '**GCM** (**Google Cloud Messaging**) uses push notifications, which we will
    send to our mobile. Google has servers called GCM connection servers that handle
    this process. If we want to send a push notification, we need to tell these servers
    first, and they will send it to our device later. We need to create a server or
    use a third-party server, which will communicate with the GCM servers over HTTP
    or XMPP as the communication can be done using both protocols.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**GCM**（**Google Cloud Messaging**）使用推送通知，我们将这些通知发送到我们的手机。谷歌有一些称为GCM连接服务器的服务器来处理这个过程。如果我们想发送推送通知，首先需要告诉这些服务器，然后它们会在稍后发送到我们的设备。我们需要创建一个服务器或使用第三方服务器，通过HTTP或XMPP与GCM服务器通信，因为可以使用这两种协议进行通信。'
- en: '![Sending and receiving notifications using GCM](img/4887_09_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用GCM发送和接收通知](img/4887_09_04.jpg)'
- en: As we said earlier, we can't control exactly when a message is received because
    we have no control over the GCM server. It queues the message and dispatches it
    when the device is online.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所述，由于我们无法控制GCM服务器，因此不能精确控制消息的接收时间。GCM服务器会将消息排队并在设备在线时发送。
- en: To create our custom solution, the first thing we need to do is enable the messaging
    services on our app from the Google developers' website at [https://developers.google.com/mobile/add?platform=android](https://developers.google.com/mobile/add?platform=android).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们自己的解决方案，首先需要在Google开发者网站上的我们的应用中启用消息传递服务：[https://developers.google.com/mobile/add?platform=android](https://developers.google.com/mobile/add?platform=android)。
- en: '![Sending and receiving notifications using GCM](img/4887_09_05.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![使用GCM发送和接收通知](img/4887_09_05.jpg)'
- en: After you create the app, enable GCM messaging, and you will be provided with
    a Sender ID and a Server API Key. The sender ID was previously known as project
    number.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建应用后，启用GCM消息传递，系统会提供发送者ID和服务器API密钥。发送者ID之前被称为项目编号。
- en: If we want to receive GCM messages, we need to register our client, which is
    our mobile app, with this project. To do this, our app will use the GCM API to
    register and obtain a token as confirmation. When this is done, the GCM servers
    will know that your device is ready to receive push notifications from this particular
    project/sender.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想接收GCM消息，我们需要将我们的客户端（即我们的移动应用）注册到这个项目。为此，我们的应用将使用GCM API进行注册并获得一个令牌作为确认。完成此操作后，GCM服务器将知道你的设备已准备好接收来自这个特定项目/发送者的推送通知。
- en: '![Sending and receiving notifications using GCM](img/4887_09_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用GCM发送和接收通知](img/4887_09_06.jpg)'
- en: 'We need to add the play services to use this API:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加游戏服务以使用此API：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The registration is done through the **Instance ID** API, calling `instanceID.getToken`
    with the `SenderID` as a parameter:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**实例ID** API进行注册，调用`instanceID.getToken`方法，并将`SenderID`作为参数：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to call this asynchronously and keep a Boolean variable in our app
    to remember whether we have been successfully registered. Our token can change
    with time, and we''ll know when it happens with the `onRefreshToken()` callback.
    The token needs to be sent to our server:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要异步调用此方法，并在我们的应用中保持一个布尔变量，以记住我们是否已成功注册。我们的令牌可能会随时间变化，当变化发生时，我们会通过`onRefreshToken()`回调得知。令牌需要发送到我们的服务器：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once this is done, we need to create a `GCMListener` and add some permissions
    to the Android manifest:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们需要创建一个`GCMListener`并在Android清单中添加一些权限：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`GCMListener` will contain the `onMessageReceived` method, which will be called
    when we receive any message.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`GCMListener`将包含`onMessageReceived`方法，当我们接收到任何消息时会被调用。'
- en: This is all we need from the client side; for the server side, we won't go into
    details in this book because it totally depends on the technology and the language
    chosen. There are different code snippets and scripts to send the notifications
    for Python, Grails, Java, and so on, which are easy to find on the Web.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要的客户端方面的全部内容；至于服务器端，由于它完全取决于选择的技术和语言，本书将不详细介绍。在网络上可以轻松找到用于发送通知的 Python、Grails、Java
    等不同的代码片段和脚本。
- en: 'We don''t really need a server to send a notification because we can communicate
    directly with GCM. All we need to do is send a `POST` request to [https://gcm-http.googleapis.com/gcm/send](https://gcm-http.googleapis.com/gcm/send).
    This can easily be done using any online `POST`-sending service, such as [http://hurl.it](http://hurl.it)
    or Postman, a Google Chrome extension used to send network requests. This is how
    our request needs to look:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们并不需要一个服务器来发送通知，因为我们可以直接与 GCM 进行通信。我们需要做的就是向 [https://gcm-http.googleapis.com/gcm/send](https://gcm-http.googleapis.com/gcm/send)
    发送一个 `POST` 请求。这可以通过任何在线 `POST` 发送服务轻松完成，例如 [http://hurl.it](http://hurl.it) 或
    Postman（一个用于发送网络请求的 Google Chrome 扩展程序）。我们的请求需要如下所示：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Sending and receiving notifications using GCM](img/4887_09_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![使用 GCM 发送和接收通知](img/4887_09_07.jpg)'
- en: Continuing with `MasteringAndroidApp`, we will implement push notifications
    with Parse.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用 `MasteringAndroidApp`，我们将实现 Parse 的推送通知功能。
- en: Push notifications with Parse
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Parse 的推送通知
- en: For our example, we will stick to Parse. The main reason is that we don't need
    to worry about the server side, and we don't have to create an app in the Google
    developer console with this solution. Another good reason is that it has a nice
    built-in control panel to send this notification, and we can target different
    users if we have been tracking users with different parameters in advance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将坚持使用 Parse。主要原因是，我们不需要担心服务器端，而且使用这个解决方案不需要在 Google 开发者控制台创建应用程序。另一个原因是它有一个很好的内置控制面板来发送通知，如果我们提前跟踪了具有不同参数的不同用户，我们还可以针对这些用户。
- en: '![Push notifications with Parse](img/4887_09_08.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Parse 的推送通知](img/4887_09_08.jpg)'
- en: 'With Parse, we don''t need to create a GCM listener. Instead, it uses a service
    that is already included in the Parse library, and we just need to register a
    subscriber for this service. All we need to do is add the permissions and receivers
    to our app, and we are ready to go:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Parse，我们不需要创建一个 GCM 监听器。相反，它使用 Parse 库中已经包含的服务，我们只需为此服务注册一个订阅者。我们需要做的就是向我们的应用程序添加权限和接收器，然后就可以开始了：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Ensure that the last two permissions match your package name. The receivers
    need to go inside the `application` tag:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保最后两个权限与您的包名相匹配。接收器需要放在 `application` 标签内：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To listen for notifications, we can register a subscriber in the `OnCreate`
    method of our `Application` class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监听通知，我们可以在 `Application` 类的 `OnCreate` 方法中注册一个订阅者：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, it's ready. Simply go to the Parse web, select the **Push** tab, and click
    on **+ Send a push**. You can specify the audience, if you want to send it immediately
    or with a delay, and other parameters. It will keep a track of the push sent and
    indicate the people it was sent to.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切就绪。只需进入 Parse 网站，选择 **推送** 选项卡，然后点击 **+ 发送推送**。您可以指定受众，选择立即发送还是延迟发送以及其他参数。它会跟踪已发送的推送，并指出发送给了哪些人。
- en: '![Push notifications with Parse](img/4887_09_09.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Parse 的推送通知](img/4887_09_09.jpg)'
- en: 'If you see **1** in the **Pushes Sent** column and then take a look at the
    notification in your device, all is correct. The notification in your device should
    look as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 **已发送推送** 列中看到 **1**，然后查看设备中的通知，那么一切正常。您设备中的通知应如下所示：
- en: '![Push notifications with Parse](img/4887_09_10.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Parse 的推送通知](img/4887_09_10.jpg)'
- en: Using NotificationCompat
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NotificationCompat
- en: At the moment, we can see the default notification, which is created by the
    Parse receiver. However, we can set our own receiver and create nicer notifications
    with `NotificationCompat`. This component was introduced in the support v4 library,
    displaying notifications with the latest features in Android L and M as well as
    in previous versions until API 4.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以看到由 Parse 接收器创建的默认通知。但是，我们可以设置自己的接收器，并使用 `NotificationCompat` 创建更美观的通知。这个组件在支持库
    v4 中引入，可以显示 Android L 和 M 以及之前版本直到 API 4 的最新功能的通知。
- en: 'In a few words, what we need to do is create a notification with the help of
    `NotificationCompat.Builder` and pass this notification to the system with `NotificationManager.notify()`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们需要做的是利用`NotificationCompat.Builder`创建一个通知，并通过`NotificationManager.notify()`将这个通知传递给系统：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will show our notification. The title, text, and icon are mandatory; if
    we don''t add these three properties, the notification won''t be shown. To start
    using our custom receiver, we need to specify in the manifest the register that
    we want to use, instead of the Parse push receiver:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示我们的通知。标题、文本和图标是必须的；如果我们不添加这三个属性，通知就不会显示。要开始使用我们的自定义接收器，需要在清单文件中指定我们想要使用的注册，而不是Parse推送接收器：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We discussed how to show custom notifications with `NotificationCompat`. Notifications
    have their own design guidelines, and they are an important part of material design.
    It is recommended to have a look at these guidelines and keep them in mind while
    using this component in your app.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何使用`NotificationCompat`显示自定义通知。通知有自己的设计指南，它们是材料设计的重要组成部分。建议查看这些指南，并在在应用中使用此组件时牢记它们。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the guidelines at [http://developer.android.com/design/patterns/notifications.html](http://developer.android.com/design/patterns/notifications.html).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接找到指导方针：[http://developer.android.com/design/patterns/notifications.html](http://developer.android.com/design/patterns/notifications.html)。
- en: The importance of analytics
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据分析的重要性
- en: It's very important to know what the user does with your app. Analytics help
    us understand which screens are most visited, which products the users buy in
    our app, and why certain users drop out during the registration process along
    with obtaining information pertaining to gender, location, age, and so on.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 了解用户如何使用你的应用非常重要。分析帮助我们理解哪些屏幕访问最多，用户在我们的应用中购买哪些产品，以及为什么某些用户在注册过程中退出，同时获取有关性别、位置、年龄等信息。
- en: We can even track crashes that users have in our app along with information
    about the device model, android version, crash logs, and so on.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以追踪应用中用户遇到的崩溃问题，以及设备型号、Android版本、崩溃日志等信息。
- en: This data helps us improve user experience, for instance, if we see that the
    user is not behaving with the app as we anticipated. It helps define our product;
    if we have different features in our app, we can determine which is the most used.
    It helps us know the audience, which can be beneficial for marketing purposes.
    With crash reports, it's easier to keep the app free of bugs and crashes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据帮助我们改善用户体验，例如，如果我们发现用户的行为并不像我们预期的那样。它有助于定义我们的产品；如果我们的应用中有不同的功能，我们可以确定哪个功能使用最多。它帮助我们了解受众，这对市场营销是有益的。通过崩溃报告，更容易保持应用无错误和崩溃。
- en: We will use Parse as an example to start tracking some events.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以Parse为例，开始追踪一些事件。
- en: Analytics with Parse
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Parse进行数据分析
- en: Without adding any extra code and only with the `Parse.init()` method that we
    are already calling, we have some statistics in the Parse console under the **Analytics**
    tab.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在不添加任何额外代码的情况下，仅通过我们已经在使用的`Parse.init()`方法，在Parse控制台的**分析**标签下就能看到一些统计数据。
- en: '![Analytics with Parse](img/4887_09_11.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![使用Parse进行数据分析](img/4887_09_11.jpg)'
- en: In the **Audience** section, we can see the active installations and the active
    users displayed daily, weekly, and monthly. This is useful to understand how many
    users we have and how many of them are active. If we want to know how many uninstalled
    the app, we can look at the **Retention** section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在**受众**部分，我们可以看到每日、每周和每月的活跃安装量和活跃用户数。这有助于我们了解有多少用户以及他们中有多少是活跃的。如果我们想知道有多少用户卸载了应用，可以查看**留存**部分。
- en: 'We will track some events and crashes to display information in these two sections,
    but first, we will take a look at **Explorer**. If you click on the **Explorer**
    button on the left, you should see the following option:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将追踪一些事件和崩溃，以在这两个部分显示信息，但首先，我们将看看**资源管理器**。如果你点击左侧的**资源管理器**按钮，你应该看到以下选项：
- en: '![Analytics with Parse](img/4887_09_12.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用Parse进行数据分析](img/4887_09_12.jpg)'
- en: This will show a table where we can see different options to filter the data
    from our app. As soon as we start tracking events and actions, there will be more
    columns here, and we will be able to create complex queries.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个表格，我们可以从中看到过滤我们应用数据的各种选项。一旦开始追踪事件和动作，这里将会有更多的列，我们将能够创建复杂的查询。
- en: 'By default, if we click on run query, we will see the following image of a
    table:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果我们点击运行查询，我们会看到以下表格图像：
- en: '![Analytics with Parse](img/4887_09_13.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Parse 的分析](img/4887_09_13.jpg)'
- en: It shows all the information available under the default columns; no extra columns
    are needed for now. We can see all the different request types along with the
    OS, OS version, and version of our app.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了在默认列下可用的所有信息；目前不需要额外的列。我们可以看到所有不同的请求类型以及操作系统、操作系统版本和我们应用程序的版本。
- en: We can work with the filter to produce different outputs. Some interesting outputs
    could be, for instance, sorting and grouping by app version so as to have an idea
    of how many people are using each version.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用过滤器来生成不同的输出。一些有趣的输出可能是，例如，按应用程序版本排序和分组，以便了解有多少人在使用每个版本。
- en: If we were using the same Parse database for different platforms, such as Android
    and iOS, we could filter by platform.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用相同的 Parse 数据库用于不同的平台，比如安卓和 iOS，我们可以按平台进行过滤。
- en: 'Here''s an example of filtering by OS version, where we can see all the Android
    versions that our users are currently using:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个按操作系统版本过滤的示例，我们可以看到我们的用户当前正在使用的所有安卓版本：
- en: '![Analytics with Parse](img/4887_09_14.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Parse 的分析](img/4887_09_14.jpg)'
- en: To gather more data about when and how often the app is opened, we can add the
    following line in the `oncreate` method of our splash screen or first activity.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集更多关于应用程序何时以及被打开频率的数据，我们可以在欢迎屏幕或第一个活动的`onCreate`方法中添加以下行。
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is an example of an event that we can track, but when we generally speak
    about event tracking, we refer to custom events. For example, if we want to track
    which job offer is the most visited, we will track an event in `JobOfferDetailActivity`
    with the title of the article visited. We can also track this event in the `onlick`
    listener when a row is clicked on to open the offer. There is no fixed rule for
    this; the implementations may vary. However, we need to know that the objective
    is to track the event when the offer is seen.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们可以跟踪的事件示例，但通常说到事件跟踪，我们指的是自定义事件。例如，如果我们想跟踪哪个职位报价访问量最大，我们将在`JobOfferDetailActivity`中跟踪带有访问文章标题的事件。我们还可以在点击行打开报价的`onlick`监听器中跟踪此事件。这方面没有固定的规则；实现可能有所不同。但是，我们需要知道目标是当报价被查看时跟踪事件。
- en: 'The code to choose the option where we track the event in the `OnCreate` method
    of `OfferDetailActivity` will look similar to the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OfferDetailActivity`的`OnCreate`方法中选择跟踪事件的选项的代码将与以下代码类似：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `trackEventInBackground` method launches a background thread to create the
    network upload request for us. The parameters are sent as a `Map` string with
    a maximum of eight.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`trackEventInBackground`方法启动一个后台线程来为我们创建网络上传请求。参数作为具有最多八个的`Map`字符串发送。'
- en: If we visit different offers at different times and go to the analytics explorer
    section, we can easily create a query to see the number of times that each job
    offer was opened.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在不同时间访问不同的报价，并进入分析浏览器部分，我们可以轻松创建一个查询来查看每个职位报价被打开的次数。
- en: '![Analytics with Parse](img/4887_09_15.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Parse 的分析](img/4887_09_15.jpg)'
- en: By grouping the data by dimension, which comprises the different parameters
    that we send with the event tracking, and using an aggregate of a count, we can
    get a count of every job offer visited.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按维度分组数据，这些维度包括我们随事件跟踪发送的不同参数，并使用计数的聚合，我们可以得到每个职位报价被访问的次数。
- en: Next, we will take a look at how to take advantage of this event tracking to
    use Parse as an error report tool.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何利用这种事件跟踪的优势，将 Parse 作为错误报告工具。
- en: The error report
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误报告
- en: Reporting crashes when our app is distributed is essential to maintain an app
    free of bugs and crashes. There are hundreds of Android devices on the market
    and different situations in which even the best QA person or tester would slip-up
    while releasing the app, and we end up with an app that crashes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序分发时报告崩溃对于维护一个无错误和崩溃的应用程序至关重要。市场上有成百上千种安卓设备，即使在发布应用程序时最好的质量保证人员或测试员也可能在不同情况下犯错，最终导致应用程序崩溃。
- en: We need to assume that our app is going to crash. We must code as best as we
    can, but if a crash happens, we need to have the tools in place to report and
    fix it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要假设我们的应用程序将会崩溃。我们必须尽可能编写最好的代码，但如果发生崩溃，我们需要有工具来报告并修复它。
- en: 'Parse allows us to track errors using the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 允许我们使用以下代码跟踪错误：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: However, this solution will only allow us to track errors in a controlled piece
    of code. For instance, let's say that we have a network request and it returns
    an error. This scenario can be handled easily; we just track the event with the
    error response from the server.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种解决方案仅能让我们追踪到受控代码块的错误。例如，假设我们有一个网络请求，它返回了一个错误。这种情形可以轻松处理；我们只需追踪来自服务器的错误响应事件。
- en: There is a problem when we have `NullPointerException` in our app, which is
    when we have a crash because something unexpected happened that we can't detect
    in the code. For instance, if the link of the image of a job is null and I try
    to read the link without checking whether the attribute is null or not, I will
    get `NullPointerException`, and the app will crash.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序中出现`NullPointerException`时，就会出现问题，这是因为我们遇到了一个由于无法在代码中检测到的意外情况而导致的崩溃。例如，如果一个职位的图片链接为null，而我尝试读取链接而不检查属性是否为null，我将得到`NullPointerException`，应用程序将崩溃。
- en: 'How can we track this if we do not control the part of the code where it happens?
    Fortunately, we have tools on the market that do this for us. HockeyApp is a tool
    that helps distribute beta versions and collect live crash reports. This is a
    tool that shows the error reports of our apps in a web panel. It''s really easy
    to integrate; all we need is to add the following to the library:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不能控制发生错误的代码部分，我们该如何追踪呢？幸运的是，市场上我们有工具可以帮我们做到这一点。HockeyApp是一个帮助分发测试版本并收集实时崩溃报告的工具。这是一个在网页面板上显示我们应用程序错误报告的工具。它真的很容易集成；我们只需要在库中添加以下内容：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we need to call the following method to report errors:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要调用以下方法来报告错误：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `APP_ID` would be found when you upload the APK to hockey or when you create
    a new app manually on the hockey website.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`APP_ID`将在你将APK上传到Hockey或在你手动在Hockey网站上创建新应用程序时找到。'
- en: '![The error report](img/4887_09_16.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![错误报告](img/4887_09_16.jpg)'
- en: 'Once we know `App_ID` and register for crashes, if we have a crash, we will
    see a list with the number of occurrences, as in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道`App_ID`并注册了崩溃报告，如果我们遇到崩溃，我们将看到一个带有发生次数列表的界面，如下面的截图所示：
- en: '![The error report](img/4887_09_17.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![错误报告](img/4887_09_17.jpg)'
- en: We'll finish with analytics by saying that Parse is just one of the alternatives;
    it's very common to use Google analytics as well, which is included in the Google
    Play service library. Google analytics allow us to create more complex reports,
    for instance funnel tracking to see how many users we drop during a long registration
    process, and we can see the data in different charts and histograms.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以分析的话题结束，Parse只是众多选择之一；同样常见的还有使用Google Analytics，它包含在Google Play服务库中。Google
    Analytics允许我们创建更复杂的报告，例如漏斗追踪，以查看在漫长的注册过程中我们失去了多少用户，我们还可以在不同的图表和直方图中查看数据。
- en: If you belong to a large organization, take a look at Adobe Omniture. It's an
    enterprise tool that helps you track different events as variables and then creates
    formulas to display these variables. It also allows you to combine your mobile
    analytics with data from other departments such as sales, marketing, and customer
    service. From my personal experience, the companies that I have seen using Omniture
    have a person working full time on the analytics study. In this case, all the
    developer needs to know is how to implement the SDK and track events; it's not
    a developer's task to create complex reports.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你属于一个大机构，可以看看Adobe Omniture。它是一个企业工具，能帮助你将不同的事件作为变量进行追踪，并创建公式来展示这些变量。它还允许你将移动分析数据与其他部门（如销售、市场营销和客户服务）的数据结合起来。根据我的个人经验，我见过的使用Omniture的公司通常会有专人全职负责分析研究。在这种情况下，开发者需要知道的只是如何实现SDK和追踪事件；创建复杂报告不是开发者的任务。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to add notifications to our app. We implemented
    push notifications with Parse and discussed how to create our custom notifications
    service using Google Cloud Messaging, with all the code needed on the client side
    and tools to test the server side. In the second half of the chapter, we introduced
    analytics, explaining why they are important, and tracked events with Parse. An
    important aspect in the analytics world is the error report. We tracked the errors
    in our apps using Parse and HockeyApp as well. To finish, we took an overview
    of other analytics solutions, such as Google Analytics and Adobe Omniture.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何为我们的应用程序添加通知。我们使用 Parse 实现了推送通知，并讨论了如何使用 Google Cloud Messaging 创建我们自己的自定义通知服务，包括客户端所需的所有代码和测试服务器端的工具。在章节的后半部分，我们介绍了分析，解释了它们的重要性，并用
    Parse 跟踪事件。在分析领域，一个重要的方面是错误报告。我们还使用 Parse 和 HockeyApp 跟踪了应用程序中的错误。最后，我们概览了其他分析解决方案，例如
    Google Analytics 和 Adobe Omniture。
- en: In the next chapter, we will work with location services and learn how to add
    `MapView` to our example, displaying a Google map with location markers.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用位置服务，并学习如何将`MapView`添加到我们的示例中，显示带有位置标记的谷歌地图。
