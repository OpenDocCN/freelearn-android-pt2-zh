["```kt\n<RelativeLayout \n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_centerVertical=\"true\"\n        android:text=\"\"\n         />\n\n    <ImageView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/textView\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginTop=\"14dp\"\n         />\n\n</RelativeLayout>\n```", "```kt\npublic class Chapter9Activity extends Activity implements\n CreateNdefMessageCallback\n  {\n\n  NfcAdapter mNfcAdapter;\n  TextView mInfoText;\n  ImageView imageView;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n\n    imageView = (ImageView) findViewById(R.id.imageView);\n    mInfoText = (TextView) findViewById(R.id.textView);\n    // Check for available NFC Adapter\n       mNfcAdapter = NfcAdapter.getDefaultAdapter(getApplicationContext());\n\n    if (mNfcAdapter == null) \n    {\n      mInfoText = (TextView) findViewById(R.id.textView);\n      mInfoText.setText(\"NFC is not available on this device.\");\n      finish();\n      return;\n    }\n    // Register callback to set NDEF message\n    mNfcAdapter.setNdefPushMessageCallback(this, this);\n  }\n\n  @Override\n  public boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.main, menu);\n    return true;\n  }\n}\n```", "```kt\n  @Override\n  public NdefMessage createNdefMessage(NfcEvent arg0) {\n\n    Bitmap icon =  BitmapFactory.decodeResource(this.getResources(),\n        R.drawable.ic_launcher);\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n    icon.compress(Bitmap.CompressFormat.PNG, 100, stream);\n    byte[] byteArray = stream.toByteArray();\n\n    NdefMessage msg = new NdefMessage(new NdefRecord[] {\n createMimeRecord(\"application/com.chapter9\", byteArray)\n , NdefRecord.createApplicationRecord(\"com.chapter9\")\n});\n    return msg;\n  }\n  public NdefRecord createMimeRecord(String mimeType, byte[] payload) {\n\n    byte[] mimeBytes = mimeType.getBytes(Charset.forName(\"US-ASCII\"));\n    NdefRecord mimeRecord = new NdefRecord(NdefRecord.TNF_MIME_MEDIA,\n        mimeBytes, new byte[0], payload);\n    return mimeRecord;\n  }\n```", "```kt\n  @Override\n  public void onResume() {\n    super.onResume();\n    // Check to see that the Activity started due to an Android Beam\n    if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {\n      processIntent(getIntent());\n    }\n  }\n\n  @Override\n  public void onNewIntent(Intent intent) {\n    // onResume gets called after this to handle the intent\n    setIntent(intent);\n  }\n\n  void processIntent(Intent intent) {\n\n    Parcelable[] rawMsgs = intent\n\n  .getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);\n    // only one message sent during the beam\n NdefMessage msg = (NdefMessage) rawMsgs[0];\n // record 0 contains the MIME type, record 1 is the AAR\n byte[] bytes = msg.getRecords()[0].getPayload();\n    Bitmap bmp = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n\n    imageView.setImageBitmap(bmp);\n  }\n```", "```kt\n<manifest \n    package=\"com.chapter9\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n\n    <uses-permission android:name=\"android.permission.NFC\"/>\n <uses-feature android:name=\"android.hardware.nfc\" android:required=\"false\" />\n\n    <uses-sdk\n        android:minSdkVersion=\"14\"\n        android:targetSdkVersion=\"15\" />\n\n    <application\n        android:icon=\"@drawable/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/AppTheme\" >\n        <activity\n            android:name=\".Chapter9Activity\"\n            android:label=\"@string/title_activity_chapter9\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n <intent-filter>\n <action android:name=\"android.nfc.action.NDEF_DISCOVERED\" />\n <category android:name=\"android.intent.category.DEFAULT\" />\n <data android:mimeType=\"application/com.chapter9\" />\n </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```", "```kt\n<manifest \n    package=\"com.chapter9\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n\n    <uses-sdk\n        android:minSdkVersion=\"14\"\n        android:targetSdkVersion=\"15\" />\n <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" />\n <uses-permission android:name=\"android.permission.INTERNET\" />\n <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n    <application\n        android:icon=\"@drawable/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/AppTheme\" >\n        <activity\n            android:name=\".Chapter9Activity\"\n            android:label=\"@string/title_activity_chapter9\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```", "```kt\npackage com.chapter9;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.NetworkInfo;\nimport android.net.wifi.p2p.WifiP2pManager;\nimport android.net.wifi.p2p.WifiP2pManager.Channel;\nimport android.net.wifi.p2p.WifiP2pManager.PeerListListener;\nimport android.widget.Toast;\n\npublic class Chapter9WiFiDirectBroadcastReceiver extends BroadcastReceiver {\n\n private WifiP2pManager manager;\n private Channel channel;\n private Chapter9Activity activity;\n\n    public Chapter9WiFiDirectBroadcastReceiver(WifiP2pManager manager, Channel \nchannel,\n        Chapter9Activity activity) {\n        super();\n        this.manager = manager;\n        this.channel = channel;\n        this.activity = activity;\n    }\n}\n```", "```kt\n@Override\n    public void onReceive(Context context, Intent intent) {\n        String action = intent.getAction();\n        if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n\n            int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n\n            if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n                // Wifi Direct mode is enabled\n              Toast.makeText(activity, \"wifi direct is enabled\",Toast.LENGTH_LONG).show();\n            } else {\n              // Wifi Direct mode is disabled\n              Toast.makeText(activity, \"wifi direct is disabled\",Toast.LENGTH_LONG).show();\n            }\n\n        } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) \n        {\n\n            // request peers from the wifi p2p manager\n            if (manager != null) {\n                manager.requestPeers(channel, (PeerListListener) activity);\n            }\n\n        } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n            if (manager == null) {\n                return;\n            }\n\n            NetworkInfo networkInfo = (NetworkInfo) intent\n                    .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n            if (networkInfo.isConnected()) {\n\n                // request connection info\n                manager.requestConnectionInfo(channel, activity);\n            } else {\n                // It's a disconnect\n\n            }\n        } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n\n        }\n    }\n```", "```kt\n<LinearLayout \n\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <Button\n        android:id=\"@+id/buttonFind\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"find\" />\n\n    <Button\n        android:id=\"@+id/buttonConnect\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"connect\" />\n\n</LinearLayout>\n```", "```kt\npackage com.chapter9;\n\nimport android.app.Activity;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.IntentFilter;\nimport android.net.wifi.p2p.WifiP2pConfig;\nimport android.net.wifi.p2p.WifiP2pDevice;\nimport android.net.wifi.p2p.WifiP2pDeviceList;\nimport android.net.wifi.p2p.WifiP2pInfo;\nimport android.net.wifi.p2p.WifiP2pManager;\nimport android.net.wifi.p2p.WifiP2pManager.ActionListener;\nimport android.net.wifi.p2p.WifiP2pManager.Channel;\nimport android.net.wifi.p2p.WifiP2pManager.ChannelListener;\nimport android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener;\nimport android.net.wifi.p2p.WifiP2pManager.PeerListListener;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Toast;\npublic class Chapter9Activity extends Activity implements \nChannelListener,OnClickListener,PeerListListener,ConnectionInfoListener {\n\n    private WifiP2pManager manager;\n    private final IntentFilter intentFilter = new IntentFilter();\n    private Channel channel;\n    private BroadcastReceiver receiver = null;\n    private Button buttonFind;\n    private Button buttonConnect;\n    private WifiP2pDevice device;\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        manager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);\n channel = manager.initialize(this, getMainLooper(), null);\n\n intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n\n        receiver = new Chapter9WiFiDirectBroadcastReceiver(manager, channel, this);\n        registerReceiver(receiver, intentFilter);\n\n        this.buttonConnect = (Button) this.findViewById(R.id.buttonConnect);\n        this.buttonConnect.setOnClickListener(this);\n\n        this.buttonFind = (Button)this.findViewById(R.id.buttonFind);\n        this.buttonFind.setOnClickListener(this);\n    }\n}\n```", "```kt\n    @Override\n      public void onChannelDisconnected() {\n        //handle the channel lost event\n      }\n    ```", "```kt\n    @Override\n      public void onPeersAvailable(WifiP2pDeviceList peerList) {\n\n        for (WifiP2pDevice device : peerList.getDeviceList()) {\n          this.device = device;\n          break;\n        }\n      }\n    ```", "```kt\n      @Override\n      public void onConnectionInfoAvailable(WifiP2pInfo info) {\n        String infoname = info.groupOwnerAddress.toString();\n\n      }\n    ```", "```kt\n      @Override\n      public void onClick(View v) {\n        if(v == buttonConnect)\n        {\n          connect(this.device);\n        }\n        else if(v == buttonFind)\n        {\n          find();\n        }\n\n      }\n    ```", "```kt\npublic void connect(WifiP2pDevice device)\n  {\n    WifiP2pConfig config = new WifiP2pConfig();\n    if(device != null)\n    {\n      config.deviceAddress = device.deviceAddress;\n      manager.connect(channel, config, new ActionListener() {\n\n          @Override\n          public void onSuccess() {\n\n            //success\n          }\n\n          @Override\n          public void onFailure(int reason) {\n            //fail\n          }\n      });\n  }\n    else\n    {\n      Toast.makeText(Chapter9Activity.this, \"Couldn't connect, device is not found\",\n\n                Toast.LENGTH_SHORT).show();\n    }\n  }  \n       public void find()\n  {\n    manager.discoverPeers(channel, new WifiP2pManager.ActionListener() \n       {\n\n            @Override\n            public void onSuccess() {\n                Toast.makeText(Chapter9Activity.this, \"Finding Peers\",\n                        Toast.LENGTH_SHORT).show();\n       }\n\n            @Override\n            public void onFailure(int reasonCode) \n           {\n                Toast.makeText(Chapter9Activity.this, \"Couldnt find peers \",\n                        Toast.LENGTH_SHORT).show();\n            }\n        });\n  }\n```"]