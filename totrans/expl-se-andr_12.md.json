["```kt\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := sepolicy\nLOCAL_MODULE_CLASS := ETC\nLOCAL_MODULE_TAGS := optional\nLOCAL_MODULE_PATH := $(TARGET_ROOT_OUT)\n...\n```", "```kt\n$ grep -w '^LOCAL_MODULE' Android.mk\nLOCAL_MODULE := sepolicy\nLOCAL_MODULE := file_contexts\nLOCAL_MODULE := seapp_contexts\nLOCAL_MODULE := property_contexts\nLOCAL_MODULE := selinux-network.sh\nLOCAL_MODULE := mac_permissions.xml\nLOCAL_MODULE := eops.xml\n\n```", "```kt\n...\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := sepolicy\nLOCAL_MODULE_CLASS := ETC\nLOCAL_MODULE_TAGS := optional\nLOCAL_MODULE_PATH := $(TARGET_ROOT_OUT)\ninclude $(BUILD_SYSTEM)/base_rules.mk\n...\n```", "```kt\n...\nsepolicy_policy.conf := $(intermediates)/policy.conf\n$(sepolicy_policy.conf): PRIVATE_MLS_SENS := $(MLS_SENS)\n$(sepolicy_policy.conf): PRIVATE_MLS_CATS := $(MLS_CATS)\n$(sepolicy_policy.conf) : $(call build_policy, security_classes initial_sids access_vectors global_macros mls_macros mls policy_capabilities te_macros attributes bools *.te roles users initial_sid_contexts fs_use genfs_contexts port_contexts)\n...\n```", "```kt\n...\n@mkdir -p $(dir $@)\n$(hide) m4 -D mls_num_sens=$(PRIVATE_MLS_SENS) -D mls_num_cats=$(PRIVATE_MLS_CATS) -s $^ > $@\n$(hide) sed '/dontaudit/d' $@ > $@.dontaudit\n...\n```", "```kt\n...\n$(LOCAL_BUILT_MODULE) : $(sepolicy_policy.conf) $(HOST_OUT_EXECUTABLES)/checkpolicy\n@mkdir -p $(dir $@)\n$(hide) $(HOST_OUT_EXECUTABLES)/checkpolicy -M -c $(POLICYVERS) -o $@ $<\n$(hide) $(HOST_OUT_EXECUTABLES)/checkpolicy -M -c $(POLICYVERS) -o $(dir $<)/$(notdir $@).dontaudit $<.dontaudit\n...\n```", "```kt\n...\nbuilt_sepolicy := $(LOCAL_BUILT_MODULE)\nsepolicy_policy.conf :=\n...\n```", "```kt\n$ mkdir <PATH>\n\n```", "```kt\n$ vim BoardConfig.mk\n\n```", "```kt\nBOARD_SEPOLICY_DIRS += device/fsl/udoo/sepolicy\n```", "```kt\nBOARD_SEPOLICY_UNION += file_contexts\n```", "```kt\nBOARD_SEPOLICY_UNION += file_contexts watchdog.te\n```", "```kt\nBOARD_SEPOLICY_UNION += file_contexts watchdog.te custom.te\n```", "```kt\nBOARD_SEPOLICY_REPLACE := watchdog.te\n```", "```kt\nBOARD_SEPOLICY_DIRS += device/OEM/A\nBOARD_SEPOLICY_UNION += file_contexts custom.te\n```", "```kt\nBOARD_SEPOLICY_DIRS += device/OEM/X\nBOARD_SEPOLICY_UNION += file_contexts custom.te\n```", "```kt\nBOARD_SEPOLICY_DIRS += device/OEM/Y\nBOARD_SEPOLICY_UNION += file_contexts custom.te\n```", "```kt\ndevice/OEM/A/file_contexts\ndevice/OEM/A/custom.te\ndevice/OEM/X/file_contexts\ndevice/OEM/X/custome.te\nexternal/sepolicy/* (base policy files)\n```", "```kt\ndevice/OEM/A/file_contexts\ndevice/OEM/A/custom.te\ndevice/OEM/Y/file_contexts\ndevice/OEM/Y/custom.te\nexternal/sepolicy/* (base policy files)\n```", "```kt\nBOARD_SEPOLICY_IGNORE += device/OEM/A/custom.te\n```", "```kt\n...\n# Quick edge case error detection for BOARD_SEPOLICY_REPLACE.\n# Builds the singular path for each replace file.\nsepolicy_replace_paths :=\n$(foreach pf, $(BOARD_SEPOLICY_REPLACE), \\\n  $(if $(filter $(pf), $(BOARD_SEPOLICY_UNION)), \\\n    $(error Ambiguous request for sepolicy $(pf). Appears in both \\\n      BOARD_SEPOLICY_REPLACE and BOARD_SEPOLICY_UNION), \\\n  ) \\\n  $(eval _paths := $(filter-out $(BOARD_SEPOLICY_IGNORE), \\\n  $(wildcard $(addsuffix /$(pf), $(BOARD_SEPOLICY_DIRS))))) \\\n  $(eval _occurrences := $(words $(_paths))) \\\n  $(if $(filter 0,$(_occurrences)), \\\n    $(error No sepolicy file found for $(pf) in $(BOARD_SEPOLICY_DIRS)), \\\n  ) \\\n  $(if $(filter 1, $(_occurrences)), \\\n    $(eval sepolicy_replace_paths += $(_paths)), \\\n    $(error Multiple occurrences of replace file $(pf) in $(_paths)) \\\n  ) \\\n  $(if $(filter 0, $(words $(wildcard $(addsuffix /$(pf), $(LOCAL_PATH))))), \\\n    $(error Specified the sepolicy file $(pf) in BOARD_SEPOLICY_REPLACE, \\\n      but none found in $(LOCAL_PATH)), \\\n  ) \\\n)\n```", "```kt\ndevice/OEM/A/file_contexts\ndevice/OEM/Y/file_contexts\n```", "```kt\n# Builds paths for all requested policy files w.r.t\n# both BOARD_SEPOLICY_REPLACE and BOARD_SEPOLICY_UNION\n# product variables.\n# $(1): the set of policy name paths to build\nbuild_policy = $(foreach type, $(1), \\\n  $(filter-out $(BOARD_SEPOLICY_IGNORE), \\\n    $(foreach expanded_type, $(notdir $(wildcard $(addsuffix /$(type), $(LOCAL_PATH)))), \\\n      $(if $(filter $(expanded_type), $(BOARD_SEPOLICY_REPLACE)), \\\n        $(wildcard $(addsuffix $(expanded_type), $(sort $(dir $(sepolicy_replace_paths))))), \\\n        $(LOCAL_PATH)/$(expanded_type) \\\n      ) \\\n    ) \\\n    $(foreach union_policy, $(wildcard $(addsuffix /$(type), $(BOARD_SEPOLICY_DIRS))), \\\n      $(if $(filter $(notdir $(union_policy)), $(BOARD_SEPOLICY_UNION)), \\\n        $(union_policy), \\\n      ) \\\n    ) \\\n  ) \\\n)\n...\n```", "```kt\nsepolicy-check -s <domain> -t <type> -c <class> -p <permission> -P <policy_file>\n\n```", "```kt\n$ sepolicy-check -s system_app -t system_data_file -c file -p write -P $OUT/root/sepolicy\n\n```", "```kt\n$ sepolicy-analyze -e -P $OUT/root/sepolicy\n\n```", "```kt\n$sepolicy-analyze -D -P $OUT/root/sepolicy\n\n```", "```kt\n$sepolicy-analyze -d -P $OUT/root/sepolicy\n\n```"]