["```kt\npublic class SharedPreferencesExample extends Activity {\nprivate static final String MY_DB = \"my_db\";\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n// INSTANTIATE SHARED PREFERENCES CLASS\nSharedPreferences sp = getSharedPreferences(MY_DB,\nContext.MODE_PRIVATE);\n// LOAD THE EDITOR REMEMBER TO COMMIT CHANGES!\nEditor e = sp.edit();\ne.putString(\"strKey\", \"Hello World\");\ne.putBoolean(\"boolKey\", true);\ne.commit();\nString stringValue = sp.getString(\"strKey\", \"error\");\nboolean booleanValue = sp.getBoolean(\"boolKey\", false);\nLog.i(\"LOG_TAG\", \"String value: \" + stringValue);\nLog.i(\"LOG_TAG \", \"Boolean value: \" + booleanValue);\n}\n}\n\n```", "```kt\ngetSharedPreferences(String mapName, int mapMode)\n\n```", "```kt\nString stringValue = sp.getString(\"strKey\", \"error\");\nboolean booleanValue = sp.getBoolean(\"boolKey\", false);\n\n```", "```kt\npublic class SharedPreferencesExample2 extends Activity {\nprivate static final String MY_DB = \"my_db\";\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nSharedPreferences sp = getSharedPreferences(MY_DB,\nContext.MODE_PRIVATE);\n/**\n* CHECK IF THIS IS USER'S FIRST VISIT\n*/\nboolean hasVisited = sp.getBoolean(\"hasVisited\",\nfalse);\nif (!hasVisited) {\n// ...\n// SHOW SPLASH ACTIVITY, LOGIN ACTIVITY, ETC\n// ...\n// DON'T FORGET TO COMMIT THE CHANGE!\nEditor e = sp.edit();\ne.putBoolean(\"hasVisited\", true);\ne.commit();\n}\n}\n}\n\n```", "```kt\n/**\n* CHECK LAST UPDATE TIME\n*/\nlong lastUpdateTime = sp.getLong(\"lastUpdateKey\", 0L);\nlong timeElapsed = System.currentTimeMillis() -\nlastUpdateTime;\n// YOUR UPDATE FREQUENCY HERE\nfinal long UPDATE_FREQ = 1000 * 60 * 60 * 24;\nif (timeElapsed > UPDATE_FREQ) {\n// ...\n// PERFORM NECESSARY UPDATES\n// ...\n}\n// STORE LATEST UPDATE TIME\nEditor e = sp.edit();\ne.putLong(\"lastUpdateKey\", System.currentTimeMillis());\ne.commit();\n\n```", "```kt\n/**\n* CACHE USER NAME AS STRING\n*/\n// TYPICALLY YOU WILL HAVE AN EDIT TEXT VIEW\n// WHERE THE USER ENTERS THEIR USERNAME\nEditText userNameLoginText = (EditText)\nfindViewById(R.id.login_editText);\nString userName =\nuserNameLoginText.getText().toString();\nEditor e = sp.edit();\ne.putString(\"userNameCache\", userName);\ne.commit();\n\n```", "```kt\n/**\n* REMEBERING A CERTAIN STATE\n*/\nboolean isSilentMode = sp.getBoolean(\"isSilentRinger\",\nfalse);\nif (isSilentMode) {\n// ...\n// TURN OFF APPLICATION\n// ...\n}\n\n```", "```kt\n/**\n* CACHING A LOCATION\n*/\n// INSTANTIATE LOCATION MANAGER\nLocationManager locationManager = (LocationManager)\nthis.getSystemService(Context.LOCATION_SERVICE);\n// ...\n// IGNORE LOCATION LISTENERS FOR NOW\n// ...\nLocation lastKnownLocation =\nlocationManager.getLastKnownLocation\n(LocationManager.NETWORK_PROVIDER);\nfloat lat = (float) lastKnownLocation.getLatitude();\nfloat lon = (float) lastKnownLocation.getLongitude();\nEditor e = sp.edit();\ne.putFloat(\"latitudeCache\", lat);\ne.putFloat(\"longitudeCache\", lon);\ne.commit();\n\n```", "```kt\nSet<String> values = new HashSet<String>();\nvalues.add(\"Hello\");\nvalues.add(\"World\");\nEditor e = sp.edit();\ne.putStringSet(\"strSetKey\", values);\ne.commit();\nSet<String> ret = sp.getStringSet(values, new HashSet<String>());\nfor(String r : ret) {\nLog.i(\"SharedPreferencesExample\", \"Retrieved vals: \" + r);\n}\n\n```", "```kt\npublic class InternalStorageExample extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n// THE NAME OF THE FILE\nString fileName = \"my_file.txt\";\n// STRING TO BE WRITTEN TO FILE\nString msg = \"Hello World.\";\ntry {\n// CREATE THE FILE AND WRITE\nFileOutputStream fos = openFileOutput(fileName,\nContext.MODE_PRIVATE);\nfos.write(msg.getBytes());\nfos.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n\n```", "```kt\npublic class InternalStorageExample2 extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n// THE NAME OF THE FILE\nString fileName = \"my_file.txt\";\ntry {\n// OPEN FILE INPUT STREAM THIS TIME\nFileInputStream fis = openFileInput(fileName);\nInputStreamReader isr = new InputStreamReader(fis);\n// READ STRING OF UNKNOWN LENGTH\nStringBuilder sb = new StringBuilder();\nchar[] inputBuffer = new char[2048];\nint l;\n// FILL BUFFER WITH DATA\nwhile ((l = isr.read(inputBuffer)) != -1) {\nsb.append(inputBuffer, 0, l);\n}\n// CONVERT BYTES TO STRING\nString readString = sb.toString();\nLog.i(\"LOG_TAG\", \"Read string: \" + readString);\n// CAN ALSO DELETE THE FILE\ndeleteFile(fileName);\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n\n```", "```kt\npublic class ExternalStorageExample extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nString fileName = \"my_file.txt\";\nString msg = \"Hello World.\";\nboolean externalAvailable = false;\nboolean externalWriteable = false;\nString state = Environment.getExternalStorageState();\nif (state.equals(Environment.MEDIA_MOUNTED)) {\n// HERE MEDIA IS BOTH AVAILABLE AND WRITEABLE\nexternalAvailable = true;\nexternalWriteable = true;\n} else if\n(state.equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {\n// HERE SD CARD IS AVAILABLE BUT NOT WRITEABLE\nexternalAvailable = true;\n} else {\n// HERE FAILURE COULD BE RESULT OF MANY SITUATIONS\n// NO OP\nexternal storage methodsabout}\nif (externalAvailable && externalWriteable) {\n// FOR API LEVEL 7 AND BELOW\n// RETRIEVE SD CARD DIRECTORY\nFile r = Environment.getExternalStorageDirectory();\nFile f = new File(r, fileName);\ntry {\n// NOTE DIFFERENT FROM INTERNAL STORAGE WRITER\nFileWriter fWriter = new FileWriter(f);\nBufferedWriter out = new BufferedWriter(fWriter);\nout.write(msg);\nout.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n} else {\nLog.e(\"LOG_TAG\", \"SD CARD UNAVAILABLE\");\n}\n}\n}\n\n```", "```kt\ngetExternalFilesDir(String type)\ngetExternalStoragePublicDirectory(String type)\n\n```", "```kt\nDIRECTORY_ALARMS\nDIRECTORY_DCIM\nDIRECTORY_DOWNLOADS\nDIRECTORY_MOVIES\nDIRECTORY_MUSIC\nDIRECTORY_NOTIFICATIONS\nDIRECTORY_PICTURES\nDIRECTORY_PODCASTS\nDIRECTORY_RINGTONES\n\n```", "```kt\npublic class SQLiteHelper extends SQLiteOpenHelper {\nprivate static final String DATABASE_NAME = \"my_database.db\";\n// TOGGLE THIS NUMBER FOR UPDATING TABLES AND DATABASE\nprivate static final int DATABASE_VERSION = 1;\n// NAME OF TABLE YOU WISH TO CREATE\npublic static final String TABLE_NAME = \"my_table\";\n// SOME SAMPLE FIELDS\npublic static final String UID = \"_id\";\npublic static final String NAME = \"name\";\nSQLiteHelper(Context context) {\nsuper(context, DATABASE_NAME, null, DATABASE_VERSION);\n}\n@Override\npublic void onCreate(SQLiteDatabase db) {\ndb.execSQL(\"CREATE TABLE \" + TABLE_NAME + \" (\" + UID + \"\nINTEGER PRIMARY KEY AUTOINCREMENT,\" + NAME\n+ \" VARCHAR(255));\");\n}\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion,\nint newVersion) {\nLog.w(\"LOG_TAG\", \"Upgrading database from version \" +\noldVersion + \" to \" + newVersion + \",\nwhich will destroy all old data\");\n// KILL PREVIOUS TABLE IF UPGRADED\ndb.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_NAME);\n// CREATE NEW INSTANCE OF TABLE\nonCreate(db);\n}\n}\n\n```", "```kt\nCREATE TABLE my_table (_id INTEGER PRIMARY KEY AUTOINCREMENT,\nname VARCHAR(255));\n\n```", "```kt\npublic class SQLiteExample extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n// INIT OUR SQLITE HELPER\nSQLiteHelper sqh = new SQLiteHelper(this);\n// RETRIEVE A READABLE AND WRITEABLE DATABASE\nSQLiteDatabase sqdb = sqh.getWritableDatabase();\n// METHOD #1: INSERT USING CONTENTVALUE CLASS\nContentValues cv = new ContentValues();\ncv.put(SQLiteHelper.NAME, \"jason wei\");\n// CALL INSERT METHOD\nsqdb.insert(SQLiteHelper.TABLE_NAME, SQLiteHelper.NAME,\ncv);\n// METHOD #2: INSERT USING SQL QUERY\nString insertQuery = \"INSERT INTO \" +\nSQLiteHelper.TABLE_NAME +\n\" (\" + SQLiteHelper.NAME + \") VALUES ('jwei')\";\nsqdb.execSQL(insertQuery);\n// METHOD #1: QUERY USING WRAPPER METHOD\nCursor c = sqdb.query(SQLiteHelper.TABLE_NAME,\nnew String[] { SQLiteHelper.UID, SQLiteHelper.NAME },\nnull, null, null, null, null);\nwhile (c.moveToNext()) {\n// GET COLUMN INDICES + VALUES OF THOSE COLUMNS\nint id = c.getInt(c.getColumnIndex(SQLiteHelper.UID));\nString name =\nc.getString(c.getColumnIndex(SQLiteHelper.NAME));\nLog.i(\"LOG_TAG\", \"ROW \" + id + \" HAS NAME \" + name);\n}\nc.close();\n// METHOD #2: QUERY USING SQL SELECT QUERY\nString query = \"SELECT \" + SQLiteHelper.UID + \", \" +\nSQLiteHelper.NAME + \" FROM \" + SQLiteHelper.TABLE_NAME;\nCursor c2 = sqdb.rawQuery(query, null);\nwhile (c2.moveToNext()) {\nint id =\nc2.getInt(c2.getColumnIndex(SQLiteHelper.UID));\nString name =\nc2.getString(c2.getColumnIndex(SQLiteHelper.NAME));\nLog.i(\"LOG_TAG\", \"ROW \" + id + \" HAS NAME \" + name);\n}\nc2.close();\n// CLOSE DATABASE CONNECTIONS\nsqdb.close();\nsqh.close();\n}\n}\n\n```", "```kt\nwhile (c.moveToNext()) {\n// GET COLUMN INDICES + VALUES OF THOSE COLUMNS\nint id = c.getInt(c.getColumnIndex(SQLiteHelper.UID));\nString name = c.getString(c.getColumnIndex(SQLiteHelper.NAME));\nLog.i(\"LOG_TAG\", \"ROW \" + id + \" HAS NAME \" + name);\n}\n\n```"]