["```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout \n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\" >\n    <!-- we put two buttons to the user interface, one for triggering insert and one for listing stream items-->\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" >\n        <Button\n            android:id=\"@+id/buttonInsert\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Insert\" />\n\n        <Button\n            android:id=\"@+id/buttonList\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"List\" />\n    </LinearLayout>\n <!-- In order to display stream items, we put three TextViews to the layout-->\n    <TextView\n        android:id=\"@+id/txt1\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textAppearance=\"?android:attr/textAppearanceLarge\"/>\n    <TextView\n        android:id=\"@+id/txt2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n    <TextView\n        android:id=\"@+id/txt3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n</LinearLayout>\n```", "```kt\npackage com.chapter3;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Calendar;\nimport android.app.Activity;\nimport android.content.ContentResolver;\nimport android.content.ContentUris;\nimport android.content.ContentValues;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.ContactsContract;\nimport android.provider.ContactsContract.CommonDataKinds.Email;\nimport android.provider.ContactsContract.CommonDataKinds.Phone;\nimport android.provider.ContactsContract.CommonDataKinds.StructuredName;\nimport android.provider.ContactsContract.Data;\nimport android.provider.ContactsContract.RawContacts;\nimport android.provider.ContactsContract.StreamItemPhotos;\nimport android.provider.ContactsContract.StreamItems;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class Chapter3_1Activity extends Activity implements OnClickListener {\n\n  Button insertButton;\n  Button listButton;\n  Button chooseButton;\n  TextView txt1;\n  TextView txt2;\n  TextView txt3;\n  long rawContactId;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n //initialize UI components\n    insertButton = (Button) this.findViewById(R.id.buttonInsert);\n    insertButton.setOnClickListener(this);\n    listButton = (Button) this.findViewById(R.id.buttonList);\n    listButton.setOnClickListener(this);\n    txt1 = (TextView) this.findViewById(R.id.txt1);\n    txt2 = (TextView) this.findViewById(R.id.txt2);\n    txt3 = (TextView) this.findViewById(R.id.txt3);\n\n  }\n       @Override\n  public void onClick(View v) {\n // when the insert button is clicked, addContact method // is called\n    if (v == insertButton)\n      this.rawContactId = addContact(\"Murat AydÄ±n\", \"9999999\",\n          \"maydin@gmail.com\", \"Murat\", \"com.google\");\n    else if (v == listButton) {\n      getStreams(this.rawContactId);\n    } \n  }\n\n}\n```", "```kt\npublic long addContact(String name, String phone, String email,\n      String accountName, String accountType) {\n // firstly a raw contact is created with the // addRawContact method\n    Uri rawContactUri = addRawContact(accountName, accountType);\n\n    if (rawContactUri != null) {\n      long rawContactId = ContentUris.parseId(rawContactUri);\n // we use the ID of the created raw contact in // creating name, email, phone number and stream // items\n      addName(name, rawContactId);\n\n      addPhoneNumber(phone, rawContactId);\n\n      addEmail(email, rawContactId);\n\n addContactStreamItem(rawContactId, accountName,\n accountType, \"Social Media Update 1\");\n addContactStreamItem(rawContactId, accountName,\n accountType, \"Social Media Update 2\");\n addContactStreamItem(rawContactId, accountName,\n accountType, \"Social Media Update 3\");\n\n      return rawContactId;\n    }\n    return 0;\n  }\n```", "```kt\npublic Uri addRawContact(String accountName, String accountType) {\n             // we use account name and type to create a raw contact\n    ContentResolver cr = getContentResolver();\n    ContentValues values = new ContentValues();\n values.put(RawContacts.ACCOUNT_TYPE, accountType);\n values.put(RawContacts.ACCOUNT_NAME, accountName);\n    Uri rawContactUri = cr.insert(RawContacts.CONTENT_URI, values);\n    return rawContactUri;\n  }\n```", "```kt\n // This method is for creating email data\n  private void addEmail(String email, long rawContactId) {\n    ContentResolver cr = getContentResolver();\n    ContentValues values = new ContentValues();\n    values.put(Email.ADDRESS, email);\n    values.put(Email.TYPE, Email.TYPE_OTHER);\n    values.put(Email.MIMETYPE, Email.CONTENT_ITEM_TYPE);\n    values.put(Data.RAW_CONTACT_ID, rawContactId);\n    cr.insert(Data.CONTENT_URI, values);\n  }\n //This method is for creating phone number data\n  private void addPhoneNumber(String phone, long rawContactId) {\n\n    ContentResolver cr = getContentResolver();\n    ContentValues values = new ContentValues();\n    values.put(Phone.NUMBER, phone);\n    values.put(Phone.TYPE, Phone.TYPE_OTHER);\n    values.put(Phone.MIMETYPE, Phone.CONTENT_ITEM_TYPE);\n    values.put(Data.RAW_CONTACT_ID, rawContactId);\n    cr.insert(Data.CONTENT_URI, values);\n  }\n       //This method is for adding name data\n  private void addName(String name, long rawContactId) {\n    ContentValues values = new ContentValues();\n    values.put(Data.RAW_CONTACT_ID, rawContactId);\n    values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);\n    values.put(StructuredName.DISPLAY_NAME, name);\n    getContentResolver().insert(Data.CONTENT_URI, values);\n  }\n```", "```kt\n //StreamItems are created in this method\n  private long addContactStreamItem(long rawContactId, String accountName,\n String accountType, String text) {\n // Raw contact ID, account name and type are required // fields for creating a stream item.\n\n ContentResolver cr = getContentResolver();\n ContentValues values = new ContentValues();\n values.put(StreamItems.RAW_CONTACT_ID, rawContactId);\n values.put(StreamItems.TEXT, text);\n values.put(StreamItems.TIMESTAMP, Calendar.getInstance().getTime()\n .getTime());\n Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME,\n accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE,\n accountType);\n Uri streamItemUri = cr.insert(builder.build(), values);\n long streamItemId = ContentUris.parseId(streamItemUri);\n\n addContactStreamPhoto(streamItemId, accountName, accountType);\n\n return streamItemId;\n }\n\n```", "```kt\n //This method is used for creating a stream photo for a stream item\n private long addContactStreamPhoto(long streamItemId,String accountName,\n String accountType) {\n // provide stream item ID, sort index, account name and type for creating a stream photo\n ContentValues values = new ContentValues();\n values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);\n values.put(StreamItemPhotos.SORT_INDEX, 1);\n values.put(StreamItemPhotos.PHOTO, loadPhotoFromResource(R.drawable.ic_launcher));\n Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon();\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n Uri photoUri = getContentResolver().insert(builder.build(), values);\n long photoId = ContentUris.parseId(photoUri);\n return photoId;\n }\n //This method is used for creating a photo in binary\n  private byte[] loadPhotoFromResource(int resourceId) {\n        InputStream is = getResources().openRawResource(resourceId);\n        return readInputStream(is);\n    }\n  private byte[] readInputStream(InputStream is) {\n        try {\n            byte[] buffer = new byte[is.available()];\n            is.read(buffer);\n            is.close();\n            return buffer;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n```", "```kt\n public void getStreams(long rawContactId) {\n long contactId = getContactId(rawContactId);\n ContentResolver cr = getContentResolver();\n Cursor pCur = cr.query(ContactsContract.StreamItems.CONTENT_URI,\n null,\n ContactsContract.StreamItems.CONTACT_ID + \" = ?\",\n new String[] { String.valueOf(contactId) }, null);\n int i = 0;\n if (pCur.getCount() > 0) {\n while (pCur.moveToNext()) {\n String text = pCur.getString(pCur\n .getColumnIndex(ContactsContract.StreamItems.TEXT));\n if (i == 0)\n this.txt1.setText(text);\n else if (i == 1)\n this.txt2.setText(text);\n else if (i == 2)\n this.txt3.setText(text);\n i++;\n\n }\n }\n pCur.close();\n }\n  public long getContactId(long rawContactId) {\n    Cursor cur = null;\n    try {\n      cur = this.getContentResolver().query(\n          ContactsContract.RawContacts.CONTENT_URI,\n          new String[] { \n          ContactsContract.RawContacts.CONTACT_ID },\n          ContactsContract.RawContacts._ID + \"=\" + rawContactId, null, null);\n      if (cur.moveToFirst()) {\n        return cur\n            .getLong(cur\n                .getColumnIndex(ContactsContract.RawContacts.CONTACT_ID));\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      if (cur != null) {\n        cur.close();\n      }\n    }\n    return -1l;\n  }\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.chapter3\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n\n <uses-sdk android:minSdkVersion=\"15\" />\n <uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n <uses-permission android:name=\"android.permission.READ_SOCIAL_STREAM\" />\n <uses-permission android:name=\"android.permission.WRITE_SOCIAL_STREAM\" />\n <uses-permission android:name=\"android.permission.WRITE_CONTACTS\" />\n\n    <application\n        android:icon=\"@drawable/ic_launcher\"\n        android:label=\"@string/app_name\" >\n        <activity\n            android:name=\".Chapter3_1Activity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```"]