["```kt\n            abstract class Story { \n                public String source; \n\n                // Template skeleton algorithm \n                public void publish(Context context) { \n                    init(context); \n                    setDate(context); \n                    setTitle(context); \n                    setImage(context); \n                    setText(context); \n                } \n\n                // Placeholder methods \n                protected abstract void init(Context context); \n\n                protected abstract void setTitle(Context context); \n\n                protected abstract void setImage(Context context); \n\n                protected abstract void setText(Context context); \n\n                // Calculate date as a common property \n                protected void setDate(Context context) { \n                    Calendar calendar = new GregorianCalendar(); \n                    SimpleDateFormat format = \n                         new SimpleDateFormat(\"MMMM d\"); \n\n                    format.setTimeZone(calendar.getTimeZone()); \n\n                    TextView textDate = (TextView) \n                        ((Activity) context) \n                        .findViewById(R.id.text_date); \n                    textDate.setText(format.format(calendar.getTime())); \n                } \n            } \n\n    ```", "```kt\n            public class News extends Story { \n                TextView textHeadline; \n                TextView textView; \n                ImageView imageView; \n\n                @Override \n                protected void init(Context context) { \n                    source = \"NEWS\"; \n                    textHeadline = (TextView) ((Activity) context).findViewById(R.id.text_headline); \n                    textView = (TextView) ((Activity) context).findViewById(R.id.text_view); \n                    imageView = (ImageView) ((Activity) context).findViewById(R.id.image_view); \n                } \n\n                @Override \n                protected void setTitle(Context context) { \n                    ((Activity) context).setTitle(context.getString(R.string.news_title)); \n                } \n\n                @Override \n                protected void setImage(Context context) { \n                    imageView.setImageResource(R.drawable.news); \n                } \n\n                @Override \n                protected void setText(Context context) { \n                    textHeadline.setText(R.string.news_headline); \n                    textView.setText(R.string.news_content); \n                } \n            } \n\n    ```", "```kt\n            public class Sport extends Story { \n                ... \n\n                @Override \n                protected void init(Context context) { \n                    source = \"NEWS\"; \n                    ... \n                } \n\n                @Override \n                     protected void setTitle(Context context) { \n                    ((Activity) context).setTitle(context.getString(R.string.sport_title)); \n                } \n\n                @Override \n                protected void setImage(Context context) { \n                    imageView.setImageResource(R.drawable.sport); \n                } \n\n                @Override \n                protected void setText(Context context) { \n                    textHeadline.setText(R.string.sport_headline); \n                    textView.setText(R.string.sport_content); \n                } \n            } \n\n    ```", "```kt\n    public class MainActivity \n        extends AppCompatActivity \n        implements View.OnClickListener { \n\n        String source = \"NEWS\"; \n        Story story = new News(); \n\n        @Override \n        protected void onCreate(Bundle savedInstanceState) { \n            ... \n\n            Button button = (Button) \n                findViewById(R.id.action_change); \n            button.setOnClickListener(this); \n\n            story.publish(this); \n        } \n\n        @Override \n        public void onClick(View view) { \n\n            if (story.source == \"NEWS\") { \n                story = new Sport(); \n\n            } else { \n                story = new News(); \n            } \n\n            story.publish(this); \n        } \n    } \n\n    ```", "```kt\n    abstract class ReadingMaterial { \n\n        // Generalization \n        private static final String DEBUG_TAG = \"tag\"; \n        Document doc; \n\n        // Standardized skeleton algorithm \n        public void fetchDocument() { \n            init(); \n            title(); \n            genre(); \n            id(); \n            date(); \n            edition(); \n        } \n\n        // placeholder functions \n        protected abstract void id(); \n\n        protected abstract void date(); \n\n        // Common functions \n        private void init() { \n            doc = new Document(); \n        } \n\n        private void title() { \n            Log.d(DEBUG_TAG,\"Title : \"+doc.title); \n        } \n\n        private void genre() { \n            Log.d(DEBUG_TAG, doc.genre); \n        } \n\n        protected void edition() { \n            Log.d(DEBUG_TAG, doc.edition); \n        } \n    } \n\n    ```", "```kt\n    abstract class Book extends ReadingMaterial { \n\n        // Specialization \n        private static final String DEBUG_TAG = \"tag\"; \n\n        // Override implemented base method \n        @Override \n        public void fetchDocument() { \n            super.fetchDocument(); \n            author(); \n            rating(); \n        } \n\n        // Implement placeholder methods \n        @Override \n        protected void id() { \n            Log.d(DEBUG_TAG, \"ISBN : \" + doc.id); \n        } \n\n        @Override \n        protected void date() { \n            Log.d(DEBUG_TAG, doc.date); \n        } \n\n        private void author() { \n            Log.d(DEBUG_TAG, doc.author); \n        } \n\n        // Include specialization placeholder methods \n        protected abstract void rating(); \n    } \n\n    ```", "```kt\n    abstract class Magazine extends ReadingMaterial { \n\n        //Specialization \n        private static final String DEBUG_TAG = \"tag\"; \n\n        // Implement placeholder methods \n        @Override \n        protected void id() { \n            Log.d(DEBUG_TAG, \"ISSN : \" + doc.id); \n        } \n\n        @Override \n        protected void edition() { \n            Log.d(DEBUG_TAG, doc.period); \n        } \n\n        // Pass placeholder on to realization \n        protected abstract void date(); \n    } \n\n    ```", "```kt\n    public class SelectedBook extends Book { \n\n        // Realization \n        private static final String DEBUG_TAG = \"tag\"; \n\n        // Implement specialization placeholders \n        @Override \n        protected void rating() { \n            Log.d(DEBUG_TAG, \"4 stars\"); \n        } \n    } \n\n    ```", "```kt\n    public class SelectedMagazine extends Magazine { \n\n        // Realization \n        private static final String DEBUG_TAG = \"tag\"; \n\n        // Implement placeholder method only once instance created \n        @Override \n        protected void date() { \n            Calendar calendar = new GregorianCalendar(); \n            SimpleDateFormat format = new SimpleDateFormat(\"MM-d-yyyy\"); \n            format.setTimeZone(calendar.getTimeZone()); \n            Log.d(DEBUG_TAG,format.format(calendar.getTime())); \n        } \n    } \n\n    ```", "```kt\n    public class Document { \n        String title; \n        String genre; \n        String id; \n        String date; \n        String author; \n        String edition; \n        String period; \n\n        public Document() { \n            this.title = \"The Art of Sandwiches\"; \n            this.genre = \"Non fiction\"; \n            this.id = \"1-23456-789-0\"; \n            this.date = \"06-19-1993\"; \n            this.author = \"J Bloggs\"; \n            this.edition = \"2nd edition\"; \n            this.period = \"Weekly\"; \n        } \n    } \n\n    ```", "```kt\n// Print book \nReadingMaterial document = new SelectedBook(); \ndocument.fetchDocument(); \n\n// Print magazine \nReadingMaterial document = new SelectedMagazine(); \ndocument.fetchDocument(); \n\n```", "```kt\nD/tag: The Art of Sandwiches\nD/tag: Non fiction\nD/tag: ISBN : 1-23456-789-0\nD/tag: 06-19-1963\nD/tag: 2nd edition\nD/tag: J Bloggs\nD/tag: 4 stars\nD/tag: Sandwich Weekly\nD/tag: Healthy Living\nD/tag: ISSN : 1-23456-789-0\nD/tag: 09-3-2016\nD/tag: Weekly\n\n```", "```kt\n    public interface Strategy { \n\n        String reportWeather(); \n    } \n\n    ```", "```kt\n    public class London implements Strategy { \n\n        @Override \n        public String reportWeather() { \n            return \"Constant drizzle\"; \n        } \n    } \n\n    ```", "```kt\n    public class Location { \n        private Strategy strategy; \n\n        public Location(Strategy strategy) { \n            this.strategy = strategy; \n        } \n\n        public void executeStrategy(Context context) { \n            TextView textView=(TextView) \n                    ((Activity)context) \n                    .findViewById(R.id.text_view); \n            textView.setText(strategy.reportWeather()); \n        } \n    } \n\n    ```", "```kt\n    Location context; \n    String location = \"London\"; \n\n    switch (location) { \n        case \"London\": \n            context = new Location(new London()); \n            break; \n        case \"Glasgow\": \n            context = new Location(new Glasgow()); \n            break; \n        default: \n            context = new Location(new Paris()); \n            break; \n    } \n\n    context.executeStrategy(this); \n\n    ```", "```kt\n    public interface Item { \n\n        int accept(Visitor visitor); \n    } \n\n    ```", "```kt\n    public class CannedFood implements Item { \n        private int cost; \n        private String name; \n\n        public CannedFood(int cost, String name) { \n            this.cost = cost; \n            this.name = name; \n        } \n\n        public int getCost() { \n            return cost; \n        } \n\n        public String getName() { \n            return name; \n        } \n\n        @Override \n        public int accept(Visitor visitor) { \n            return visitor.visit(this); \n        } \n    } \n\n    ```", "```kt\n    public class FreshFood implements Item { \n        private int costPerKilo; \n        private int weight; \n        private String name; \n\n        public FreshFood(int cost, int weight, String name) { \n            this.costPerKilo = cost; \n            this.weight = weight; \n            this.name = name; \n        } \n\n        public int getCostPerKilo() { \n            return costPerKilo; \n        } \n\n        public int getWeight() { \n            return weight; \n        } \n\n        public String getName() { \n            return name; \n        } \n\n        @Override \n        public int accept(Visitor visitor) { \n            return visitor.visit(this); \n        } \n    } \n\n    ```", "```kt\n    public interface Visitor { \n\n        int visit(FreshFood freshFood); \n        int visit(CannedFood cannedFood); \n    } \n\n    ```", "```kt\n    public class Checkout implements Visitor { \n        private static final String DEBUG_TAG = \"tag\"; \n\n        @Override \n        public int visit(CannedFood cannedFood) { \n            int cost = cannedFood.getCost(); \n            String name = cannedFood.getName(); \n            Log.d(DEBUG_TAG, \"Canned \" + name + \" : \" + cost + \"c\"); \n            return cost; \n        } \n\n        @Override \n        public int visit(FreshFood freshFood) { \n            int cost = freshFood.getCostPerKilo() * freshFood.getWeight(); \n            String name = freshFood.getName(); \n            Log.d(DEBUG_TAG, \"Fresh \" + name + \" : \" + cost + \"c\"); \n            return cost; \n        } \n    } \n\n    ```", "```kt\n    public class MainActivity extends AppCompatActivity { \n        private static final String DEBUG_TAG = \"tag\"; \n\n        private int totalCost(Item[] items) { \n            Visitor visitor = new Checkout(); \n            int total = 0; \n            for (Item item : items) { \n                System.out.println(); \n                total += item.accept(visitor); \n            } \n            return total; \n        } \n\n        @Override \n        protected void onCreate(Bundle savedInstanceState) { \n            super.onCreate(savedInstanceState); \n            setContentView(R.layout.activity_main); \n\n            Item[] items = new Item[]{ \n                    new CannedFood(65, \"Tomato soup\"), \n                    new FreshFood(60, 2, \"Bananas\"), \n                    new CannedFood(45, \"Baked beans\"), \n                    new FreshFood(45, 3, \"Apples\")}; \n\n            int total = totalCost(items); \n            Log.d(DEBUG_TAG, \"Total cost : \" + total + \"c\"); \n        } \n    } \n\n    ```", "```kt\n    D/tag: Canned Tomato soup : 65c\n    D/tag: Fresh Bananas : 120c\n    D/tag: Canned Baked beans : 45c\n    D/tag: Fresh Apples : 135c\n    D/tag: Total cost : 365\n\n    ```", "```kt\n    public interface Visitor { \n\n        int visit(FreshFood freshFood); \n        int visit(CannedFood cannedFood); \n\n        int visit(SpecialOffer specialOffer); \n    } \n\n    ```", "```kt\n    public class SpecialOffer implements Item { \n        private int baseCost; \n        private int quantity; \n        private String name; \n\n        public SpecialOffer(int cost,  \n                            int quantity,  \n                            String name) { \n            this.baseCost = cost; \n            this.quantity = quantity; \n            this.name = name; \n        } \n\n        public int getBaseCost() { \n            return baseCost; \n        } \n\n        public int getQuantity() { \n            return quantity; \n        } \n\n        public String getName() { \n            return name; \n        } \n\n        @Override \n        public int accept(Visitor visitor) { \n            return visitor.visit(this); \n        } \n    } \n\n    ```", "```kt\n    @Override \n    public int visit(SpecialOffer specialOffer) { \n\n        String name = specialOffer.getName(); \n        int cost = specialOffer.getBaseCost(); \n        int number = specialOffer.getQuantity(); \n        cost *= number; \n\n        if (number > 1) { \n            cost = cost / 2; \n        } \n\n        Log.d(DEBUG_TAG, \"Special offer\" + name + \" : \" + cost + \"c\"); \n        return cost; \n    } \n\n    ```", "```kt\n    public interface State { \n\n        void execute(Context context, String input); \n    } \n\n    ```", "```kt\n    public class Locked implements State { \n\n        @Override \n        public void execute(Context context, String input) { \n\n            if (Objects.equals(input, \"coin\")) { \n                Output.setOutput(\"Please push\"); \n                context.setState(new Unlocked()); \n\n            } else { \n                Output.setOutput(\"Insert coin\"); \n            } \n        } \n    } \n\n    ```", "```kt\n    public class Unlocked implements State { \n\n        @Override \n        public void execute(Context context, String input) { \n\n            if (Objects.equals(input, \"coin\")) { \n                Output.setOutput(\"You have already paid\"); \n\n            } else { \n                Output.setOutput(\"Thank you\"); \n                context.setState(new Locked()); \n            } \n        } \n    } \n\n    ```", "```kt\n    public class Output { \n        private static String output; \n\n        public static String getOutput() { \n            return output; \n        } \n\n        public static void setOutput(String o) { \n            output = o; \n        } \n    } \n\n    ```", "```kt\n    public class Context { \n        private State state; \n\n        public Context() { \n            setState(new Locked()); \n        } \n\n        public void setState(State state) { \n            this.state = state; \n        } \n\n        public void execute(String input) { \n            state.execute(this, input); \n        } \n    } \n\n    ```", "```kt\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener { \n        TextView textView; \n        Button buttonCoin; \n        Button buttonPush; \n\n        Context context = new Context(); \n\n        @Override \n        protected void onCreate(Bundle savedInstanceState) { \n            super.onCreate(savedInstanceState); \n            setContentView(R.layout.activity_main); \n\n            textView = (TextView) findViewById(R.id.text_view); \n\n            buttonCoin = (Button) findViewById(R.id.action_coin); \n            buttonPush = (Button) findViewById(R.id.action_push); \n            buttonCoin.setOnClickListener(this); \n            buttonPush.setOnClickListener(this); \n        } \n\n        @Override \n        public void onClick(View view) { \n\n            switch (view.getId()) { \n\n                case R.id.action_coin: \n                    context.execute(\"coin\"); \n                    break; \n\n                case R.id.action_push: \n                    context.execute(\"push\"); \n                    break; \n            } \n\n            textView.setText(Output.getOutput()); \n        } \n    } \n\n    ```"]