- en: Chapter 1. Getting Started with Robotium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automated testing helps us to maintain high software quality and provides a
    facility to capture if any code changes affect the actual use case. This chapter
    introduces the Robotium framework, its different features, and its benefits in
    the world of automated testing. By the end of this chapter, we will have a complete
    setup of the Android Environment in Eclipse IDE to get started with Robotium.
  prefs: []
  type: TYPE_NORMAL
- en: Robotium framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Robotium is an open source automation testing framework that is used to write
    a robust and powerful black box for Android applications (the emphasis is mostly
    on black box test cases). It fully supports testing for native and hybrid applications.
    Native apps are live on the device, that is, designed for a specific platform
    and can be installed from the Google Play Store, whereas Hybrid apps are partly
    native and partly web apps. These can also be installed from the app store, but
    require the HTML to be rendered in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Robotium is mostly used to automate UI test cases and internally uses run-time
    binding to **Graphical User Interface** (**GUI**) components.
  prefs: []
  type: TYPE_NORMAL
- en: Robotium is released under the Apache License 2.0\. It is free to download and
    can be easily used by individuals and enterprises and is built on Java and JUnit
    3\. It will be more appropriate to call Robotium an extension of the Android Test
    Unit Framework, available at [http://developer.android.com/tools/testing/testing_android.html](http://developer.android.com/tools/testing/testing_android.html).
    Robotium can also work without the application, under the test's source code.
  prefs: []
  type: TYPE_NORMAL
- en: The test cases written using Robotium can either be executed on the Android
    Emulator (**Android Virtual Device** (**AVD**))—we will see how to create an AVD
    during installation in the following section—or on a real Android device. Developers
    can write function, system, and acceptance test scenarios across multiple activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is currently the world''s leading Automation Testing Framework, and many
    open source developers are contributing to introduce more and more exciting features
    in subsequent releases. The following screenshot is of the git repository website
    for the Robotium project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Robotium framework](img/8010OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As Robotium is an open source project, anyone can contribute for the purpose
    of development and help in enhancing the framework with many more features. The
    Robotium source code is maintained at GitHub and can be accessed using the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jayway/robotium](https://github.com/jayway/robotium)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You just need to fork the project. Make all your changes in a clone project
    and click on **Pull Request** on your repository to tell core team members which
    changes to bring in. If you are new to the git environment, you can refer to the
    GitHub tutorial at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.github.com/](https://help.github.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Robotium is like Selenium but for Android. This project was started in January
    2010 by *Renas Reda*. He is the founder and main developer for Robotium. The project
    initiated with v1.0 and continues to be followed up with new releases due to new
    requirements. It has support for Android features such as activities, toasts,
    menus, context menus, web views, and remote controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![Robotium framework](img/8010OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's see most of the Robotium features and benefits for Android test case developers.
  prefs: []
  type: TYPE_NORMAL
- en: Features and benefits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Automated testing using Robotium has many features and benefits. The triangularization
    workflow diagram between the user, Robotium, and the Android device clearly explains
    use cases between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Features and benefits](img/8010OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The features and benefits of Robotium are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Robotium helps us to quickly write powerful test cases with minimal knowledge
    of the application under test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium offers APIs to directly interact with UI controls within the Android
    application such as EditText, TextView, and Button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium officially supports Android 1.6 and above versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android platform is not modified by Robotium.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Robotium test can also be executed using command prompt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium can be integrated smoothly with Maven or Ant. This helps to add Robotium
    to your project's build automation process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screenshots can be captured in Robotium (an example screenshot is shown as follows):![Features
    and benefits](img/8010OS_01_04.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test application project and the application project run on the same JVM,
    that is, **Dalvik Virtual Machine** (**DVM**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's possible to run Robotium without a source code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium can work with other code coverage measurement tools, such as Cobertura
    and Emma.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium can detect the messages that are shown on the screen (Toasts).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium supports Android features such as activities, menu, and context menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium automated tests can be implemented quickly. Robotium is built on JUnit,
    because of which it inherits all JUnit's features. The Robotium framework automatically
    handles multiple activities in an Android application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium test cases are prominently readable, in comparison to standard instrumentation
    tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrolling activity is automatically handled by the Robotium framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recent versions of Robotium support hybrid applications. Hybrid applications
    use WebViews to present the HTML and JavaScript files in full screen, using the
    native browser rendering engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an Android environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can set up an Android environment in Eclipse, which is the primary step
    to use Robotium for creating a test project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before the actual setup of the Android environment for Robotium, you will need
    to check all the following required elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Java Development Kit** (**JDK**) must be installed (you can install it
    from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse IDE must be installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard Eclipse IDE ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse IDE with built-in **Android Developer Tools** (**ADT**) ([http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Robotium for Android Starter, we will use Standard Eclipse IDE, which is
    mostly used by tech enthusiasts and developers across industries. Eclipse IDE
    with built-in ADT has an Android plugin and there is no need to set up the Android
    SDK. Only one of the two Eclipse IDEs is needed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To use standard Eclipse IDE for Android Development and setup a new SDK, you
    need to download SDK tools and select the additional SDK packages to install.
    In the existing version of Eclipse IDE, add ADT plugin
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the Android SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to download the Android SDK is by getting a compressed ADT package
    from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: The Android SDK provides libraries and developer tools to build, test, and debug
    Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: Unpack it to a safe location on your system. We will use this package in the
    following steps.
  prefs: []
  type: TYPE_NORMAL
- en: Installing ADT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can install ADT by following the listed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse IDE, Kepler, click on the **Help** menu and then on the **Install
    New Software** option. You will get the following screen, which shows the available
    software depending on the website URL provided in the **Work with:** combo box.
    The **Install New Software** wizard allows you to add new software to your installation,
    as shown in the following screenshot:![Installing ADT](img/8010OS_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the **Work with:** combo box, you can always select any website to browse
    its contents. You can also browse through all the software from these sites. This
    is useful when you know the software name, but not the actual location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button in the **Install New Software** window that will
    open the **Add Repository** window, which looks like the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this window, enter a name in the **Name** field and the following URL in
    the **Location** field and click on the **Ok** button to download the Android
    ADT:![Installing ADT](img/8010OS_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eclipse will now search for all the available tools from this location and enlist
    them as follows:![Installing ADT](img/8010OS_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all the tools and click on **Next.** This will open up a window, shown
    in the following screenshot, with a list of all the components that will be installed
    as a plugin in Eclipse:![Installing ADT](img/8010OS_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button present in the **Install Details** window. It will
    start downloading all the mentioned tools after the license verification is done.
    After successful installation, you will be asked to restart Eclipse IDE. Restart
    it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the Android SDK location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the Android SDK to Eclipse, follow the listed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse, under the **Window** menu, click on **Preferences** (Mac OS X users
    may find **Preferences** under the **Eclipse** menu). Check the **Android** tab
    (The presence of this tab clearly indicates that the Android ADT plugin is successfully
    installed.) and a window, as shown in the following screenshot, will appear. The
    SDK location informs Eclipse where the Android SDK is located in the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the SDK location is not present, browse to the `SDK` unzipped directory and
    click on **OK**. The list of SDK targets will be reloaded only when the proper
    SDK location is provided and the **Apply** or **OK** button is clicked on. These
    targets are taken from the SDK itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you still don''t get any entry in the list of targets, this means your Android
    SDK is not installed properly. Install the Android SDK as mentioned in step 3
    and check for the SDK target in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Adding the Android SDK location](img/8010OS_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing the latest SDK version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before actually creating the virtual device, you need to install the latest
    version of SDK. Go to **Android SDK Manager** from the **Window** menu, and a
    window, as shown in the following screenshot, will appear. Select the latest version
    of the SDK installed. You can select any version based on your choice and click
    on **Install Packages…**. Once installed, restart Eclipse if the package''s installation
    changes are not reflected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the latest SDK version](img/8010OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the AVD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The initial configuration of the Android Environment is almost done. Now, we
    are only left with the set up of the AVD.
  prefs: []
  type: TYPE_NORMAL
- en: An AVD is used to run Android applications. It is recommended that you use an
    Android device to run applications. But within the scope of this book, we will
    only use AVD (Android Emulator) to run apps.
  prefs: []
  type: TYPE_NORMAL
- en: You can create a new AVD from the **AVD Manager** option, present under the
    **Window** menu in Eclipse. Click on **New** in the AVD screen and you will see
    a window like the following screenshot. Fill in the following details and click
    on **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the AVD](img/8010OS_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once it is created, it is shown under the Android SDK and the AVD manager screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the created AVD, right-click on the project and navigate to **Run As**
    | **Android Application**. A **Deployment Target Selection Mode** window will
    pop up, asking you to select an AVD or a connected Android device to run your
    application; select either one of them and the application gets installed on the
    selected device/AVD. The following screenshot is of the **Deployment Target Selection
    Mode** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the AVD](img/8010OS_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By this point, you should have a working setup of the Android Environment to
    start with Robotium's test case writing and execution. You are free to play around
    and discover more about it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've learnt about the Robotium framework and what are the
    different steps you need to perform to make your Android Environment ready to
    get started with the framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll start implementing our first test project using Robotium.
    So, keep reading if you want to learn about test case implementation.
  prefs: []
  type: TYPE_NORMAL
