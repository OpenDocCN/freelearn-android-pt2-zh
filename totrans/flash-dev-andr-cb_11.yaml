- en: 'Chapter 11. Final Considerations: Application Compilation and Distribution'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using Flash Professional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using Flash Builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using FDT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using the AIR Developer Tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing Icon Files for distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling an application using Flash Professional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling an application using Flash Builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling an application using FDT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling an application using the AIR Developer Tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting an application to the Android Market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When deploying a mobile Flash application (`.swf`) to the Web, the process is
    very similar to what it is on desktop; embed your `.swf` into an HTML container,
    and you are done. Deploying an AIR application to the Android Market, however,
    is quite a different experience. In this chapter, we will discover how to prepare
    an application for distribution to the Android Market, the generation of appropriate
    code signing certificates, and details around the compilation and submission process.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using Flash Professional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using Flash Professional
    within this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Flash Professional, perform the following actions to create a self-signed
    digital certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: With a project open which targets **AIR for Android**, open the **Properties**
    panel and click the little wrench icon beside the **Player selection** box. This
    will open the **AIR for Android Settings** dialog:![How to do it...](img/1420_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **AIR for Android Settings** dialog, click the **Create** button
    to open the **Create Self-Signed Digital Certificate** dialog window:![How to
    do it...](img/1420_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the **Create Self-Signed Digital Certificate** dialog is before us,
    we will enter the required information and choose a name and location for the
    certificate. When everything has been entered properly, we will click **OK** to
    have Flash Professional generate the certificate. Be sure to enter 25 years in
    the **Validity period** input for Android:![How to do it...](img/1420_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. Flash Professional
    provides a simple way to generate the appropriate certificate type and apply it
    to our applications for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using Flash Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using Flash Builder within
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Flash Builder, perform the following actions to create a self-signed digital
    certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: With a mobile project selected in the **Package Explorer**, enter the **File**
    menu and select **Properties**. The **Properties** dialog will appear for this
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Properties** dialog, scroll down the **Flex Build Packaging** or
    **ActionScript Build Packaging** item (depending upon the type of project selected)
    and choose **Google Android**. With the **Digital Signature** tab selected, click
    the **Create** button to open the **Create Self-Signed Digital Certificate** dialog:![How
    to do it...](img/1420_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All that is now needed is to enter the required information and choose a name
    and location for the certificate. When everything has been entered properly, we
    will click **OK** to have Flash Builder generate the certificate:![How to do it...](img/1420_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. Flash Professional
    provides a simple way to generate the appropriate certificate type and apply it
    to our applications for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using FDT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using PowerFlasher FDT
    within this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In FDT, perform the following actions to create a self-signed digital certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: Click upon the small arrow next to the **Run** icon in the top menu and choose
    **Run Configurations** from the sub menu that appears. This will open the **Run
    Configurations** dialog:![How to do it...](img/1420_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Run Configurations** dialog window now open, double-click the **FDT
    AIR Application Release** menu item to create a new configuration. Choose the
    **Certificate** tab and to enter the required information, choosing a name and
    location for the certificate. Once everything has been entered properly, we will
    click **Create Certificate** to have FDT generate the certificate for us:![How
    to do it...](img/1420_11_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. FDT provides
    a simple way to generate the appropriate certificate type and apply it to our
    applications for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a code-signing certificate using the AIR Developer Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using ADT command line
    tool within this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For steps on configuring ADT within your particular environment, take a look
    at [Chapter 1](ch01.html "Chapter 1. Getting Ready to Work with Android: Development
    Environment and Project Setup"), *Getting Ready to Work with Android: Development
    Environment and Project Setup.*'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the ADT command line tool, perform the following actions to create a
    self-signed digital certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will assume the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a command prompt or terminal (depending upon the operating system) and
    type in the command string to generate our certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The ADT utility will now process the command and complete the certificate generation
    process. If there is a problem with our command, ADT will print out error messages
    here, letting us know something went wrong:![How to do it...](img/1420_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now browse to the location specified within the command string to locate
    our newly created certificate and can use this to sign our AIR for Android applications:![How
    to do it...](img/1420_11_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. Using the ADT
    tools bundled with the AIR SDK, we can generate the appropriate certificate type
    for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing icon files for distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we compile an application for distribution in the Android Market, we must
    include a set of standard icon images along with our application. The locations
    for these icons are defined within our AIR application descriptor file. Android
    expects a set of three icons: 36x36, 48x48, and 72x72\. Each icon is used for
    a different screen density and should all be included as standard PNG files.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on which tool is being used, this task can be approached in different
    ways. We will demonstrate how to include these icons within an application with
    Flash Professional CS5.5 and through direct modification of the AIR application
    descriptor file.
  prefs: []
  type: TYPE_NORMAL
- en: Using Flash Professional CS5.5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With a project open which targets **AIR for Android**, open the **Properties**
    panel and click the little wrench icon beside the **Player selection** box. This
    will open the **AIR for Android Settings** dialog:![Using Flash Professional CS5.5](img/1420_11_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **AIR for Android Settings** dialog, click the **Icon** tab. To specify
    specific icons for our project, we simply need to select each icon entry in the
    list and to browse to locate a file to be used for each one through use of the
    folder and magnifying glass icon:![Using Flash Professional CS5.5](img/1420_11_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Direct modification of the AIR descriptor file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Locate the AIR descriptor file in your project. It is normally named something
    like `{MyProject}-app.xml` and resides at the project root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse the file for a node named `<icon>within` this document. This node contains
    many default settings dealing with the visual aspects of our application window.
    If it has been commented out, we must uncomment it before proceeding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now must now make sure that the following three child nodes exist within
    the `<icon>` node. Be sure that the paths to our icon files are correct. If they
    are not correct, the compiler will let us know once we attempt to compile this
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As an example, here is a set of three icons that are valid for use in an Android
    application, along with their pixel measurements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Direct modification of the AIR descriptor file](img/1420_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Including a set of icons within an Android application package is essential
    when distributing the application through the Android Market. It also adds an
    easily recognizable visual cue for the user once the application is installed
    upon a device. Take some time to come up with a set of icons that really reflect
    the application they will represent.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the application is to be published onto the Android Market, there are also
    a variety of other images that we will need to produce to properly brand our application.
    Check the Android Market for details on what images are currently required at
    [https://market.android.com/](http://https://market.android.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Compiling an application using Flash Professional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application to the Android Market or some other channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will use the tools available within Flash Professional to compile
    and package our application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To compile an `.apk` from Flash Professional, we will take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With a project open which targets **AIR for Android**, open the **Properties**
    panel and click the **Publish Settings** button. This will open the **Publish
    Settings** dialog:![How to do it...](img/1420_11_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can look over our settings here and even simply click **Publish** if we know
    for certain everything is configured appropriately. To verify all of the settings
    are in place to publish to Android, click the little wrench icon for our **Player
    selection** box, which should be set to **AIR for Android**. This will provide
    access to the **AIR for Android Settings** dialog:![How to do it...](img/1420_11_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **AIR for Android Settings** dialog now open, we can go about verifying
    our **specific configuration** options before deciding to publish. The **General**
    tab contains a number of important inputs including the path to the generated
    `.apk` file, the application name, version, ID, and other required configuration
    settings. We can also choose to include files other than the compiled `.swf` and
    AIR descriptor file, such as external image assets. The **Icons** tab allows us
    to include icon files with a basic GUI, and the **Permissions** tab will allow
    us to set application permissions specific to Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: These settings all modify the application descriptor file, which in turn generates
    the Android manifest document. We can think of these settings as a GUI for these
    files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As a final step, click on the **Deployment** tab:![How to do it...](img/1420_11_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Deployment** tab exists a setting for deployment type and the chance
    to sign our application with a self-signed certificate. This is very important
    because the Android Market will not accept unsigned applications or applications
    which to not fulfill the requirements set for by Android Market terms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to provide both App name, used to identify the application by a user
    once installed upon a device, and a unique App ID. The `App ID` is very important,
    as this is the primary identifier for your application within the Android Market.
    It must be unique in order for application updates to function correctly and it
    is recommended that developers take special care to use reverse domain notation
    to retain this uniqueness.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need to be sure that the Get AIR runtime from selection indicates the
    particular distribution market we are targeting. For the general Android Market,
    we choose Google Android Market. This dialog also provides us with the option
    of compiling an application build for different purposes through the Android deployment
    type settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Device release:** This is the option we will need to select when we want
    to distribute our application through the Android Market'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emulator release:** Generates a release compatible with the Android SDK emulator
    and the emulator build of the AIR runtime'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug:** This option generates a release specifically for debugging the application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we are satisfied with all of our configuration settings, we can exit back
    out to the **Publish Settings** dialog and hit **Publish**, or simply click the
    **Publish** button here. We can also publish using traditional methods available
    in Flash Professional, so long as we've previously gone through these configuration
    steps.![How to do it...](img/1420_11_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a fully compiled, validly signed `.apk` file ready for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The configuration settings we change through the Flash Professional GUI dialogs
    are actually modifying the AIR descriptor file behind-the-scenes. Once we choose
    to publish our application, Flash Professional will use this file to compile and
    package everything into a valid `.apk` ready for distribution on the Android Market.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling an application using Flash Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application over the Android Market or some other channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will use the tools available within Flash Builder to compile and
    package our application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To compile an `.apk` from Flash Builder, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within a mobile ActionScript or Flex project, navigate to the Flash Builder
    menu and choose the **Project** menu item. This will reveal a submenu with a number
    of options. From this menu, choose **Export Release Build** opening the **Export
    Release Build** dialog window:![How to do it...](img/1420_11_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within this window, we are given the option to specify the project and specific
    application within that project we wish to perform a release build upon, decide
    which platforms to target, specify the path, and filename of our build, and choose
    what sort of application to export as. For Android, we will choose **Signed packages**
    for each target platform. So long as we have selected **Google Android** as a
    target platform, this will open the **Packaging** Settings dialog once we click
    **Next:**![How to do it...](img/1420_11_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are able to configure some advanced properties for the build. Click
    on the **Package Contents** tab to verify that all required files are to be included
    in the build. If we want to package additional files, or even exclude certain
    assets, we can do so through use of the checkboxes aside each item. Click the
    **Digital Signature** tab to continue:![How to do it...](img/1420_11_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final task will be to choose a signing certificate in order to digitally
    sign our application for distribution on the Android Market. Select a certificate
    and type in the associated password. Clicking **Finish** will perform the build
    and save a compiled `.apk` into the location we had previously chosen. If we wish,
    we can include external files through the **Package Contents** tab and choose
    to deploy to any connected devices through the **Deployment** tab:![How to do
    it...](img/1420_11_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a fully compiled, validly signed `.apk` file ready for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Flash Builder provides the concept of a target platform when exporting the release
    build of a project. If we choose Google Android for a target platform, we are
    given additional options specific to Android that we can modify based on the needs
    of our particular project. The additional dialog elements allow us to compile
    and package everything into a valid `.apk` ready for distribution on the Android
    Market.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling an application when using FDT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application over the Android Market or some alternate channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will discuss three popular methods available to us when using
    Powerflasher FDT to compile and package our application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of this writing, FDT does not support working with AIR for Android in a direct
    way. There are, however, three main methods in which FDT users can compile their
    projects for Android distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Using a mobile project template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The FDT community has produced a number of mobile project templates that support
    AIR for Android. These templates work with the new template system used by all
    FDT projects and add varying levels of functionality to the workflow. Most of
    these also include ANT scripts, which compile an `.apk` using the AIR Developer
    Tool.
  prefs: []
  type: TYPE_NORMAL
- en: Using ANT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is by far the most flexible method of compiling a project for Android,
    as it is actually IDE-agnostic and can be used by anyone. ANT comes packaged along
    with a standard installation of FDT and many starter scripts deploying AIR for
    Android can be found online through the community. To get started using ANT with
    FDT, have a look at [http://fdt.powerflasher.com/docs/FDT_Ant_Tasks](http://fdt.powerflasher.com/docs/FDT_Ant_Tasks).
  prefs: []
  type: TYPE_NORMAL
- en: Using ADT through CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most basic method is to simply develop a mobile project using FDT and then
    package it as an `.apk` using the AIR Developer Tool through command line interface.
    The next recipe actually details how this is accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whichever method is chosen, the goal is the same—compile and package everything
    into a valid `.apk` ready for distribution on the Android Market. One of the strengths
    of FDT is that it does not restrict developers to do things in one specific way.
    When producing release builds for Android, we have many choices with which to
    do so.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling an application using the AIR Developer Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application over the Android Market or some other channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will use the **AIR Developer Tool** (**ADT**) command line utility
    to compile and package our application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To compile an `.apk` from a mobile AIR project using the ADT command line tools,
    we will take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will assume the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Certificate:** android.p12'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Desired APK:** `mobileAIR.apk`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AIR Descriptor:** `mobileAIR\src\mobileAIR-app.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SWF File:** `mobileAIR\src\mobileAIR.swf`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open a command prompt or terminal (depending upon the operating system) and
    type in the command string to generate our certificate. In this case, we will
    set the target type to `.apk` for a release build. We could also set this to apk-debug
    for a debug build, or apk-emulator for installation on an emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Any other files such as assets or icons can be included after the .swf entry,
    delimited by whitespaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The ADT utility will now process the command and complete the `.apk` compilation
    process. If there is a problem with our command, ADT will print out error messages
    here, letting us know something went wrong. Normally, if something does go wrong,
    it will be a problem with the AIR descriptor file or an incorrect file path to
    an expected input file.![How to do it...](img/1420_11_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now browse to the result location specified within the command string
    to locate our newly created `.apk` file, which can be installed directly upon
    an Android device or distributed through the Android Market:![How to do it...](img/1420_11_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a fully compiled, validly signed `.apk` file ready for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming we have configured our application properly, ADT will compile, sign,
    and package all of our project files into an `.apk` for us. ADT has many different
    utilities and configuration options available to perform many actions upon a project.
    Have a look at [http://help.adobe.com/en_US/air/build/](http://help.adobe.com/en_US/air/build/)
    and click **AIR Developer Tool** (**ADT**) in the menu for full documentation.
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For steps on configuring ADT within your particular environment, take a look
    at [Chapter 1](ch01.html "Chapter 1. Getting Ready to Work with Android: Development
    Environment and Project Setup"), *Getting Ready to Work with Android: Development
    Environment and Project Setup.*'
  prefs: []
  type: TYPE_NORMAL
- en: Submitting an application to the Android Market
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google makes it very easy to register as an Android Developer and publish applications
    to the Android Market. This recipe will detail the steps necessary to do so, after
    compiling a completed `.apk`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before a developer is able to submit anything to the Android Market, a developer
    account must be created. The process can be completed in minutes, is simple, and
    inexpensive.
  prefs: []
  type: TYPE_NORMAL
- en: 'To register as an Android developer:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a web browser and go to [http://market.android.com/publish/signup](http://market.android.com/publish/signup).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in with your Google Account (or create a new account).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the registration form and pay the one time setup fee of $25.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations on becoming an Android Developer!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1 Upload a compiled and signed `.apk` file to the Android Market for worldwide
    distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to the Android Market at [https://market.android.com/publish/](http://https://market.android.com/publish/)
    using your Android Developer credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button in the lower right that says **Upload Application:**![How
    to do it...](img/1420_11_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now presented with a rather lengthy form which allows us to include all
    sorts of information about our application. We can categorize our application,
    add descriptive and promotional text, update release notes, and choose whether
    we will charge users for the application or allow free downloads. If we decide
    to require payment, we must first establish a Google Merchant account from the
    provided link on this page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to textual entries and other input choices, we also have the opportunity
    to upload a wide variety of images which will represent our application in the
    Android Market. Specific image attributes are detailed within this form:![How
    to do it...](img/1420_11_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of this page are three buttons. We can click **Save** to save
    our application profile for later editing. Clicking the **Delete** button will
    allow us to remove an application from the Android Market completely. To publish
    our application, we will click the **Publish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you publish an application, this button will read as **Unpublish**, and
    the **Delete** button will no longer appear as an option if users have installed
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1420_11_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application has now been published to the Android Market and is available
    to millions of users worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Uploading and publishing an application to the Android Market will allow users
    to download and install the application. We have full control over the application
    description, versioning information, and associated image assets. We are also
    able to track rating and comments from the developer area, as well as manage a
    merchant account, if necessary to our application. Publication to the Android
    Market is immediate. There is no approval and disapproval process like there is
    with other application marketplaces.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Updating an application to a new version is much simpler than setting up an
    entirely new application:'
  prefs: []
  type: TYPE_NORMAL
- en: Once in the Android Market, click the name of an existing application. This
    will allow you to edit any of the images or text associated with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To actually publish a new version of the application, we must click the link
    `[Upload Upgrade]`. This will cause a new set of form controls to appear.![There's
    more...](img/1420_11_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Choose File** and browse for the new `.apk` file. Now click **Upload**
    to submit the file to Google servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new file will be parsed for versioning information and to verify the contents
    are valid. Any changes to the version number, application icon, requested permissions,
    and so forth will be reflected in the draft.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The version number defined within the application descriptor file must be of
    a higher version than that of the previously submitted build in order to have
    a valid upgrade. We can also perform additional edits to the general application
    information on this page, if necessary. Clicking **Publish** at the bottom of
    the page will make the new version immediately available in the Android Market.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
