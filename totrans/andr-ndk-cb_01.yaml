- en: Chapter 1. Hello NDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android NDK development environment in Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an Android NDK development environment in Ubuntu Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an Android NDK development environment in Mac OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating Android NDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a Hello NDK program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android NDK is a toolset that allows developers to implement a part of or an
    entire Android application in a native language, such as C, C++, and assembly.
    Before we start our journey to NDK, it is important to understand the advantages
    of NDK.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, NDK may improve application performance. This is usually true
    for many processor-bound applications. Many multimedia applications and video
    games use native code for processor-intensive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The performance improvements can come from three sources. Firstly, the native
    code is compiled to a binary code and run directly on OS, while Java code is translated
    into Java byte-code and interpreted by Dalvik **Virtual Machine** (**VM**). At
    Android 2.2 or higher, a **Just-In-Time** (**JIT**) compiler is added to Dalvik
    VM to analyze and optimize the Java byte-code while the program is running (for
    example, JIT can compile a part of the byte-code to binary code before its execution).
    But in many cases, native code still runs faster than Java code.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Java code is run by Dalvik VM on Android. Dalvik VM is specially designed for
    systems with constrained hardware resources (memory space, processor speed, and
    so on).
  prefs: []
  type: TYPE_NORMAL
- en: The second source for performance improvements at NDK is that native code allows
    developers to make use of some processor features that are not accessible at Android
    SDK, such as NEON, a **Single Instruction Multiple Data** (**SIMD**) technology,
    allowing multiple data elements to be processed in parallel. One particular coding
    task example is the color conversion for a video frame or a photo. Suppose we
    are to convert a photo of 1920x1280 pixels from the RGB color space to the YCbCr
    color space. The naive approach is to apply a conversion formula to every pixel
    (that is, over two million pixels). With NEON, we can process multiple pixels
    at one time to reduce the processing time.
  prefs: []
  type: TYPE_NORMAL
- en: The third aspect is that we can optimize the critical code at an assembly level,
    which is a common practice in desktop software development.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The advantages of using native code do not come free. Calling JNI methods introduces
    extra work for the Dalvik VM and since the code is compiled, no runtime optimization
    can be applied. In fact, developing in NDK doesn't guarantee a performance improvement
    and can actually harm performance at times. Therefore, we only stated that it
    may improve the app's performance.
  prefs: []
  type: TYPE_NORMAL
- en: The second advantage of NDK is that it allows the porting of existing C and
    C++ code to Android. This does not only speed up the development significantly,
    but also allows us to share code between Android and non-Android projects.
  prefs: []
  type: TYPE_NORMAL
- en: Before we decide to use NDK for an Android app, it is good to know that NDK
    will not benefit most Android apps. It is not recommended to work in NDK simply
    because one prefers programming in C or C++ over Java. NDK cannot access lots
    of APIs available in the Android SDK directly, and developing in NDK will always
    introduce extra complexity into your application.
  prefs: []
  type: TYPE_NORMAL
- en: With the understanding of the pros and cons of NDK, we can start our journey
    to Android NDK. This chapter will cover how to set up Android NDK development
    in Windows, Ubuntu Linux, and Mac OS. For developers who have set up an Android
    NDK development environment before, a recipe with detailed steps of how to update
    an NDK development environment is provided. At the end of the chapter, we will
    write a Hello NDK program with the environment setup.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android NDK development environment in Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to set up an Android NDK development environment
    in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check the Windows edition and system type. An Android development environment
    can be set up on Windows XP 32-bit, Windows Vista 32- or 64-bit, and Windows 7
    32- or 64-bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android development requires Java JDK 6 or above to be installed. Follow these
    steps to install and configure Java JDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Oracle Java JDK web page at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html),
    and choose JDK6 or above for your platform to download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the downloaded executable, and click through the installation
    wizard to finish the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Control Panel** | **System and Security** | **System** | **Advanced
    system settings**. A **System Properties** window will pop up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Environment Variables** button in the **Advanced** tab; another
    **Environment Variables** window will pop up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **System variables**, click on **New** to add a variable with the name
    as `JAVA_HOME` and value as the path of the JDK installation root directory. This
    is shown as follows:![Getting ready](img/1505_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **System variables**, scroll to find the `PATH` (or `Path`) environment
    variable. Insert `%JAVA_HOME%\bin;` at the beginning of the value. If no `PATH`
    or `Path` variable exists, create a new variable with the value set to `%JAVA_HOME%\bin`.
    Click on **OK** all the way through to dismiss all windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify whether JDK is installed and configured correctly, start a new command-line
    console, and enter `javac -version`. If JDK is configured correctly, you will
    get the Java version in the output.![Getting ready](img/1505_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cygwin** is a Linux-like environment for Windows to run software available
    on Linux. Android NDK development requires Cygwin 1.7 or higher installed to execute
    some Linux programs; for example, the GNU make.'
  prefs: []
  type: TYPE_NORMAL
- en: Since NDK r7, the Windows NDK comes with a new `ndk-build.cmd` build script,
    which uses NDK's prebuilt binaries for GNU make, awk, and other tools. Therefore
    Cygwin is not required for building NDK programs with `ndk-build.cmd`. However,
    it is recommended that you still install Cygwin, because `ndk-build.cmd` is an
    experimental feature and Cygwin is still needed by the debugging script `ndk-gdb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to install Cygwin:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://cygwin.com/install.html](http://cygwin.com/install.html) to download
    `setup.exe` for Cygwin. Double-click on it after the download is complete in order
    to start the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next**, then select **Install from Internet**. Keep clicking on **Next**
    until you see the **Available Download Sites** list. Select the site that is close
    to your location, then click on **Next**:![Getting ready](img/1505_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for GNU **make** under **Devel**, ensure it is version 3.81 or later, and
    **gawk** under **Base**. Alternatively, you can search for make and gawk using
    the **Search** box. Make sure both GNU make and gawk are selected to install,
    then click on **Next**. The installation can take a while to finish:![Getting
    ready](img/1505_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eclipse is a powerful software **Integrated Development Environment** (**IDE**)
    with an extensible plugin system. It is the recommended IDE to develop Android
    apps. Go to [http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/),
    and download the Eclipse Classic or Eclipse IDE for Java developers. Extract the
    compressed file and it will be ready for use. Note that Android development requires
    Eclipse 3.6.2 (Helios) or greater.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Android developer website provides an Android Developer Tools bundle at
    [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
    It includes the Eclipse IDE with the ADT plugin, and the Android SDK. We can download
    this bundle and skip the SDK installation described in steps 1 to 10 of the following
    *How to do it...* section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps show you how to set up an Android NDK development environment
    in Windows. We will first set up an SDK development environment. Steps 1 to 10
    can be skipped if SDK is already set up.
  prefs: []
  type: TYPE_NORMAL
- en: Start Eclipse. Select **Help** | **Install New Software**, and a window titled
    **Install** will pop up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add…** button at the top-right will corner, and another window
    titled **Add Repository** will pop up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Add Repository** window, enter `ADT` for **Name** and [https://dl-ssl.google.com/android/eclipse/](https://dl-ssl.google.com/android/eclipse/)
    for **Location**. Then click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It may take a few seconds for Eclipse to load the software items from the ADT
    website. After loading, select **Developer Tools** and **NDK Plugins**, then click
    on **Next** to proceed:![How to do it…](img/1505_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window, a list of tools to be installed will be shown. Simply click
    on **Next**. Read and accept all the license agreements, then click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installation finishes, restart **Eclipse** as prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Android SDK from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the installer to start the installation. Follow the wizard to
    finish the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Eclipse, select **Window** | **Preferences** to open the **Preferences**
    window. Select **Android** from the left panel, then click on **Browse** to locate
    the Android SDK root directory. Click on **Apply**, and then **OK**.![How to do
    it…](img/1505_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start **Android SDK Manager** at the Android SDK installation root directory.
    Select **Android SDK Tools**, **Android SDK Platform-tools**, at least one Android
    platform (the latest is preferred), **System Image**, **SDK Samples**, and **Android
    Support**. Then click on **Install**. in the next window, read and accept all
    the license agreements, then click on **Install**:![How to do it…](img/1505_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html)
    to download the latest version of Android NDK. Unzip the downloaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `Cygwin.bat` under the `cygwin` root directory. It contains the following
    content by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following content after `@echo off` before `C`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As an example, the file content on my machine is as follows; note that `Progra~1`
    is the short name for the `Program Files` folder:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start Cygwin by double-clicking on `cygwin.bat`, then go to the `samples/hello-jni`
    directory in NDK. Type the command `ndk-build`. If the build is successful, it
    proves that the NDK environment is set up correctly:![How to do it…](img/1505_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Eclipse, select **Window** | **Preferences** to open the **Preferences**
    window. Click on **Android** from the left panel, and select **NDK** from the
    drop-down list. Click on **Browse** to locate the Android NDK root directory.
    Click on **OK** to dismiss the pop-up window. This enables us to build and debug
    Android NDK applications with the Eclipse NDK plugin:![How to do it…](img/1505_01_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we first set up an Android SDK development environment and then
    the NDK development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Android NDK does not require installation. We downloaded NDK, and configured
    the path to make it more convenient to use.
  prefs: []
  type: TYPE_NORMAL
- en: Cygwin is not required for Android SDK development, but is essential for NDK
    development because NDK uses some Linux tools that depend on Cygwin.
  prefs: []
  type: TYPE_NORMAL
- en: '**NDK plugin in ADT:** NDK plugin for Eclipse is available in **Android Development
    Tools** (**ADT**), which allows us to build and debug Android NDK applications
    easily.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The NDK plugin is only available for ADT 20.0.0 or later, which was released
    on June 2012\. You may want to update your Eclipse ADT in order to use the NDK
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We installed Eclipse IDE as a part of our development environment. Eclipse is
    the recommended IDE for developing Android applications, and it comes with lots
    of useful tools and utilities to help our development. However, it is not a compulsory
    component of the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android NDK development environment in Ubuntu Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe depicts how to set up an Android NDK development environment in
    Ubuntu Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check your Ubuntu version and make sure it is version 8.04 or later.
  prefs: []
  type: TYPE_NORMAL
- en: 'GNU C Library (`glibc`) 2.7 or above is required. It is usually installed with
    Linux by default. Two simple methods can check the version of `glibc`:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a terminal, and enter `ldd --version`. This will print the version of
    `ldd` and `glibc`:![Getting ready](img/1505_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can execute the library as an application. Start a terminal, locate the
    library location, and then enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following output will be displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting ready](img/1505_01_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We need to enable 32-bit application execution if we are using a 64-bit machine.
    Start a terminal, and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install JDK 6 or above. At a terminal, enter the command `sudo apt-get install
    openjdk-6-jdk`, or alternatively we can enter `sudo apt-get install sun-java6-jdk`.
    After installation, we need to add the JDK path to the `PATH` environment variable
    by adding the following lines to `~/.bashrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use Eclipse as our IDE. Please refer to the *Setting up an Android NDK
    development environment in Windows* recipe for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps indicate the procedure of setting up an Android NDK development
    environment on Ubuntu Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow steps 1 to 6 of the *Setting up an Android NDK development environment
    in Windows* recipe to install the ADT plugin for Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Android SDK from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    then extract the downloaded package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following lines to `~/.bashrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow steps 9 and 10 of the *Setting up an Android NDK development environment
    in Windows* recipe to configure the SDK path at Eclipse, and download additional
    packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest version of Android NDK from [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html),
    then extract the downloaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the lines that you appended to `~/.bashrc` in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start a new terminal, then go to the `samples/hello-jni` directory in NDK. Type
    the command `ndk-build`. If the build is successful, it proves that the NDK environment
    is set up correctly:![How to do it…](img/1505_01_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first set up Android SDK and then Android NDK. Ensure that the path is set
    properly, so that the tools can be accessed without referring to the SDK and NDK
    directories.
  prefs: []
  type: TYPE_NORMAL
- en: The `.bashrc` file is a startup file read by the bash shell when you start a
    new terminal. The export commands appended the Android SDK and NDK directory locations
    to the environment variable `PATH`. Therefore, every time a new bash shell starts,
    `PATH` is set properly for SDK and NDK tools.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a few more tips on setting up an NDK development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configure Path at Startup File**: We append to the SDK and NDK paths to the
    `PATH` environment variable at `~/.bashrc` file. This assumes that our Linux system
    uses the bash shell. However, if your system uses another shell, the startup file
    used may be different. The startup files used by some commonly used shells are
    listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For C shell (`csh`), the startup file to use is `~/.cshrc`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For `ksh`, the startup file to use can be obtained using the command `echo $ENV`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For `sh`, the startup file to use is `~/.profile`. The user needs to log out
    of the current session and log in again for it to take effect.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Switch JDK**: In Android development, we can either use Oracle Java JDK or
    OpenJDK. In case we run into issues with any one of the JDKs, we can switch to
    another Java JDK, if we have installed both of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To check which JDK the system is currently using, use the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'To switch between two JDKs, use the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example for switching to Oracle JDK 1.6.0:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting up an Android NDK development environment in Mac OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes how to set up an Android NDK development environment in
    Mac OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android development requires Mac OS X 10.5.8 or higher, and it works on the
    x86 architecture only. Ensure that your machine meets these requirements before
    getting started.
  prefs: []
  type: TYPE_NORMAL
- en: Register an Apple developer account, then go to [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    to download Xcode, which contains a lot of developer tools, including the `make`
    utility required for Android NDK development. After the download is complete,
    run the installation package and make sure that the **UNIX Development** option
    is selected for installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, Java JDK 6 or above is required. Mac OS X usually ships with a full
    JDK. We can verify that your machine has the required version by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting up an Android NDK development environment on Mac OS X is similar to
    setting it up on Ubuntu Linux. The following steps explain how we can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow steps 1 to 6 of the *Setting up an Android NDK development environment
    in Windows* recipe to install the ADT plugin for Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Android SDK from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    then extract the downloaded package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following lines to `~/.profile`. If the file doesn''t exist, create
    a new one. Save the changes and log out of the current session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Eclipse, select **Eclipse** | **Preferences** to open the **Preferences**
    window. Select **Android** from the left panel, then click on **Browse** to locate
    the Android SDK root directory. Click on **Apply**, and then **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a terminal, start the Android SDK Manager at the `tools` directory by typing
    the command `android`. Select **Android SDK Tools**, **Android SDK Platform-tools**,
    at least one Android platform (the latest one is preferred), **System Image**,
    **SDK Samples**, and **Android Support**. Then click on **Install**. In the next
    window, read and accept all the license agreements, then click on **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Android SDK from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    and then extract the downloaded package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the lines that you appended to `~/.profile` in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start a new terminal, then go to the `samples/hello-jni` directory in NDK. Type
    the command `ndk-build`. If the build is successful, it proves that the NDK environment
    is set up correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps to set up an Android NDK development environment on Mac OS X are similar
    to Ubuntu Linux, since both of them are Unix-like operating systems. We first
    installed Android SDK, then Android NDK.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Android NDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When there is a new release of NDK, we may want to update NDK in order to take
    advantage of the new features or bug fixes with the new release. This recipe talks
    about how to update Android NDK in Windows, Ubuntu Linux, and Mac OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please read the previous recipes in this chapter, depending on the platform
    of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Windows, follow these instructions to update Android NDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html)
    to download the latest version of Android NDK. Unzip the downloaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Cygwin.bat` under the `cygwin` root directory. The content should be
    similar to the following code snippet, if you have previously configured NDK on
    the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update `<NDK path>` from the old NDK path to the newly downloaded and decompressed
    location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Ubuntu Linux, follow these instructions to update Android NDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of Android NDK from [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html),
    then extract the downloaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we have followed the *Setting up an Android NDK development environment
    in Ubuntu Linux* recipe, the following content should appear at the end of `~/.bashrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the `ANDROID_NDK` path to the newly downloaded and extracted Android
    NDK folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Mac OS, the steps are almost identical to Ubuntu Linux, except that we need
    to append the path to `~/.profile` instead of `~/.bashrc`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NDK installation is completed by simply downloading and extracting the NDK file,
    and configuring the path properly. Therefore, updating NDK is as simple as updating
    the configured path to the new NDK folder.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, updating NDK requires updating SDK first. Since this book focuses
    on Android NDK, explaining how to update SDK is beyond the scope of this book.
    You can refer to the Android developer website at [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    for details on how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: At times, we may feel the need to use an old version of NDK to build certain
    applications because of compatibility issues. Therefore, it may be useful to keep
    multiple versions of Android NDK and switch between them by changing the path
    or simply using the full path to refer to a specific version of NDK.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Hello NDK program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the environment set up, let's start writing the code in NDK. This recipe
    walks through a Hello NDK program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The NDK development environment needs to be set up properly before starting
    to write the Hello NDK program. Please refer to previous recipes in this chapter,
    depending upon the platform of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to write, compile, and run the Hello NDK program:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Eclipse, and select **File** | **New** | **Android Project**. Enter `HelloNDK`
    as the value for **Project Name**. Select **Create new project in workspace**.
    Then click on **Next**:![How to do it…](img/1505_01_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window, select an Android version that you want to target. Usually,
    the latest version is recommended. Then click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window, specify your package name as `cookbook.chapter1`. Select
    the **Create Activity** box, and specify the name as `HelloNDKActivity`. Set the
    value for **Minimum SDK** as `5 (Android 2.0)`. Click on **Finish**:![How to do
    it…](img/1505_01_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Eclipse package explorer, right-click on the `HelloNDK` project, and
    select **New** | **Folder**. Enter the name `jni` in the pop-up window, then click
    on **Finish**:![How to do it…](img/1505_01_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the newly-created `jni` folder under the `HelloNDK` project.
    Select **New** | **File**, enter `hello.c` as the value for **File name**, then
    click on **Finish**. Type the following code in the `hello.c` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right-click on the `jni` folder. Select **New** | **File**, enter `Android.mk`
    as the value for **File name**, then click on **Finish**. Type the following code
    in the `Android.mk` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start a terminal, go to the `jni` folder, and type `ndk-build` to build the
    `hello.c` program as a native library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `HelloNDKActivity.java` file. The file should contain the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click on the `HelloNDK` project in Eclipse. Select **Run As** | **Android
    Application**. Your Android phone or emulator will be displayed with something
    similar to the following screenshot:![How to do it…](img/1505_01_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe demonstrated how to write a Hello NDK program on Android.
  prefs: []
  type: TYPE_NORMAL
- en: '**Native code**: The Hello NDK program consists of both the native C code and
    Java code. The native function `naGetHelloNDKStr` returns the `Hello NDK` string
    to the caller, as indicated in both the native code function definition and Java
    code method declaration. The native function name must follow a specific pattern
    for a package name, class name, and method name. The package and class name must
    agree with the package and class name of the Java class from which the native
    method is called, while the method name must be the same as the method name declared
    in that Java class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This helps the Dalvik VM to locate the native function at runtime. Failing to
    follow the rule will result in `UnsatisfiedLinkError` at runtime.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The native function has two parameters, which are standard for all native functions.
    Additional parameters can be defined based on needs. The first parameter is a
    pointer to `JNIEnv` , which is the gateway to access various JNI functions. The
    meaning of the second parameter depends on whether the native method is a static
    or an instance method. If it's a static method, the second parameter is a reference
    to the class where the method is defined. If it's an instance method, the second
    parameter is a reference to the object on which the native method is invoked.
    We will discuss JNI in detail in [Chapter 2](ch02.html "Chapter 2. Java Native
    Interface"), *Java Native Interface*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Compilation of the native code**: The Android NDK build system frees developers
    from writing `makefile`. The build system accepts an `Android.mk` file, which
    simply describes the sources. It will parse the file to generate `makefile` and
    do all the heavy lifting for us.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover details of how to write the `Android.mk` file or even write our
    own `makefile` in [Chapter 3](ch03.html "Chapter 3. Build and Debug NDK Applications"),
    *Build and Debug NDK Applications*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we compile the native code, a folder named `libs` will be created under
    our project and a `libhello.so` library will be generated under the `armeabi`
    subdirectory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Java code**: Three steps are followed to call the native method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load the native library**: This is done by calling `System.loadLibrary("hello")`.
    Note that instead of `libhello`, we should use `hello`. The Dalvik VM will fail
    to locate the library if `libhello` is specified.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Declare the method**: We declare the method with a native keyword to indicate
    that it is a native method.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Invoke the method**: We call the method just like any normal Java method.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The name of a native method is lengthy and writing it manually is error-prone.
    Fortunately, the `javah` program from JDK can help us generate the header file,
    which includes the method name. The following steps should be followed to use
    `javah`:'
  prefs: []
  type: TYPE_NORMAL
- en: Write the Java code, including the native method definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the Java code and make sure the class file appears under the `bin/classes`/
    folder of our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start a terminal and go to the `jni` folder, and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our `HelloNDK` example, the command should be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will generate a file named `hello.h` with its function definition as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
