- en: Chapter 9. Graphics and Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Scaling down large images to avoid Out of Memory exceptions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A transition animation – defining scenes and applying a transition
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Compass using sensor data and RotateAnimation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a slideshow with ViewPager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Card Flip Animation with Fragments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Zoom Animation with a Custom Transition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animations can be both visually appealing and functional, as demonstrated with
    the simple button press. The graphical representation of the button press brings
    the app alive, plus it provides a functional value by giving the user a visual
    response to the event.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'The Android Framework provides several animation systems to make it easier
    to include animations in your own application. They include the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**View Animation**: (The original animation system.) It usually requires less
    code but has limited animation options'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Property Animation**: It''s a more flexible system allowing animation of
    any property of any object'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawable Animation**: It uses drawable resources to create frame-by-frame
    animations (like a movie)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Property Animation system was introduced in Android 3.0, and it is usually
    preferred over View Animation because of the flexibility. The main drawbacks to
    View Animation include:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Limited aspects of what can be animated—such as scale and rotation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can only animate the contents of the view—it cannot change where on the screen
    the view is drawn (so it cannot animate moving a ball across the screen)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can only animate View objects
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a simple example demonstrating a View Animation to "blink" a view (a
    simple simulation of a button press):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here are the contents for the `blink.xml` resource file, located in the `res/anim`
    folder:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, it's very simple to create this animation, so if the View Animation
    accomplishes your goal, use it. When it doesn't meet your needs, turn to the Property
    Animation system. We'll demonstrate Property Animation using the new `objectAnimator`
    in the *Creating a Card Flip Animation with Fragments* and *Creating a Zoom Animation
    with a Custom Transition* recipes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The *A transition animation – defining scenes and applying a transition* recipe
    will provide additional information on the Android Transition Framework, which
    we will use in many of the recipes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interpolator is a function that defines the rate of change for an animation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '`Interpolators` will be mentioned in several recipes in this chapter and in
    the previous blink example. The Interpolator defines how the transition is calculated.
    A Linear Interpolator will calculate the change evenly over the set duration,
    whereas an `AccelerateInterpolator` function would create a faster movement through
    the duration. Here is the full list of Interpolators available, along with the
    XML Identifier:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '`AccelerateDecelerateInterpolator (@android:anim/accelerate_decelerate_interpolator)`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AccelerateInterpolator (@android:anim/accelerate_interpolator)`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AnticipateInterpolator (@android:anim/anticipate_interpolator)`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AnticipateOvershootInterpolator (@android:anim/anticipate_overshoot_interpolator)`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BounceInterpolator (@android:anim/bounce_interpolator)`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CycleInterpolator (@android:anim/cycle_interpolator)`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DecelerateInterpolator (@android:anim/decelerate_interpolator)`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinearInterpolator (@android:anim/linear_interpolator)`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OvershootInterpolator (@android:anim/overshoot_interpolator)`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although animations don't generally require much memory, the graphic resources
    often do. Many of the images you may want to work with often exceed the available
    device memory. In the first recipe of this chapter, *Scaling down large images
    to avoid Out of Memory exceptions*, we'll discuss how to subsample (or scale down)
    images.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Scaling down large images to avoid Out of Memory exceptions
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with images can be very memory intensive, often resulting in your application
    crashing with an *Out of Memory* exception. This is especially true with pictures
    taken with the device camera, as they often have a much higher resolution than
    the device itself.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Since loading a higher resolution image than the UI supports doesn't provide
    any visual benefit in this example, this recipe will demonstrate how to take smaller
    samples of the image for display. We'll use the `BitmapFactory` to first check
    the image size then load a scaled-down image.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot from this recipe showing a thumbnail of a very large image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![Scaling down large images to avoid Out of Memory exceptions](img/B05057_09_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `LoadLargeImage`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: We'll need a large image for this recipe; so we turned to [www.Pixabay.com](http://www.Pixabay.com)
    for an image. Since the image itself doesn't matter, we downloaded the first image
    shown at the time. (The full size image is 6000 x 4000 and 3.4MB.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As stated previously in *Getting ready*, we need a large image to demonstrate
    the scaling. Once you have the image, follow these steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Copy the image to `res/drawable` as `image_large.jpg` (use the appropriate extension
    if you choose a different file type).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now open `MainActivity.java` and add this method, which we''ll explain shortly:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the application on a device or emulator.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of the `loadSampledResource()` method is to load a smaller image,
    to reduce the memory consumption of the image. If we attempted to load the full
    image chosen from [www.Pixabay.Com](http://www.Pixabay.Com) (see the previous
    *Getting ready* section), the app would require over 3 MB of RAM to load. That's
    more memory than most devices can handle (at the moment anyway), and even if it
    could be loaded completely, would provide no visual benefit for our thumbnail
    view.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid an `Out of Memory` situation, we use the `inSampleSize` property of
    the `BitmapFactory.Options` to reduce, or subsample, the image. (If we set the
    `inSampleSize=2`, it will reduce the image by half. If we use `inSampleSize=4`,
    it will reduce the image by one-fourth) To calculate the `inSampleSize`, first
    we need to know the image size. We can use the `inJustDecodeBounds` property as
    follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This tells the `BitmapFactory` to get the image dimensions without actually
    storing the image contents. Once we have the image size, we calculate the sample
    using this code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The purpose of this code is to determine the largest sample size that does not
    reduce the image below the target dimensions. To do that, we double the sample
    size and check whether the size exceeds the target size dimensions. If it doesn't,
    we save the doubled sample size and repeat. Once the reduced size falls below
    the target dimensions, we use the last saved `inSampleSize`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the `inSampleSize` documentation (link in the following *See also* section),
    note that the decoder uses a final value based on powers of 2, any other value
    will be rounded down to the nearest power of 2.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have the sample size, we set the `inSampleSize` property and set `inJustDecodeBounds`
    to `false`, to load normally. Here is the code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It''s important to note, this recipe illustrates the concept for applying the
    task in your own application. Loading and processing images can be a long operation,
    which could cause your application to stop responding. This is not a good thing
    and could cause Android to show the **Application Not Responding** (**ANR**) dialog.
    It is recommended to perform long tasks on a background thread to keep your UI
    thread responsive. The `AsyncTask` class is available for doing background network
    processing, but there are many other libraries available as well (links at the
    end of the recipe):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '**Volley**: Perform fast, scalable UI operations over the network (see [Chapter
    12](ch12.html "Chapter 12. Telephony, Networks, and the Web"), *Telephony, Networks,
    and the Web*)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Picasso**: A powerful image-downloading and caching library for Android'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Universal Image Loader**: Powerful and flexible library for loading,
    caching, and displaying images'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's important to note that the `targetHeight` and `targetWidth` parameters
    we pass to the `loadSampledResource()` method do not actually set the image size.
    If you run the application using the same size image we used, the sample size
    will be 32, resulting in a loaded image size of 187 x 125.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: If your layout needs a specific size of image, either set the size in the layout
    file, or you can modify the image size directly using the Bitmap class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: BitmapFactory.inSampleSize()** at [https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the **Android Universal Image Loader** page at [https://github.com/nostra13/Android-Universal-Image-Loader](https://github.com/nostra13/Android-Universal-Image-Loader)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to **Picasso** at [https://square.github.io/picasso/](https://square.github.io/picasso/)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the *AsyncTask* task in [Chapter 14](ch14.html "Chapter 14. Getting your
    app ready for the Play Store"), *Getting Your App Ready for the Play Store*, for
    processing long-running operations on a background thread.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A transition animation – defining scenes and applying a transition
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android Transition Framework offers the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**Group-level animations**: Animation applies to all views in a hierarchy'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition-based animation**: Animation based on starting and ending property
    change'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Built-in animations**: Some common transition effects, such as fade-in/out
    and movement'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource file support**: Save animation values to a resource (XML) file to
    load during runtime'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lifecycle callbacks**: Receive callback notifications during the animation'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A transition animation consists of the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting Scene**: The view (or `ViewGroup`) at the start of the animation'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition**: The change type (see later on)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ending Scene**: The ending view (or `ViewGroup`)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transitions**: Android provides built-in support for the following three
    transitions:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AutoTransition (default transition)**: Fade out, move, and resize, then fade
    in (in that order)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fade**: Fade in, fade out (default), or both (specify order)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ChangeBounds**: Move and resize'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Transition Framework will automatically create the frames needed to animate
    from the start to end scenes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some known limitations of the Transition Framework when working
    with the following classes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '**SurfaceView**: Animations may not appear correct since `SurfaceView` animations
    are performed on a non-UI thread, so they may be out of sync with the application'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TextView**: Animating text size changes may not work correctly resulting
    in the text jumping to the final state'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AdapterView**: Classes that extend the `AdapterView`, such as the `ListView`
    and `GridView`, may hang'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TextureView**: Some transitions may not work'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe provides a quick tutorial on using the transition animation system.
    We'll start by defining the scenes and transition resources, then applying the
    transition, which creates the animation. The following steps will walk you through
    creating the resources in XML, as they are generally recommended. Resources can
    also be created through code, which we'll discuss in the *There's more* section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `TransitionAnimation`.
    On the **Target Android Devices** dialog, select the **Phone & Tablet** option
    and choose API 19 (or above) for the **Minimum SDK.** Select **Empty Activity**
    when prompted for the **Activity Type**.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to create the resource files and apply the transition animation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the existing `activity.main.xml` layout file as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new layout file called `activity_main_end.xml` using the following
    XML:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make a new transition resource directory (**File** | **New** | **Android resource
    directory** and choose **Transition** as the **Resource type**).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file in the `res/transition` folder called `transition_move.xml`
    using the following XML:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the `goAnimate()` method using the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You probably find the code itself rather simple. As outlined in the recipe introduction,
    we just need to create the starting and ending scenes and set the transition type.
    Here's a detailed breakdown of the code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Creating the start scene
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Running the following line of code will create the start scene:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Creating the transition:'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Running the following line of code will create the transition:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Defining the ending scene:'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Running the following line of code will define the ending scene:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Starting the transition:'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Running the following line of code will start the transition:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Though simple, most of the work for this recipe was in creating the necessary
    resource files.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we''ll take a look at creating this same transition animation with a code-only
    solution (although we''ll still use the initial `activity_main.xml` layout file):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We still need the starting and ending scene along with the transition; the only
    difference is how we create the resources. In the previous code, we created the
    Start Scene using the current layout.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Before we start modifying the layout through code, we call the `beginDelayedTransition()`
    method of `TransitionManager` with the transition type. The `TransitionManager`
    will track the changes for the ending scene. When we call the `go()` method, the
    `TransitionManager` automatically animates the change.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the Animation resources web page at [https://developer.android.com/guide/topics/resources/animation-resource.html](https://developer.android.com/guide/topics/resources/animation-resource.html)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Compass using sensor data and RotateAnimation
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we demonstrated reading sensor data from the physical
    device sensors. In that recipe, we used the Light Sensor since the data from Environment
    Sensors generally don't require any extra processing. Although it's easy to get
    the magnetic field strength data, the numbers themselves don't have much meaning
    and certainly don't create an appealing display.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll demonstrate getting the magnetic field data along with
    the accelerometer data to calculate magnetic north. We''ll use the `SensorManager.getRotationMatrix`
    to animate the compass while responding to the device movement. Here''s a screenshot
    of our compass application on a physical device:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Compass using sensor data and RotateAnimation](img/B05057_09_02.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `Compass`. Use the default
    **Phone & Tablet** options and select **Empty Activity** when prompted for the
    **Activity Type**.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need an image for the compass indicator. Again, we can turn to [www.Pixabay.Com](http://www.Pixabay.Com)
    for an image. We used the following image:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pixabay.com/en/geography-map-compass-rose-plot-42608/](https://pixabay.com/en/geography-map-compass-rose-plot-42608/)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Though not required, this image has a transparent background, which looks better
    when rotating the image.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned in the previous *Getting ready* section, we''ll need an image
    for the compass. You can download the one previously linked, or use any image
    you prefer, then follow these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Copy your image to the `res/drawable` folder and name it `compass.png`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now open `MainActivity.java` and add the following global variable declarations:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following `SensorEventListener` class to the `MainActivity` class:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Override `onResume()` and `onPause()` as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following code to the existing `onCreate()`method:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The final code does the actual calculations and animation:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You're ready to run the application. Although you can run this application on
    an emulator, without an accelerometer and magnetometer, you won't see the compass
    move.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we've already covered reading sensor data in *Reading sensor data – using
    the Android Sensor Framework* (from the previous chapter), we won't repeat explaining
    the sensor framework, and instead jump right to the `calculateCompassDirection()`
    method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'We call this method directly from the `onSensorChanged()` callback. Since we
    used the same class to handle the sensor callbacks for both the Magnetometer and
    Accelerometer, we first check which sensor is being reported in the `SensorEvent`.
    Then we call `SensorManager.getRotationMatrix()`, passing in the last sensor data.
    If the calculation is successful, it returns a `RotationMatrix,` which we use
    to call the `SensorManager.getOrientation()` method. `getOrientation()` will return
    the following data in the `orientationValues` array:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '**Azimuth**: `value [0]`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pitch**: `value [1]`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roll**: `value [2]`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The azimuth is reported in radians, in the opposite direction, so we reverse
    the sign and convert it to degrees using `Math.toDegrees()`. The azimuth represents
    the direction of North, so we use it in our `RotateAnimation`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: With the math already done by the `SensorManager`, the actual compass animation
    is very simple. We create a `RotateAnimation` using the previous direction, the
    new direction. We use the `Animation.RELATIVE_TO_SELF` flag and 0.5f (or 50%)
    to set the center of the image as the rotation point. Before calling `startAnimation()`
    to update the compass, we set the animation duration using `setDuration()` and
    `setFillAfter(true)`. (Using `true` indicates we want the image to be left "as
    is" after the animation completes, otherwise the image would reset back to the
    original image.) Finally, we save the azimuth for the next sensor update.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's worth taking some time to experiment with the `RotationAnimation` settings
    and the sensor update timing. In our call to register the sensor listener, we
    use `SensorManager.SENSOR_DELAY_FASTEST` along with 50 milliseconds for the `setDuration()`
    to create a fast animation. You could also try using a slower sensor update and
    a slower animation, and compare the results.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Reading sensor data – using the Android Sensor Framework* in the previous
    chapter for details on reading the sensor data.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the **getRotationMatrix() Developer Document** at [http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float[],
    float[], float[], float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float%5B%5D,%20float%5B%5D,%20float%5B%5D,%20float%5B%5D))
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the **getOrientation() Developer Document** at [http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float[],
    float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float%5B%5D,%20float%5B%5D))
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the **RotateAnimation Developer Document** at [http://developer.android.com/reference/android/view/animation/RotateAnimation.html](http://developer.android.com/reference/android/view/animation/RotateAnimation.html)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a slideshow with ViewPager
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe will show you how to create a slideshow using the `ViewPager` class.
    Here is a screenshot showing a transition from one picture to another:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a slideshow with ViewPager](img/B05057_09_03.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `SlideShow`. Use the default
    **Phone & Tablet** options and select **Empty Activity** when prompted for the
    **Activity Type**.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: We need several images for the slideshow. For demonstration purposes, we downloaded
    four images from [www.Pixabay.com](http://www.Pixabay.com) to include in the project
    source files, but you can use any images.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll create a Fragment to display each image for our slideshow, then set
    up the `ViewPager` in the Main Activity. Here are the steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Copy four images to the `/res/drawable` folder and name them `slide_0` through
    `slide_3`, keeping their original file extensions.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new layout file called `fragment_slide.xml` using the following XML:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now create a new Java class called `SlideFragment.` It will extend `Fragment`
    as follows:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Use the following import:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following global declaration:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following empty, default fragment constructor:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following method to save the image resource ID:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Override `onCreateView()` as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Our main activity will display just a `ViewPager`. Open `activity_main.xml`
    and replace the file contents as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now open `MainActivity.java` and change `MainActivity` to extend `FragmentActivity`
    as shown:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Use the following import:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following global declarations:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Use the following imports:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the following subclass within `MainActivity`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Use the following imports:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Override `onBackPressed()` as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run the application on a device or emulator.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to create a fragment. Since we're doing a slideshow, all we
    need is an `ImageViewer`. We also change `MainActivity` to extend `FragmentActivity`
    to load the fragments into the `ViewPager`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ViewPager` uses a `FragmentStatePagerAdapter` as the source for the fragments
    to transition. We create the `SlideAdapter` to handle the two callbacks from the
    `FragmentStatePagerAdapter` class:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '`getCount()`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getItem()`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCount()` simply returns the number of pages we have in our slideshow. `getItem()`
    returns the actual fragment to display. This is where we specify the image we
    want to display. As you can see, it would be very easy to add or change the slideshow.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Handling the *Back* key isn't a requirement for the `ViewPager`, but it does
    provide a better user experience. `onBackPressed()` decrements the current page
    until it reaches the first page, then it sends the *Back* key to the super class,
    which exits the application.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see from the example, the `ViewPager` takes care of most of the work,
    including handling the transition animations. We can customize the transition
    if we want, by implementing the `transformPage()` callback on the `ViewPager.PageTransformer`
    interface. (See the next recipe for a custom animation.)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Setup Wizard
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ViewPager` can also be used to create a Setup Wizard. Instead of creating
    a single fragment to display an image, create a fragment for each step of your
    wizard and return the appropriate fragment in the `getItem()` callback.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the **Android ViewPager Documentation** at [http://developer.android.com/reference/android/support/v4/view/ViewPager.html](http://developer.android.com/reference/android/support/v4/view/ViewPager.html)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Creating a custom Zoom Animation* recipe for an example on creating
    a custom animation.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Card Flip Animation with Fragments
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The card flip is a common animation that we will demonstrate using fragment
    transitions. We''ll use two different images—one for the front and one for the
    back, to create the card flip effect. We''ll need four animation resources: two
    for the front and two for the back transitions, which we will define in XML using
    `objectAnimator`.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of the application we''ll build showing the Card Flip
    Animation in action:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Card Flip Animation with Fragments](img/B05057_09_04.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `CardFlip`. Use the default
    **Phone & Tablet** options and select **Empty Activity** when prompted for the
    **Activity Type**.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'For the front and back images of the playing card, we found the following images
    on [www.Pixabay.com](http://www.Pixabay.com):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/](https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/](https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll need two fragments—one for the front of the card and the other for the
    back. Each fragment will define the image for the card. Then we''ll need four
    animation files for the full card flip effect. Here are the steps to set up the
    project structure correctly and to create the resources needed:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Once you have front and back images for the cards, copy them to the `res/drawable`
    folder as `card_front.jpg` and `card_back.jpg` (keep the original file extension
    of your images if different).
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an animator resource directory: `res/animator`. (In Android Studio,
    go to **File** | **New** | **Android resource directory**. When the **New Android
    Resource** dialog displays, choose `animator` in the **Resource Type** dropdown.)'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `card_flip_left_enter.xml` in `res/animator` using the following XML:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create `card_flip_left_exit.xml` in `res/animator` using the following XML:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create `card_flip_right_enter.xml` in `res/animator` using the following XML:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create `card_flip_right_exit.xml`in `res/animator` using the following XML:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a new resource file in `res/values` called `timing.xml` using the following
    XML:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a new file in `res/layout` called `fragment_card_front.xml` using the
    following XML:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a new file in `res/layout` called `fragment_card_back.xml` using the
    following XML:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a new Java class called `CardFrontFragment` using the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a new Java class called `CardBackFragment` using the following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Replace the existing `activity_main.xml` file with the following XML:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Open `MainActivity.java` and add the following global declaration:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following method, which handles the actual fragment transition:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the effort to create the card flip is in setting up the resources. Since
    we want a front and back view of the card, we create two fragments with the appropriate
    images. We call the `flipCard()` method when the card is pressed. The actual animation
    is handled by the `setCustomAnimations()`. This is where we pass in the four animation
    resources we defined in XML. As you can see, Android makes it very easy.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that we did not use the Support Library Fragment Manager,
    as the support library does not support the `objectAnimator`. If you want support
    preAndroid 3.0, you'll need to include the old `anim` resources and check the
    OS version at runtime, or create the animation resources in code. (See the next
    recipe.)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the next recipe, *Creating a Zoom Animation with a Custom Transition*, for
    an example of animation resources created in code
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the **Integer Resource Type** web page at [https://developer.android.com/guide/topics/resources/more-resources.html#Integer](https://developer.android.com/guide/topics/resources/more-resources.html#Integer)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Zoom Animation with a Custom Transition
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe, *Creating a Card Flip Animation with Fragments*, demonstrated
    a transition animation using animation resource files. In this recipe, we will
    create a zoom effect using animation resources created in code. The application
    shows a thumbnail image then expands to an enlarged image when pressed.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image contains three screenshots showing the zoom animation in
    action:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Zoom Animation with a Custom Transition](img/B05057_09_05.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `<project name>`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: For the image needed for this recipe, we downloaded a picture from [www.Pixabay.com](http://www.Pixabay.com)
    to include in the project source files, but you can use any image.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your image ready as stated previously, follow these steps:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Copy your image to the `res/drawable` folder and name it `image.jpg` (if not
    a jpeg image, keep the original file extension).
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now open `activity_main.xml` and replace the existing XML with the following:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now open `MainActivity.java` and declare the following global variables:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add the `loadSampledResource()` method we created in the *Scaling down large
    images to avoid Out of Memory exceptions* recipe to scale the image:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the following `zoomFromThumbnail()` method, which handles the actual animation
    and is explained later on:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Run the application on a device or emulator.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, take a look at the layout file we used. There are two parts—the `LinearLayout`
    with the thumbnail `ImageView`, and the expanded `ImageView`. We control the visibility
    of both views as the images are clicked. We set the starting thumbnail image using
    the same `loadSampledResource()` as discussed in the *Scaling down large images
    to avoid Out of Memory exceptions* recipe.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: The `zoomFromThumbnail()` is where the real work is being done for this demonstration.
    There's a lot of code, which breaks down as follows.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: First, we store the current animation in `mCurrentAnimator`, so we can cancel
    if the animation is currently running.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Next, we get the starting position of the image using the `getGlobalVisibleRect()`
    method. This returns the screen position of the view. When we get the visible
    bounds of the expanded `ImageView`, we also get the `GlobalOffset` of the view
    to offset the coordinates from app coordinates to screen coordinates.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: With the starting bounds set, the next step is to calculate the ending bounds.
    We want to keep the same aspect ratio for the final image to prevent it from being
    skewed. We need to calculate how the bounds need to be adjusted to keep the aspect
    ratio within the expanded `ImageView`. The screenshot shown in the introduction
    shows how this image was sized, but this will vary by image and device.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'With the starting and ending bounds calculated, we can now create the animation—actually,
    four animations in this case. One animation for each point of the rectangle, as
    shown in this code:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'These two lines of code control how the animation appears:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `setDuration()` method tells the animator object how long it should take
    to animate the translations set previously. `setInterpolator()` governs how the
    translation is made. (The Interpolator was mentioned in the *Introduction*, and
    a link is provided further on.) After starting the animation with the `start()`
    method, we save the current animation to the `mCurrentAnimator` variable, so the
    animation can be cancelled, if needed. We create an `AnimatorListenerAdapter`
    to respond to the animation events, to clear the `mCurrentAnimator` variable.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user presses the Expanded Image, the application just hides the expanded
    `ImageView` and sets the thumbnail as `visible`. We could create a reverse zoom
    animation in the `mImageViewExpanded` click event using the expanded bounds as
    the starting point returning to the thumbnail bounds. (It would probably be easier
    to create the `mImageViewExpanded` event in the `zoomFromThumbnail()` to avoid
    having to duplicate calculating the start and stop bounds again.)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击展开的图片时，应用只是隐藏了展开的`ImageView`并将缩略图设置为`可见`。我们可以在`mImageViewExpanded`的点击事件中使用扩展边界作为起点，返回到缩略图边界来创建反向缩放动画。（在`zoomFromThumbnail()`中创建`mImageViewExpanded`事件可能更容易，以避免再次重复计算开始和结束边界。）
- en: Getting the default animation duration
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取默认动画持续时间
- en: 'Our code used 1000 milliseconds when setting the duration with `setDuration()`.
    We purposely used a long duration to make it easier to view the animation. We
    can get the default Android animation duration using the following code:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码在调用`setDuration()`设置持续时间时使用了1000毫秒。我们故意使用较长的持续时间，以便更容易查看动画。我们可以使用以下代码获取默认的Android动画持续时间：
- en: '[PRE59]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: See also
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The first recipe, *Scaling down large images to avoid Out of Memory exceptions*,
    for a detailed explanation of the `loadSampledResource()` method.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个食谱，*缩小大图以避免内存溢出异常*，其中详细解释了`loadSampledResource()`方法。
- en: Refer to the **Interpolator Developer Document** at [http://developer.android.com/reference/android/view/animation/Interpolator.html](http://developer.android.com/reference/android/view/animation/Interpolator.html)
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[http://developer.android.com/reference/android/view/animation/Interpolator.html](http://developer.android.com/reference/android/view/animation/Interpolator.html)的**插值器开发者文档**。
