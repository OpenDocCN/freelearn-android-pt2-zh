- en: Chapter 9. Graphics and Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章 图形和动画
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Scaling down large images to avoid Out of Memory exceptions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩小大图片以避免内存溢出异常
- en: A transition animation – defining scenes and applying a transition
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡动画——定义场景并应用过渡
- en: Creating a Compass using sensor data and RotateAnimation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用传感器数据和RotateAnimation创建指南针
- en: Creating a slideshow with ViewPager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ViewPager创建幻灯片展示
- en: Creating a Card Flip Animation with Fragments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用片段创建卡片翻转动画
- en: Creating a Zoom Animation with a Custom Transition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义过渡创建缩放动画
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Animations can be both visually appealing and functional, as demonstrated with
    the simple button press. The graphical representation of the button press brings
    the app alive, plus it provides a functional value by giving the user a visual
    response to the event.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 动画既可以是视觉上吸引人的，也可以是功能性的，简单的按钮按下操作就证明了这一点。按钮按下的图形表示使应用生动起来，同时通过为用户的事件提供视觉反馈，提供了功能性价值。
- en: 'The Android Framework provides several animation systems to make it easier
    to include animations in your own application. They include the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android框架提供了几种动画系统，以便在您的应用程序中更容易地包含动画。它们包括以下内容：
- en: '**View Animation**: (The original animation system.) It usually requires less
    code but has limited animation options'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图动画**：（原始动画系统。）它通常需要的代码较少，但动画选项有限'
- en: '**Property Animation**: It''s a more flexible system allowing animation of
    any property of any object'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性动画**：这是一个更灵活的系统，允许对任何对象的任何属性进行动画处理'
- en: '**Drawable Animation**: It uses drawable resources to create frame-by-frame
    animations (like a movie)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Drawable动画**：它使用drawable资源逐帧创建动画（像电影一样）'
- en: 'The Property Animation system was introduced in Android 3.0, and it is usually
    preferred over View Animation because of the flexibility. The main drawbacks to
    View Animation include:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 属性动画系统在Android 3.0中引入，通常由于其灵活性而比视图动画更受欢迎。视图动画的主要缺点包括：
- en: Limited aspects of what can be animated—such as scale and rotation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以动画化的方面有限——例如缩放和旋转
- en: Can only animate the contents of the view—it cannot change where on the screen
    the view is drawn (so it cannot animate moving a ball across the screen)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只能对视图的内容进行动画处理——它不能改变视图在屏幕上的绘制位置（因此它不能动画化球在屏幕上的移动）
- en: Can only animate View objects
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只能对View对象进行动画处理
- en: 'Here is a simple example demonstrating a View Animation to "blink" a view (a
    simple simulation of a button press):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的示例，演示了使用视图动画使视图“闪烁”（模拟按钮按下的简单操作）：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here are the contents for the `blink.xml` resource file, located in the `res/anim`
    folder:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是位于`res/anim`文件夹中的`blink.xml`资源文件的内容：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, it's very simple to create this animation, so if the View Animation
    accomplishes your goal, use it. When it doesn't meet your needs, turn to the Property
    Animation system. We'll demonstrate Property Animation using the new `objectAnimator`
    in the *Creating a Card Flip Animation with Fragments* and *Creating a Zoom Animation
    with a Custom Transition* recipes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，创建这种动画非常简单，所以如果视图动画实现了您的目标，请使用它。当它不符合您的需求时，转向属性动画系统。我们将在*使用片段创建卡片翻转动画*和*使用自定义过渡创建缩放动画*的菜谱中展示属性动画，使用新的`objectAnimator`。
- en: The *A transition animation – defining scenes and applying a transition* recipe
    will provide additional information on the Android Transition Framework, which
    we will use in many of the recipes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*过渡动画——定义场景并应用过渡*的菜谱将提供有关Android Transition Framework的额外信息，我们将在许多菜谱中使用它。'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Interpolator is a function that defines the rate of change for an animation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 插值器是定义动画变化速率的函数。
- en: '`Interpolators` will be mentioned in several recipes in this chapter and in
    the previous blink example. The Interpolator defines how the transition is calculated.
    A Linear Interpolator will calculate the change evenly over the set duration,
    whereas an `AccelerateInterpolator` function would create a faster movement through
    the duration. Here is the full list of Interpolators available, along with the
    XML Identifier:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`插值器`将在本章的几个菜谱和前面的闪烁示例中提到。插值器定义了过渡是如何计算的。线性插值器会在设定的持续时间内均匀计算变化，而`AccelerateInterpolator`函数会在持续时间内创建更快的移动。以下是可用的插值器完整列表，以及XML标识符：'
- en: '`AccelerateDecelerateInterpolator (@android:anim/accelerate_decelerate_interpolator)`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AccelerateDecelerateInterpolator (@android:anim/accelerate_decelerate_interpolator)`'
- en: '`AccelerateInterpolator (@android:anim/accelerate_interpolator)`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AccelerateInterpolator (@android:anim/accelerate_interpolator)`'
- en: '`AnticipateInterpolator (@android:anim/anticipate_interpolator)`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnticipateInterpolator (@android:anim/anticipate_interpolator)`'
- en: '`AnticipateOvershootInterpolator (@android:anim/anticipate_overshoot_interpolator)`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnticipateOvershootInterpolator (@android:anim/anticipate_overshoot_interpolator)`'
- en: '`BounceInterpolator (@android:anim/bounce_interpolator)`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BounceInterpolator (@android:anim/bounce_interpolator)`'
- en: '`CycleInterpolator (@android:anim/cycle_interpolator)`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CycleInterpolator (@android:anim/cycle_interpolator)`'
- en: '`DecelerateInterpolator (@android:anim/decelerate_interpolator)`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DecelerateInterpolator (@android:anim/decelerate_interpolator)`'
- en: '`LinearInterpolator (@android:anim/linear_interpolator)`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearInterpolator (@android:anim/linear_interpolator)`'
- en: '`OvershootInterpolator (@android:anim/overshoot_interpolator)`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OvershootInterpolator (@android:anim/overshoot_interpolator)`'
- en: Although animations don't generally require much memory, the graphic resources
    often do. Many of the images you may want to work with often exceed the available
    device memory. In the first recipe of this chapter, *Scaling down large images
    to avoid Out of Memory exceptions*, we'll discuss how to subsample (or scale down)
    images.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管动画通常不会占用太多内存，但图形资源往往需要。你可能想要处理的许多图片经常超出设备可用内存。在本章的第一个食谱中，我们将会讨论如何避免内存溢出异常，即*缩小大图片*。
- en: Scaling down large images to avoid Out of Memory exceptions
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免内存溢出异常，缩小大图片
- en: Working with images can be very memory intensive, often resulting in your application
    crashing with an *Out of Memory* exception. This is especially true with pictures
    taken with the device camera, as they often have a much higher resolution than
    the device itself.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 处理图片可能非常占用内存，经常导致应用程序因*内存溢出*异常而崩溃。这在处理设备摄像头拍摄的图片时尤其如此，因为它们的分辨率通常比设备本身要高得多。
- en: Since loading a higher resolution image than the UI supports doesn't provide
    any visual benefit in this example, this recipe will demonstrate how to take smaller
    samples of the image for display. We'll use the `BitmapFactory` to first check
    the image size then load a scaled-down image.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在这个例子中，加载比UI支持的分辨率更高的图片并不会带来任何视觉上的好处，因此这个食谱将演示如何为显示取用图片的小样本。我们将使用`BitmapFactory`首先检查图片大小，然后加载缩小后的图片。
- en: 'Here''s a screenshot from this recipe showing a thumbnail of a very large image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本食谱的一个截图，展示了一幅非常大图片的缩略图：
- en: '![Scaling down large images to avoid Out of Memory exceptions](img/B05057_09_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![避免内存溢出异常，缩小大图片](img/B05057_09_01.jpg)'
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `LoadLargeImage`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为`LoadLargeImage`。使用默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: We'll need a large image for this recipe; so we turned to [www.Pixabay.com](http://www.Pixabay.com)
    for an image. Since the image itself doesn't matter, we downloaded the first image
    shown at the time. (The full size image is 6000 x 4000 and 3.4MB.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要一张大图片；因此我们访问了[www.Pixabay.com](http://www.Pixabay.com)获取了一张图片。由于图片本身并不重要，我们下载了当时显示的第一张图片。（原始尺寸的图片是6000
    x 4000，3.4MB大小。）
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As stated previously in *Getting ready*, we need a large image to demonstrate
    the scaling. Once you have the image, follow these steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如在*准备工作*中所述，我们需要一张大图片来演示缩放。一旦你有了图片，按照以下步骤操作：
- en: Copy the image to `res/drawable` as `image_large.jpg` (use the appropriate extension
    if you choose a different file type).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图片复制到`res/drawable`目录下，并命名为`image_large.jpg`（如果你选择了不同的文件类型，请使用适当的扩展名）。
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件，将现有的`TextView`替换为以下`ImageView`：
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now open `MainActivity.java` and add this method, which we''ll explain shortly:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`MainActivity.java`文件，并添加这个方法，我们稍后会解释：
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的`onCreate()`方法中添加以下代码：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the application on a device or emulator.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The purpose of the `loadSampledResource()` method is to load a smaller image,
    to reduce the memory consumption of the image. If we attempted to load the full
    image chosen from [www.Pixabay.Com](http://www.Pixabay.Com) (see the previous
    *Getting ready* section), the app would require over 3 MB of RAM to load. That's
    more memory than most devices can handle (at the moment anyway), and even if it
    could be loaded completely, would provide no visual benefit for our thumbnail
    view.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadSampledResource()`方法的目的是加载一张较小的图片，以减少图片的内存消耗。如果我们尝试加载从[www.Pixabay.Com](http://www.Pixabay.Com)选择的完整图片（见前面的*准备*部分），应用需要超过3MB的RAM来加载。这对于大多数设备来说（至少目前是这样）是过多的内存，即使能够完全加载，对于我们的缩略图视图也没有视觉上的好处。'
- en: 'To avoid an `Out of Memory` situation, we use the `inSampleSize` property of
    the `BitmapFactory.Options` to reduce, or subsample, the image. (If we set the
    `inSampleSize=2`, it will reduce the image by half. If we use `inSampleSize=4`,
    it will reduce the image by one-fourth) To calculate the `inSampleSize`, first
    we need to know the image size. We can use the `inJustDecodeBounds` property as
    follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免出现`内存不足`的情况，我们使用`BitmapFactory.Options`的`inSampleSize`属性来减少或子采样图像。（如果我们设置`inSampleSize=2`，它会将图像减少一半。如果我们使用`inSampleSize=4`，它会将图像减少四分之一）要计算`inSampleSize`，首先我们需要知道图像的大小。我们可以使用以下方法中的`inJustDecodeBounds`属性：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This tells the `BitmapFactory` to get the image dimensions without actually
    storing the image contents. Once we have the image size, we calculate the sample
    using this code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`BitmapFactory`获取图像尺寸，而实际上不存储图像内容。一旦我们有了图像大小，我们使用以下代码计算采样：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The purpose of this code is to determine the largest sample size that does not
    reduce the image below the target dimensions. To do that, we double the sample
    size and check whether the size exceeds the target size dimensions. If it doesn't,
    we save the doubled sample size and repeat. Once the reduced size falls below
    the target dimensions, we use the last saved `inSampleSize`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的目的是确定不将图像尺寸降低到目标尺寸以下的最大的采样大小。为此，我们加倍采样大小并检查尺寸是否超过目标尺寸。如果没有，我们保存加倍后的采样大小并重复此过程。一旦缩小后的尺寸低于目标尺寸，我们使用最后保存的`inSampleSize`。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: From the `inSampleSize` documentation (link in the following *See also* section),
    note that the decoder uses a final value based on powers of 2, any other value
    will be rounded down to the nearest power of 2.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从`inSampleSize`的文档（在下面的*另请参阅*部分中的链接）中注意，解码器使用基于2的幂的最终值，任何其他值都会被四舍五入到最近的2的幂。
- en: 'Once we have the sample size, we set the `inSampleSize` property and set `inJustDecodeBounds`
    to `false`, to load normally. Here is the code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了采样大小，我们设置`inSampleSize`属性并将`inJustDecodeBounds`设置为`false`，以正常加载。以下是代码：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It''s important to note, this recipe illustrates the concept for applying the
    task in your own application. Loading and processing images can be a long operation,
    which could cause your application to stop responding. This is not a good thing
    and could cause Android to show the **Application Not Responding** (**ANR**) dialog.
    It is recommended to perform long tasks on a background thread to keep your UI
    thread responsive. The `AsyncTask` class is available for doing background network
    processing, but there are many other libraries available as well (links at the
    end of the recipe):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这个方法说明了在您自己的应用程序中应用该任务的概念。加载和处理图像可能是一个长时间的操作，这可能导致您的应用程序停止响应。这不是一件好事，可能导致Android显示**应用程序无响应**（**ANR**）对话框。建议在后台线程上执行长时间的任务，以保持UI线程响应。`AsyncTask`类可用于执行后台网络处理，但还有许多其他库可用（在食谱末尾的链接）：
- en: '**Volley**: Perform fast, scalable UI operations over the network (see [Chapter
    12](ch12.html "Chapter 12. Telephony, Networks, and the Web"), *Telephony, Networks,
    and the Web*)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Volley**：在网络上进行快速、可扩展的UI操作（见[第12章](ch12.html "第12章. 电信、网络与互联网")，*电信、网络与互联网*）'
- en: '**Picasso**: A powerful image-downloading and caching library for Android'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Picasso**：一个强大的Android图像下载和缓存库'
- en: '**Android Universal Image Loader**: Powerful and flexible library for loading,
    caching, and displaying images'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android Universal Image Loader**：用于加载、缓存和显示图片的强大而灵活的库'
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It's important to note that the `targetHeight` and `targetWidth` parameters
    we pass to the `loadSampledResource()` method do not actually set the image size.
    If you run the application using the same size image we used, the sample size
    will be 32, resulting in a loaded image size of 187 x 125.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们传递给`loadSampledResource()`方法的`targetHeight`和`targetWidth`参数实际上并不设置图片大小。如果你使用我们使用的相同大小的图片运行应用程序，那么样本大小将为32，导致加载的图片大小为187
    x 125。
- en: If your layout needs a specific size of image, either set the size in the layout
    file, or you can modify the image size directly using the Bitmap class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的布局需要特定大小的图片，可以在布局文件中设置大小，或者可以直接使用Bitmap类修改图片大小。
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Developer Docs: BitmapFactory.inSampleSize()** at [https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档: BitmapFactory.inSampleSize()** 请访问[https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize)'
- en: Refer to the **Android Universal Image Loader** page at [https://github.com/nostra13/Android-Universal-Image-Loader](https://github.com/nostra13/Android-Universal-Image-Loader)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[Android Universal Image Loader](https://github.com/nostra13/Android-Universal-Image-Loader)页面
- en: Refer to **Picasso** at [https://square.github.io/picasso/](https://square.github.io/picasso/)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[Picasso](https://square.github.io/picasso/)的相关内容
- en: Check the *AsyncTask* task in [Chapter 14](ch14.html "Chapter 14. Getting your
    app ready for the Play Store"), *Getting Your App Ready for the Play Store*, for
    processing long-running operations on a background thread.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查[第14章](ch14.html "第14章。让你的应用准备好上架Play商店")中的*AsyncTask*任务，*让你的应用准备好上架Play商店*，以在后台线程上处理长时间运行的操作。
- en: A transition animation – defining scenes and applying a transition
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换动画——定义场景并应用转换
- en: 'The Android Transition Framework offers the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓转换框架提供了以下内容：
- en: '**Group-level animations**: Animation applies to all views in a hierarchy'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组级别动画**: 动画适用于层次结构中的所有视图'
- en: '**Transition-based animation**: Animation based on starting and ending property
    change'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于转换的动画**: 基于开始和结束属性变化的动画'
- en: '**Built-in animations**: Some common transition effects, such as fade-in/out
    and movement'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置动画**: 一些常见的过渡效果，如淡入/淡出和移动'
- en: '**Resource file support**: Save animation values to a resource (XML) file to
    load during runtime'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源文件支持**: 将动画值保存到资源（XML）文件中，以便在运行时加载'
- en: '**Lifecycle callbacks**: Receive callback notifications during the animation'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期回调**: 动画期间接收回调通知'
- en: 'A transition animation consists of the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 转换动画包括以下内容：
- en: '**Starting Scene**: The view (or `ViewGroup`) at the start of the animation'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始场景**: 动画开始时的视图（或`ViewGroup`）'
- en: '**Transition**: The change type (see later on)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Transition**: 变化类型（稍后介绍）'
- en: '**Ending Scene**: The ending view (or `ViewGroup`)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结束场景**: 动画结束时的视图（或`ViewGroup`）'
- en: '**Transitions**: Android provides built-in support for the following three
    transitions:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Transitions**: 安卓为以下三种转换提供了内置支持：'
- en: '**AutoTransition (default transition)**: Fade out, move, and resize, then fade
    in (in that order)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AutoTransition（默认转换）**: 淡出，移动和调整大小，然后淡入（按此顺序）'
- en: '**Fade**: Fade in, fade out (default), or both (specify order)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fade**: 淡入，淡出（默认），或两者都有（指定顺序）'
- en: '**ChangeBounds**: Move and resize'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ChangeBounds**: 移动和调整大小'
- en: The Transition Framework will automatically create the frames needed to animate
    from the start to end scenes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 转换框架将自动创建从开始场景到结束场景所需的帧。
- en: 'The following are some known limitations of the Transition Framework when working
    with the following classes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在使用以下类时转换框架的一些已知限制：
- en: '**SurfaceView**: Animations may not appear correct since `SurfaceView` animations
    are performed on a non-UI thread, so they may be out of sync with the application'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SurfaceView**: 由于`SurfaceView`动画是在非UI线程上执行的，因此动画可能不会正确显示，因此它们可能与应用程序不同步'
- en: '**TextView**: Animating text size changes may not work correctly resulting
    in the text jumping to the final state'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TextView**: 动态文本大小变化可能不会正确工作，导致文本直接跳转到最终状态'
- en: '**AdapterView**: Classes that extend the `AdapterView`, such as the `ListView`
    and `GridView`, may hang'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AdapterView**: 扩展了`AdapterView`的类，如`ListView`和`GridView`可能会挂起'
- en: '**TextureView**: Some transitions may not work'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TextureView**: 某些转换可能不起作用'
- en: This recipe provides a quick tutorial on using the transition animation system.
    We'll start by defining the scenes and transition resources, then applying the
    transition, which creates the animation. The following steps will walk you through
    creating the resources in XML, as they are generally recommended. Resources can
    also be created through code, which we'll discuss in the *There's more* section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程提供了一个关于使用过渡动画系统的快速指南。我们将从定义场景和过渡资源开始，然后应用过渡，创建动画。以下步骤将指导您使用XML创建资源，这是通常推荐的。也可以通过代码创建资源，我们将在*更多内容*部分讨论这一点。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `TransitionAnimation`.
    On the **Target Android Devices** dialog, select the **Phone & Tablet** option
    and choose API 19 (or above) for the **Minimum SDK.** Select **Empty Activity**
    when prompted for the **Activity Type**.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为：`TransitionAnimation`。在**目标Android设备**对话框中，选择**手机和平板**选项，并为**最低SDK**选择API
    19（或更高）。当提示选择**活动类型**时，选择**空活动**。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to create the resource files and apply the transition animation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建资源文件并应用过渡动画的步骤：
- en: 'Change the existing `activity.main.xml` layout file as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式更改现有的`activity.main.xml`布局文件：
- en: '[PRE8]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new layout file called `activity_main_end.xml` using the following
    XML:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下XML创建一个名为`activity_main_end.xml`的新布局文件：
- en: '[PRE9]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make a new transition resource directory (**File** | **New** | **Android resource
    directory** and choose **Transition** as the **Resource type**).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新建一个过渡资源目录（**文件** | **新建** | **Android资源目录**，并选择**过渡**作为**资源类型**）。
- en: 'Create a new file in the `res/transition` folder called `transition_move.xml`
    using the following XML:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/transition`文件夹中创建一个名为`transition_move.xml`的新文件，使用以下XML：
- en: '[PRE10]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the `goAnimate()` method using the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码添加`goAnimate()`方法：
- en: '[PRE11]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经准备好在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You probably find the code itself rather simple. As outlined in the recipe introduction,
    we just need to create the starting and ending scenes and set the transition type.
    Here's a detailed breakdown of the code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现代码本身相当简单。正如简介中所概述的，我们只需要创建开始和结束场景并设置过渡类型。以下是代码的详细分解。
- en: Creating the start scene
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建开始场景
- en: 'Running the following line of code will create the start scene:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码行将创建开始场景：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Creating the transition:'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建过渡：
- en: 'Running the following line of code will create the transition:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码行将创建过渡：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Defining the ending scene:'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义结束场景：
- en: 'Running the following line of code will define the ending scene:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码行将定义结束场景：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Starting the transition:'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始过渡：
- en: 'Running the following line of code will start the transition:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码行将开始过渡：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Though simple, most of the work for this recipe was in creating the necessary
    resource files.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管简单，但本教程的大部分工作在于创建必要的资源文件。
- en: There's more...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Now we''ll take a look at creating this same transition animation with a code-only
    solution (although we''ll still use the initial `activity_main.xml` layout file):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看仅使用代码解决方案创建相同的过渡动画（尽管我们仍将使用初始`activity_main.xml`布局文件）：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We still need the starting and ending scene along with the transition; the only
    difference is how we create the resources. In the previous code, we created the
    Start Scene using the current layout.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要开始和结束场景以及过渡；唯一的区别在于我们如何创建资源。在前面的代码中，我们使用当前布局创建了开始场景。
- en: Before we start modifying the layout through code, we call the `beginDelayedTransition()`
    method of `TransitionManager` with the transition type. The `TransitionManager`
    will track the changes for the ending scene. When we call the `go()` method, the
    `TransitionManager` automatically animates the change.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始通过代码修改布局之前，我们使用`TransitionManager`的`beginDelayedTransition()`方法以及过渡类型。`TransitionManager`将跟踪结束场景的变化。当我们调用`go()`方法时，`TransitionManager`会自动对变化进行动画处理。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to the Animation resources web page at [https://developer.android.com/guide/topics/resources/animation-resource.html](https://developer.android.com/guide/topics/resources/animation-resource.html)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[动画资源网页](https://developer.android.com/guide/topics/resources/animation-resource.html)（[https://developer.android.com/guide/topics/resources/animation-resource.html](https://developer.android.com/guide/topics/resources/animation-resource.html)）。
- en: Creating a Compass using sensor data and RotateAnimation
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用传感器数据和RotateAnimation创建罗盘。
- en: In the previous chapter, we demonstrated reading sensor data from the physical
    device sensors. In that recipe, we used the Light Sensor since the data from Environment
    Sensors generally don't require any extra processing. Although it's easy to get
    the magnetic field strength data, the numbers themselves don't have much meaning
    and certainly don't create an appealing display.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们演示了从物理设备传感器读取传感器数据。在那个教程中，我们使用了光线传感器，因为环境传感器数据通常不需要额外的处理。尽管获取磁感应强度数据很容易，但这些数字本身并没有太多意义，当然也不能创建吸引人的显示效果。
- en: 'In this recipe, we''ll demonstrate getting the magnetic field data along with
    the accelerometer data to calculate magnetic north. We''ll use the `SensorManager.getRotationMatrix`
    to animate the compass while responding to the device movement. Here''s a screenshot
    of our compass application on a physical device:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将演示如何获取磁感应数据以及加速度计数据来计算磁北。我们将使用`SensorManager.getRotationMatrix`来响应设备移动时对指南针进行动画处理。下面是在物理设备上我们指南针应用程序的截图：
- en: '![Creating a Compass using sensor data and RotateAnimation](img/B05057_09_02.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![使用传感器数据和RotateAnimation创建指南针](img/B05057_09_02.jpg)'
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `Compass`. Use the default
    **Phone & Tablet** options and select **Empty Activity** when prompted for the
    **Activity Type**.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为`Compass`。使用默认的**手机和平板**选项，在选择**活动类型**时选择**空活动**。
- en: 'We will need an image for the compass indicator. Again, we can turn to [www.Pixabay.Com](http://www.Pixabay.Com)
    for an image. We used the following image:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个图像作为指南针指示器。同样，我们可以从[www.Pixabay.Com](http://www.Pixabay.Com)获取图像。我们使用了以下这张图片：
- en: '[https://pixabay.com/en/geography-map-compass-rose-plot-42608/](https://pixabay.com/en/geography-map-compass-rose-plot-42608/)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pixabay.com/en/geography-map-compass-rose-plot-42608/](https://pixabay.com/en/geography-map-compass-rose-plot-42608/)'
- en: Though not required, this image has a transparent background, which looks better
    when rotating the image.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不是必须的，但这张图片具有透明背景，在旋转图像时看起来更好。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As mentioned in the previous *Getting ready* section, we''ll need an image
    for the compass. You can download the one previously linked, or use any image
    you prefer, then follow these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文*准备工作*部分所述，我们需要一个指南针的图像。你可以下载之前链接的那个，或者使用你喜欢的任何图像，然后按照以下步骤操作：
- en: Copy your image to the `res/drawable` folder and name it `compass.png`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的图像复制到`res/drawable`文件夹中，并将其命名为`compass.png`。
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件，将现有的`TextView`替换为以下`ImageView`：
- en: '[PRE17]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now open `MainActivity.java` and add the following global variable declarations:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`MainActivity.java`文件，并添加以下全局变量声明：
- en: '[PRE18]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following `SensorEventListener` class to the `MainActivity` class:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中添加以下`SensorEventListener`类：
- en: '[PRE19]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Override `onResume()` and `onPause()` as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式覆盖`onResume()`和`onPause()`：
- en: '[PRE20]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following code to the existing `onCreate()`method:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的`onCreate()`方法中添加以下代码：
- en: '[PRE21]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The final code does the actual calculations and animation:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终代码执行实际计算和动画：
- en: '[PRE22]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You're ready to run the application. Although you can run this application on
    an emulator, without an accelerometer and magnetometer, you won't see the compass
    move.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好运行应用程序了。尽管你可以在模拟器上运行这个应用程序，但如果没有加速度计和磁力计，你是看不到指南针移动的。
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Since we've already covered reading sensor data in *Reading sensor data – using
    the Android Sensor Framework* (from the previous chapter), we won't repeat explaining
    the sensor framework, and instead jump right to the `calculateCompassDirection()`
    method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在上一章的*读取传感器数据——使用Android传感器框架*中涵盖了读取传感器数据，所以我们不会重复解释传感器框架，而是直接跳到`calculateCompassDirection()`方法。
- en: 'We call this method directly from the `onSensorChanged()` callback. Since we
    used the same class to handle the sensor callbacks for both the Magnetometer and
    Accelerometer, we first check which sensor is being reported in the `SensorEvent`.
    Then we call `SensorManager.getRotationMatrix()`, passing in the last sensor data.
    If the calculation is successful, it returns a `RotationMatrix,` which we use
    to call the `SensorManager.getOrientation()` method. `getOrientation()` will return
    the following data in the `orientationValues` array:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接从`onSensorChanged()`回调中调用这个方法。由于我们使用了相同的类来处理磁力计和加速度计的传感器回调，因此我们首先检查`SensorEvent`中报告的是哪个传感器。然后我们调用`SensorManager.getRotationMatrix()`，传入最后的传感器数据。如果计算成功，它将返回一个`RotationMatrix`，我们使用它来调用`SensorManager.getOrientation()`方法。`getOrientation()`将在`orientationValues`数组中返回以下数据：
- en: '**Azimuth**: `value [0]`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azimuth**: `value [0]`'
- en: '**Pitch**: `value [1]`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pitch**: `value [1]`'
- en: '**Roll**: `value [2]`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Roll**: `value [2]`'
- en: The azimuth is reported in radians, in the opposite direction, so we reverse
    the sign and convert it to degrees using `Math.toDegrees()`. The azimuth represents
    the direction of North, so we use it in our `RotateAnimation`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 方位角以弧度报告，方向相反，因此我们改变符号并使用`Math.toDegrees()`将其转换为度数。方位角表示北方的方向，因此我们在`RotateAnimation`中使用它。
- en: With the math already done by the `SensorManager`, the actual compass animation
    is very simple. We create a `RotateAnimation` using the previous direction, the
    new direction. We use the `Animation.RELATIVE_TO_SELF` flag and 0.5f (or 50%)
    to set the center of the image as the rotation point. Before calling `startAnimation()`
    to update the compass, we set the animation duration using `setDuration()` and
    `setFillAfter(true)`. (Using `true` indicates we want the image to be left "as
    is" after the animation completes, otherwise the image would reset back to the
    original image.) Finally, we save the azimuth for the next sensor update.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`SensorManager`已经完成了数学计算，实际的指南针动画非常简单。我们使用之前的方向和新方向创建一个`RotateAnimation`。我们使用`Animation.RELATIVE_TO_SELF`标志和0.5f（或50%）将图像中心设置为旋转点。在调用`startAnimation()`更新指南针之前，我们使用`setDuration()`和`setFillAfter(true)`设置动画持续时间。（使用`true`表示动画完成后我们希望图像保持原样，否则图像将重置回原始图像。）最后，我们保存方位角以供下次传感器更新使用。
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It's worth taking some time to experiment with the `RotationAnimation` settings
    and the sensor update timing. In our call to register the sensor listener, we
    use `SensorManager.SENSOR_DELAY_FASTEST` along with 50 milliseconds for the `setDuration()`
    to create a fast animation. You could also try using a slower sensor update and
    a slower animation, and compare the results.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 花时间实验`RotationAnimation`设置和传感器更新时机是值得的。在我们注册传感器监听器的调用中，我们使用`SensorManager.SENSOR_DELAY_FASTEST`和50毫秒的`setDuration()`来创建快速动画。你也可以尝试使用更慢的传感器更新和更慢的动画，并比较结果。
- en: See also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Reading sensor data – using the Android Sensor Framework* in the previous
    chapter for details on reading the sensor data.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关读取传感器数据的详细信息，请参阅前一章中的*使用Android传感器框架读取传感器数据*。
- en: Refer to the **getRotationMatrix() Developer Document** at [http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float[],
    float[], float[], float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float%5B%5D,%20float%5B%5D,%20float%5B%5D,%20float%5B%5D))
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考**getRotationMatrix()开发者文档**，位于[http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float[],
    float[], float[], float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float%5B%5D,%20float%5B%5D,%20float%5B%5D,%20float%5B%5D))
- en: Refer to the **getOrientation() Developer Document** at [http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float[],
    float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float%5B%5D,%20float%5B%5D))
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考**getOrientation()开发者文档**，位于[http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float[],
    float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float%5B%5D,%20float%5B%5D))
- en: Refer to the **RotateAnimation Developer Document** at [http://developer.android.com/reference/android/view/animation/RotateAnimation.html](http://developer.android.com/reference/android/view/animation/RotateAnimation.html)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考**RotateAnimation开发者文档**，位于[http://developer.android.com/reference/android/view/animation/RotateAnimation.html](http://developer.android.com/reference/android/view/animation/RotateAnimation.html)
- en: Creating a slideshow with ViewPager
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ViewPager创建幻灯片放映
- en: 'This recipe will show you how to create a slideshow using the `ViewPager` class.
    Here is a screenshot showing a transition from one picture to another:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将向您展示如何使用`ViewPager`类创建幻灯片。以下是显示从一张图片过渡到另一张图片的屏幕截图：
- en: '![Creating a slideshow with ViewPager](img/B05057_09_03.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![使用ViewPager创建幻灯片](img/B05057_09_03.jpg)'
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Create a new project in Android Studio and call it: `SlideShow`. Use the default
    **Phone & Tablet** options and select **Empty Activity** when prompted for the
    **Activity Type**.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，名为`SlideShow`。使用默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: We need several images for the slideshow. For demonstration purposes, we downloaded
    four images from [www.Pixabay.com](http://www.Pixabay.com) to include in the project
    source files, but you can use any images.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要几幅图像用于幻灯片。为了演示目的，我们从[www.Pixabay.com](http://www.Pixabay.com)下载了四张图片包含在项目源文件中，但你可以使用任何图片。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll create a Fragment to display each image for our slideshow, then set
    up the `ViewPager` in the Main Activity. Here are the steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个Fragment来显示幻灯片中的每张图片，然后在主活动中设置`ViewPager`。以下是步骤：
- en: Copy four images to the `/res/drawable` folder and name them `slide_0` through
    `slide_3`, keeping their original file extensions.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四张图片复制到`/res/drawable`文件夹中，并将它们命名为`slide_0`至`slide_3`，保持其原始文件扩展名。
- en: 'Create a new layout file called `fragment_slide.xml` using the following XML:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下XML创建一个名为`fragment_slide.xml`的新布局文件：
- en: '[PRE23]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now create a new Java class called `SlideFragment.` It will extend `Fragment`
    as follows:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个名为`SlideFragment`的新Java类。它将如下扩展`Fragment`：
- en: '[PRE24]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Use the following import:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下导入：
- en: '[PRE25]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following global declaration:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下全局声明：
- en: '[PRE26]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following empty, default fragment constructor:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下空的默认片段构造函数：
- en: '[PRE27]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following method to save the image resource ID:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以保存图像资源ID：
- en: '[PRE28]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Override `onCreateView()` as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下重写`onCreateView()`：
- en: '[PRE29]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Our main activity will display just a `ViewPager`. Open `activity_main.xml`
    and replace the file contents as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的主活动将只显示一个`ViewPager`。打开`activity_main.xml`，并按以下方式替换文件内容：
- en: '[PRE30]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now open `MainActivity.java` and change `MainActivity` to extend `FragmentActivity`
    as shown:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`MainActivity.java`，将`MainActivity`更改为扩展`FragmentActivity`，如下所示：
- en: '[PRE31]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Use the following import:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下导入：
- en: '[PRE32]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following global declarations:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下全局声明：
- en: '[PRE33]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Use the following imports:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下导入：
- en: '[PRE34]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the following subclass within `MainActivity`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`中创建以下子类：
- en: '[PRE35]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Use the following imports:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下导入：
- en: '[PRE36]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Override `onBackPressed()` as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下重写`onBackPressed()`：
- en: '[PRE37]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate()`方法中添加以下代码：
- en: '[PRE38]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run the application on a device or emulator.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first step is to create a fragment. Since we're doing a slideshow, all we
    need is an `ImageViewer`. We also change `MainActivity` to extend `FragmentActivity`
    to load the fragments into the `ViewPager`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个片段。由于我们要做幻灯片，我们只需要一个`ImageViewer`。我们还更改`MainActivity`以扩展`FragmentActivity`，以便将片段加载到`ViewPager`中。
- en: 'The `ViewPager` uses a `FragmentStatePagerAdapter` as the source for the fragments
    to transition. We create the `SlideAdapter` to handle the two callbacks from the
    `FragmentStatePagerAdapter` class:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewPager`使用`FragmentStatePagerAdapter`作为片段过渡的来源。我们创建`SlideAdapter`来处理`FragmentStatePagerAdapter`类中的两个回调：'
- en: '`getCount()`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCount()`'
- en: '`getItem()`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getItem()`'
- en: '`getCount()` simply returns the number of pages we have in our slideshow. `getItem()`
    returns the actual fragment to display. This is where we specify the image we
    want to display. As you can see, it would be very easy to add or change the slideshow.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCount()`简单地返回我们幻灯片中的页面数。`getItem()`返回实际要显示的片段。这里我们指定要显示的图像。如您所见，添加或更改幻灯片会非常容易。'
- en: Handling the *Back* key isn't a requirement for the `ViewPager`, but it does
    provide a better user experience. `onBackPressed()` decrements the current page
    until it reaches the first page, then it sends the *Back* key to the super class,
    which exits the application.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 处理*返回*键不是`ViewPager`的要求，但它确实提供了更好的用户体验。`onBackPressed()`递减当前页面，直到达到第一页，然后它将*返回*键发送给超类，退出应用程序。
- en: There's more...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As you can see from the example, the `ViewPager` takes care of most of the work,
    including handling the transition animations. We can customize the transition
    if we want, by implementing the `transformPage()` callback on the `ViewPager.PageTransformer`
    interface. (See the next recipe for a custom animation.)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，`ViewPager`处理了大部分工作，包括过渡动画的处理。如果我们需要，可以通过实现`ViewPager.PageTransformer`接口上的`transformPage()`回调来自定义过渡。（有关自定义动画，请参见下一个食谱。）
- en: Creating a Setup Wizard
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建设置向导
- en: The `ViewPager` can also be used to create a Setup Wizard. Instead of creating
    a single fragment to display an image, create a fragment for each step of your
    wizard and return the appropriate fragment in the `getItem()` callback.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewPager`还可以用于创建设置向导。而不是创建一个用于显示图片的单个碎片，为向导的每个步骤创建一个碎片，并在`getItem()`回调中返回适当的碎片。'
- en: See also
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to the **Android ViewPager Documentation** at [http://developer.android.com/reference/android/support/v4/view/ViewPager.html](http://developer.android.com/reference/android/support/v4/view/ViewPager.html)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[**Android ViewPager 文档**](http://developer.android.com/reference/android/support/v4/view/ViewPager.html)
- en: Refer to the *Creating a custom Zoom Animation* recipe for an example on creating
    a custom animation.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建自定义动画，请参考*创建自定义缩放动画*食谱中的示例。
- en: Creating a Card Flip Animation with Fragments
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用碎片创建卡牌翻转动画
- en: 'The card flip is a common animation that we will demonstrate using fragment
    transitions. We''ll use two different images—one for the front and one for the
    back, to create the card flip effect. We''ll need four animation resources: two
    for the front and two for the back transitions, which we will define in XML using
    `objectAnimator`.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 牌面翻转是一个常见的动画，我们将使用碎片过渡来演示。我们将使用两张不同的图片——一张用于正面，一张用于背面，以创建牌面翻转效果。我们需要四个动画资源：两个用于正面过渡，两个用于背面过渡，我们将使用`objectAnimator`在XML中定义它们。
- en: 'Here''s a screenshot of the application we''ll build showing the Card Flip
    Animation in action:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将要构建的应用程序的屏幕截图，展示了卡牌翻转动画的实际效果：
- en: '![Creating a Card Flip Animation with Fragments](img/B05057_09_04.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![使用碎片创建卡牌翻转动画](img/B05057_09_04.jpg)'
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `CardFlip`. Use the default
    **Phone & Tablet** options and select **Empty Activity** when prompted for the
    **Activity Type**.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为`CardFlip`。使用默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: 'For the front and back images of the playing card, we found the following images
    on [www.Pixabay.com](http://www.Pixabay.com):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 对于扑克牌的正反面图片，我们在[www.Pixabay.com](http://www.Pixabay.com)上找到了以下图片：
- en: '[https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/](https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在Pixabay上查看图片](https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/)'
- en: '[https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/](https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在Pixabay上查看图片](https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/)'
- en: How to do it...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll need two fragments—one for the front of the card and the other for the
    back. Each fragment will define the image for the card. Then we''ll need four
    animation files for the full card flip effect. Here are the steps to set up the
    project structure correctly and to create the resources needed:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要两个碎片——一个用于牌的正面，另一个用于背面。每个碎片将定义牌的图片。然后我们需要四个动画文件以实现完整的牌面翻转效果。以下是正确设置项目结构并创建所需资源的步骤：
- en: Once you have front and back images for the cards, copy them to the `res/drawable`
    folder as `card_front.jpg` and `card_back.jpg` (keep the original file extension
    of your images if different).
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦有了牌的正反面图片，将它们复制到`res/drawable`文件夹中，分别命名为`card_front.jpg`和`card_back.jpg`（如果图片原始文件扩展名不同，请保持原样）。
- en: 'Create an animator resource directory: `res/animator`. (In Android Studio,
    go to **File** | **New** | **Android resource directory**. When the **New Android
    Resource** dialog displays, choose `animator` in the **Resource Type** dropdown.)'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个动画资源目录：`res/animator`。（在Android Studio中，转到**File** | **New** | **Android
    resource directory**。当显示**New Android Resource**对话框时，在**Resource Type**下拉菜单中选择`animator`。）
- en: 'Create `card_flip_left_enter.xml` in `res/animator` using the following XML:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/animator`中创建`card_flip_left_enter.xml`，使用以下XML：
- en: '[PRE39]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create `card_flip_left_exit.xml` in `res/animator` using the following XML:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/animator`中创建`card_flip_left_exit.xml`，使用以下XML：
- en: '[PRE40]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create `card_flip_right_enter.xml` in `res/animator` using the following XML:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/animator`中创建`card_flip_right_enter.xml`，使用以下XML：
- en: '[PRE41]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create `card_flip_right_exit.xml`in `res/animator` using the following XML:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res/animator` 中创建 `card_flip_right_exit.xml`，使用以下 XML：
- en: '[PRE42]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a new resource file in `res/values` called `timing.xml` using the following
    XML:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res/values` 中创建一个名为 `timing.xml` 的新资源文件，使用以下 XML：
- en: '[PRE43]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a new file in `res/layout` called `fragment_card_front.xml` using the
    following XML:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res/layout` 中创建一个名为 `fragment_card_front.xml` 的新文件，使用以下 XML：
- en: '[PRE44]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a new file in `res/layout` called `fragment_card_back.xml` using the
    following XML:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res/layout` 中创建一个名为 `fragment_card_back.xml` 的新文件，使用以下 XML：
- en: '[PRE45]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a new Java class called `CardFrontFragment` using the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建一个名为 `CardFrontFragment` 的新 Java 类：
- en: '[PRE46]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a new Java class called `CardBackFragment` using the following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建一个名为 `CardBackFragment` 的新 Java 类：
- en: '[PRE47]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Replace the existing `activity_main.xml` file with the following XML:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 XML 替换现有的 `activity_main.xml` 文件：
- en: '[PRE48]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Open `MainActivity.java` and add the following global declaration:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并添加以下全局声明：
- en: '[PRE49]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的 `onCreate()` 方法中添加以下代码：
- en: '[PRE50]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following method, which handles the actual fragment transition:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法，该方法处理实际的片段过渡：
- en: '[PRE51]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Most of the effort to create the card flip is in setting up the resources. Since
    we want a front and back view of the card, we create two fragments with the appropriate
    images. We call the `flipCard()` method when the card is pressed. The actual animation
    is handled by the `setCustomAnimations()`. This is where we pass in the four animation
    resources we defined in XML. As you can see, Android makes it very easy.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 创建卡牌翻转的大部分工作在于设置资源。由于我们需要卡牌的正面和背面视图，因此我们创建了两个带有适当图片的片段。当点击卡牌时，我们调用 `flipCard()`
    方法。实际的动画由 `setCustomAnimations()` 处理。在这里，我们传递了在 XML 中定义的四个动画资源。正如你所看到的，Android
    使这一过程变得非常简单。
- en: It's important to note that we did not use the Support Library Fragment Manager,
    as the support library does not support the `objectAnimator`. If you want support
    preAndroid 3.0, you'll need to include the old `anim` resources and check the
    OS version at runtime, or create the animation resources in code. (See the next
    recipe.)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们没有使用 Support Library Fragment Manager，因为支持库不支持 `objectAnimator`。如果你想要支持低于
    Android 3.0 的版本，你需要包含旧的 `anim` 资源并在运行时检查操作系统版本，或者在代码中创建动画资源。（请参阅下一个示例。）
- en: See also
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: See the next recipe, *Creating a Zoom Animation with a Custom Transition*, for
    an example of animation resources created in code
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅下一个示例，*使用自定义过渡创建缩放动画*，了解在代码中创建的动画资源示例。
- en: Refer to the **Integer Resource Type** web page at [https://developer.android.com/guide/topics/resources/more-resources.html#Integer](https://developer.android.com/guide/topics/resources/more-resources.html#Integer)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参阅 **Integer Resource Type** 的网页，链接为 [https://developer.android.com/guide/topics/resources/more-resources.html#Integer](https://developer.android.com/guide/topics/resources/more-resources.html#Integer)。
- en: Creating a Zoom Animation with a Custom Transition
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义过渡创建缩放动画
- en: The previous recipe, *Creating a Card Flip Animation with Fragments*, demonstrated
    a transition animation using animation resource files. In this recipe, we will
    create a zoom effect using animation resources created in code. The application
    shows a thumbnail image then expands to an enlarged image when pressed.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个示例，*使用片段创建卡牌翻转动画*，演示了使用动画资源文件的过渡动画。在本示例中，我们将使用代码中创建的动画资源来创建缩放效果。应用程序显示一个缩略图，当点击时会放大显示完整图片。
- en: 'The following image contains three screenshots showing the zoom animation in
    action:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 下图包含了三个屏幕截图，展示了缩放动画的实际效果：
- en: '![Creating a Zoom Animation with a Custom Transition](img/B05057_09_05.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义过渡创建缩放动画](img/B05057_09_05.jpg)'
- en: Getting ready
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `<project name>`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for the **Activity Type**.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新项目，命名为 `<项目名称>`。使用默认的 **Phone & Tablet** 选项，并在提示 **Activity
    Type** 时选择 **Empty Activity**。
- en: For the image needed for this recipe, we downloaded a picture from [www.Pixabay.com](http://www.Pixabay.com)
    to include in the project source files, but you can use any image.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个示例所需的图片，我们从 [www.Pixabay.com](http://www.Pixabay.com) 下载了一张图片并包含在项目源文件中，但你可以使用任何图片。
- en: How to do it...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have your image ready as stated previously, follow these steps:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前所述准备好你的图片后，执行以下步骤：
- en: Copy your image to the `res/drawable` folder and name it `image.jpg` (if not
    a jpeg image, keep the original file extension).
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的图片复制到`res/drawable`文件夹中，并将其命名为`image.jpg`（如果不是jpeg格式，保持原始文件扩展名）。
- en: 'Now open `activity_main.xml` and replace the existing XML with the following:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`activity_main.xml`文件，用以下内容替换现有的XML：
- en: '[PRE52]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now open `MainActivity.java` and declare the following global variables:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`MainActivity.java`文件，并声明以下全局变量：
- en: '[PRE53]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add the `loadSampledResource()` method we created in the *Scaling down large
    images to avoid Out of Memory exceptions* recipe to scale the image:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加我们在*缩放大型图片以避免内存溢出异常*食谱中创建的`loadSampledResource()`方法来缩放图片：
- en: '[PRE54]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate()`方法中添加以下代码：
- en: '[PRE55]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the following `zoomFromThumbnail()` method, which handles the actual animation
    and is explained later on:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`zoomFromThumbnail()`方法，该方法处理实际的动画，稍后会进行解释：
- en: '[PRE56]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Run the application on a device or emulator.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, take a look at the layout file we used. There are two parts—the `LinearLayout`
    with the thumbnail `ImageView`, and the expanded `ImageView`. We control the visibility
    of both views as the images are clicked. We set the starting thumbnail image using
    the same `loadSampledResource()` as discussed in the *Scaling down large images
    to avoid Out of Memory exceptions* recipe.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看看我们使用的布局文件。它有两部分——带有缩略图`ImageView`的`LinearLayout`，以及展开的`ImageView`。当点击图片时，我们控制这两个视图的可见性。我们使用与*缩放大型图片以避免内存溢出异常*食谱中讨论的相同的`loadSampledResource()`来设置开始的缩略图。
- en: The `zoomFromThumbnail()` is where the real work is being done for this demonstration.
    There's a lot of code, which breaks down as follows.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`zoomFromThumbnail()`是本次演示中实际完成工作的地方。代码很多，下面进行分解说明。'
- en: First, we store the current animation in `mCurrentAnimator`, so we can cancel
    if the animation is currently running.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将当前动画存储在`mCurrentAnimator`中，这样如果动画当前正在运行，我们可以取消它。
- en: Next, we get the starting position of the image using the `getGlobalVisibleRect()`
    method. This returns the screen position of the view. When we get the visible
    bounds of the expanded `ImageView`, we also get the `GlobalOffset` of the view
    to offset the coordinates from app coordinates to screen coordinates.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`getGlobalVisibleRect()`方法获取图片的起始位置。这返回视图的屏幕位置。当我们获取展开的`ImageView`的可见边界时，我们还会获取视图的`GlobalOffset`，以将坐标从应用坐标偏移到屏幕坐标。
- en: With the starting bounds set, the next step is to calculate the ending bounds.
    We want to keep the same aspect ratio for the final image to prevent it from being
    skewed. We need to calculate how the bounds need to be adjusted to keep the aspect
    ratio within the expanded `ImageView`. The screenshot shown in the introduction
    shows how this image was sized, but this will vary by image and device.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了起始边界后，下一步是计算结束边界。我们希望最终图片保持相同的宽高比，以防止它变形。我们需要计算边界需要如何调整，以保持宽高比在展开的`ImageView`内。引言中的截图显示了此图片的大小，但这将因图片和设备而异。
- en: 'With the starting and ending bounds calculated, we can now create the animation—actually,
    four animations in this case. One animation for each point of the rectangle, as
    shown in this code:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 计算好起始和结束边界后，我们现在可以创建动画——实际上，在这种情况下是四个动画。如下代码所示，每个矩形的每个点都有一个动画：
- en: '[PRE57]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'These two lines of code control how the animation appears:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行代码控制动画的外观：
- en: '[PRE58]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `setDuration()` method tells the animator object how long it should take
    to animate the translations set previously. `setInterpolator()` governs how the
    translation is made. (The Interpolator was mentioned in the *Introduction*, and
    a link is provided further on.) After starting the animation with the `start()`
    method, we save the current animation to the `mCurrentAnimator` variable, so the
    animation can be cancelled, if needed. We create an `AnimatorListenerAdapter`
    to respond to the animation events, to clear the `mCurrentAnimator` variable.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`setDuration()`方法告诉动画对象完成之前设置的转换需要多长时间。`setInterpolator()`控制如何进行转换。（在*引言*中提到了插值器，并在后面提供了链接。）使用`start()`方法启动动画后，我们将当前动画保存到`mCurrentAnimator`变量中，以便在需要时可以取消动画。我们创建了一个`AnimatorListenerAdapter`以响应动画事件，清除`mCurrentAnimator`变量。'
- en: There's more...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When the user presses the Expanded Image, the application just hides the expanded
    `ImageView` and sets the thumbnail as `visible`. We could create a reverse zoom
    animation in the `mImageViewExpanded` click event using the expanded bounds as
    the starting point returning to the thumbnail bounds. (It would probably be easier
    to create the `mImageViewExpanded` event in the `zoomFromThumbnail()` to avoid
    having to duplicate calculating the start and stop bounds again.)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击展开的图片时，应用只是隐藏了展开的`ImageView`并将缩略图设置为`可见`。我们可以在`mImageViewExpanded`的点击事件中使用扩展边界作为起点，返回到缩略图边界来创建反向缩放动画。（在`zoomFromThumbnail()`中创建`mImageViewExpanded`事件可能更容易，以避免再次重复计算开始和结束边界。）
- en: Getting the default animation duration
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取默认动画持续时间
- en: 'Our code used 1000 milliseconds when setting the duration with `setDuration()`.
    We purposely used a long duration to make it easier to view the animation. We
    can get the default Android animation duration using the following code:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码在调用`setDuration()`设置持续时间时使用了1000毫秒。我们故意使用较长的持续时间，以便更容易查看动画。我们可以使用以下代码获取默认的Android动画持续时间：
- en: '[PRE59]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: See also
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The first recipe, *Scaling down large images to avoid Out of Memory exceptions*,
    for a detailed explanation of the `loadSampledResource()` method.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个食谱，*缩小大图以避免内存溢出异常*，其中详细解释了`loadSampledResource()`方法。
- en: Refer to the **Interpolator Developer Document** at [http://developer.android.com/reference/android/view/animation/Interpolator.html](http://developer.android.com/reference/android/view/animation/Interpolator.html)
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[http://developer.android.com/reference/android/view/animation/Interpolator.html](http://developer.android.com/reference/android/view/animation/Interpolator.html)的**插值器开发者文档**。
