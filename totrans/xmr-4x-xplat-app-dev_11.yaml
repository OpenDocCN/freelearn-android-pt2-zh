- en: Chapter 11. Xamarin.Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。Xamarin.Forms
- en: 'Since the beginning of Xamarin''s life as a company, their motto has always
    been to present the native APIs on iOS and Android idiomatically to C#. This was
    a great strategy in the beginning, because applications built with Xamarin.iOS
    or Xamarin.Android were pretty much indistinguishable from native Objective-C
    or Java applications. Code sharing was generally limited to non-UI code, which
    left a potential gap to fill in the Xamarin ecosystem: a cross-platform UI abstraction.
    Xamarin.Forms is the solution to this problem, a cross-platform UI framework that
    renders native controls on each platform. `Xamarin.Forms` is a great framework
    for those that know C# (and XAML), but also may not want to get into the full
    details of using the native iOS and Android APIs.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Xamarin 公司成立以来，他们的宗旨一直是将 iOS 和 Android 的本地 API 以符合 C# 习惯的方式呈现出来。这在最初是一个很好的策略，因为使用
    Xamarin.iOS 或 Xamarin.Android 构建的应用程序几乎与本地 Objective-C 或 Java 应用程序无法区分。代码共享通常仅限于非
    UI 代码，这为 Xamarin 生态系统留下了一个潜在的空白：跨平台 UI 抽象。Xamarin.Forms 就是解决这一问题的方案，它是一个跨平台 UI
    框架，在每个平台上渲染本地控件。`Xamarin.Forms` 是一个非常适合那些懂 C#（和 XAML）但可能不想深入了解本地 iOS 和 Android
    API 的人的框架。
- en: 'In this chapter, we will do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进行以下操作：
- en: Create *Hello World* in Xamarin.Forms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Xamarin.Forms 中的 *Hello World*
- en: Discuss the Xamarin.Forms architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论 Xamarin.Forms 架构
- en: Use XAML with Xamarin.Forms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Xamarin.Forms 中使用 XAML
- en: Cover data binding and MVVM with Xamarin.Forms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 Xamarin.Forms 中的数据绑定和 MVVM
- en: Creating Hello World in Xamarin.Forms
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Xamarin.Forms 中创建 Hello World
- en: To understand how a Xamarin.Forms application is put together, let's begin by
    creating a simple *Hello World* application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何组合 Xamarin.Forms 应用程序，让我们先创建一个简单的 *Hello World* 应用程序。
- en: 'Open Xamarin Studio and perform the following steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Xamarin Studio 并执行以下步骤：
- en: Create a new **Multiplatform** | **App** | **Forms App** project from the new
    solution dialog.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从新建解决方案对话框中创建一个新的**多平台** | **应用** | **表单应用**项目。
- en: Name your solution something appropriate, such as `HelloForms`.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的解决方案取一个合适的名字，比如 `HelloForms`。
- en: Make sure **Use Portable Class Library** is selected.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**使用便携式类库**被选中。
- en: Click **Next**, then click **Create**.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，然后点击**创建**。
- en: 'Notice the three new projects that were successfully created:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到成功创建了以下三个新项目：
- en: HelloForms
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HelloForms
- en: HelloForms.Android
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HelloForms.Android
- en: HelloForms.iOS
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HelloForms.iOS
- en: In `Xamarin.Forms` applications, the bulk of your code will be shared, and each
    platform-specific project is just a small amount of code that starts up the Xamarin.Forms
    framework.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Xamarin.Forms` 应用程序中，大部分代码将是共享的，每个特定平台的项目只是一小部分代码，用于启动 Xamarin.Forms 框架。
- en: 'Let''s examine the minimum parts of a Xamarin.Forms application:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下 Xamarin.Forms 应用程序的最小组成部分：
- en: '`App.xaml` and `App.xaml.cs` in the `HelloForms` PCL library -- this class
    is the main starting point of the Xamarin.Forms application. A simple property,
    `MainPage`, is set to the first page in the application. In the default project
    template, `HelloFormsPage` is created with a single label that will be rendered
    as a `UILabel` on iOS and a `TextView` on Android.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloForms` PCL 库中的 `App.xaml` 和 `App.xaml.cs` —— 这个类是 Xamarin.Forms 应用程序的主要启动点。一个简单的属性
    `MainPage` 被设置为应用程序中的第一页。在默认项目模板中，`HelloFormsPage` 被创建，其中有一个单一标签，在 iOS 上将渲染为 `UILabel`，在
    Android 上将渲染为 `TextView`。'
- en: '`MainActivity.cs` in the `HelloForms.Android` Android project -- the main launcher
    activity of the Android application. The important parts for Xamarin.Forms here
    is the call to `Forms.Init(this, bundle)`, which initializes the Android-specific
    portion of the Xamarin.Forms framework. Next is a call to `LoadApplication(new
    App())`, which starts our Xamarin.Forms application.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloForms.Android` Android 项目中的 `MainActivity.cs` —— Android 应用程序的主要启动活动。对于
    Xamarin.Forms 来说，这里重要的是调用 `Forms.Init(this, bundle)`，它初始化了 Xamarin.Forms 框架的 Android
    特定部分。接下来是调用 `LoadApplication(new App())`，它启动了我们的 Xamarin.Forms 应用程序。'
- en: '`AppDelegate.cs` in the `HelloForms.iOS` iOS project -- very similar to Android,
    except iOS applications start up using a `UIApplicationDelegate` class. `Forms.Init()`
    will initialized the iOS-specific parts of Xamarin.Forms, and just as Android''s
    `LoadApplication(new App())`, will start the Xamarin.Forms application.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloForms.iOS` iOS 项目中的 `AppDelegate.cs` —— 与 Android 非常相似，不同之处在于 iOS 应用程序使用
    `UIApplicationDelegate` 类启动。`Forms.Init()` 将初始化 Xamarin.Forms 的 iOS 特定部分，与 Android
    的 `LoadApplication(new App())` 类似，将启动 Xamarin.Forms 应用程序。'
- en: 'Go ahead and run the iOS project; you should see something similar to the following
    screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接着运行 iOS 项目；你应该能看到类似以下截图的内容：
- en: '![Creating Hello World in Xamarin.Forms](img/image00262.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![在Xamarin.Forms中创建Hello World](img/image00262.jpeg)'
- en: 'If you run the Android project, you will get a UI very similar to the iOS one
    shown in the following screenshot, but using native Android controls:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行Android项目，将得到一个非常类似于以下屏幕截图所示的iOS UI，但使用的是原生Android控件：
- en: '![Creating Hello World in Xamarin.Forms](img/image00263.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![在Xamarin.Forms中创建Hello World](img/image00263.jpeg)'
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Even though it's not covered in this book, Xamarin.Forms also supports Windows
    Phone, WinRT, and UWP applications. However, a PC running Windows and Visual Studio
    is required to develop for Windows platforms. If you can get a Xamarin.Forms application
    working on iOS and Android, then getting a Windows Phone version working should
    be a piece of cake.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这本书没有涉及，但Xamarin.Forms也支持Windows Phone、WinRT和UWP应用程序。然而，要为Windows平台开发，需要一台运行Windows和Visual
    Studio的PC。如果您能让Xamarin.Forms应用程序在iOS和Android上运行，那么让Windows Phone版本运行应该轻而易举。
- en: Understanding the architecture behind Xamarin.Forms
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Xamarin.Forms背后的架构
- en: Getting started with Xamarin.Forms is very easy, but it is always good to look
    behind the scenes to understand how everything is put together. In the earlier
    chapters of this book, we created a cross-platform application using native iOS
    and Android APIs directly. Certain applications are much more suited for this
    development approach, so understanding the difference between a Xamarin.Forms
    application and a *classic* Xamarin application is important when choosing what
    framework is best suited for your app.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Xamarin.Forms非常简单，但深入了解其幕后原理以理解一切是如何组合在一起的总是好的。在这本书的前几章中，我们使用原生iOS和Android
    API直接创建了一个跨平台应用程序。某些应用程序更适合这种开发方法，因此在选择最适合您应用框架时，理解Xamarin.Forms应用程序与*传统* Xamarin应用程序之间的区别非常重要。
- en: Xamarin.Forms is an abstraction over the native iOS and Android APIs that you
    can call directly from C#. So, Xamarin.Forms is using the same APIs you would
    in a *classic* Xamarin application, while providing a framework that allows you
    to define your UIs in a cross-platform way. An abstraction layer such as this
    is in many ways a very good thing, because it gives you the benefit of sharing
    the code driving your UI as well as any backend C# code that could also have been
    shared in a standard Xamarin app. The main disadvantage, however, is a slight
    hit in performance that might make it more difficult to create a perfect, buttery-smooth
    experience. Xamarin.Forms gives the option of writing **renderers** and **effects**
    that allow you to override your UI in a platform-specific way. This gives you
    the ability to drop down to native controls where needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Forms是原生iOS和Android API之上的抽象，您可以直接从C#调用。因此，Xamarin.Forms使用的是与*传统* Xamarin应用程序相同的API，同时提供了一个框架，允许您以跨平台的方式定义UI。这样的抽象层在很多方面都是非常好的，因为它不仅允许您共享推动UI的代码，还可以共享可能在标准Xamarin应用程序中共享的任何后端C#代码。然而，主要缺点是性能上会有轻微的影响，这可能使得创建完美流畅的体验变得更加困难。Xamarin.Forms提供了编写**渲染器**和**效果**的选项，允许您以特定于平台的方式覆盖UI。这使您能够根据需要使用原生控件。
- en: 'Have a look at the differences between a Xamarin.Forms application and a traditional
    Xamarin app in the following diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下图表中Xamarin.Forms应用程序与传统Xamarin应用程序之间的区别：
- en: '![Understanding the architecture behind Xamarin.Forms](img/image00264.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![理解Xamarin.Forms背后的架构](img/image00264.jpeg)'
- en: In both applications, the business logic and backend code of the application
    can be shared, but Xamarin.Forms gives an enormous benefit by allowing your UI
    code to be shared as well.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个应用程序中，应用程序的业务逻辑和后端代码可以共享，但Xamarin.Forms允许您也可以共享UI代码，这是一个巨大的优势。
- en: 'Additionally, Xamarin.Forms applications have two project templates to choose
    from, so let''s cover each option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Xamarin.Forms应用程序有两个项目模板可供选择，让我们来了解每个选项：
- en: '**Xamarin.Forms Shared**: Creates a shared project with all of your Xamarin.Forms
    code, an iOS project, and an Android project'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.Forms Shared**：创建一个包含所有Xamarin.Forms代码的共享项目，以及iOS项目和Android项目'
- en: '**Xamarin.Forms Portable**: Creates a **Portable Class Library** (**PCL**)
    containing all shared Xamarin.Forms code, an iOS project, and an Android project'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.Forms Portable**：创建一个包含所有共享Xamarin.Forms代码的**便携式类库**（**PCL**），以及iOS项目和Android项目'
- en: Both options will work well for any application, in general. Shared projects
    are basically a collection of code files that get added automatically by another
    project referencing it. Using a shared project allows you to use preprocessor
    statements to implement platform-specific code. PCL projects, on the other hand,
    create a portable .NET assembly that can be used on iOS, Android, and various
    other platforms. PCLs can't use preprocessor statements, so you generally set
    up platform-specific code with interface or abstract/base classes. In most cases,
    I think a PCL is a better option, since it inherently encourages better programming
    practices. See [Chapter 3](part0031.xhtml#aid-TI1E2 "Chapter 3. Code Sharing Between
    iOS and Android"), *Code Sharing between iOS and Android*, for details on the
    advantages and disadvantages of these two code-sharing techniques.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，这两种选项对任何应用程序都适用。共享项目基本上是一组代码文件，当其他项目引用它时，这些文件会自动添加。使用共享项目允许你使用预处理器语句来实现平台特定的代码。另一方面，PCL项目创建了一个可移植的.NET程序集，可以在iOS、Android以及各种其他平台上使用。PCL不能使用预处理器语句，因此你通常可以使用接口或抽象/基类来设置平台特定的代码。在大多数情况下，我认为PCL是一个更好的选择，因为它本质上鼓励更好的编程实践。有关这两种代码共享技术的优缺点，请参见[第3章](part0031.xhtml#aid-TI1E2
    "第3章. iOS和Android之间的代码共享")，*iOS和Android之间的代码共享*。
- en: Using XAML in Xamarin.Forms
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Xamarin.Forms中使用XAML
- en: In addition to defining Xamarin.Forms controls from C# code, Xamarin has provided
    the tooling for developing your UI in **Extensible Application Markup Language
    (XAML)**. XAML is a declarative language that is basically a set of XML elements
    that map to a certain control in the Xamarin.Forms framework. Using XAML is comparable
    to using HTML to define the UI on a webpage, with the exception that XAML in Xamarin.Forms
    is creating C# objects that represent a native UI.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从C#代码定义Xamarin.Forms控件外，Xamarin还提供了在**可扩展应用程序标记语言（XAML）**中开发用户界面的工具。XAML是一种声明性语言，基本上是一组映射到Xamarin.Forms框架中某个控件的XML元素。使用XAML类似于使用HTML定义网页上的UI，不同之处在于Xamarin.Forms中的XAML创建代表原生UI的C#对象。
- en: 'To understand how XAML works in Xamarin.Forms, let''s create a new page with
    different types of Xamarin.Forms controls on it. Return to your `HelloForms` project
    from earlier, and open the `HelloFormsPage.xaml` file. Add the following XAML
    code between the `<ContentPage>` tags:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解XAML在Xamarin.Forms中的工作原理，让我们创建一个带有不同类型的Xamarin.Forms控件的新页面。回到之前的项目`HelloForms`，打开`HelloFormsPage.xaml`文件。在`<ContentPage>`标签之间添加以下XAML代码：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Go ahead and run the application on iOS; your application will look something
    like the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接着在iOS上运行应用程序；你的应用程序看起来会像以下截图：
- en: '![Using XAML in Xamarin.Forms](img/image00265.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![在Xamarin.Forms中使用XAML](img/image00265.jpeg)'
- en: 'On Android, the application looks identical to iOS, except it is using native
    Android controls instead of the iOS counterparts:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，应用程序与iOS看起来完全相同，只是使用了原生的Android控件而不是iOS的对应控件：
- en: '![Using XAML in Xamarin.Forms](img/image00266.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![在Xamarin.Forms中使用XAML](img/image00266.jpeg)'
- en: In our XAML, we created a `StackLayout` control, which is a container for other
    controls. It can lay out controls either vertically or horizontally one by one,
    as defined by the `Orientation` value. We also applied a padding of 10 around
    the sides and bottom, and 20 from the top to adjust for the iOS status bar. You
    may be familiar with this syntax for defining rectangles if you are familiar with
    WPF or Silverlight. Xamarin.Forms uses the same syntax of left, top, right, and
    bottom values, delimited by commas.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的XAML中，我们创建了一个`StackLayout`控件，它是其他控件的容器。它可以按顺序垂直或水平地布局控件，由`Orientation`值定义。我们还应用了四周和底部10的填充，以及顶部20的调整以适应iOS状态栏。如果你熟悉WPF或Silverlight，你可能熟悉这种定义矩形的语法。Xamarin.Forms使用相同的语法，即左、上、右和下值，由逗号分隔。
- en: 'We also used several of the built-in Xamarin.Forms controls to see how they
    work:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了几个内置的Xamarin.Forms控件来看看它们是如何工作的：
- en: '`Label`: We used this earlier in the chapter. Used only for displaying text,
    this maps to a `UILabel` on iOS and a `TextView` on Android.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Label`：我们在这章前面已经使用过它。仅用于显示文本，在iOS上它对应于`UILabel`，在Android上对应于`TextView`。'
- en: '`Button`: A general purpose button that can be tapped by a user. This control
    maps to a `UIButton` on iOS and a `Button` on Android.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Button`：一个通用按钮，可以被用户点击。这个控件在iOS上映射到`UIButton`，在Android上映射到`Button`。'
- en: '`Entry`: This control is a single-line text entry. It maps to a `UITextField`
    on iOS and an `EditText` on Android.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Entry`：这个控件是单行文本输入。在iOS上它映射到`UITextField`，在Android上映射到`EditText`。'
- en: '`Image`: This is a simple control for displaying an image on the screen, which
    maps to a `UIImage` on iOS and an `ImageView` on Android. We used the `Source`
    property of this control, which loads an image from a web address. Using URLs
    on this property is nice, but it is best for performance to include the image
    in your project where possible.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Image`：这是一个简单的控件，用于在屏幕上显示图像，对应于 iOS 上的`UIImage`和 Android 上的`ImageView`。我们使用了这个控件的`Source`属性，它从网络地址加载图像。在这个属性上使用
    URL 很好，但在可能的情况下最好将图像包含在你的项目中以获得最佳性能。'
- en: '`Switch`: This is an on/off switch or toggle button. It maps to a `UISwitch`
    on iOS and a `Switch` on Android.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Switch`：这是一个开关或切换按钮。在 iOS 上映射到`UISwitch`，在 Android 上映射到`Switch`。'
- en: '`Stepper`: This is a general-purpose input for entering numbers using two plus
    and minus buttons. On iOS, this maps to a `UIStepper`, while on Android, Xamarin.Forms
    implements this functionality with two buttons.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Stepper`：这是一个通用输入控件，通过两个加减按钮来输入数字。在 iOS 上，这对应于`UIStepper`，而在 Android 上，Xamarin.Forms
    使用两个按钮来实现这一功能。'
- en: These are just some of the controls provided by Xamarin.Forms. There are also
    more complicated controls, such as the `ListView` and `TableView`, which you would
    expect for delivering mobile UIs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是 Xamarin.Forms 提供的一些控件。还有更复杂的控件，比如`ListView`和`TableView`，你可以期待它们用于提供移动 UI。
- en: 'Even though we used XAML in this example, you could also implement this Xamarin.Forms
    page from C#. Here is an example of what that would look like:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在这个例子中我们使用了 XAML，但你也可以用 C# 实现 Xamarin.Forms 页面。下面是使用 C# 实现的例子：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, you can see where using XAML can be a bit more readable, and is generally
    a bit better at declaring UIs than C#. However, using C# to define your UIs is
    still a viable, straightforward approach.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以看到使用 XAML 可能会更加易读，通常在声明 UI 方面比 C# 更好。但是，使用 C# 来定义你的 UI 仍然是一个可行且直接的方法。
- en: Using data-binding and MVVM
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据绑定和 MVVM
- en: At this point, you should be grasping the basics of Xamarin.Forms, but are wondering
    how the MVVM design pattern fits into the picture. The MVVM design pattern was
    originally conceived for use along with XAML and the powerful data binding features
    XAML provides, so it is only natural that it is a perfect design pattern to be
    used with Xamarin.Forms.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你应该已经掌握了 Xamarin.Forms 的基础知识，但可能会想知道 MVVM 设计模式如何融入其中。MVVM 设计模式最初是为了与 XAML
    一起使用，以及 XAML 提供的强大的数据绑定功能，因此它与 Xamarin.Forms 一起使用是一个完美的设计模式。
- en: 'Let''s cover the basics of how data-binding and MVVM is set up with Xamarin.Forms:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一些关于如何使用 Xamarin.Forms 设置数据绑定和 MVVM 的基础知识：
- en: Your Model and ViewModel layers will remain mostly unchanged from the MVVM pattern
    we covered earlier in the book.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的模型和 ViewModel 层在本书前面讲到的 MVVM 模式中基本上保持不变。
- en: Your ViewModels should implement the `INotifyPropertyChanged` interface, which
    facilitates data binding. To simplify things in Xamarin.Forms, you can use the
    `BindableObject` base class and call `OnPropertyChanged` when values change on
    your ViewModels.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的 ViewModel 应该实现`INotifyPropertyChanged`接口，这有助于数据绑定。为了简化在 Xamarin.Forms 中的操作，你可以使用`BindableObject`基类，并在你的
    ViewModel 中值发生变化时调用`OnPropertyChanged`。
- en: Any `Page` or control in Xamarin.Forms has a `BindingContext`, which is the
    object that it is data-bound to. In general, you can set a corresponding ViewModel
    to each view's `BindingContext` property.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xamarin.Forms 中的任何`Page`或控件都有一个`BindingContext`，这是它绑定的数据对象。通常，你可以为每个视图的`BindingContext`属性设置一个相应的
    ViewModel。
- en: In XAML, you can set up a data-binding by using syntax of the form `Text="{Binding
    Name}"`. This example would bind the `Text` property of the control to a `Name`
    property of the object residing in the `BindingContext`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 XAML 中，你可以使用`Text="{Binding Name}"`这样的语法设置数据绑定。这个例子将控件的`Text`属性绑定到`BindingContext`中的对象的`Name`属性。
- en: In conjunction with data binding, events can be translated to commands using
    the `ICommand` interface. So, for example, the click event of a `Button` can be
    data-bound to a command exposed by a ViewModel. There is a built-in `Command`
    class in Xamarin.Forms to support this.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结合数据绑定，事件可以使用`ICommand`接口转换为命令。因此，例如，`Button`的点击事件可以绑定到 ViewModel 公开的命令。Xamarin.Forms
    中有一个内置的`Command`类来支持这一点。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Data binding can also be set up with C# code in Xamarin.Forms using the `Binding`
    class. However, it is generally much easier to set up bindings with XAML, since
    the syntax has been simplified with XAML markup extensions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin.Forms 中，也可以使用`Binding`类通过 C# 代码设置数据绑定。但是，通常使用 XAML 设置绑定要容易得多，因为语法已经通过
    XAML 标记扩展简化了。
- en: Now that we have covered the basics, let's go through step-by-step and partially
    convert our `XamSnap` sample application from earlier in the book to use Xamarin.Forms.
    For the most part, we can reuse most of the Model and ViewModel layers, although
    we will have to make a few minor changes to support data-binding with XAML.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了基础知识，让我们一步一步地部分转换本书前面提到的`XamSnap`示例应用程序以使用Xamarin.Forms。在大多数情况下，我们可以重用Model和ViewModel层，尽管我们需要进行一些小改动以支持与XAML的数据绑定。
- en: 'Let''s begin by creating a new Xamarin.Forms application backed by a PCL, named
    `XamSnap`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个由PCL支持的新的Xamarin.Forms应用程序开始，名为`XamSnap`：
- en: First, create three folders in the `XamSnap` project named `Views`, `ViewModels`,
    and `Models`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`XamSnap`项目中创建三个名为`Views`、`ViewModels`和`Models`的文件夹。
- en: Add the appropriate `ViewModels` and `Models` classes from the `XamSnap` application
    from earlier chapters; these are found in the `XamSnap` project.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的章节中添加适当的`ViewModels`和`Models`类到`XamSnap`应用程序中，这些可以在`XamSnap`项目中找到。
- en: Build the project, just to make sure everything is saved. You will get a few
    compiler errors, which we will resolve shortly.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目，确保一切已保存。你可能会遇到几个编译错误，我们很快就会解决。
- en: 'The first class we will need to edit is the `BaseViewModel` class; open it
    and make the following changes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编辑的第一个类是`BaseViewModel`类；打开它并进行以下更改：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First of all, we removed the calls to the `ServiceContainer` class, because
    Xamarin.Forms provides its own IoC container called the `DependencyService`. It
    functions very similarly to the container we built in the previous chapters, except
    it only has one method, `Get<T>`, and registrations are set up via an assembly
    attribute that we will set up shortly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们移除了对`ServiceContainer`类的调用，因为Xamarin.Forms提供了自己的IoC容器，名为`DependencyService`。它的功能与我们前几章构建的容器非常相似，不同之处在于它只有一个方法`Get<T>`，并且通过我们很快会设置的程序集属性来设置注册。
- en: Additionally, we removed the `IsBusyChanged` event in favor of the `INotifyPropertyChanged`
    interface that supports data binding. Inheriting from `BindableObject` gave us
    the helper method, `OnPropertyChanged`, which we use to inform bindings in Xamarin.Forms
    that the value has changed. Notice we didn't pass a `string` containing the property
    name to `OnPropertyChanged`. This method is using a lesser-known feature of .NET
    4.0 called `CallerMemberName`, which will automatically fill in the calling property's
    name at runtime.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们移除了`IsBusyChanged`事件，转而使用支持数据绑定的`INotifyPropertyChanged`接口。从`BindableObject`继承为我们提供了辅助方法`OnPropertyChanged`，我们用它来通知Xamarin.Forms中的绑定值已更改。注意我们没有向`OnPropertyChanged`传递包含属性名称的`string`。这个方法使用了.NET
    4.0的一个不太知名的特性，称为`CallerMemberName`，它将在运行时自动填充调用属性的名字。
- en: 'Next, let''s set up the services we need with the `DependencyService`. Open
    `App.xaml.cs` in the root of the PCL project and add the following two lines above
    the namespace declaration:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们用`DependencyService`设置所需的服务。打开PCL项目根目录中的`App.xaml.cs`文件，并在命名空间声明上方添加以下两行：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `DependencyService` will automatically pick up these attributes and inspect
    the types we declared. Any interfaces these types implement will be returned for
    any future callers of `DependencyService.Get<T>`. I normally put all `Dependency`
    declarations in the `App.cs` file, just so they are easy to manage and in one
    place.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`DependencyService`将自动识别这些属性并检查我们声明的类型。这些类型实现的任何接口都将返回给任何未来调用`DependencyService.Get<T>`的调用者。我通常将所有的`Dependency`声明放在`App.cs`文件中，这样它们易于管理和集中管理。'
- en: 'Next, let''s modify `LoginViewModel` by adding a new property:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过添加一个新属性来修改`LoginViewModel`：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We''ll use this shortly for data-binding the command of a `Button`. One last
    change in the view model layer is to set up `INotifyPropertyChanged` for `MessageViewModel`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将很快使用它来绑定`Button`的命令。在视图模型层的最后一个变化是为`MessageViewModel`设置`INotifyPropertyChanged`：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Likewise, you could repeat this pattern for the remaining public properties
    throughout the view model layer, but this is all we will need for this example.
    Next, let''s create a new `Forms ContentPage Xaml` file named `LoginPage` in the
    `Views` folder. In the code-behind file, `LoginPage.xaml.cs`, we''ll just need
    to make a few changes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以对视图模型层中其余的公共属性重复这个模式，但这个例子我们只需要这些。接下来，在`Views`文件夹中创建一个新的`Forms ContentPage
    Xaml`文件，名为`LoginPage`。在代码隐藏文件`LoginPage.xaml.cs`中，我们只需要进行一些更改：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We did a few important things here, including setting the `BindingContext` to
    our `LoginViewModel`. We set up the `LoginCommand`, which basically invokes the
    `Login` method and displays a message if something goes wrong. It also navigates
    to a new page if successful. We also set the `Title`, which will show up in the
    top navigation bar of the application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了几件重要的事情，包括将`BindingContext`设置为我们`LoginViewModel`。我们设置了`LoginCommand`，它基本上调用了`Login`方法，并在出现问题时显示消息。如果成功，它还会导航到一个新页面。我们还设置了`Title`，它将显示在应用程序的顶部导航栏中。
- en: 'Next, open `LoginPage.xaml` and we''ll add the following XAML code inside `ContentPage`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`LoginPage.xaml`，我们将在`ContentPage`内添加以下XAML代码：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will set up the basics of two text fields, a button, and a spinner, complete
    with all the bindings to make everything work. Since we set up `BindingContext`
    from the `LoginPage` code-behind file, all the properties are bound to `LoginViewModel`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置两个文本字段、一个按钮和一个微调器的基础，以及使所有内容正常工作的所有绑定。由于我们从`LoginPage`代码后台文件中设置了`BindingContext`，所有属性都绑定到了`LoginViewModel`。
- en: 'Next, create `ConversationsPage` as a XAML page just like before, and edit
    the `ConversationsPage.xaml.cs` code-behind file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，像之前一样创建一个XAML页面`ConversationsPage`，并编辑`ConversationsPage.xaml.cs`代码后台文件：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, we repeated a lot of the same steps. The exception is that we
    used the `OnAppearing` method as a way to load the conversations to display on
    the screen.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，我们重复了许多相同的步骤。不同之处在于我们使用了`OnAppearing`方法来加载屏幕上显示的对话。
- en: 'Now let''s add the following XAML code to `ConversationsPage.xaml`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下XAML代码添加到`ConversationsPage.xaml`中：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we used `ListView` to data-bind a list of items and display
    on the screen. We defined a `DataTemplate` class, which represents a set of cells
    for each item in the list that the `ItemsSource` is data-bound to. In our case,
    a `TextCell` displaying the `Username` is created for each item in the `Conversations`
    list.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了`ListView`来数据绑定一个项目列表并在屏幕上显示。我们定义了一个`DataTemplate`类，它表示了列表中每个项目的单元集合，这些项目与`ItemsSource`进行了数据绑定。在我们的例子中，为`Conversations`列表中的每个项目创建了一个显示`Username`的`TextCell`。
- en: 'Last but not least, we must return to the `App.xaml.cs` file and modify the
    startup page:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们必须回到`App.xaml.cs`文件并修改启动页面：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We used a `NavigationPage` here so that Xamarin.Forms can push and pop between
    different pages. This uses a `UINavigationController` on iOS, so you can see how
    the native APIs are being used on each platform.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了`NavigationPage`，以便Xamarin.Forms可以在不同的页面之间推送和弹出。这在iOS上使用了`UINavigationController`，因此你可以看到每个平台上是如何使用原生API的。
- en: 'At this point, if you compile and run the application, you will get a functional
    iOS and Android application that can log in and view a list of conversations:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，如果你编译并运行应用程序，你将得到一个功能性的iOS和Android应用程序，可以登录并查看对话列表：
- en: '![Using data-binding and MVVM](img/image00267.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用数据绑定和MVVM](img/image00267.jpeg)'
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we covered the basics of Xamarin.Forms and how it can be very
    useful for building your own cross-platform applications. Xamarin.Forms shines
    for certain types of apps, but can be limiting if you need to write more complicated
    UIs or take advantage of native drawing APIs. We discovered how to use XAML for
    declaring our Xamarin.Forms UIs and understood how Xamarin.Forms controls are
    rendered on each platform. We also dived into the concepts of data-binding and
    how to use the MVVM design pattern with Xamarin.Forms. Last but not least, we
    began porting the `XamSnap` application from earlier in the book to Xamarin.Forms,
    and were able to reuse a lot of our existing code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Xamarin.Forms的基础知识以及如何用它来构建自己的跨平台应用程序。Xamarin.Forms对于某些类型的应用程序非常出色，但如果你需要编写更复杂的UI或利用原生绘图API，它可能会有所限制。我们了解了如何使用XAML声明Xamarin.Forms
    UI，并理解了Xamarin.Forms控件在每个平台上的渲染方式。我们还深入探讨了数据绑定的概念以及如何将MVVM设计模式与Xamarin.Forms一起使用。最后但同样重要的是，我们从本书前面开始将`XamSnap`应用程序移植到Xamarin.Forms，并且能够重用我们的大部分现有代码。
- en: In the next chapter, we will cover the process of submitting applications to
    the iOS App Store and Google Play. Getting your app into the store can be a time-consuming
    process, but guidance from the next chapter will give you a head start.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍将应用程序提交到iOS App Store和Google Play的过程。将你的应用程序放入商店可能是一个耗时的过程，但下一章的指导将为你提供一个良好的开端。
