- en: Chapter 6. Handling Multiple Screen Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章.处理多种屏幕类型
- en: 'Android devices are available in different shapes and sizes. For a wider audience,
    handling multiple screen types across different devices is the key. In this chapter
    we will learn about catering to different screen orientation changes and different
    screen types. We will make use of the DistanceConverter application discussed
    earlier, and make changes to cater to different concepts needed to achieve this:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备有各种形状和大小。为了更广泛的受众，处理不同设备上的多种屏幕类型是关键。在本章中，我们将学习如何应对不同的屏幕方向变化和不同的屏幕类型。我们将使用之前讨论的`DistanceConverter`应用程序，并进行更改以适应实现此目的所需的不同概念：
- en: Adapting to different screens using `wrap_content` and `match_parent`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`wrap_content`和`match_parent`适应不同屏幕
- en: Introducing Fragment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍片段（Fragment）
- en: Defining Fragment and Landscape layout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义片段和横屏布局
- en: Hook up in the Main Layout file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主布局文件中挂钩
- en: Running the application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: Optimizing for tablet
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为平板电脑优化
- en: Persisting the state information during the state transition
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在状态转换期间持久化状态信息
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We will use the DistanceConverter application from a previous chapter and use
    fragment to define layouts for landscape, and adapt to different screen orientations
    and types.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前章节中的`DistanceConverter`应用程序，并使用片段来定义横屏布局，以适应不同的屏幕方向和类型。
- en: Using wrap_content and match_parent
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`wrap_content`和`match_parent`
- en: 'In order to cater to the need of a variety of android devices available in
    the market, the application needs to be compatible to different screen sizes.
    For example, a layout should adapt to different screen sizes, and the corresponding
    views should also resize accordingly. To ensure that we make use of `wrap_content`
    and `match_parent` for width and height of view components refer to the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足市场上各种安卓设备的需求，应用程序需要兼容不同的屏幕尺寸。例如，布局应适应不同的屏幕尺寸，相应的视图也应相应调整大小。为了确保我们使用`wrap_content`和`match_parent`来设置视图组件的宽度和高度，请参考以下内容：
- en: '`wrap_content`: It ensures that the width and height of the view is set to
    the minimum size required to fit the content'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wrap_content`：确保视图的宽度和高度设置为适应内容所需的最小尺寸'
- en: '`match_parent`: Before API level 8, it was known as `fill_parent` and it ensures
    the component expands to match the size of its parent view'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match_parent`：在API级别8之前，它被称为`fill_parent`，确保组件扩展以匹配其父视图的大小'
- en: 'Therefore, use of these attributes affirms our views to use the space required
    and expands to fill the available space. We have made use of these in the DistanceConverter
    application for components in layout file. Following is a small code snippet from
    `activity_main.xml`, our previous application to demonstrate its usage:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用这些属性确认了我们的观点，即使用所需的空间并扩展以填充可用空间。在`DistanceConverter`应用程序中，我们在布局文件中的组件里使用了这些属性。下面是来自我们之前的应用程序`activity_main.xml`的一个小代码片段，以演示其用法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Fragment
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 片段
- en: A **Fragment** is an independent component that can be connected to an Activity
    or simply is a subactivity. Typically it defines a part of UI but can also exist
    with no user interface, that is, headless. An instance of fragment must exist
    within an activity.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**片段（Fragment）**是一个独立的组件，可以连接到一个活动（Activity）或简单地视为子活动。它通常定义了一部分用户界面，但也可以不存在用户界面，即无头。片段的实例必须存在于一个活动中。'
- en: Fragments ease the reuse of components for different layouts. Fragments are
    the way to support UI variances across different types of screens. The most popular
    use is for building single pane layouts for phones and multipane layouts for tablets
    (large screens). Fragment was introduced in Android 3.0 API 11\. Fragment can
    also be used for supporting different layouts for portrait and landscape orientations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 片段简化了不同布局中组件的复用。片段是实现不同类型屏幕上用户界面差异化的方式。最流行的用法是构建适用于手机的单一窗格布局和适用于平板电脑（大屏幕）的多窗格布局。片段在Android
    3.0 API 11中引入。片段还可以用于支持纵向和横向的不同布局。
- en: 'A fragment stops as activity stops, and is destroyed as activity is destroyed.
    The `OnCreateView()` method is where the view UI is created via the `inflate()`
    method call. Following is the screenshot of our application in landscape orientation
    from our previous code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当活动停止时，片段也会停止，当活动被销毁时，片段也会被销毁。`OnCreateView()`方法是创建视图UI的地方，通过`inflate()`方法调用。以下是之前代码中我们的应用程序在横向方向上的截图：
- en: '![Fragment](img/1103OS_06_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![片段](img/1103OS_06_01.jpg)'
- en: We will make use of fragment to define a landscape layout for our DistanceConverter
    application in the proceeding chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用片段为我们的DistanceConverter应用程序定义一个景观布局。
- en: Defining Fragment and Landscape layout
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义片段和景观布局
- en: 'Let''s make changes in the layout for Landscape mode. To support different
    layouts for landscape mode, create a folder `layout-land` in the `res` folder.
    Create a file `activity_main.xml` under it and add following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对横向模式下的布局进行更改。为了支持横向模式的不同布局，在`res`文件夹中创建一个`layout-land`文件夹。在它下面创建一个`activity_main.xml`文件，并添加以下代码：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file `fragment_checkbox.xml` under the same folder to define the UI
    for fragment. Add the following code in it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件夹下创建一个`fragment_checkbox.xml`文件，以定义片段的UI。在其中添加以下代码：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Fragment layout from the preceding code is as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码中的片段布局如下截图所示：
- en: '![Defining Fragment and Landscape layout](img/1103OS_06_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![定义片段和景观布局](img/1103OS_06_02.jpg)'
- en: 'After putting down layout of fragments let''s define fragment by extending
    the `android.app.Fragment` class. Let''s create a fragment class `ConvertToFragment`
    with the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在放下片段的布局之后，让我们通过继承`android.app.Fragment`类来定义片段。让我们创建一个名为`ConvertToFragment`的片段类，并使用以下代码：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As fragment is available in the Android 3.0 (also known as API 11), we have
    put `@TargetApi(Build.VERSION_CODES.HONEYCOMB)` at the top. For devices at lower
    API level, fragments will not be available, in that case we have to define and
    arrange views in `activity-main.xml` under the `res/layout-land` folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于片段在Android 3.0（也称为API 11）中可用，我们在顶部放置了`@TargetApi(Build.VERSION_CODES.HONEYCOMB)`。对于低API级别的设备，将没有片段，在这种情况下，我们不得不在`res/layout-land`文件夹下的`activity-main.xml`中定义和排列视图。
- en: For the compulsive use of fragments in lower API level, use Support Libraries
    which is a JAR file that allows us to use the most recent Android APIs. For more
    information, refer to the [http://developer.android.com/training/basics/fragments/support-lib.html](http://developer.android.com/training/basics/fragments/support-lib.html).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在低API级别强制使用片段，请使用支持库，这是一个JAR文件，允许我们使用最新的Android API。更多信息，请参考[http://developer.android.com/training/basics/fragments/support-lib.html](http://developer.android.com/training/basics/fragments/support-lib.html)。
- en: In the `onCreateView()` method we inflate the view from XML via the `inflate()`
    method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreateView()`方法中，我们通过`inflate()`方法从XML中填充视图。
- en: Hook up in the Main Layout file
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在主布局文件中连接
- en: 'Open the `activity_main.xml` file in `res/layout-land` and append following
    code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`res/layout-land`中的`activity_main.xml`文件，并添加以下代码：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `class` points to the corresponding fragment class. The `tools:layout` points
    to the layout for the corresponding fragment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`class`指向相应的片段类。`tools:layout`指向相应片段的布局。'
- en: 'After the preceding step, the graphical layout screen should look like the
    following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述步骤之后，图形布局屏幕应如下截图所示：
- en: '![Hook up in the Main Layout file](img/1103OS_06_03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![在主布局文件中连接](img/1103OS_06_03.jpg)'
- en: Running the application
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Now that we are done with all of the programming, let''s check out how our
    final application will look. The application in landscape mode is depicted in
    the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了所有编程工作，让我们看看最终的应用程序会是什么样子。横向模式下的应用程序如下截图所示：
- en: '![Running the application](img/1103OS_06_04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/1103OS_06_04.jpg)'
- en: 'The application in the portrait mode is depicted in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 纵向模式下的应用程序如下截图所示：
- en: '![Running the application](img/1103OS_06_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/1103OS_06_05.jpg)'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Use *Ctrl*+*F11* to change screen mode from portrait to landscape and vice versa
    in the emulator.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl*+*F11*在模拟器中从纵向模式切换到横向模式，反之亦然。
- en: Optimizing for tablet
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对平板电脑进行优化
- en: 'Tablet is another emerging Android device in the present context. We should
    also define layouts to support tablet devices. To cater to tablet devices, or
    so called large devices, we need to have another set of layouts defined under
    the folder `res/layout-xlarge` (for the portrait mode) and `layout-xlarge-land`
    (for landscape mode).The following snapshot shows the folders and files for defining
    the layouts for larger devices (tablets):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 平板电脑是当前环境下另一种新兴的Android设备。我们也应该定义布局以支持平板设备。为了适应平板设备，或者说大型设备，我们需要在`res/layout-xlarge`文件夹（用于纵向模式）和`layout-xlarge-land`（用于横向模式）下定义另一组布局。以下快照显示了为大型设备（平板电脑）定义布局的文件夹和文件：
- en: '![Optimizing for tablet](img/1103OS_06_06.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![针对平板电脑进行优化](img/1103OS_06_06.jpg)'
- en: Once we have created the corresponding folder, we can make use of fragments
    as demonstrated previously, to create different layouts and achieve the goal of
    supporting tablets.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了相应的文件夹，就可以像之前演示的那样使用片段来创建不同的布局，并实现支持平板电脑的目标。
- en: Persisting the state information during the state transition
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在状态转换期间保持状态信息
- en: 'You must have observed that the state of checkboxes are not persisted after
    screen mode changes from landscape to portrait and vice versa. This is a very
    important concept that we should be aware of. For every screen orientation change,
    the activity is destroyed, and then recreated. The `onCreate()` method is called
    and hence, the current state of the activity is lost. We need to save the state
    using the `onSaveInstanceSate` method and get it back with the `onRestoreInstanceState`
    method. So let''s override these methods to achieve this with the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在屏幕模式从横屏切换到竖屏，或者从竖屏切换到横屏后，复选框的状态并没有保持。这是我们应当了解的一个非常重要的概念。每次屏幕方向改变时，活动都会被销毁，然后重新创建。`onCreate()`方法会被调用，因此活动的当前状态会丢失。我们需要使用`onSaveInstanceSate`方法保存状态，并通过`onRestoreInstanceState`方法恢复它。下面我们将重写这些方法来实现这一点：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For the complete source, go to [http://www.packtpub.com/support](http://www.packtpub.com/support).
    For more information on handling different screen types, refer to the following
    URLs:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看完整的源代码，请访问[http://www.packtpub.com/support](http://www.packtpub.com/support)。关于处理不同屏幕类型的更多信息，请参考以下URL：
- en: '[http://developer.android.com/training/multiscreen/screensizes.html](http://developer.android.com/training/multiscreen/%E2%80%A8screensizes.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/training/multiscreen/screensizes.html](http://developer.android.com/training/multiscreen/screensizes.html)'
- en: '[http://developer.android.com/distribute/googleplay/quality/tablet.html](http://developer.android.com/distribute/googleplay/quality/tablet.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/distribute/googleplay/quality/tablet.html](http://developer.android.com/distribute/googleplay/quality/tablet.html)'
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about fragment and its usage, and used it to have
    different layouts for landscape mode for our application DistanceConverter. We
    also learned about handling different screen types and persisting state during
    screen mode changes. In the next chapter, we will learn about adding an external
    library, for example, `AdMob,` and incorporate advertisements in the application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了片段及其使用方法，并使用它为我们的应用程序DistanceConverter在不同的横屏模式下实现了不同的布局。我们还学习了如何处理不同的屏幕类型，并在屏幕模式更改期间保持状态。在下一章中，我们将学习如何添加外部库，例如`AdMob`，并在应用程序中嵌入广告。
