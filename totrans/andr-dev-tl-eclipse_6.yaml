- en: Chapter 6. Handling Multiple Screen Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android devices are available in different shapes and sizes. For a wider audience,
    handling multiple screen types across different devices is the key. In this chapter
    we will learn about catering to different screen orientation changes and different
    screen types. We will make use of the DistanceConverter application discussed
    earlier, and make changes to cater to different concepts needed to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: Adapting to different screens using `wrap_content` and `match_parent`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Fragment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining Fragment and Landscape layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hook up in the Main Layout file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing for tablet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persisting the state information during the state transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will use the DistanceConverter application from a previous chapter and use
    fragment to define layouts for landscape, and adapt to different screen orientations
    and types.
  prefs: []
  type: TYPE_NORMAL
- en: Using wrap_content and match_parent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to cater to the need of a variety of android devices available in
    the market, the application needs to be compatible to different screen sizes.
    For example, a layout should adapt to different screen sizes, and the corresponding
    views should also resize accordingly. To ensure that we make use of `wrap_content`
    and `match_parent` for width and height of view components refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wrap_content`: It ensures that the width and height of the view is set to
    the minimum size required to fit the content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`match_parent`: Before API level 8, it was known as `fill_parent` and it ensures
    the component expands to match the size of its parent view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Therefore, use of these attributes affirms our views to use the space required
    and expands to fill the available space. We have made use of these in the DistanceConverter
    application for components in layout file. Following is a small code snippet from
    `activity_main.xml`, our previous application to demonstrate its usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Fragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Fragment** is an independent component that can be connected to an Activity
    or simply is a subactivity. Typically it defines a part of UI but can also exist
    with no user interface, that is, headless. An instance of fragment must exist
    within an activity.
  prefs: []
  type: TYPE_NORMAL
- en: Fragments ease the reuse of components for different layouts. Fragments are
    the way to support UI variances across different types of screens. The most popular
    use is for building single pane layouts for phones and multipane layouts for tablets
    (large screens). Fragment was introduced in Android 3.0 API 11\. Fragment can
    also be used for supporting different layouts for portrait and landscape orientations.
  prefs: []
  type: TYPE_NORMAL
- en: 'A fragment stops as activity stops, and is destroyed as activity is destroyed.
    The `OnCreateView()` method is where the view UI is created via the `inflate()`
    method call. Following is the screenshot of our application in landscape orientation
    from our previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fragment](img/1103OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will make use of fragment to define a landscape layout for our DistanceConverter
    application in the proceeding chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Fragment and Landscape layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s make changes in the layout for Landscape mode. To support different
    layouts for landscape mode, create a folder `layout-land` in the `res` folder.
    Create a file `activity_main.xml` under it and add following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file `fragment_checkbox.xml` under the same folder to define the UI
    for fragment. Add the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Fragment layout from the preceding code is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining Fragment and Landscape layout](img/1103OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After putting down layout of fragments let''s define fragment by extending
    the `android.app.Fragment` class. Let''s create a fragment class `ConvertToFragment`
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As fragment is available in the Android 3.0 (also known as API 11), we have
    put `@TargetApi(Build.VERSION_CODES.HONEYCOMB)` at the top. For devices at lower
    API level, fragments will not be available, in that case we have to define and
    arrange views in `activity-main.xml` under the `res/layout-land` folder.
  prefs: []
  type: TYPE_NORMAL
- en: For the compulsive use of fragments in lower API level, use Support Libraries
    which is a JAR file that allows us to use the most recent Android APIs. For more
    information, refer to the [http://developer.android.com/training/basics/fragments/support-lib.html](http://developer.android.com/training/basics/fragments/support-lib.html).
  prefs: []
  type: TYPE_NORMAL
- en: In the `onCreateView()` method we inflate the view from XML via the `inflate()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Hook up in the Main Layout file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` file in `res/layout-land` and append following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `class` points to the corresponding fragment class. The `tools:layout` points
    to the layout for the corresponding fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the preceding step, the graphical layout screen should look like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hook up in the Main Layout file](img/1103OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are done with all of the programming, let''s check out how our
    final application will look. The application in landscape mode is depicted in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/1103OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The application in the portrait mode is depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/1103OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use *Ctrl*+*F11* to change screen mode from portrait to landscape and vice versa
    in the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing for tablet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tablet is another emerging Android device in the present context. We should
    also define layouts to support tablet devices. To cater to tablet devices, or
    so called large devices, we need to have another set of layouts defined under
    the folder `res/layout-xlarge` (for the portrait mode) and `layout-xlarge-land`
    (for landscape mode).The following snapshot shows the folders and files for defining
    the layouts for larger devices (tablets):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizing for tablet](img/1103OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have created the corresponding folder, we can make use of fragments
    as demonstrated previously, to create different layouts and achieve the goal of
    supporting tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Persisting the state information during the state transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You must have observed that the state of checkboxes are not persisted after
    screen mode changes from landscape to portrait and vice versa. This is a very
    important concept that we should be aware of. For every screen orientation change,
    the activity is destroyed, and then recreated. The `onCreate()` method is called
    and hence, the current state of the activity is lost. We need to save the state
    using the `onSaveInstanceSate` method and get it back with the `onRestoreInstanceState`
    method. So let''s override these methods to achieve this with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For the complete source, go to [http://www.packtpub.com/support](http://www.packtpub.com/support).
    For more information on handling different screen types, refer to the following
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/training/multiscreen/screensizes.html](http://developer.android.com/training/multiscreen/%E2%80%A8screensizes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/distribute/googleplay/quality/tablet.html](http://developer.android.com/distribute/googleplay/quality/tablet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about fragment and its usage, and used it to have
    different layouts for landscape mode for our application DistanceConverter. We
    also learned about handling different screen types and persisting state during
    screen mode changes. In the next chapter, we will learn about adding an external
    library, for example, `AdMob,` and incorporate advertisements in the application.
  prefs: []
  type: TYPE_NORMAL
