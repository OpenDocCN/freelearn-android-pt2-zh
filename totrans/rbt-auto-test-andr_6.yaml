- en: Chapter 6. Remote Control in Robotium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to the Software Automation Framework Support
    and the working of the Remote Control in Android. It helps to test the connection
    of an Android device to a remote client via the TCP Messenger Service. By the
    end of this chapter, you will learn the internal mechanism of how the Remote Control
    is used with a test APK that does not have Internet permissions and connects to
    a remote client with the help of the Android socket service.
  prefs: []
  type: TYPE_NORMAL
- en: Software Automation Framework Support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main function of the **Software Automation Framework Support** (**SAFS**)
    is to fully integrate the use of Robotium for Android testing with a large set
    of users that use different technologies using the SAFS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android, sockets, UDP and RMI are not supported. Thus, the test application
    is not supposed to have access to the TCP sockets if AUT doesn''t have the following
    permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The reason a Remote Control is introduced is that there is a generic way that
    uses the socket service in Android, which is completely independent of the test
    application and AUT.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how a Remote Control using SAFS works.
  prefs: []
  type: TYPE_NORMAL
- en: Working of a Remote Control for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Working of a Remote Control for Android](img/8010OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The working of a Remote Control for Android can be defined by the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The user installs a socket service on the device/emulator. This socket service
    has full Internet permission. The TCP message exchange protocol is used by the
    remote process to send/receive the commands and share the results with the already
    installed socket service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test application to be written for the AUT consists of the code to bind
    to this socket service. This test app doesn't need any Internet permission. It
    can rely on the socket service for the data results.![Working of a Remote Control
    for Android](img/8010OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TCP Messenger Service (socket service) acts as the mediator between the
    remote test controller (Windows, Linux, Mac, and so on) that communicates over
    the TCP sockets and an Android test package. It expects two-way communication
    for receiving commands and returning test data/results. Due to this service, a
    test package with no Internet permissions can be controlled via TCP sockets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The test application receives the commands from the socket service, performs
    the tests and returns the data, status needed by the test controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application to be tested should not be hardcoded in the test application.
    This can be easily automated without the developer/tester code by updating the
    `android:targetPackage` attribute in the `AndroidManifest.xml` file. Thus, at
    the pre-test runtime, information out of the target APK can be extracted and can
    repackage an otherwise unmodified test application APK with an updated `AndroidManifest.xml`
    file for the target package. During runtime, the test APK can identify the target
    package and the initial activity to be launched through the `PackageManager`,
    `PackageInfo`, and `ApplicationInfo` calls.
  prefs: []
  type: TYPE_NORMAL
- en: Robotium Remote Control helps test cases to be executed from JVM, which enables
    Robotium to work with JVM frameworks such as JUnit 4\. For the Remote Control,
    another `Solo` class is present at `com.jayway.android.robotium.remotecontrol.solo`.
    It provides the Remote Control API to the embedded traditional Robotium `Solo`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the Remote Control `Solo` class runs outside the device/emulator, that
    is, in the context of the JUnit test, it can''t access the **Application Under
    Test** (**AUT**) objects. It does not abort or stop on a test failure. You can
    see the different methods and information present for it at the following source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/Solo.html](http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/Solo.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It uses the TCP Messenger Service for Android. You can download Robotium Remote
    Control release for Android testing with Robotium from the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://sourceforge.net/projects/safsdev/files/RobotiumRemoteControl/](http://sourceforge.net/projects/safsdev/files/RobotiumRemoteControl/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get the latest SAFS download from the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://sourceforge.net/projects/safsdev/files/latest/download](http://sourceforge.net/projects/safsdev/files/latest/download)'
  prefs: []
  type: TYPE_NORMAL
- en: Once you download Robotium Remote Control, you will find the `SoloRemoteControl`
    project already installed with it. It should be used as a reference for your own
    Java development project. The `src` folder inside the `SoloRemoteControl` project
    contains all the source code in the `robotium-remotecontrol.jar` file.
  prefs: []
  type: TYPE_NORMAL
- en: Robotium Remote Control using SAFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SAFS tests are not wrapped up as JUnit tests and the SAFS Remote Control of
    Robotium uses an implementation that is NOT JUnit based. Also, there is no technical
    requirement for a JUnit on the Remote-Control side of the test.
  prefs: []
  type: TYPE_NORMAL
- en: The test setup and deployment of the automation of the target app can be achieved
    using the SDK tools. These tools are used as part of the test runtime such as
    adb and aapt. The existing packaging tools can be used to repackage a compiled
    Robotium test with an alternate `AndroidManifest.xml` file, which can change the
    target application at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: SAFS is a general-purpose, data-driven framework. The only thing that should
    be provided by the user is the target package name or APK path arguments. The
    test will extract and redeploy the modified packages automatically and then launch
    the actual test.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional JUnit/Robotium users might not have, or see the need for, this general-purpose
    nature, but that is likely because it was necessary for the previous Android tests
    to be JUnit tests. It is required for the test to target one specific application.
    The Remote Control application is application specific. That's why the test app
    with the Remote Control installed in the device no longer needs to be an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Remote Control in Robotium means there are two test applications to build
    for any given test. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Traditional on-device Robotium/JUnit test app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote Control app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two build projects have entirely different dependencies and build scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The on-device test app has the traditional Robotium/Android/JUnit dependencies
    and build scripts, while the Remote Control app only has dependencies on the TCP
    sockets for communications and Robotium Remote Control API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation for the remote-controlled Robotium can be done in the following
    two pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '**On Device**: `ActivityInstrumentationTestCase2.setup()` is initialized when
    Robotium''s `Solo` class object is to be used for the **RobotiumTestRunner** (**RTR**).
    The RTR has a Remote Control Listener and routes remote control calls and data
    to the appropriate `Solo` class methods and returns any results, as needed, to
    the Remote Controller. The on-device implementation may exploit test-result asserts
    if that is desirable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote Controller**: The `RemoteSolo` API duplicates the traditional `Solo`
    API, but its implementation largely pushes the data through the Remote Control
    to the RTR, and then receives results from the Remote Controller. The Remote Control
    implementation may exploit any number of options for asserting, handling, or otherwise
    reporting or tracking the test results for each call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, the Remote-Control side only requires a `RemoteSolo` API without
    any specific JUnit context. It can be wrapped in a JUnit context if the tester
    desires it, but it is not necessary to be in a JUnit context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The sample code and installation of Robotium Remote Control can be accessed
    in the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/robotium/wiki/RemoteControl](http://code.google.com/p/robotium/wiki/RemoteControl)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learnt about the SAFS framework and its usage in Robotium
    to implement Robotium Remote Control. In the next chapter, you will be introduced
    to the Robotium utilities.
  prefs: []
  type: TYPE_NORMAL
