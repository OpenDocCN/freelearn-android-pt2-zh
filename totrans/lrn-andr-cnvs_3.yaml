- en: Chapter 3. Drawing and Drawables in Android Canvas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章. 安卓画布中的绘制和可绘制资源
- en: 'In this chapter our goal is to learn about the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的目标是了解以下内容：
- en: Drawing on a Canvas
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Canvas上绘制
- en: Drawing on a View
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图上绘制
- en: Drawing on a SurfaceView
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SurfaceView上绘制
- en: Drawables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可绘制资源
- en: Drawables from resource images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自资源图片的可绘制资源
- en: Drawables from resource XML
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自资源XML的可绘制资源
- en: Shape Drawables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形状可绘制资源
- en: Android provides us with 2D drawing APIs that enable us to draw our custom drawing
    on the Canvas. When working with 2D drawings, we will either draw on view or directly
    on the surface or Canvas. Using View for our graphics, the drawing is handled
    by the system's normal View hierarchy drawing process. We only define our graphics
    to be inserted in the View; the rest is done automatically by the system. While
    using the method to draw directly on the Canvas, we have to manually call the
    suitable drawing Canvas methods such as `onDraw()` or `createBitmap()`. This method
    requires more efforts and coding and is a bit more complicated, but we have everything
    in control such as the animation and everything else like being in control of
    the size and location of the drawing and the colors and the ability to move the
    drawing from its current location to another location through code. The implementation
    of the `onDraw()` method can be seen in the drawing on the view section and the
    code for `createBitmap()` is shown in the *Drawing on a Canvas* section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓为我们提供了2D绘图API，使我们能够在Canvas上绘制自定义图形。在处理2D绘图时，我们将在视图上绘制，或者直接在表面或Canvas上绘制。使用视图来处理图形时，绘制由系统的正常视图层次结构绘制过程处理。我们只需定义要在视图中插入的图形；其余的由系统自动完成。当使用直接在Canvas上绘制的方法时，我们必须手动调用合适的Canvas绘制方法，如`onDraw()`或`createBitmap()`。这种方法需要更多的努力和编码，并且稍微复杂一些，但我们能控制一切，比如动画以及通过代码控制绘制的尺寸、位置、颜色以及将绘制内容从当前位置移动到另一个位置的能力。`onDraw()`方法的实现可以在视图上的绘制部分看到，而`createBitmap()`的代码在*在Canvas上绘制*一节中展示。
- en: We will use the drawing on the View method if we are dealing with static graphics—static
    graphics do not change dynamically during the execution of the application—or
    if we are dealing with graphics that are not resource hungry as we don't wish
    to put our application performance at stake. Drawing on a View can be used for
    designing eye-catching simple applications with static graphics and simple functionality—simple
    attractive backgrounds and buttons. It's perfectly okay to draw on View using
    the main UI thread as these graphics are not a threat to the overall performance
    of our application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处理的是静态图形——在应用程序执行期间不会动态变化的图形——或者我们处理的图形不是资源饥渴型的，因为我们不希望将应用程序性能置于风险之中，我们将使用在视图上绘制的方法。在视图上绘制可以用于设计具有静态图形和简单功能的引人注目的简单应用程序——简单的吸引人背景和按钮。使用主UI线程在视图上绘制是完全可以的，因为这些图形不会对应用程序的整体性能构成威胁。
- en: The drawing on a Canvas method should be used when working with heavy graphics
    that change dynamically like those in games. In this scenario, the Canvas will
    continuously redraw itself to keep the graphics updated. We can draw on a Canvas
    using the main UI thread, but as we discussed in maximum possible detail in [Chapter
    2](ch02.html "Chapter 2. Drawing Threads"), *Drawing Threads*, when working with
    heavy, resource-hungry, dynamically changing graphics, the application will continuously
    redraw itself. It is better to use a separate thread to draw these graphics. Keeping
    such graphics on the main UI thread will not make them go into the non-responding
    mode, and after working so hard we certainly won't like this. So this choice should
    be made very carefully.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理像游戏中那样动态变化的重型图形时，应该使用在Canvas上绘制的方法。在这种情况下，Canvas会不断重绘自己以保持图形更新。我们可以在主UI线程上在Canvas上绘制，但是正如我们在[第二章](ch02.html
    "第二章. 绘制线程")中尽可能详细讨论的那样，*绘制线程*，在处理重型、资源饥渴、动态变化的图形时，应用程序会持续重绘自己。最好使用单独的线程来绘制这些图形。将这样的图形保留在主UI线程上不会使它们进入无响应模式，而且经过如此努力工作后，我们肯定不会喜欢这种情况。因此，这个选择应该非常谨慎地做出。
- en: Drawing on a Canvas
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Canvas上绘制
- en: A Canvas is an interface, a medium that enables us to actually access the surface,
    which we will use to draw our graphics. The Canvas contains all the necessary
    drawing methods needed to draw our graphics. The actual internal mechanism of
    drawing on a Canvas is that, whenever anything needs to be drawn on the Canvas,
    it's actually drawn on an underlying blank bitmap image. By default, this bitmap
    is automatically provided for us. But if we want to use a new Canvas, then we
    need to create a new bitmap image and then a new Canvas object while providing
    the already created bitmap to the constructor of the Canvas class. A sample code
    is explained as follows. Initially, the bitmap is drawn but not on the screen;
    it's actually drawn in the background on an internal Canvas. But to bring it to
    the front, we need to create a new Canvas object and provide the already created
    bitmap to it to be painted on the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Canvas`是一个接口，一种媒介，它使我们能够实际访问表面，我们将用它来绘制图形。`Canvas`包含了绘制图形所需的所有必要方法。在`Canvas`上绘制的实际内部机制是，每当需要在`Canvas`上绘制任何内容时，它实际上是绘制在一个底层的空白位图图像上。默认情况下，这个位图是自动为我们提供的。但如果我们想使用一个新的`Canvas`，那么我们需要创建一个新的位图图像，然后再创建一个新的`Canvas`对象，同时将已创建的位图提供给`Canvas`类的构造函数。以下是一个示例代码的说明。最初，位图被绘制但不在屏幕上；它实际上是在内部`Canvas`的后台绘制的。但要将它带到前台，我们需要创建一个新的`Canvas`对象，并提供已创建的位图，以便在屏幕上绘制。'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Drawing on a View
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在`View`上绘制
- en: If our application does not require heavy system resources or fast frame rates,
    we should use `View.onDraw()`. The benefit in this case is that the system will
    automatically give the Canvas its underlying bitmap as well. All we need is to
    make our drawing calls and be done with our drawings.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序不需要大量的系统资源或高帧率，我们应该使用`View.onDraw()`。在这种情况下，好处是系统会自动为`Canvas`提供其底层的位图。我们需要做的就是进行绘图调用，完成我们的绘图工作。
- en: We will create our class by extending it from the `View` class and will define
    the `onDraw()` method in it. The `onDraw()` method is where we will define whatever
    we want to draw on our Canvas. The Android framework will call the `onDraw()`
    method to ask our View to draw itself.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过扩展`View`类来创建我们的类，并在其中定义`onDraw()`方法。`onDraw()`方法是我们将在其中定义要在`Canvas`上绘制的内容的地方。Android框架将调用`onDraw()`方法，要求我们的`View`绘制自己。
- en: 'The `onDraw()` method will be called by the Android framework on a need basis;
    for example, whenever our application wants to draw itself, this method will be
    called. We have to call the `invalidate()` method whenever we want our view to
    redraw itself. This means that, whenever we want our application''s view to be
    redrawn, we will call the `invalidate()` method and the Android framework will
    call the `onDraw()` method for us. Let''s say we want to draw a line, then the
    code would be something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`onDraw()`方法将在需要时由Android框架调用；例如，每当我们的应用程序想要绘制自己时，都会调用这个方法。每当想要我们的`view`重绘自己时，我们必须调用`invalidate()`方法。这意味着，每当我们想要应用程序的视图重新绘制时，我们都会调用`invalidate()`方法，然后Android框架会为我们调用`onDraw()`方法。假设我们想要画一条线，那么代码可能如下所示：'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Inside the `onDraw()` method, we will use all kinds of facilities that are provided
    by the Canvas class such as the different drawing methods made available by the
    Canvas class. We can also use drawing methods from other classes as well. The
    Android framework will draw a bitmap on the Canvas for us once our `onDraw()`
    method is complete with all our desired functionality. If we are using the main
    UI thread, we will call the `invalidate()` method, but if we are using another
    thread, then we will call the `postInvalidate()` method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onDraw()`方法内部，我们将使用`Canvas`类提供的各种设施，比如`Canvas`类提供的不同的绘图方法。我们还可以使用其他类的绘图方法。当我们的`onDraw()`方法完成了所有期望的功能后，Android框架会在`Canvas`上为我们绘制一个位图。如果我们使用的是主UI线程，我们会调用`invalidate()`方法，但如果我们使用的是另一个线程，那么我们会调用`postInvalidate()`方法。
- en: Drawing on a SurfaceView
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在`SurfaceView`上绘制
- en: The `View` class provides a subclass `SurfaceView` that provides a dedicated
    drawing surface within the hierarchy of the View. The goal is to draw using a
    secondary thread so that the application won't wait for the resources to be free
    and ready to redraw. The secondary thread has access to the `SurfaceView` object
    that has the ability to draw on its own Canvas with its own redraw frequency.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`View`类提供了一个子类`SurfaceView`，在`View`的层次结构中提供了一个专用的绘图表面。目标是使用一个辅助线程进行绘制，这样应用程序就不会等待资源空闲并准备好重绘。辅助线程可以访问`SurfaceView`对象，该对象具有使用自己的`Canvas`以自己的重绘频率进行绘制的功能。'
- en: We will start by creating a class that will extend the `SurfaceView` class.
    We should implement an interface `SurfaceHolder.Callback`. This interface is important
    in the sense that it will provide us with the information when a surface is created,
    modified, or destroyed. When we have timely information about the creation, change,
    or destruction of a surface, we can make a better decision on when to start drawing
    and when to stop. The secondary thread class that will perform all the drawing
    on our Canvas can also be defined in the `SurfaceView` class.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个扩展 `SurfaceView` 类的类开始。我们应该实现一个接口 `SurfaceHolder.Callback`。这个接口之所以重要，是因为它能在表面被创建、修改或销毁时提供给我们信息。当我们及时了解表面的创建、更改或销毁情况时，我们可以更好地决定何时开始绘图以及何时停止。在
    `SurfaceView` 类中也可以定义将在 Canvas 上执行所有绘图工作的次要线程类。
- en: To get information, the `Surface` object should be handled through `SurfaceHolder`
    and not directly. To do this, we will get the Holder by calling the `getHolder()`
    method when the `SurfaceView` is initialized. We will then tell the `SurfaceHolder`
    object that we want to receive all the callbacks; to do this, we will call `addCallBacks()`.
    After this, we will override all the methods inside the `SurfaceView` class to
    get our job done according to our functionality.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取信息，应该通过 `SurfaceHolder` 处理 `Surface` 对象，而不是直接处理。为此，我们将在初始化 `SurfaceView`
    时调用 `getHolder()` 方法来获取 Holder。然后，我们会告诉 `SurfaceHolder` 对象我们希望接收所有回调；为此，我们将调用
    `addCallBacks()`。此后，我们将重写 `SurfaceView` 类内的所有方法，以根据我们的功能完成我们的工作。
- en: The next step is to draw the surface's Canvas from inside the second thread;
    to do this, we will pass our `SurfaceHandler` object to the thread object and
    will get the Canvas using the `lockCanvas()` method. This will get the Canvas
    for us and will lock it for the drawing from the current thread only. We need
    to do this because we don't want an open Canvas that can be drawn by another thread;
    if this is the situation, it will disturb all our graphics and drawings on the
    Canvas. When we are done with drawing our graphics on the Canvas, we will unlock
    the Canvas by calling the `unlockCanvasAndPost()` method and will pass our Canvas
    object. To have a successful drawing, we will need repeated redraws; so we will
    repeat this locking and unlocking as needed and the surface will draw the Canvas.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在第二个线程内部绘制表面的 Canvas；为此，我们将传递我们的 `SurfaceHandler` 对象到线程对象，并使用 `lockCanvas()`
    方法获取 Canvas。这将为我们获取 Canvas，并将其仅对当前线程的绘图锁定。我们需要这样做，因为我们不希望有一个可以被另一个线程绘制的开放的 Canvas；如果出现这种情况，它将干扰我们在
    Canvas 上的所有图形和绘图。当我们完成在 Canvas 上绘制图形后，我们将通过调用 `unlockCanvasAndPost()` 方法并传递我们的
    Canvas 对象来解锁 Canvas。为了成功绘图，我们将需要重复重绘；因此，我们将根据需要重复锁定和解锁，表面将绘制 Canvas。
- en: To have a uniform and smooth graphic animation, we need to have the previous
    state of the Canvas; so we will retrieve the Canvas from the `SurfaceHolder` object
    every time and the whole surface should be redrawn each time. If we don't do so,
    for instance, not painting the whole surface, the drawing from the previous Canvas
    will persist and that will destroy the whole look of our graphic-intense application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现统一和平滑的图形动画，我们需要拥有 Canvas 的上一个状态；因此，我们将每次从 `SurfaceHolder` 对象中获取 Canvas，并且每次整个表面都应该重新绘制。如果我们不这样做，例如，没有绘制整个表面，上一个
    Canvas 的绘图将会持续存在，这将破坏我们图形密集型应用程序的整体外观。
- en: 'A sample code would be the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '一个示例代码如下： '
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Drawables
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Drawable 图形
- en: The two-dimensional graphics and drawing library that Android provides is called
    **Drawable**. The exact package name is `android.graphics.drawable`. This package
    provides all the necessary classes for drawing our 2D graphics.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Android 提供的二维图形和绘图库称为 **Drawable**。确切的包名是 `android.graphics.drawable`。这个包提供了绘制我们
    2D 图形所需的所有类。
- en: In general, a Drawable is an abstraction for something that can be drawn. Android
    provides a number of classes that extends the `Drawable` class to define special
    types of Drawable graphics. The complete list can be found at [http://developer.android.com/reference/android/graphics/drawable/package-summary.html](http://developer.android.com/reference/android/graphics/drawable/package-summary.html).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`Drawable` 是可以绘制的抽象概念。Android 提供了许多扩展了 `Drawable` 类的类，以定义特殊的 Drawable 图形类型。完整的列表可以在
    [http://developer.android.com/reference/android/graphics/drawable/package-summary.html](http://developer.android.com/reference/android/graphics/drawable/package-summary.html)
    找到。
- en: 'Drawables can be defined and instantiated in three ways:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Drawable 可以通过三种方式定义和实例化：
- en: From an image saved in the `resource` folder of our project
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从保存在我们项目的`资源`文件夹中的图片
- en: From an XML file
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从XML文件中
- en: From the normal class constructor
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从普通的类构造函数中
- en: In the context of this book, we will explain only the first two methods.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的背景下，我们只解释前两种方法。
- en: Drawables from a resource image
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从资源图片中的可绘制资源
- en: This is the quickest and simplest method to add graphics to our application.
    We have already explained the different important folders of our project and discussed
    in detail which folder contains what kind of files in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Android Canvas"), *Getting Started with Android Canvas*. By the end
    of this chapter, we will know how to copy an image to the `resource` folder and
    where to find the `resource` folder.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是向我们的应用程序添加图形的最快和最简单的方法。我们已经解释了项目中的不同重要文件夹，并在[第1章](ch01.html "第1章. 开始使用Android画布")《开始使用Android画布》中详细讨论了哪个文件夹包含什么类型的文件。在本章结束时，我们将知道如何将图片复制到`资源`文件夹中，以及在哪里找到`资源`文件夹。
- en: We will use the image that we have already copied in the `res/drawable` folder
    in our applications project in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Android Canvas"), *Getting Started with Android Canvas*. The image name is
    `lacm_5396_01_14.png` and the exact location is `res/drawable-xhdpi`. One important
    point here is that the supported formats are PNG, JPEG, and GIF. The most preferable
    format to use is PNG and the least preferable is GIF. Whenever we put an image
    in the `res/drawable` folder, during the build process, the image will be compressed
    with lossless compression to save system memory; this process is automatic. The
    compressed images normally retain the same quality but of a much lesser size.
    If we don't want the system to compress our images, we should copy our images
    to the `res/raw` folder.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在[第1章](ch01.html "第1章. 开始使用Android画布")《开始使用Android画布》中已经复制的图片，该图片位于我们应用程序项目的`res/drawable`文件夹中。图片名为`lacm_5396_01_14.png`，确切位置在`res/drawable-xhdpi`。这里有一个重要点是，支持的格式有PNG、JPEG和GIF。最理想的格式是PNG，最不理想的是GIF。每当我们把图片放在`res/drawable`文件夹中时，在构建过程中，图片将会使用无损压缩来节省系统内存；这个过程是自动的。压缩后的图片通常能保持相同的质量，但大小会小得多。如果我们不希望系统压缩我们的图片，我们应该将图片复制到`res/raw`文件夹中。
- en: 'We will use the same application source code from [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Android Canvas"), *Getting Started with Android Canvas*, to explain
    this section of the chapter. We will open our project `MyFirstCanvasApp`. This
    is the code before we make any changes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[第1章](ch01.html "第1章. 开始使用Android画布")《开始使用Android画布》中的相同应用程序源代码来说明这一章节的内容。我们将打开我们的项目`MyFirstCanvasApp`。这是我们在进行任何更改之前的代码：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will open our layout file `activity_my_first_canvas_app_main.xml` in **Design**
    view. We will delete the already placed **ImageView** object from the Activity
    that we added in [Chapter 1](ch01.html "Chapter 1. Getting Started with Android
    Canvas"), *Getting Started with Android Canvas*. Now we will open our code file
    again and will add the following lines of code to the preceding code step-by-step.
    In our main activity class, we will define a `LinearLayout` object:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在**设计**视图中打开我们的布局文件`activity_my_first_canvas_app_main.xml`。我们将删除在[第1章](ch01.html
    "第1章. 开始使用Android画布")《开始使用Android画布》中添加到活动中的**ImageView**对象。现在，我们将再次打开我们的代码文件，并逐步添加以下代码行到前面的代码中。在我们的主活动类中，我们将定义一个`LinearLayout`对象：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will be our custom layout on which we want to display our image using
    this code. Then, inside our main activity class, we will instantiate the `LinearLayout`
    object:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们自定义的布局，我们想使用这段代码来显示图片。然后，在我们的主活动类中，我们将实例化`LinearLayout`对象：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next we will add the following lines of code to our file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向我们的文件中添加以下代码行：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding block of code, first, we have defined an `ImageView` object.
    Then we set the source to an image that we want our `ImageView` object to display.
    In the next line, we have adjusted the View bounds so that the `ImageView` bounds
    match the width and height of the source image. The `setLayoutParams` method will
    help us wrap the view borders around the image content even if there is a difference
    in the dimensions. After this, we will supply our `ImageView` control to our custom
    layout using the code line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，首先我们定义了一个`ImageView`对象。然后我们设置我们希望`ImageView`对象显示的图像源。在下一行，我们调整了视图边界，使`ImageView`的边界与源图像的宽度和高度相匹配。`setLayoutParams`方法可以帮助我们将视图边界围绕图像内容，即使尺寸有差异。在此之后，我们将使用以下代码行将我们的`ImageView`控件提供给我们的自定义布局：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the last line, we will set the activity layout to our custom layout. To
    do this, we will set the content view to our custom layout:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行，我们将活动的布局设置为我们的自定义布局。为此，我们将内容视图设置为我们的自定义布局：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we will test our application in the emulator and then we will see the
    following on the emulator screen:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在模拟器中测试我们的应用程序，然后我们将在模拟器屏幕上看到以下内容：
- en: '![Drawables from a resource image](img/5396_03_1.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![来自资源图像的可绘制资源](img/5396_03_1.jpg)'
- en: If we compare this output image on the activity screen to what we had in [Chapter
    1](ch01.html "Chapter 1. Getting Started with Android Canvas"), *Getting Started
    with Android Canvas*, there is not much difference in what we see. We achieved
    the same output in [Chapter 1](ch01.html "Chapter 1. Getting Started with Android
    Canvas"), *Getting Started with Android Canvas*, very easily. Then, why have we
    gone through all this complicated coding to achieve the same output in this chapter?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此输出图像与在[第1章](ch01.html "第1章. Android Canvas入门")，*Android Canvas入门*中的活动屏幕上的图像进行比较，我们看到的区别并不大。我们在[第1章](ch01.html
    "第1章. Android Canvas入门")，*Android Canvas入门*中很容易地实现了相同的输出。那么，为什么我们还要经历所有这些复杂的编码来在本章中实现相同的输出呢？
- en: We went through all the hard work and complicated code because in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Android Canvas"), *Getting Started with Android
    Canvas*, we hardcoded the `ImageView` object to display only one image that we
    have defined in the **Properties** tab in the **Design** view. Now, when we deleted
    the `ImageView` object from the screen in the **Design** view and started coding,
    there was nothing on the screen in the **Design** view at that time. What we did
    in the preceding example was create our own custom layout that will host our graphics
    and drawing. We created an `ImageView` object and supplied it with a source image
    and, set its other properties. Later on, we added the `ImageView` object to our
    custom layout and at the end, we asked the activity to appear on the screen without
    a custom-created layout and the automatic layout. The code gives us the flexibility
    to keep our graphics application dynamic. We can supply our application with run-time
    images controlled from our code logic.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之所以要经历所有这些艰难的工作和复杂的代码，是因为在[第1章](ch01.html "第1章. Android Canvas入门")，*Android
    Canvas入门*中，我们将`ImageView`对象硬编码为只显示我们在**设计**视图的**属性**标签中定义的一张图片。现在，当我们从**设计**视图中删除屏幕上的`ImageView`对象并开始编码时，那时在**设计**视图中屏幕上什么都没有。在前一个示例中我们所做的是创建我们自己的自定义布局，该布局将承载我们的图形和绘图。我们创建了一个`ImageView`对象，为其提供了源图像并设置了其他属性。稍后，我们将`ImageView`对象添加到我们的自定义布局中，最后，我们要求活动在没有自定义创建的布局和自动布局的情况下出现在屏幕上。这段代码为我们提供了保持图形应用程序动态的灵活性。我们可以通过我们的代码逻辑控制，为应用程序提供运行时图像。
- en: 'The complete code looks like this now:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码现在看起来像这样：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we want our resource image to be handled as a Drawable, we will create a
    `Drawable` object from our resource image:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望我们的资源图像被视为一个`Drawable`，我们将从我们的资源图像创建一个`Drawable`对象：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we need to understand that each resource in our `Resources` object can
    maintain only one state at a time. If we are using the same resource image in
    two different instances and we update the property of one instance, the image
    in the second instance will also reflect that change. So, whenever we are dealing
    with multiple instances of our `Drawable` object, instead of changing the Drawable
    itself, we can create a tween animation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要了解的是，我们的`Resources`对象中的每个资源一次只能保持一个状态。如果我们正在两个不同实例中使用相同的资源图像，并且我们更新了一个实例的属性，第二个实例中的图像也会反映出这个变化。因此，每当我们处理`Drawable`对象的多个实例时，我们不是改变Drawable本身，而是可以创建补间动画。
- en: Drawables from resource XML
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自资源XML的可绘制资源
- en: For those developers who have a little background of Android development, know
    that every activity in our application has an XML layout file. In this file, every
    View or control that we drag-and-drop on the Activity has an XML markup defined.
    So, we assume that the developers that are reading this book know how the user
    interface works while developing for Android. Objects can be defined and initialized
    in XML. If we are dealing with a graphic whose properties do not depend on what
    we plan to do in our code, or perhaps the graphic is static, it's a good way to
    define the graphic object in XML. Once the graphic is instantiated, its properties
    can always be tweaked according to need.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对Android开发有一定背景的开发者来说，我们知道应用程序中的每个活动都有一个XML布局文件。在这个文件中，我们在活动中拖放的所有视图或控件都有一个定义的XML标记。因此，我们假设阅读这本书的开发者知道在为Android开发时用户界面是如何工作的。对象可以在XML中定义和初始化。如果我们处理的是那些属性不依赖于我们计划在代码中执行的操作的图形，或者图形可能是静态的，那么在XML中定义图形对象是一个好方法。一旦图形被实例化，其属性可以根据需要随时调整。
- en: We will save the file in `res/drawable`, define the Drawable in XML, and get
    the Drawable by calling `Resouces.getDrawable()`. This method will take the resource
    ID as an argument from our XML file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`res/drawable`中保存文件，在XML中定义Drawable，并通过调用`Resouces.getDrawable()`获取Drawable。这个方法将从我们的XML文件中获取资源ID作为参数。
- en: To exemplify, and to understand which Drawable can use this method and how we
    can have a look at the menu that's automatically created in our application, note
    the method in the preceding code `onCreateOptionMenu()`. When we click on the
    **Menu** button on the screen or from the hardware keys, we see a small menu at
    the bottom of the screen, named **Settings**. The menu has no functionality at
    this point. Now if we check the code of `onCreateOptionMenu()`, we see a call
    to the `inflate()` method. We can define any Drawable in XML that supports the
    `inflate()` method. The previously mentioned menu is a simple example of this.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，并了解哪些Drawable可以使用这种方法以及我们如何查看应用程序中自动创建的菜单，请注意前面代码中的`onCreateOptionMenu()`方法。当我们点击屏幕上的**菜单**按钮或从硬件键上点击时，我们在屏幕底部看到一个名为**设置**的小菜单。此时菜单没有功能。现在如果我们检查`onCreateOptionMenu()`的代码，我们看到一个对`inflate()`方法的调用。我们可以在XML中定义任何支持`inflate()`方法的Drawable。前面提到的菜单就是这方面的一个简单例子。
- en: 'The **Settings** menu can be seen in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置**菜单可以在以下屏幕截图中看到：'
- en: '![Drawables from resource XML](img/5396_03_2.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![来自资源XML的Drawables](img/5396_03_2.jpg)'
- en: Let's say we want to go for an expand-collapse transition Drawable; the following
    code will get the job done for us in XML. This XML code will be saved in the `res/drawable
    expand_collapse.xml` file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要一个展开-折叠过渡的Drawable，下面这段XML代码可以为我们完成这项工作。这段XML代码将被保存在`res/drawable expand_collapse.xml`文件中。
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `expand` and `collapse` files are two different images saved in the `drawable`
    folder in our project. Now to get this transition working, we will need the following
    code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`expand`和`collapse`文件是我们保存在项目`drawable`文件夹中的两个不同的图像。现在为了使这个过渡工作，我们需要以下代码：'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: First, we created a `resources` object from resources and asked the object to
    get everything from these resources (the resources are all the images and XML
    files that we have saved in the subfolders of the `res` folder in our project).
    Then, we created a `TransitionDrawable` object and asked the object to get the
    `expand_collapse` file from the `res/drawable` folder. After this, we will create
    an `ImageView` object that will get another view named `toggle_image`. In the
    last line of the preceding code, we set the Drawable type to the already-created
    transition.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从资源中创建了一个`resources`对象，并要求该对象从这些资源中获取所有内容（这些资源是我们保存在项目`res`文件夹子文件夹中的所有图片和XML文件）。然后，我们创建了一个`TransitionDrawable`对象，并要求该对象从`res/drawable`文件夹中获取`expand_collapse`文件。此后，我们将创建一个`ImageView`对象，它将获取另一个名为`toggle_image`的视图。在前面代码的最后一句中，我们将Drawable类型设置为已创建的过渡。
- en: 'Now including the following line of code will run the transition with a speed
    of once per second:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在包含以下代码行将使过渡以每秒一次的速度运行：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We won''t go into too much detail about these transitions and animations as
    animation by itself is a very lengthy topic. But I can explain some key types
    of animation that can be done in Android while working with graphics to give the
    reader an idea of the domain and what animation covers. The types of animation
    in Android are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些过渡和动画，我们不会过多详述，因为动画本身就是一个非常庞大的主题。但是我可以解释一些在Android中处理图形时可以进行的关键类型的动画，让读者了解这个领域以及动画所涵盖的内容。Android中的动画类型如下：
- en: Property animation
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性动画（Property animation）
- en: View animation
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图动画（View animation）
- en: Drawable animation
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可绘制动画（Drawable animation）
- en: Shape Drawables
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 形状可绘制对象（Shape Drawables）
- en: Whenever we want to draw certain shapes dynamically or programmatically on our
    Canvas, Shape Drawables come in handy. With Shape Drawables, we can draw circles
    and all forms of circles such as ovals, squares, rectangles, and many other shapes.
    To explain Shape Drawables, we will start a new project just the way we did in
    [Chapter 1](ch01.html "Chapter 1. Getting Started with Android Canvas"), *Getting
    Started with Android Canvas*. We will name our project `MyShapeDrawablesApp` and
    go through the same steps as in the first chapter using a blank starting activity.
    Our objective of this exercise is to draw an oval on the screen with some color
    filled within it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想在画布上动态或以编程方式绘制某些形状时，形状可绘制对象就显得非常方便。使用形状可绘制对象，我们可以绘制圆形以及所有圆形形式，如椭圆形、正方形、矩形和许多其他形状。为了解释形状可绘制对象，我们将以[第1章](ch01.html
    "第1章. 开始使用Android画布")，*开始使用Android画布*的方式启动一个新项目。我们将我们的项目命名为`MyShapeDrawablesApp`，并按照第一章使用空白起始活动进行相同的步骤。我们这项练习的目标是在屏幕上绘制一个带有某种颜色填充的椭圆形。
- en: To do this, we will add another class inside our main activity class just before
    the ending bracket. We will name our class `MyCustomDrawableView` that will extend
    the `View` class.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们将在主活动类的结束括号之前添加另一个类。我们将我们的类命名为`MyCustomDrawableView`，它将扩展`View`类。
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Inside the constructor of this class, we will define our drawing. We will define
    a `ShapeDrawable` object and provide the `OvalShape()` method to its constructor
    as an argument to define the type of shape:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类的构造函数中，我们将定义我们的绘制。我们将定义一个`ShapeDrawable`对象，并向其构造函数提供`OvalShape()`方法作为参数以定义形状的类型：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we will get the paint object and set the color for our `ShapeDrawable`
    object:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将获取画笔对象并为我们的`ShapeDrawable`对象设置颜色：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After that, we will define the dimensions of the object that is to be drawn.
    Let''s say we want to draw an oval shape. The first `x, y` are the points from
    where it will start and the next are the width and height of the oval, as shown:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将定义要绘制的对象的尺寸。比方说我们想要绘制一个椭圆形。第一个`x, y`是它将开始的位置，接下来的则是椭圆的宽度和高度，如下所示：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will close the constructor at this point and will define the `onDraw()` method
    for our object. Inside this method, we will call the `draw()` method for our object.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们将关闭构造函数，并为我们的对象定义`onDraw()`方法。在这个方法内部，我们将调用我们对象的`draw()`方法。
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next step would be to create an object of our custom class in the main
    activity class and set the content view to our new custom class:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步将在主活动类中创建我们自定义类的对象，并将内容视图设置为我们的新自定义类：
- en: '[PRE19]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will run the application in the emulator.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在模拟器中运行应用程序。
- en: The following screenshot shows a green oval drawn on the Canvas:![Shape Drawables](img/5396_03_3.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的截图显示了在画布上绘制的绿色椭圆形：![形状可绘制对象](img/5396_03_3.jpg)
- en: 'The complete code for the `MyShapeDrawablesMainActivity.java` file is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyShapeDrawablesMainActivity.java`文件的完整代码如下：'
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have learned about the `Canvas` class, its methods, properties,
    and how we can use them to draw. We have also learned about the `View` and `SurfaceView`
    classes and learned how to draw using both of these classes and which one to use
    in which scenario. We have also learned about Drawables and some of the different
    ways of using them to draw such as from images in the resources or from the XML
    code in resources and drawing shapes using code. We also saw a functional example
    while working with Shape Drawables and Drawing on a Canvas. The source code for
    both the example applications is downloadable from the *Packt Publishing* website.
    In the next chapter, we will discuss 9-patch (also known as NinePatch) images
    in detail. We will develop a working application using a 9-patch image and will
    discuss its importance in designing layouts for our mobile applications.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了`Canvas`类、它的方法、属性，以及如何使用它们进行绘图。我们还了解了`View`和`SurfaceView`类，并学会了如何使用这两个类进行绘图，以及在哪种情况下使用哪一个。我们也学习了`Drawables`以及使用它们绘图的不同方法，例如从资源中的图片或资源中的XML代码进行绘图，以及使用代码绘制形状。在处理Shape
    Drawables和在Canvas上绘图时，我们还看到了一个功能性的示例。两个示例应用程序的源代码都可以从*Packt Publishing*网站下载。在下一章中，我们将详细讨论9-patch（也称为NinePatch）图片。我们将开发一个使用9-patch图片的工作应用程序，并讨论它在设计我们移动应用程序布局中的重要性。
