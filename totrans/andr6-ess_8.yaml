- en: Chapter 8. Authentication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章 认证
- en: 'Android Marshmallow has introduced a newly integrated API to better support
    user authentication and user verification. We can now use the new `Fingerprint`
    API for devices with a fingerprint scanner in order to authenticate the user.
    We can also set a specific time for user lock screen verification to be considered
    valid in the app login. In this chapter, we will try and go over these additions
    and explain how to use them:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓棉花糖引入了一个全新集成的API，以更好地支持用户认证和用户验证。我们现在可以在带有指纹扫描器的设备上使用新的`Fingerprint` API来认证用户。我们还可以设置特定时间，以便在应用登录时认为用户锁屏验证有效。在本章中，我们将尝试介绍这些新增功能并解释如何使用它们：
- en: The `Fingerprint` authentication API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指纹认证API
- en: Credentials' Grace Period
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭据宽限期
- en: '`Cleartext` network traffic'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明文网络流量
- en: The Fingerprint authentication API
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指纹认证API
- en: Android Marshmallow now allows us, the developers, to authenticate users with
    their fingerprint scans when using such authentication scanners on supported devices.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓棉花糖现在允许我们，开发者，在使用支持设备上的此类认证扫描器时，通过用户的指纹扫描来认证用户。
- en: 'The `Fingerprint` API was added to Android Marshmallow via a whole new package:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Fingerprint` API是通过全新的包添加到安卓棉花糖中的：'
- en: '`android.hardware.fingerprint`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.hardware.fingerprint`'
- en: 'The package contains four classes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 包含四个类：
- en: '`FingerprintManager`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager`'
- en: '`FingerprintManager.AuthenticationCallback`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager.AuthenticationCallback`'
- en: '`FingerprintManager.AuthenticationResult`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager.AuthenticationResult`'
- en: '`FingerprintManager.CryptoObject`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager.CryptoObject`'
- en: Each class has a specific role in our fingerprint authentication process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类在我们的指纹认证过程中都有特定的角色。
- en: How do we use fingerprint authentication?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用指纹识别进行认证？
- en: 'The preceding four classes of the `android.hardware.fingerprint` package can
    be explained in the following manner:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.hardware.fingerprint`包中的前四个类可以用以下方式解释：'
- en: '`FingerprintManager`: Manage access to fingerprint hardware'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager`：管理对指纹硬件的访问'
- en: '`FingerprintManager.AuthenticationCallback`: Callback used in the `auth` process'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager.AuthenticationCallback`：在`auth`过程中使用的回调'
- en: '`FingerprintManager.AuthenticationResult`: Result container for `auth` process'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager.AuthenticationResult`：`auth`过程的 结果容器'
- en: '`FingerprintManager.CryptoObject`: Specific `Crypto` object to use with `FingerprintManager`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FingerprintManager.CryptoObject`：与`FingerprintManager`一起使用的特定`Crypto`对象'
- en: 'Say, we want to authenticate users via their fingerprints. A device with a
    fingerprint sensor must be in use; otherwise, we can''t use this API. We need
    to get an instance of `FingerprintManager`, and then we call the `authenticate()`
    method. We must implement a specific user interface for the fingerprint authentication
    flow, and the standard Android fingerprint icon (`c_fp_40px.png`) is included
    in the source. We need to add the appropriate permission to our app''s manifest:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望通过指纹来认证用户。必须使用带有指纹传感器的设备；否则，我们无法使用此API。我们需要获取`FingerprintManager`的实例，然后调用`authenticate()`方法。我们必须为指纹认证流程实现特定的用户界面，并且源代码中包含了标准的Android指纹图标（`c_fp_40px.png`）。我们需要在应用清单中添加适当的权限：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Right now, we don't have a device with a fingerprint sensor, so we will need
    to test our code from an emulator. (Nexus 5X and Nexus 6P are still with limited
    supply)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们没有带有指纹传感器的设备，因此我们需要从模拟器中测试我们的代码。（Nexus 5X和Nexus 6P仍然供应有限）
- en: Setting up for testing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: '**Android SDK Tools Revision 24.3** (at least) must be installed. Now, we navigate
    to **Settings** | **Security** | **Fingerprint** and add one fingerprint.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**必须安装至少是Android SDK Tools修订版24.3**。现在，我们导航到**设置** | **安全** | **指纹**并添加一个指纹。'
- en: '![Setting up for testing](img/00022.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![设置测试环境](img/00022.jpeg)'
- en: 'Follow the instructions manually; we are asked to select the PIN and leading
    us to find the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 手动遵循指导说明；我们被要求选择PIN码，并引导我们找到以下截图：
- en: '![Setting up for testing](img/00023.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![设置测试环境](img/00023.jpeg)'
- en: 'Finally, we must use a special `adb` command, tricking the sensor into capturing
    a mock fingerprint:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须使用一个特殊的`adb`命令，欺骗传感器捕获一个模拟指纹：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The resultant screen should look like the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果屏幕应如下面的截图所示：
- en: '![Setting up for testing](img/00024.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![设置测试环境](img/00024.jpeg)'
- en: We used `finger_id =1` for a single finger. The same command also emulates fingerprint
    touch events on the lock screen or in our app.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`finger_id =1`来模拟单个指纹。同样的命令也可以在锁屏或我们的应用中模拟指纹触摸事件。
- en: '![Setting up for testing](img/00025.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![设置测试环境](img/00025.jpeg)'
- en: 'If you need help to set up an emulator, read:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要帮助设置模拟器，请阅读：
- en: '[https://developer.android.com/tools/devices/index.html](https://developer.android.com/tools/devices/index.html)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[安卓设备索引](https://developer.android.com/tools/devices/index.html)'
- en: Now, we can launch our application and see that we can use the fingerprint as
    our authentication method when the user purchases an item.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以启动我们的应用程序，并看到当用户购买商品时，我们可以使用指纹作为认证方式。
- en: Credentials' Grace Period
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 凭据宽限期
- en: Ever got the itch when you wanted to use an app after device unlock only to
    find that you need to log in again or enter the app password again? Well, now
    we can query the device and check whether it was unlocked recently and how recent
    was it. This will give our users a chance to avoid all the fuss that comes with
    using our app. Note that this must be used in conjunction with a public or secret
    key implementation for user authentication. If you want to read more about the
    **Android Keystore System**, head to [https://developer.android.com/training/articles/keystore.html](https://developer.android.com/training/articles/keystore.html).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否有过在设备解锁后想立即使用应用程序，却发现需要重新登录或再次输入应用密码的经历？现在，我们可以查询设备并检查它最近是否解锁以及解锁的时间有多近。这将给我们的用户一个避免使用我们应用程序带来麻烦的机会。请注意，这必须与用户身份验证的公钥或私钥实现结合使用。如果你想了解更多关于**Android
    Keystore System**的信息，请访问[https://developer.android.com/training/articles/keystore.html](https://developer.android.com/training/articles/keystore.html)。
- en: We use `KeyguardManager` and check whether our lock screen is secured via the
    `isKeyguardSecure()` method. Once we know that it's secured, we can try and use
    the feature; otherwise, it'd imply that the user didn't set a secure lock screen
    and this feature is a *no-op*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`KeyguardManager`并通过`isKeyguardSecure()`方法检查锁屏是否安全。一旦确认安全，我们可以尝试使用该功能；否则，这意味着用户没有设置安全的锁屏，这个功能就是一项*a-no-op*。
- en: We generate a symmetric key with `KeyGenerator` in Android KeyStore, which can
    only be used after the user has authenticated with device credentials within the
    last *x* seconds. Setting this value (*x*) is done via the `setUserAuthenticationValidityDurationSeconds()`
    method, when we set up `KeyGenerator` or `KeyPairGenerator`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Android KeyStore中使用`KeyGenerator`生成一个对称密钥，只有在用户在过去*x*秒内使用设备凭据进行认证后才能使用。设置这个值（*x*）是在设置`KeyGenerator`或`KeyPairGenerator`时通过`setUserAuthenticationValidityDurationSeconds()`方法完成的。
- en: '![Credentials'' Grace Period](img/00026.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![凭据宽限期](img/00026.jpeg)'
- en: You can check out the sample code for more information. The activity is called
    `CredGraceActivity`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看示例代码了解更多信息。该活动被称为`CredGraceActivity`。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Try and display the reauthentication dialog as less as possible. When using
    a cryptographic object, you should try and verify its expiry, and only if it passes,
    use `createConfirmDeviceCredentialIntent()` to reauthenticate the user.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能少地尝试显示重新认证对话框。在使用加密对象时，应尝试验证其有效期，只有在通过的情况下，才使用`createConfirmDeviceCredentialIntent()`重新认证用户。
- en: Cleartext network traffic
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 明文网络流量
- en: Android Marshmallow also added a new flag to the manifest. This flag indicates
    whether the application is using a `cleartext` network traffic such as HTTP. The
    flag is `android:usesCleartextTraffic`, and the default value is `true`. Setting
    this to `false` means that some system API components—such as HTTP and FTP stacks,
    `DownloadManager` and `MediaPlayer`—will refuse to issue HTTP traffic and will
    only allow HTTPS. It would be a good practice to build a third-party library that
    honor this setting as well. Why is this good? Well, `cleartext` traffic lacks
    confidentiality, authenticity, and protections against tampering, and data can
    be tempered without it being detected. This is a major risk for applications,
    and we can now use it to try and enforce a stronger and more secure data transport
    to/from our applications.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓棉花糖（Marshmallow）在清单文件中增加了一个新的标志。该标志指示应用程序是否正在使用如HTTP这样的明文网络流量。该标志是`android:usesCleartextTraffic`，默认值为`true`。将其设置为`false`意味着一些系统API组件——如HTTP和FTP堆栈、`DownloadManager`和`MediaPlayer`——将拒绝发出HTTP流量，只允许HTTPS。构建一个尊重此设置的第三方库将是一个好习惯。为什么这样做是好的？因为明文流量缺乏机密性、真实性和防篡改保护，数据可能会在未被发现的情况下被篡改。这对于应用程序来说是一个主要风险，现在我们可以用它来尝试强制执行更强大、更安全的数据传输到/来自我们的应用程序。
- en: We need to remember that this flag is honored on the basis of the best effort,
    and it's not possible to prevent all `cleartext` traffic from Android applications
    given that they have permissions to use the `Socket` API, for instance, where
    the `Socket` API cannot determine `cleartext` usage. We can check out this flag
    by reading it from either `ApplicationInfo.flags` or `NetworkSecurityPolicy.isCleartextTrafficPermitted()`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要记住，这个标志是基于最佳努力的，不可能阻止所有来自安卓应用程序的`明文`流量，因为它们有权限使用`Socket` API，例如，`Socket`
    API无法确定`明文`的使用。我们可以通过从`ApplicationInfo.flags`或`NetworkSecurityPolicy.isCleartextTrafficPermitted()`读取来检查这个标志。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: WebView does not honor this flag, which means that it will load HTTP even if
    the flag is `false`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebView`不尊重这个标志，这意味着即使标志为`false`，它也会加载HTTP。'
- en: So, what do we do with the cleartext network traffic flag?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么，我们要如何处理明文网络流量标志呢？
- en: During app development, we can use `StrictMode` and identify any `cleartext`
    traffic from our app using `StrictMode.VmPolicy.Builder.detectCleartextNetwork()`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序开发期间，我们可以使用`StrictMode`并通过`StrictMode.VmPolicy.Builder.detectCleartextNetwork()`来识别应用程序中的任何`明文`流量。
- en: The downside of `usesCleartextTraffic` is that it causes app crashes or process
    termination when it's not using **SSL** (short for **Secure Socket Layer**). This
    is great in theory but not in production, where your SSL certificate, for some
    reason, has issues and you reroute the traffic to HTTP. So, pay extra attention
    to where HTTPS is used in your app and where it's okay to use HTTP.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`usesCleartextTraffic`的缺点是，当它不使用**SSL**（即**安全套接层**的简称）时，会导致应用程序崩溃或进程终止。这在理论上是很好的，但在生产环境中，由于某些原因，你的SSL证书出现问题，你将流量重定向到HTTP，这就不好了。因此，要特别注意你的应用中哪里使用了HTTPS，哪里可以使用HTTP。'
- en: Luckily, we have `StrictMode`, which now has a way to warn you if your application
    executes any unencrypted network operations via a `detectCleartextNetwork()` method
    on `StrictMode.VmPolicy.Builder`. In our sample project, we have a `ClearTextNetworkUsageActivity`
    activity; when running the `TestStrictHttp productFlavor` variant, you will see
    this in `LogCat`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有`StrictMode`，现在它有一种方法可以通过`StrictMode.VmPolicy.Builder`上的`detectCleartextNetwork()`方法来警告您的应用程序是否执行了任何未加密的网络操作。在我们的示例项目中，我们有一个`ClearTextNetworkUsageActivity`活动；当运行`TestStrictHttp
    productFlavor`变体时，你会在`LogCat`中看到这个。
- en: '![So, what do we do with the cleartext network traffic flag?](img/00027.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![那么，我们要如何处理明文网络流量标志呢？](img/00027.jpeg)'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Android Marshmallow gave us a new API to authenticate users with the `Fingerprint`
    API. We can use the sensor, authenticate the user even within our application,
    and save it for later use if we want to save the need for user login using the
    Credentials' Grace Period capabilities Android Marshmallow introduced.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓棉花糖为我们提供了一个新的API，通过`Fingerprint` API对用户进行身份验证。我们可以使用传感器，甚至在我们的应用程序中对用户进行身份验证，如果我们想节省用户登录的需要，还可以将其保存以后使用，利用安卓棉花糖引入的凭据宽限期功能。
- en: We also covered a way to make our application more secure using HTTPS only,
    and the `StrictMode` policy, enforced with the help of the `usesCleartextTraffic`
    flag, which allows us to make sure that all the nodes we connect to the outer
    world and examine the need for are a secure connection or not.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了一种方法，通过仅使用HTTPS和`StrictMode`策略，使我们的应用程序更加安全，该策略通过`usesCleartextTraffic`标志实施，这使我们能够确保所有连接到外部世界的节点都需要安全的连接。
- en: I would like to thank you for reading.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您的阅读。
- en: I would like to thank the Android team. This product has changed my life.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我想感谢安卓团队。这个产品改变了我的生活。
- en: The Android ecosystem has great developers contributing by publishing libraries,
    writing blog posts and answering support questions; I'm proud to be part of it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓生态系统拥有伟大的开发者们，他们通过发布库、撰写博文和回答支持问题做出贡献；我为能成为其中一员感到骄傲。
- en: Looking forward for future editions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 期待未来的版本。
