- en: Appendix A. Source Code for MagneTank
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provides a short description of and references for all of the classes
    used in the game **MagneTank** . MagneTank is available on the Google Play Store
    ([http://play.google.com/store/apps/details?id=ifl.games.MagneTank](http://play.google.com/store/apps/details?id=ifl.games.MagneTank)),
    formerly known as **Android Market** , and the source code can be found in the
    code bundle for this book. The gameplay includes aiming the tank's turret by touching
    where the turret should point and tapping in the same location to fire the turret.
    For the sake of demonstrating physics-enabled vehicles, the tank can be pulled
    to the left-hand side or the right-hand side by first touching it and then sliding
    in the desired direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The game''s classes are spread across the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Game level classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layer classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity and engine classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image is an in-game screenshot from MagneTank''s second level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Source Code for MagneTank](img/8987OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Game level classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These classes are present in the playable portion of the game:'
  prefs: []
  type: TYPE_NORMAL
- en: ManagedGameScene.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MagneTank's `ManagedGameScene` class builds upon the `ManagedGameScene` class
    presented in [Chapter 5](ch05.html "Chapter 5. Scene and Layer Management"), *Scene
    and Layer Management*, by adding a stepped loading screen to show what the game
    is loading for each level. The idea behind using loading steps is the same as
    showing a loading screen for one frame before loading the game, much like how
    the `SceneManager` class functions when showing a new scene, but the loading screen
    is updated for each loading step instead of just once at the first showing of
    the loading screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating the scene manager* in [Chapter 5](ch05.html "Chapter 5. Scene and
    Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GameLevel.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `GameLevel` class brings all of the other in-game classes together to form
    the playable part of MagneTank. It handles the construction and execution of each
    actual game level. It extends a customized `ManagedGameScene` class that incorporates
    a list of `LoadingRunnable` objects, which create the level in steps that allow
    each progression of the level construction to be shown on the screen. The `GameLevel`
    class also determines the completion or failure of each game level using the `GameManager`
    class to test for win or lose conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using parallax backgrounds to create perspective* in [Chapter 3](ch03.html
    "Chapter 3. Designing Your Menu"), *Designing Your Menu*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introducing the camera object* in [Chapter 4](ch04.html "Chapter 4. Working
    with Cameras"), *Working with Cameras*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Limiting camera area with the bound camera* in [Chapter 4](ch04.html "Chapter 4. Working
    with Cameras"), *Working with Cameras*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Taking a closer look with zoom cameras* in [Chapter 4](ch04.html "Chapter 4. Working
    with Cameras"), *Working with Cameras*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying a HUD to the camera* in [Chapter 4](ch04.html "Chapter 4. Working
    with Cameras"), *Working with Cameras*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customizing managed scenes and layers* in [Chapter 5](ch05.html "Chapter 5. Scene
    and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating sprite pools* in [Chapter 8](ch08.html "Chapter 8. Maximizing Performance"),
    *Maximizing Performance*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LoadingRunnable.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `LoadingRunnable` class acts as a `Runnable` object while also updating
    the loading screen in the `ManagedGameScene` class. An `ArrayList` type of `LoadingRunnable`
    objects is present in each `ManagedGameScene` class to give the developer as much
    or as little control over how much loading progression is shown to the player.
    It is important to note that, while the updating of the loading screen is not
    processor-intensive in MagneTank, a more complicated, graphically complex loading
    screen may take a large toll on the loading times of eah level.
  prefs: []
  type: TYPE_NORMAL
- en: Levels.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Levels` class holds an array of all of the levels that can be played in
    the game as well as helper methods to retrieve specific levels.
  prefs: []
  type: TYPE_NORMAL
- en: BouncingPowerBar.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BouncingPowerBar` class displays a bouncing indicator to the player that
    indicates how powerful each shot from the vehicle will be. It transforms the visible
    location of the indicator to a fractional value, which then has a cubic curve
    applied to add even more of a challenge when trying to achieve the most powerful
    shot. The following image shows what the power bar looks like after being constructed
    from three separate images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BouncingPowerBar.java](img/8987OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `BouncingPowerBar` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying a HUD to the camera* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MagneTank.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MagneTank` class creates and controls the vehicle that the game is based
    on. It pieces together Box2D bodies using joints to create the physics-enabled
    vehicle, and uses the player''s input, via `BoundTouchInputs`, to control how
    each part of the vehicle moves and functions. The following image shows the MagneTank
    before and after construction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MagneTank.java](img/8987OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `MagneTank` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using relative rotation* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Limiting camera area with the bound camera* in [Chapter 4](ch04.html "Chapter 4. Working
    with Cameras"), *Working with Cameras*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating unique bodies by specifying vertices* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using forces, velocities, and torque* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with joints* in [Chapter 6](ch06.html "Chapter 6. Applications of
    Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying a sprite-based shadow* in [Chapter 10](ch10.html "Chapter 10. Getting
    More From AndEngine"), *Getting More From AndEngine*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MagneticCrate.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MagneticCrate` class extends the `MagneticPhysObject` class. It creates
    and handles the various types of crates available to launch from the MagneTank
    vehicle. Each crate is displayed in the form of a tiled sprite, with the tiled
    sprite''s image index set to the crate''s type. The `MagneticCrate` class makes
    use of Box2D''s `postSolve()` method from the physics world''s `ContactListener`.
    The following image shows the various sizes and types of crates available in the
    game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MagneticCrate.java](img/8987OS_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `MagneticCrate` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using preSolve and postSolve* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MagneticOrb.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MagneticOrb` class creates a visual effect around MagneTank's current projectile.
    It rotates two swirl images (see the following image) in opposite directions to
    give the illusion of a spherical force. The `MagneticOrb` class forms and fades
    as projectiles are loaded and shot.
  prefs: []
  type: TYPE_NORMAL
- en: '![MagneticOrb.java](img/8987OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `MagneticOrb` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using relative rotation* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MagneticPhysObject.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MagneticPhysObject` class extends the `PhysObject` class to allow an object
    to be grabbed, or released, by the MagneTank vehicle. When grabbed, the object
    has anti-gravity forces applied as well as forces that pull the object toward
    the MagneTank turret.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MagneticPhysObject` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics") , Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics") Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using forces, velocities, and torque [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics") Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying anti-gravity to a specific body [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics") Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers? [Chapter 6](ch06.html "Chapter 6. Applications of
    Physics") Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MechRat.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MechRat` class extends the `PhysObject` class to take advantage of the
    `postSolve()` method that gets called when it collides with another physics-enabled
    object. If the force is great enough, MechRat is destroyed, and previously loaded
    particle effects are immediately shown. MechRat also has wheels connected by revolute
    joints, which add to the challenge of destroying it. The following image shows
    the visual composition of MechRat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MechRat.java](img/8987OS_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with particle systems* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating unique bodies by specifying vertices* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with joints* in [Chapter 6](ch06.html "Chapter 6. Applications of
    Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using preSolve and postSolve* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating destructible objects* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MetalBeamDynamic.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class represents the non-static, physics-enabled girders seen in the game.
    The length of each beam can be set thanks to its repeating texture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MetalBeamDynamic` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using relative rotation* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MetalBeamStatic.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the `MetalBeamDynamic` class above, this class also represents a
    girder, but the `BodyType` option of this object is set to `Static` to create
    an immobile barrier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MetalBeamStatic` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using relative rotation* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ParallaxLayer.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ParallaxLayer` class, which was written and released by the co-author
    of this book, Jay Schroeder, allows for the easy creation of `ParallaxEntity`
    objects that give the perception of depth when the `Camera` object is moved across
    a scene. The level of parallax effect can be set, and the `ParallaxLayer` class
    takes care of correctly rendering each `ParallaxEntity` object. The following
    image shows the background layers of MagneTank that are attached to a `ParallaxLayer`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ParallaxLayer.java](img/8987OS_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ParallaxLayer` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with OpenGL* in [Chapter 2](ch02.html "Chapter 2. Working with Entities"),
    *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using parallax backgrounds to create perspective* in [Chapter 3](ch03.html
    "Chapter 3. Designing Your Menu"), *Designing Your Menu*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhysObject.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PhysObject` class is used in MagneTank to delegate contacts received from
    the physics world's `ContactListener`. It also facilitates a `destroy()` method
    to make destroying physics objects easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PhysObject` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using preSolve and postSolve* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RemainingCratesBar.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `RemainingCratesBar` class gives a visual representation to the player of
    which crates are left to be shot by MagneTank. The size, type, and number of crates
    left in each level are retrieved from the `GameLevel` class and vary from level
    to level. When one crate is shot, the `RemainingCratesBar` class animates to reflect
    the change in the game state.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with OpenGL* in [Chapter 2](ch02.html "Chapter 2. Working with Entities"),
    *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TexturedBezierLandscape.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TexturedBezierLandscape` class creates two textured meshes and a physics
    body that represent the ground of the level. As the name implies, the landscape
    is comprised of Bezier curves to show rising or falling slopes. The textured meshes
    are made from repeating textures to avoid any visible seams between landscaped
    areas. The following image shows the two textures used to create the landscape
    as well as an example of how the combined meshes appear after a Bezier slope has
    been applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TexturedBezierLandscape.java](img/8987OS_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `TexturedBezierLandscape` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with OpenGL* in [Chapter 2](ch02.html "Chapter 2. Working with Entities"),
    *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating unique bodies by specifying vertices* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Textured meshes* in [Chapter 10](ch10.html "Chapter 10. Getting More From
    AndEngine"), *Getting More From AndEngine*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TexturedMesh.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class is the same `TexturedMesh` class as found in the recipe, *Textured
    meshes* in [Chapter 10](ch10.html "Chapter 10. Getting More From AndEngine"),
    *Getting More From AndEngine*.
  prefs: []
  type: TYPE_NORMAL
- en: WoodenBeamDynamic.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class is similar to the `MetalBeam` classes, but adds a health aspect that
    causes the `WoodenBeamDynamic` class to be replaced with a particle effect once
    its health reaches zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `WoodenBeamDynamic` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using relative rotation* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with particle systems* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to the Box2D physics extension* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding different body types* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using preSolve and postSolve* in [Chapter 6](ch06.html "Chapter 6. Applications
    of Physics"), *Applications of Physics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each of these classes handles a specific input method used in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: BoundTouchInput.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `BoundTouchInput` class facilitates the delegation of inputs, which are
    then bound to the `BoundTouchInput` class. This can be easily seen in-game when
    moving MagneTank to aim at the turret. When the touch enters another touchable
    area, it stays tied to the original area.
  prefs: []
  type: TYPE_NORMAL
- en: GrowButton.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `GrowButton` class simply shows an image that grows to a specific scale
    when the player is touching it and returns to its original scale when the touch
    is lifted or lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GrowToggleButton.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the `GrowButton` class, this class adds the functionality to show one
    or two `TiledTextureRegion` indices, depending on the state of a condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GrowToggleButton` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GrowToggleTextButton.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the `GrowToggleButton` class, this class uses a `Text` object instead
    of a `TiledTextureRegion` object to show the state of a condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GrowToggleTextButton` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layer classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These classes represent the layers that are present within the game:'
  prefs: []
  type: TYPE_NORMAL
- en: LevelPauseLayer.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `LevelPauseLayer` class represents the layer that is shown to the player
    when a level is paused. It displays the current level number, score, and high
    score, as well as buttons to go back to the game, back to the level-select screen,
    restart the level, or skip to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customizing managed scenes and layers* in [Chapter 5](ch05.html "Chapter 5. Scene
    and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LevelWonLayer.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `LevelWonLayer` class represents the layer that is shown to the player
    when a level is completed successfully. It displays the current level number,
    score, and high score, as well as the star rating that the player received. It
    also includes buttons to go back to the level-select screen, replay the level,
    or go on to the next level. The following image shows the `LevelWonLayer` class
    textures and what they look like when assembled in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LevelWonLayer.java](img/8987OS_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `LevelWonLayer` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customizing managed scenes and layers* in [Chapter 5](ch05.html "Chapter 5. Scene
    and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ManagedLayer.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class is the same `ManagedLayer` class as found in the *Creating the scene
    manager* recipe in [Chapter 5](ch05.html "Chapter 5. Scene and Layer Management"),
    *Scene and Layer Management*.
  prefs: []
  type: TYPE_NORMAL
- en: OptionsLayer.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This layer is accessible from the `MainMenu` scene and allows the player to
    enable or disable music and sounds as well as choose a graphics quality or reset
    the level completion data that they have achieved.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `OptionsLayer` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customizing managed scenes and layers* in [Chapter 5](ch05.html "Chapter 5. Scene
    and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These classes each manage a specific aspect of the game:'
  prefs: []
  type: TYPE_NORMAL
- en: GameManager.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `GameManager` class simply facilitates the checking of two conditions to
    determine if a level is completed or failed. Using that information, the game
    manager then calls the appropriate methods set in the `GameLevel` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating the game manager* in [Chapter 1](ch01.html "Chapter 1. AndEngine
    Game Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResourceManager.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ResourceManager` class is very similar to the one found in [Chapter 1](ch01.html
    "Chapter 1. AndEngine Game Structure"), *AndEngine Game Structure*, but adds the
    ability to use a set of lower quality textures, if desired. It also includes methods
    for determining an accurate font texture size to prevent wasting valuable texture
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Applying texture options* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game
    Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using AndEngine font resources* in [Chapter 1](ch01.html "Chapter 1. AndEngine
    Game Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating the resource manager* in [Chapter 1](ch01.html "Chapter 1. AndEngine
    Game Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with OpenGL* in [Chapter 2](ch02.html "Chapter 2. Working with Entities"),
    *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Setting up the resource manager for scene resources* in [Chapter 5](ch05.html
    "Chapter 5. Scene and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SceneManager.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class is identical to the `SceneManager` class found in the *Creating the
    scene manager* recipe in [Chapter 5](ch05.html "Chapter 5. Scene and Layer Management"),
    *Scene and Layer Management*.
  prefs: []
  type: TYPE_NORMAL
- en: SFXManager.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This simple class handles the playback of music and sounds as well as their
    muted state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SFXManager` class is based on the following recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Introducing sounds and music* in [Chapter 1](ch01.html "Chapter 1. AndEngine
    Game Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These classes are used only for the menus in the game.
  prefs: []
  type: TYPE_NORMAL
- en: LevelSelector.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class closely resembles the level selector found in [Chapter 3](ch03.html
    "Chapter 3. Designing Your Menu"), *Designing Your Menu*, but uses a series of
    `LevelSelectorButton` objects instead of sprites.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating our level selection system* in [Chapter 3](ch03.html "Chapter 3. Designing
    Your Menu"), *Designing Your Menu*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LevelSelectorButton.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `LevelSelectorButton` class visually shows the player the state of a level,
    locked or unlocked, and the number of stars achieved if the level is unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MainMenu.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MainMenu` class holds two `Entity` objects, one representing the title
    screen and one representing the level-select screen. The movement between the
    two screens is achieved using entity modifiers. During the first showing of the
    main menu, a loading screen is shown while the game's resources are being loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MainMenu` class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overriding the onManagedUpdate method* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customizing managed scenes and layers* in [Chapter 5](ch05.html "Chapter 5. Scene
    and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ManagedMenuScene.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class is the same `ManagedMenuScene` class as presented in the *Creating
    the scene manager* recipe in [Chapter 5](ch05.html "Chapter 5. Scene and Layer
    Management"), *Scene and Layer Management*.
  prefs: []
  type: TYPE_NORMAL
- en: ManagedSplashScreen.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class is based on the `ManagedMenuScene` class found in the *Customizing
    managed scenes and layers* recipe in Chapter 5, *Scene and Layer Management*.
    It adds code to unload `Entity` objects after the splash screen is hidden.
  prefs: []
  type: TYPE_NORMAL
- en: SplashScreens.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `SplashScreen` class uses entity modifiers and resolution-independent positioning
    to show the splash screens of the game. Each logo is clickable and starts an intent
    related to the logo.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bringing a scene to life with sprites* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using modifiers and entity modifiers* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customizing managed scenes and layers* in [Chapter 5](ch05.html "Chapter 5. Scene
    and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity and Engine Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These classes act as the backbone of the game.
  prefs: []
  type: TYPE_NORMAL
- en: MagneTankActivity.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This activity class builds upon the standard AndEngine `BaseGameActivity` class
    with the addition of ads, some advanced resolution-scaling performed in the `onCreateEngineOptions()`
    method, and shared preference methods to save and restore options and scores.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Know the life cycle* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Choosing our engine type* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game
    Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Saving and loading game data* in [Chapter 1](ch01.html "Chapter 1. AndEngine
    Game Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Setting up an activity to use the scene manager* in [Chapter 5](ch05.html
    "Chapter 5. Scene and Layer Management"), *Scene and Layer Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MagneTankSmoothCamera.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class extends the `SmoothCamera` object, but includes the ability to pan
    to the enemy base for a specified amount of time, as well as track the `MagneTank`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Introducing the camera object* in [Chapter 4](ch04.html "Chapter 4. Working
    with Cameras"), *Working with Cameras*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating smooth moves with a smooth camera* in [Chapter 4](ch04.html "Chapter 4. Working
    with Cameras"), *Working with Cameras*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ManagedScene.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class is the same `ManagedScene` class as presented in the *Creating the
    scene manager* recipe in [Chapter 5](ch05.html "Chapter 5. Scene and Layer Management"),
    *Scene and Layer Management*.
  prefs: []
  type: TYPE_NORMAL
- en: SwitchableFixedStepEngine.java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This `Engine` object acts exactly like a `FixedStepEngine` object when the `EnableFixedStep()`
    method has been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class is based on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Choosing our engine type* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game
    Structure"), *AndEngine Game Structure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are update handlers?* in [Chapter 7](ch07.html "Chapter 7. Working with
    Update Handlers"), *Working with Update Handlers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
