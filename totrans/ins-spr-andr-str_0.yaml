- en: Chapter 1. Instant Spring for Android Starter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章。Spring for Android 快速入门
- en: Welcome to Instant *Spring for Android Starter*. This book has been specially
    created to provide you with all the information that you need to ease your Android
    development using Spring for Android. You will learn the different features provided
    by Spring for Android and get started with building your first apps using these
    features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读《Spring for Android 快速入门》。本书特别为您提供了使用 Spring for Android 进行 Android 开发所需的所有信息。您将学习
    Spring for Android 提供的不同功能，并开始使用这些功能构建您的第一个应用。
- en: 'This book contains the following sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含以下部分：
- en: '*So, what is Spring for Android?* describes Spring for Android has an extension
    of the Spring Framework that helps simplify the development of native Android
    applications; it currently (Version 1.0.0.RELEASE) features a REST client (RestTemplate)
    and OAuth support (Spring Social).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*那么，Spring for Android 是什么？* Spring for Android 被描述为 Spring 框架的扩展，它有助于简化本地
    Android 应用程序的开发；目前（版本 1.0.0.RELEASE）它包括一个 REST 客户端（RestTemplate）和 OAuth 支持（Spring
    Social）。'
- en: '*Integrating it in an Android app* teaches how to integrate Spring for Android
    with the Eclipse IDE and ADT (Android Development Tools), as well as with Maven.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*将其集成到 Android 应用中* 教授如何将 Spring for Android 与 Eclipse IDE 和 ADT（Android 开发工具）以及
    Maven 集成。'
- en: '*Quick start – Rest Template* will show you how to use some of the core features
    of the Spring for Android Rest Template module; for example, creating a REST client.
    By the end of this section you will be able to retrieve, update, create, and delete
    REST resources using message converters and/or HTTP Basic authentication.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*快速入门 - Rest Template* 将向您展示如何使用 Spring for Android Rest Template 模块的一些核心功能；例如，创建一个
    REST 客户端。在本节结束时，您将能够使用消息转换器和/或 HTTP Basic 身份验证来检索、更新、创建和删除 REST 资源。'
- en: '*Quick start – OAuth* will show you how to use some of the core features of
    Spring for Android Auth module; for example, creating an OAuth connection to Google+
    to read a user profile. By the end of this section you will be able to establish
    an OAuth connection to authenticate your user and app.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*快速入门 - OAuth* 将向您展示如何使用 Spring for Android Auth 模块的一些核心功能；例如，创建到 Google+ 的
    OAuth 连接以读取用户资料。在本节结束时，您将能够建立 OAuth 连接来验证您的用户和应用。'
- en: '*People and places you should get to know* – Every open source project is centered
    around a community. This section provides you with many useful links to the project
    page and forums, as well as a number of helpful articles, tutorials and blogs,
    in addition to the Twitter feeds of Spring for Android super-contributors.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*您应该了解的人和地点* —— 每个开源项目都围绕一个社区。本节为您提供了许多有用的链接到项目页面和论坛，以及一些有帮助的文章、教程和博客，此外还有
    Spring for Android 优秀贡献者的 Twitter 动态。'
- en: So, what is Spring for Android?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，Spring for Android 是什么？
- en: 'In this first section, we will go through the main aspects of Spring for Android:
    `RestTemplate`, `Auth`, and what Spring for Android is not.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一部分，我们将介绍 Spring for Android 的主要方面：`RestTemplate`，`Auth`，以及 Spring for Android
    不是什么。
- en: RestTemplate
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RestTemplate
- en: The `RestTemplate` module is a port of the Java-based REST client `RestTemplate`,
    which initially appeared in 2009 in Spring for MVC. Like the other Spring template
    counterparts (`JdbcTemplate`, `JmsTemplate`, and so on), its aim is to bring to
    Java developers (and thus Android developers) a high-level abstraction of lower-level
    Java API; in this case, it eases the development of HTTP clients.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestTemplate` 模块是基于 Java 的 REST 客户端 `RestTemplate` 的移植，最初在 2009 年的 Spring
    for MVC 中出现。与其他 Spring 模板对应物（`JdbcTemplate`, `JmsTemplate` 等）一样，它的目标是向 Java 开发者（进而也是
    Android 开发者）提供一个低级别 Java API 的高级抽象；在这种情况下，它简化了 HTTP 客户端的发展。'
- en: In its Android version, `RestTemplate` relies on the core Java HTTP facilities
    (`HttpURLConnection`) or the Apache HTTP Client. According to the Android device
    version you use to run your app, `RestTemplate` for Android can pick the most
    appropriate one for you. This is according to Android developers' recommendations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在其 Android 版本中，`RestTemplate` 依赖于核心 Java HTTP 功能（`HttpURLConnection`）或 Apache
    HTTP 客户端。根据您运行应用使用的 Android 设备版本，`RestTemplate` for Android 可以为您选择最合适的一个。这是根据
    Android 开发者的建议。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See [http://android-developers.blogspot.ca/2011/09/androids-http-clients.html](http://android-developers.blogspot.ca/2011/09/androids-http-clients.html).
    This blog post explains why in certain cases Apache HTTP Client is preferred over
    `HttpURLConnection`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看 [http://android-developers.blogspot.ca/2011/09/androids-http-clients.html](http://android-developers.blogspot.ca/2011/09/androids-http-clients.html)。这篇博客文章解释了在某些情况下为什么首选
    Apache HTTP 客户端而不是 `HttpURLConnection`。
- en: '`RestTemplate` for Android also supports gzip compression and different message
    converters to convert your Java objects from and to JSON, XML, and so on.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestTemplate`在Android平台同样支持gzip压缩和不同的消息转换器，用于将你的Java对象转换成JSON、XML等格式。'
- en: Auth/Spring Social
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Auth/Spring Social
- en: The goal of the Spring Android `Auth` module is to let an Android app gain authorization
    to a web service provider using **OAuth** (Version 1 or 2).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Android `Auth`模块的目标是让Android应用使用**OAuth**（版本1或2）获得对网络服务提供商的授权。
- en: OAuth is probably the most popular authorization protocol (and it is worth mentioning
    that, it is an open standard) and is currently used by Facebook, Twitter, Google
    apps (and many others) to let third-party applications access users account.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth可能是最受欢迎的授权协议（值得一提的是，它是一个开放标准），目前被Facebook、Twitter、Google应用（以及其他许多应用）用来允许第三方应用程序访问用户账户。
- en: 'Spring for Android `Auth` module is based on several Spring libraries because
    it needs to securely (with cryptography) persist (via JDBC) a token obtained via
    HTTP; here is a list of the needed libraries for OAuth:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Spring for Android的`Auth`模块基于多个Spring库，因为它需要通过加密安全地（通过JDBC）持久化通过HTTP获得的令牌；以下是OAuth所需的库列表：
- en: '**Spring Security Crypto**: To encrypt the token'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Security Crypto**：用于加密令牌'
- en: '**Spring Android OAuth**: This extends `Spring Security Crypto` adding a dedicated
    encryptor for Android, and SQLite based persistence provider'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Android OAuth**：这扩展了`Spring Security Crypto`，为Android添加了一个专用的加密器，以及基于SQLite的持久化提供者'
- en: '**Spring Android Rest Template**: To interact with the HTTP services'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Android Rest Template**：用于与HTTP服务交互'
- en: '**Spring Social Core**: The OAuth workflow abstraction'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Social Core**：OAuth工作流抽象'
- en: 'While performing the OAuth workflow, we will also need the browser to take
    the user to the service provider authentication page, for example, the following
    is the Twitter OAuth authentication dialog:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行OAuth工作流时，我们还需要浏览器将用户带到服务提供商的身份验证页面，例如，以下是Twitter OAuth认证对话框：
- en: '![Auth/Spring Social](img/1905_01_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Auth/Spring Social](img/1905_01_02.jpg)'
- en: What Spring for Android is not
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring for Android不是什么
- en: SpringSource (the company behind Spring for Android) is very famous among Java
    developers. Their most popular product is the Spring Framework for Java which
    includes a dependency injection framework (also called an inversion of control
    framework). Spring for Android does not bring inversion of control to the Android
    platform.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SpringSource（Spring for Android背后的公司）在Java开发者中非常有名。他们最受欢迎的产品是包括依赖注入框架（也称为控制反转框架）的Spring
    Framework for Java。Spring for Android没有为Android平台带来控制反转。
- en: In its very first release (1.0.0.M1), Spring for Android brought a common logging
    facade for Android; the authors removed it in the next version.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在其第一个版本（1.0.0.M1）中，Spring for Android为Android带来了一个通用的日志外观；在下一个版本中，作者删除了它。
- en: Integrating it in an Android app
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android应用中集成
- en: 'Spring for Android is contained in multiple JAR libraries which should be linked
    to the project. These JAR libraries are not part of the standard Android distribution.
    For example, we will need the following JAR libraries to consume a JSON REST API
    with Spring For Android `RestTemplate`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Spring for Android包含多个JAR库，应该与项目关联。这些JAR库不是标准Android发行版的一部分。例如，为了使用Spring For
    Android的`RestTemplate`消费JSON REST API，我们需要以下JAR库：
- en: '![Integrating it in an Android app](img/1905_02_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![在Android应用中集成](img/1905_02_01.jpg)'
- en: Minimal dependencies to add or use RestTemplate
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加或使用RestTemplate的最小依赖
- en: You can use the IDE to manually satisfy the dependencies (and their transitive
    dependencies). The alternative to manual dependency management is automatic project
    building with **Maven**. We will explain Maven building later in the section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用IDE手动满足依赖关系（及其传递依赖）。手动依赖管理的替代方法是使用**Maven**进行自动项目构建。我们将在后面的部分解释Maven构建。
- en: Getting started with Eclipse and Spring for Android
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用Eclipse和Spring进行Android开发
- en: Eclipse is certainly the most popular IDE to develop Android apps; one of the
    reasons why it is so is because the **Android Development Tools** (**ADT**), maintained
    by Google, provides the Eclipse plugins to ease Android development (debugger,
    custom XML editors, and so on).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse无疑是开发Android应用最受欢迎的IDE之一；其受欢迎的原因之一是因为由谷歌维护的**Android开发工具**（**ADT**）提供了Eclipse插件，简化了Android开发流程（如调试器、自定义XML编辑器等）。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: IntelliJ IDEA Community Edition provides out of the box support for Android;
    Netbeans also lets you install the `nbandroid` plugin which facilitates Android
    apps development.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA Community Edition默认支持Android；Netbeans也允许你安装`nbandroid`插件，这有助于Android应用开发。
- en: 'We need to perform the following steps to get started with Eclipse:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行以下步骤才能开始使用Eclipse：
- en: Download a recent version from [http://www.eclipse.org/downloads](http://www.eclipse.org/downloads)
    (ADT is compatible with Eclipse from the Version 3.6.2; at the time of writing,
    4.2 Juno was the most recent). Prefer *Eclipse IDE for Java developers* rather
    than the other versions available.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.eclipse.org/downloads](http://www.eclipse.org/downloads)下载最新版本（ADT与从版本3.6.2开始的Eclipse兼容；在撰写本文时，4.2
    Juno是最新的）。优先选择*Eclipse IDE for Java developers*而不是其他可用的版本。
- en: 'Once you have it downloaded and unpacked on your machine, start it. Choose
    a workspace location (where your projects will lie) and install the ADT plugin:
    click on **Help** | **Eclipse Marketplace...** and type **adt** (as shown in the
    following screenshot) in the textbox before pressing *Enter*; now select **Android
    Development Tools for Eclipse** by clicking on the **Install** button.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其下载并解压到您的机器上后，启动它。选择一个工作区位置（你的项目将位于此处），并安装ADT插件：点击**帮助** | **Eclipse Marketplace...**，在文本框中输入**adt**（如下截图所示），然后按*回车*；现在点击**安装**按钮，选择**Android
    Development Tools for Eclipse**。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You don't have to select the NDK support feature, which provides support for
    Native Android Development (using the C or C++ language) since Spring For Android
    libraries are Java only libraries.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Spring For Android库仅包含Java库，因此你无需选择支持本地Android开发（使用C或C++语言）的NDK支持功能。
- en: '![Getting started with Eclipse and Spring for Android](img/1905_02_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用Eclipse和Spring for Android](img/1905_02_02.jpg)'
- en: Installing the ADT plugin
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装ADT插件
- en: Eclipse will prompt you several times about licenses and will eventually ask
    you to restart it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse会多次提示你关于许可协议，并最终要求你重启它。
- en: 'When you''re back in your workspace, make sure you have an (up-to-date) Android
    SDK installed on your machine: click on the icon with an Android robot coming
    out of a box, and install or update the Android SDK (you don''t need all Android
    versions, you can just install the most popular ones such as 2.2 aka Froyo, 2.3.3
    aka Gingerbread, 4.0.3 aka Ice Cream Sandwich and 4.1 aka Jelly Bean); restart
    Eclipse when you''re done.![Installing the ADT plugin](img/1905_02_03.jpg)'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你回到工作区时，请确保你的机器上安装了（最新的）Android SDK：点击一个Android机器人从盒子中出来的图标，安装或更新Android SDK（你不需要所有的Android版本，只需安装最受欢迎的版本，例如2.2又名Froyo，2.3.3又名Gingerbread，4.0.3又名Ice
    Cream Sandwich和4.1又名Jelly Bean）；完成后重启Eclipse。![安装ADT插件](img/1905_02_03.jpg)
- en: The Android SDK Manager to manage the Android tools and platforms
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android SDK管理器用于管理Android工具和平台
- en: If you haven't done so already, you also need to create an **Android Virtual
    Device** (**AVD**) so that you can deploy your Android apps to it (you could also
    connect your phone or tablet via USB to deploy your apps on it); for that matter,
    click on the icon representing an Android robot in a device screen and create
    a new AVD, as shown in the following screenshot:![Installing the ADT plugin](img/1905_02_04.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，你还需要创建一个**Android Virtual Device**（**AVD**），这样你就可以将你的Android应用部署到它上面（你也可以通过USB连接手机或平板电脑来部署应用）；为此，点击表示设备屏幕中的Android机器人的图标，并创建一个新的AVD，如下截图所示：![安装ADT插件](img/1905_02_04.jpg)
- en: Creating a new AVD
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建新的AVD
- en: Note
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find more details on the ADT plugin from the official website: [http://developer.android.com/tools/sdk/eclipse-adt.html](http://developer.android.com/tools/sdk/eclipse-adt.html).'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从官方网站找到关于ADT插件的更多详细信息：[http://developer.android.com/tools/sdk/eclipse-adt.html](http://developer.android.com/tools/sdk/eclipse-adt.html)。
- en: 'We finally need to download the Spring for Android JARs, go to the Spring for
    Android website: [http://www.springsource.org/spring-android](http://www.springsource.org/spring-android)
    and click on the **Download** button (you can skip the registration in the following
    screen). Now choose the latest Spring for Android release (at the time of writing:
    1.0.1.RELEASE) and unzip it on your machine; we will need the libraries in the
    next step:![Installing the ADT plugin](img/1905_02_04_bis.jpg)'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要下载Spring for Android的JAR文件，访问Spring for Android网站：[http://www.springsource.org/spring-android](http://www.springsource.org/spring-android)，然后点击**下载**按钮（在接下来的屏幕中你可以跳过注册）。现在选择最新的Spring
    for Android版本（在撰写本文时：1.0.1.RELEASE），在你的机器上解压；下一步我们需要这些库：![安装ADT插件](img/1905_02_04_bis.jpg)
- en: Spring for Android official download page
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Spring for Android官方下载页面
- en: First example app
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个示例应用
- en: 'Now we are ready to create our first application with Spring for Android:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备使用Spring for Android创建我们的第一个应用程序：
- en: Click on **File** | **New...** | **Android Application**, give your project
    name and accept the defaults in the following dialogs:![First example app](img/1905_02_05.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**File** | **New...** | **Android Application**，输入你的项目名称，并在接下来的对话框中接受默认设置：![第一个示例应用](img/1905_02_05.jpg)
- en: A new window named **New Android Application** will pop up, as shown in thefollowing
    screenshot:![First example app](img/1905_02_05.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个名为**New Android Application**的新窗口，如下面的截图所示：![第一个示例应用](img/1905_02_05.jpg)
- en: Creating an Android app from Eclipse
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从Eclipse创建Android应用
- en: When asked for a new activity, choose the default **BlankActivity**, as shown
    in the following screenshot:![First example app](img/1905_02_05-bis.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被要求创建新的活动时，选择默认的**BlankActivity**，如下面的截图所示：![第一个示例应用](img/1905_02_05-bis.jpg)
- en: Now copy the JARs `spring-android-core-{version}.jar` and `spring-android-rest-template-{version}.jar`
    from the Spring for Android ZIP file you downloaded before, to the `$Project_home/libs`
    folder of your new project; you should have the following project structure:![First
    example app](img/1905_02_06.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将你之前下载的Spring for Android ZIP文件中的JARs `spring-android-core-{version}.jar`和`spring-android-rest-template-{version}.jar`复制到新项目的`$Project_home/libs`文件夹中；你的项目结构应该如下所示：![第一个示例应用](img/1905_02_06.jpg)
- en: First example app
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个示例应用
- en: 'For this first sample app to use Spring for Android to request a web service
    (we will use [http://ifconfig.me/all](http://ifconfig.me/all)), we will just need
    to perform a `GET` method on this URL and we will receive the client info: IP,
    User Agent, and so on. We will then need to declare our intention to access the
    network. This works by adding the following `permission` tag just before the `application`
    tag in the Android manifest file:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使第一个示例应用程序能够使用Spring for Android请求Web服务（我们将使用[http://ifconfig.me/all](http://ifconfig.me/all)），我们只需对这个URL执行`GET`方法，并将收到客户端信息：IP、用户代理等。然后，我们需要声明我们访问网络的意图。这通过在Android清单文件的`application`标签之前添加以下`permission`标签来实现：
- en: '[PRE0]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The Android manifest is found at the root of the project: `AndroidManifest.xml`.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android的清单文件位于项目的根目录中：`AndroidManifest.xml`。
- en: Forgetting to do so results in obscure messages in the log cat view (where all
    the logs are gathered) such as `Fatal Exception`; see [http://developer.android.com/guide/topics/security/permissions.html](http://developer.android.com/guide/topics/security/permissions.html)
    for more information on permissions.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 忘记这样做会导致日志猫视图中出现模糊的消息（所有日志都收集在这里），如`Fatal Exception`；有关权限的更多信息，请参见[http://developer.android.com/guide/topics/security/permissions.html](http://developer.android.com/guide/topics/security/permissions.html)。
- en: 'The HTTP protocol defines methods, or verbs, to indicate the action to be performed
    on the remote resource: `GET` to fetch a resource, `POST` to store a resource,
    `PUT` to update a resource, `DELETE` to delete a resource are examples of HTTP
    verbs, you can learn more about them by reading this article: [http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol).'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HTTP协议定义了方法或动词，以指示对远程资源执行的操作：使用`GET`获取资源，使用`POST`存储资源，使用`PUT`更新资源，使用`DELETE`删除资源，这些都是HTTP动词的例子，你可以通过阅读这篇文章了解更多信息：[http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)。
- en: 'Then, we adjust the activity layout by removing the default "hello world" (`android:text="@string/hello_world"`)
    and replacing it by an anchor that we will use to print the response of the web
    service (`android:id="@+id/hello_text"`):'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过删除默认的"hello world"（`android:text="@string/hello_world"`）并替换为一个锚点来调整活动布局，我们将使用该锚点来打印Web服务的响应（`android:id="@+id/hello_text"`）：
- en: '[PRE1]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The activity layout is found at `res/layout/activity_main.xml`.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 活动布局位于`res/layout/activity_main.xml`。
- en: 'Finally, we can rework `MainActivity` itself (only the `onCreate()` method
    needs to be updated):'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以重新编写`MainActivity`本身（只需更新`onCreate()`方法）：
- en: '[PRE2]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If Eclipse complains about missing imports, press simultaneously *Shift* + *Ctrl*
    + *O* to automatically add the required the imports.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果Eclipse提示缺少导入，请同时按下*Shift* + *Ctrl* + *O*以自动添加所需的导入。
- en: In this snippet, we first got a reference to our `result_text` text view, and
    set it to a `final` variable named `resultTextView` (`final` because we will need
    to access it through an inner class).
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这段代码中，我们首先获取到`result_text`文本视图的引用，并将其设置为名为`resultTextView`的`final`变量（`final`是因为我们需要通过内部类访问它）。
- en: Next, we created an anonymous inner class, extending `AsyncTask` to implement
    all the logic of hitting the web service (creating the `RestTemplate` instance,
    adding the `String` converter and calling `getForObject`), and setting the result
    to the text view (using the `setText` method). When we call `simpleGetTask.execute(url)`,
    the URL is added to the array of params in `doInBackground(String... params)`
    (so `params[0]` is `url` in this case).
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一个匿名内部类，扩展了 `AsyncTask` 以实现访问网络服务的所有逻辑（创建 `RestTemplate` 实例，添加 `String`
    转换器并调用 `getForObject`），并将结果设置到文本视图中（使用 `setText` 方法）。当我们调用 `simpleGetTask.execute(url)`
    时，URL 被添加到 `doInBackground(String... params)` 中的参数数组中（在这种情况下，`params[0]` 就是 `url`）。
- en: Note
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If we had directly written the code to hit the web service in the `onCreate()`
    method, the application would not have even been able to start since the Android
    platform prevents the developers from performing HTTP requests in the UI (main)
    thread (and for a good reason: those network-related operations often take time
    to complete, and would freeze the UI while the operations were in progress).'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们直接在 `onCreate()` 方法中编写访问网络服务的代码，应用程序甚至将无法启动，因为 Android 平台阻止开发者在 UI（主）线程中执行
    HTTP 请求（并且有很好的理由：这些与网络相关的操作通常需要时间来完成，并且在操作进行时会冻结 UI）。
- en: '[PRE3]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Do not do this! You can not perform HTTP-related calls from the UI (main) thread.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要这样做！你不能从 UI（主）线程执行与 HTTP 相关的调用。
- en: Note
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information about `AsyncTasks` can be found in the official documentation:
    [http://developer.android.com/reference/android/os/AsyncTask.html](http://developer.android.com/reference/android/os/AsyncTask.html)
    and also on threads and processes in Android in general: [http://developer.android.com/guide/components/processes-and-threads.html](http://developer.android.com/guide/components/processes-and-threads.html).'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 `AsyncTasks` 的更多信息可以在官方文档中找到：[http://developer.android.com/reference/android/os/AsyncTask.html](http://developer.android.com/reference/android/os/AsyncTask.html)，以及关于
    Android 中的一般线程和进程信息：[http://developer.android.com/guide/components/processes-and-threads.html](http://developer.android.com/guide/components/processes-and-threads.html)。
- en: We are now ready to launch this first Spring for Android based app!
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备启动这个基于 Spring for Android 的第一个应用！
- en: 'Right-click on the project name and select **Run as...** | **Android Application**:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 右键点击项目名称并选择 **运行方式...** | **Android 应用程序**：
- en: '![First example app](img/1905_02_06-bis.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![第一个示例应用](img/1905_02_06-bis.jpg)'
- en: Eclipse will start your previously created AVD and will automatically run the
    app, you should see something similar to the following screenshot:![First example
    app](img/1905_02_07.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse 将启动你之前创建的 AVD 并自动运行应用，你应该会看到类似于以下截图的内容：![第一个示例应用](img/1905_02_07.jpg)
- en: MainActivity screenshot from the AVD
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 来自 AVD 的 MainActivity 截图
- en: Congratulations! You've successfully run your first Spring for Android based
    app!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功运行了你的第一个基于 Spring for Android 的应用！
- en: Using Maven to build a Spring for Android app
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Maven 构建 Spring for Android 应用
- en: In the previous example, we only added two JARs to the `libs` folder; but if
    you need other dependencies, such as `MessageConverters` (to unmarshall JSON,
    XML responses), the `Auth` module, or any other existing libraries in your project,
    managing your dependencies will soon become a burden!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们只向 `libs` 文件夹中添加了两个 JAR 文件；但是如果你需要其他依赖，比如 `MessageConverters`（用于解组
    JSON、XML 响应），`Auth` 模块，或项目中的任何其他现有库，管理你的依赖关系很快就会成为负担！
- en: 'Maven can help you manage your dependencies (in a nutshell, you specify them
    in a file called `pom.xml` and it will get them from the Internet automatically,
    including their transitive dependencies) and much more: release operations, tests
    runs, header generation, and so on. Maven is a modular open source build tool
    with tons of plugins!'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 可以帮助你管理依赖关系（简而言之，你在一个名为 `pom.xml` 的文件中指定它们，它会自动从互联网上获取它们，包括它们的传递依赖关系）以及更多：发布操作，测试运行，头部生成等等。Maven
    是一个模块化的开源构建工具，拥有大量的插件！
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When using the Android Maven plugin, you should add to your environment the
    following variable `ANDROID_HOME` (linking your Android home directory) and add
    `ANDROID_HOME/platform-tools` to your path. This is explained in detailed in [https://code.google.com/p/maven-android-plugin/wiki/GettingStarted](https://code.google.com/p/maven-android-plugin/wiki/GettingStarted).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Android Maven 插件时，你应在环境中添加以下变量 `ANDROID_HOME`（指向你的 Android 主目录）并将 `ANDROID_HOME/platform-tools`
    添加到你的路径中。这详细解释在[https://code.google.com/p/maven-android-plugin/wiki/GettingStarted](https://code.google.com/p/maven-android-plugin/wiki/GettingStarted)。
- en: 'To begin with, let''s add the **m2e** (Maven to Eclipse) plugin to Eclipse:
    like we did for the ADT plugin, open **Help** | **Eclipse** Marketplace and search
    for **maven**; choose **Maven Integration for Eclipse**, click on **Install**
    and acknowledge the dialogs; restart your IDE at the end of the process.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们向 Eclipse 添加 **m2e**（Maven 到 Eclipse）插件：就像我们对 ADT 插件所做的那样，打开 **帮助** |
    **Eclipse** 市场并搜索 **maven**；选择 **Maven Integration for Eclipse**，点击 **安装** 并确认对话框；在过程结束时重启你的
    IDE。
- en: '![Using Maven to build a Spring for Android app](img/1905_02_08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Maven 构建 Spring for Android 应用](img/1905_02_08.jpg)'
- en: Installing Maven Integration for Eclipse
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Eclipse 的 Maven 集成
- en: 'Now import the project named `spring-for-android-first-example-maven` into
    your workspace: you can either clone it from GitHub or unzip the `examples.zip`
    archive; and then, from Eclipse, click on **File** | **Import…** and choose **Existing
    Maven Projects**, and click on **Next**.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将名为 `spring-for-android-first-example-maven` 的项目导入你的工作空间：你可以从 GitHub 克隆它，或者解压
    `examples.zip` 压缩包；然后，在 Eclipse 中，点击 **文件** | **导入…** 并选择 **现有 Maven 项目**，然后点击
    **下一步**。
- en: '![Using Maven to build a Spring for Android app](img/1905_02_09.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Maven 构建 Spring for Android 应用](img/1905_02_09.jpg)'
- en: Import existing Maven project
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 导入现有 Maven 项目
- en: 'Browse to the directory where you cloned or unzipped the project and click
    on the **Next** button:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到克隆或解压项目的目录并点击 **下一步** 按钮：
- en: '![Using Maven to build a Spring for Android app](img/1905_02_10.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Maven 构建 Spring for Android 应用](img/1905_02_10.jpg)'
- en: Browse to your maven project
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到你的 Maven 项目
- en: M2e will show you a list of m2e connectors needed to integrate the Maven-based
    project into your IDE (basically those connectors tell m2e how to generate and
    compile sources); click on **Finish** and accept the following dialogs; restart
    Eclipse.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: M2e 将会显示一个 m2e 连接器列表，这些连接器将 Maven 项目集成到你的 IDE 中（基本上这些连接器告诉 m2e 如何生成和编译源代码）；点击
    **完成** 并接受后续对话框；重启 Eclipse。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The most important connector here is the m2e-android connector : it enables
    m2e to integrate with ADT, more info on [http://rgladwell.github.com/m2e-android/](http://rgladwell.github.com/m2e-android/).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最重要的连接器是 m2e-android 连接器：它使 m2e 能够与 ADT 集成，更多信息请访问 [http://rgladwell.github.com/m2e-android/](http://rgladwell.github.com/m2e-android/)。
- en: The project should be imported just fine and you can deploy the project on your
    AVD in the same way you did with the previous project (right-click on the project,
    and choose **Run as** | **Android application**).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 项目应该已经顺利导入，你可以像上一个项目一样在 AVD 上部署项目（右键点击项目，并选择 **运行方式** | **Android 应用程序**）。
- en: Let's have a look though at the `pom.xml` file (the only additional file compared
    to the previous project), right-clicking on it and choosing **Open with…** | **Maven
    POM Editor**; click on the **pom.xml** tab at the bottom of the view.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一下 `pom.xml` 文件（与上一个项目相比唯一的附加文件），右键点击它并选择 **打开方式…** | **Maven POM 编辑器**；点击视图底部的
    **pom.xml** 标签。
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There you can see in the dependencies section; the Android platform and the
    Spring for Android `RestTemplate` artifact (no need to specify Spring for Android
    core! Remember, Maven automatically gets the transitive dependencies) and in the
    plugins section the Android-Maven plugin (which extends Maven for Android projects,
    thanks to the `extensions=true` attribute), configured to require Android 4.0.3
    (API level 15).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在依赖关系部分，你可以看到 Android 平台和 Spring for Android `RestTemplate` 工件（无需指定 Spring for
    Android 核心！记住，Maven 会自动获取传递依赖），以及在插件部分配置为需要 Android 4.0.3（API 级别 15）的 Android-Maven
    插件（它通过 `extensions=true` 属性扩展 Maven 以支持 Android 项目）。
- en: 'Maven at its core is a command-line tool, and if you download and unzip Maven
    on your machine, you could go to the root directory of the Maven project (where
    `pom.xml` resides) and type the Maven command with different goals:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的核心是一个命令行工具，如果你在机器上下载并解压 Maven，可以进入 Maven 项目的根目录（即 `pom.xml` 所在的位置）并输入带有不同目标的
    Maven 命令：
- en: '`mvn clean install`: To compile, run the tests and package'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvn clean install`：编译，运行测试并打包'
- en: '`mvn clean install android:run`: To start your app in an AVD'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvn clean install android:run`：在 AVD 中启动你的应用'
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see all the available goals, you can type `mvn help:describe -Dplugin=com.jayway.maven.plugins.android.generation2:maven-android-plugin`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有可用的目标，你可以输入 `mvn help:describe -Dplugin=com.jayway.maven.plugins.android.generation2:maven-android-plugin`。
- en: You also can simulate command line Maven from inside Eclipse, right-clicking
    on the project and choosing **Run as** | **Maven build...**, and specifying your
    goals.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 Eclipse 内部模拟命令行 Maven，右键点击项目并选择 **运行方式** | **Maven 构建...**，并指定你的目标。
- en: 'Maven installation instructions can be found online: [http://www.sonatype.com/books/mvnref-book/reference/installation-sect-maven-install.html](http://www.sonatype.com/books/mvnref-book/reference/installation-sect-maven-install.html).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Maven安装说明可以在网上找到：[http://www.sonatype.com/books/mvnref-book/reference/installation-sect-maven-install.html](http://www.sonatype.com/books/mvnref-book/reference/installation-sect-maven-install.html)。
- en: To learn more about Maven, I highly recommend to read the free and available
    online Maven book at [http://www.sonatype.com/books/mvnref-book/reference/](http://www.sonatype.com/books/mvnref-book/reference/)
    which even has a specific Android chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Maven的信息，我强烈建议阅读在线免费提供的Maven书籍，它甚至有一个专门的Android章节，可以在[http://www.sonatype.com/books/mvnref-book/reference/](http://www.sonatype.com/books/mvnref-book/reference/)找到。
- en: Now we are ready to hack together some richer Spring for Android based apps!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始构建一些更丰富的基于Spring for Android的应用程序！
- en: Quick start – RestTemplate
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速开始 - RestTemplate
- en: Now that our workspace is set up and we already successfully deployed our first
    Spring for Android `RestTemplate` based app, let's explore some more capabilities
    from `RestTemplate`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的工作空间已经设置好，并且我们已经成功部署了第一个基于Spring for Android `RestTemplate`的应用程序，那么让我们探索`RestTemplate`的更多功能。
- en: This section relies on several example apps. We will go through all the important
    points of each code sample. Feel free to import the projects into your IDE and
    browse the code.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本节依赖于几个示例应用程序。我们将逐一讲解每个代码样本的重要点。随时可以将项目导入你的IDE并浏览代码。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'From now on, I will use Maven to manage dependencies, but you don''t have to.
    Each project has a list of dependencies in its `README.md` file: download them
    (or get them from your Spring for Android ZIP archive `libs` folder), and add
    them to the `libs` folder!'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我将使用Maven来管理依赖项，但你不必如此。每个项目在它的`README.md`文件中都有依赖项列表：下载它们（或者从你的Spring for
    Android ZIP存档中的`libs`文件夹获取），并将它们添加到`libs`文件夹中！
- en: Different message converters
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同的消息转换器
- en: 'In the previous section, we already used a message converter: `StringHttpMessageConverter`.
    Each message converter supports reading from and writing to certain media types
    (often referred to as MIME types); `StringHttpMessageConverter` supports reading
    all kinds of documents (MIME */*) and writing to text (MIME text/plain). Let''s
    discover more complex message converters.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经使用了一个消息转换器：`StringHttpMessageConverter`。每个消息转换器支持从和向特定的媒体类型（通常称为MIME类型）读取和写入；`StringHttpMessageConverter`支持读取所有类型的文档（MIME
    */*）以及写入文本（MIME text/plain）。让我们来发现更复杂的信息转换器。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**MIME** (**Multipurpose Internet Mail Extensions**), is not only used to describe
    the content of e-mails, it is vastly used to describe the content of documents
    exchanged through HTTP as well ([http://en.wikipedia.org/wiki/MIME](http://en.wikipedia.org/wiki/MIME)).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**MIME**（**多用途互联网邮件扩展**）不仅用于描述电子邮件的内容，也广泛应用于通过HTTP交换的文档内容的描述（[http://en.wikipedia.org/wiki/MIME](http://en.wikipedia.org/wiki/MIME)）。'
- en: MappingJacksonHttpMessageConverter
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MappingJacksonHttpMessageConverter
- en: JSON messages are very frequent among REST web services. Originally designed
    for the JavaScript language (`JavaScriptObjectNotation`); they're lightweight
    and human readable as well.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: JSON消息在REST网络服务中非常常见。最初为JavaScript语言（`JavaScriptObjectNotation`）设计；它们轻量级且易于阅读。
- en: '`Ifconfig.me` can return a JSON response, if you use this URL : [http://ifconfig.me/all.json](http://ifconfig.me/all.json).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ifconfig.me`可以返回一个JSON响应，如果你使用这个URL：[http://ifconfig.me/all.json](http://ifconfig.me/all.json)。'
- en: 'In the code from our first example, let''s replace `StringHttpMessageConverter`
    with `MappingJacksonHttpMessageConverter`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们第一个例子的代码中，让我们用`MappingJacksonHttpMessageConverter`替换`StringHttpMessageConverter`：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we also introduced a model class named `IfConfigMeJson`: this
    class defines the mapping between the JSON messages properties (`{"connection":"keep-alive","ip_addr":"70.30.43.43",
    [..]}`) and a **POJO** (**Plain Old Java Object**: a simple class with member
    variables and their accessors), so that we can easily access each property of
    the response (in the following example: `result.getIpAddr()`) in our Java code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们还引入了一个名为`IfConfigMeJson`的模型类：这个类定义了JSON消息属性（`{"connection":"keep-alive","ip_addr":"70.30.43.43",[..]}`）与一个**POJO**（**普通旧Java对象**：一个带有成员变量及其访问器的简单类）之间的映射，这样我们就可以在我们的Java代码中轻松访问响应的每个属性（在以下示例中：`result.getIpAddr()`)。
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Jackson automatically matches JSON properties with Java fields as long as they
    are named identically (CamelCase in Java, underscore for JSON). You've certainly
    noticed that we mapped the JSON property `ip_addr` with the field `ipAddr`, to
    respect Java naming conventions, thanks to Jackson's `@JsonProperty` annotation
    before the field definition. On a side note, we could have declared the fields
    of the class as public and have the accessors removed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 只要它们的名称相同（Java中为驼峰命名，JSON中为下划线），Jackson就会自动将JSON属性与Java字段匹配。你肯定注意到了，我们使用Jackson的`@JsonProperty`注解在字段定义之前，将JSON属性`ip_addr`映射到字段`ipAddr`，以遵守Java命名约定。顺便一提，我们可以将类的字段声明为public，并移除访问器。
- en: 'When you run the application, you will only see the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用程序时，你只会看到以下截图：
- en: '![MappingJacksonHttpMessageConverter](img/1905_03_01.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![MappingJacksonHttpMessageConverter](img/1905_03_01.jpg)'
- en: The app using `MappingJacksonHttpMessageConverter`
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`MappingJacksonHttpMessageConverter`的应用程序
- en: 'In this section we added a dependency to `jackson-mapper-asl` in our `pom.xml`
    file:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在`pom.xml`文件中添加了对`jackson-mapper-asl`的依赖：
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is another JSON message converter available, `GsonHttpMessageConverter`,
    using the Google Gson library instead of Jackson, that can be used alternatively.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另外还有一个可用的JSON消息转换器，`GsonHttpMessageConverter`，它使用Google的Gson库而不是Jackson，可以作为替代使用。
- en: SimpleXmlHttpMessageConverter
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`SimpleXmlHttpMessageConverter`'
- en: 'Another message converter worth mentioning is `SimpleXmlHttpMessageConverter`:
    it maps XML responses and requests to POJOs the same way `MappingJacksonHttpMessageConverter`
    did with JSON.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得一提的消息转换器是`SimpleXmlHttpMessageConverter`：它将XML响应和请求映射到POJO，就像`MappingJacksonHttpMessageConverter`处理JSON一样。
- en: 'As an example, let''s request the `Ifconfig.me` XML service: [http://ifconfig.me/all.xml](http://ifconfig.me/all.xml).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例，让我们请求`Ifconfig.me`的XML服务：[http://ifconfig.me/all.xml](http://ifconfig.me/all.xml)。
- en: 'In the `MainActivity` class from our previous example, let''s replace `MappingJacksonHttpMessageConverter`
    with `SimpleXmlHttpMessageConverter`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上一个示例中的`MainActivity`类，我们将`MappingJacksonHttpMessageConverter`替换为`SimpleXmlHttpMessageConverter`：
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once again, you''ll notice we rely on a class, named `IfConfigMeXml.java`,
    to allow `SimpleXml` to do the mapping between the XML response and the Java code.
    The following is the XML response:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你会再次注意到，我们依赖一个名为`IfConfigMeXml.java`的类，允许`SimpleXml`在XML响应和Java代码之间进行映射。以下是XML响应内容：
- en: '[PRE9]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is the Java code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Java代码：
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The annotations are similar to the ones we used for the JSON message converter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注解与我们对JSON消息转换器使用的类似。
- en: 'The `@Root` annotation defines what will be the name of the root XML tag: `info`
    in this case.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Root`注解定义了根XML标签的名称：在这种情况下是`info`。'
- en: 'The `@Element` annotation is added before each field to let `SimpleXml` know
    those fields are mapped to XML tags: if `required` is set to false, it means the
    tag could be empty; if `name` is specified, it means the POJO field does not match
    the XML tag name.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Element`注解在每个字段之前添加，让`SimpleXml`知道这些字段映射到XML标签：如果`required`设置为false，意味着标签可能是空的；如果指定了`name`，意味着POJO字段与XML标签名不匹配。'
- en: If you run the application, you will get exactly the same output as we had in
    the previous example.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行应用程序，你将得到与上一个示例完全相同的输出。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this section, we added a dependency to the `SimpleXml` framework. Unfortunately,
    this dependency has transitive dependencies to stax and xpp3 which are not needed
    for Android applications.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们向`SimpleXml`框架添加了一个依赖项。不幸的是，这个依赖项具有对stax和xpp3的传递依赖，这对于Android应用程序是不需要的。
- en: We had to explicitly filter some transitive dependencies to let Maven know not
    to add them to the classpath.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不显式过滤一些传递依赖，让Maven知道不要将它们添加到类路径中。
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: RssChannelHttpMessageConverter
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`RssChannelHttpMessageConverter`'
- en: This message converter is about parsing RSS feeds; as usual we are going to
    inject it to our `RestTemplate` instance, but this time we will read entries from
    a blog feed.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个消息转换器是关于解析RSS提要的；像往常一样，我们将它注入到我们的`RestTemplate`实例中，但这次我们将从博客提要中读取条目。
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We don''t have to create a POJO mapping class here since the result will always
    be a `Channel` – a class providing us with methods to access the different property
    of the feed: items, language, published date, and so on. In this example, we only
    read the content of the first item – the latest article from my blog!'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们不需要创建一个POJO映射类，因为结果将始终是一个`Channel`——一个为我们提供访问提要不同属性的方法的类：项目、语言、发布日期等等。在这个例子中，我们只读取第一个项目的内容——我的博客的最新文章！
- en: 'The feed looks as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 提要如下所示：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And the result on the device is as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![RssChannelHttpMessageConverter](img/1905_03_02.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: The content of the first item of an RSS feed
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed that I switched the previous TextView for a WebView, capable
    of interpreting HTML code such as hyperlinks.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '`RssChannelHttpMessageConverter` does not have default supported types, that''s
    why we added the media type `text/xml` as a supported type.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We had to add a dependency on the Android ROME Feed Reader for this RSS feed
    example; this library is not published on Maven Central, which means we also had
    to declare the repository where its artifacts are deployed to.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Gzip encryption
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To save bandwidth during transfers, as part of each request you can tell the
    server that you support gzip encryption. If the server supports gzipping the responses,
    it will do so.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring for Android `RestTemplate`, relies on Android `java.net.HttpURLConnection`
    since Gingerbread (2.3), which defaults in sending the `Accept-Encoding : gzip`
    header; so gzip compression is on by default.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, you just need to specify in the headers of the request that you
    can support gzip. Let''s have a look at a concrete example – the Jackson example
    where this time we only show the client supported encoding mechanism:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using `Identity`, we declare that we do not support anything else other than
    raw text.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you ask for gzip explicitly or implicitly, `java.util.zip.GzipInputStream`
    will be automatically used to decode the response.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice that instead of using `getForObject(url,Pojo.class)` we used
    `exchange(url,GET,requestEntity,Pojo.class)`? The `exchange()` method is a more
    versatile method that allows for customization of the request.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the request/response exchanged during the execution of
    this code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '| Request (IDENTITY and then GZIP) | Response (IDENTITY and then GZIP) |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: '| `GET/all.json HTTP/1.1``Accept: application/json``Accept-Encoding: identity``Content-Length:
    0``Host: ifconfig.me:80``Connection: Keep-Alive` | `HTTP/1.1 200 OK``Date: Fri,
    02 Nov 2012 02:41:04 GMT``Server: Apache``Vary: Accept-Encoding``Connection: close``Transfer-Encoding:
    chunked``Content-Type: application/json``13c``{"connection":"Keep-Alive","ip_addr:[...],"encoding":"identity"}``0`
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
- en: '| `GET /all.json HTTP/1.1``Accept: application/json``Accept-Encoding: gzip``Content-Length:
    0``User-Agent: Dalvik/1.6.0 (Linux; U; Android 4.0.4; sdk Build/MR1)``Host: ifconfig.me:80``Connection:
    Keep-Alive``X-Forwarded-For: 192.168.1.111` | `HTTP/1.1 200 OK` `—îPq``Date: Fri,
    02 Nov 2012 02:42:08 GMT``Server: Apache``Vary: Accept-Encoding``Content-Encoding:
    gzip``Content-Length: 258``Connection: close``Content-Type: application/json``­ã/%êAOÑ0 ÖÔ˛``"ì&À–"ß5ﬁ''ãâg2€él•¥§4�ˇªÖΩÕ&#124;3ÔeÊ˝2È¨%9kgŸ/{&ö"ì—+±/"SáJ˘àk`
    |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's often handy to analyze the requests and responses that go back and forth
    the device; you can use the open source software Membrane as an HTTP proxy ([http://www.membrane-soa.org/soap-monitor/](http://www.membrane-soa.org/soap-monitor/))
    creating a new simple proxy that listens to localhost:2000 and redirects to the
    web service you target (for example, [http://ifconfig.me](http://ifconfig.me)).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Android code, just replace your web service URL with `computer_ip:2000`
    (could be `192.168.1.1:2000`): you''ll then see all the traffic between your Android
    app and the web service URL.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Basic authentication
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This authentication scheme is, as its name implies it, very basic and unsecured.
    You just provide a username and a password to access a realm (usually a portion
    of a website).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did for the encoding, we can provide the credentials through a header:
    the username and the password will be Base64-encoded.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By no means does Base64 encoding provide security. You can decode it as easily
    as you encode it! See [https://en.wikipedia.org/wiki/Base64](https://en.wikipedia.org/wiki/Base64)
    for more information on Base64.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we'll try to access a web page that displays **Hello World**;
    provided you sent the right credentials. The page is [http://restfulapp.appspot.com/helloworld](http://restfulapp.appspot.com/helloworld),
    and the credentials are username – `s4a` and password – `s4a` (you can try it
    in your web browser).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to access this page with Spring for Android's `RestTemplate`!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The way we set `Accepted-Encoding` in the previous example, we set an **HttpBasicAuthentication**
    header to the `RestTemplate` headers.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the request/response exchanged during the execution of
    this code:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '| Request | Response |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
- en: '| `GET/helloworld HTTP/1.1``Accept: text/plain, */*``Authorization: Basic czRhOnM0YQ==``Content-Length:
    0``User-Agent: Dalvik/1.6.0 (Linux; U; Android 4.0.4; sdk Build/MR1)``Host: restfulapp.appspot.com:80``Connection:
    Keep-Alive``Accept-Encoding: gzip` | `HTTP/1.1 200 OK``Content-Type: text/plain;
    charset=iso-8859-1``Vary: Accept-Encoding``Date: Fri, 02 Nov 2012 03:33:06``Server:
    Google Frontend``Cache-Control: private``Transfer-Encoding: chunked``d``Hello,
    world``0` |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The string `czRhOnM0YQ==` is the Base64 encoding of `s4a:s4a`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover a better way to authenticate and also authorize a user and the
    user''s app in the next section: *Quick Start – OAuth*.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: The RESTful recipe app
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s study the case of the RESTful recipe app: an Android app to interact
    with a RESTful service to create, update, read, and delete recipes.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'A recipe is somewhat simple – it is a POJO with the following fields:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: An ID (`Integer`)
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A title (`String`)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the recipe (`String`)
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A type: usually an entree, a main dish or a dessert (`String`)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An author (`String`)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The online web app that we will use as our backend service, is a JAX-RS (the
    JEE specification for REST services) application based on Jersey (the reference
    JAX-RS implementation library), and deployed on Google App Engine – it could have
    been written in Ruby, Python, or any other language.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的在线网络应用作为后端服务，是一个基于JAX-RS（JEE规范REST服务）的应用程序，使用Jersey（参考JAX-RS实现库）并在Google
    App Engine上部署——它本可以用Ruby、Python或任何其他语言编写。
- en: Note
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you have already studied the Notepad app, part of the Android samples, you
    will be familiar with the RESTful recipe app: it was written using the Notepad
    App code as a base, replacing the persistence from an embedded SQLite database
    to a REST online service.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经研究过Android示例中的记事本应用，你会对RESTful食谱应用很熟悉：它是基于记事本应用代码编写的，将持久化从嵌入式SQLite数据库替换为REST在线服务。
- en: 'RecipeList activity: listing all recipes stored on the server'
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RecipeList活动：列出服务器上存储的所有食谱
- en: When the user launches the app, the first thing he wants to see is the list
    of the available recipes.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户启动应用时，他首先想看到的是可用的食谱列表。
- en: This activity uses `ListView`, backed with `ListAdapter` to display them to
    the user.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动使用`ListView`，并配有`ListAdapter`向用户展示内容。
- en: 'But first, it needs to get them from the server:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，它需要从服务器获取它们：
- en: 'We need a model (`Recipe.java`):'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个模型（`Recipe.java`）：
- en: '[PRE17]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And a `RestTemplate` instance nested in an AsyncTask:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及一个嵌入在AsyncTask中的`RestTemplate`实例：
- en: '[PRE18]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This task will get executed every time we need to get an updated list of recipes:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们需要获取更新的食谱列表时，都会执行此任务：
- en: 'When the activity is created (or resumed): `onResume()`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当活动创建（或恢复）时：`onResume()`
- en: 'When we''re back from a successful update operation: `onActivityResult()`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们成功更新操作返回后：`onActivityResult()`
- en: 'You may have noticed that this AsyncTask extends `RecipeAbstractAsyncTask`,
    a class that defines an exception, and a utility method, `prepareHeadersWithMediaTypeAndBasicAuthentication()`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，这个AsyncTask扩展了`RecipeAbstractAsyncTask`，这是一个定义了异常和实用方法`prepareHeadersWithMediaTypeAndBasicAuthentication()`的类：
- en: '[PRE19]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As its name implies, it prepares the request headers to include the Basic authentication
    needed, and the desired `MediaType` object from the server.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，它会准备请求头，包括所需的Basic身份验证和服务器上的期望`MediaType`对象。
- en: 'Back to `GetRecipesTask`: we prepare the request headers, we create a new `RestTemplate`
    instance – configured to use Jackson to (un) serialize the messages, and we perform
    the GET request:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`GetRecipesTask`：我们准备请求头，创建一个新的`RestTemplate`实例——配置为使用Jackson来(反)序列化消息，并执行GET请求：
- en: '[PRE20]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `R.string.resource_url` value is defined in `strings.xml` and is defined
    to be equal to: [http://www.restfulapp.appspot.com/rest/recipes/](http://www.restfulapp.appspot.com/rest/recipes/).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.string.resource_url`值在`strings.xml`中定义，定义为等于：[http://www.restfulapp.appspot.com/rest/recipes/](http://www.restfulapp.appspot.com/rest/recipes/)。'
- en: Since we want to get a list of recipes, the type given to the `ResponseEntity`
    object is an array.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想要获取一个食谱列表，所以给`ResponseEntity`对象的类型是一个数组。
- en: 'Another important thing to note is that the exception handler: **RestClientException**
    is, unlike its name, a wrapping server and client exception. If you want to tell
    your user what went wrong, you''d better catch this exception and keep it until
    you''re back in the UI thread when executing the code in the `onPostExecute()`
    method.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的重要事项是异常处理程序：**RestClientException**与它的名字不符，它是一个包装服务器和客户端异常的异常。如果你想告诉用户哪里出了问题，你最好捕获这个异常，并在执行`onPostExecute()`方法时保留它直到回到UI线程。
- en: Note
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that `RestClientException` is a subclass of `RuntimeException`, that's
    why you don't need to catch it explicitly. If you don't though, this exception
    could kill your activity if it is thrown.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`RestClientException`是`RuntimeException`的子类，这就是为什么你不需要显式捕获它的原因。不过，如果你不这样做，这个异常可能会在抛出时杀死你的活动。
- en: Talking about the user interface, this task uses its pre-and post-execute methods
    to keep the user updated about the status of the loading by using `ProgresDialogs`
    and `Toasts`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到用户界面，这个任务使用其预执行和后执行方法，通过使用`ProgresDialogs`和`Toasts`来保持用户对加载状态的了解。
- en: Note
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It can be useful to manually debug a REST resource, from outside your application;
    the **cURL** application (downloadable at [http://curl.haxx.se/download.html](http://curl.haxx.se/download.html))
    is probably the most popular tool to do so.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序外部手动调试REST资源可能很有用；**cURL**应用程序（在[http://curl.haxx.se/download.html](http://curl.haxx.se/download.html)可下载）可能是最流行的工具。
- en: For each HTTP request evoked in this section, I will now include its matching
    cURL command line.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节中提到的每个HTTP请求，我现在将包括与之匹配的cURL命令行。
- en: '[PRE21]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![RecipeList activity: listing all recipes stored on the server](img/1905_03_03.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![食谱列表活动：列出服务器上存储的所有食谱](img/1905_03_03.jpg)'
- en: An overview of the RecipesList activity
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 食谱列表活动概览
- en: RecipeEditor activity
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 食谱编辑器活动
- en: This activity is responsible for getting, updating, creating, and deleting the
    recipes.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动负责获取、更新、创建和删除食谱。
- en: '![RecipeEditor activity](img/1905_03_04.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![食谱编辑器活动](img/1905_03_04.jpg)'
- en: The RecipeEditor activity in update mode
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模式下的食谱编辑器活动
- en: GETting a recipe
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取食谱
- en: When a user taps on the create icon of the RecipeList activity, or on one of
    the recipe title, he/she is directed to the RecipeEditor activity.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当用户在食谱列表活动中点击创建图标，或者点击其中一个食谱标题时，他将直接进入食谱编辑器活动。
- en: 'If the user wants to create a new recipe, he/she will see empty fields, but
    if he/she wants to see a recipe, they''ll first get it from the server before
    filling the fields; thanks to the internal `GetRecipeTask` :'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果用户想要创建一个新食谱，他将看到空白字段，但如果他想要查看食谱，他们首先会从服务器获取，然后再填写字段；这要感谢内部的`GetRecipeTask`：
- en: '[PRE22]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Nothing really new here, we want to get a single recipe, identified by its ID
    (`params[0])`.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这儿没有真正的新内容，我们想要获取一个通过其ID（`params[0]`）标识的单一食谱。
- en: '[PRE23]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: PUTting a recipe
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新食谱
- en: To update one recipe, we must request the recipe resource with the PUT HTTP
    verb.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要更新一个食谱，我们必须使用PUT HTTP动词请求食谱资源。
- en: 'For that, we have, once again, a dedicated AsyncTask: `UpdateRecipeTask`, that
    will instantiate a `RestTemplate` instance, carrying the updated recipe (as soon
    as the user presses the `Save` button, we call the `updateNote()` method that
    syncs the content of the view, with the model of the current recipe).'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为此，我们再次有一个专用的AsyncTask：`UpdateRecipeTask`，它将实例化一个`RestTemplate`实例，携带更新后的食谱（一旦用户按下`保存`按钮，我们就会调用`updateNote()`方法，将视图的内容与当前食谱的模型同步）。
- en: '[PRE24]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can see the real important part here is `RequestEntity`, that wraps our
    recipe: `RestTemplate` will pass it along to Jackson that will convert it into
    a JSON string.'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里需要注意的是`RequestEntity`，它包装了我们的食谱：`RestTemplate`会将它传递给Jackson，后者将其转换为JSON字符串。
- en: If the server does not respond with the HTTP Status 200 (OK), we can consider
    something went wrong and keep the exception for the user interface.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果服务器没有用HTTP状态200（OK）响应，我们可以认为出现了错误，并为用户界面保留异常。
- en: '[PRE25]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: POSTing a recipe
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布食谱
- en: To create one recipe, we must request the recipe resource with the POST HTTP
    verb.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个食谱，我们必须使用POST HTTP动词请求食谱资源。
- en: In the REST literature, you will also read about the usage of the PUT HTTP verb
    to create an entity too; but on one condition though – you would have to provide
    the ID (so that several PUT in a row do not change the resource state. PUT is
    idempotent just like GET and DELETE, and just as unsafe as DELETE and POST).
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在REST文献中，你还会读到关于使用PUT HTTP动词创建实体的用法；但有一个条件——你必须提供ID（这样连续的PUT不会改变资源状态。PUT是幂等的，就像GET和DELETE，而且与DELETE和POST一样不安全）。
- en: Note
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In our case, we create a new resource, so POST reflects well our intention.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们创建了一个新资源，所以POST很好地反映了我们的意图。
- en: 'Let''s have a look at `CreateRecipeTask`, which is very similar to `UpdateRecipeTask`:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们看看`CreateRecipeTask`，它与`UpdateRecipeTask`非常相似：
- en: '[PRE26]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Some interesting things to notice: the recipe does not have any ID set since
    the user is creating a recipe from nothing. The web service will assign an ID
    to this recipe (and should return the URI of the created resource); and the expected
    status is not 200, but 201 (`HttpStatus.CREATED`).'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有几个有趣的地方需要注意：由于用户是从零开始创建食谱，所以食谱没有设置任何ID。Web服务将为这个食谱分配一个ID（并且应该返回创建资源的URI）；预期的状态不是200，而是201（`HttpStatus.CREATED`）。
- en: '[PRE27]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: DELETing a recipe
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除食谱
- en: To delete one recipe, we must request the recipe resource with the DELETE HTTP
    verb.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要删除一个食谱，我们必须使用DELETE HTTP动词请求食谱资源。
- en: The AsyncTask named `DeleteRecipeTask` is similar to `GetRecipeTask` in the
    way that it only requires the ID of the recipe to be appended to the resource
    URI (there is no need to carry the whole recipe as we did with PUT and POST).
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名为`DeleteRecipeTask`的AsyncTask与`GetRecipeTask`相似，因为它们只需要将食谱的ID附加到资源URI（无需像PUT和POST那样携带整个食谱）。
- en: '[PRE28]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This request expects to have a response with a 204 HTTP code, meaning the request
    was a success, but there is nothing to return (`HttpStatus.NO_CONTENT`).
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该请求预期会有一个状态为204的HTTP响应码，意味着请求成功，但没有内容返回（`HttpStatus.NO_CONTENT`）。
- en: Note
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: HTTP code 200 would have been fine as a response to a successful DELETE request.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HTTP状态码200对于一个成功的DELETE请求来说是可以接受的。
- en: Check with your web service documentation (or better, experiment with cURL for
    example) to make the best assumptions about what is supposed to return a web service.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查阅你的网络服务文档（或者更好的，用cURL进行实验），以最佳假设了解网络服务应该返回什么。
- en: '[PRE29]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Android annotations
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android注解
- en: You may have heard about this project available at [https://github.com/excilys/androidannotations/](https://github.com/excilys/androidannotations/)
    that aims at reducing the amount of code needed to inject views, activities, providers,
    services, and so on in an Android app.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过这个项目，它位于[https://github.com/excilys/androidannotations/](https://github.com/excilys/androidannotations/)，旨在减少在Android应用中注入视图、活动、提供者、服务等所需的代码量。
- en: The project leaders have decided to use Spring for Android's `RestTemplate`
    as the REST client library backing the REST annotations.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 项目领导者已经决定使用Spring for Android的`RestTemplate`作为支持REST注解的REST客户端库。
- en: Note
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Android annotations is based on the **annotations processor tool** (**apt**),
    now part of the Java 6 compiler; each annotated class will trigger the generation
    of a subclass (named the same with an `_` appended to the filename, for example
    `OriginalActivity_.java`) that will contain all the boilerplate code the annotations
    saved you from writing!
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Android注解是基于**注解处理器工具**（**apt**），现在是Java 6编译器的一部分；每个带注解的类都会触发生成一个子类（与原文件同名，在文件名后加上`_`，例如`OriginalActivity_.java`），其中包含所有注解为你省去编写的模板代码！
- en: So, along with `@Eactivity` (to allow an activity to use Android annotations),
    `@ViewById` (to inject your views), you have `@Get`, `@Post`, `@Put`, and so on.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除了`@Eactivity`（允许活动使用Android注解），`@ViewById`（注入视图）之外，还有`@Get`，`@Post`，`@Put`等等。
- en: Let's have a look at how we can benefit from Android annotations with the JSON
    example (getting the IP address from `Ifconfig.me`).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过JSON示例（从`Ifconfig.me`获取IP地址）从Android注解中受益。
- en: '[PRE30]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: There is definitely less code, right?
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 代码量肯定减少了，对吧？
- en: 'You may have noticed though that we are using a new class named `IfConfigMeRestClient`:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 不过你可能注意到了，我们正在使用一个名为`IfConfigMeRestClient`的新类：
- en: '[PRE31]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This class configures `RestTemplate` providing the converter class, the HTTP
    verb used, the mapping class (`IfConfigMeJson`), and the accepted media types.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类配置了`RestTemplate`，提供转换器类、使用的HTTP动词、映射类（`IfConfigMeJson`）和接受的媒体类型。
- en: Android annotations provides a good level of support to Spring for Android's
    `RestTemplate` (see [https://github.com/excilys/androidannotations/wiki/Rest-API](https://github.com/excilys/androidannotations/wiki/Rest-API)
    for the list of `RestTemplate` based annotations), and I suggest you try it to
    see if you prefer using it or not in your Spring for Android based project.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Android注解对Spring for Android的`RestTemplate`提供了很好的支持（有关基于`RestTemplate`的注解列表，请参见[https://github.com/excilys/androidannotations/wiki/Rest-API](https://github.com/excilys/androidannotations/wiki/Rest-API)），我建议你尝试一下，看看你是否喜欢在你的Spring
    for Android项目中使用它。
- en: Note
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you start a project using Android annotations from scratch, I suggest you
    carefully follow those environment instructions: [https://github.com/excilys/androidannotations/wiki/Building-Project-Maven-Eclipse](https://github.com/excilys/androidannotations/wiki/Building-Project-Maven-Eclipse).'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从零开始启动一个使用Android注解的项目，我建议你仔细遵循这些环境设置说明：[https://github.com/excilys/androidannotations/wiki/Building-Project-Maven-Eclipse](https://github.com/excilys/androidannotations/wiki/Building-Project-Maven-Eclipse)。
- en: Quick start – OAuth
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速开始 - OAuth
- en: '**OAuth** is an open standard for authorization as Wikipedia puts it.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth**是一个开放的身份验证标准，正如维基百科所说。'
- en: OAuth allows users to share their data or resources, hosted on a service provider,
    with websites or desktop or mobile apps.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth允许用户将托管在服务提供商上的数据或资源与网站或桌面或移动应用共享。
- en: Of course, if you gave your credentials (username and password) to those websites
    or apps, they could access your data on your behalf; but would you trust a third-party
    app or website to keep your credentials (your key to your digital life) safe?
    What if this app or website is malicious? Or simply unsecured? How many times
    have you read about a website getting its users credentials stolen, or keeping
    passwords in plain text in their databases?
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你将你的凭证（用户名和密码）提供给这些网站或应用，它们可以代表你访问你的数据；但你会信任第三方应用或网站来保护你的凭证（你数字生活的钥匙）吗？如果这个应用或网站是恶意的呢？或者仅仅是安全性不足？你有多少次听说某个网站的用户凭证被盗，或者在数据库中以明文形式保存密码？
- en: 'OAuth is just about this; letting third-party apps or websites have a limited
    access (through a list of authorizations or scopes: `access user email`, `access
    user profile`, `can post messages on user behalf`, and so on) to your data, hosted
    on a service provider (the famous OAuth service providers are Google, Facebook,
    Twitter, Yahoo!, GitHub, LinkedIn, and so on) without ever giving them your credentials.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 就是关于这一点；它允许第三方应用或网站通过有限的访问（通过一系列授权或范围：`访问用户电子邮件`、`访问用户资料`、`代表用户发布消息`等）来访问你在服务提供商（知名的
    OAuth 服务提供商包括 Google、Facebook、Twitter、Yahoo!、GitHub、LinkedIn 等）上托管的数据，而无需向它们提供你的凭据。
- en: Developing a website or an app relying on a service provider
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖服务提供商的网站或应用开发
- en: Have you ever noticed those **Login with Facebook** or **Login with Google**
    buttons on some websites (such as [Deezer.com](http://Deezer.com), [StackOverFlow.com](http://StackOverFlow.com),
    and so on), or have you ever had a third-party Twitter app on an Android device
    (such as Twicca) request your Twitter credentials?
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意过一些网站上的**使用 Facebook 登录**或**使用 Google 登录**按钮（例如 [Deezer.com](http://Deezer.com),
    [StackOverFlow.com](http://StackOverFlow.com) 等），或者是否曾在 Android 设备上的第三方 Twitter
    应用（如 Twicca）请求过你的 Twitter 凭据？
- en: 'All those websites and apps use OAuth to get access to your data:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些网站和应用都使用 OAuth 来获取对你的数据的访问权限：
- en: For one, they are saving you the trouble of having to create and remember yet
    other credential. They even enrich your user experience by accessing your data
    (such as your profile picture, activity info, and so on).
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它们为你省去了创建和记住其他凭据的麻烦。它们甚至通过访问你的数据（如个人资料图片、活动信息等）来丰富你的用户体验。
- en: In addition, they gather a bigger audience (since the users don't have to go
    through the tedious account creation process) and they don't have to manage authentication
    credentials (with its risks) nor authorization.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，它们吸引了更广泛的受众（因为用户无需经历繁琐的账户创建过程），并且它们无需管理认证凭据（及其风险）或授权。
- en: 'Usually if a website or app creator wants to benefit from a service providing
    OAuth authorization, he/she has to register it against the OAuth service provider
    (Google, Facebook, and so on) which in turn will give him/her a **Client ID**
    and **Client secret** value:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果一个网站或应用创建者想要从一个提供 OAuth 授权的服务中受益，他/她必须向 OAuth 服务提供商（Google、Facebook 等）注册，后者将向他/她提供一个**客户端
    ID**和**客户端密钥**值：
- en: '![Developing a website or an app relying on a service provider](img/1905_04_01.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![依赖服务提供商的网站或应用开发](img/1905_04_01.jpg)'
- en: Using the Google API Console to register a new application and associate it
    with a client ID and a client secret
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Google API 控制台注册新应用，并将其与客户端 ID 和客户端密钥关联
- en: Let's discover how this client ID and client secret enables the app to access
    the user's data.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探究一下，客户端 ID 和客户端密钥是如何让应用访问用户数据的。
- en: The OAuth dance
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OAuth 跳舞
- en: 'An Android app (or any other installed app) relies on an OAuth 2.0 service
    provider such as Google. Let''s have a look at the workflow of the OAuth authorization
    process in the following five simple steps:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Android 应用（或其他任何已安装的应用）依赖于像 Google 这样的 OAuth 2.0 服务提供商。让我们来看看以下五个简单步骤中的 OAuth
    授权过程的工作流程：
- en: The user launches the app for the first time; it will generate the token request
    – a URL to the service provider, including the app client ID and client secret,
    and also the several authorizations needed for the app (user info, userinfo e-mail,
    and so on).
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户第一次启动应用时，它将生成令牌请求——一个指向服务提供商的 URL，包括应用的客户端 ID 和客户端密钥，以及应用所需的多个授权（用户信息、用户电子邮件等）。
- en: 'An example with Google OAuth 2.0 service provider:'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以 Google OAuth 2.0 服务提供商为例：
- en: '[PRE32]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This URL is loaded by the Android Chrome browser, most probably embedded in
    the app thanks to a WebView. The user is asked to accept or deny the authorizations
    asked by the app.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个 URL 由 Android Chrome 浏览器加载，很可能是通过 WebView 嵌入在应用中的。用户被要求接受或拒绝应用要求的授权。
- en: In return, if the user grants the app, the app will intercept the response from
    the embedded browser that contains an authorization code.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为回报，如果用户授权该应用，应用将会拦截来自嵌入式浏览器的响应，其中包含一个授权码。
- en: 'An example of the response with Google OAuth 2.0 service provider:'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Google OAuth 2.0 服务提供商的响应示例：
- en: '[PRE33]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The app will finally exchange this authorization code for a token (if the lifetime
    of the token is limited, the app will also receive a refresh token and the expire
    time). This access token will be saved securely by the app.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用最终将用这个授权码交换令牌（如果令牌的有效期有限，应用还将收到一个刷新令牌和过期时间）。这个访问令牌将被应用安全保存。
- en: An example of a token request/response with Google OAuth 2.0 service provider.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Google OAuth 2.0 服务提供商的令牌请求/响应示例。
- en: '**Request**:'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**请求**：'
- en: '[PRE34]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Response**:'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**响应**：'
- en: '[PRE35]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The app will finally be able to interact with the resource (such as a REST service),
    provided it sends a valid token along with each of its requests.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序最终能够与资源（如 REST 服务）交互，前提是它随每个请求发送有效的令牌。
- en: 'An example of a request with a token with Google OAuth 2.0 service provider:'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Google OAuth 2.0 服务提供商的带令牌的请求示例：
- en: '[PRE36]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most, if not all, OAuth 2.0 service providers will only accept authorized service
    calls on HTTPS, to make sure the token can not be intercepted.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是所有的 OAuth 2.0 服务提供商，大多数服务提供商只接受通过 HTTPS 的授权服务调用，以确保令牌不会被截获。
- en: '![The OAuth dance](img/1905_04_02.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth 跳舞](img/1905_04_02.jpg)'
- en: The OAuth workflow to access Google UserInfo Service, from [https://developers.google.com/accounts/docs/OAuth2](https://developers.google.com/accounts/docs/OAuth2)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Google UserInfo 服务的 OAuth 工作流程，来自 [https://developers.google.com/accounts/docs/OAuth2](https://developers.google.com/accounts/docs/OAuth2)
- en: Note
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read [https://developers.google.com/accounts/docs/OAuth2InstalledApp](https://developers.google.com/accounts/docs/OAuth2InstalledApp)
    to know the Google OAuth 2.0 service provider specifics, or [http://developers.facebook.com/docs/concepts/login/login-architecture/](http://developers.facebook.com/docs/concepts/login/login-architecture/)
    to know about Facebook OAuth 2.0 service provider specifics.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读 [https://developers.google.com/accounts/docs/OAuth2InstalledApp](https://developers.google.com/accounts/docs/OAuth2InstalledApp)
    了解 Google OAuth 2.0 服务提供商的具体信息，或者阅读 [http://developers.facebook.com/docs/concepts/login/login-architecture/](http://developers.facebook.com/docs/concepts/login/login-architecture/)
    了解 Facebook OAuth 2.0 服务提供商的具体信息。
- en: It is strongly advised to read the OAuth service provider documentation before
    starting working on a client app (each of them have some subtle differences such
    as the parameters of the request token, the callback url, and so on).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在开始开发客户端应用程序之前阅读 OAuth 服务提供商的文档（它们都有一些细微的差异，比如请求令牌的参数、回调 URL 等）。
- en: Spring for Android Auth module
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring for Android Auth 模块
- en: The Spring for Android `Auth` module supports both OAuth 1.0a and OAuth 2.0.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: Spring for Android 的 `Auth` 模块支持 OAuth 1.0a 和 OAuth 2.0。
- en: 'In a nutshell:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：
- en: OAuth 2.0 allows for better support of non-webapps (such as an Android app)
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth 2.0 更好地支持非 Web 应用（如 Android 应用）
- en: OAuth 2.0 no longer requires developers to use cryptography
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth 2.0 不再要求开发者使用加密技术
- en: OAuth 2.0 access tokens are *short-lived* (thanks to the refresh tokens)
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth 2.0 访问令牌是*短期的*（得益于刷新令牌）
- en: Note
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To know more about OAuth 2.0, you can read several articles from *Eran Hammer*
    on his blog: [http://hueniverse.com/2010/05/introducing-oauth-2-0/](http://hueniverse.com/2010/05/introducing-oauth-2-0/)'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 OAuth 2.0 的信息，你可以阅读 *Eran Hammer* 在其博客上的几篇文章：[http://hueniverse.com/2010/05/introducing-oauth-2-0/](http://hueniverse.com/2010/05/introducing-oauth-2-0/)
- en: 'The Spring for Android `Auth` module depends on the following:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Spring for Android 的 `Auth` 模块依赖于以下内容：
- en: 'Spring for Android core (common classes: `Base64`, `StringUtils`, resource
    abstractions, and so on)'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring for Android 核心模块（公共类：`Base64`、`StringUtils`、资源抽象等）
- en: Spring for Android `RestTemplate` (REST API abstracting the underneath HttpClient)
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring for Android `RestTemplate`（抽象了底层 HttpClient 的 REST API）
- en: 'Spring Social Core (OAuth 1.0 and 2.0 API wrapping the OAuth flows: request
    for authorization code, request for token, and so on)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Social Core（封装 OAuth 1.0 和 2.0 API 的 OAuth 流程：请求授权码、请求令牌等）
- en: Spring Security Crypto (provides support for symmetric encryption, key generation,
    and password encoding)
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security Crypto（提供对称加密、密钥生成和密码编码的支持）
- en: The `Auth` module itself defines cryptography and SQL classes for Android (to
    enable you to persist the authorization tokens securely to a SQLite Android database).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth` 模块本身定义了 Android 的加密和 SQL 类（使你能够将授权令牌安全地持久化到 SQLite Android 数据库中）。'
- en: Note
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Spring for Android's `Auth` only contains seven classes as of now, that are
    about support for persisting OAuth tokens on an Android device; all the OAuth
    code is in Spring Social Core.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Spring for Android 的 `Auth` 模块只包含七个类，这些类主要是关于在 Android 设备上持久化 OAuth 令牌的支持；所有的
    OAuth 代码都在 Spring Social Core 中。
- en: To make Twitter, Facebook, and Google apps developers' life easier, Spring Social
    has extensions, respectively named Spring Social Twitter, Spring Social Facebook,
    and Spring Social Google. These define APIs to access user's information, posts,
    contacts, agendas in each of those social networks.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Twitter、Facebook 和 Google 应用程序开发者的生活更轻松，Spring Social 有扩展，分别名为 Spring Social
    Twitter、Spring Social Facebook 和 Spring Social Google。这些扩展定义了访问每个社交网络中用户信息、帖子、联系人和日程的
    API。
- en: An OAuth example using Google
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google的OAuth示例
- en: 'We are going to build an Android app displaying information about a Google
    user: we are going to use Spring for Android `Auth` of course, but more importantly
    Spring Social and Spring Social Google.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建一个显示Google用户信息的Android应用：当然会使用Spring for Android的`Auth`，但更重要的是Spring Social和Spring
    Social Google。
- en: Note
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The official documentation examples are about Facebook and Twitter. If you want
    to create an app interacting with those social networks, have a look at the Spring
    for Android examples at [https://github.com/SpringSource/spring-android-samples](https://github.com/SpringSource/spring-android-samples).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档示例是关于Facebook和Twitter的。如果您想创建一个与这些社交网络互动的应用，请查看Spring for Android的示例，地址在[https://github.com/SpringSource/spring-android-samples](https://github.com/SpringSource/spring-android-samples)。
- en: 'Let''s have a look at the `pom.xml` file of this project, in particular the
    inclusion of Spring Social Google:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一下这个项目的`pom.xml`文件，特别是Spring Social Google的包含部分：
- en: '[PRE37]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You will notice here (in the `repository` section), this module is not hosted
    by Spring Source, because it is actually a community project not endorsed by Spring
    Source.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到（在`repository`部分），这个模块并没有由Spring Source托管，因为它实际上是一个未得到Spring Source认可的社区项目。
- en: Note
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This `pom.xml` file contains many exclusions; this is because most of the libraries
    used were developed with Java SE in mind, this is why they rely on Spring Core,
    Spring MVC, and so on. Spring for Android Core and `RestTemplate` provide the
    necessary dependencies for those modules.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`pom.xml`文件包含许多排除项；这是因为大多数使用的库都是以Java SE为目标的，这就是为什么它们依赖于Spring Core、Spring
    MVC等。Spring for Android Core和`RestTemplate`为这些模块提供了必要的依赖。
- en: 'Now let''s have a look at the `AndroidManifest.xml` file:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`AndroidManifest.xml`文件：
- en: '[PRE38]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: For the first time in our examples, we are going to use an `Application` class,
    named here `MainApplication`.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，首次将使用一个名为`MainApplication`的`Application`类。
- en: Note
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`GoogleWebOAuthActivity` will embed a browser and will only be launched for
    authentication. We don''t want this activity to be part of the app history or
    the user to be able to get back to it; that''s why we added `android:noHistory="true"`
    and `android:excludeFromRecents="true"`. More info on this is available at [http://developer.android.com/guide/topics/manifest/activity-element.html](http://developer.android.com/guide/topics/manifest/activity-element.html).'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`GoogleWebOAuthActivity`将嵌入一个浏览器，并且仅在需要认证时启动。我们不希望这个活动成为应用历史或用户能够返回的部分；这就是为什么我们添加了`android:noHistory="true"`和`android:excludeFromRecents="true"`。关于这方面的更多信息可以在[http://developer.android.com/guide/topics/manifest/activity-element.html](http://developer.android.com/guide/topics/manifest/activity-element.html)找到。'
- en: 'This class will be used to prepare the two most important factories of our
    app (they will be accessed in all the activities): `ConnectionFactoryRegistry`
    and `ConnectionRepository`:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类将用于准备我们应用程序中两个最重要的工厂（它们将在所有活动中被访问）：`ConnectionFactoryRegistry`和`ConnectionRepository`：
- en: '[PRE39]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As you can see, in the `onCreate()` method we initialize:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在`onCreate()`方法中我们初始化了：
- en: '`ConnectionFactoryRegistry`: With the client ID and the client secret of the
    application from `ConnectionFactoryRegistry`, we''ll have access to `GoogleConnectionFactory`
    which is the Google services extension of `OAuth2ConnectionFactory` that gives
    access to all OAuth operations'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConnectionFactoryRegistry`：通过从`ConnectionFactoryRegistry`获取应用程序的客户端ID和客户端密钥，我们将能够访问`GoogleConnectionFactory`，它是`OAuth2ConnectionFactory`的Google服务扩展，提供了所有OAuth操作访问权限'
- en: '`ConnectionRepository`: This will be responsible for persisting `ConnectionFactoryRegistry`,
    so that the OAuth token can be retrieved without needing to do the whole OAuth
    workflow every time'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConnectionRepository`：这将负责持久化`ConnectionFactoryRegistry`，以便可以在不需要每次都执行整个OAuth工作流的情况下检索OAuth令牌'
- en: Note
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may have noticed the use of a salt and a password (encryption) during the
    initialization of the database.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到了在初始化数据库时使用了盐值和密码（加密）。
- en: 'This will prevent a malicious app from being able to access the device database
    to retrieve the user OAuth token. A brief reminder: the app will never have access
    to the user''s Google password. The authentication to the service provider, Google
    in this example, is always performed from the device browser.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这将防止恶意应用访问设备数据库以获取用户的OAuth令牌。简单提醒一下：应用将永远无法访问用户的Google密码。对服务提供商（本例中为Google）的认证始终是从设备浏览器执行的。
- en: 'Let''s have a look at the main activity of that project, `GoogleActivity` that
    will be launched at startup:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看该项目的MainActivity，即启动时将启动的`GoogleActivity`：
- en: '[PRE40]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This activity will display a list of entries related to the user profile if
    he/she is connected or just a **Connect** button if the user is not connected
    yet (since `GoogleConnectionFactoryRegistry` is persisted in a database, just
    looking up a connection of type `Google` in `ConnectionRepository` is enough to
    know whether or not the access token is already fetched).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_03.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
- en: The GoogleActivity if the user has not yet logged in
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: So, in the case that we are not connected, taping on **Connect** will call `displayGoogleAuthorization()`
    which will launch `GoogleWebOAuthActivity`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '`GoogleWebOAuthActivity` is certainly the most important activity of this app.
    It is responsible for the OAuth 2.0 authentication and authorization.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When this activity is created, it configures the associated WebView (you will
    notice this activity extends `AbstractWebViewActivity` that injects a Chrome Browser
    instance into a WebView) to accept JavaScript ( the service provider and Google
    OAuth 2.0 requires JavaScript to authenticate the user) and injects a custom `WebViewClient`
    object that we will use to intercept OAuth flows (more on that in a moment).
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Then, when the activity starts, we ask the WebView (the embedded Chrome browser)
    to request the authorization code for this app (see step 1 of *The OAuth dance*
    section).
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: This request is built using a callback URL, the scope of the authorizations
    needed for the app, and the client ID and secret (those two were already given
    to Spring OAuth when we created `ConnectionFactoryRegistry`).
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The callback URL here is [http://localhost](http://localhost), because Google
    OAuth 2.0 service provider gives the choice between [http://localhost](http://localhost)
    and `urn:ietf:wg:oauth:2.0:oob`.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: This will impact the response holding the authorization code; whether it will
    be part of a query string parameter or in the title bar of the browser. You can
    read [https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi](https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi)
    for more details.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user has not yet authenticated to any Google web services from his device,
    he/she should see a dialog inviting him/her to authenticate:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_04.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
- en: This dialog only appears if the user has not yet been authenticated to any Google
    services on his device
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'In all cases though, the user will see this authorization dialog which lists
    all the *scopes* the app has requested:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_05.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
- en: Google OAuth 2.0 service provider authorization dialog
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the user denies the authorization, then, as expected, the authorization process
    will be terminated.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: According to the service provider, this dialog may vary.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user accepts the requested authorizations, `GoogleWebOAuthActivity`
    will detect that the web client is being redirected to a localhost (**the callback
    URI**), with the authorization code:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`exchangeAuthorizationCodeForAccessToken.execute(code)` will execute the following
    AsyncTask (we are going to send back the authorization code from our app, using
    `RestTemplate`, relying on Java `UrlConnection`, so we need to code this call
    from a background thread):'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Once the `exchangeForAccess` method is called, we retrieve the user token and
    we persist it in the `ConnectionRepository` class.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: Our app is finally authorized to access the user's Google profile!
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_06.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
- en: The GoogleActivity if the user has not yet logged in
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks on **Profile**, he will launch `GoogleProfileActivity`, from
    which, as you may expect, we get the user profile.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so we are using an AsyncTask, named `FetchProfileTask`, that will hit
    two Google web services: `UserOperations` (to read the main profile of the user
    and his/her profile picture) and `PersonOperations` (to read his/her Google+ profile,
    here we will just access the **about me** description):'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This information is then injected into the view:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_07.jpg)'
  id: totrans-414
  prefs: []
  type: TYPE_IMG
- en: The GoogleProfileActivity displaying the user profile picture, "about me" description
    and some profile info
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: People and places you should get to know
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need help with Spring for Android (or REST or OAuth in general), the
    following are some people and places which will prove invaluable.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Official sites
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Homepage: [http://www.springsource.org/spring-android](http://www.springsource.org/spring-android)'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Manual and documentation: [http://static.springsource.org/spring-android/docs/1.0.x/reference/htmlsingle/](http://static.springsource.org/spring-android/docs/1.0.x/reference/htmlsingle/)'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blog: [http://blog.springsource.org/category/android/](http://blog.springsource.org/category/android/)'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source code: [https://github.com/SpringSource/spring-android](https://github.com/SpringSource/spring-android)'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official example''s source code: [https://github.com/SpringSource/spring-android-samples](https://github.com/SpringSource/spring-android-samples)'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android Maven Plugin: [http://code.google.com/p/maven-android-plugin/](http://code.google.com/p/maven-android-plugin/)'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Articles and tutorials
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Explanation of OAuth: [http://hueniverse.com/oauth/guide/](http://hueniverse.com/oauth/guide/)'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OAuth for Google services: [http://support.google.com/a/bin/answer.py?hl=en&answer=61017](http://support.google.com/a/bin/answer.py?hl=en&answer=61017)'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Android documentation about remote connections: [http://developer.android.com/training/basics/network-ops/connecting.html](http://developer.android.com/training/basics/network-ops/connecting.html)'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Official forums: [http://forum.springsource.org/forumdisplay.php?88-Android](http://forum.springsource.org/forumdisplay.php?88-Android)'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official bug tracker: [https://jira.springsource.org/browse/ANDROID](https://jira.springsource.org/browse/ANDROID)'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blogs
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Android team blog: [http://android-developers.blogspot.ca/](http://android-developers.blogspot.ca/)'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow Spring for Android on Twitter: [https://twitter.com/springandroid](https://twitter.com/springandroid)'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow Roy Clarkson (Spring for Android lead developer) on Twitter: [https://twitter.com/royclarkson](https://twitter.com/royclarkson)'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more Open Source information, follow Packt at: [http://twitter.com/#!/packtopensource](http://twitter.com/#!/packtopensource)'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
