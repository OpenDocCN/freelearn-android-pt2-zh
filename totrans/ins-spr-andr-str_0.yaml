- en: Chapter 1. Instant Spring for Android Starter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to Instant *Spring for Android Starter*. This book has been specially
    created to provide you with all the information that you need to ease your Android
    development using Spring for Android. You will learn the different features provided
    by Spring for Android and get started with building your first apps using these
    features.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book contains the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*So, what is Spring for Android?* describes Spring for Android has an extension
    of the Spring Framework that helps simplify the development of native Android
    applications; it currently (Version 1.0.0.RELEASE) features a REST client (RestTemplate)
    and OAuth support (Spring Social).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Integrating it in an Android app* teaches how to integrate Spring for Android
    with the Eclipse IDE and ADT (Android Development Tools), as well as with Maven.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Quick start – Rest Template* will show you how to use some of the core features
    of the Spring for Android Rest Template module; for example, creating a REST client.
    By the end of this section you will be able to retrieve, update, create, and delete
    REST resources using message converters and/or HTTP Basic authentication.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Quick start – OAuth* will show you how to use some of the core features of
    Spring for Android Auth module; for example, creating an OAuth connection to Google+
    to read a user profile. By the end of this section you will be able to establish
    an OAuth connection to authenticate your user and app.'
  prefs: []
  type: TYPE_NORMAL
- en: '*People and places you should get to know* – Every open source project is centered
    around a community. This section provides you with many useful links to the project
    page and forums, as well as a number of helpful articles, tutorials and blogs,
    in addition to the Twitter feeds of Spring for Android super-contributors.'
  prefs: []
  type: TYPE_NORMAL
- en: So, what is Spring for Android?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this first section, we will go through the main aspects of Spring for Android:
    `RestTemplate`, `Auth`, and what Spring for Android is not.'
  prefs: []
  type: TYPE_NORMAL
- en: RestTemplate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `RestTemplate` module is a port of the Java-based REST client `RestTemplate`,
    which initially appeared in 2009 in Spring for MVC. Like the other Spring template
    counterparts (`JdbcTemplate`, `JmsTemplate`, and so on), its aim is to bring to
    Java developers (and thus Android developers) a high-level abstraction of lower-level
    Java API; in this case, it eases the development of HTTP clients.
  prefs: []
  type: TYPE_NORMAL
- en: In its Android version, `RestTemplate` relies on the core Java HTTP facilities
    (`HttpURLConnection`) or the Apache HTTP Client. According to the Android device
    version you use to run your app, `RestTemplate` for Android can pick the most
    appropriate one for you. This is according to Android developers' recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [http://android-developers.blogspot.ca/2011/09/androids-http-clients.html](http://android-developers.blogspot.ca/2011/09/androids-http-clients.html).
    This blog post explains why in certain cases Apache HTTP Client is preferred over
    `HttpURLConnection`.
  prefs: []
  type: TYPE_NORMAL
- en: '`RestTemplate` for Android also supports gzip compression and different message
    converters to convert your Java objects from and to JSON, XML, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Auth/Spring Social
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of the Spring Android `Auth` module is to let an Android app gain authorization
    to a web service provider using **OAuth** (Version 1 or 2).
  prefs: []
  type: TYPE_NORMAL
- en: OAuth is probably the most popular authorization protocol (and it is worth mentioning
    that, it is an open standard) and is currently used by Facebook, Twitter, Google
    apps (and many others) to let third-party applications access users account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring for Android `Auth` module is based on several Spring libraries because
    it needs to securely (with cryptography) persist (via JDBC) a token obtained via
    HTTP; here is a list of the needed libraries for OAuth:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring Security Crypto**: To encrypt the token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Android OAuth**: This extends `Spring Security Crypto` adding a dedicated
    encryptor for Android, and SQLite based persistence provider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Android Rest Template**: To interact with the HTTP services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Social Core**: The OAuth workflow abstraction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While performing the OAuth workflow, we will also need the browser to take
    the user to the service provider authentication page, for example, the following
    is the Twitter OAuth authentication dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Auth/Spring Social](img/1905_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Spring for Android is not
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SpringSource (the company behind Spring for Android) is very famous among Java
    developers. Their most popular product is the Spring Framework for Java which
    includes a dependency injection framework (also called an inversion of control
    framework). Spring for Android does not bring inversion of control to the Android
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: In its very first release (1.0.0.M1), Spring for Android brought a common logging
    facade for Android; the authors removed it in the next version.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating it in an Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring for Android is contained in multiple JAR libraries which should be linked
    to the project. These JAR libraries are not part of the standard Android distribution.
    For example, we will need the following JAR libraries to consume a JSON REST API
    with Spring For Android `RestTemplate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating it in an Android app](img/1905_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Minimal dependencies to add or use RestTemplate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the IDE to manually satisfy the dependencies (and their transitive
    dependencies). The alternative to manual dependency management is automatic project
    building with **Maven**. We will explain Maven building later in the section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Eclipse and Spring for Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eclipse is certainly the most popular IDE to develop Android apps; one of the
    reasons why it is so is because the **Android Development Tools** (**ADT**), maintained
    by Google, provides the Eclipse plugins to ease Android development (debugger,
    custom XML editors, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IntelliJ IDEA Community Edition provides out of the box support for Android;
    Netbeans also lets you install the `nbandroid` plugin which facilitates Android
    apps development.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to perform the following steps to get started with Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: Download a recent version from [http://www.eclipse.org/downloads](http://www.eclipse.org/downloads)
    (ADT is compatible with Eclipse from the Version 3.6.2; at the time of writing,
    4.2 Juno was the most recent). Prefer *Eclipse IDE for Java developers* rather
    than the other versions available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have it downloaded and unpacked on your machine, start it. Choose
    a workspace location (where your projects will lie) and install the ADT plugin:
    click on **Help** | **Eclipse Marketplace...** and type **adt** (as shown in the
    following screenshot) in the textbox before pressing *Enter*; now select **Android
    Development Tools for Eclipse** by clicking on the **Install** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You don't have to select the NDK support feature, which provides support for
    Native Android Development (using the C or C++ language) since Spring For Android
    libraries are Java only libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with Eclipse and Spring for Android](img/1905_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing the ADT plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eclipse will prompt you several times about licenses and will eventually ask
    you to restart it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re back in your workspace, make sure you have an (up-to-date) Android
    SDK installed on your machine: click on the icon with an Android robot coming
    out of a box, and install or update the Android SDK (you don''t need all Android
    versions, you can just install the most popular ones such as 2.2 aka Froyo, 2.3.3
    aka Gingerbread, 4.0.3 aka Ice Cream Sandwich and 4.1 aka Jelly Bean); restart
    Eclipse when you''re done.![Installing the ADT plugin](img/1905_02_03.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Android SDK Manager to manage the Android tools and platforms
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you haven't done so already, you also need to create an **Android Virtual
    Device** (**AVD**) so that you can deploy your Android apps to it (you could also
    connect your phone or tablet via USB to deploy your apps on it); for that matter,
    click on the icon representing an Android robot in a device screen and create
    a new AVD, as shown in the following screenshot:![Installing the ADT plugin](img/1905_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new AVD
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more details on the ADT plugin from the official website: [http://developer.android.com/tools/sdk/eclipse-adt.html](http://developer.android.com/tools/sdk/eclipse-adt.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We finally need to download the Spring for Android JARs, go to the Spring for
    Android website: [http://www.springsource.org/spring-android](http://www.springsource.org/spring-android)
    and click on the **Download** button (you can skip the registration in the following
    screen). Now choose the latest Spring for Android release (at the time of writing:
    1.0.1.RELEASE) and unzip it on your machine; we will need the libraries in the
    next step:![Installing the ADT plugin](img/1905_02_04_bis.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring for Android official download page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First example app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we are ready to create our first application with Spring for Android:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **File** | **New...** | **Android Application**, give your project
    name and accept the defaults in the following dialogs:![First example app](img/1905_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new window named **New Android Application** will pop up, as shown in thefollowing
    screenshot:![First example app](img/1905_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an Android app from Eclipse
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When asked for a new activity, choose the default **BlankActivity**, as shown
    in the following screenshot:![First example app](img/1905_02_05-bis.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now copy the JARs `spring-android-core-{version}.jar` and `spring-android-rest-template-{version}.jar`
    from the Spring for Android ZIP file you downloaded before, to the `$Project_home/libs`
    folder of your new project; you should have the following project structure:![First
    example app](img/1905_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First example app
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For this first sample app to use Spring for Android to request a web service
    (we will use [http://ifconfig.me/all](http://ifconfig.me/all)), we will just need
    to perform a `GET` method on this URL and we will receive the client info: IP,
    User Agent, and so on. We will then need to declare our intention to access the
    network. This works by adding the following `permission` tag just before the `application`
    tag in the Android manifest file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Android manifest is found at the root of the project: `AndroidManifest.xml`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Forgetting to do so results in obscure messages in the log cat view (where all
    the logs are gathered) such as `Fatal Exception`; see [http://developer.android.com/guide/topics/security/permissions.html](http://developer.android.com/guide/topics/security/permissions.html)
    for more information on permissions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The HTTP protocol defines methods, or verbs, to indicate the action to be performed
    on the remote resource: `GET` to fetch a resource, `POST` to store a resource,
    `PUT` to update a resource, `DELETE` to delete a resource are examples of HTTP
    verbs, you can learn more about them by reading this article: [http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we adjust the activity layout by removing the default "hello world" (`android:text="@string/hello_world"`)
    and replacing it by an anchor that we will use to print the response of the web
    service (`android:id="@+id/hello_text"`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The activity layout is found at `res/layout/activity_main.xml`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we can rework `MainActivity` itself (only the `onCreate()` method
    needs to be updated):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If Eclipse complains about missing imports, press simultaneously *Shift* + *Ctrl*
    + *O* to automatically add the required the imports.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this snippet, we first got a reference to our `result_text` text view, and
    set it to a `final` variable named `resultTextView` (`final` because we will need
    to access it through an inner class).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we created an anonymous inner class, extending `AsyncTask` to implement
    all the logic of hitting the web service (creating the `RestTemplate` instance,
    adding the `String` converter and calling `getForObject`), and setting the result
    to the text view (using the `setText` method). When we call `simpleGetTask.execute(url)`,
    the URL is added to the array of params in `doInBackground(String... params)`
    (so `params[0]` is `url` in this case).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we had directly written the code to hit the web service in the `onCreate()`
    method, the application would not have even been able to start since the Android
    platform prevents the developers from performing HTTP requests in the UI (main)
    thread (and for a good reason: those network-related operations often take time
    to complete, and would freeze the UI while the operations were in progress).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not do this! You can not perform HTTP-related calls from the UI (main) thread.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information about `AsyncTasks` can be found in the official documentation:
    [http://developer.android.com/reference/android/os/AsyncTask.html](http://developer.android.com/reference/android/os/AsyncTask.html)
    and also on threads and processes in Android in general: [http://developer.android.com/guide/components/processes-and-threads.html](http://developer.android.com/guide/components/processes-and-threads.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are now ready to launch this first Spring for Android based app!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the project name and select **Run as...** | **Android Application**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![First example app](img/1905_02_06-bis.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Eclipse will start your previously created AVD and will automatically run the
    app, you should see something similar to the following screenshot:![First example
    app](img/1905_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MainActivity screenshot from the AVD
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Congratulations! You've successfully run your first Spring for Android based
    app!
  prefs: []
  type: TYPE_NORMAL
- en: Using Maven to build a Spring for Android app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, we only added two JARs to the `libs` folder; but if
    you need other dependencies, such as `MessageConverters` (to unmarshall JSON,
    XML responses), the `Auth` module, or any other existing libraries in your project,
    managing your dependencies will soon become a burden!
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven can help you manage your dependencies (in a nutshell, you specify them
    in a file called `pom.xml` and it will get them from the Internet automatically,
    including their transitive dependencies) and much more: release operations, tests
    runs, header generation, and so on. Maven is a modular open source build tool
    with tons of plugins!'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the Android Maven plugin, you should add to your environment the
    following variable `ANDROID_HOME` (linking your Android home directory) and add
    `ANDROID_HOME/platform-tools` to your path. This is explained in detailed in [https://code.google.com/p/maven-android-plugin/wiki/GettingStarted](https://code.google.com/p/maven-android-plugin/wiki/GettingStarted).
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, let''s add the **m2e** (Maven to Eclipse) plugin to Eclipse:
    like we did for the ADT plugin, open **Help** | **Eclipse** Marketplace and search
    for **maven**; choose **Maven Integration for Eclipse**, click on **Install**
    and acknowledge the dialogs; restart your IDE at the end of the process.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Maven to build a Spring for Android app](img/1905_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Maven Integration for Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: 'Now import the project named `spring-for-android-first-example-maven` into
    your workspace: you can either clone it from GitHub or unzip the `examples.zip`
    archive; and then, from Eclipse, click on **File** | **Import…** and choose **Existing
    Maven Projects**, and click on **Next**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Maven to build a Spring for Android app](img/1905_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Import existing Maven project
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the directory where you cloned or unzipped the project and click
    on the **Next** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Maven to build a Spring for Android app](img/1905_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browse to your maven project
  prefs: []
  type: TYPE_NORMAL
- en: M2e will show you a list of m2e connectors needed to integrate the Maven-based
    project into your IDE (basically those connectors tell m2e how to generate and
    compile sources); click on **Finish** and accept the following dialogs; restart
    Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most important connector here is the m2e-android connector : it enables
    m2e to integrate with ADT, more info on [http://rgladwell.github.com/m2e-android/](http://rgladwell.github.com/m2e-android/).'
  prefs: []
  type: TYPE_NORMAL
- en: The project should be imported just fine and you can deploy the project on your
    AVD in the same way you did with the previous project (right-click on the project,
    and choose **Run as** | **Android application**).
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look though at the `pom.xml` file (the only additional file compared
    to the previous project), right-clicking on it and choosing **Open with…** | **Maven
    POM Editor**; click on the **pom.xml** tab at the bottom of the view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There you can see in the dependencies section; the Android platform and the
    Spring for Android `RestTemplate` artifact (no need to specify Spring for Android
    core! Remember, Maven automatically gets the transitive dependencies) and in the
    plugins section the Android-Maven plugin (which extends Maven for Android projects,
    thanks to the `extensions=true` attribute), configured to require Android 4.0.3
    (API level 15).
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven at its core is a command-line tool, and if you download and unzip Maven
    on your machine, you could go to the root directory of the Maven project (where
    `pom.xml` resides) and type the Maven command with different goals:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mvn clean install`: To compile, run the tests and package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mvn clean install android:run`: To start your app in an AVD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see all the available goals, you can type `mvn help:describe -Dplugin=com.jayway.maven.plugins.android.generation2:maven-android-plugin`.
  prefs: []
  type: TYPE_NORMAL
- en: You also can simulate command line Maven from inside Eclipse, right-clicking
    on the project and choosing **Run as** | **Maven build...**, and specifying your
    goals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven installation instructions can be found online: [http://www.sonatype.com/books/mvnref-book/reference/installation-sect-maven-install.html](http://www.sonatype.com/books/mvnref-book/reference/installation-sect-maven-install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Maven, I highly recommend to read the free and available
    online Maven book at [http://www.sonatype.com/books/mvnref-book/reference/](http://www.sonatype.com/books/mvnref-book/reference/)
    which even has a specific Android chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to hack together some richer Spring for Android based apps!
  prefs: []
  type: TYPE_NORMAL
- en: Quick start – RestTemplate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our workspace is set up and we already successfully deployed our first
    Spring for Android `RestTemplate` based app, let's explore some more capabilities
    from `RestTemplate`.
  prefs: []
  type: TYPE_NORMAL
- en: This section relies on several example apps. We will go through all the important
    points of each code sample. Feel free to import the projects into your IDE and
    browse the code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From now on, I will use Maven to manage dependencies, but you don''t have to.
    Each project has a list of dependencies in its `README.md` file: download them
    (or get them from your Spring for Android ZIP archive `libs` folder), and add
    them to the `libs` folder!'
  prefs: []
  type: TYPE_NORMAL
- en: Different message converters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we already used a message converter: `StringHttpMessageConverter`.
    Each message converter supports reading from and writing to certain media types
    (often referred to as MIME types); `StringHttpMessageConverter` supports reading
    all kinds of documents (MIME */*) and writing to text (MIME text/plain). Let''s
    discover more complex message converters.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**MIME** (**Multipurpose Internet Mail Extensions**), is not only used to describe
    the content of e-mails, it is vastly used to describe the content of documents
    exchanged through HTTP as well ([http://en.wikipedia.org/wiki/MIME](http://en.wikipedia.org/wiki/MIME)).'
  prefs: []
  type: TYPE_NORMAL
- en: MappingJacksonHttpMessageConverter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSON messages are very frequent among REST web services. Originally designed
    for the JavaScript language (`JavaScriptObjectNotation`); they're lightweight
    and human readable as well.
  prefs: []
  type: TYPE_NORMAL
- en: '`Ifconfig.me` can return a JSON response, if you use this URL : [http://ifconfig.me/all.json](http://ifconfig.me/all.json).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the code from our first example, let''s replace `StringHttpMessageConverter`
    with `MappingJacksonHttpMessageConverter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we also introduced a model class named `IfConfigMeJson`: this
    class defines the mapping between the JSON messages properties (`{"connection":"keep-alive","ip_addr":"70.30.43.43",
    [..]}`) and a **POJO** (**Plain Old Java Object**: a simple class with member
    variables and their accessors), so that we can easily access each property of
    the response (in the following example: `result.getIpAddr()`) in our Java code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jackson automatically matches JSON properties with Java fields as long as they
    are named identically (CamelCase in Java, underscore for JSON). You've certainly
    noticed that we mapped the JSON property `ip_addr` with the field `ipAddr`, to
    respect Java naming conventions, thanks to Jackson's `@JsonProperty` annotation
    before the field definition. On a side note, we could have declared the fields
    of the class as public and have the accessors removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the application, you will only see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MappingJacksonHttpMessageConverter](img/1905_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The app using `MappingJacksonHttpMessageConverter`
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section we added a dependency to `jackson-mapper-asl` in our `pom.xml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is another JSON message converter available, `GsonHttpMessageConverter`,
    using the Google Gson library instead of Jackson, that can be used alternatively.
  prefs: []
  type: TYPE_NORMAL
- en: SimpleXmlHttpMessageConverter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another message converter worth mentioning is `SimpleXmlHttpMessageConverter`:
    it maps XML responses and requests to POJOs the same way `MappingJacksonHttpMessageConverter`
    did with JSON.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s request the `Ifconfig.me` XML service: [http://ifconfig.me/all.xml](http://ifconfig.me/all.xml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MainActivity` class from our previous example, let''s replace `MappingJacksonHttpMessageConverter`
    with `SimpleXmlHttpMessageConverter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, you''ll notice we rely on a class, named `IfConfigMeXml.java`,
    to allow `SimpleXml` to do the mapping between the XML response and the Java code.
    The following is the XML response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the Java code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The annotations are similar to the ones we used for the JSON message converter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@Root` annotation defines what will be the name of the root XML tag: `info`
    in this case.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@Element` annotation is added before each field to let `SimpleXml` know
    those fields are mapped to XML tags: if `required` is set to false, it means the
    tag could be empty; if `name` is specified, it means the POJO field does not match
    the XML tag name.'
  prefs: []
  type: TYPE_NORMAL
- en: If you run the application, you will get exactly the same output as we had in
    the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we added a dependency to the `SimpleXml` framework. Unfortunately,
    this dependency has transitive dependencies to stax and xpp3 which are not needed
    for Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: We had to explicitly filter some transitive dependencies to let Maven know not
    to add them to the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: RssChannelHttpMessageConverter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This message converter is about parsing RSS feeds; as usual we are going to
    inject it to our `RestTemplate` instance, but this time we will read entries from
    a blog feed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t have to create a POJO mapping class here since the result will always
    be a `Channel` – a class providing us with methods to access the different property
    of the feed: items, language, published date, and so on. In this example, we only
    read the content of the first item – the latest article from my blog!'
  prefs: []
  type: TYPE_NORMAL
- en: 'The feed looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result on the device is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![RssChannelHttpMessageConverter](img/1905_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The content of the first item of an RSS feed
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed that I switched the previous TextView for a WebView, capable
    of interpreting HTML code such as hyperlinks.
  prefs: []
  type: TYPE_NORMAL
- en: '`RssChannelHttpMessageConverter` does not have default supported types, that''s
    why we added the media type `text/xml` as a supported type.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We had to add a dependency on the Android ROME Feed Reader for this RSS feed
    example; this library is not published on Maven Central, which means we also had
    to declare the repository where its artifacts are deployed to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Gzip encryption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To save bandwidth during transfers, as part of each request you can tell the
    server that you support gzip encryption. If the server supports gzipping the responses,
    it will do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring for Android `RestTemplate`, relies on Android `java.net.HttpURLConnection`
    since Gingerbread (2.3), which defaults in sending the `Accept-Encoding : gzip`
    header; so gzip compression is on by default.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, you just need to specify in the headers of the request that you
    can support gzip. Let''s have a look at a concrete example – the Jackson example
    where this time we only show the client supported encoding mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using `Identity`, we declare that we do not support anything else other than
    raw text.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you ask for gzip explicitly or implicitly, `java.util.zip.GzipInputStream`
    will be automatically used to decode the response.
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice that instead of using `getForObject(url,Pojo.class)` we used
    `exchange(url,GET,requestEntity,Pojo.class)`? The `exchange()` method is a more
    versatile method that allows for customization of the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the request/response exchanged during the execution of
    this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Request (IDENTITY and then GZIP) | Response (IDENTITY and then GZIP) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `GET/all.json HTTP/1.1``Accept: application/json``Accept-Encoding: identity``Content-Length:
    0``Host: ifconfig.me:80``Connection: Keep-Alive` | `HTTP/1.1 200 OK``Date: Fri,
    02 Nov 2012 02:41:04 GMT``Server: Apache``Vary: Accept-Encoding``Connection: close``Transfer-Encoding:
    chunked``Content-Type: application/json``13c``{"connection":"Keep-Alive","ip_addr:[...],"encoding":"identity"}``0`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `GET /all.json HTTP/1.1``Accept: application/json``Accept-Encoding: gzip``Content-Length:
    0``User-Agent: Dalvik/1.6.0 (Linux; U; Android 4.0.4; sdk Build/MR1)``Host: ifconfig.me:80``Connection:
    Keep-Alive``X-Forwarded-For: 192.168.1.111` | `HTTP/1.1 200 OK` `—îPq``Date: Fri,
    02 Nov 2012 02:42:08 GMT``Server: Apache``Vary: Accept-Encoding``Content-Encoding:
    gzip``Content-Length: 258``Connection: close``Content-Type: application/json``­ã/%êAOÑ0 ÖÔ˛``"ì&À–"ß5ﬁ''ãâg2€él•¥§4�ˇªÖΩÕ&#124;3ÔeÊ˝2È¨%9kgŸ/{&ö"ì—+±/"SáJ˘àk`
    |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's often handy to analyze the requests and responses that go back and forth
    the device; you can use the open source software Membrane as an HTTP proxy ([http://www.membrane-soa.org/soap-monitor/](http://www.membrane-soa.org/soap-monitor/))
    creating a new simple proxy that listens to localhost:2000 and redirects to the
    web service you target (for example, [http://ifconfig.me](http://ifconfig.me)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Android code, just replace your web service URL with `computer_ip:2000`
    (could be `192.168.1.1:2000`): you''ll then see all the traffic between your Android
    app and the web service URL.'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Basic authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This authentication scheme is, as its name implies it, very basic and unsecured.
    You just provide a username and a password to access a realm (usually a portion
    of a website).
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did for the encoding, we can provide the credentials through a header:
    the username and the password will be Base64-encoded.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By no means does Base64 encoding provide security. You can decode it as easily
    as you encode it! See [https://en.wikipedia.org/wiki/Base64](https://en.wikipedia.org/wiki/Base64)
    for more information on Base64.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we'll try to access a web page that displays **Hello World**;
    provided you sent the right credentials. The page is [http://restfulapp.appspot.com/helloworld](http://restfulapp.appspot.com/helloworld),
    and the credentials are username – `s4a` and password – `s4a` (you can try it
    in your web browser).
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to access this page with Spring for Android's `RestTemplate`!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The way we set `Accepted-Encoding` in the previous example, we set an **HttpBasicAuthentication**
    header to the `RestTemplate` headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the request/response exchanged during the execution of
    this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Request | Response |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `GET/helloworld HTTP/1.1``Accept: text/plain, */*``Authorization: Basic czRhOnM0YQ==``Content-Length:
    0``User-Agent: Dalvik/1.6.0 (Linux; U; Android 4.0.4; sdk Build/MR1)``Host: restfulapp.appspot.com:80``Connection:
    Keep-Alive``Accept-Encoding: gzip` | `HTTP/1.1 200 OK``Content-Type: text/plain;
    charset=iso-8859-1``Vary: Accept-Encoding``Date: Fri, 02 Nov 2012 03:33:06``Server:
    Google Frontend``Cache-Control: private``Transfer-Encoding: chunked``d``Hello,
    world``0` |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The string `czRhOnM0YQ==` is the Base64 encoding of `s4a:s4a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover a better way to authenticate and also authorize a user and the
    user''s app in the next section: *Quick Start – OAuth*.'
  prefs: []
  type: TYPE_NORMAL
- en: The RESTful recipe app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s study the case of the RESTful recipe app: an Android app to interact
    with a RESTful service to create, update, read, and delete recipes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A recipe is somewhat simple – it is a POJO with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: An ID (`Integer`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A title (`String`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the recipe (`String`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A type: usually an entree, a main dish or a dessert (`String`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An author (`String`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The online web app that we will use as our backend service, is a JAX-RS (the
    JEE specification for REST services) application based on Jersey (the reference
    JAX-RS implementation library), and deployed on Google App Engine – it could have
    been written in Ruby, Python, or any other language.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have already studied the Notepad app, part of the Android samples, you
    will be familiar with the RESTful recipe app: it was written using the Notepad
    App code as a base, replacing the persistence from an embedded SQLite database
    to a REST online service.'
  prefs: []
  type: TYPE_NORMAL
- en: 'RecipeList activity: listing all recipes stored on the server'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the user launches the app, the first thing he wants to see is the list
    of the available recipes.
  prefs: []
  type: TYPE_NORMAL
- en: This activity uses `ListView`, backed with `ListAdapter` to display them to
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'But first, it needs to get them from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a model (`Recipe.java`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And a `RestTemplate` instance nested in an AsyncTask:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This task will get executed every time we need to get an updated list of recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the activity is created (or resumed): `onResume()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we''re back from a successful update operation: `onActivityResult()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may have noticed that this AsyncTask extends `RecipeAbstractAsyncTask`,
    a class that defines an exception, and a utility method, `prepareHeadersWithMediaTypeAndBasicAuthentication()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As its name implies, it prepares the request headers to include the Basic authentication
    needed, and the desired `MediaType` object from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to `GetRecipesTask`: we prepare the request headers, we create a new `RestTemplate`
    instance – configured to use Jackson to (un) serialize the messages, and we perform
    the GET request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `R.string.resource_url` value is defined in `strings.xml` and is defined
    to be equal to: [http://www.restfulapp.appspot.com/rest/recipes/](http://www.restfulapp.appspot.com/rest/recipes/).'
  prefs: []
  type: TYPE_NORMAL
- en: Since we want to get a list of recipes, the type given to the `ResponseEntity`
    object is an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important thing to note is that the exception handler: **RestClientException**
    is, unlike its name, a wrapping server and client exception. If you want to tell
    your user what went wrong, you''d better catch this exception and keep it until
    you''re back in the UI thread when executing the code in the `onPostExecute()`
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that `RestClientException` is a subclass of `RuntimeException`, that's
    why you don't need to catch it explicitly. If you don't though, this exception
    could kill your activity if it is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: Talking about the user interface, this task uses its pre-and post-execute methods
    to keep the user updated about the status of the loading by using `ProgresDialogs`
    and `Toasts`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It can be useful to manually debug a REST resource, from outside your application;
    the **cURL** application (downloadable at [http://curl.haxx.se/download.html](http://curl.haxx.se/download.html))
    is probably the most popular tool to do so.
  prefs: []
  type: TYPE_NORMAL
- en: For each HTTP request evoked in this section, I will now include its matching
    cURL command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![RecipeList activity: listing all recipes stored on the server](img/1905_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An overview of the RecipesList activity
  prefs: []
  type: TYPE_NORMAL
- en: RecipeEditor activity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This activity is responsible for getting, updating, creating, and deleting the
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: '![RecipeEditor activity](img/1905_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The RecipeEditor activity in update mode
  prefs: []
  type: TYPE_NORMAL
- en: GETting a recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user taps on the create icon of the RecipeList activity, or on one of
    the recipe title, he/she is directed to the RecipeEditor activity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If the user wants to create a new recipe, he/she will see empty fields, but
    if he/she wants to see a recipe, they''ll first get it from the server before
    filling the fields; thanks to the internal `GetRecipeTask` :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Nothing really new here, we want to get a single recipe, identified by its ID
    (`params[0])`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: PUTting a recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To update one recipe, we must request the recipe resource with the PUT HTTP
    verb.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For that, we have, once again, a dedicated AsyncTask: `UpdateRecipeTask`, that
    will instantiate a `RestTemplate` instance, carrying the updated recipe (as soon
    as the user presses the `Save` button, we call the `updateNote()` method that
    syncs the content of the view, with the model of the current recipe).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can see the real important part here is `RequestEntity`, that wraps our
    recipe: `RestTemplate` will pass it along to Jackson that will convert it into
    a JSON string.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the server does not respond with the HTTP Status 200 (OK), we can consider
    something went wrong and keep the exception for the user interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: POSTing a recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create one recipe, we must request the recipe resource with the POST HTTP
    verb.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the REST literature, you will also read about the usage of the PUT HTTP verb
    to create an entity too; but on one condition though – you would have to provide
    the ID (so that several PUT in a row do not change the resource state. PUT is
    idempotent just like GET and DELETE, and just as unsafe as DELETE and POST).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In our case, we create a new resource, so POST reflects well our intention.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s have a look at `CreateRecipeTask`, which is very similar to `UpdateRecipeTask`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Some interesting things to notice: the recipe does not have any ID set since
    the user is creating a recipe from nothing. The web service will assign an ID
    to this recipe (and should return the URI of the created resource); and the expected
    status is not 200, but 201 (`HttpStatus.CREATED`).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: DELETing a recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To delete one recipe, we must request the recipe resource with the DELETE HTTP
    verb.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The AsyncTask named `DeleteRecipeTask` is similar to `GetRecipeTask` in the
    way that it only requires the ID of the recipe to be appended to the resource
    URI (there is no need to carry the whole recipe as we did with PUT and POST).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This request expects to have a response with a 204 HTTP code, meaning the request
    was a success, but there is nothing to return (`HttpStatus.NO_CONTENT`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: HTTP code 200 would have been fine as a response to a successful DELETE request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check with your web service documentation (or better, experiment with cURL for
    example) to make the best assumptions about what is supposed to return a web service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Android annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have heard about this project available at [https://github.com/excilys/androidannotations/](https://github.com/excilys/androidannotations/)
    that aims at reducing the amount of code needed to inject views, activities, providers,
    services, and so on in an Android app.
  prefs: []
  type: TYPE_NORMAL
- en: The project leaders have decided to use Spring for Android's `RestTemplate`
    as the REST client library backing the REST annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android annotations is based on the **annotations processor tool** (**apt**),
    now part of the Java 6 compiler; each annotated class will trigger the generation
    of a subclass (named the same with an `_` appended to the filename, for example
    `OriginalActivity_.java`) that will contain all the boilerplate code the annotations
    saved you from writing!
  prefs: []
  type: TYPE_NORMAL
- en: So, along with `@Eactivity` (to allow an activity to use Android annotations),
    `@ViewById` (to inject your views), you have `@Get`, `@Post`, `@Put`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at how we can benefit from Android annotations with the JSON
    example (getting the IP address from `Ifconfig.me`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: There is definitely less code, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed though that we are using a new class named `IfConfigMeRestClient`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This class configures `RestTemplate` providing the converter class, the HTTP
    verb used, the mapping class (`IfConfigMeJson`), and the accepted media types.
  prefs: []
  type: TYPE_NORMAL
- en: Android annotations provides a good level of support to Spring for Android's
    `RestTemplate` (see [https://github.com/excilys/androidannotations/wiki/Rest-API](https://github.com/excilys/androidannotations/wiki/Rest-API)
    for the list of `RestTemplate` based annotations), and I suggest you try it to
    see if you prefer using it or not in your Spring for Android based project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you start a project using Android annotations from scratch, I suggest you
    carefully follow those environment instructions: [https://github.com/excilys/androidannotations/wiki/Building-Project-Maven-Eclipse](https://github.com/excilys/androidannotations/wiki/Building-Project-Maven-Eclipse).'
  prefs: []
  type: TYPE_NORMAL
- en: Quick start – OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OAuth** is an open standard for authorization as Wikipedia puts it.'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth allows users to share their data or resources, hosted on a service provider,
    with websites or desktop or mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if you gave your credentials (username and password) to those websites
    or apps, they could access your data on your behalf; but would you trust a third-party
    app or website to keep your credentials (your key to your digital life) safe?
    What if this app or website is malicious? Or simply unsecured? How many times
    have you read about a website getting its users credentials stolen, or keeping
    passwords in plain text in their databases?
  prefs: []
  type: TYPE_NORMAL
- en: 'OAuth is just about this; letting third-party apps or websites have a limited
    access (through a list of authorizations or scopes: `access user email`, `access
    user profile`, `can post messages on user behalf`, and so on) to your data, hosted
    on a service provider (the famous OAuth service providers are Google, Facebook,
    Twitter, Yahoo!, GitHub, LinkedIn, and so on) without ever giving them your credentials.'
  prefs: []
  type: TYPE_NORMAL
- en: Developing a website or an app relying on a service provider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have you ever noticed those **Login with Facebook** or **Login with Google**
    buttons on some websites (such as [Deezer.com](http://Deezer.com), [StackOverFlow.com](http://StackOverFlow.com),
    and so on), or have you ever had a third-party Twitter app on an Android device
    (such as Twicca) request your Twitter credentials?
  prefs: []
  type: TYPE_NORMAL
- en: 'All those websites and apps use OAuth to get access to your data:'
  prefs: []
  type: TYPE_NORMAL
- en: For one, they are saving you the trouble of having to create and remember yet
    other credential. They even enrich your user experience by accessing your data
    (such as your profile picture, activity info, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, they gather a bigger audience (since the users don't have to go
    through the tedious account creation process) and they don't have to manage authentication
    credentials (with its risks) nor authorization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Usually if a website or app creator wants to benefit from a service providing
    OAuth authorization, he/she has to register it against the OAuth service provider
    (Google, Facebook, and so on) which in turn will give him/her a **Client ID**
    and **Client secret** value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing a website or an app relying on a service provider](img/1905_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Google API Console to register a new application and associate it
    with a client ID and a client secret
  prefs: []
  type: TYPE_NORMAL
- en: Let's discover how this client ID and client secret enables the app to access
    the user's data.
  prefs: []
  type: TYPE_NORMAL
- en: The OAuth dance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An Android app (or any other installed app) relies on an OAuth 2.0 service
    provider such as Google. Let''s have a look at the workflow of the OAuth authorization
    process in the following five simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The user launches the app for the first time; it will generate the token request
    – a URL to the service provider, including the app client ID and client secret,
    and also the several authorizations needed for the app (user info, userinfo e-mail,
    and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example with Google OAuth 2.0 service provider:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This URL is loaded by the Android Chrome browser, most probably embedded in
    the app thanks to a WebView. The user is asked to accept or deny the authorizations
    asked by the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In return, if the user grants the app, the app will intercept the response from
    the embedded browser that contains an authorization code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of the response with Google OAuth 2.0 service provider:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The app will finally exchange this authorization code for a token (if the lifetime
    of the token is limited, the app will also receive a refresh token and the expire
    time). This access token will be saved securely by the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An example of a token request/response with Google OAuth 2.0 service provider.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Request**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Response**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The app will finally be able to interact with the resource (such as a REST service),
    provided it sends a valid token along with each of its requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of a request with a token with Google OAuth 2.0 service provider:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most, if not all, OAuth 2.0 service providers will only accept authorized service
    calls on HTTPS, to make sure the token can not be intercepted.
  prefs: []
  type: TYPE_NORMAL
- en: '![The OAuth dance](img/1905_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The OAuth workflow to access Google UserInfo Service, from [https://developers.google.com/accounts/docs/OAuth2](https://developers.google.com/accounts/docs/OAuth2)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read [https://developers.google.com/accounts/docs/OAuth2InstalledApp](https://developers.google.com/accounts/docs/OAuth2InstalledApp)
    to know the Google OAuth 2.0 service provider specifics, or [http://developers.facebook.com/docs/concepts/login/login-architecture/](http://developers.facebook.com/docs/concepts/login/login-architecture/)
    to know about Facebook OAuth 2.0 service provider specifics.
  prefs: []
  type: TYPE_NORMAL
- en: It is strongly advised to read the OAuth service provider documentation before
    starting working on a client app (each of them have some subtle differences such
    as the parameters of the request token, the callback url, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Spring for Android Auth module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spring for Android `Auth` module supports both OAuth 1.0a and OAuth 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell:'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth 2.0 allows for better support of non-webapps (such as an Android app)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth 2.0 no longer requires developers to use cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth 2.0 access tokens are *short-lived* (thanks to the refresh tokens)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To know more about OAuth 2.0, you can read several articles from *Eran Hammer*
    on his blog: [http://hueniverse.com/2010/05/introducing-oauth-2-0/](http://hueniverse.com/2010/05/introducing-oauth-2-0/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Spring for Android `Auth` module depends on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring for Android core (common classes: `Base64`, `StringUtils`, resource
    abstractions, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring for Android `RestTemplate` (REST API abstracting the underneath HttpClient)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring Social Core (OAuth 1.0 and 2.0 API wrapping the OAuth flows: request
    for authorization code, request for token, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security Crypto (provides support for symmetric encryption, key generation,
    and password encoding)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Auth` module itself defines cryptography and SQL classes for Android (to
    enable you to persist the authorization tokens securely to a SQLite Android database).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spring for Android's `Auth` only contains seven classes as of now, that are
    about support for persisting OAuth tokens on an Android device; all the OAuth
    code is in Spring Social Core.
  prefs: []
  type: TYPE_NORMAL
- en: To make Twitter, Facebook, and Google apps developers' life easier, Spring Social
    has extensions, respectively named Spring Social Twitter, Spring Social Facebook,
    and Spring Social Google. These define APIs to access user's information, posts,
    contacts, agendas in each of those social networks.
  prefs: []
  type: TYPE_NORMAL
- en: An OAuth example using Google
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to build an Android app displaying information about a Google
    user: we are going to use Spring for Android `Auth` of course, but more importantly
    Spring Social and Spring Social Google.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The official documentation examples are about Facebook and Twitter. If you want
    to create an app interacting with those social networks, have a look at the Spring
    for Android examples at [https://github.com/SpringSource/spring-android-samples](https://github.com/SpringSource/spring-android-samples).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the `pom.xml` file of this project, in particular the
    inclusion of Spring Social Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You will notice here (in the `repository` section), this module is not hosted
    by Spring Source, because it is actually a community project not endorsed by Spring
    Source.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This `pom.xml` file contains many exclusions; this is because most of the libraries
    used were developed with Java SE in mind, this is why they rely on Spring Core,
    Spring MVC, and so on. Spring for Android Core and `RestTemplate` provide the
    necessary dependencies for those modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s have a look at the `AndroidManifest.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: For the first time in our examples, we are going to use an `Application` class,
    named here `MainApplication`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`GoogleWebOAuthActivity` will embed a browser and will only be launched for
    authentication. We don''t want this activity to be part of the app history or
    the user to be able to get back to it; that''s why we added `android:noHistory="true"`
    and `android:excludeFromRecents="true"`. More info on this is available at [http://developer.android.com/guide/topics/manifest/activity-element.html](http://developer.android.com/guide/topics/manifest/activity-element.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This class will be used to prepare the two most important factories of our
    app (they will be accessed in all the activities): `ConnectionFactoryRegistry`
    and `ConnectionRepository`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, in the `onCreate()` method we initialize:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConnectionFactoryRegistry`: With the client ID and the client secret of the
    application from `ConnectionFactoryRegistry`, we''ll have access to `GoogleConnectionFactory`
    which is the Google services extension of `OAuth2ConnectionFactory` that gives
    access to all OAuth operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConnectionRepository`: This will be responsible for persisting `ConnectionFactoryRegistry`,
    so that the OAuth token can be retrieved without needing to do the whole OAuth
    workflow every time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed the use of a salt and a password (encryption) during the
    initialization of the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will prevent a malicious app from being able to access the device database
    to retrieve the user OAuth token. A brief reminder: the app will never have access
    to the user''s Google password. The authentication to the service provider, Google
    in this example, is always performed from the device browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the main activity of that project, `GoogleActivity` that
    will be launched at startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This activity will display a list of entries related to the user profile if
    he/she is connected or just a **Connect** button if the user is not connected
    yet (since `GoogleConnectionFactoryRegistry` is persisted in a database, just
    looking up a connection of type `Google` in `ConnectionRepository` is enough to
    know whether or not the access token is already fetched).
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The GoogleActivity if the user has not yet logged in
  prefs: []
  type: TYPE_NORMAL
- en: So, in the case that we are not connected, taping on **Connect** will call `displayGoogleAuthorization()`
    which will launch `GoogleWebOAuthActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: '`GoogleWebOAuthActivity` is certainly the most important activity of this app.
    It is responsible for the OAuth 2.0 authentication and authorization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: When this activity is created, it configures the associated WebView (you will
    notice this activity extends `AbstractWebViewActivity` that injects a Chrome Browser
    instance into a WebView) to accept JavaScript ( the service provider and Google
    OAuth 2.0 requires JavaScript to authenticate the user) and injects a custom `WebViewClient`
    object that we will use to intercept OAuth flows (more on that in a moment).
  prefs: []
  type: TYPE_NORMAL
- en: Then, when the activity starts, we ask the WebView (the embedded Chrome browser)
    to request the authorization code for this app (see step 1 of *The OAuth dance*
    section).
  prefs: []
  type: TYPE_NORMAL
- en: This request is built using a callback URL, the scope of the authorizations
    needed for the app, and the client ID and secret (those two were already given
    to Spring OAuth when we created `ConnectionFactoryRegistry`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The callback URL here is [http://localhost](http://localhost), because Google
    OAuth 2.0 service provider gives the choice between [http://localhost](http://localhost)
    and `urn:ietf:wg:oauth:2.0:oob`.
  prefs: []
  type: TYPE_NORMAL
- en: This will impact the response holding the authorization code; whether it will
    be part of a query string parameter or in the title bar of the browser. You can
    read [https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi](https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user has not yet authenticated to any Google web services from his device,
    he/she should see a dialog inviting him/her to authenticate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This dialog only appears if the user has not yet been authenticated to any Google
    services on his device
  prefs: []
  type: TYPE_NORMAL
- en: 'In all cases though, the user will see this authorization dialog which lists
    all the *scopes* the app has requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Google OAuth 2.0 service provider authorization dialog
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the user denies the authorization, then, as expected, the authorization process
    will be terminated.
  prefs: []
  type: TYPE_NORMAL
- en: According to the service provider, this dialog may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user accepts the requested authorizations, `GoogleWebOAuthActivity`
    will detect that the web client is being redirected to a localhost (**the callback
    URI**), with the authorization code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`exchangeAuthorizationCodeForAccessToken.execute(code)` will execute the following
    AsyncTask (we are going to send back the authorization code from our app, using
    `RestTemplate`, relying on Java `UrlConnection`, so we need to code this call
    from a background thread):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Once the `exchangeForAccess` method is called, we retrieve the user token and
    we persist it in the `ConnectionRepository` class.
  prefs: []
  type: TYPE_NORMAL
- en: Our app is finally authorized to access the user's Google profile!
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The GoogleActivity if the user has not yet logged in
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks on **Profile**, he will launch `GoogleProfileActivity`, from
    which, as you may expect, we get the user profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so we are using an AsyncTask, named `FetchProfileTask`, that will hit
    two Google web services: `UserOperations` (to read the main profile of the user
    and his/her profile picture) and `PersonOperations` (to read his/her Google+ profile,
    here we will just access the **about me** description):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This information is then injected into the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An OAuth example using Google](img/1905_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The GoogleProfileActivity displaying the user profile picture, "about me" description
    and some profile info
  prefs: []
  type: TYPE_NORMAL
- en: People and places you should get to know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need help with Spring for Android (or REST or OAuth in general), the
    following are some people and places which will prove invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: Official sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Homepage: [http://www.springsource.org/spring-android](http://www.springsource.org/spring-android)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Manual and documentation: [http://static.springsource.org/spring-android/docs/1.0.x/reference/htmlsingle/](http://static.springsource.org/spring-android/docs/1.0.x/reference/htmlsingle/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blog: [http://blog.springsource.org/category/android/](http://blog.springsource.org/category/android/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source code: [https://github.com/SpringSource/spring-android](https://github.com/SpringSource/spring-android)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official example''s source code: [https://github.com/SpringSource/spring-android-samples](https://github.com/SpringSource/spring-android-samples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android Maven Plugin: [http://code.google.com/p/maven-android-plugin/](http://code.google.com/p/maven-android-plugin/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Articles and tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Explanation of OAuth: [http://hueniverse.com/oauth/guide/](http://hueniverse.com/oauth/guide/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OAuth for Google services: [http://support.google.com/a/bin/answer.py?hl=en&answer=61017](http://support.google.com/a/bin/answer.py?hl=en&answer=61017)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Android documentation about remote connections: [http://developer.android.com/training/basics/network-ops/connecting.html](http://developer.android.com/training/basics/network-ops/connecting.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Official forums: [http://forum.springsource.org/forumdisplay.php?88-Android](http://forum.springsource.org/forumdisplay.php?88-Android)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official bug tracker: [https://jira.springsource.org/browse/ANDROID](https://jira.springsource.org/browse/ANDROID)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Android team blog: [http://android-developers.blogspot.ca/](http://android-developers.blogspot.ca/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow Spring for Android on Twitter: [https://twitter.com/springandroid](https://twitter.com/springandroid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow Roy Clarkson (Spring for Android lead developer) on Twitter: [https://twitter.com/royclarkson](https://twitter.com/royclarkson)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more Open Source information, follow Packt at: [http://twitter.com/#!/packtopensource](http://twitter.com/#!/packtopensource)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
