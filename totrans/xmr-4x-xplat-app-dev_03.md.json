["```kt\npublic class Product \n{ \n    public int Id { get; set; } //Just a numeric identifier \n    public string Name { get; set; } //Name of the product \n    public float Price { get; set; } //Price of the product \n} \n\n```", "```kt\n// An example class, in the real world would talk to a web \n// server or database. \npublic class ProductRepository \n{ \n  // a sample list of products to simulate a database \n  private Product[] products = new[] \n  { \n    new Product { Id = 1, Name = \"Shoes\", Price = 19.99f }, \n    new Product { Id = 2, Name = \"Shirt\", Price = 15.99f }, \n    new Product { Id = 3, Name = \"Hat\", Price = 9.99f }, \n  }; \n\n  public async Task<Product[]> SearchProducts(string searchTerm) \n  { \n    // Wait 2 seconds to simulate web request \n    await Task.Delay(2000); \n\n    // Use Linq-to-objects to search, ignoring case \n    searchTerm = searchTerm.ToLower(); \n\n    return products.Where(p =>\n      p.Name.ToLower().Contains(searchTerm)) \n      .ToArray(); \n  } \n} \n\n```", "```kt\npublic class ProductViewModel \n{ \n  private readonly ProductRepository repository =\n      new ProductRepository(); \n\n  public string SearchTerm \n  { \n    get; \n    set; \n  } \n\n  public Product[] Products \n  { \n    get; \n    private set; \n  } \n\n  public async Task Search() \n  { \n    if (string.IsNullOrEmpty(SearchTerm)) \n      Products = null; \n    else \n      Products = await repository.SearchProducts(SearchTerm); \n  } \n} \n\n```", "```kt\n#if IPHONE \n  Console.WriteLine(\"I am running on iOS\"); \n#elif ANDROID \n  Console.WriteLine(\"I am running on Android\"); \n#else \n  Console.WriteLine(\"I am running on ???\"); \n#endif \n\n```", "```kt\npublic static class Utility \n{ \n  public static void OpenUrl(string url) \n  { \n    //Open the url in the native browser \n  } \n} \n\n```", "```kt\n#if IPHONE \n  //iOS using statements \n  using MonoTouch.Foundation; \n  using MonoTouch.UIKit; \n#elif ANDROID \n  //Android using statements \n  using Android.App; \n  using Android.Content; \n  using Android.Net; \n#else \n  //Standard .Net using statement \n  using System.Diagnostics; \n#endif \n\npublic static class Utility \n{ \n  #if ANDROID \n    public static void OpenUrl(Activity activity, string url) \n  #else \n    public static void OpenUrl(string url) \n  #endif \n  { \n    //Open the url in the native browser \n    #if IPHONE \n      UIApplication.SharedApplication.OpenUrl(\n         NSUrl.FromString(url)); \n    #elif ANDROID \n      var intent = new Intent(Intent.ActionView,\n         Uri.Parse(url)); \n      activity.StartActivity(intent); \n    #else \n      Process.Start(url); \n    #endif \n  } \n} \n\n```", "```kt\npublic interface ISettings \n{ \n  bool IsSoundOn \n  { \n    get; \n    set; \n  } \n} \n\n//On iOS \nusing UIKit; \nusing Foundation; \n\npublic class AppleSettings : ISettings \n{ \n  public bool IsSoundOn \n  { \n    get \n    { \n      return NSUserDefaults.StandardUserDefaults \n        .BoolForKey(\"IsSoundOn\"); \n    } \n    set \n    { \n      var defaults = NSUserDefaults.StandardUserDefaults; \n      defaults.SetBool(value, \"IsSoundOn\"); \n      defaults.Synchronize(); \n    } \n  } \n} \n\n//On Android \nusing Android.Content; \n\npublic class DroidSettings : ISettings \n{ \n  private readonly ISharedPreferences preferences; \n\n  public DroidSettings(Context context) \n  { \n    preferences = context.GetSharedPreferences(\n       context.PackageName, FileCreationMode.Private); \n  } \n\n  public bool IsSoundOn \n  { \n    get \n    { \n      return preferences.GetBoolean(\"IsSoundOn\", true); \n    } \n    set \n    { \n      using (var editor = preferences.Edit()) \n      { \n        editor.PutBoolean(\"IsSoundOn\", value); \n        editor.Commit(); \n      } \n    } \n  } \n} \n\n```", "```kt\npublic class SettingsViewModel \n{ \n  private readonly ISettings settings; \n\n  public SettingsViewModel(ISettings settings) \n  { \n    this.settings = settings; \n  } \n\n  public bool IsSoundOn \n  { \n    get; \n    set; \n  } \n\n  public void Save() \n  { \n    settings.IsSoundOn = IsSoundOn; \n  } \n} \n\n```", "```kt\npublic static class ServiceContainer \n{ \n  static readonly Dictionary<Type, Lazy<object>> services = \n    new Dictionary<Type, Lazy<object>>(); \n\n  public static void Register<T>(Func<T> function) \n  { \n    services[typeof(T)] = new Lazy<object>(() => function()); \n  } \n\n  public static T Resolve<T>() \n  { \n    return (T)Resolve(typeof(T)); \n  } \n\n  public static object Resolve(Type type) \n  { \n    Lazy<object> service; \n    if (services.TryGetValue(type, out service)) \n    { \n      return service.Value; \n    } \n    throw new Exception(\"Service not found!\"); \n  } \n} \n\n```", "```kt\n//iOS version of ISettings \nServiceContainer.Register<ISettings>(() =>\n   new AppleSettings()); \n\n//Android version of ISettings \nServiceContainer.Register<ISettings>(() => \n   new DroidSettings(this)); \n\n//You can even register ViewModels \nServiceContainer.Register<SettingsViewModel>(() => \n   new SettingsViewModel()); \n\n```", "```kt\n[Application] \npublic class Application : Android.App.Application \n{ \n  //This constructor is required \n  public Application(IntPtr javaReference, JniHandleOwnership\n      transfer): base(javaReference, transfer) \n  { \n\n  } \n\n  public override void OnCreate() \n  { \n    base.OnCreate(); \n\n    //IoC Registration here \n  } \n} \n\n```", "```kt\npublic SettingsViewModel() \n{ \n  this.settings = ServiceContainer.Resolve<ISettings>(); \n} \n\n```"]