- en: Chapter 2. Lua Crash Course and the Corona Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Lua is the programming language used to develop on the Corona SDK. So far,
    you have learned how to use the major resources to run the SDK and other development
    tools to create an application on your mobile devices. Now that we have dabbled
    into creating a couple of lines of code that make a program work, let''s jump
    into the fundamentals that will give you a better understanding of what Lua is
    capable of.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply variables to a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use data structures to form tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work with display objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement functions using object methods and arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize your workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get to it.
  prefs: []
  type: TYPE_NORMAL
- en: Lua to the rescue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lua is the industry standard for game programming. It is similar to JavaScript
    and Flash's ActionScript. Anyone who's done any scripting in these languages will
    make the transition to Lua almost immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Lua has been useful in creating various applications and games. Many game programmers
    have found Lua to be a convenient scripting language due to how easy it is to
    embed, its fast execution, and its small learning curve. It is ubiquitous in *World
    of Warcraft*. It is also used by Electronic Arts, Rovio, ngmoco, and Tapulous
    in games such as *Angry Birds*, *Tap Tap Revenge*, *Diner Dash*, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Lua, refer to [http://www.lua.org](http://www.lua.org).
  prefs: []
  type: TYPE_NORMAL
- en: Valuable variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like in many scripting languages, Lua has variables. You can think of a variable
    as something that stores values. When you apply a value to a variable, you can
    refer to it using the same variable name.
  prefs: []
  type: TYPE_NORMAL
- en: An application consists of comments, blocks, statements, and variables. A **comment**
    is never processed, but it is included to explain the purpose of a statement or
    block. A **block** is a group of statements. **Statements** provide instructions
    on what operations and computations need to be done; **variables** store the values
    of these computations. Setting a value in a variable is called **assignment**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lua uses three kinds of variables, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table fields (properties)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables take up memory space, which can be limited on various mobile devices.
    When a variable is no longer required, it is best to set its value to nil so that
    it can be cleaned quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Global variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A global variable can be accessed in every scope and can be modified from anywhere.
    The term "scope" is used to describe the area in which a set of variables is accessible.
    You don''t have to declare a global variable. It is created as soon as you assign
    a value to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Local variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A local variable is accessed from a local scope and usually called from a function
    or block of code. When we create a block, we are creating a scope in which variables
    can live or a list of statements, which are executed sequentially. When referencing
    a variable, Lua must find the variable. Localizing variables helps speed up the
    look-up process and improves the performance of your code. Using the local statement,
    it declares a local variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines of code show how to declare a local variable in a block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Table fields (properties)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Table fields are groups of variables uniquely accessed by an index. Arrays
    can be indexed with numbers and strings or any value pertaining to Lua, except
    `nil`. You index into the array to assign the values to a field using integers
    or strings. When the index is a string, the field is known as a property. All
    properties can be accessed using the dot operator (`x.y`) or a string (`x["y"]`)
    to index into a table. The result is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: More information relating to tables will be discussed later in the section called
    *Tables*.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed additional text in certain lines of code in the preceding
    examples. These are what you call comments. Comments begin with a double hyphen,
    `--` , anywhere except inside a string. They run until the end of the line. Block
    comments are available as well. A common trick to comment out a block is to surround
    it with `--[[`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how to comment one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of a block comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Assignment conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are rules for variable names. A variable starts with a letter or an underscore.
    It can''t contain anything other than letters, underscores, or digits. It also
    can''t be one of the following reserved words of Lua:'
  prefs: []
  type: TYPE_NORMAL
- en: '`and`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`break`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`else`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elseif`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nil`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`or`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`then`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`until`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are valid variables:'
  prefs: []
  type: TYPE_NORMAL
- en: x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ABC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: _abc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test_01
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: myGroup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are invalid variables:'
  prefs: []
  type: TYPE_NORMAL
- en: function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: my-variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '123'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lua is also a case-sensitive language. For example, `else` is a reserved word,
    but Else and ELSE are two different, valid names.
  prefs: []
  type: TYPE_NORMAL
- en: Types of values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lua is a dynamically typed language. There is no defined variable type in the
    language. This allows each value to carry its own type.
  prefs: []
  type: TYPE_NORMAL
- en: As you have noticed, values can be stored in variables. They can be manipulated
    to give a value of any type. This also allows you to pass arguments to other functions
    and have them returned as results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic types of values that you''ll deal with are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nil**: This is the only type whose value is `nil`. Any uninitialized variable
    has `nil` as its value. Like global variables, it is `nil` by default and can
    be assigned `nil` to delete it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Boolean**: This type has two values: `false` and `true`. You will notice
    that conditional expressions consider `false` and `nil` as false and anything
    else as `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Numbers**: These represent real (double-precision, floating-point) numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String**: This is a sequence of characters. 8-bit characters and embedded
    zeroes are allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tables**: These are data structures in Lua. They are implemented by an associative
    array, which is an array that can be indexed not only with numbers, but also with
    strings or any other value, except `nil` (more information on this later in this
    chapter called *Tables*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: These are known as first-class values of Lua. Typically, functions
    can be stored in variables, passed as arguments to other functions, and returned
    as results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action – printing values using blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s give it a shot and see how powerful a language Lua is. We''re starting
    to get an idea of how variables work and what happens when you assign values to
    them. What if you have a variable that has multiple values attached to it? How
    does Lua differentiate them? We''ll use the Corona terminal so that we can see
    the values outputted in the terminal box. Along the way, you''ll pick up other
    programming techniques as you progress through this section. We will also refer
    to chunks in this exercise. The unit of execution in Lua is called a **chunk**.
    A chunk is a block that is executed sequentially. Follow these steps on getting
    started with Lua:'
  prefs: []
  type: TYPE_NORMAL
- en: If you remember, in the previous chapter, you learned how to create your own
    project folder and `main.lua` file for the Hello World application.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project folder on your desktop and name it `Variables`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up your preferred text editor and save it as `main.lua` in your `Variables`
    project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add in the `while` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `if` statement that will represent another local body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the Corona terminal. Make sure that you see the Corona SDK screen and
    a terminal window pop up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to your `Variables` project folder and open your `main.lua` file in
    the simulator. You will notice that the device in the simulator is blank, but
    if you look at your terminal window, there are some results from the code printed
    out as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first two variables that were created are local ones outside of each block
    of code. Notice that at the beginning of the `while` loop, `i <= x` refers to
    the variables in lines 1 and 2\. The `local x = i` statement inside the `while`
    loop is only local to the `do` body and is not the same as `local x = 10`. The
    `while` loop runs 10 times and prints out a value that is incremented by one each
    time.
  prefs: []
  type: TYPE_NORMAL
- en: The `if` statement compares `i < 20`, where `i` equals 11 at this point and
    uses another `local x` variable that is local to the `then` body. Since the statement
    is true, `x` equals 20 and prints out the value of `x + 5`, which is `25`.
  prefs: []
  type: TYPE_NORMAL
- en: The very last line, `print(x)`, is not attached to any of the blocks of code
    in the `while` loop or the `if` statement. Therefore, it refers to `local x =
    10` and prints out the value of 10 in the terminal window. This may seem confusing,
    but it's important to understand how local and global variables work in Lua.
  prefs: []
  type: TYPE_NORMAL
- en: Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **expression** is something that represents a value. It can include numeric
    constants, quoted strings, variable names, unary and binary operations, and function
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`+`, `-`, `*`, `/`, `%`, and `^` are called arithmetic operators.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of binary arithmetic operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the modulo (division remainder) operator is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the power of operator is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Relational operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Relational operators always result in false or true and ask yes or no questions.
    The relational operators are `<`, `>`, `<=`, `>=`, `==`, `~=`.
  prefs: []
  type: TYPE_NORMAL
- en: The `==` operator tests for equality, and the `~=` operator tests for inequality.
    If the value types are different, then the result is false. Otherwise, Lua compares
    the values to their types. Numbers and strings are compared in the usual way.
    Tables and functions are compared by reference as long as two such values are
    considered equal, only if they are the same object. When a new object is created,
    the new object is different from the previously existing one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are examples of relational operators. They will display Boolean results
    and can''t be concatenated with strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Logical operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The logical operators in Lua are `and`, `or`, and `not`. All logical operators
    consider both `false` and `nil` as false and anything else as true.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `and` operator returns its first argument if the value is `false` or `nil`;
    otherwise, it returns its second argument. The `or` operator returns its first
    argument if the value is different from `nil` and `false`; otherwise, it returns
    its second argument. Both `and` and `or` use a shortcut evaluation; this means
    the second operand is evaluated only when necessary. Here are some examples of
    logical operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `not` operator always returns true or false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Concatenation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The string concatenation operator in Lua is denoted by two dots, "`..`". It
    takes two values as operands and splices them together. If any of its operands
    is a number, then it is also converted to a string. Some examples of the concatenation
    operator are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The length operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `#` length operator measures the length of a string or size of a table.
    The length of a string is simply the number of characters in it. A character is
    considered one byte. Examples of the length operator are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Precedence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list shows the operator precedence in Lua displayed from the
    highest to the lowest priority:'
  prefs: []
  type: TYPE_NORMAL
- en: '`^`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not`, `#`, `-` (unary)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*`, `/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+`, `-`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`..`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<`, `>`, `<=`, `>=`, `~=`, `==`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`and`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`or`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All binary operators are left associative, except for the `^` exponentiation
    and the`..` concatenation, which are right associative. You can use parentheses
    to change the precedence of an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases where two operands of the same precedence compete for operands, the
    operand belongs to the operator on the left-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding expression shows both the addition and subtraction operators,
    which have equal precedence. The second element (the number `4`) belongs to the
    addition operator, so the expression is evaluated mathematically as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s focus on the rules of precedence based on priority. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'An inexperienced programmer may think that the value of the preceding example
    is 90 if it were evaluated from left to right. The correct value is 34 because
    multiplication has a higher precedence than addition, so it is performed first.
    Adding parentheses to the same expression will make it easier to read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this chapter, you saw some code examples using sequences of characters.
    Those sequences of characters are called **strings**. Strings may consist of any
    character, including numeric values.
  prefs: []
  type: TYPE_NORMAL
- en: Quoting strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three ways to quote strings: with double quotes, with single quotes,
    and with square brackets.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When quoting strings, make sure that only straight quotes are used in your code
    and not curly quotes; or else, it will not compile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Double quote characters `"` mark the beginning and end of the string. Here
    is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also quote strings using the single quote character `''`. Single quotes
    work the same as double quotes, except that single-quoted strings can contain
    a double quote. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, using a pair of square brackets will also quote strings. They are
    used mainly for strings when double or single quotes cannot be used. There are
    not many cases where this occurs, but they will do the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – getting our hands full of strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re starting to familiarize ourselves with several blocks of code and how
    they interact with each other. Let''s see what happens when we add in some expressions
    using strings and how different they are from just regular strings that you print
    out in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project folder on your desktop and name it `Working With Strings`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a new `main.lua` file in your text editor and save it to your folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type out the following lines (do not include the line numbers in the code,
    they are only used for line reference):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add in the following variables. Notice that it uses the same variable name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add in more variables with some string values and compare them using
    different operators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your script and launch your project in Corona. Observe the results in
    the terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see that line 1 is just a plain string with characters printed out.
    In line 2, notice that number `15` is inside the string and then added to the
    number `1`, which is outside of the string. Lua provides automatic conversions
    between numbers and strings at runtime. Numeric operations applied to a string
    will try to convert the string to a number.
  prefs: []
  type: TYPE_NORMAL
- en: When working with variables, you can use the same one and have them contain
    a string and a number at different times, like in lines 3 and 5 (`myVar = 28`
    and `myVar = "twenty-eight"`).
  prefs: []
  type: TYPE_NORMAL
- en: In the last chunk of code (lines 7-12), we compared different variable names
    using relational operators. First, we printed the strings of `Name1` and `Phone`.
    The next lines that follow compared `Name1`, `Name2`, and `Phone`. When two strings
    have the same characters in the exact order, then they are considered the same
    string and are equal to each other. When you look at `print(Name1 == Phone)` and
    `print(Name1 <= Phone)`, the statement returns `false` because of the ASCII order.
    Digits are before alphabets, which are smaller when you compare them. In `print(Name1
    == Name2)`, both variables contain the same characters, and therefore, it returns
    `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – pulling some more strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Strings are pretty simple to work with since they are just sequences of characters.
    Try making your own expressions similar to the preceding example with the following
    modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Create some variables with numerical values and another set of variables with
    numerical string values. Use relational operators to compare the values and then
    print out the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the concatenation operator, combine several strings or numbers together,
    and space them out equally. Print out the result in the terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables are the proprietary data structure in Lua. They represent arrays, lists,
    sets, records, graphs, and so on. A table in Lua is similar to an associative
    array. Associative arrays can be indexed with values of any type, not just numbers.
    Tables implement all these structures efficiently. For example, arrays can be
    implemented by indexing tables with integers. Arrays do not have a fixed size,
    but grow as needed. When initializing an array, its size is defined indirectly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how tables can be constructed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that in line 5, `a["y"]` is indexing the value from line 3\.
    In line 7, `a[b]` uses a new value of variable `b` and indexes the value of `20`
    to the string, `"Monday"`. The last line, `c`, is separate from the previous variables,
    and its only value is the string, `"hello"`.
  prefs: []
  type: TYPE_NORMAL
- en: Passing a table as an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Keys of a table can be consecutive integers, starting at 1\. They can be made
    into an array (or a list):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way of writing table constructors to build arrays in a faster and more
    convenient way that doesn''t require writing out each integer key is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Altering contents in a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While working with tables, you can modify or remove the values already in it
    and also add new values to it. This can be accomplished using the assignment statement.
    The following example creates a table with three people and their favorite types
    of drink. You can make an assignment to change one person''s drink, add a new
    person-drink pair to the table, and remove an existing person-drink pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`drinks.Jackie = "lemonade"` overwrites the original value of `drinks.Jackie
    = "milk".`'
  prefs: []
  type: TYPE_NORMAL
- en: '`drinks.Anne = "water"` adds a new key and value to the table. The value of
    `drinks.Anne` before this line would have been nil.'
  prefs: []
  type: TYPE_NORMAL
- en: The value of `drinks.Matt = "soda"` stays the same since there were no alterations
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: '`drinks.Jim = nil` overwrites the original value of `drinks.Jim = "orange juice"`
    with `nil`. It removes the `Jim` key from the table.'
  prefs: []
  type: TYPE_NORMAL
- en: Populating a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ways to populate a table is to start with an empty table and add things to
    it one at a time. We''ll use constructors, which are expressions that create and
    initialize tables. The simplest constructor is the empty constructor, `{}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the results from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example shows that `myNumbers = {}` is an empty table constructor.
    A `for` loop is created and calls `myNumbers[i]` 5 times, starting from number
    1\. Each time it is called, it is incremented by 1 and then printed out.
  prefs: []
  type: TYPE_NORMAL
- en: Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables and functions are objects; variables do not actually contain these values,
    only references to them. Tables are also used in what is known as object-oriented
    programming. Variables and methods that manipulate those variables can be collected
    together into objects. Such a value is called an **object**, and its functions
    are called **methods**. In Corona, we'll focus more on display objects since they
    are essential for game development.
  prefs: []
  type: TYPE_NORMAL
- en: Display objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anything drawn on the screen is made by display objects. In Corona, the assets
    you see displayed in the simulator are instances of display objects. You have
    probably seen shapes, images, and text, which are all forms of display objects.
    When you create these objects, you'll be able to animate them, turn them into
    backgrounds, interact with them using touch events, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Display objects are created by calling a function known as a factory function.
    There is a specific kind of factory function for each type of display object.
    For example, `display.newCircle()` creates a vector object.
  prefs: []
  type: TYPE_NORMAL
- en: Instances of display objects behave in a manner similar to Lua tables. This
    enables you to add your own properties to an object as long as they do not conflict
    with the system-assigned properties and method names.
  prefs: []
  type: TYPE_NORMAL
- en: Display properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The dot operator is used to access properties. Display objects share the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.alpha`: This is the object''s opacity. A value of 0 is transparent
    and 1.0 is opaque. The default value is 1.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.height`: This is in the local coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.isVisible`: This controls whether the object is visible on the screen.
    True is visible and false is not. The default is true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.isHitTestable` This allows an object to continue to receive hit events
    even if it is not visible. If true, objects will receive hit events regardless
    of visibility; if false, events are only sent to visible objects. It defaults
    to false.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.parent`: This is a read-only property that returns the object''s parent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.rotation`: This is the current rotation angle (in degrees). It can
    be a negative or positive number. The default is 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.contentBounds`: This is a table with the `xMin`, `xMax`, `yMin`, and
    `yMax` properties in screen coordinates. It is generally used to map the object
    in a group to the screen coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.contentHeight`: This is the height in screen coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.contentWidth`: This is the width in screen coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.width`: This is in local coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.x`: This specifies the *x* position (in local coordinates) of the object
    relative to the parent—the parent''s origin to be precise. It provides the *x*
    position of the object''s reference point relative to the parent. Changing the
    value of this will move the object in the *x* direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.anchorX`: This specifies the *x* position of the object''s alignment
    to the parent''s origin. Anchors range from 0.0 to 1.0\. By default, new objects
    have their anchor set to 0.5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.xScale`: This gets or sets the *x* scaling factor. A value of 0.5 will
    scale the object to 50 percent in the *x* direction. The scaling occurs around
    the object''s reference point. The default reference point for most display objects
    is center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.y`: This specifies the *y* position (in local coordinates) of the object
    relative to the parent—the parent''s origin to be precise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.anchorY`: This specifies the *y* position of the object''s alignment
    to the parent''s origin. Anchors range from 0.0 to 1.0\. By default, new objects
    have their anchor set to 0.5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.yScale`: This gets or sets the *y* scaling factor. A value of 0.5 will
    scale the object to 50 percent in the *y* direction. The scaling occurs around
    the object''s anchor point. The default reference point for most display objects
    is center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Corona can create display objects to store object methods as properties. There
    are two ways this can be done: using the dot operator ("`.`") or using the colon
    operator ("`:`"). Both are valid ways to create object methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of the dot operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of the colon operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The call to an object method using the dot operator is passed to the object
    if it's the first argument. The colon operator method is merely a shortcut with
    less typing involved to create the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Display objects share the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object:rotate(deltaAngle)` or `object.rotate(object, deltaAngle)`: This effectively
    adds `deltaAngle` (in degrees) to the current rotation property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:scale(sx, sy)` or `object.scale(object, sx, sy)`: This effectively
    multiplies the `xScale` and `yScale` properties using `sx` and `sy`, respectively.
    If the current `xScale` and `yScale` values are 0.5 and `sx` and `sy` are also
    0.5, the resulting scale will be 0.25 for `xScale` and `yScale`. This scales the
    object from 50 percent of its original size to 25 percent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:translate(deltaX, deltaY)` or `object.translate(object, deltaX, deltaY)`:
    This effectively adds `deltaX` and `deltaY` to the `x` and `y` properties respectively.
    This will move the object from its current position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:removeSelf()` or `object.removeSelf(object)`: This removes the display
    object and frees its memory, assuming that there are no other references to it.
    This is equivalent to calling `group:remove(IndexOrChild)` on the same display
    object, but is syntactically simpler. The `removeSelf()` syntax is also supported
    in other cases, such as removing physics joints in physics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many art assets are used in Corona applications images. You will notice that
    bitmap image objects are a type of display objects.
  prefs: []
  type: TYPE_NORMAL
- en: Loading an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using `display.newImage(filename [, baseDirectory] [, left, top])`, an image
    object is returned. The image data is loaded from a filename you specified for
    your image and looks in `system.ResourceDirectory` for that file. The acceptable
    types of image files that are supported are `.png` (PNG-24 or higher only) and
    `.jpg` files. Avoid high `.jpg` compression as it may take longer to load on a
    device. The`.png` files have better quality than the `.jpg` files and are used
    to display transparent images. The `.jpg` files do not save transparent images.
  prefs: []
  type: TYPE_NORMAL
- en: Image autoscaling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default behavior of `display.newImage()` is to autoscale large images. This
    is to conserve texture memory. However, there are times when you do not want to
    have images autoscaled, and there is an optional Boolean flag in the parameter
    list to control this manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'To override autoscaling and show the image at its full resolution, use the
    optional `isFullResolution` parameter. By default, it is false, but if you specify
    true, then the new image is loaded at its full resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The limitations and known issues are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Indexed PNG image files are not supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grayscale images are currently not supported; images must be RGB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images will still be autoscaled if they are larger than the maximum possible
    texture dimensions of the device. This is usually 2048 x 2048 px (iPad) and bigger
    for the newer, faster devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you reload the same image multiple times, the subsequent calls to `display.newImage`
    ignore the `isFullResolution` parameter and take on the value passed the first
    time. In other words, the way you load an image file the first time affects the
    autoscaling setting the next time you load that same file. This is because Corona
    conserves texture memory by automatically reusing a texture that has already been
    loaded. As a result, you can use the same images as many times as you want without
    consuming additional texture memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information on Corona SDK's documentation is located on Corona's website
    at [http://coronalabs.com](http://coronalabs.com).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – placing images on screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re finally getting into the visually appealing part of this chapter by
    starting to add in display objects using images. We don''t have to refer to the
    terminal window for now. So, let''s focus on the simulator screen. We''ll begin
    by creating a background image and some art assets by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First off, create a new project folder on your desktop and name it `Display
    Objects`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Chapter 2 Resources` folder, copy the `glassbg.png` and `moon.png` image
    files and the `config.lua` file into your `Display Objects` project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch your text editor and create a new `main.lua` file for your current project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write out the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The background display object should contain the filename of the background
    image in your project folder. For example, if the background image filename is
    called `glassbg.png`, then you would display the image like so:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `image02.x = 160; image02.y = 200` is the same as the following lines
    of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The semicolon (`;`) indicates the end of a statement and is optional. It makes
    it easier to separate two or more statements in one line and saves adding extra
    lines in your code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save your script and launch your project in the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're using Corona SDK on a Mac OS X, the default device is the iPhone.
    If you're using Windows, the default device is the Droid.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should see a background image and three other display objects of the same
    image, as shown in the following screen. The display results will vary depending
    on which device you use to simulate.![Time for action – placing images on screen](img/9343OT_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The display objects for the `image01`, `image02`, and `image03` variables should
    contain the `moon.png` filename. The filenames in your code are case sensitive,
    so make sure that you write it exactly how it displays in your project folder.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, `background` is scaled to fit within the device screen height and
    width using `contentCenterX` and `contentCenterY`. The image centered at its local
    origin since no top or left (*x* or *y*) coordinates were applied. It is also
    set to full resolution because we specified `true` in the display object.
  prefs: []
  type: TYPE_NORMAL
- en: When you observe the placement of `image01`, `image02`, and `image03` in the
    simulator, they're practically in line with each other vertically, though the
    script styles for `image01` versus `image02`/`image03` are written differently.
    This is because the coordinates for `image01` are based on the (left, top) coordinates
    of the display object. You can optionally specify that the image's top-left corner
    be located at the coordinate (left, top); if you don't supply both coordinates,
    the image will be centered about its local origin.
  prefs: []
  type: TYPE_NORMAL
- en: The placement of `image02` and `image03` are specified from the local origin
    of the display object and positioned by the local values of the *x* and *y* properties
    of the device screen. The local origin is at the center of the image; the reference
    point is initialized to this point. Since we didn't apply (left, top) values to
    `image02` and `image03`, further access to *x* or *y* properties are referred
    to the center of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you've probably noticed that the output from the iPhone 4 looks fine and
    dandy, but the output from the Droid shows that the background image displays
    at full resolution, while the other objects are lower down the screen. We see
    that all the objects we specified are there, but the scaling is off. That is because
    each iOS and Android device has a different screen resolution. The iPhone 4 has
    a screen resolution of 640 x 960 pixels, and the Droid has a screen resolution
    of 480 x 854 pixels. What may look fine on one type of device may not look exactly
    the same on a different one. Don't worry; there is a simple solution to fix all
    this using a `config.lua` file that will be discussed in the next couple of sections.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – adjusting display object properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you know how to add images to the device screen, try testing out the
    other display properties. Try doing any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing all the *x* and *y* coordinates of the `image01`, `image02`, and `image03`
    display objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing any display object and changing its rotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the visibility of a single display object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference the display properties mentioned earlier in this chapter if you're
    unsure how to do any of the preceding adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All project files not only contain a `main.lua` file, but other `.lua` and related
    assets as needed for your project. Some Corona projects are configured using a
    `config.lua` file that is compiled into your project and accessed at runtime.
    This allows you to specify dynamic content scaling, dynamic content alignment,
    dynamic image resolution, frame rate control, and antialiasing, all at the same
    time, so that the output on every type of device is displayed similarly.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic content scaling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Corona allows you to specify the screen size you plan to aim your content for.
    This is done using a file called `config.lua`. You'll be able to scale the assets
    for your app to run on a device whose screen size is smaller or bigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following values should be used to scale content:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width` (number): This is the screen resolution width of the original target
    device (in portrait orientation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height` (number): This is the screen resolution height of the original target
    device (in portrait orientation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale` (string): This is a type of autoscaling from the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`letterbox`: This scales up content uniformly as much as possible'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoomEven`: This scales up content to uniformly to fill the screen, while keeping
    the aspect ratio'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoomStretch`: This scales up content nonuniformly to fill the screen and will
    stretch it vertically or horizontally'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `zoomStretch` value works well with Android device scaling, since many of
    them have different screen resolutions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dynamic content alignment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Content that is dynamically scaled is already centered by default. You may
    find cases where you don''t want the content to be centered. Devices such as the
    iPhone 3G and the Droid have completely different screen resolutions. In order
    for the content displayed on the Droid to be similar to iPhone 3G, the alignment
    needs to be adjusted so that the content fills the entire screen without leaving
    any empty black screen space. The alignment is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xAlign`: This is a string that specifies the alignment in the *x* direction.
    The following values can be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`left`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center` (default)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yAlign`: This is a string that specifies the alignment in the *y* direction.
    The following values can be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center` (default)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bottom`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic image resolution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Corona allows you to swap in higher resolution versions of your images to higher
    resolution devices, without having to change your layout code. This is a case
    to consider if building for multiple devices with different screen resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: An example where you want to display hi-res images is on an iPhone 4 where the
    resolution is 640 x 960 pixels. It is double the resolution of the earlier iOS
    devices, such as iPhone 3GS, which is 320 x 480 pixels. Scaling up the content
    from the iPhone 3GS to fit the iPhone 4 screen works, but the images will not
    be as crisp and will look a little fuzzy on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Images of higher resolution can be swapped in for the iPhone 4 by adding a `@2x`
    suffix to the end of the filename (but before the period and file extension).
    For example, if your image filename is `myImage.png`, then your higher resolution
    filename should be `myImage@2x.png`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `config.lua` file, a table named `imageSuffix` needs to be added for
    the image naming convention and image resolutions to take effect. The `config.lua`
    file resides in your project folder where all your other `.lua` files and image
    files are stored. Look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: When calling your display objects, use `display.newImageRect( [parentGroup,]
    filename [, baseDirectory] w, h)` instead of `display.newImage()`. The target
    height and width need to be set to the dimensions of your base image.
  prefs: []
  type: TYPE_NORMAL
- en: Frame rate control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The frame rate is 30 fps (frames per second) by default. Fps refers to the speed
    at which the image is refreshed in games. Thirty fps is standard in mobile games,
    especially for older devices. You can set it to 60 fps when you add in the fps
    key. Using 60 fps makes your app run smoother. You can easily detect a life-like
    fluidity in the motion when it comes to running animations or collision detections.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – scaling display objects on multiple devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our `Display Objects` project, we left off displaying a background image
    and three similar display objects in the simulator. When running the project on
    different devices, the coordinates and resolution size were most compatible with
    the iPhone only. When building applications for multiple devices across iOS and
    Android platforms, we can configure it using a `config.lua` file that is compiled
    into the project and accessed at runtime. So let's get to it!
  prefs: []
  type: TYPE_NORMAL
- en: 'In your text editor, create a new file and write out the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script as `config.lua` in your `Display Objects` project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Mac users, launch your application in Corona under the iPhone device. Once
    you have done so, under the Corona Simulator menu bar, go to **Window** | **View
    As** | **iPhone 4**. You will notice that the display objects fit perfectly on
    the screen and that there are no empty black spaces showing either.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows users, launch your application in Corona under the Droid device. You
    will notice that all the content is scaled and aligned properly. Under the Corona
    Simulator menu bar, go to **Window** | **View As** | **NexusOne**. Observe the
    similarities in the content placement to that of the Droid. In the following screenshot,
    from left to right, you can see the iPhone 3GS, iPhone 4, Droid, and NexusOne:![Time
    for action – scaling display objects on multiple devices](img/9343OT_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have now learned a way to implement an easy configuration to display your
    content across a variety of devices on iOS and Android. Content scaling features
    are useful for multiscreen development. If you look in the `config.lua` file we
    created, `width = 320` and `height = 480`. This is the resolution size that the
    content is originally authored for. In this case, it is the iPhone 3G. Since we
    used `scale = "letterbox"`, it enabled the content to uniformly scale up as much
    as possible while still showing the entire content on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: We also set `xAlign = "left"` and `yAlign = "top"`. This fills in the empty
    black screen space that shows on the Droid specifically. The content scaling is
    at the center by default, so aligning the content to the left and top of the screen
    will take away the additional screen space.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic resolution images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we touched base with dynamic image resolution. The iOS devices are
    a perfect example for this case. Corona has the capability to use base images
    (for devices on the 3GS and lower) and double-resolution images (for the iPhone
    4 that has a retina display), all in the same project file. Any of your double-resolution
    images can be swapped to your high-end iOS device without having to alter your
    code. This will allow your build to work with older devices and lets you handle
    more complex multiscreen deployment cases. You will notice that dynamic image
    resolution works in conjunction with dynamic content scaling.
  prefs: []
  type: TYPE_NORMAL
- en: Using the line, `display.newImageRect( [parentGroup,] filename [, baseDirectory]
    w, h)`, will call out your dynamic resolution images.
  prefs: []
  type: TYPE_NORMAL
- en: Here, `w` refers to the content *width* of the image and `h` refers to the content
    *height* of the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that the two values represent the base image size, *not* the onscreen
    position of the image. You must define the base size in your code so that Corona
    knows how to render the higher resolution alternative images. The contents of
    your project folder would be set up like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: When creating your double-resolution image, make sure that it is *twice* the
    size of the base image. It's best that you start with the double-resolution image
    when creating your display assets. Corona lets you select your own image-naming
    patterns. The `@2x` convention is one example that can be used, but you have the
    option of naming suffixes to your personal preference. For now, we'll use the
    `@2x` suffix since it distinguishes the double resolution reference. When you
    create your double-resolution image, name it with the `@2x` suffix included. Take
    the same image and resize it to 50 percent of the original size and then use the
    same filename without the `@2x` suffix included.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other examples of naming suffixes can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '@2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '-2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: -two
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As mentioned earlier in the chapter, you have to define your image suffix for
    your double-resolution images in the `imageSuffix` table in your `config.lua`
    file. The content scale you set will allow Corona to determine the ratio between
    the current screen and base content dimensions. The following example uses the
    `@2x` suffix to define double-resolution images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Time for some shapes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another way of creating display objects is using vector objects. You can use
    vector objects to create shapes such as a rectangle, rounded rectangle, and circle
    using the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`display.newRect([parentGroup,] x, y, width, height)`: This creates a rectangle
    using width by height. The `x` and `y` values determine coordinates for the center
    of the rectangle. Local origin is at the center of the rectangle, and the anchor
    point is initialized to this local origin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display.newRoundedRect([parentGroup,] x, y, width, height, cornerRadius)`:
    This creates a rounded rectangle using width by height. The `x` and `y` values
    determine coordinates for the center of the rectangle. The local origin is at
    the center of the rectangle, and the anchor point is initialized to this local
    origin. You can round off the corners using `cornerRadius`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display.newCircle([parentGroup,] xCenter, yCenter, radius)`: This creates
    a circle using the radius centered at `xCenter`, `yCenter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying stroke width, fill color, and stroke color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All vector objects can be outlined using strokes. You can set the stroke width,
    fill color, and stroke color using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.strokeWidth`: This creates the stroke width in pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:setFillColor(red, green, blue, alpha)`: We can use the RGB codes between
    0 and 1\. The `alpha` parameter, which is optional, defaults to 1.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:setStrokeColor(red, green, blue, alpha)`: We can use the RGB codes
    between 0 and 255\. The `alpha` parameter, which is optional, defaults to 1.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of displaying vector objects using strokes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get on output on the simulator similar to the one shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying stroke width, fill color, and stroke color](img/9343OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Text, text, text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [Chapter 1](ch01.html "Chapter 1. Getting Started with Corona SDK"), *Getting
    Started with Corona SDK*, we created the Hello World application using a text
    display object. Let''s go in detail on how text is implemented onscreen:'
  prefs: []
  type: TYPE_NORMAL
- en: The `display.newText( [parentGroup,] text, x, y, font, fontSize)` method creates
    a text object using the `x` and `y` values. There is no text color by default.
    In the `font` parameter, apply any of the font names in the library. The `fontSize`
    parameter displays the size of the text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the following default constants can be used if you don''t want to apply
    a font name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`native.systemFont`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`native.systemFontBold`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying color and string value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The size, color, and text fields can be set or retrieved in text display objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.size`: This is the size of the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:setFillColor(red, green, blue, alpha)`: We can use the RGB codes between
    0 and 1\. The `alpha` parameter, which is optional, defaults to 1.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object.text`: This contains the text of the text object. It allows you to
    update a string value for a test object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are functions?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functions can carry out a procedure or compute and return values. We can make
    a function call as a statement, or we can use it as an expression. You can also
    use object methods as functions. You have learned that functions can be variables.
    A table can use these variables to store them as properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Functions are the most important means of abstraction in Lua. One function
    that we have used many times is `print`. In the following example, the `print`
    function is being told to execute one piece of data—the `"My favorite number is
    8"` string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Another way of saying this is that `print` is being called with one argument.
    The `print` function is only one of the many built-in functions that Lua has,
    but almost any program you write will involve you defining your own functions.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When trying to define a function, you have to give it a name that you can call
    out to when you want to return a value. You then have to create a statement or
    statement block of what the value will output and then apply `end` to your function
    after you have finished defining it. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the function name is `myName`, and it is used to call out what's
    inside the `print("My name is Jane.")` function definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'An extension on defining a function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The new `myName` function has one argument using the `Name` variable. The `"My
    name is "` string is concatenated with `Name` and then a period as the printed
    result. When the function is called, we used three different names as an argument,
    and the result is printed with a new customized name for each line.
  prefs: []
  type: TYPE_NORMAL
- en: More display functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Corona, you can change the appearance of the status bar on your device. This
    is a one-line setting in your code that takes effect once you launch your application.
    You can change the appearance of your status bar using the `display.setStatusBar(mode)`
    method. This hides or changes the appearance of the status bar on iOS devices
    (iPad, iPhone, and iPod Touch) and Android 2.x devices. Android 3.x devices are
    not supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The argument mode should be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`display.HiddenStatusBar`:To hide the status bar, you can use the following
    line at the beginning of your code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the following screenshot, you can see that the status bar is hidden:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![More display functions](img/9343OT_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`display.DefaultStatusBar`: To show the default status bar, you can use the
    following line at the beginning of your code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code will display the default status bar, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![More display functions](img/9343OT_02_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`display.TranslucentStatusBar`: To show the translucent status bar, you can
    use the following line at the beginning of your code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The translucent status bar will look like the one shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![More display functions](img/9343OT_02_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`display.DarkStatusBar`: To show the dark status bar, you can use the following
    line at the beginning of your code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot is of the dark status bar:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![More display functions](img/9343OT_02_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Content size properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you want to obtain the display information on your device, you can use
    the content size properties to return the values. These properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`display.contentWidth`: This returns the original width of the content in pixels.
    This will default to the screen width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display.contentHeight`: This returns the original height of the content in
    pixels. This will default to the screen height.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display.viewableContentWidth`: This is a read-only property that contains
    the width of the viewable screen area in pixels, within the coordinate system
    of the original content. Accessing this property will display how the content
    is viewed, whether you''re in the portrait or landscape mode. Here is an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`display.viewableContentHeight`: This is a read-only property that contains
    the height of the viewable screen area in pixels, within the coordinate system
    of the original content. Accessing this property will display how the content
    is viewed, whether you''re in the portrait or landscape mode. Here is an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`display.statusBarHeight`: This is a read-only property that represents the
    height of the status bar in pixels (only valid on iOS devices). Here is an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Optimize your workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have touched on the vital basics of programming in Lua and the terminology
    used in Corona SDK. Once you start developing interactive applications to sell
    in the App Store or Android market, you need to be aware of your design choices
    and how they affect the performance of your application. This means taking into
    consideration how much memory your mobile device is using to process the application.
    Here are some things to look for if you're just starting out with Corona SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Use memory efficiently
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some of our earlier examples, we used global variables in our code. Cases
    like those are an exception since the examples did not contain a high volume of
    functions, loops to call out to, or display objects. Once you start building a
    game that is heavily involved with function calls and numerous display objects,
    the local variables will increase performance within your application and be placed
    on the stack so that Lua can interface them faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will cause memory leaks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code removes `myImage` from the display hierarchy once it is touched.
    The only problem is that the memory used by `myImage` leaks because the `myImage`
    variable still refers to it. Since `myImage` is a global variable, the display
    object it references will not be freed even though `myImage` does not display
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike global variables, localizing variables helps speed up the look-up process
    for your display object. It also only exists within the block or chunk of code
    that it''s defined in. Using a local variable in the following code will remove
    the object completely and free memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Optimize your display images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important to optimize your image file size as much as you can. Using full-screen
    images can impact the performance of your application. They require more time
    to load on a device and consume a lot of texture memory. When a lot of memory
    is consumed in an application, in most cases it'll be forced to quit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The iOS devices vary in the size of their available memory, depending on which
    one you have out of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: iPhone 3GS, iPad, and iTouch 3G/4G of 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone 4/4S, iPad 2, iPad Mini, and iTouch 5G of 512 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone 5/5S/6, 6 Plus, iPad 3G, and iPad 4G of 1 GB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, texture memory on the iPhone 3GS should be kept under 25 MB before
    performance issues start occurring by slowing down your app or even forcing it
    to quit. An iPad 2 would have no problem going farther down that boundary since
    it has more memory available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to [http://docs.coronalabs.com/api/event/memoryWarning/index.html](http://docs.coronalabs.com/api/event/memoryWarning/index.html)
    to apply memory warnings for iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: For Android devices, there is around a 24 MB memory limit. So, it's important
    to be aware of how many display objects you have in your scene and how to manage
    them when they are not needed in your app any more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases when you no longer need an image to be displayed on screen, use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can also use this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to remove an image from the scene completely throughout the lifetime
    of your app, include the following line after your `image.parent:remove( image
    )` or `image:removeSelf()` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Keeping memory usage low within your application will prevent crashes and improve
    performance. For more information on optimization, go to [http://developer.coronalabs.com/content/performance-and-optimization](http://developer.coronalabs.com/content/performance-and-optimization).
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – basics of Lua
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which of the following are values?
  prefs: []
  type: TYPE_NORMAL
- en: Numbers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: nil
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which relational operator is false?
  prefs: []
  type: TYPE_NORMAL
- en: '`print(0 == 0)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`print(3 >= 2)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`print(2 ~= 2)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`print(0 ~= 2)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What is the correct way to scale an object in the *x* direction?
  prefs: []
  type: TYPE_NORMAL
- en: '`object.scaleX`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`object.xscale`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`object.Xscale`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`object.xScale`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed parts of Lua programming that will send you on your way
    to start creating your own apps in Corona. As you continue working with Lua, you'll
    start understanding the terminology better. Eventually, you'll find new programming
    solutions that will benefit your development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some skills you learned so far include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating variables and assigning values to them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing expressions using operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Corona terminal to output or print results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using tables to structure lists, arrays, sets, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding display objects in the simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your application build to work on different mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing dynamic resolution images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating functions to run a block of code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section was definitely a lot to take in. There is still a lot of information
    on Lua that we didn't get to touch base on, but you have learned enough to get
    you started. For more information on programming in Lua, you can refer to [http://www.lua.org/pil/index.html](http://www.lua.org/pil/index.html)
    or the resources section on the Corona website at [http://www.coronalabs.com/resources/](http://www.coronalabs.com/resources/).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll start making our very first game called Breakout!
    You will get some hands-on experience creating a game framework in Corona and
    applying all the necessary assets to develop a mobile game. You'll be surprised
    how fast and simple it is to create one.
  prefs: []
  type: TYPE_NORMAL
