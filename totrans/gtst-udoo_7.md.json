["```kt\n    android:layout_width=\"0dp\"\n    android:layout_weight=\"1\"\n\n    ```", "```kt\n    android:layout_width=\"0dp\"\n    android:layout_weight=\"1\"\n\n    ```", "```kt\n    <TextView\n      android:id=\"@+id/current_preset\"\n      android:text=\"NO PRESET ACTIVATED\"\n      android:gravity=\"center\"\n      android:textColor=\"@color/coral_red\"\n      android:textSize=\"@dimen/text_title\"\n      android:layout_width=\"0dp\"\n      android:layout_weight=\"2\"\n      android:layout_height=\"match_parent\" />\n    ```", "```kt\n    private TextView mCurrentPreset;\n    private TextView mTemperature;\n    private TextView mStatus;\n    ```", "```kt\n    setContentView(R.layout.activity_overview);\n    mCurrentPreset = (TextView) findViewById(R.id.current_preset);\n\n    ```", "```kt\n    private static final String SHARED_PREF = \"__CHRONOTHERM__\";\n    private static final String CURRENT_PRESET = \"__CURRENT__\";\n    private static final String NO_PRESET = \"NO PRESET ACTIVATED\";\n    ```", "```kt\n    public static void set(Context ctx, String name, ArrayList<Integer> values) {\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor = sharedPref.edit();\n      String serializedValues = TextUtils.join(\",\", values);\n      editor.putString(name, serializedValues);\n      editor.apply();\n    }\n    ```", "```kt\n    public static ArrayList<Integer> get(Context ctx, String name) {\n      ArrayList<Integer> values = new ArrayList<Integer>();\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);â€©  String serializedValues = sharedPref.getString(name, null);\n      if (serializedValues != null) {\n        for (String progress : serializedValues.split(\",\")) {\n          values.add(Integer.valueOf(progress));\n        }\n      }\n      return values;\n    }\n    ```", "```kt\n    public static String getCurrent(Context ctx) {\n      String currentPreset;\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      currentPreset = sharedPref.getString(CURRENT_PRESET, NO_PRESET);\n      return currentPreset;\n    }\n    ```", "```kt\n    public static void setCurrent(Context ctx, String name) {\n      SharedPreferences sharedPref = ctx.getSharedPreferences(SHARED_PREF, Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor = sharedPref.edit();\n      editor.putString(CURRENT_PRESET, name);\n      editor.apply();\n    }\n    ```", "```kt\nprivate void readPreferences() {\n  String activatedPreset = Preset.getCurrent(this);\n  mCurrentValues = Preset.get(this, activatedPreset);\n  for (int i = 0; i < mCurrentValues.size(); i++) {\n    mBars[i].setProgress(mCurrentValues.get(i));\n  }\n  mCurrentPreset.setText(activatedPreset.toUpperCase());\n}\n```", "```kt\n    private TemperatureBar[] mBars;\n    private String mEditingPreset;\n\n    ```", "```kt\n    private boolean readPreferences(String presetName) {\n      boolean found;\n      ArrayList<Integer> values;\n      values = Preset.get(this, presetName);\n      found = values.size() > 0;\n      for (int i = 0; i < values.size(); i ++) {\n        mBars[i].setProgress(values.get(i));\n      }\n      return found;\n    }\n    ```", "```kt\n    public void savePreferences(View v) {\n      ArrayList<Integer> values = new ArrayList<Integer>();\n      for (int i = 0; i < mBars.length; i++) {\n        values.add(mBars[i].getProgress());\n      }\n      Preset.set(this, mEditingPreset, values);\n      this.finish();\n    }\n    ```", "```kt\nprivate boolean isBelowSetpoint(float temperature) {\n  int currentHour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);\n  String currentPreset = Preset.getCurrent(mContext);\n  ArrayList<Integer> currentValues = Preset.get(mContext,   currentPreset);\n  if (currentValues.size() > 0) {\n    return temperature < currentValues.get(currentHour);\n  }\n  else {\n    return false;\n  }\n}\n```", "```kt\n    public interface IRecognitionListener {\n      void onRecognitionDone(int requestCode, String bestMatch);\n    }\n    ```", "```kt\n    public abstract class RecognizerActivity extends ActionBarActivity implements IRecognitionListener {\n    }\n    ```", "```kt\n    public void startRecognition(String what, int requestCode) {\n      Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n      intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, \"en-US\");\n      intent.putExtra(RecognizerIntent.EXTRA_PROMPT, what);\n      startActivityForResult(intent, requestCode);\n    }\n    ```", "```kt\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n      if (resultCode == RESULT_OK) {\n        ArrayList<String> matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n        this.onRecognitionDone(requestCode, matches.get(0));\n      }\n    }\n    ```", "```kt\n    public class Settings extends RecognizerActivity {\n      //...\n    }\n    ```", "```kt\n    public class Settings extends RecognizerActivity {\n      private static final int VOICE_SETTINGS = 1001;\n      private TemperatureBar[] mBars;\n      // ...\n    }\n    ```", "```kt\n    mBars = TemperatureWidget.addTo(this, container, true);\n    startRecognition(\"Choose the preset you want to edit\", VOICE_SETTINGS);\n\n    ```", "```kt\n    @Override\n    public void onRecognitionDone(int requestCode, String bestMatch) {\n      if (requestCode == VOICE_SETTINGS) {\n        boolean result = readPreferences(bestMatch);\n        mEditingPreset = bestMatch;\n      }\n    }\n    ```", "```kt\n    public class Overview extends RecognizerActivity implements OnDataChangeListener {\n      //...\n    }\n    ```", "```kt\n    public class Overview extends RecognizerActivity implements OnDataChangeListener {\n      public static final int VOICE_PRESET = 1000;\n      private AdkManager mAdkManager;\n      //...\n    }\n    ```", "```kt\n    public void changePreset(View v) {\n      startRecognition(\"Choose the current preset\", VOICE_PRESET);\n    }\n    ```", "```kt\n    @Override\n    public void onRecognitionDone(int requestCode, String bestMatch) {\n      if (requestCode == VOICE_PRESET) {\n        setPreset(bestMatch);\n      }\n    }\n    ```", "```kt\n    private void setPreset(String name) {\n      ArrayList<Integer> values = Preset.get(this, name);\n      if (values.size() > 0) {\n        Preset.setCurrent(this, name);\n        readPreferences();\n      }\n    }\n    ```", "```kt\n    <TextView\n      android:id=\"@+id/current_preset\"\n      android:clickable=\"true\"\n      android:onClick=\"changePreset\"\n      android:text=\"NO PRESET ACTIVATED\"\n      android:gravity=\"center\"\n      android:textColor=\"@color/coral_red\"\n      android:textSize=\"@dimen/text_title\"\n      android:layout_width=\"0dp\"\n      android:layout_weight=\"2\"\n      android:layout_height=\"match_parent\" />\n    ```", "```kt\n    public class VoiceManager implements TextToSpeech.OnInitListener {\n      private TextToSpeech mTts;\n      //...\n    }\n    ```", "```kt\n    @Override\n    public void onInit(int status) {\n      if (status == TextToSpeech.SUCCESS) {\n        mTts.setLanguage(Locale.US); \n      }\n    }\n    ```", "```kt\n    public VoiceManager(Context ctx) {\n      mTts = new TextToSpeech(ctx, this);\n    }\n    ```", "```kt\n    public void speak(String textToSay) {\n      mTts.speak(textToSay, TextToSpeech.QUEUE_ADD, null);\n    }\n    ```", "```kt\n    private DataReader mReader;\n    private VoiceManager mVoice;\n\n    ```", "```kt\n    mReader = new DataReader(mAdkManager, this, this);\n    mVoice = new VoiceManager(this);\n\n    ```", "```kt\n    private void setPreset(String name) {\n      ArrayList<Integer> values = Preset.get(this, name);\n      String textToSay;\n      if (values.size() > 0) {\n        Preset.setCurrent(this, name);\n        readPreferences();\n        textToSay = \"Activated preset \" + name;\n      }\n      else {\n        textToSay = \"Preset \" + name + \" not found!\";\n      }\n      mVoice.speak(textToSay);\n    }\n    ```", "```kt\n    private String mEditingPreset;\n    private VoiceManager mVoice;\n\n    ```", "```kt\n    mVoice = new VoiceManager(this);\n    startRecognition(\"Choose the preset you want to edit\", VOICE_SETTINGS);\n    ```", "```kt\n    @Override\n    public void onRecognitionDone(int requestCode, String bestMatch) {\n      if (requestCode == VOICE_SETTINGS) {\n        String textToSay;\n        boolean result = readPreferences(bestMatch);\n        if (result) {\n          textToSay = \"Editing preset \" + bestMatch;\n        }\n     else {\n          textToSay = \"Creating preset \" + bestMatch;\n        }\n        mEditingPreset = bestMatch;\n        mVoice.speak(textToSay);\n      }\n    }\n    ```"]