["```kt\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Play Sound 1\"\n        android:id=\"@+id/button1\"\n        android:layout_centerInParent=\"true\"\n        android:onClick=\"playSound1\"/>\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Play Sound 2\"\n        android:id=\"@+id/button2\"\n        android:layout_below=\"@+id/button1\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"playSound2\"/>\n    ```", "```kt\n    HashMap<Integer, Integer> mHashMap= null;\n    SoundPool mSoundPool;\n    ```", "```kt\n    final Button button1=(Button)findViewById(R.id.button1);\n    button1.setEnabled(false);\n    final Button button2=(Button)findViewById(R.id.button2);\n    button2.setEnabled(false);\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        createSoundPoolNew();\n    }else{\n        createSoundPooolOld();\n    }\n    mSoundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {\n        @Override\n        public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {\n            button1.setEnabled(true);\n            button2.setEnabled(true);\n        }\n    });\n    mHashMap = new HashMap<>();\n    mHashMap.put(1, mSoundPool.load(this, R.raw.sound_1, 1));\n    mHashMap.put(2, mSoundPool.load(this, R.raw.sound_2, 1));\n    ```", "```kt\n    @TargetApi(Build.VERSION_CODES.LOLLIPOP)\n    private void createSoundPoolNew() {\n        AudioAttributes audioAttributes = new AudioAttributes.Builder()\n        .setUsage(AudioAttributes.USAGE_MEDIA)\n        .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n        .build();\n        mSoundPool = new SoundPool.Builder()\n                .setAudioAttributes(audioAttributes)\n                .setMaxStreams(2)\n                .build();\n    }\n    ```", "```kt\n    @SuppressWarnings(\"deprecation\")\n    private void createSoundPooolOld(){\n        mSoundPool = new SoundPool(2, AudioManager.STREAM_MUSIC, 0);\n    }\n    ```", "```kt\n    public void playSound1(View view){\n        mSoundPool.play(mHashMap.get(1), 0.1f, 0.1f, 1, 0, 1.0f);\n    }\n\n    public void playSound2(View view){\n        mSoundPool.play(mHashMap.get(2), 0.9f, 0.9f, 1, 1, 1.0f);\n    }\n    ```", "```kt\n    protected void onStop() {\n        super.onStop();\n        mSoundPool.release();\n    }\n    ```", "```kt\n@TargetApi(Build.VERSION_CODES.LOLLIPOP)\n```", "```kt\n@SuppressWarnings(\"deprecation\")\n```", "```kt\nAudioManager audioManager =(AudioManager) \nthis.getSystemService(Context.AUDIO_SERVICE);\naudioManager.playSoundEffect(SoundEffectConstants.CLICK);\n```", "```kt\n    <Button\n        android:layout_width=\"100dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Play\"\n        android:id=\"@+id/buttonPlay\"\n        android:layout_above=\"@+id/buttonPause\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"buttonPlay\" />\n    <Button\n        android:layout_width=\"100dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Pause\"\n        android:id=\"@+id/buttonPause\"\n        android:layout_centerInParent=\"true\"\n        android:onClick=\"buttonPause\"/>\n    <Button\n        android:layout_width=\"100dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Stop\"\n        android:id=\"@+id/buttonStop\"\n        android:layout_below=\"@+id/buttonPause\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"buttonStop\"/>\n    ```", "```kt\n    MediaPlayer mMediaPlayer;\n    ```", "```kt\n    public void buttonPlay(View view){\n        if (mMediaPlayer==null) {\n            mMediaPlayer = MediaPlayer.create(this, R.raw.sound_1);\n            mMediaPlayer.setLooping(true);\n            mMediaPlayer.start();\n        } else  {\n            mMediaPlayer.start();\n        }\n    }\n    ```", "```kt\n    public void buttonPause(View view){\n        if (mMediaPlayer!=null && mMediaPlayer.isPlaying()) {\n            mMediaPlayer.pause();\n        }\n    }\n    ```", "```kt\n    public void buttonStop(View view){\n        if (mMediaPlayer!=null) {\n            mMediaPlayer.stop();\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n        }\n    }\n    ```", "```kt\n    protected void onStop() {\n        super.onStop();\n        if (mMediaPlayer!=null) {\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n        }\n    }\n    ```", "```kt\nmMediaPlayer = new MediaPlayer();\nmMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n    @Override\n    public void onPrepared(MediaPlayer mp) {\n        mMediaPlayer.start();\n    }\n});\ntry {\n    mMediaPlayer.setDataSource(*//*URI, URL or path here*//*));\n} catch (IOException e) {\n    e.printStackTrace();\n}\nmMediaPlayer.prepareAsync();\n```", "```kt\nsetVolumeControlStream(AudioManager.STREAM_MUSIC);\n```", "```kt\n    MediaSessionCompat.Callback mMediaSessionCallback = new MediaSessionCompat.Callback() {\n        @Override\n        public void onPlay() {\n            super.onPlay();\n            Toast.makeText(MainActivity.this, \"onPlay()\", Toast.LENGTH_SHORT).show();\n        }\n        @Override\n        public void onPause() {\n            super.onPause();\n            Toast.makeText(MainActivity.this, \"onPause()\", Toast.LENGTH_SHORT).show();\n        }\n        @Override\n        public void onSkipToNext() {\n            super.onSkipToNext();\n            Toast.makeText(MainActivity.this, \"onSkipToNext()\", Toast.LENGTH_SHORT).show();\n        }\n        @Override\n        public void onSkipToPrevious() {\n            super.onSkipToPrevious();\n            Toast.makeText(MainActivity.this, \"onSkipToPrevious()\", Toast.LENGTH_SHORT).show();\n        }\n    };\n    ```", "```kt\n    MediaSessionCompat mediaSession = new MediaSessionCompat(this, getApplication().getPackageName());\n    mediaSession.setCallback(mMediaSessionCallback);\n    mediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS);\n    mediaSession.setActive(true);\n    PlaybackStateCompat state = new PlaybackStateCompat.Builder()\n      .setActions(\n        PlaybackStateCompat.ACTION_PLAY | PlaybackStateCompat.ACTION_PLAY_PAUSE | PlaybackStateCompat.ACTION_PAUSE | PlaybackStateCompat.ACTION_SKIP_TO_NEXT | PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS).build();\n    mediaSession.setPlaybackState(state);\n    ```", "```kt\nAudioManager audioManager =(AudioManager) this.getSystemService(Context.AUDIO_SERVICE);\nif (audioManager.isBluetoothA2dpOn()) {\n    // Adjust output for Bluetooth.\n} else if (audioManager.isSpeakerphoneOn()) {\n    // Adjust output for Speakerphone.\n} else if (audioManager.isWiredHeadsetOn()) {\n    //Only checks if a wired headset is plugged in\n    //May not be the audio output\n} else {\n    // Regular speakers?\n}\n```", "```kt\n    <uses-permission\n    android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n    ```", "```kt\n    <ImageView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/imageView\"\n        android:src=\"img/ic_launcher\"\n        android:layout_centerInParent=\"true\"/>\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Take Picture\"\n        android:id=\"@+id/button\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"takePicture\"/>\n    ```", "```kt\n    final int PHOTO_RESULT=1;\n    private Uri mLastPhotoURI=null;\n    ```", "```kt\n    private Uri createFileURI() {\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(System.currentTimeMillis());\n        String fileName = \"PHOTO_\" + timeStamp + \".jpg\";\n        return Uri.fromFile(new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),fileName));\n    }\n    ```", "```kt\n    public void takePicture(View view) {\n        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_ CAPTURE);\n        if (takePictureIntent.resolveActivity(getPackageManager()) != \n            null) {\n            mLastPhotoURI = createFileURI();\n            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mLastPhotoURI);\n             startActivityForResult(takePictureIntent, PHOTO_RESULT);\n        }\n    }\n    ```", "```kt\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == PHOTO_RESULT && resultCode == RESULT_OK ) {\n            mImageView.setImageBitmap(BitmapFactory.decodeFile(mLastPhotoURI.getPath()));\n        }\n    }\n    ```", "```kt\nif (data != null) {\n    imageView\n.setImageBitmap((Bitmap) data.getExtras().get(\"data\"));\n}\n```", "```kt\nif (data != null) {\n    try {\n        imageView.setImageBitmap(\n            MediaStore.Images.Media. getBitmap(getContentResolver(),\n            Uri.parse(data.toUri(Intent.URI_ALLOW_UNSAFE))));\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```", "```kt\nIntent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n```", "```kt\nUri videoUri = intent.getData();\n```", "```kt\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n    <uses-permission\n    android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    ```", "```kt\n    <TextureView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/textureView\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_centerHorizontal=\"true\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Take Picture\"\n        android:id=\"@+id/button\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"takePicture\"/>\n    ```", "```kt\n    public class MainActivity extends AppCompatActivity\n            implements TextureView.SurfaceTextureListener {\n    ```", "```kt\n    @Deprecated\n    private Camera mCamera;\n    private TextureView mTextureView;\n    ```", "```kt\n    Camera.PictureCallback pictureCallback = new Camera.PictureCallback() {\n        @Override\n        public void onPictureTaken(byte[] data, Camera camera) {\n            try {\n                String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(System.currentTimeMillis());\n                String fileName = \"PHOTO_\" + timeStamp + \".jpg\";\n                File pictureFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),fileName);\n\n                FileOutputStream fileOutputStream =new FileOutputStream(pictureFile.getPath());\n                fileOutputStream.write(data);\n                fileOutputStream.close();\n                Toast.makeText(MainActivity.this, \"Picture Taken\", Toast.LENGTH_SHORT).show();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    };\n    ```", "```kt\n    mTextureView = (TextureView)findViewById(R.id.textureView);\n    mTextureView.setSurfaceTextureListener(this);\n    ```", "```kt\n    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n        mCamera = Camera.open();\n        if (mCamera!=null) {\n            try {\n                mCamera.setPreviewTexture(surface);\n                mCamera.startPreview();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n        if (mCamera!=null) {\n            mCamera.stopPreview();\n            mCamera.release();\n        }\n        return true;\n    }\n    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n        // Unused\n    }\n    public void onSurfaceTextureUpdated(SurfaceTexture surface) {\n        // Unused\n    }\n    ```", "```kt\n    public void takePicture(View view) {\n        if (mCamera!=null) {\n            mCamera.takePicture(null, null, pictureCallback);\n        }\n    }\n    ```", "```kt\n'android.hardware.Camera' is deprecated\n```", "```kt\n@SuppressWarnings(\"deprecation\")\n```", "```kt\nmTextureView.setSurfaceTextureListener(this);\n```", "```kt\nmCamera.setPreviewTexture(surface);\nmCamera.startPreview();\n```", "```kt\nmCamera.takePicture(null, null, pictureCallback);\n```", "```kt\nCamera.Parameters parameters = mCamera.getParameters();\nparameters.setPreviewSize(mPreviewSize.width, \nmPreviewSize.height);\nmCamera.setParameters(parameters);\n```", "```kt\n    <uses-permission android:name=\"android.permission.CAMERA\" />\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    ```", "```kt\n    <TextureView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/textureView\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_centerHorizontal=\"true\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Take Picture\"\n        android:id=\"@+id/button\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"takePicture\"/>\n    ```", "```kt\n    private CameraDevice mCameraDevice = null;\n    private CaptureRequest.Builder mCaptureRequestBuilder = null;\n    private CameraCaptureSession mCameraCaptureSession  = null;\n    private TextureView mTextureView = null;\n    private Size mPreviewSize = null;\n    ```", "```kt\n    static class CompareSizesByArea implements Comparator<Size> {\n        @Override\n        public int compare(Size lhs, Size rhs) {\n            return Long.signum((long) lhs.getWidth() * lhs.getHeight() - (long) rhs.getWidth() * rhs.getHeight());\n        }\n    }\n    ```", "```kt\n    private CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {\n        @Override\n        public void onOpened(CameraDevice camera) {\n            mCameraDevice = camera;\n            SurfaceTexture texture = mTextureView.getSurfaceTexture();\n            if (texture == null) {\n                return;\n            }\n            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());\n            Surface surface = new Surface(texture);\n            try {\n                mCaptureRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\n            } catch (CameraAccessException e){\n                e.printStackTrace();\n            }\n            mCaptureRequestBuilder.addTarget(surface);\n            try {\n                mCameraDevice.createCaptureSession(Arrays.asList(surface), mPreviewStateCallback, null);\n            } catch (CameraAccessException e) {\n                e.printStackTrace();\n            }\n        }\n        @Override\n        public void onError(CameraDevice camera, int error) {}\n        @Override\n        public void onDisconnected(CameraDevice camera) {}\n    };\n    ```", "```kt\n    private TextureView.SurfaceTextureListener mSurfaceTextureListener =     new TextureView.SurfaceTextureListener() {\n        @Override\n        public void onSurfaceTextureUpdated(SurfaceTexture surface) {}\n        @Override\n        public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {}\n        @Override\n        public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n                return false;\n        }\n        @Override\n        public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n                openCamera();\n        }\n    };\n    ```", "```kt\n    private CameraCaptureSession.StateCallback mPreviewStateCallback = new CameraCaptureSession.StateCallback() {\n        @Override\n        public void onConfigured(CameraCaptureSession session) {\n            startPreview(session);\n        }\n\n        @Override\n        public void onConfigureFailed(CameraCaptureSession session) {}\n    };\n    ```", "```kt\n    mTextureView = (TextureView) findViewById(R.id.textureView);\n    mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);\n    ```", "```kt\n    @Override\n    protected void onPause() {\n        super.onPause();\n        if (mCameraDevice != null) {\n            mCameraDevice.close();\n            mCameraDevice = null;\n        }\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (mTextureView.isAvailable()) {\n            openCamera();\n        } else {\n            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);\n        }\n    }\n    ```", "```kt\n    private void openCamera() {\n        CameraManager manager = (CameraManager) getSystemService(CAMERA_SERVICE);\n        try{\n            String cameraId = manager.getCameraIdList()[0];\n            CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);\n            StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP); \n            mPreviewSize = map.getOutputSizes(SurfaceTexture.class) [0];\n            manager.openCamera(cameraId, mStateCallback, null);\n        } catch(CameraAccessException e) {\n            e.printStackTrace();\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        }\n    }\n    ```", "```kt\n    private void startPreview(CameraCaptureSession session) { \n        mCameraCaptureSession = session; \n        mCaptureRequestBuilder.set(CaptureRequest.CONTROL_MODE,CameraMetadata.CONTROL_MODE_AUTO); \n        HandlerThread backgroundThread = new HandlerThread(\"CameraPreview\"); \n        backgroundThread.start();\n        Handler backgroundHandler = new Handler(backgroundThread. getLooper());\n        try {\n            mCameraCaptureSession.setRepeatingRequest(mCaptureRequestBuilder.build(), null, backgroundHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n    ```", "```kt\n    private File getPictureFile() {\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\"). format(System.currentTimeMillis());\n        String fileName = \"PHOTO_\" + timeStamp + \".jpg\";\n        return new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),fileName);\n    }\n    ```", "```kt\n    protected void takePicture(View view) {\n        if (null == mCameraDevice) {\n            return;\n        }\n        CameraManager manager = (CameraManager)\n        getSystemService(Context.CAMERA_SERVICE);\n        try {\n            CameraCharacteristics characteristics = manager.getCameraCharacteristics(mCameraDevice.getId());\n            StreamConfigurationMap configurationMap = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n            if (configurationMap == null) return;\n            Size largest = Collections.max(\n                Arrays.asList(configurationMap.getOutputSizes(ImageFormat.JPEG)),\n                new CompareSizesByArea());\n            ImageReader reader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(), ImageFormat.JPEG, 1);\n            List < Surface > outputSurfaces = new ArrayList < Surface > (2);\n            outputSurfaces.add(reader.getSurface());\n            outputSurfaces.add(new Surface(mTextureView.getSurfaceTexture()));\n            final CaptureRequest.Builder captureBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_ CAPTURE);\n            captureBuilder.addTarget(reader.getSurface());\n            captureBuilder.set(CaptureRequest.CONTROL_MODE,\n                CameraMetadata.CONTROL_MODE_AUTO);\n            ImageReader.OnImageAvailableListener readerListener = new ImageReader.OnImageAvailableListener() {\n                @Override\n                public void onImageAvailable(ImageReader reader) {\n                    Image image = null;\n                    try {\n                        image = reader.acquireLatestImage();\n                        ByteBuffer buffer = image.getPlanes()[0].getBuffer();\n                        byte[] bytes = new byte[buffer.capacity()];\n                        buffer.get(bytes);\n                        OutputStream output = new FileOutputStream( get PictureFile());\n                        output.write(bytes);\n                        output.close();\n                    } catch (FileNotFoundException e) {\n                        e.printStackTrace();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    } finally {\n                        if (image != null) {\n                            image.close();\n                        }\n                    }\n                }\n            };\n            HandlerThread thread = new HandlerThread(\"CameraPicture\");\n            thread.start();\n            final Handler backgroudHandler = new Handler(thread.getLooper());\n            reader.setOnImageAvailableListener(readerListener, backgroudHandler);\n            final CameraCaptureSession.CaptureCallback captureCallback = new CameraCaptureSession.CaptureCallback() {\n                @Override\n                public void onCaptureCompleted(\n                CameraCaptureSession session, CaptureRequest request, TotalCaptureResult result) {\n                        super.onCaptureCompleted(session, request, result);\n                        Toast.makeText(MainActivity.this, \"Picture Saved\", Toast.LENGTH_SHORT).show();\n                        startPreview(session);\n                }\n            };\n            mCameraDevice.createCaptureSession(outputSurfaces, new CameraCaptureSession.StateCallback() {\n                @Override\n                public vod onConfigured(CameraCaptureSession session) {\n                    try {\n                        session.capture(captureBuilder.build(), captureCallback, backgroudHandler);\n                    } catch (CameraAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n                @Override\n                public void onConfigureFailed(CameraCaptureSession session) { }\n            }, backgroudHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n    ```"]