- en: Chapter 5. Animating Our Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 动画我们的游戏
- en: '*We''re off to a great start in our mobile game development journey. We have
    already gone through a great deal of programming, from game logic to displaying
    objects on screen. One of the most powerful things about the Corona SDK is that
    any display object can be animated. This is a testament to the flexible graphics
    model that Corona offers.*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在我们移动游戏开发的旅程中，我们已经开始了很好的起步。我们已经经历了大量的编程，从游戏逻辑到在屏幕上显示对象。Corona SDK 最强大的功能之一就是任何显示对象都可以被动画化。这是对
    Corona 提供的灵活图形模型的证明。*'
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Animation adds a lot of character to the user experience in a game. This is
    accomplished by generating a sequence of frames that evolve smoothly from frame
    to frame. We''ll be learning this skill and applying it to the new game that we''re
    going to create.*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*动画为游戏中的用户体验增添了大量的角色。这是通过生成一系列帧来实现的，这些帧从一帧平滑地演变到下一帧。我们将学习这项技能并将其应用于将要创建的新游戏。*'
- en: 'In this chapter, we will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Work with motion and transitions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动作和过渡进行操作
- en: Animate with image sheets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图像表进行动画
- en: Create a game loop for display objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为显示对象创建一个游戏循环
- en: Build our next game framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建我们的下一个游戏框架
- en: Let's animate!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始动画吧！
- en: Panda Star Catcher
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熊猫星星捕手
- en: This section involves creating our second game called Panda Star Catcher. The
    main character is a panda named Ling Ling, who needs to be launched toward the
    skies and catch as many stars as possible before the timer runs out. The panda
    will be animated and have separate movements for every course of action that is
    applied, such as during the setup before launch and while it's in the air. The
    slingshot mechanics will also be applied to launch Ling Ling into the air. You
    might have seen similar features in games such as *Angry Birds* and *Crush the
    Castle*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将创建我们的第二个游戏，名为熊猫星星捕手。主要角色是一只名叫玲玲的熊猫，它需要被发射到空中，并在计时器耗尽之前捕捉尽可能多的星星。熊猫将会有动画效果，每个行动过程都有不同的动作，例如发射前的设置和空中的动作。还将应用弹弓机制将玲玲发射到空中。你可能已经在如*愤怒的小鸟*和*城堡破坏者*之类的游戏中见过类似的功能。
- en: Let's get everything moving
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们来让一切动起来
- en: We have introduced transitions in [Chapter 3](ch03.html "Chapter 3. Building
    Our First Game – Breakout"), *Building Our First Game – Breakout*, and briefly
    touched base with it. Let's go into more detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章. 创建我们的第一个游戏 - 破坏者")中介绍了过渡，并简要地接触了它。让我们更详细地了解。
- en: Transitions
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡效果
- en: The transition library allows you to create animations with only a single line
    of code by allowing you to tween one or more properties of a display object. We
    have discussed the basics of transitions back in [Chapter 3](ch03.html "Chapter 3. Building
    Our First Game – Breakout"), *Building Our First Game – Breakout*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡库允许你通过一行代码创建动画，通过允许你补间显示对象的一个或多个属性。我们在[第3章](ch03.html "第3章. 创建我们的第一个游戏 - 破坏者")中讨论了过渡的基础，*创建我们的第一个游戏
    - 破坏者*。
- en: This can be done through the `transition.to` method, which takes a display object
    and a table that contains the control parameters. The control parameters specify
    the duration of the animation and the final values of properties for the display
    object. The intermediate values for a property are determined by an optional easing
    function, which is also specified as a control parameter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过`transition.to`方法实现，它接收一个显示对象和一个包含控制参数的表。控制参数指定动画的持续时间以及显示对象的属性的最终值。属性的中间值由可选的缓动函数确定，该函数也作为控制参数指定。
- en: The `transition.to()` method animates a display object's properties over time,
    using the "easing" algorithm.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition.to()` 方法使用“缓动”算法，随时间动画显示对象的属性。'
- en: The syntax is `handle = transition.to( target, params )`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是 `handle = transition.to( target, params )`。
- en: 'The return function is an object. The parameters are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 返回函数是一个对象。参数如下：
- en: '`target`: This is an object that will be the target of the transition. This
    includes display objects.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`：这是一个将成为过渡目标的对象。这包括显示对象。'
- en: '`params`: This is a table that specifies the properties of the display object,
    which will be animated, and one or more of the following optional non-animated
    properties:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params`：这是一个指定要动画显示对象的属性的表，以及以下一个或多个可选的非动画属性：'
- en: '`params.time`: This specifies the duration of the transition in milliseconds.
    By default, the duration is 500 ms (0.5 seconds).'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.time`：这指定了过渡的持续时间（以毫秒为单位）。默认情况下，持续时间为500毫秒（0.5秒）。'
- en: '`params.transition`: By default, this is `easing.linear`.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params.delay`: This specifies the delay in milliseconds (none by default)
    before the tween begins.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params.delta`: This is a Boolean that specifies whether non-control parameters
    are interpreted as final ending values or as changes in value. The default is
    `nil`, meaning false.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params.onStart`: This is a function or a table listener called before the
    tween begins.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params.onComplete`: This is a function or a table listener called after the
    tween completes.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Easing
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easing library is a collection of interpolation functions used by the transition
    library. One example is opening a drawer. The first movement at first is fast
    and then a slow precise movement before it stops. The following are some easing
    examples:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.linear(t, tMax, start, delta)`: This defines a constant motion with
    no acceleration'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing.inQuad(t, tMax, start, delta)`: This performs a quadratic interpolation
    of animated property values in a transition'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing.outQuad(t, tMax, start, delta)`: This starts the motion quickly and
    then decelerates to zero velocity as it executes'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing.inOutQuad(t, tMax, start, delta)`: This starts the animation from a
    zero velocity, accelerates, and then decelerates to zero velocity'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing.inExpo(t, tMax, start, delta)`: This starts the motion from zero velocity
    and then accelerates as it executes'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing.outExpo(t, tMax, start, delta)`: This starts the motion quickly and
    then decelerates to zero velocity as it executes'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing.inOutExpo(t, tMax, start, delta)`: This starts the motion from zero
    velocity, accelerates, and then decelerates to zero velocity using an exponential
    easing equation'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can create your own easing function to interpolate between a start and
    a final value. The arguments of the function are defined as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '`t`: This is the time in milliseconds since the transition started'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tMax`: This is the duration of the transition'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start`: This is the starting value'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delta`: This is the change in value (final value = `start` + `delta`)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The value of timed functions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a function that can be called at a later time can be helpful when organizing
    the timing of your game objects' appearance in an application. The timer library
    will allow us to handle our functions in a timely manner.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Timers
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The timer function enables you to trigger events at a specific delay (in milliseconds)
    of your choosing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '`timer.performWithDelay(delay, listener [, iterations])`: This invokes the
    listener after a delay in milliseconds and returns a handle to an object that
    you can pass to `timer.cancel()` in order to cancel the timer before it invokes
    the listener. For example:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`timer.cancel(timerId)`: This cancels a timer operation initiated with `timer.performWithDelay()`.
    The parameter is as follows:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timerId`: This is an object handle returned by the call to `timer.performWithDelay()`.
    For example:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`timer.pause(timerId)`: This pauses a timer object started with `timer.performWithDelay()`.
    The parameter is:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timer.pause(timerId)`: 这将暂停使用`timer.performWithDelay()`启动的定时器对象。参数如下：'
- en: '`timerId`: This is the timer ID object from `timer.performWithDelay()`. For
    example:'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timerId`: 这是来自`timer.performWithDelay()`的定时器ID对象。例如：'
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`timer.resume(timerId)`: This resumes a timer that was paused with `timer.pause(timerId)`.
    The parameter is as follows:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timer.resume(timerId)`: 这将恢复使用`timer.pause(timerId)`暂停的定时器。参数如下：'
- en: '`timerID`: This the timer ID from `timer.performWithDelay()`. For example:'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timerID`: 这是来自`timer.performWithDelay()`的定时器ID。例如：'
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What are image sheets?
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是图像表？
- en: Corona SDK includes an image sheet feature to construct animated sprites (also
    known as sprite sheets).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Corona SDK包括一个图像表功能，用于构建动画精灵（也称为精灵表）。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on image sheets, refer to the following link at [http://docs.coronalabs.com/guide/media/imageSheets/index.html](http://docs.coronalabs.com/guide/media/imageSheets/index.html).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有关图像表的更多信息，请参考以下链接：[http://docs.coronalabs.com/guide/media/imageSheets/index.html](http://docs.coronalabs.com/guide/media/imageSheets/index.html)。
- en: Image sheets are an efficient way to save texture memory. They are recommended
    for complex character animation or when numerous types of animations are involved.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图像表是节省纹理内存的有效方式。建议在复杂的角色动画或涉及大量动画类型时使用。
- en: Image sheets require more coding and have more of an advanced setup. They require
    the construction of a large sheet of animation frames.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图像表需要更多的编码和更高级的设置。它们需要构建一个大型动画帧表。
- en: It's sprite mania!
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这是精灵狂热！
- en: Image sheets are 2D animations that compile multiple frames into a single texture
    image. This is an efficient way to save on texture memory. It is beneficial for
    mobile devices and minimizes the loading time.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图像表是将多个帧编译成单个纹理图像的2D动画。这是一种节省纹理内存的有效方式。它对移动设备有益，并最小化加载时间。
- en: Image sheet API
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像表API
- en: 'The `graphics.newImageSheet` function creates a new image sheet. Refer to the
    following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics.newImageSheet`函数创建一个新的图像表。参考以下代码：'
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For example, the number of frames in the image sheet is assumed to be `floor(imageWidth/frameWidth)
    * floor(imageHeight/frameHeight)`. The first frame is placed at the top-left position
    and reads left to right and follows the next row, if applicable. The following
    image sheet has five frames that are 128 x 128 pixels each. The image sheet image
    is 384 pixels x 256 pixels altogether. If it were to be integrated in Corona,
    a sample method would be displayed like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，图像表中的帧数假定为`floor(imageWidth/frameWidth) * floor(imageHeight/frameHeight)`。第一帧放置在左上角位置，从左到右读取，并在适用的情况下继续下一行。以下图像表有五个128
    x 128像素的帧。整个图像表图像是384像素x 256像素。如果要在Corona中集成，一个示例方法将如下所示：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Image sheet API](img/9343OT_05_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图像表API](img/9343OT_05_01.jpg)'
- en: 'The `display.newSprite(imageSheet, sequenceData)` function creates a new sprite
    from an image sheet. A sprite defines the collection of frames that belong to
    the same character or other moving asset, which may then be subdivided into different
    animation sequences for playback. The `sequenceData` parameter is an array of
    animation sequences that you set up. Sequences can be shared between multiple
    sprite objects. The following are some examples:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`display.newSprite(imageSheet, sequenceData)`函数从一个图像表中创建一个新的精灵。精灵定义了属于同一个角色或其他移动资产的帧集合，然后可以将其细分为不同的动画序列以供播放。`sequenceData`参数是你设置的一系列动画序列数组。序列可以在多个精灵对象之间共享。以下是一些示例：'
- en: 'Single sequence (consecutive frames):'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单序列（连续帧）：
- en: '[PRE7]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Single sequence (non-consecutive frames):'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单序列（非连续帧）：
- en: '[PRE8]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Multiple sequences (both consecutive and non-consecutive frames):'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多序列（连续和非连续帧）：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`object:pause()`: This pauses the current animation. The frame remains on the
    current displayed frame.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:pause()`: 这将暂停当前动画。帧将保持在当前显示的帧。'
- en: '`object:play()`: This plays an animation sequence, starting at the current
    frame.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:play()`: 这将从当前帧开始播放动画序列。'
- en: '`object:setFrame()`: This sets the frame in the currently loaded sequence.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:setFrame()`: 这在当前加载的序列中设置帧。'
- en: '`object:setSequence()`: This loads an animation sequence by name.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:setSequence()`: 这通过名称加载一个动画序列。'
- en: Game time!
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏时间！
- en: 'Now that we have learned how to set up image sheets, let''s try to incorporate
    them into Panda Star Catcher! You can download the project files that accompany
    this book from the Packt Publishing website. There is a project folder called
    `Panda Star Catcher` in the `Chapter 5` folder. It already has the `config.lua`
    and `build.settings` files set up for you. The art assets are included in the
    folder as well. From [Chapters 3](ch03.html "Chapter 3. Building Our First Game
    – Breakout"), *Building our First Game – Breakout* and [Chapter 4](ch04.html "Chapter 4. Game
    Controls"), *Game Controls*, you might have noticed that the build and runtime
    configuration has a similar setup. This tutorial is compatible for both iOS and
    Android devices. The graphics included in the project folder have been designed
    to display properly on both platforms. The welcome screen of the game will look
    like the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经学会了如何设置图像表，那么让我们尝试将它们应用到`Panda Star Catcher`中！你可以从Packt Publishing网站下载伴随这本书的项目文件。在`Chapter
    5`文件夹中有一个名为`Panda Star Catcher`的项目文件夹。它已经为你设置了`config.lua`和`build.settings`文件。文件夹中还包括了美术资源。从[第3章](ch03.html
    "第3章. 构建我们的第一个游戏——Breakout")，*构建我们的第一个游戏——Breakout*和[第4章](ch04.html "第4章. 游戏控制")，*游戏控制*，你可能已经注意到构建和运行时的配置有类似的设置。本教程适用于iOS和Android设备。项目文件夹中包含的图形已经设计好，可以在两个平台上正确显示。游戏的欢迎屏幕将如下所示：
- en: '![Game time!](img/9343OT_05_02.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![游戏时间！](img/9343OT_05_02.jpg)'
- en: Time for action – setting up the variables
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间——设置变量
- en: 'Let''s start off with introducing all the variables needed to run the game:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先介绍运行游戏所需的所有变量：
- en: Create a brand new `main.lua` file and add it in the `Panda Star Catcher` project
    folder.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个全新的`main.lua`文件，并将其添加到`Panda Star Catcher`项目文件夹中。
- en: 'Let''s hide the status bar from the devices and set all the variables needed
    in game:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从设备上隐藏状态栏，并设置游戏中所需的所有变量：
- en: '[PRE10]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*What just happened?*'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We hid the status bar at the start of the application. This is only applicable
    for iOS devices. There are four different groups set up, and all of them play
    an important role in the game.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序开始时，我们隐藏了状态栏。这仅适用于iOS设备。有四个不同的组设置，它们在游戏中都扮演着重要的角色。
- en: Notice that `gameIsActive` is set as `false`. This enables us to activate properties
    of the application to affect the round when the display objects need to stop animating,
    appear on screen, and become affected by touch events.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`gameIsActive`设置为`false`。这使我们能够激活应用程序的属性，以便在显示对象需要停止动画、出现在屏幕上并受触摸事件影响时影响回合。
- en: The elements for the timer have also been set in the beginning of the code as
    well. Setting `numSeconds` to `30` denotes how long the round will count down
    from, in seconds. `starWidth` and `starHeight` depict the dimensions of the object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 代码开始部分也设置了计时器的元素。将`numSeconds`设置为`30`表示回合将倒计时多少秒。`starWidth`和`starHeight`描述了对象的尺寸。
- en: Let's start the round
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始这一轮
- en: We'll need to load the panda to the game screen before it can launch. The panda
    will transition from the bottom of the screen and move upward on the screen before
    any touch event can occur.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏屏幕上的熊猫发射之前，我们需要先加载熊猫。熊猫将从屏幕底部过渡并在屏幕上移，然后才能发生触摸事件。
- en: Time for action – starting the game
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间——开始游戏
- en: Right now, we need to set the offscreen position for the panda and have it transition
    to its starting launch location, so the user can interact with it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为熊猫设置一个屏幕外的位置，并让它过渡到起始发射位置，以便用户可以与之互动。
- en: 'After adding the variables, create a new local function called `startNewRound()`
    and add an `if` statement to initiate the `panda` object into the scene:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加变量后，创建一个名为`startNewRound()`的新局部函数，并添加一个`if`语句来初始化`panda`对象进入场景：
- en: '[PRE11]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a new local function called `activateRound()` within `startNewRound()`.
    Set the starting position of the `panda` display object on screen and add `ground:toFront()`,
    so that the ground appears in front of the panda character:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`startNewRound()`内添加一个名为`activateRound()`的新局部函数。设置屏幕上`panda`显示对象的起始位置，并添加`ground:toFront()`，使地面出现在熊猫角色前面：
- en: '[PRE12]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create another local function called `pandaLoaded()`. Set `gameIsActive` to
    `true` and set the `panda` object''s air and hit properties to `false`. Add `panda:toFront()`
    so that it appears in front of all the other game objects on screen and set the
    body type to `"static"`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`pandaLoaded()`的局部函数。将`gameIsActive`设置为`true`，并将`panda`对象的空气和击打属性设置为`false`。添加`panda:toFront()`，使其在屏幕上所有其他游戏对象的前面，并将身体类型设置为`"static"`：
- en: '[PRE13]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Transition the panda to `y=225` in 1,000 milliseconds. When the tween is completed,
    call the `pandaLoaded()` function using the `onComplete` command. Close the `activateRound()`
    function with `end` and call out to it. Close the `if` statement for `panda` and
    the `startNewRound()` function with `end`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Time for action – starting the game](img/9343OT_05_03.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the level is activated, the panda is placed below the ground before it
    is visible to the player. For `pandaLoaded()`, the game is activated by `gameIsActive
    = true`, and the panda is ready for launch by the player. The panda transitions
    from the ground level to an area on the screen where it can be accessed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Poof! Be gone!
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The panda needs to disappear from the stage after a turn has been made. Instead
    of having it disappear into thin air, we'll be adding a "poof" effect when it
    collides with any object on the screen.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – reloading the panda on the stage
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the panda has been in the air for a certain amount of time or has hit any
    out-of-bounds areas off the screen, it will turn into a cloud of smoke. The panda
    will be replaced with a "poof" image when a collision event occurs with the edge
    of the screen or the ground. The visible properties of the panda have to be turned
    off for the "poof" effect to work. When the collision has been made, the panda
    needs to be reloaded back onto the screen while the game is still activated.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a local function called `callNewRound()`. Include a local variable called
    `isGameOver` and set it to `false`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Within the current function, create a new local function called `pandaGone()`.
    Add in the new properties for the panda, so it no longer displays on the game
    stage:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add in a new function for the `poof` object called `fadePoof()`. With the `onComplete`
    command, transition with `time` set to `50` and `alpha` set to `1`. Have the `poof`
    object fade out with `time` set to `100` and `alpha` set to `0`. Close the `pandaGone()`
    function and call out to it using `timer.performWithDelay`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When `isGameOver` is still `false`, add in a `timer.performWithDelay` method
    for `startNewRound()`. Close the `callNewRound()` function:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*What just happened?*'
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A new round is called when the panda is no longer displayed on the screen and
    the clock is still counting down. When `isGameOver` is still `false`, then the
    panda reloads by calling `startNewRound()`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The panda collision occurs through `pandaGone()`. All physical properties become
    inactive by applying `panda.isVisible = false`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: The smoke appears exactly where the panda disappeared. This happens when `poof.x
    = panda.x; poof.y = panda.y`. `poof` becomes visible for a short while through
    `fadePoof()`. Once it has faded, a new round awaits, which sets `waitingForNewRound`
    to `true`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Earning some points
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Points are earned when the panda catches any stars in the sky. The game is run
    on a timer, so it is the player's job to catch as many stars as they can, before
    the time runs out. Let's rack up some points!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当熊猫捕捉到天空中的任何星星时，都会获得分数。游戏是在计时器上进行的，所以玩家的任务是尽可能在时间耗尽前捕捉更多星星。让我们积累一些分数吧！
- en: Time for action – tracking the score
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——跟踪分数
- en: The score updates through a parameter called `scoreNum` and displays it during
    the game play. The score number is received through `gameScore`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 分数通过名为`scoreNum`的参数更新，并在游戏进行时显示。分数是通过`gameScore`接收的。
- en: 'The next function that will be created is called `setScore` with a parameter
    called `scoreNum`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个要创建的函数名为`setScore`，带有一个名为`scoreNum`的参数：
- en: '[PRE19]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Use a local variable called `newScore` and set it as `scoreNum`. Set the `gameScore
    = newScore`. Provide an `if` statement for `gameScore`, so that the score during
    game play is set to 0:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为`newScore`的局部变量并将其设置为`scoreNum`。设置`gameScore = newScore`。为`gameScore`提供一个`if`语句，以便在游戏进行时将分数设置为0：
- en: '[PRE20]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the `scoreText` display object and make it equal to `gameScore`. Close
    the function:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`scoreText`显示对象，并将其设置为等于`gameScore`。关闭函数：
- en: '[PRE21]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*What just happened?*'
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: For `setScore = function(scoreNum)`, we set a parameter called `scoreNum`. The
    `scoreNum` parameter will update the game score continuously through `local newScore`.
    `newScore` will update through `gameScore`, which provides the basis of the score
    keeping. At the same time, `scoreText` will display the value of `gameScore` during
    the game.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`setScore = function(scoreNum)`函数，我们设置了一个名为`scoreNum`的参数。`scoreNum`参数会通过`local
    newScore`持续更新游戏分数。`newScore`将通过`gameScore`更新，这是计分的基础。同时，在游戏中，`scoreText`会显示`gameScore`的值。
- en: When the game ends
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当游戏结束时
- en: There are no losers in this game. Everyone wins! You'll still keep your adrenaline
    pumping by trying to catch as many stars as you can before the timer runs out.
    When it's all over, we still need to be notified that the time is up.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这场游戏没有输家，每个人都是赢家！在计时器耗尽前，尽可能多地收集星星，你的肾上腺素仍会激增。当一切结束时，我们还需要通知大家时间已到。
- en: Time for action – displaying the game over screen
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——显示游戏结束屏幕
- en: 'We need to set up the game over screen and have it display the final score
    that the player has achieved at the end of the round:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置游戏结束屏幕，并在本回合结束时显示玩家获得的最终得分：
- en: 'Create a new local function called `callGameOver()`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callGameOver()`的新局部函数：
- en: '[PRE22]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Set `gameIsActive` as `false` and pause the physics engine. Remove the `panda`
    and `stars` objects from the stage:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`gameIsActive`设置为`false`并暂停物理引擎。从舞台中移除`panda`和`stars`对象：
- en: '[PRE23]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Display the game over objects and insert them into the `hudGroup` group. Use
    the `transition.to` method to display the game over objects on the screen:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示游戏结束对象并将它们插入到`hudGroup`组中。使用`transition.to`方法在屏幕上显示游戏结束对象：
- en: '[PRE24]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Update the final score with a local variable called `newScore`. Set `isVisible`
    to `false` for the `counter` and `scoreText`. Introduce `scoreText` again to display
    the final score in a different location on the device screen. Close the function:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为`newScore`的局部变量更新最终得分。将`counter`和`scoreText`的`isVisible`设置为`false`。再次引入`scoreText`以在设备屏幕的另一位置显示最终得分。关闭函数：
- en: '[PRE25]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![Time for action – displaying the game over screen](img/9343OT_05_04.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——显示游戏结束屏幕](img/9343OT_05_04.jpg)'
- en: '*What just happened?*'
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `callGameOver()` method displays the game over screen when time runs out
    or if all the stars are collected. We have set `gameIsActive` to `false` and paused
    all the physics so the panda cannot be moved with any other screen touches. The
    panda and stars are then removed from the scene. The `shade` and `gameOverDisplay`
    objects are visible through `transition.to`, so it notifies the player that the
    round is over. The final score will display at the end of the round in front of
    the `gameOverDisplay` object.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间耗尽或所有星星被收集时，`callGameOver()`方法会显示游戏结束屏幕。我们将`gameIsActive`设置为`false`并暂停所有物理效果，这样熊猫就不能通过任何屏幕触摸来移动了。然后从场景中移除熊猫和星星。通过`transition.to`使`shade`和`gameOverDisplay`对象可见，这样它就会通知玩家本回合已经结束。最终得分将在回合结束时在`gameOverDisplay`对象前显示。
- en: Background display
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景展示
- en: The panda needs a general setting of where it's located in the game. Let's set
    the background and ground objects.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫在游戏中需要一个关于其所在位置的通用设置。让我们设置背景和地面对象。
- en: Time for action – adding the background elements
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加背景元素
- en: 'Add in the `background` and `ground` display objects to the `drawBackground()`
    function. Insert the objects in the group called `gameGroup`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*What just happened?*'
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `background` and `ground` display objects are placed in the function called
    `drawBackground()`. The `ground` object has a customized physical shape that is
    not the same size as the original display object. So if the panda happens to hit
    the ground, it will collide with it but not fall through.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Heads up!
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the game can be played, we need a general idea of how to operate the
    controls of the game. Luckily, we'll be adding a help screen that explains how
    to play. The **heads-up display** (**HUD)** needs to be displayed as well, so
    that the player can be updated on the time left on the clock and see how many
    points they have accumulated.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – displaying the timer and score
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up the help screen and HUD elements that need to be displayed during
    the game:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new local function called `hud()`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Display `helpText` at the start of the game for 10 seconds. Have it transition
    by sliding it to the left and turning visibility to `false`. Add `helpText` to
    the `hudGroup` group:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Display `counter` and `scoreText` near the top of the screen. Add `scoreText`
    to the `hudGroup` group as well. Close the function with `end`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '*What just happened?*'
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `helpText` object appears before the game starts and stays on the main device
    display for 9 seconds and transitions to -320 in the *x* direction in 1 second.
    This happens through `transition.to( helpText, { delay=9000, time=1000, x=-320,
    transition=easing.inOutExpo })`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'The `counter` object displays `"Time: " .. tostring( numSeconds )`, where `numSeconds`
    denotes the seconds that are counted down, starting from 30\. It is located near
    the top-left corner of the screen.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The `scoreText` object displays `gameScore` and is updated for every star collision
    made. This will be placed on the top-right corner of the screen. All the objects
    in `local hud = function()` are inserted in `hudGroup`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Time after time
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This game has a timer that the player has to work against, in order to catch
    as many stars as possible before it runs out. We're going to start the countdown
    as soon as the help text leaves the stage.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting up the timer
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll need to create a couple of functions that activate the countdown and
    also stop at 0 seconds when the game is over:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the timer countdown for the game with a local function called `myTimer()`:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Increment the seconds for the timer countdown by 1\. With the `counter` text
    object, display the time using `numSeconds`. Print out `numSeconds` to see the
    countdown in the terminal window:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create an `if` statement for when the timer runs out or if all the stars are
    gone. Within the block, cancel the timer and call `callGameOver()` to end the
    round. Close the `myTimer()` function with `end`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Initiate the `myTimer()` function with a new local function called `startTimer()`.
    This will start the countdown at the beginning of the game play:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为`startTimer()`的新局部函数启动`myTimer()`函数。这将开始游戏玩法开始时的倒计时：
- en: '[PRE33]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '*What just happened?*'
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The main timer function is within `myTimer()`. We count down the seconds using
    `numSeconds = numSeconds – 1`. The seconds will update in the `counter` display
    object. `print(numSeconds)` will be updated in the terminal window to see how
    fast the countdown runs inside the code.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的计时器函数在`myTimer()`中。我们使用`numSeconds = numSeconds – 1`来倒数秒数。秒数将在`counter`显示对象中更新。`print(numSeconds)`将在终端窗口中更新，以查看倒计时在代码内部运行的速度。
- en: When time runs out or all the stars have been collected, an `if` statement is
    created to check if any of the arguments are true. When any statement evaluates
    to true, the timer stops counting down, the panda animation pauses, and the `callGameOver()`
    function is called. This will call the function to display the game over screen.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间耗尽或所有星星都被收集时，将创建一个`if`语句来检查是否有任何参数为真。当任何语句评估为真时，计时器停止倒数，熊猫动画暂停，并调用`callGameOver()`函数。这将调用显示游戏结束屏幕的函数。
- en: The timer initiates the countdown through `local startTimer = function()` at
    a rate of 1,000 milliseconds, which is equivalent to 1 second.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器通过`local startTimer = function()`以每1,000毫秒的速度启动倒计时，这相当于1秒。
- en: It's so glowy
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它如此发光
- en: The panda needs another element that will display how much force is required
    to launch it into the sky. We're going to add a subtle glow-like display object
    that will represent this.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫需要另一个元素来显示发射它到天空所需的力量。我们将添加一个微妙的类似发光的显示对象来表示这一点。
- en: Time for action – making the power shot
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间——制作能量射击
- en: 'We need to create a separate function for `powerShot`, so that it can be called
    when the panda is set for launch:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为`powerShot`创建一个单独的函数，以便在熊猫准备发射时调用：
- en: 'Display the `powerShot` object through a new local function called `createPowerShot()`.
    Insert it in the `gameGroup` group:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过名为`createPowerShot()`的新局部函数显示`powerShot`对象。将其插入到`gameGroup`组中：
- en: '[PRE34]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '*What just happened?*'
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `powerShot` object is created through the `createPowerShot()` function and
    is called when the panda is setting up for launch.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`createPowerShot()`函数创建`powerShot`对象，并在熊猫准备发射时调用。
- en: Pandas!
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熊猫！
- en: It will be exciting to see something animated on the screen. Our main character
    will have designated animations for every action applied during the game play.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上看到动画的东西将会很激动人心。我们的主角将为游戏玩法中应用的每个动作指定动画。
- en: Time for action – creating the panda character
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间——创建熊猫角色
- en: 'We need to set up the panda collision event and animate it accordingly, using
    the image sheet:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置熊猫的碰撞事件，并相应地为其设置动画，使用图像表：
- en: 'We need to create a local function that will introduce the collision and touch
    events for the panda. We shall call it `createPanda()`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个局部函数来处理熊猫的碰撞和触摸事件。我们将它称为`createPanda()`：
- en: '[PRE35]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'When the panda collides with the stars, use `onPandaCollision()` with the parameters
    `self` and `event`. Reload `panda` every time a collision occurs with the stars
    or the edge of the screen, by using `callNewRound()`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当熊猫与星星碰撞时，使用带有参数`self`和`event`的`onPandaCollision()`。每次与星星或屏幕边缘发生碰撞时，使用`callNewRound()`重新加载`panda`：
- en: '[PRE36]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create a directional arrow to allow the user to aim for an area to launch the
    panda. Insert it to the `gameGroup` group:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个方向箭头，允许用户瞄准发射熊猫的区域。将其插入到`gameGroup`组中：
- en: '[PRE37]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the image sheet for the panda that has three different animation sequences
    called `"set"`, `"crouch"`, and `"air"`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有三种不同动画序列（称为`"set"`、`"crouch"`和`"air"`）的熊猫图像表：
- en: '[PRE38]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following properties to `panda` before it launches into the air:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在熊猫发射到空中之前，为其添加以下属性：
- en: '[PRE39]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Set up collisions for `panda` using `"collision"` and apply an event listener:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`"collision"`为`panda`设置碰撞，并应用事件监听器：
- en: '[PRE40]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create the `poof` object:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`poof`对象：
- en: '[PRE41]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Insert the `panda` and `poof` objects into the `gameGroup` group. Close the
    function:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`panda`和`poof`对象插入到`gameGroup`组中。关闭函数：
- en: '[PRE42]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We''ll need to scroll up to the `activateRound()` function and add the `"set"`
    animation sequence for the panda:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要滚动到`activateRound()`函数，并为熊猫添加`"set"`动画序列：
- en: '[PRE43]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '*What just happened?*'
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The collision events that occur for the panda start with `if event.phase ==
    "began"`. The panda reloads on screen through several cases of `if` statements.
    `event.other.myName == "star"` will call a new round when the panda launches off
    screen towards the right, left, or top sides of the stage.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫发生的碰撞事件从`if event.phase == "began"`开始。通过几个`if`语句的情况，熊猫在屏幕上重新加载。当熊猫向舞台的右侧、左侧或顶部发射离开屏幕时，`event.other.myName
    == "star"`将调用新一轮。
- en: The image sheet for the panda has three sets of animations. They are called
    `"set"`, `"air"`, and `"crouch"`. There are a total of five frames in the image
    sheet.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫的图片表有三个动画组。它们被称为`"set"`、`"air"`和`"crouch"`。图片表总共有五个帧。
- en: The physical properties of the panda are set before launch. The body type is
    set to `"static"` and will change when it's in the air.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在发射前设置熊猫的物理属性。身体类型设置为`"static"`，在空中时将改变。
- en: The collision event for the panda is called by `panda:addEventListener( "collision",
    panda )`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫的碰撞事件通过`panda:addEventListener( "collision", panda )`调用。
- en: Now that the image sheet has been set up, the `"set"` animation needs to be
    added in the `activateRound()` function to initiate movement.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图片表设置好后，需要在`activateRound()`函数中添加`"set"`动画以启动移动。
- en: Starry skies
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星空。
- en: The stars play a big part in the game. They are the main obstacle that the panda
    has to get past in order to achieve points before the clock runs out.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 星星在游戏中扮演着重要角色。它们是熊猫在倒计时结束前为了获得分数必须克服的主要障碍。
- en: Time for action – creating star collisions
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——创建星星碰撞。
- en: Star collisions need to be made and removed from the stage so that points can
    be accumulated for the player.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 星星碰撞需要被创建并从舞台移除，以便玩家可以累积分数。
- en: 'Create a function for the star collision called `onStarCollision()` and have
    a `self` and `event` parameter:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为星星碰撞创建一个名为`onStarCollision()`的函数，并带有`self`和`event`参数：
- en: '[PRE44]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the `if` statements that remove the `stars` children from the game screen
    when a collision is made. Increment the score by 500 for each star removed from
    the screen. Close the function with `end`:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`if`语句，当发生碰撞时，从游戏屏幕上移除`stars`子项。每次从屏幕上移除一个星星，分数增加500。用`end`关闭函数：
- en: '[PRE45]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![Time for action – creating star collisions](img/9343OT_05_05.jpg)'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候行动了——创建星星碰撞](img/9343OT_05_05.jpg)'
- en: '*What just happened?*'
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The star collision occurs on first contact with `if event.phase == "began"`
    and `self.isHit == false`, assuming the star has not been touched by the panda.
    The stars are removed from the screen by `self.parent:remove( self )` and `self
    = nil`. The score is incremented by 500 through `gameScore` and updated to `setScore
    = (scoreNum)`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 星星碰撞在第一次接触时发生，条件是`if event.phase == "began"`和`self.isHit == false`，假设星星还没有被熊猫触碰。通过`self.parent:remove(
    self )`和`self = nil`，星星从屏幕上移除。分数通过`gameScore`增加500，并更新为`setScore = (scoreNum)`。
- en: Have a go hero – tracking the star count
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄——跟踪星星计数。
- en: Try tracking how many stars the panda catches during game play. The logic is
    similar to how the game score was created. Each star that is caught will have
    to increment by 1 as the count for every collision made. The star count is placed
    within the `onStarCollision()` function. A new function and method will have to
    be created to display the text of the star count, and will have to be updated
    every time the count changes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试跟踪游戏过程中熊猫捕捉到的星星数量。逻辑与创建游戏分数类似。每次捕捉到的星星都需要在每次碰撞时增加1。星星计数放在`onStarCollision()`函数中。需要创建一个新的函数和方法来显示星星计数的文本，并且每次计数更改时都要更新。
- en: Screen touches
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕触摸。
- en: The panda will have to get across the playing field to reach the stars by creating
    a launch mechanic similar to a slingshot. Force will play a big role in pushing
    the panda upward.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫需要通过创建类似弹弓的发射机制来穿越游戏场地，以到达星星。力量在推动熊猫上升的过程中将发挥重要作用。
- en: Time for action – launching the panda
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——发射熊猫。
- en: Let's add a touch event for the panda so that it flings toward the stars. The
    `powerShot` object will play a role in helping the player visualize how much power
    needs to be applied to the panda, before it launches into the air.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为熊猫添加一个触摸事件，使其向星星弹射。`powerShot`对象将帮助玩家可视化在熊猫起飞前需要施加多大的力量。
- en: 'Implement touch events for the panda. Create a local function called `onScreenTouch()`
    with an event parameter:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为熊猫实现触摸事件。创建一个名为`onScreenTouch()`的局部函数，带有事件参数：
- en: '[PRE46]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'With `gameIsActive` initiated, add in an `if` statement for when the touch
    event starts, by using `event.phase ==` `"began"`. During this event, use the
    "crouch" animation set to prepare `panda` for launch:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当启动`gameIsActive`时，添加一个`if`语句，用于当触摸事件开始时，通过使用`event.phase ==` `"began"`。在此事件期间，使用“蹲下”动画集来准备`panda`的发射：
- en: '[PRE47]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add an `elseif` statement for when the touch event ends by using `event.phase
    == "ended"`.Create a new local function called `fling()`, which will hold the
    properties of `panda` when it is launched toward the `star` objects. Apply a force
    opposite to where the touch event is dragged. Scale the `powerShot` display object
    outward when the touch event is pulled farther from the character:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`elseif`语句，用于当触摸事件结束时，通过使用`event.phase == "ended"`。创建一个名为`fling()`的新局部函数，它将在发射`panda`向`star`对象时保存`panda`的属性。应用一个与触摸事件拖动方向相反的力。当触摸事件从角色处拉远时，向外扩展`powerShot`显示对象的大小：
- en: '[PRE48]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![Time for action – launching the panda](img/9343OT_05_06.jpg)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——发射熊猫](img/9343OT_05_06.jpg)'
- en: '*What just happened?*'
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Once the game is active and the panda has been loaded on the screen, a touch
    event to launch the panda can be initiated. The panda will go from a `"static"`
    physics state to a `"dynamic"` physics state. The `powerShot` display object size
    increases the farther back the panda is pulled by an event touch.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦游戏激活并在屏幕上加载了熊猫，就可以启动一个触摸事件来发射熊猫。熊猫将从“静态”物理状态变为“动态”物理状态。`powerShot`显示对象的大小随着事件触摸将熊猫拉得越远而增加。
- en: The force from the panda launch is applied by `local fling = function()`. Launch
    force is created by `xForce` and `yForce`. The panda object is propelled by `panda:applyForce(
    xForce, yForce, panda.x, panda.y )`. Notice that the body type changes to `"dynamic"`,
    so gravity can affect the object.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫发射的力由`local fling = function()`应用。发射力由`xForce`和`yForce`产生。熊猫对象通过`panda:applyForce(
    xForce, yForce, panda.x, panda.y )`推进。注意，身体类型变为“动态”，这样重力就可以影响对象。
- en: Organizing display objects
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织显示对象
- en: When the round has been set, the display hierarchy of the game objects needs
    to be rearranged. The most important objects are displayed towards the front of
    the screen.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置好回合后，需要重新排列游戏对象的显示层次结构。最重要的对象显示在屏幕前方。
- en: Time for action – reordering layers
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——重新排序层次
- en: 'A new local function `reorderLayers()` needs to be created to organize the
    display hierarchy of objects on screen during game play:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要创建一个新的局部函数`reorderLayers()`，以在游戏进行时组织屏幕上对象的显示层次结构：
- en: '[PRE49]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '*What just happened?*'
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `gameGroup`, `hudGroup`, and other display objects are reorganized in the
    display hierarchy of the game screen. The most significant object is set to the
    front, while the least important one is towards the back.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`gameGroup`、`hudGroup`和其他显示对象在游戏屏幕的显示层次结构中重新组织。最重要的对象被设置在前面，而最不重要的对象在后面。'
- en: Creating stars
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建星星
- en: The sky background needs to be filled with stars, so that the panda can catch
    as many stars as possible.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 天空背景需要填满星星，这样熊猫就能捕捉到尽可能多的星星。
- en: Time for action – creating stars in the level
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在关卡中创建星星
- en: We need to add the layout of the stars in the game and have them moving so as
    to add a little effect to show that they're active. A collision event will need
    to be applied, which would remove them when the panda collides with them.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在游戏中添加星星的布局，并使它们移动，以添加一些效果来显示它们是活跃的。需要应用一个碰撞事件，当熊猫与它们相撞时，将它们移除。
- en: 'Create a new function called `createStars()` and lay out the `star` objects
    in a `for` loop. Add in the `"collision"` event that will be called by `onStarCollision()`
    to remove the stars when they are hit by the panda. Rotate the stars forward and
    backward at 10 seconds and 1,080 and -1,080 degrees each. This will allow the
    stars to rotate three full intervals backward and forward. Create the walls for
    the left and right sides of the screen:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`createStars()`的新函数，并通过`for`循环布置`star`对象。添加一个`"collision"`事件，该事件会被`onStarCollision()`调用，以在星星被熊猫击中时移除它们。让星星每10秒向前和向后旋转1,080度和-1,080度，这将使星星前后旋转三个完整的周期。为屏幕左右两侧创建墙壁：
- en: '[PRE50]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '*What just happened?*'
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The number of stars displayed on screen is set by `numOfRows` and `numOfColumns`.
    A `for` loop is made to display each individual star object and is placed in the
    `stars` group. The collision for `star` is detected by an event listener through
    `onStarCollision()`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: The `leftWall` and `rightWall` objects have physical properties as well and
    will take into account the collision detection with the panda.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: The stars are animated by `starAnimation()` and `starRotation()`. Each function
    rotates each star object for 10 seconds (10,000 milliseconds), and alternates
    between 1,080 and -1,080 degrees.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Starting the game
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The game starts when the clock starts counting down and the panda is loaded
    on the screen. Once the panda is set on screen, the player needs to aim and launch
    it quickly so that reloading of the panda can occur immediately.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – initializing the game
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The physics and the remaining game functions need to be initialized to run the
    game. All game actions need to be delayed until the help screen has left the stage.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the game by creating a new function called `gameInit()`, which will hold
    the physics properties and activate the display objects on the stage:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add in a `Runtime` event listener, using `"touch"` for `onScreenTouch()`:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Have the level and timer start 10 seconds later so that the user has time to
    read through the help text. Close the function and start the game with `gameInit()`:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: All the code is completed! Run the game in the simulator and see for yourself
    how it works. Make sure to check for any typos in your code if errors occur.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The round is initialized through `gameInit()`. The physics engine and the remaining
    functions are run at this time. The event listener for `onScreenTouch()` is added
    as well. The `startNewRound()` and `startTimer()` functions initiate 10 seconds
    after launching the application through `timer.performWithDelay`.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – animating graphics
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What is the proper way to pause the animation of an image sheet?
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '`object:stop()`'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`object:pause()`'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`object:dispose()`'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. How do you make an animation sequence loop forever?
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '`local sequenceData =`'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '`local sequenceData =`'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '`local sequenceData =`'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '`local sequenceData =`'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Q3\. How do you create a new image sheet?
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '`myCharacter = display.newSprite(sequenceData)`'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`myCharacter = display.newSprite(imageSheet, sequenceData)`'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`myCharacter = sprite.newSpriteSheet("myImage.png", frameWidth, frameHeight)`'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our second game, Panda Star Catcher, is finally complete! We're now getting
    a great grasp on writing more functions and different types of game logic, and
    we also have animation under our belt! Way to go!
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we did the following:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Took a more in-depth look at transitions and applied easing techniques
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understood image sheets and sprite animation
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a game loop for display objects that have to be reloaded continuously
    on screen
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applied force to a display object that propels it to a designated direction
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一个显示对象施加力，使其向指定方向推进
- en: Added a collision event that switches from one display object to another
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个碰撞事件，用以从一个显示对象切换到另一个显示对象
- en: We have pushed through making another game in one whole chapter! Working in
    Corona SDK is so simple and fast to learn. It doesn't even require thousands of
    lines of code to create a simple game.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在整整一个章节中完成了一个游戏的制作！使用 Corona SDK 进行开发是如此简单和快速上手。即便创建一个简单的游戏，也无需编写成千上万行代码。
- en: In the next chapter, we'll be learning another vital element to create games,
    sound effects, and music! You're in for a treat.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习创建游戏、音效和音乐的另一个重要元素！这将是一段美妙的旅程。
