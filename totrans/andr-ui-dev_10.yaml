- en: Chapter 10. Building an Application Theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Whether graphical styling or not, every application has a theme. The theme
    of an application is what gives it a distinct appearance and logic.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a person uses a mobile application (which accounts for most Android devices),
    there are some fundamental differences in their behavior when compared to a desktop
    or laptop:'
  prefs: []
  type: TYPE_NORMAL
- en: They often have less time for the application, and therefore less patience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are often focused entirely on a single application at a time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touchscreen devices encourage an almost tactile response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android devices are diverse and run on almost everything including common mobile
    phones, tablets, laptops, and a few desktop machines. An Android application is
    expected to function well in all of these environments, and the theme of the application
    should be carefully constructed to allow the user the best possible access to
    each of these devices.
  prefs: []
  type: TYPE_NORMAL
- en: The device interface forms a part of your application theme. When using a mouse
    on a desktop or laptop device, a user interface designed with only touchscreen
    in mind may feel over-sized to a user (since all widgets need to be finger-sized).
    Contrary to this, an application designed for a mouse-driven system will normally
    include rollover effects, which won't work properly on a touchscreen device. The
    only way to make sure your application works on all these different devices is
    to consider all of these environments when building the screens of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Android itself defines a theme of sorts and as far as possible, applications
    built for the Android platform should attempt to conform or extend this theme,
    rather than redefine it. This doesn't mean your application must look and behave
    exactly the same way as all other Android applications, but rather that your application
    should be based on the underlying principles that Android lays down.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that many of the device manufacturers define additional parts to
    the basic Android theme, and your application should do the same.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will examine the building of an application, including the
    design of the screens, their construction, and their styling. We'll also examine
    how this application will interact with various different devices, making sure
    it looks right and functions as the user would expect it to. The application we're
    going to build is a calculator, having both a standard and a scientific calculator.
    The calculator will be styled to look more like a physical calculator than a generic
    Android application, and will change its functionality according to the capabilities
    of the device it's running on. Overall, we'll be defining an application with
    its own, consistent theme.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic calculator layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need in order to build this project is a basic portrait layout
    for a standard calculator. This basic layout will serve as the screen that the
    user will look at when they first start the application. Given the nature of a
    calculator application and how the user perceives it, it's very important that
    the screen be simple and that the application starts as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important that the calculator screen takes up all available space with
    functional components, in order to make itself as quick to use as possible (bigger
    buttons equals easier usage).
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When do layout resources become Java classes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the resource-processor is run
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When the application package is built
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When the layout resource is loaded
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Never
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you reference widgets that are not defined by default in Android?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using the full class name as an element name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: By defining an XML namespace for the Java package
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's currently impossible
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: By specifying the Java package name in the the `android:package` attribute
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default width and height of a `View` object?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The size of it's content
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Zero-by-zero pixels
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It depends on the `ViewGroup` it's placed in
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The width of its parent and the height of its content
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You write a layout resource as XML, what format is it stored in?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As raw XML text
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Android binary XML
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Layout specific binary format
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Java classes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Designing a standard calculator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting to build the calculator application, it''s a good idea to sketch
    out what it''s going to look like. This will also help you to decide how exactly
    to construct the screens. Since a calculator is something that is both, a rather
    old invention as well as something people are very familiar with, it''s important
    to stick to the most common design. If you introduce a calculator that is too
    foreign to people, they may well not have the patience to "get to know" your application.
    New ideas are good (that is, slide keyboards), but the most successful are those
    that are extensions of existing ideas. Also, make it obvious to the user how they
    work. The following is a block diagram of the standard calculator screen that
    we will start building:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing a standard calculator](img/4484OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's important that we maximize the use of the screen space, so we'll do our
    best to make the buttons as large as possible. Also, we want to space the buttons
    slightly apart in order to avoid the undesired button from being pressed by the
    user. Since we only have a single output area, we'll make sure that the display
    area is also sufficiently large.
  prefs: []
  type: TYPE_NORMAL
- en: The arrow in the display area will be an icon which will act as a *Backspace*
    button, allowing the user to delete unwanted content. It's always important to
    give the user a way to undo what they have done. We'll use an icon similar to
    the one used in the dialer application, which will keep a feeling of overall consistency
    with the rest of the system. This also effectively gives us space for an additional
    button. This user interface doesn't include the normal "memory" functions associated
    with many calculators. The basic screen is designed to be as simple as possible,
    and we'll introduce more functionality as we develop the application.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – building the standard calculator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first layout for the calculator will consist of a normal series of **0**
    to **9** buttons with a button for the various basic arithmetic operations—add,
    subtract, multiply, and divide. It will also have buttons for equals and a button
    for the decimal point. While this would be a very easy screen to build in Java
    code, we'll build this example entirely as an XML resource. Since this application
    will have several different permutations of the same screen, using layout resource
    files with no Java code will make your life much easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a new project for the calculator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the standard main layout file `/res/layout/main.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the generated layout structure from the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by declaring a vertical `LinearLayout` as a root element to consume all
    the available space on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `RelativeLayout` that will compose the display with the **Delete**
    or **Cancel** button that the user can use to remove unwanted input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the standard Android input delete icon in an `ImageView` on the right side
    of the `RelativeLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the left side of the `RelativeLayout`, create a `TextView` that will actually
    display the numeric status of the calculator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `LinearLayout`, declare a `TableLayout` that will be used to contain
    the button inputs for the simple calculator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `TableLayout` will be made up of four `TableRow` objects. Declare the first
    of these with no margin and a `layout_weight` of `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The top-right `Button` object needs to be the `plus` sign, which we also use
    as the name for the `Button` ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next three `Button` objects on the first row will be the numbers **1**,
    **2**, and **3**. These all need IDs as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Continue to declare `TableRow` objects with buttons in the order defined in
    the block-diagram.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `CalculatorActivity.java` source file in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `onCreate` method, ensure that the content view of the `Activity` is
    set to the `main` layout you''ve just defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should now have a basic user interface for a calculator; although it still
    looks like a very generic Android application, but it's a start at the basic level.
    The user interface will need styling work, including colorization and some font
    changes, but the basic structure is now complete. The use of the `RelativeLayout`
    is to ensure that we can correctly position the delete icon to the right of the
    `TextView`, no matter what the size of the screen is.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for the buttons to consume as much of the available space as possible,
    we tell the `TableLayout` to stretch all of its columns. If the `TableLayout`
    doesn''t stretch its columns, then it will only consume as much horizontal space
    as its children require (effectively the same as `wrap_content` width). Although
    the `TableLayout` is told to consume all of the vertical space as well, its children
    will be sized according to the amount of space they need, which is why the buttons
    don''t take up all of the available screen space. The following image is a screenshot
    of the basic calculator running in the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building the calculator styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We really want this calculator to look more like a real calculator, and for
    that we need to apply some styling. The current theme of the calculator is entirely
    the standard Android theme, and while it looks exactly like the rest of the Android
    system, it doesn't really suit this application. We want to style both the buttons
    and the display area of the application. We'll define style values in a resource
    file and relate to these in the layout XML file.
  prefs: []
  type: TYPE_NORMAL
- en: To start with, we'll define a series of nine-patch images to create our own
    button designs. We need three different images for this purpose. The first image
    is the "normal" state of the button, the second will be the "pressed" state of
    the button, and finally, a "focused" state of the button.
  prefs: []
  type: TYPE_NORMAL
- en: Pop Quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are the black lines around the border of a nine-patch image for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hints to the system as to what parts of the image to copy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To indicate what parts of the image to scale and where to put the widget content
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Defines what parts of the image contain meta-information
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What formats may a nine-patch image be stored as?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JPEG, GIF, or PNG image file
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An XML file with an embedded TIFF
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A portable-network-graphic image
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `draw9patch` application do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Renders a nine-patch image in various shapes and sizes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's an application for drawing nine-patch images
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Generates the meta-data for a nine-patch image as an XML file
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Time for action – creating the button images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build the button images in this section you will need to download
    "The GIMP" (available at [http://www.gimp.org](http://www.gimp.org)). It's perfect
    for this sort of image creation or manipulation and has the added advantage that
    it's open source.
  prefs: []
  type: TYPE_NORMAL
- en: Open "The Gimp", and select **File** | **New** to create a new image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the width and height to `38x38` pixels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Advanced Options** and change the **Fill With** option to **Transparency**
    so that there is no background color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To help with sizing, zoom in to about **800%**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Rectangle** tool in the top-left of the toolbox (the default keyboard
    shortcut key is *R*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Rounded Corners** option and set it to `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Fixed** option and select **Size** in the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `36x36` as the fixed size of the rectangle selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the selection box at the center of the image canvas and there should be
    a one-pixel border between the selection box and the edge of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the "Foreground color" (black by default) in the toolbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `444444` in the **Hex Notation** box of the color selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the color selector dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Bucket Fill** tool in the toolbox (the default keyboard shortcut
    is *Shift-B*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click inside the selection box to fill it with the selected color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Select** menu and click the **None** option to remove the selection
    box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Filter** | **Decor** | **Add Bevel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Thickness** option to `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Work on Copy** option and select the **Ok** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Rectangle** tool from the toolbox again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Rounded Corners** and **Fixed** options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the selection tool to select a single pixel wide vertical box on the inside
    of the "button" shape, being careful to only select part of the content area of
    the button, avoiding the beveled border space:![Time for action – creating the
    button images](img/4484_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By placing the cursor in the middle of the selection box, drag the selection
    horizontally to the very edge of the of the image canvas (inside the one-pixel
    border).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the "Foreground" rectangle again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset the color to pure black.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Bucket Fill** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click inside the selection box to create a single pixel wide, black vertical
    line down the left-side of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a similar vertical line on the right side of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a horizontal single-pixel high black line at the top and bottom of the
    image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the image in your `res/drawable` directory as `button.9.png`, leaving the
    PNG Options as their defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this exact process, changing the `444444` foreground color, as done in
    step 11, to `c16400` and save the new image as `button_focus.9.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By inverting the image with the **Flip Tool** (default keyboard shortcut *Shift*
    + *F*), you will create the `button_down.9.png` image.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While there are many steps to building images, they are fundamentally very
    easy to create with the right tool and a bit of experimentation. If all you need
    is a simple button or something similar, then it''s well worth finding a few tutorials
    on how to use "The GIMP" or a similar tool. There are great tutorials online at
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.gimp.org/tutorials/](http://www.gimp.org/tutorials/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://gimp-tutorials.net/](http://gimp-tutorials.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The images you have saved in the last section should look like the following
    images that I have created for my calculator application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_10_03b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – styling the calculator buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next thing we need to do is use a selector-list and the nine-patch images
    you've just created to style the calculator buttons. We'll also be defining the
    button styling in a resource file so that we don't have to specify all of the
    styling for each of the buttons. In order to replace the standard button with
    our image, we only need to replace its background with the one we create for the
    purpose.
  prefs: []
  type: TYPE_NORMAL
- en: In the `res/drawable` directory, create a new XML file named `button.xml` and
    open it in an editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the root element of the file as a fixed-size selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the pressed button state, as the first child of the selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second child of the selector should be the focused state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final selector child is generic, and is the normal state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file named `styles.xml` in the `res/values` directory and open
    it in an editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The root element of the `styles.xml` file should be a resources element with
    no namespace declaration (it''s not needed in this file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the first style in the file as `CalculatorButton` with a parent style
    of the default Android `Button` widget style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the text size to a nice large font and a light grey color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the background of the style as the new `button` drawable resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a two-pixel border around each of the `Button` widgets to create a little
    bit of spacing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure the `Button` widgets consume all their available vertical space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `main.xml` layout resource in an editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On each of the `Button` elements, add a style attribute to give them the styling
    you just defined in the `styles.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve just re-styled the `Button` objects for the calculator screen. The style
    is the child of the standard Android `Button` widget. The new styling is mostly
    driven by the change of the background image to the nine-patch image we created
    earlier. To work with the new background image, we also specify a font color and
    size. The new calculator user interface will look like the following screenshot
    when run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the original code, there was no margin around the buttons specified, but
    in the new code, we've added an explicit margin in the custom styling. Our nine-patch
    images have no padding around the content area.
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that we style each of the `Button` widgets in the layout. As already
    mentioned in the previous chapter, the style attribute is not part of the Android
    resources namespace. Unfortunately, Android doesn't currently allow us to style
    all widgets of a particular class. Instead, we are forced to either style each
    of the widgets individually, or style every widget in an `Activity` or application
    with the same styles. As part of the new `Button` styling, we declared a drawable
    resource as a `<selector>` resource. As with the tab structures, `Button` objects
    can be styled to use different drawable resources for their different states.
    In this case, we specify background images for instances when the `Button` is
    focused, pressed, or is in normal state. The styling only applies to the background
    image, since the background of the new `Button` objects is the `<selector>` resource.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – styling the display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, the numeric display really looks quite awful. That''s mostly because
    we just don''t have any styling for it, and currently it''s just a plain `TextView`
    object. We want the styling to encompass both the `TextView` object and the `ImageView`.
    The display currently looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – styling the display](img/4484_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to fix this display and bring its styling inline with our new `Button`
    styling, we'll create two different styles. One to create a border and background
    around the `TextView` and `ImageView` objects, and another to style the `TextView`
    widget with a more suitable font.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new drawable resource file named `display_background.xml` and open
    it in your editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The root of the display background needs to be a rectangle shape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare some padding to inset the text and image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a solid-grey background color for the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the stroke size and set its color to white:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `res/values/styles.xml` file in your editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `<style>` item for the display wrapper, and name the new style `CalculatorDisplay`
    with no parent style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a small margin underneath the display wrapper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some padding above the display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a new `<style>` element with the name `CalculatorTextDisplay`, and the
    parent style should be the standard `TextView` styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the new style, set font to `45` pixels, with black monospaced font:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The text of the calculator display should be right-aligned, so we''ll also
    specify the gravity to apply to the `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `res/layout/main.xml` file in your editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the style of the `RelativeLayout` as `CalculatorDisplay`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the style of the `TextView` for the display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new styling applies to the `RelativeLayout` that wraps around the `TextView`
    object and the `ImageView` object. By styling this `RelativeLayout`, you effectively
    join the `TextView` and `ImageView` together as a single widget. If you look at
    the following screenshot, you''ll see how this works for your user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The margin on top and below the `TextView` object will shrink the amount of
    available space that can be used by the buttons. On a long vertical space, the
    buttons would normally become long and look disproportionate, so by adding a margin
    to the display area, we help keep the buttons a more square shape.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – Adding calculator logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right now, what we've got is a great user interface for a simple calculator.
    However, it's nothing more than a nice looking user interface. The next thing
    to do is to add some logic to the works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps that need to be completed to have a functional calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `OnClickListener` interface and register it with each of the `Button`
    widgets on the user interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `Calculator` class to handle the actual calculations and store
    the non-user-interface state of the calculator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `StringBuilder` class to implement the construction and display of the
    currently entered value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the basic calculations using the `double` datatype in order to cater
    for numbers with a decimal place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When selecting a resource string from a layout, how is the string selected?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Directly from the root `values` strings resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: From a `strings.xml` file in the same directory as the layout
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `values` directory that is the closest match to the current configuration,
    and contains a string with the requested name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: From a `values` directory with the same selectors as the directory the layout
    resource file was selected from
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correct filename to place a style resource in?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any file in the `values` directory
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`styles.xml`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`values.xml`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`theme.xml`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How is resource selection in Java code different to resource selection from
    an XML resource file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Java resource selection is faster
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: XML resources can only reference other resources with the same set of configuration
    qualifiers as themselves
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: There are no significant differences
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: XML resources can only reference a subset of all the resource types.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scientific landscape layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scientific layout for the calculator is not simply a case of more buttons,
    because we want this layout to be used when the device is in a landscape orientation.
    This means we have significantly less vertical space, something the standard layout
    consumes lots of. To build this new user interface, we'll not just be defining
    a new layout resource, but also additional styling for the new layout.
  prefs: []
  type: TYPE_NORMAL
- en: The scientific layout also makes use of more complex text on its new buttons.
    Some mathematic functions such as square root, or inverse cosine have a specific
    notation that should be used. In these cases, we'll need to make use of either
    HTML styling or special characters. Fortunately, Android fully supports the UTF-8
    character set, both in functionality and font-rendering, making this process much
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: Defining string resources for the scientific layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the scientific functions, we'll define the string content of each as a resource
    string. This is partially in order to make them an independent part of the resource
    selection process (which is always recommended), but it's also to allow us to
    leverage the automatic HTML processing. If you make use of HTML in a string resource,
    that HTML will automatically be parsed by the resource processor if accessed with
    the `Resources.getText` method, instead of the usual `Resources.getString` method.
    This is exactly the way that the `TextView` class loads its string resources,
    making it even more attractive to place your text-content in a `values` resource
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of my `strings.xml` file in the `values` directory.
    You''ll notice that the HTML markup is HTML 3.2, and not HTML 4 based. This is
    because the Android `Html` class doesn''t handle HTML 4 markup, and the `Html`
    class is effectively what is used to load and string resource containing markup.
    Create a new resource file in the `res/values` directory named `strings.xml` and
    copy the following code snippet into the new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The unicode hex values in the `pi` and `sqrt` string values are used to reference
    the unicode characters for a lower case Greek Pi symbol, and the standard square
    root symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the scientific layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The styles used in the standard calculator layout don''t work very well for
    the scientific layout. In order to change the styles for the scientific layout,
    you can add the new styling to a new `values` directory for the landscape layout.
    Copy the following code snippet to a new file named `res/values-land/styles.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The first style resource in the preceding snippet is used for the display area
    of the calculator. As with the standard calculator, we use the `display_background`
    shape written earlier in this chapter. We also define a new style for the scientific
    buttons. The scientific buttons will be exactly the same as the standard calculator
    buttons, except with a much smaller font. Since there are many more scientific
    buttons than standard buttons, the smaller font allows us to comfortably fit more
    of them on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Building the scientific layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The scientific layout is comprised of the standard calculator buttons on the
    right side of the screen, with twenty additional buttons on the left side of the
    screen. The additional buttons represent mathematical functions and constants,
    most of which can be found in the `java.lang.Math` and `java.lang.StrictMath`
    classes. The following figure illustrates how we want to layout the scientific
    calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the scientific layout](img/4484OS_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The effect of the new styles for the landscape layout on the calculator display
    will "remove" the margin between the display and the buttons. Since the landscape
    layout has less vertical space, such padding is nothing more than a waste of space
    that should be used for the buttons in order to maintain a reasonable size.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – coding the scientific layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The landscape layout is broken into various sub-layouts in order to maintain
    IDs for the two individual functional areas: Scientific functions and standard
    functions. Maintaining these with their own ID values allows much easier detection
    of the available functionality from the Java code. Instead of the Java code deciding
    on the available functionality based on the configuration, it can use `findViewById`
    and test for `null` to check if the scientific functionality is available. This
    is not unlike "capability testing" in JavaScript (as apposed to inspection).'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new resource directory named `res/layout-land`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new layout resource XML file in the `layout-land` directory named `main.xml`
    and open this file in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the root element of the new layout as a vertical `LinearLayout` consuming
    all of the available screen space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first element of the new layout is a `RelativeLayout` element to wrap the
    `TextView` and `ImageView` that are used as the calculator display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the `TextView` and `ImageView` elements from the standard calculator layout
    (`res/layout/main.xml`) as the two child elements of the `RelativeLayout` declared
    previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second child element of the root `LinearLayout` is a horizontally-oriented
    `LinearLayout` consuming the remainder of the screen space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the new `LinearLayout` child, declare a new `TableLayout` to fill with
    the scientific buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `TableRow` element inside the `scientific_functions TableLayout`,
    to contain the first row of scientific `Button` elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the first five scientific functions as `Button` elements inside the
    new `TableRow`. The `Button` ID should be the same as the name of the resource
    string to be used as the `Button` label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first row of scientific `Button` widgets contains `inverse`, `square`, `cube`,
    `pow`, and `percent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `TableRow` with the second row of scientific `Button` widgets containing
    `cos`, `sin`, `tan`, `log2`, and `log10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third scientific `Button` widgets in the third `TableRow` should be `acos`,
    `asin`, `atan`, `log`, and `log1p`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fourth and final `TableRow` of `Button` widgets should be `e`, `pi`, `random`,
    `sqrt`, and `hyp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That is all of the scientific functions, now create another `TableLayout` in
    the `LinearLayout` child element for the standard functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the contents of the `standard_functions TableLayout` in `res/layout/main.xml`
    into the new `TableLayout` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding layout, we reuse much of the basics that we created in the
    standard calculator layout, with the addition of a new `TableLayout` structure
    to contain the scientific functions. The new `TableLayout` is sized to a width
    of `wrap_content` and will only consume the amount of horizontal space needed
    to fit all of the `Button` widgets. The other main difference between the two
    `TableLayout` elements is that the scientific table doesn't stretch its columns,
    since this would effectively be the same as sizing it as `fill_parent` and leaving
    no space for the standard functions.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also notice that among the string resources used to create the scientific
    `Button` labels, those that use HTML markup, do so without using XML escape entities
    (such as `&lt;` and `&gt;`). This is the main indicator to the resource compiler
    that a string resource contains markup and should be consumed differently. This
    usage requires that all HTML markup that is placed into a string resource must
    both conform to the HTML 3.2 specification, and remain valid XML content.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to test the new landscape layout, you''ll either need to define an
    emulator device with a landscape screen size, or run the application on a physical
    device. Creating a virtual device in the emulator can be done with the **android**
    application in the **tools** directory of your Android SDK installation, the same
    tool used to create skeleton projects. The following is a screenshot of the new
    layout running on a physical Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4484_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Have a go hero – using include in existing layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding layout has several elements of the standard layout that it reuses.
    This is a good time to extract these elements into their own layout files and
    then make use of the `include` element to place them into the two specific layout
    resources. Information on layout includes can be found in [Chapter 5](ch05.html
    "Chapter 5. Developing Non-linear Layouts"), *Developing Non-Linear Layouts*.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `display.xml` layout resource to contain the `RelativeLayout` with
    the calculator display, and include this at the appropriate point in the `main.xml`
    layout resource files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `standard_buttons.xml` layout resource to contain the `TableLayout`
    named `standard_functions`, and include this at the appropriate point in the `main.xml`
    layout resource files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handling the Activity restart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the device changes orientation, the `CalculatorActivity` object on the
    screen is restarted with the new orientation. In this application, the restart
    leads to a serious problem: the state of the calculator is lost. As discussed
    in [Chapter 4](ch04.html "Chapter 4. Leveraging Activities and Intents"), *Leveraging
    Activities and Intents*, there are times when you need to take control of your
    application state in Android—saving it before shutdown and restoring it when the
    `Activity` is started again.'
  prefs: []
  type: TYPE_NORMAL
- en: You'll need to override the `Activity.onSaveInstanceState` method to store the
    current state of your calculator in the provided `Bundle`. This `Bundle` object
    will be provided to you in the `onCreate` method when being restarted due to a
    configuration change. In your `onCreate` method, check to make sure that the provided
    `Bundle` object is non-null before restoring the save parameters from it.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – implementing the scientific calculation logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The calculator should currently be able to function from the standard calculation
    buttons. However, the new scientific functions don't have any backing structures.
    Further, if you re-orientate your device to change between scientific and standard
    layouts, any "in-progress" calculation will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps that need to be completed for the scientific calculations to function
    as expected, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `onSaveInstanceState` to save the calculation state to the provided
    `Bundle` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `onCreate` method to restore the saved state from its provided
    `Bundle` object (assuming one is given).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the functionality required to make the scientific `Button` widgets function
    as expected, to the `Calculator` class you wrote earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supporting hardware keyboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The calculator we developed here is now a great on-screen Android calculator
    application, with both the simple and scientific functionality you'd expect. However,
    if a device has a hardware keyboard, the user will probably expect to be able
    to use it, which currently they can't. Further, if the device lacks a touchscreen,
    clicking on-screen buttons will quickly become frustrating. We need to implement
    hardware keyboard support for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the hardware keyboard handling code is only useful to you if you've
    done the "Have a go Hero" sections and built a `Calculator` class to perform the
    required functions. In order to handle hardware keyboard events, you'll use the
    methods declared in the `KeyEvent.Callback` interface. The `Activity` class implements
    the `KeyEvent.Callback` interface already, and provides default handling for all
    of the methods. For our handling of these key-events, we only need to override
    the `onKeyDown` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this `onKeyDown` implementation, it''s a good idea to make sure that the
    key events are coming from a hardware keyboard by checking the flags of the `KeyEvent`.
    It''s also a good idea to pass it to your parent class before processing it yourself.
    Finally, if you''re working on Android 2.0 (API-Level 5) or higher, you should
    check that the `KeyEvent` is not cancelled before processing it (again this is
    one of the `KeyEvent` flags). The following is a code snippet from my implementation
    of the `onKeyDown` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet invokes a method for each one of the different keys
    that can be pressed on a hardware keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your Android device doesn't have a hardware keyboard, you can test this code
    using the emulator—your PC's keyboard, and the on-screen keyboard to the right
    of the emulator display, are both classified as hardware keyboards by the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Adding in display animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, the application has all the makings of a great calculator application.
    However, the display is currently just a simple `TextView` object. In order to
    improve the user experience, we should make use of a `ViewSwitcher` object to
    swap the `TextView` out when the calculator operation is changed, or when the
    "equals" `Button` is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – animating the display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build a nice slide-out-slide-in animation for the calculator display,
    we'll need to define our own animations and bind them to a `ViewSwitcher` object.
    This will also require us to make changes to the Java code in order to handle
    the new mechanism. Since we don't want the view to animate each time a new digit
    is typed, we will make direct changes to the `TextView` currently on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new XML resource file in the `res/anim` directory named `slide_out_top.xml`,
    and open this in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a y-translate animation from `0%` to `100%` as the only element in
    the animation resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new XML resource file in the `res/anim` directory named `slide_in_bottom.xml`,
    and open this file in an editor or IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a y-translate animation from `100%` to `0%` as the only element in
    the animation resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open either your `display.xml` file, or both of the `main.xml` files in your
    editor of IDE, and which among them you should open will depend on whether you
    have completed the "Have a go Hero – Layout Includes".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `RelativeLayout` used for the display, replace the `TextView` named
    `display` with a `ViewSwitcher` element using the two new animation resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As child elements to the `ViewSwitcher`, declare two `TextView` elements with
    the `CalculatorTextDisplay` style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both of the `TextView` elements will be identical to each other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The use of the `ViewSwitcher` for the display will cause any existing Java code
    to crash, since the Java code will be expecting the object to be a `TextView`
    of some sort. What you need to do instead is update the display using the `ViewSwitcher.getCurrentView`,
    instead of the `ViewSwitcher` itself.
  prefs: []
  type: TYPE_NORMAL
- en: When an operation `Button` is used, for example, the multiply or equals `Button`,
    you'll want to place the next display content on the `ViewSwitcher.getNextView`
    widget, and then invoke the `ViewSwitcher.showNext()` method. The animation of
    the number disappearing upwards with the new content appearing from the bottom
    of the display is a simple, but explanatory animation. It's also quite commonly
    used in calculator applications, meaning the user will usually be comfortable
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: In this application's case, the animation is more eye-candy than useful. However,
    if you implemented a history-stack in the calculator, the animation could be reversed
    when the user presses the "back" `Button`. A history-stack in a calculator is
    a very useful structure because it allows slight variations of the same calculations
    to be run over and over again.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – rounding off
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This calculator application is quite complete at this point. It''s been styled,
    and has some nice eye-candy and functions as expected. It does have a few caveats,
    however—the scientific calculation layout doesn''t work very well on small-screen
    devices. The following screenshot is the application running in scientific layout
    on a small-screen phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Have a go hero – rounding off](img/4484_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding image also demonstrates how some devices theme applications.
    In order to make sure the application works well on all devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a new `values` directory for small-screen devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `styles.xml` file in the directory with styles that have less margin
    and padding than the defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the size of the `display` font when on a small-screen device that has
    a landscape orientation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This sort of rounding-off process will follow most successful Android application
    projects. It's a matter of trying the application out on various different emulator
    configurations and devices, and then leveraging the resource-loaders to ensure
    the application works well on as many devices as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an application theme is a key part of the success of a new application,
    whether running on Android, the desktop, or on the Web. We've explored how to
    make use of the various tools that Android provides in order to keep an application
    consistent in order to keep it user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: An application's theme, and its look and feel go far beyond the simple styling.
    The more you personally use you application, the more you will see places where
    a slightly different color, or a transition animation will make a difference.
    Each of those small differences is what makes an application truly user-friendly,
    because it makes the application feel polished.
  prefs: []
  type: TYPE_NORMAL
- en: While running on hundreds of wildly different devices, Android makes it easy
    for developers to keep their applications running as though they were built specifically
    for that hardware. The resource-loader system is one of the most key structures
    in Android, and not to leverage it, can be suicidal to the application.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly recommend familiarizing yourself with existing Android applications,
    as well as applications on other mobile devices. Knowing how to drive a decent
    image-manipulation application also goes a long way. Draw a diagram of each of
    your screens before your start building them, and pencil and paper is often the
    best way to get an idea about the user interface, before you start coding.
  prefs: []
  type: TYPE_NORMAL
- en: Think carefully about where you can use the existing Android icons and styles,
    and where you will want to replace or extend them. You always want to keep your
    application consistent, but adding some flashy eye-candy is often what makes an
    application stand out from the crowd.
  prefs: []
  type: TYPE_NORMAL
- en: With the combination of XML resources and the Java language, Android is a highly
    compelling platform to design and code for. It's widely deployed and has excellent
    developer support. There are dozens of hardware manufacturers producing Android
    devices, in all shapes and sizes, and thousands of developers making applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we've worked on leveraging the Android platform to build applications
    that are user-focused, easy to use, and good looking. The Android platform and
    the Android Markets allow for a captive audience and great exposure for new ideas.
    From here on, you should be able to add your own unique ideas and work to the
    Android ecosystem. Anything that has been done can always be done better, and
    anything that hasn't been done, has people waiting for it. Whether you're part
    of a team, or hacking away on the-next-big-thing in your attic at night, the key
    to a successful application is a great user-interface.
  prefs: []
  type: TYPE_NORMAL
