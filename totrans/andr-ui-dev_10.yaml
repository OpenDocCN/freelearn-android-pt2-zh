- en: Chapter 10. Building an Application Theme
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 构建应用程序主题
- en: '*Whether graphical styling or not, every application has a theme. The theme
    of an application is what gives it a distinct appearance and logic.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*无论是否涉及图形样式，每个应用程序都有一个主题。应用程序的主题使其具有独特的外观和逻辑。*'
- en: 'When a person uses a mobile application (which accounts for most Android devices),
    there are some fundamental differences in their behavior when compared to a desktop
    or laptop:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用移动应用程序（大多数安卓设备的情况）时，与台式机或笔记本电脑相比，他们的行为有一些根本性的不同：
- en: They often have less time for the application, and therefore less patience
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们通常在应用程序上的时间更少，因此耐心也更小
- en: They are often focused entirely on a single application at a time
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们通常一次只专注于一个应用程序
- en: Touchscreen devices encourage an almost tactile response
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触摸屏设备鼓励用户进行近乎触觉的交互响应
- en: Android devices are diverse and run on almost everything including common mobile
    phones, tablets, laptops, and a few desktop machines. An Android application is
    expected to function well in all of these environments, and the theme of the application
    should be carefully constructed to allow the user the best possible access to
    each of these devices.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备种类繁多，几乎兼容所有设备，包括常见的手机、平板、笔记本电脑，甚至一些桌面电脑。一个安卓应用程序预期在这些环境中都能良好运行，应用的主题应精心构建，以便用户在各种设备上获得最佳访问体验。
- en: The device interface forms a part of your application theme. When using a mouse
    on a desktop or laptop device, a user interface designed with only touchscreen
    in mind may feel over-sized to a user (since all widgets need to be finger-sized).
    Contrary to this, an application designed for a mouse-driven system will normally
    include rollover effects, which won't work properly on a touchscreen device. The
    only way to make sure your application works on all these different devices is
    to consider all of these environments when building the screens of your application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 设备界面构成了你的应用程序主题的一部分。在台式机或笔记本电脑上使用鼠标时，仅考虑触摸屏的用户界面可能对用户来说会显得过大（因为所有控件都需要适合手指大小）。相反，为鼠标驱动的系统设计的应用程序通常会包含悬停效果，这在触摸屏设备上无法正常工作。确保你的应用程序在所有这些不同设备上都能正常工作的唯一方法是，在构建应用程序屏幕时考虑所有这些环境。
- en: Android itself defines a theme of sorts and as far as possible, applications
    built for the Android platform should attempt to conform or extend this theme,
    rather than redefine it. This doesn't mean your application must look and behave
    exactly the same way as all other Android applications, but rather that your application
    should be based on the underlying principles that Android lays down.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓自身定义了一种主题，尽可能的话，为安卓平台构建的应用程序应尝试符合或扩展这一主题，而不是重新定义。这并不意味着你的应用程序必须看起来和行为与其他所有安卓应用程序完全相同，但你的应用程序应该基于安卓所设定的基本原则。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that many of the device manufacturers define additional parts to
    the basic Android theme, and your application should do the same.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，许多设备制造商对基本的安卓主题定义了额外的部分，你的应用程序也应如此。
- en: In this chapter, we will examine the building of an application, including the
    design of the screens, their construction, and their styling. We'll also examine
    how this application will interact with various different devices, making sure
    it looks right and functions as the user would expect it to. The application we're
    going to build is a calculator, having both a standard and a scientific calculator.
    The calculator will be styled to look more like a physical calculator than a generic
    Android application, and will change its functionality according to the capabilities
    of the device it's running on. Overall, we'll be defining an application with
    its own, consistent theme.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨应用程序的构建，包括屏幕设计、构建和样式设计。我们还将研究此应用程序如何与各种不同设备交互，确保其外观和功能符合用户预期。我们将构建一个计算器应用程序，包含标准计算器和科学计算器功能。计算器将设计得更像物理计算器而非普通的安卓应用，并根据运行设备的性能调整其功能。总体而言，我们将定义一个具有自身一致主题的应用程序。
- en: Creating a basic calculator layout
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本的计算器布局
- en: The first thing we need in order to build this project is a basic portrait layout
    for a standard calculator. This basic layout will serve as the screen that the
    user will look at when they first start the application. Given the nature of a
    calculator application and how the user perceives it, it's very important that
    the screen be simple and that the application starts as quickly as possible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建这个项目，我们首先需要一个标准的计算器的基本纵向布局。这个基本布局将作为用户首次启动应用程序时所看到的屏幕。鉴于计算器应用程序的性质以及用户对它的感知，屏幕简单且应用程序启动越快越好，这一点非常重要。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's important that the calculator screen takes up all available space with
    functional components, in order to make itself as quick to use as possible (bigger
    buttons equals easier usage).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 计算器屏幕占据所有可用空间的功能性组件非常重要，以使其尽可能快地使用（更大的按钮等于更容易使用）。
- en: Pop quiz
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验
- en: When do layout resources become Java classes?
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 布局资源何时变成Java类？
- en: When the resource-processor is run
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当运行资源处理器时
- en: When the application package is built
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序包被构建时
- en: When the layout resource is loaded
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当布局资源被加载时
- en: Never
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从不
- en: How do you reference widgets that are not defined by default in Android?
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何引用那些在Android中默认未定义的小部件？
- en: By using the full class name as an element name
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用完整的类名作为元素名称
- en: By defining an XML namespace for the Java package
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过为Java包定义一个XML命名空间
- en: It's currently impossible
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前不可能
- en: By specifying the Java package name in the the `android:package` attribute
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `android:package` 属性中指定Java包名
- en: What is the default width and height of a `View` object?
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 `View` 对象的默认宽度和高度是什么？
- en: The size of it's content
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它内容的大小
- en: Zero-by-zero pixels
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 零像素
- en: It depends on the `ViewGroup` it's placed in
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它取决于它所在的 `ViewGroup`
- en: The width of its parent and the height of its content
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它父级的宽度和内容的高度
- en: You write a layout resource as XML, what format is it stored in?
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将布局资源写成XML，它以什么格式存储？
- en: As raw XML text
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为原始XML文本
- en: Android binary XML
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android二进制XML
- en: Layout specific binary format
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 布局特定的二进制格式
- en: Java classes
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java类
- en: Designing a standard calculator
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计一个标准计算器
- en: 'Before starting to build the calculator application, it''s a good idea to sketch
    out what it''s going to look like. This will also help you to decide how exactly
    to construct the screens. Since a calculator is something that is both, a rather
    old invention as well as something people are very familiar with, it''s important
    to stick to the most common design. If you introduce a calculator that is too
    foreign to people, they may well not have the patience to "get to know" your application.
    New ideas are good (that is, slide keyboards), but the most successful are those
    that are extensions of existing ideas. Also, make it obvious to the user how they
    work. The following is a block diagram of the standard calculator screen that
    we will start building:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建计算器应用程序之前，最好先勾勒出它将是什么样子。这将帮助你决定如何确切地构建屏幕。由于计算器既是一个相当古老发明的东西，也是人们非常熟悉的东西，因此遵循最常见的设计非常重要。如果你推出的计算器对人们来说太陌生，他们可能没有耐心去“了解”你的应用程序。新想法是好的（即滑动键盘），但最成功的还是现有想法的延伸。同时，要向用户明确它们的工作方式。以下是我们将开始构建的标准计算器屏幕的区块图：
- en: '![Designing a standard calculator](img/4484OS_10_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设计一个标准计算器](img/4484OS_10_01.jpg)'
- en: It's important that we maximize the use of the screen space, so we'll do our
    best to make the buttons as large as possible. Also, we want to space the buttons
    slightly apart in order to avoid the undesired button from being pressed by the
    user. Since we only have a single output area, we'll make sure that the display
    area is also sufficiently large.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要最大化利用屏幕空间，因此我们会尽可能使按钮变大。同时，我们希望按钮之间稍微留点空隙，以避免用户不小心按下不想按的按钮。由于我们只有一个输出区域，我们会确保显示区域也足够大。
- en: The arrow in the display area will be an icon which will act as a *Backspace*
    button, allowing the user to delete unwanted content. It's always important to
    give the user a way to undo what they have done. We'll use an icon similar to
    the one used in the dialer application, which will keep a feeling of overall consistency
    with the rest of the system. This also effectively gives us space for an additional
    button. This user interface doesn't include the normal "memory" functions associated
    with many calculators. The basic screen is designed to be as simple as possible,
    and we'll introduce more functionality as we develop the application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 显示区域中的箭头将是一个图标，作为*退格*按钮，允许用户删除不需要的内容。给用户提供一种撤销操作的方法始终很重要。我们将使用与拨号应用中类似的图标，这将保持与系统的其他部分的整体一致性。这也有效地为我们提供了额外按钮的空间。这个用户界面不包括许多计算器所关联的常规“记忆”功能。基本屏幕设计得尽可能简单，我们将在开发应用程序时引入更多功能。
- en: Time for action – building the standard calculator
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手操作——构建标准计算器
- en: The first layout for the calculator will consist of a normal series of **0**
    to **9** buttons with a button for the various basic arithmetic operations—add,
    subtract, multiply, and divide. It will also have buttons for equals and a button
    for the decimal point. While this would be a very easy screen to build in Java
    code, we'll build this example entirely as an XML resource. Since this application
    will have several different permutations of the same screen, using layout resource
    files with no Java code will make your life much easier.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 计算器的第一个布局将由一系列正常的**0**至**9**的按钮组成，以及用于各种基本算术运算的按钮——加、减、乘、除。它还将包括等于号按钮和小数点按钮。尽管在Java代码中构建这样一个简单的屏幕非常容易，但我们将完全使用XML资源来构建这个示例。由于这个应用程序将具有相同屏幕的几种不同排列组合，使用不带Java代码的布局资源文件将使你的生活更加轻松。
- en: 'Start by creating a new project for the calculator:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为计算器创建一个新项目：
- en: '[PRE0]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open the standard main layout file `/res/layout/main.xml`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开标准的主体布局文件`/res/layout/main.xml`。
- en: Remove the generated layout structure from the file.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件中删除生成的布局结构。
- en: 'Start by declaring a vertical `LinearLayout` as a root element to consume all
    the available space on the screen:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，声明一个垂直的`LinearLayout`作为根元素，以占据屏幕上所有可用空间：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Declare a `RelativeLayout` that will compose the display with the **Delete**
    or **Cancel** button that the user can use to remove unwanted input:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`RelativeLayout`，它将由显示和用户可以用来删除不需要输入的**删除**或**取消**按钮组成：
- en: '[PRE2]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the standard Android input delete icon in an `ImageView` on the right side
    of the `RelativeLayout`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RelativeLayout`的右侧使用`ImageView`显示标准的Android输入删除图标：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On the left side of the `RelativeLayout`, create a `TextView` that will actually
    display the numeric status of the calculator:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RelativeLayout`的左侧，创建一个`TextView`，它将实际显示计算器的数字状态：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inside the `LinearLayout`, declare a `TableLayout` that will be used to contain
    the button inputs for the simple calculator:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LinearLayout`内部，声明一个`TableLayout`，用于包含简单计算器的按钮输入：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `TableLayout` will be made up of four `TableRow` objects. Declare the first
    of these with no margin and a `layout_weight` of `1`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TableLayout`将由四个`TableRow`对象组成。声明第一个对象，无边距且`layout_weight`为`1`：'
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The top-right `Button` object needs to be the `plus` sign, which we also use
    as the name for the `Button` ID:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右上角的`Button`对象需要是`plus`符号，我们也将其用作`Button` ID的名称：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next three `Button` objects on the first row will be the numbers **1**,
    **2**, and **3**. These all need IDs as well:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行接下来的三个`Button`对象将是数字**1**、**2**和**3**。这些也需要ID：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Continue to declare `TableRow` objects with buttons in the order defined in
    the block-diagram.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续按块状图定义的顺序声明带有按钮的`TableRow`对象。
- en: Open the `CalculatorActivity.java` source file in an editor or IDE.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器或IDE中打开`CalculatorActivity.java`源文件。
- en: 'In the `onCreate` method, ensure that the content view of the `Activity` is
    set to the `main` layout you''ve just defined:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中，确保将`Activity`的内容视图设置为刚才定义的`main`布局：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*What just happened?*'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: You should now have a basic user interface for a calculator; although it still
    looks like a very generic Android application, but it's a start at the basic level.
    The user interface will need styling work, including colorization and some font
    changes, but the basic structure is now complete. The use of the `RelativeLayout`
    is to ensure that we can correctly position the delete icon to the right of the
    `TextView`, no matter what the size of the screen is.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经为计算器创建了一个基本用户界面；尽管它仍然看起来像一个非常通用的Android应用程序，但这至少是从基础层面开始的。用户界面需要做一些样式设计工作，包括着色和一些字体更改，但基本结构现在已经完成。使用`RelativeLayout`是为了确保我们可以正确地将删除图标定位在`TextView`的右侧，无论屏幕大小如何。
- en: 'In order for the buttons to consume as much of the available space as possible,
    we tell the `TableLayout` to stretch all of its columns. If the `TableLayout`
    doesn''t stretch its columns, then it will only consume as much horizontal space
    as its children require (effectively the same as `wrap_content` width). Although
    the `TableLayout` is told to consume all of the vertical space as well, its children
    will be sized according to the amount of space they need, which is why the buttons
    don''t take up all of the available screen space. The following image is a screenshot
    of the basic calculator running in the emulator:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让按钮尽可能占用可用空间，我们告诉`TableLayout`拉伸其所有列。如果`TableLayout`不拉伸其列，那么它将只占用其子项所需的水平空间（实际上与`wrap_content`宽度相同）。尽管告诉`TableLayout`也占用所有垂直空间，但其子项将根据它们所需的空间进行大小调整，这就是为什么按钮没有占用所有可用屏幕空间的原因。以下图像是基本计算器在模拟器中运行时的截图：
- en: '![What just happened?](img/4484_10_02.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/4484_10_02.jpg)'
- en: Building the calculator styling
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建计算器样式。
- en: We really want this calculator to look more like a real calculator, and for
    that we need to apply some styling. The current theme of the calculator is entirely
    the standard Android theme, and while it looks exactly like the rest of the Android
    system, it doesn't really suit this application. We want to style both the buttons
    and the display area of the application. We'll define style values in a resource
    file and relate to these in the layout XML file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的希望这个计算器看起来更像一个真正的计算器，为此我们需要应用一些样式。目前计算器的主题完全是标准的Android主题，尽管它看起来与Android系统的其他部分完全一样，但它并不真正适合这个应用程序。我们希望对按钮和应用程序的显示区域进行样式设计。我们将在资源文件中定义样式值，并在布局XML文件中引用这些样式。
- en: To start with, we'll define a series of nine-patch images to create our own
    button designs. We need three different images for this purpose. The first image
    is the "normal" state of the button, the second will be the "pressed" state of
    the button, and finally, a "focused" state of the button.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义一系列九宫格图像来创建我们自己的按钮设计。为此，我们需要三张不同的图片。第一张是按钮的“正常”状态，第二张是按钮的“按下”状态，最后是按钮的“聚焦”状态。
- en: Pop Quiz
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验。
- en: What are the black lines around the border of a nine-patch image for?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 九宫格图像边缘周围的黑色线条是做什么的？
- en: Hints to the system as to what parts of the image to copy
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供给系统关于图像中哪些部分需要复制的提示。
- en: To indicate what parts of the image to scale and where to put the widget content
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指示图像中哪些部分需要缩放以及小部件内容放置的位置。
- en: Defines what parts of the image contain meta-information
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义图像中包含元信息的内容部分。
- en: What formats may a nine-patch image be stored as?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 九宫格图像可以存储为什么格式？
- en: JPEG, GIF, or PNG image file
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JPEG、GIF或PNG图像文件。
- en: An XML file with an embedded TIFF
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 嵌入TIFF的XML文件。
- en: A portable-network-graphic image
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可移植网络图形图像（Portable Network Graphic image）。
- en: What does the `draw9patch` application do?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`draw9patch`应用程序是做什么的？'
- en: Renders a nine-patch image in various shapes and sizes
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在各种形状和大小中渲染九宫格图像。
- en: It's an application for drawing nine-patch images
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个用于绘制九宫格图像的应用程序。
- en: Generates the meta-data for a nine-patch image as an XML file
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为九宫格图像生成元数据作为XML文件。
- en: Time for action – creating the button images
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手操作——创建按钮图像。
- en: In order to build the button images in this section you will need to download
    "The GIMP" (available at [http://www.gimp.org](http://www.gimp.org)). It's perfect
    for this sort of image creation or manipulation and has the added advantage that
    it's open source.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本节中构建按钮图像，你需要下载“GIMP”（可在[http://www.gimp.org](http://www.gimp.org)获取）。它非常适合这种图像创建或操作，而且它还有一个开源的优势。
- en: Open "The Gimp", and select **File** | **New** to create a new image.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“GIMP”，选择**文件** | **新建**以创建新图像。
- en: Change the width and height to `38x38` pixels.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将宽度和高度更改为`38x38`像素。
- en: Open the **Advanced Options** and change the **Fill With** option to **Transparency**
    so that there is no background color.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**高级选项**并将**填充为**选项更改为**透明**，这样就没有背景色了。
- en: To help with sizing, zoom in to about **800%**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了帮助调整大小，放大至大约**800%**。
- en: Select the **Rectangle** tool in the top-left of the toolbox (the default keyboard
    shortcut key is *R*).
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具箱左上角选择**矩形**工具（默认快捷键是*R*）。
- en: Enable the **Rounded Corners** option and set it to `5`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**圆角**选项并将其设置为`5`。
- en: Enable the **Fixed** option and select **Size** in the drop-down list.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**固定**选项，并在下拉列表中选择**大小**。
- en: Enter `36x36` as the fixed size of the rectangle selection.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`36x36`作为矩形选择的固定大小。
- en: Place the selection box at the center of the image canvas and there should be
    a one-pixel border between the selection box and the edge of the image.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将选择框放在图像画布中心，选择框和图像边缘之间应该有一个单像素的边界。
- en: Double-click on the "Foreground color" (black by default) in the toolbox.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击工具箱中的“前景色”（默认为黑色）。
- en: Enter `444444` in the **Hex Notation** box of the color selector.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在颜色选择器的**十六进制表示**框中输入`444444`。
- en: Close the color selector dialog box.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭颜色选择器对话框。
- en: Select the **Bucket Fill** tool in the toolbox (the default keyboard shortcut
    is *Shift-B*).
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具箱中选择**桶填充**工具（默认快捷键是*Shift-B*）。
- en: Click inside the selection box to fill it with the selected color.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择框内部点击，用选定的颜色填充它。
- en: Use the **Select** menu and click the **None** option to remove the selection
    box.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**选择**菜单，点击**无**选项以移除选择框。
- en: Select **Filter** | **Decor** | **Add Bevel**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**滤镜** | **装饰** | **添加斜角**。
- en: Change the **Thickness** option to `3`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**厚度**选项更改为`3`。
- en: Uncheck the **Work on Copy** option and select the **Ok** button.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选**在副本上工作**选项，并点击**确定**按钮。
- en: Select the **Rectangle** tool from the toolbox again.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从工具箱中选择**矩形**工具。
- en: Uncheck the **Rounded Corners** and **Fixed** options.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选**圆角**和**固定**选项。
- en: Use the selection tool to select a single pixel wide vertical box on the inside
    of the "button" shape, being careful to only select part of the content area of
    the button, avoiding the beveled border space:![Time for action – creating the
    button images](img/4484_10_03.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用选择工具在“按钮”形状内部选择一个单像素宽的垂直框，小心只选择按钮内容区域的一部分，避开斜角边框空间：![行动时间 – 创建按钮图像](img/4484_10_03.jpg)
- en: By placing the cursor in the middle of the selection box, drag the selection
    horizontally to the very edge of the of the image canvas (inside the one-pixel
    border).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标放在选择框中间，将选择框水平拖动至图像画布边缘（在单像素边界内）。
- en: Double-click on the "Foreground" rectangle again.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次双击“前景”矩形。
- en: Reset the color to pure black.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将颜色重置为纯黑色。
- en: Select the **Bucket Fill** option.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**桶填充**选项。
- en: Click inside the selection box to create a single pixel wide, black vertical
    line down the left-side of the image.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择框内部点击，创建一个单像素宽，黑色的垂直线条在图像左侧。
- en: Create a similar vertical line on the right side of the image.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像右侧创建一个类似的垂直线条。
- en: Create a horizontal single-pixel high black line at the top and bottom of the
    image.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像的顶部和底部创建一个单像素高的水平黑色线条。
- en: Save the image in your `res/drawable` directory as `button.9.png`, leaving the
    PNG Options as their defaults.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`res/drawable`目录中将图像保存为`button.9.png`，保持PNG选项为默认值。
- en: Repeat this exact process, changing the `444444` foreground color, as done in
    step 11, to `c16400` and save the new image as `button_focus.9.png`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上述过程，将前景色`444444`更改为如步骤11中的`c16400`，并将新的图像保存为`button_focus.9.png`。
- en: By inverting the image with the **Flip Tool** (default keyboard shortcut *Shift*
    + *F*), you will create the `button_down.9.png` image.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**翻转工具**（默认快捷键*Shift* + *F*）翻转图像，你将创建`button_down.9.png`图像。
- en: '*What just happened?*'
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: 'While there are many steps to building images, they are fundamentally very
    easy to create with the right tool and a bit of experimentation. If all you need
    is a simple button or something similar, then it''s well worth finding a few tutorials
    on how to use "The GIMP" or a similar tool. There are great tutorials online at
    the following links:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然构建图像有许多步骤，但使用正确的工具并进行一些实验，它们本质上非常容易创建。如果你只需要一个简单的按钮或类似的东西，那么找一些关于如何使用“GIMP”或类似工具的教程是很有价值的。以下链接有一些在线教程：
- en: '[http://www.gimp.org/tutorials/](http://www.gimp.org/tutorials/)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.gimp.org/tutorials/](http://www.gimp.org/tutorials/)'
- en: '[http://gimp-tutorials.net/](http://gimp-tutorials.net/)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://gimp-tutorials.net/](http://gimp-tutorials.net/)'
- en: 'The images you have saved in the last section should look like the following
    images that I have created for my calculator application:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你在上一个部分保存的图像应该看起来像我为我的计算器应用程序创建的以下图像：
- en: '![What just happened?](img/4484_10_03b.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/4484_10_03b.jpg)'
- en: Time for action – styling the calculator buttons
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间——美化计算器按钮
- en: The next thing we need to do is use a selector-list and the nine-patch images
    you've just created to style the calculator buttons. We'll also be defining the
    button styling in a resource file so that we don't have to specify all of the
    styling for each of the buttons. In order to replace the standard button with
    our image, we only need to replace its background with the one we create for the
    purpose.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要做的是使用选择器列表和你刚刚创建的九宫格图像来设置计算器按钮的样式。我们还将定义按钮样式在资源文件中，这样我们就不必为每个按钮指定所有的样式。为了用我们创建的图像替换标准按钮，我们只需要用我们创建的背景替换它的背景。
- en: In the `res/drawable` directory, create a new XML file named `button.xml` and
    open it in an editor.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/drawable`目录中，创建一个名为`button.xml`的新XML文件，并在编辑器中打开它。
- en: 'Define the root element of the file as a fixed-size selector:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件的根元素定义为一个固定大小的选择器：
- en: '[PRE10]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the pressed button state, as the first child of the selector:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个被按下的按钮状态，作为选择器的第一个子项：
- en: '[PRE11]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The second child of the selector should be the focused state:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择器的第二个子项应该是获得焦点状态：
- en: '[PRE12]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The final selector child is generic, and is the normal state:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择器的最后一个子项是通用的，是正常状态：
- en: '[PRE13]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new file named `styles.xml` in the `res/values` directory and open
    it in an editor.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/values`目录中创建一个名为`styles.xml`的新文件，并在编辑器中打开它。
- en: 'The root element of the `styles.xml` file should be a resources element with
    no namespace declaration (it''s not needed in this file):'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`styles.xml`文件的根元素应该是一个没有命名空间声明的资源元素（在这个文件中不需要）：'
- en: '[PRE14]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Define the first style in the file as `CalculatorButton` with a parent style
    of the default Android `Button` widget style:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中定义第一个样式为`CalculatorButton`，其父样式为默认的Android `Button`小部件样式：
- en: '[PRE15]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set the text size to a nice large font and a light grey color:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本大小设置为一种美观的大字体和浅灰色：
- en: '[PRE16]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Specify the background of the style as the new `button` drawable resource:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将样式的背景指定为新的`button`可绘制资源：
- en: '[PRE17]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a two-pixel border around each of the `Button` widgets to create a little
    bit of spacing:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个`Button`小部件周围创建一个两像素的边框，以创建一点间距：
- en: '[PRE18]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make sure the `Button` widgets consume all their available vertical space:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保让`Button`小部件消耗它们可用的所有垂直空间：
- en: '[PRE19]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Open the `main.xml` layout resource in an editor.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开`main.xml`布局资源。
- en: 'On each of the `Button` elements, add a style attribute to give them the styling
    you just defined in the `styles.xml` file:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个`Button`元素上，添加一个样式属性，以赋予你刚刚在`styles.xml`文件中定义的样式：
- en: '[PRE20]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*What just happened?*'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: 'We''ve just re-styled the `Button` objects for the calculator screen. The style
    is the child of the standard Android `Button` widget. The new styling is mostly
    driven by the change of the background image to the nine-patch image we created
    earlier. To work with the new background image, we also specify a font color and
    size. The new calculator user interface will look like the following screenshot
    when run:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为计算器屏幕重新设计了`Button`对象。这个样式是标准Android `Button`小部件的子样式。新的样式主要是通过将背景图像更改为我们之前创建的九宫格图像来驱动的。为了与新的背景图像一起工作，我们还指定了字体颜色和大小。运行时，新的计算器用户界面将如下截图所示：
- en: '![What just happened?](img/4484_10_07.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/4484_10_07.jpg)'
- en: In the original code, there was no margin around the buttons specified, but
    in the new code, we've added an explicit margin in the custom styling. Our nine-patch
    images have no padding around the content area.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始代码中，没有指定按钮周围的边距，但在新代码中，我们在自定义样式中添加了明确的边距。我们的九宫格图像在内容区域周围没有填充。
- en: You'll notice that we style each of the `Button` widgets in the layout. As already
    mentioned in the previous chapter, the style attribute is not part of the Android
    resources namespace. Unfortunately, Android doesn't currently allow us to style
    all widgets of a particular class. Instead, we are forced to either style each
    of the widgets individually, or style every widget in an `Activity` or application
    with the same styles. As part of the new `Button` styling, we declared a drawable
    resource as a `<selector>` resource. As with the tab structures, `Button` objects
    can be styled to use different drawable resources for their different states.
    In this case, we specify background images for instances when the `Button` is
    focused, pressed, or is in normal state. The styling only applies to the background
    image, since the background of the new `Button` objects is the `<selector>` resource.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们在布局中为每个`Button`小部件设置样式。正如在前一章中提到的，样式属性不是Android资源命名空间的一部分。不幸的是，Android目前不允许我们为特定类的所有小部件设置样式。相反，我们只能选择为每个小部件单独设置样式，或者在`Activity`或应用程序中为所有小部件设置相同的样式。作为新`Button`样式的一部分，我们声明了一个`<selector>`资源的可绘制资源。与标签结构一样，`Button`对象可以被样式化为使用不同的可绘制资源来表示它们的不同状态。在这种情况下，我们为`Button`被聚焦、按下或处于正常状态时指定背景图像。样式只适用于背景图像，因为新`Button`对象的背景是`<selector>`资源。
- en: Time for action – styling the display
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——设置显示样式
- en: 'Currently, the numeric display really looks quite awful. That''s mostly because
    we just don''t have any styling for it, and currently it''s just a plain `TextView`
    object. We want the styling to encompass both the `TextView` object and the `ImageView`.
    The display currently looks like the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，数字显示看起来确实相当糟糕。这主要是因为我们还没有为其设置任何样式，现在它只是一个普通的`TextView`对象。我们希望样式能够同时涵盖`TextView`对象和`ImageView`。当前的显示效果如下截图所示：
- en: '![Time for action – styling the display](img/4484_10_08.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间——设置显示样式](img/4484_10_08.jpg)'
- en: In order to fix this display and bring its styling inline with our new `Button`
    styling, we'll create two different styles. One to create a border and background
    around the `TextView` and `ImageView` objects, and another to style the `TextView`
    widget with a more suitable font.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复这个显示，并将其样式与我们的新`Button`样式保持一致，我们将创建两种不同的样式。一种是在`TextView`和`ImageView`对象周围创建边框和背景，另一种是用更合适的字体样式化`TextView`小部件。
- en: Create a new drawable resource file named `display_background.xml` and open
    it in your editor or IDE.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`display_background.xml`的新可绘制资源文件，并在你的编辑器或IDE中打开它。
- en: 'The root of the display background needs to be a rectangle shape:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示背景的根需要是一个矩形形状：
- en: '[PRE21]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Declare some padding to inset the text and image:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一些内边距来缩进文本和图像：
- en: '[PRE22]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a solid-grey background color for the rectangle:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为矩形创建一个纯灰背景色：
- en: '[PRE23]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Specify the stroke size and set its color to white:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定描边大小，并将其颜色设置为白色：
- en: '[PRE24]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Open the `res/values/styles.xml` file in your editor or IDE.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的编辑器或IDE中打开`res/values/styles.xml`文件。
- en: 'Add a new `<style>` item for the display wrapper, and name the new style `CalculatorDisplay`
    with no parent style:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为显示包装器添加一个新的`<style>`项，并将新样式命名为没有父样式的`CalculatorDisplay`：
- en: '[PRE25]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a small margin underneath the display wrapper:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示包装器下方创建一个小边距：
- en: '[PRE26]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add some padding above the display:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示上方添加一些内边距：
- en: '[PRE27]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Start a new `<style>` element with the name `CalculatorTextDisplay`, and the
    parent style should be the standard `TextView` styling:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以名称`CalculatorTextDisplay`开始一个新的`<style>`元素，父样式应该是标准的`TextView`样式：
- en: '[PRE28]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the new style, set font to `45` pixels, with black monospaced font:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新样式中，将字体设置为`45`像素，黑色等宽字体：
- en: '[PRE29]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The text of the calculator display should be right-aligned, so we''ll also
    specify the gravity to apply to the `TextView`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算器显示的文本应该是右对齐的，因此我们还将指定应用到`TextView`的重力属性：
- en: '[PRE30]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Open the `res/layout/main.xml` file in your editor or IDE.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的编辑器或IDE中打开`res/layout/main.xml`文件。
- en: 'Specify the style of the `RelativeLayout` as `CalculatorDisplay`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`RelativeLayout`的样式指定为`CalculatorDisplay`：
- en: '[PRE31]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Set the style of the `TextView` for the display:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置显示的`TextView`样式：
- en: '[PRE32]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '*What just happened?*'
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: 'The new styling applies to the `RelativeLayout` that wraps around the `TextView`
    object and the `ImageView` object. By styling this `RelativeLayout`, you effectively
    join the `TextView` and `ImageView` together as a single widget. If you look at
    the following screenshot, you''ll see how this works for your user:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 新的样式适用于围绕`TextView`对象和`ImageView`对象的`RelativeLayout`。通过设置这个`RelativeLayout`的样式，你实际上将`TextView`和`ImageView`作为一个单一的小部件合并在一起。如果你看以下截图，你会看到这是如何为你的用户工作的：
- en: '![What just happened?](img/4484_10_09.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/4484_10_09.jpg)'
- en: The margin on top and below the `TextView` object will shrink the amount of
    available space that can be used by the buttons. On a long vertical space, the
    buttons would normally become long and look disproportionate, so by adding a margin
    to the display area, we help keep the buttons a more square shape.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextView`对象上下的边距会减少按钮可用的空间。在长垂直空间中，按钮通常会变长，看起来不成比例，因此通过为显示区域添加边距，我们可以帮助保持按钮更接近正方形。'
- en: Have a go hero – Adding calculator logic
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄——添加计算器逻辑
- en: Right now, what we've got is a great user interface for a simple calculator.
    However, it's nothing more than a nice looking user interface. The next thing
    to do is to add some logic to the works.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们有一个简单计算器的优秀用户界面。然而，它只是一个看起来很不错的用户界面。接下来要做的就是在其中添加一些逻辑。
- en: 'Here are the steps that need to be completed to have a functional calculator:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成功能计算器所需的步骤：
- en: Implement the `OnClickListener` interface and register it with each of the `Button`
    widgets on the user interface.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`OnClickListener`接口，并将其注册到用户界面上的每个`Button`小部件。
- en: Create a new `Calculator` class to handle the actual calculations and store
    the non-user-interface state of the calculator.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`Calculator`类来处理实际的计算，并存储计算器的非用户界面状态。
- en: Use the `StringBuilder` class to implement the construction and display of the
    currently entered value.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`StringBuilder`类实现当前输入值的构建和显示。
- en: Implement the basic calculations using the `double` datatype in order to cater
    for numbers with a decimal place.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`double`数据类型实现基本计算，以便处理带小数点的数字。
- en: Pop quiz
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验
- en: When selecting a resource string from a layout, how is the string selected?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当从布局中选取字符串时，字符串是如何被选中的？
- en: Directly from the root `values` strings resources
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接从根目录`values`字符串资源
- en: From a `strings.xml` file in the same directory as the layout
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从与布局相同的目录中的`strings.xml`文件
- en: From the `values` directory that is the closest match to the current configuration,
    and contains a string with the requested name
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从与当前配置最接近匹配且包含请求名称字符串的`values`目录
- en: From a `values` directory with the same selectors as the directory the layout
    resource file was selected from
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从具有与布局资源文件选择相同的限定符的`values`目录
- en: What is the correct filename to place a style resource in?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置样式资源的正确文件名是什么？
- en: Any file in the `values` directory
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`values`目录中的任何文件'
- en: '`styles.xml`'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`styles.xml`'
- en: '`values.xml`'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`values.xml`'
- en: '`theme.xml`'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`theme.xml`'
- en: How is resource selection in Java code different to resource selection from
    an XML resource file?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Java代码中选取资源与从XML资源文件中选取资源有何不同？
- en: The Java resource selection is faster
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java资源选择更快
- en: XML resources can only reference other resources with the same set of configuration
    qualifiers as themselves
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: XML资源只能引用具有相同配置限定符集合的其他资源。
- en: There are no significant differences
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有显著差异
- en: XML resources can only reference a subset of all the resource types.
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: XML资源只能引用所有资源类型的一个子集。
- en: Scientific landscape layout
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科学景观布局
- en: The scientific layout for the calculator is not simply a case of more buttons,
    because we want this layout to be used when the device is in a landscape orientation.
    This means we have significantly less vertical space, something the standard layout
    consumes lots of. To build this new user interface, we'll not just be defining
    a new layout resource, but also additional styling for the new layout.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 计算器的科学布局不仅仅是更多按钮的问题，因为当设备处于横屏方向时，我们希望使用此布局。这意味着我们可用的垂直空间大大减少，而标准布局占用了很多这样的空间。为了构建这个新的用户界面，我们不仅要定义一个新的布局资源，还要为新的布局添加额外的样式。
- en: The scientific layout also makes use of more complex text on its new buttons.
    Some mathematic functions such as square root, or inverse cosine have a specific
    notation that should be used. In these cases, we'll need to make use of either
    HTML styling or special characters. Fortunately, Android fully supports the UTF-8
    character set, both in functionality and font-rendering, making this process much
    easier.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 科学布局在其新按钮上也使用了更复杂的文本。一些数学函数，如平方根或反余弦，有特定的表示法应该被使用。在这些情况下，我们将需要使用 HTML 样式或特殊字符。幸运的是，Android
    完全支持 UTF-8 字符集，在功能和字体渲染方面都支持，这使得这个过程变得容易得多。
- en: Defining string resources for the scientific layout
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为科学布局定义字符串资源
- en: For the scientific functions, we'll define the string content of each as a resource
    string. This is partially in order to make them an independent part of the resource
    selection process (which is always recommended), but it's also to allow us to
    leverage the automatic HTML processing. If you make use of HTML in a string resource,
    that HTML will automatically be parsed by the resource processor if accessed with
    the `Resources.getText` method, instead of the usual `Resources.getString` method.
    This is exactly the way that the `TextView` class loads its string resources,
    making it even more attractive to place your text-content in a `values` resource
    file.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对于科学功能，我们将每个功能的字符串内容定义为一个资源字符串。这既是为了使它们成为资源选择过程的一个独立部分（这总是推荐的），同时也是为了让我们利用自动的
    HTML 处理。如果你在字符串资源中使用 HTML，当使用 `Resources.getText` 方法访问时，资源处理器会自动解析该 HTML，而不是通常的
    `Resources.getString` 方法。这正是 `TextView` 类加载其字符串资源的方式，使得将文本内容放在 `values` 资源文件中更具吸引力。
- en: 'The following is the content of my `strings.xml` file in the `values` directory.
    You''ll notice that the HTML markup is HTML 3.2, and not HTML 4 based. This is
    because the Android `Html` class doesn''t handle HTML 4 markup, and the `Html`
    class is effectively what is used to load and string resource containing markup.
    Create a new resource file in the `res/values` directory named `strings.xml` and
    copy the following code snippet into the new file:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我的 `values` 目录中 `strings.xml` 文件的内容。你会注意到这里的 HTML 标记是 HTML 3.2，而不是基于 HTML
    4 的。这是因为 Android 的 `Html` 类不能处理 HTML 4 标记，而 `Html` 类实际上是用来加载包含标记的字符串资源的。在 `res/values`
    目录中创建一个新的资源文件，命名为 `strings.xml`，并将以下代码片段复制到新文件中：
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The unicode hex values in the `pi` and `sqrt` string values are used to reference
    the unicode characters for a lower case Greek Pi symbol, and the standard square
    root symbol.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`pi` 和 `sqrt` 字符串值中的 Unicode 十六进制值用于引用小写希腊字母 Pi 符号和标准的平方根符号。'
- en: Styling the scientific layout
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计科学布局的样式
- en: 'The styles used in the standard calculator layout don''t work very well for
    the scientific layout. In order to change the styles for the scientific layout,
    you can add the new styling to a new `values` directory for the landscape layout.
    Copy the following code snippet to a new file named `res/values-land/styles.xml`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 标准计算器布局中使用的样式对于科学布局来说并不是很好。为了改变科学布局的样式，你可以将新样式添加到横屏布局的新 `values` 目录中。将以下代码片段复制到名为
    `res/values-land/styles.xml` 的新文件中：
- en: '[PRE34]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The first style resource in the preceding snippet is used for the display area
    of the calculator. As with the standard calculator, we use the `display_background`
    shape written earlier in this chapter. We also define a new style for the scientific
    buttons. The scientific buttons will be exactly the same as the standard calculator
    buttons, except with a much smaller font. Since there are many more scientific
    buttons than standard buttons, the smaller font allows us to comfortably fit more
    of them on the screen.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个片段中的第一个样式资源用于计算器的显示区域。与标准计算器一样，我们使用本章前面编写的 `display_background` 形状。我们还为科学按钮定义了一种新样式。科学按钮将与标准计算器按钮完全相同，只是字体要小得多。由于科学按钮比标准按钮多得多，较小的字体使我们能够更舒适地在屏幕上容纳更多按钮。
- en: Building the scientific layout
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建科学布局
- en: 'The scientific layout is comprised of the standard calculator buttons on the
    right side of the screen, with twenty additional buttons on the left side of the
    screen. The additional buttons represent mathematical functions and constants,
    most of which can be found in the `java.lang.Math` and `java.lang.StrictMath`
    classes. The following figure illustrates how we want to layout the scientific
    calculator:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 科学计算器布局包括屏幕右侧的标准计算器按钮，以及屏幕左侧的二十个附加按钮。这些附加按钮代表数学函数和常数，其中大部分可以在`java.lang.Math`和`java.lang.StrictMath`类中找到。下图展示了我们想要布局的科学计算器样式：
- en: '![Building the scientific layout](img/4484OS_10_10.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![构建科学计算器布局](img/4484OS_10_10.jpg)'
- en: The effect of the new styles for the landscape layout on the calculator display
    will "remove" the margin between the display and the buttons. Since the landscape
    layout has less vertical space, such padding is nothing more than a waste of space
    that should be used for the buttons in order to maintain a reasonable size.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 新样式对横向布局的计算器显示效果将“移除”显示和按钮之间的边距。由于横向布局的垂直空间较少，这样的填充除了是浪费空间之外，什么也不是，应该用来给按钮以保持合理的大小。
- en: Time for action – coding the scientific layout
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间——编写科学计算器布局代码
- en: 'The landscape layout is broken into various sub-layouts in order to maintain
    IDs for the two individual functional areas: Scientific functions and standard
    functions. Maintaining these with their own ID values allows much easier detection
    of the available functionality from the Java code. Instead of the Java code deciding
    on the available functionality based on the configuration, it can use `findViewById`
    and test for `null` to check if the scientific functionality is available. This
    is not unlike "capability testing" in JavaScript (as apposed to inspection).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 横向布局被分割成多个子布局，以便为两个独立的功能区域保持ID：科学函数和标准函数。为它们分配自己的ID值可以更容易地从Java代码中检测到可用的功能。这样，Java代码就可以使用`findViewById`并测试`null`来检查科学功能是否可用，而不是基于配置决定可用的功能。这和JavaScript中的“能力测试”（相对于检查）非常相似。
- en: Create a new resource directory named `res/layout-land`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`res/layout-land`的新资源目录。
- en: Create a new layout resource XML file in the `layout-land` directory named `main.xml`
    and open this file in an editor or IDE.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layout-land`目录中创建一个新的布局资源XML文件，名为`main.xml`，并在编辑器或IDE中打开此文件。
- en: 'Declare the root element of the new layout as a vertical `LinearLayout` consuming
    all of the available screen space:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新布局的根元素声明为一个垂直的`LinearLayout`，占据所有可用的屏幕空间：
- en: '[PRE35]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The first element of the new layout is a `RelativeLayout` element to wrap the
    `TextView` and `ImageView` that are used as the calculator display:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新布局的第一个元素是一个`RelativeLayout`，用来包裹作为计算器显示的`TextView`和`ImageView`：
- en: '[PRE36]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Copy the `TextView` and `ImageView` elements from the standard calculator layout
    (`res/layout/main.xml`) as the two child elements of the `RelativeLayout` declared
    previously:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从标准计算器布局（`res/layout/main.xml`）复制`TextView`和`ImageView`元素，作为之前声明的`RelativeLayout`的两个子元素：
- en: '[PRE37]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The second child element of the root `LinearLayout` is a horizontally-oriented
    `LinearLayout` consuming the remainder of the screen space:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根`LinearLayout`的第二个子元素是一个水平方向的`LinearLayout`，占据屏幕剩余空间：
- en: '[PRE38]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Inside the new `LinearLayout` child, declare a new `TableLayout` to fill with
    the scientific buttons:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的`LinearLayout`子元素内，声明一个新的`TableLayout`来填充科学按钮：
- en: '[PRE39]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create a `TableRow` element inside the `scientific_functions TableLayout`,
    to contain the first row of scientific `Button` elements:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scientific_functions TableLayout`内创建一个`TableRow`元素，以包含第一行科学`Button`元素：
- en: '[PRE40]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Declare the first five scientific functions as `Button` elements inside the
    new `TableRow`. The `Button` ID should be the same as the name of the resource
    string to be used as the `Button` label:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的`TableRow`内声明前五个科学函数作为`Button`元素。`Button`的ID应与用作`Button`标签的资源字符串名称相同：
- en: '[PRE41]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The first row of scientific `Button` widgets contains `inverse`, `square`, `cube`,
    `pow`, and `percent`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行科学`Button`小部件包含`inverse`、`square`、`cube`、`pow`和`percent`。
- en: Create a `TableRow` with the second row of scientific `Button` widgets containing
    `cos`, `sin`, `tan`, `log2`, and `log10`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`TableRow`，其中包含第二行科学`Button`小部件，包括`cos`、`sin`、`tan`、`log2`和`log10`。
- en: The third scientific `Button` widgets in the third `TableRow` should be `acos`,
    `asin`, `atan`, `log`, and `log1p`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三行`TableRow`中的第三个科学`Button`小部件应为`acos`、`asin`、`atan`、`log`和`log1p`。
- en: The fourth and final `TableRow` of `Button` widgets should be `e`, `pi`, `random`,
    `sqrt`, and `hyp`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四个也是最后一个包含`Button`小部件的`TableRow`应该是`e`、`pi`、`random`、`sqrt`和`hyp`。
- en: 'That is all of the scientific functions, now create another `TableLayout` in
    the `LinearLayout` child element for the standard functions:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是所有的科学函数，现在在`LinearLayout`子元素中为标准函数创建另一个`TableLayout`：
- en: '[PRE42]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Copy the contents of the `standard_functions TableLayout` in `res/layout/main.xml`
    into the new `TableLayout` element.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`res/layout/main.xml`中的`standard_functions TableLayout`内容复制到新的`TableLayout`元素中。
- en: '*What just happened?*'
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: In the preceding layout, we reuse much of the basics that we created in the
    standard calculator layout, with the addition of a new `TableLayout` structure
    to contain the scientific functions. The new `TableLayout` is sized to a width
    of `wrap_content` and will only consume the amount of horizontal space needed
    to fit all of the `Button` widgets. The other main difference between the two
    `TableLayout` elements is that the scientific table doesn't stretch its columns,
    since this would effectively be the same as sizing it as `fill_parent` and leaving
    no space for the standard functions.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的布局中，我们重用了在标准计算器布局中创建的大部分基础内容，并添加了一个新的`TableLayout`结构来包含科学函数。新的`TableLayout`被设置为`wrap_content`的宽度，并且只占用容纳所有`Button`小部件所需的水平空间。两个`TableLayout`元素之间的主要区别在于，科学表格没有拉伸其列，因为这实际上与将其设置为`fill_parent`相同，这样就没有空间放置标准函数了。
- en: You'll also notice that among the string resources used to create the scientific
    `Button` labels, those that use HTML markup, do so without using XML escape entities
    (such as `&lt;` and `&gt;`). This is the main indicator to the resource compiler
    that a string resource contains markup and should be consumed differently. This
    usage requires that all HTML markup that is placed into a string resource must
    both conform to the HTML 3.2 specification, and remain valid XML content.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到，在用于创建科学`Button`标签的字符串资源中，那些使用HTML标记的，没有使用XML转义实体（如`&lt;`和`&gt;`）。这是告诉资源编译器一个字符串资源包含标记，并且应该以不同方式处理的主要指示。这种使用要求所有放入字符串资源中的HTML标记必须符合HTML
    3.2规范，并且仍然是有效的XML内容。
- en: 'In order to test the new landscape layout, you''ll either need to define an
    emulator device with a landscape screen size, or run the application on a physical
    device. Creating a virtual device in the emulator can be done with the **android**
    application in the **tools** directory of your Android SDK installation, the same
    tool used to create skeleton projects. The following is a screenshot of the new
    layout running on a physical Android device:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试新的横屏布局，你需要定义一个具有横屏大小的模拟器设备，或者在物理设备上运行应用程序。在模拟器中创建虚拟设备可以使用Android SDK安装目录中**tools**目录下的**android**应用程序，这个工具也用于创建项目框架。以下是新布局在物理Android设备上运行时的截图：
- en: '![What just happened?](img/4484_10_11.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/4484_10_11.jpg)'
- en: Have a go hero – using include in existing layouts
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手实践——在现有布局中使用include
- en: The preceding layout has several elements of the standard layout that it reuses.
    This is a good time to extract these elements into their own layout files and
    then make use of the `include` element to place them into the two specific layout
    resources. Information on layout includes can be found in [Chapter 5](ch05.html
    "Chapter 5. Developing Non-linear Layouts"), *Developing Non-Linear Layouts*.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的布局重用了标准布局的几个元素。现在是把这些元素提取到它们自己的布局文件中的好时机，然后使用`include`元素将它们放置到两个特定的布局资源中。[第5章](ch05.html
    "第5章. 开发非线性布局") *开发非线性布局* 中介绍了布局包含的相关信息。
- en: Create a `display.xml` layout resource to contain the `RelativeLayout` with
    the calculator display, and include this at the appropriate point in the `main.xml`
    layout resource files.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`display.xml`布局资源，包含带有计算器显示的`RelativeLayout`，并将其包含在`main.xml`布局资源文件中的适当位置。
- en: Create a `standard_buttons.xml` layout resource to contain the `TableLayout`
    named `standard_functions`, and include this at the appropriate point in the `main.xml`
    layout resource files.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`standard_buttons.xml`布局资源，包含名为`standard_functions`的`TableLayout`，并将其包含在`main.xml`布局资源文件中的适当位置。
- en: Handling the Activity restart
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理活动重新启动
- en: 'When the device changes orientation, the `CalculatorActivity` object on the
    screen is restarted with the new orientation. In this application, the restart
    leads to a serious problem: the state of the calculator is lost. As discussed
    in [Chapter 4](ch04.html "Chapter 4. Leveraging Activities and Intents"), *Leveraging
    Activities and Intents*, there are times when you need to take control of your
    application state in Android—saving it before shutdown and restoring it when the
    `Activity` is started again.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备改变方向时，屏幕上的`CalculatorActivity`对象会以新方向重新启动。在这个应用中，重新启动会导致一个严重的问题：计算器的状态丢失。正如[第4章](ch04.html
    "第4章. 利用活动和意图") *利用活动和意图* 中讨论的那样，有时你需要控制Android应用的状态——在关机前保存它，并在`Activity`再次启动时恢复它。
- en: You'll need to override the `Activity.onSaveInstanceState` method to store the
    current state of your calculator in the provided `Bundle`. This `Bundle` object
    will be provided to you in the `onCreate` method when being restarted due to a
    configuration change. In your `onCreate` method, check to make sure that the provided
    `Bundle` object is non-null before restoring the save parameters from it.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要重写`Activity.onSaveInstanceState`方法，以在提供的`Bundle`中存储计算器的当前状态。这个`Bundle`对象将在由于配置更改而重新启动时在`onCreate`方法中提供给你。在你的`onCreate`方法中，确保在从它恢复保存的参数之前，提供的`Bundle`对象非空。
- en: Have a go hero – implementing the scientific calculation logic
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄——实现科学计算逻辑
- en: The calculator should currently be able to function from the standard calculation
    buttons. However, the new scientific functions don't have any backing structures.
    Further, if you re-orientate your device to change between scientific and standard
    layouts, any "in-progress" calculation will be lost.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 目前计算器应该能够从标准计算按钮进行操作。然而，新的科学功能没有任何支持结构。此外，如果你重新调整设备方向以在科学和标准布局之间切换，任何“进行中”的计算都会丢失。
- en: 'The steps that need to be completed for the scientific calculations to function
    as expected, are as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使科学计算按预期工作，需要完成以下步骤：
- en: Implement the `onSaveInstanceState` to save the calculation state to the provided
    `Bundle` object.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`onSaveInstanceState`以将计算状态保存到提供的`Bundle`对象。
- en: Implement the `onCreate` method to restore the saved state from its provided
    `Bundle` object (assuming one is given).
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`onCreate`方法，从提供的`Bundle`对象（假设有的话）恢复保存的状态。
- en: Add the functionality required to make the scientific `Button` widgets function
    as expected, to the `Calculator` class you wrote earlier.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你之前编写的`Calculator`类中添加所需的功能，使科学`Button`小部件按预期工作。
- en: Supporting hardware keyboards
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持硬件键盘
- en: The calculator we developed here is now a great on-screen Android calculator
    application, with both the simple and scientific functionality you'd expect. However,
    if a device has a hardware keyboard, the user will probably expect to be able
    to use it, which currently they can't. Further, if the device lacks a touchscreen,
    clicking on-screen buttons will quickly become frustrating. We need to implement
    hardware keyboard support for the application.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里开发的计算器现在是一个很棒的Android屏幕计算器应用程序，具有你所期望的简单和科学功能。然而，如果一个设备有硬件键盘，用户可能会期望能够使用它，目前他们做不到。此外，如果设备没有触摸屏，点击屏幕按钮会很快变得令人沮丧。我们需要为应用程序实现硬件键盘支持。
- en: Implementing the hardware keyboard handling code is only useful to you if you've
    done the "Have a go Hero" sections and built a `Calculator` class to perform the
    required functions. In order to handle hardware keyboard events, you'll use the
    methods declared in the `KeyEvent.Callback` interface. The `Activity` class implements
    the `KeyEvent.Callback` interface already, and provides default handling for all
    of the methods. For our handling of these key-events, we only need to override
    the `onKeyDown` method.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 实现硬件键盘处理代码只有在你完成了“尝试英雄”部分并构建了一个`Calculator`类来执行所需功能时才有用。为了处理硬件键盘事件，你会使用`KeyEvent.Callback`接口中声明的方法。`Activity`类已经实现了`KeyEvent.Callback`接口，并为所有方法提供了默认处理。对于这些按键事件的处理，我们只需要覆盖`onKeyDown`方法。
- en: 'For this `onKeyDown` implementation, it''s a good idea to make sure that the
    key events are coming from a hardware keyboard by checking the flags of the `KeyEvent`.
    It''s also a good idea to pass it to your parent class before processing it yourself.
    Finally, if you''re working on Android 2.0 (API-Level 5) or higher, you should
    check that the `KeyEvent` is not cancelled before processing it (again this is
    one of the `KeyEvent` flags). The following is a code snippet from my implementation
    of the `onKeyDown` method:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个`onKeyDown`实现，最好确保按键事件来自硬件键盘，方法是检查`KeyEvent`的标志。在自行处理之前，将其传递给父类也是一个好主意。最后，如果你在Android
    2.0（API级别5）或更高版本上工作，你应该在处理之前检查`KeyEvent`是否没有被取消（这也是`KeyEvent`标志之一）。以下是我的`onKeyDown`方法实现中的代码片段：
- en: '[PRE43]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The preceding code snippet invokes a method for each one of the different keys
    that can be pressed on a hardware keyboard.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段调用了每种可以在硬件键盘上按下的不同键的方法。
- en: Note
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: If your Android device doesn't have a hardware keyboard, you can test this code
    using the emulator—your PC's keyboard, and the on-screen keyboard to the right
    of the emulator display, are both classified as hardware keyboards by the emulator.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Android设备没有硬件键盘，你可以使用模拟器测试这段代码——你的PC键盘和模拟器显示右侧的屏幕键盘都被模拟器归类为硬件键盘。
- en: Adding in display animations
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加显示动画
- en: Currently, the application has all the makings of a great calculator application.
    However, the display is currently just a simple `TextView` object. In order to
    improve the user experience, we should make use of a `ViewSwitcher` object to
    swap the `TextView` out when the calculator operation is changed, or when the
    "equals" `Button` is pressed.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，该应用程序具备成为一个优秀计算器应用程序的所有要素。然而，当前显示只是一个简单的`TextView`对象。为了提升用户体验，我们应该使用`ViewSwitcher`对象在计算器操作更改或按下“等于”按钮时替换`TextView`。
- en: Time for action – animating the display
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间——显示动画
- en: In order to build a nice slide-out-slide-in animation for the calculator display,
    we'll need to define our own animations and bind them to a `ViewSwitcher` object.
    This will also require us to make changes to the Java code in order to handle
    the new mechanism. Since we don't want the view to animate each time a new digit
    is typed, we will make direct changes to the `TextView` currently on the screen.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为计算器显示构建一个漂亮的滑出滑入动画，我们需要定义自己的动画并将它们绑定到`ViewSwitcher`对象。这也需要我们修改Java代码以处理新的机制。由于我们不想在每次输入新数字时都让视图动画化，我们将直接更改当前屏幕上的`TextView`。
- en: Create a new XML resource file in the `res/anim` directory named `slide_out_top.xml`,
    and open this in an editor or IDE.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/anim`目录中创建一个名为`slide_out_top.xml`的新XML资源文件，并在编辑器或IDE中打开它。
- en: 'Declare a y-translate animation from `0%` to `100%` as the only element in
    the animation resource:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画资源中声明一个从`0%`到`100%`的y轴平移动画作为唯一的元素：
- en: '[PRE44]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Create a new XML resource file in the `res/anim` directory named `slide_in_bottom.xml`,
    and open this file in an editor or IDE.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/anim`目录中创建一个名为`slide_in_bottom.xml`的新XML资源文件，并在编辑器或IDE中打开这个文件。
- en: 'Declare a y-translate animation from `100%` to `0%` as the only element in
    the animation resource:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画资源中声明一个从`100%`到`0%`的y轴平移动画作为唯一的元素：
- en: '[PRE45]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Open either your `display.xml` file, or both of the `main.xml` files in your
    editor of IDE, and which among them you should open will depend on whether you
    have completed the "Have a go Hero – Layout Includes".
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的`display.xml`文件，或者在你的编辑器或IDE中打开两个`main.xml`文件，具体打开哪一个取决于你是否完成了“尝试英雄——布局包含”部分。
- en: 'In the `RelativeLayout` used for the display, replace the `TextView` named
    `display` with a `ViewSwitcher` element using the two new animation resources:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用于显示的`RelativeLayout`中，使用两个新的动画资源将名为`display`的`TextView`替换为`ViewSwitcher`元素：
- en: '[PRE46]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'As child elements to the `ViewSwitcher`, declare two `TextView` elements with
    the `CalculatorTextDisplay` style:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`ViewSwitcher`的子元素，声明两个具有`CalculatorTextDisplay`样式的`TextView`元素：
- en: '[PRE47]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Both of the `TextView` elements will be identical to each other.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个`TextView`元素将彼此完全相同。
- en: '*What just happened?*'
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The use of the `ViewSwitcher` for the display will cause any existing Java code
    to crash, since the Java code will be expecting the object to be a `TextView`
    of some sort. What you need to do instead is update the display using the `ViewSwitcher.getCurrentView`,
    instead of the `ViewSwitcher` itself.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ViewSwitcher`进行显示将导致现有Java代码崩溃，因为Java代码会期望该对象是某种`TextView`。你需要做的是使用`ViewSwitcher.getCurrentView`更新显示，而不是`ViewSwitcher`本身。
- en: When an operation `Button` is used, for example, the multiply or equals `Button`,
    you'll want to place the next display content on the `ViewSwitcher.getNextView`
    widget, and then invoke the `ViewSwitcher.showNext()` method. The animation of
    the number disappearing upwards with the new content appearing from the bottom
    of the display is a simple, but explanatory animation. It's also quite commonly
    used in calculator applications, meaning the user will usually be comfortable
    with it.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用操作`Button`时，例如乘或等于`Button`，你将希望将下一个显示内容放置在`ViewSwitcher.getNextView`小部件上，然后调用`ViewSwitcher.showNext()`方法。数字向上消失，新内容从显示底部出现的动画简单明了。这也是计算器应用程序中经常使用的，意味着用户通常会感到舒适。
- en: In this application's case, the animation is more eye-candy than useful. However,
    if you implemented a history-stack in the calculator, the animation could be reversed
    when the user presses the "back" `Button`. A history-stack in a calculator is
    a very useful structure because it allows slight variations of the same calculations
    to be run over and over again.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序的案例中，动画更多的是视觉效果而非实用。然而，如果你在计算器中实现了一个历史栈，当用户按下“返回”`Button`时，动画可以反转。在计算器中，一个历史栈是一个非常实用的结构，因为它允许对同一计算进行轻微变化的反复运行。
- en: Have a go hero – rounding off
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手英雄——圆角处理
- en: 'This calculator application is quite complete at this point. It''s been styled,
    and has some nice eye-candy and functions as expected. It does have a few caveats,
    however—the scientific calculation layout doesn''t work very well on small-screen
    devices. The following screenshot is the application running in scientific layout
    on a small-screen phone:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，这个计算器应用程序相当完整。它已经过样式设计，有一些不错的视觉效果，并且按预期工作。然而，它确实有一些注意事项——科学计算布局在小屏幕设备上工作得不是很好。以下截图是在小屏幕手机上以科学布局运行的应用程序：
- en: '![Have a go hero – rounding off](img/4484_10_12.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![动手英雄——圆角处理](img/4484_10_12.jpg)'
- en: 'The preceding image also demonstrates how some devices theme applications.
    In order to make sure the application works well on all devices:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图片还展示了某些设备是如何为主题应用程序着色的。为了确保应用程序在所有设备上都能良好运行：
- en: Define a new `values` directory for small-screen devices.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为小屏幕设备定义一个新的`values`目录。
- en: Create a new `styles.xml` file in the directory with styles that have less margin
    and padding than the defaults.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含比默认样式边距和填充更小的样式的目录中创建一个新的`styles.xml`文件。
- en: Reduce the size of the `display` font when on a small-screen device that has
    a landscape orientation.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有横向取向的小屏幕设备上，减小`display`字体的大小。
- en: This sort of rounding-off process will follow most successful Android application
    projects. It's a matter of trying the application out on various different emulator
    configurations and devices, and then leveraging the resource-loaders to ensure
    the application works well on as many devices as possible.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这种圆角处理过程将遵循大多数成功的Android应用程序项目。这是关于在各种各样的模拟器配置和设备上尝试应用程序，然后利用资源加载器确保应用程序在尽可能多的设备上良好运行的问题。
- en: Summary
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Creating an application theme is a key part of the success of a new application,
    whether running on Android, the desktop, or on the Web. We've explored how to
    make use of the various tools that Android provides in order to keep an application
    consistent in order to keep it user-friendly.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 创建应用程序主题是新的应用程序成功的关键部分，无论运行在Android、桌面还是Web上。我们已经探讨了如何利用Android提供的各种工具，以保持应用程序的一致性，从而使其对用户友好。
- en: An application's theme, and its look and feel go far beyond the simple styling.
    The more you personally use you application, the more you will see places where
    a slightly different color, or a transition animation will make a difference.
    Each of those small differences is what makes an application truly user-friendly,
    because it makes the application feel polished.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序的主题及其外观和感觉远超出简单的样式设计。你个人使用应用程序的次数越多，你越会发现稍微不同的颜色或过渡动画会有所帮助的地方。每一个小的不同之处都使得应用程序真正对用户友好，因为它让应用程序看起来更加精致。
- en: While running on hundreds of wildly different devices, Android makes it easy
    for developers to keep their applications running as though they were built specifically
    for that hardware. The resource-loader system is one of the most key structures
    in Android, and not to leverage it, can be suicidal to the application.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管运行在数百种截然不同的设备上，安卓让开发者能够轻松地保持应用程序运行，就像它们是为该硬件特别构建的一样。资源加载系统是安卓中最关键的结构之一，不利用它，对应用程序来说可能是自杀式的行为。
- en: I strongly recommend familiarizing yourself with existing Android applications,
    as well as applications on other mobile devices. Knowing how to drive a decent
    image-manipulation application also goes a long way. Draw a diagram of each of
    your screens before your start building them, and pencil and paper is often the
    best way to get an idea about the user interface, before you start coding.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你熟悉现有的安卓应用程序，以及其他移动设备上的应用程序。了解如何使用像样的图像处理应用程序也会有很大帮助。在开始构建它们之前，为每个屏幕绘制一张图表，而铅笔和纸通常是了解用户界面想法的最佳方式，在你开始编码之前。
- en: Think carefully about where you can use the existing Android icons and styles,
    and where you will want to replace or extend them. You always want to keep your
    application consistent, but adding some flashy eye-candy is often what makes an
    application stand out from the crowd.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细考虑你在哪里可以使用现有的安卓图标和样式，以及你会在哪里想要替换或扩展它们。你总是希望保持应用程序的一致性，但添加一些炫目的视觉糖果往往能使应用程序从众多竞品中脱颖而出。
- en: With the combination of XML resources and the Java language, Android is a highly
    compelling platform to design and code for. It's widely deployed and has excellent
    developer support. There are dozens of hardware manufacturers producing Android
    devices, in all shapes and sizes, and thousands of developers making applications.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 结合XML资源和Java语言，安卓是一个极具吸引力的设计和编码平台。它被广泛部署并拥有出色的开发者支持。有数十家硬件制造商在生产各种形状和大小的安卓设备，还有成千上万的开发者在开发应用程序。
- en: In this book, we've worked on leveraging the Android platform to build applications
    that are user-focused, easy to use, and good looking. The Android platform and
    the Android Markets allow for a captive audience and great exposure for new ideas.
    From here on, you should be able to add your own unique ideas and work to the
    Android ecosystem. Anything that has been done can always be done better, and
    anything that hasn't been done, has people waiting for it. Whether you're part
    of a team, or hacking away on the-next-big-thing in your attic at night, the key
    to a successful application is a great user-interface.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们致力于利用安卓平台构建以用户为中心、易于使用且界面美观的应用程序。安卓平台和安卓市场为新想法提供了固定的受众和巨大的曝光度。从现在开始，你应该能够为安卓生态系统添加你自己的独特想法和工作。任何已经完成的事情总是可以做得更好，而任何尚未完成的事情，都有人在等待。无论你是团队的一员，还是在夜晚的阁楼里努力开发下一个大项目，成功应用程序的关键在于一个出色的用户界面。
