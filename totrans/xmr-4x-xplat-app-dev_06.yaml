- en: Chapter 6. XamSnap for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin writing the Android version of XamSnap, open the solution from the
    previous two chapters. We'll be working in the `XamSnap.Droid` project, which
    should be already setup from the Xamarin project template.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The Android manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Material Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a login screen for XamSnap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android's ListView and BaseAdapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a friends list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a list of messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Android Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All Android applications have an XML file called the Android Manifest, which
    declares basic information about the app, and is named `AndroidManifest.xml`.
    This is very similar to the `Info.plist` file on iOS, except Xamarin also provides
    C# class attributes for placing common settings in the Android manifest. There
    is also a nice UI for editing the manifest under **Project Options | Android Application**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important settings, shown in the following screenshot, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application name**: This is the title of your application, which is displayed
    below the icon. It is not the same as the name selected on Google Play.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package name**: This is just like on iOS, your app''s bundle identifier.
    It is a unique name to identify your application. The convention is to use the
    reverse domain style with your company name at the beginning; for example, `com.jonathanpeppers.xamsnap`.
    It must begin with a lower case letter and contain at least one character within.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application icon**: This is the icon displayed for your app on Android''s
    home screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version number**: This is a one-digit number that represents the version
    of your application. Raising this number indicates a newer version on Google Play.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version name**: This is a user-friendly version string for your app; for
    example, **1.0.0**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum Android version**: This is the minimum version of Android that your
    application supports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target Android version**: This is the version of the Android SDK your application
    is compiled against. Using higher numbers gives you access to new APIs; however,
    you might need to do some runtime checks to not call these APIs on older devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install Location**: This defines the different locations that your Android
    application can be installed to: auto (user settings), external (SD card), or
    internal (device internal memory).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Introducing the Android Manifest](img/image00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In addition to these settings, there is a set of checkboxes labeled **Required
    permissions**. These are displayed to users on Google Play prior to the application
    being installed. This is Android's way of enforcing a level of security, giving
    users a way to see what kinds of access an app will have to make changes to their
    device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some commonly used manifest permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Camera**: This provides access to the device camera'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet**: This provides access to make web requests over the Internet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReadContacts**: This provides access to read the device''s contacts library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReadExternalStorage**: This provides access to read the SD card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WriteContacts**: This provides access to modify the device''s contacts library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WriteExternalStorage**: This provides access to write to the SD card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these settings, a manual change to Android Manifest will be required
    many times. In this case, you can edit the manifest file as you would a standard
    XML file in Xamarin Studio. For a complete list of valid XML elements and attributes,
    visit [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s fill out the following settings for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application name**: `XamSnap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package name**: `com.yourcompanyname.xamsnap`; make sure to name future apps
    beginning with `com.yourcompanyname`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version number**: Just start with the number `1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version**: This can be any string, but it is recommended to use something
    resembling a version number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum Android version**: Select **Android 4.0.3 (API Level 15)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required permissions**: Select **Internet**; we will be using it later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, notice that our Android project is already referencing our shared
    code from our portable class library. Expand the **References** folder for the
    project and notice the reference to the `XamSnap.Core` project. We will be able
    to access all the shared code that was written in [Chapter 4](part0039.xhtml#aid-1565U1
    "Chapter 4. XamSnap - A Cross-Platform App"), *XamSnap - A Cross-Platform App*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `Resources` directory, and in the `values` folder open `Strings.xml`;
    this is where all the text throughout your Android app should be stored. This
    is an Android convention that will make it very easy to add multiple languages
    to your application. Let''s change our strings to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We'll use these values later in the chapter; feel free to add new ones in cases
    where you display text to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Material Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Beginning with Android 5.0 Lollipop, Google released a new theme and color
    palette for Android applications called **Material Design**. It is a good idea
    to adopt material design for new apps, as it gives you a modern Android look,
    with little effort to setup. For more information on material design, check out
    Google''s documentation at: [https://developer.android.com/design/material/index.html](https://developer.android.com/design/material/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: To make material design (and other new Android features) easier to adopt, Google
    has also released an **AppCompat** library for Android so you can support these
    newer features on older Android OS versions. Xamarin supports a version of the
    AppCompat library on NuGet so that it is easy to set up for Xamarin.Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the Android support library, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Packages** and select **Add Packages**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Xamarin.Android.Support.v7.AppCompat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add Package**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NuGet will download the library and its dependencies, referencing them in your
    Android project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s implement our main application class; add a new **Activity** from
    the **New File** dialog. We won''t be subclassing `Activity` in this file, but
    this template adds several Android `using` statements to the top of the file that
    imports the Android APIs to be used within your code. Create a new `Application`
    class where we can register everything in our `ServiceContainer` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We used the built-in Android theme, `Theme.AppCompat.Light`, it is the default
    light theme for material design. Note the strange constructor we have to follow,
    this is a current requirement of a custom `Application` class in Xamarin. You
    can just recognize this as boilerplate code that you will need to add this in
    this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s implement a simple base class for all the activities throughout
    our app. Create an `Activities` folder in the `XamSnap.Droid` project and a new
    file named `BaseActivity.cs` with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We did several things here to simplify the development of our other activities.
    First, we made this class generic, and made a protected variable named `viewModel`
    to store a view model of a specific type. Note that we did not use generics on
    controllers in iOS due to platform limitations (see more on Xamarin's documentation
    website at [http://developer.xamarin.com/guides/ios/advanced_topics/limitations/](http://developer.xamarin.com/guides/ios/advanced_topics/limitations/)).
    We also implemented `IsBusyChanged`, and displayed a simple `ProgressDialog` with
    the `Loading` string from the `Strings.xml` file to indicate network activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add one more method for displaying errors to the user as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This method will display a pop-up dialog, indicating that something went wrong.
    Notice we also used `ErrorTitle` and the built-in Android resource for an `Ok`
    string.
  prefs: []
  type: TYPE_NORMAL
- en: This will complete the core setup for our Android application. From here we
    can move on to implement the UI for the screens throughout our app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a login screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating Android views, it is important to know the different layouts
    or view group types available in Android. iOS does not have an equivalent for
    some of these because iOS has a smaller variation of screen sizes on its devices.
    Since Android has virtually infinite screen sizes and densities, the Android SDK
    has a lot of built-in support for auto-sizing and layout for views.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the common types of layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ViewGroup`: This is the base class for a view that contains a collection of
    child views. You normally won''t use this class directly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinearLayout`: This is a layout that positions its child views in rows or
    columns (but not both). You can also set weights on each child, to have them span
    different percentages of the available space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RelativeLayout`: This is a layout that gives much more flexibility on the
    position of its children. You can position child views relative to each other
    so that they are above, below, to the left, or to the right of one another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrameLayout`: This layout positions its child views directly on top of one
    another in the **z order** on the screen. This layout is best used for cases where
    you have a large child view that needs other views on top of it and perhaps docked
    to one side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListView`: This displays views vertically in a list with the help of an adapter
    class that determines the number of child views. It also has support for its children
    to be selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GridView`: This displays views in rows and columns within a grid. It also
    requires the use of an adapter class to supply the number of children.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we begin writing the login screen, delete the `Main.axml` and `MainActivity.cs`
    files that were created from the Android project template. Next, create an Android
    layout file named `Login.axml` in the `layout` folder of the `Resources` directory
    in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can start adding functionalities to our Android layout as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the new layout file to open the Android designer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag two **Plain Text** views onto the layout found in the **Text Fields** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Id** field, enter `@+id/username` and `@+id/password`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the password field, set its **Input Type** property to `textPassword`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **Button** onto the layout and set its **Text** property to `@string/Login`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the button's **Id** property to `@+id/login`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your layout will look something like the following screenshot when complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a login screen](img/image00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now create a new Android Activity file named `LoginActivity.cs` in the `Activites`
    folder we created earlier. Let''s implement the login functionality as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we set `MainLauncher` to `true`, to make this activity the first
    activity for the application. We also took advantage of the `ApplicationName`
    value and `BaseActivity` class we set up earlier in this chapter. We also overrode
    `OnResume` to clear out the two `EditText` controls so that the values are cleared
    out if you return to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you launch the application, you will be greeted by the login screen
    we just implemented, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a login screen](img/image00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just a note for Visual Studio users, Xamarin has done a great job making their
    Visual Studio Extension work identical to Xamarin Studio. All of the examples
    in this chapter should work just as described in either Xamarin Studio on OS X
    or Visual Studio on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Using ListView and BaseAdapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's implement a conversations list on Android. The Android equivalent
    of `UITableView` and `UITableViewSource` are `ListView` and `BaseAdapter`. There
    are parallel concepts for these Android classes, such as implementing abstract
    methods and recycling cells during scrolling. There are a few different types
    of adapters used in Android such as `ArrayAdapter` or `CursorAdaptor`, although
    `BaseAdapter` is generally best suited for simple lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement our conversations screen. Begin by making a new Android Activity
    in your `Activities` folder named `ConversationsActivity.cs`. Let''s start with
    only a couple of changes to the class definition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform the following steps to implement a couple of Android layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Android Layout in the `layout` folder of the `Resources` directory
    named `Conversations.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **ListView** control from **Toolbox** onto the layout and set its **Id**
    to `@+id/conversationsList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a second Android Layout; the `layout` folder in the `Resources` directory
    named `ConversationListItem.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **Text (Medium)** control onto the layout from the **Toolbox**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its ID to `@+id/conversationUsername`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, let's set its **Margin** to `3dp` in the **Layout** tab of the **Properties**
    box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will set up all the layout files that we''ll need to use throughout the
    conversations screen. Your `ConversationListItem.axml` layout will look something
    like what''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using ListView and BaseAdapter](img/image00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can implement `BaseAdapter` as a nested class inside of `ConversationsActivity`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a review of what is going on inside the adapter:'
  prefs: []
  type: TYPE_NORMAL
- en: We subclassed `BaseAdapter<Conversation>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We passed in a `Context` (our activity) so that we can pull out the `LayoutInflater`.
    This class enables us to load XML layout resources and inflate them into a view
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We implemented `GetItemId`. This is a general method used to identify rows,
    but we just returned the position for now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We set up `GetView`, which recycles the `convertView` variable by only creating
    a new view if it is null. We also pulled out the text views in our layout to set
    their text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We overrode `Count` to return the number of conversations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We implemented an indexer to return a `Conversation` object for a position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, this should be fairly similar to what we did on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s set up the adapter in our activity by adding the following to the
    body of `ConversationsActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This code will set up the adapter and reload our list of conversations when
    the activity appears on screen. Note that we called `NotifyDataSetInvalidated`
    here, so that `ListView` reloads its rows after the number of conversations has
    been updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, we need to modify the `OnLogin` method we set up earlier
    in `LoginActivity` to start our new activity as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we compile and run our application, we can navigate to a conversations
    list after logging in, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using ListView and BaseAdapter](img/image00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the friends list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start implementing the friends list screen, we must first add a menu
    item to `ActionBar` in our application. Begin by creating a new `menu` folder
    within the `Resources` folder of our project. Next, create a new Android Layout
    file named `ConversationsMenu.axml`. Remove the default layout XML created, and
    replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We set up a root menu with one menu item inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a breakdown of what we set for the item in XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '`android:id`: We will use this later in C# to reference the menu item with
    `Resource.Id.addFriendMenu`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:icon`: This is an image resource to display for the menu item. We
    used a built-in Android one for a generic *plus* icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:showAsAction`: This will make the menu item visible if there is room.
    If for some reason the device''s screen is too narrow, an overflow menu would
    be displayed for the menu item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we can make some changes in `ConversationsActivity.cs` to display the menu
    item as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will take our layout and apply it to the menu at the top in our activity''s
    action bar. Next, we can add some code to be run when the menu item is selected,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now let's implement the next activity. Begin by making a copy of `Conversations.axml`,
    found in the `layout` folder in the `Resources` directory, and rename it to `Friends.axml`.
    The only change we'll make in this file will be to rename the ListView's ID to
    `@+id/friendsList`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, perform the following steps to create a layout that can be used for the
    list items in `ListView`:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a new Android Layout called `FriendListItem.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the layout and switch to the **Source** tab found at the bottom of the
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the root `LinearLayout` XML element to a `RelativeLayout` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to the **Designer** tab found at the bottom of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **Text (Large)** control from the **Toolbox** onto the layout and set
    its **Id** to `@+id/friendName`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an **ImageView** control from the **Toolbox** onto the layout; you can
    either let its **Id** be its default value or blank it out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the image view's image to `@android:drawable/ic_menu_add`. This is the
    same plus icon we used earlier in this chapter. You can select it from the **Resources**
    dialog under the **Framework Resources** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Width** and **Height** of both the controls to `wrap_content`. This
    is found under the **Layout** tab, under the **ViewGroup** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, check the value for **Align Parent Right** on just the image view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, set the **Margins** of both the controls to `3dp` in the **Layout**
    tab of the **Properties** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the Xamarin designer can be very productive, but some developers prefer
    a higher level of control. You might consider writing the XML yourself as an alternative,
    which is fairly straightforward, as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we now have all the layouts we need for the new screen, let''s create
    an Android Activity in the `Activities` folder named `FriendsActivity.cs`. Let''s
    create the basic definition of the activity as follows, just like we did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s implement a nested `Adapter` class for setting up the list view
    items, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There is really no difference in this adapter and the previous one we implemented
    for the conversations screen. We only have to set the friend's name, and we use
    the `User` object instead of the `Conversation` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish setting up the adapter, we can update the body of the `FriendsActivity`
    class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And last but not least, we can update `OnOptionsItemSelected` in the `ConversationsActivity`
    class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'So if we compile and run the application, we can navigate to a fully implemented
    friends list screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the friends list](img/image00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Composing messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next screen is a bit more complicated; we will need to create a `ListView`
    that uses multiple layout files for each row, depending on the type of the row.
    We'll also need to perform some layout tricks to place a view below the `ListView`
    and set up the `ListView` to autoscroll.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next screen, let''s begin by creating a new layout named `Messages.axml`
    in the `layout` folder of the `Resources` directory and then perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a new **ListView** onto the layout. Set its **Id** to `@+id/messageList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box for **Stack From Bottom**, and set **Transcript Mode** to `alwaysScroll`.
    This will set it up to display items from the bottom up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Weight** value to `1` for the **ListView** in the **Layout** tab under
    the **LinearLayout** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new **RelativeLayout** onto the layout. Let its **Id** be the default
    value, or remove it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new **Button** inside **RelativeLayout**. Set its **Id** to `@+id/sendButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box for **Align Parent Right** in the **Layout** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new **Plain Text** found in the **Text Field** section inside **RelativeLayout**
    to the left of the button. Set its **Id** to `@+id/messageText`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Layout** tab, set **To Left Of** to `@+id/sendButton`, and set its
    **Width** to `match_parent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box for **Center in Parent** to fix the vertical centering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When completed, the XML file will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, perform the following steps to make two more Android layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new layout named `MyMessageListItem.axml` in the `layout` folder of
    the `Resources` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the layout and switch to the **Source** tab. Change the root XML element
    to a `RelativeLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to the **Content** tab and drag two **TextView** controls onto the
    layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Id** field, enter `@+id/myMessageText` and `@+id/myMessageDate`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For both the views, set **Margin** to `3dp`, and **Width** and **Height** to
    `wrap_content`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the first TextView, set its **Color** under the **Style** tab to `@android:color/holo_blue_bright`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the second TextView, check the **Align Parent Right** checkbox under the
    **Layout** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new layout named `TheirMessageListItem.axml` and repeat the process.
    Select a different color for the first TextView in the new layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we''ll need to create a new activity for the screen. Create a new
    Android Activity named `MessagesActivity.cs` in the `Activities` directory. Begin
    with the standard code to set up an activity, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s implement a more complicated adapter than what we implemented
    earlier, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This includes everything except our implementation of `GetView`, which we'll
    get to shortly. The first changes here are some constants for `MyMessageType`
    and `TheirMessageType`. We then implemented `ViewTypeCount` and `GetItemViewType`.
    This is Android's mechanism for using two different layouts for list items in
    a list view. We use one type of layout for the user's messages and a different
    one for the other user in the conversation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s implement `GetView` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just a note, it is best practice in Android to use unique ID for each view.
    It is best even in this case where the code gets a bit ugly, but `FindViewById`
    does not work as intended when multiple layouts exist with views containing the
    same ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down our implementation through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We first pull out the `message` object for the position of the row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we grab the view type that determines if it is the current user's message
    or the other user in the conversation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the `convertView` is `null`, we inflate the appropriate layout based on the
    type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we pull the two text views, `messageText` and `dateText`, out of the `convertView`.
    We have to use the type value to make sure we use the correct resource IDs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set the appropriate text on both text views using the `message` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We return the `convertView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s finish `MessagesActivity` by setting up the rest of the adapter.
    First, let''s implement some member variables and the `OnCreate` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: So far, this activity is fairly standard compared to our previous activities
    in this chapter. We also had to wire up the `Click` event of `sendButton` in `OnCreate`
    so that it sends the message and refreshes the list. We also used a trick to scroll
    the list view to the end by setting its selection to the last item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll need to implement `OnResume` to load the messages, invalidate
    the adapter, and then scroll the list view to the end, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we need to modify `ConversationsActivity.cs`, so that it
    navigates forward when you tap on a row in the list view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'So finally, if you compile and run the app, you will be able to navigate to
    the messages screen and add new messages to the list, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Composing messages](img/image00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started out by going over the basic settings in the Android
    Manifest file. Next, we implemented a custom `Application` class for setting up
    our `ServiceContainer`. We then went over the different types of Android layouts
    and implemented a login screen using native Android views. Next, we set up a menu
    in the Android action bar by using an Android layout and overriding a few built-in
    methods. We implemented the friends list screen, and learned the basics of `ListView`
    and adapters. Finally, we implemented the messages screen, and used the more advanced
    functionality available in list view adapters and layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Upon completing this chapter, you will have a partially functional Android version
    of XamSnap. You will have gained some deeper understanding of the Android SDK
    and tools. You should be confident in developing your own Android applications
    using Xamarin. Take it upon yourself to implement the remaining screens that we
    did not cover in this chapter. If you get lost, feel free to review the full sample
    application included with this book. In the next chapter, we'll cover how to deploy
    to mobile devices and why it is very important to test your applications on real
    devices.
  prefs: []
  type: TYPE_NORMAL
