["```kt\n    (...)<uses-sdk\n            android:minSdkVersion=\"8\"\n            android:targetSdkVersion=\"15\" />\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <application (...)\n    ```", "```kt\n    <RelativeLayout \n\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" >\n        <TextView\n            android:id=\"@+id/result_text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_centerHorizontal=\"true\"\n            android:layout_centerVertical=\"true\"\n            tools:context=\".MainActivity\" />\n    </RelativeLayout>\n    ```", "```kt\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        final TextView resultTextView = \n                (TextView) findViewById(R.id.result_text);\n        AsyncTask<String, Void, String> simpleGetTask =  \n                    new AsyncTask<String, Void, String>() {\n          @Override\n          protected String doInBackground(String... params) {\n            //executed by a background thread\n\n           //create a new RestTemplate instance\n            RestTemplate restTemplate = new RestTemplate();\n\n            //add the String message converter, since the result of\n                 // the call will be a String\n            restTemplate.getMessageConverters().add(\n                         new StringHttpMessageConverter());\n\n            // Make the HTTP GET request on the url (params[0]),\n                 // marshaling the response to a String\n            return\n                    restTemplate.getForObject(params[0],String.class);\n            }\n\n          @Override\n          protected void onPostExecute(String result) {\n            // executed by the UI thread once the background \n                 // thread is done getting the result\n            resultTextView.setText(result);\n          }\n        };\n        String url = \"http://ifconfig.me/all\";\n        // triggers the task; it will update the resultTextView once\n          // it is done\n        simpleGetTask.execute(url);\n      }\n    ```", "```kt\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n     TextView resultTextView = (TextView) findViewById(R.id.result_text);\n     String url = \"http://ifconfig.me/all\";\n     RestTemplate restTemplate = new RestTemplate();\n     RestTemplate.getMessageConverters().add(new  StringHttpMessageConverter());\n     String result = restTemplate.getForObject(url, String.class);\n     resultTextView.setText(result);\n    }\n    ```", "```kt\n(...)<dependencies>\n        <dependency>\n            <groupId>com.google.android</groupId>\n            <artifactId>android</artifactId>\n            <version>4.0.1.2</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n          <groupId>org.springframework.android</groupId>\n          <artifactId>spring-android-rest-template</artifactId>\n          <version>${spring-android-version}</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <finalName>${project.artifactId}</finalName>\n        <sourceDirectory>src</sourceDirectory>\n        <plugins>\n            <plugin>\n        <groupId>com.jayway.maven.plugins.android.generation2</groupId>\n                <artifactId>android-maven-plugin</artifactId>\n                <version>3.3.0</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <sdk>\n                        <!-- platform or api level (api level 4 = platform 1.6)-->\n                        <platform>15</platform>\n                    </sdk>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>(...)\n```", "```kt\nAsyncTask<String, Void, IfConfigMeJson> simpleGetTask =  \n  new AsyncTask<String, Void, IfConfigMeJson>() {\n  @Override\n  protected IfConfigMeJson doInBackground(String... params) {\n    String url = params[0];\n    RestTemplate restTemplate = new RestTemplate();\n    MappingJacksonHttpMessageConverter jacksonConverter = \n         new MappingJacksonHttpMessageConverter();\n    restTemplate.getMessageConverters().add(jacksonConverter);\n    return restTemplate.getForObject(url,\n           IfConfigMeJson.class);\n  }\n\n  @Override\n  protected void onPostExecute(IfConfigMeJson result) {\n    String resultAsString =  new StringBuilder()\n                      .append(\"Your current IP is : \")\n                      .append(result.getIpAddr()).toString();\n    resultTextView.setText(resultAsString );\n  }\n\n};\n\nString url = \"http://ifconfig.me/all.json\";\n//triggers the task\nsimpleGetTask.execute(url);\n```", "```kt\npublic class IfConfigMeJson {\n  private String connection;\n  @JsonProperty(\"ip_addr\")\n  private String ipAddr;\n  public String getConnection() {\n    return connection;\n  }\n  public void setConnection(String connection) {\n    this.connection = connection;\n  }\n  public String getIpAddr() {\n    return ipAddr;\n  }\n  public void setIpAddr(String opAddr) {\n    this.ipAddr = opAddr;\n  }\n```", "```kt\n<dependency>\n<groupId>org.codehaus.jackson</groupId>\n  <artifactId>jackson-mapper-asl</artifactId>\n  <version>${jackson-version}</version>\n</dependency>\n```", "```kt\nAsyncTask<String, Void, IfConfigMeXml> simpleGetTask =  \n   new AsyncTask<String, Void, IfConfigMeXml>() {\n   @Override\n   protected IfConfigMeXml doInBackground(String... params) {\n      String url = params[0];\nRestTemplate restTemplate = new RestTemplate();\n      SimpleXmlHttpMessageConverter xmlConverter = \n           new SimpleXmlHttpMessageConverter();\n      restTemplate.getMessageConverters().add(xmlConverter);\n      return restTemplate.getForObject(url, IfConfigMeXml.class);\n   }\n\n   @Override\n   protected void onPostExecute(IfConfigMeXml result) {\n       String resultAsString =  new StringBuilder()\n                  .append(\"Your current IP is : \")\t\n                  .append(result.getIpAddr()).toString();\n       resultTextView.setText(resultAsString );\n   }\n\n};\n\nString url = \"http://ifconfig.me/all.xml\";\n\n```", "```kt\n<info>\n<forwarded/>\n<ip_addr>70.43.43.43</ip_addr>\n[...]\n</info>\n```", "```kt\n@Root (name=\"info\")\npublic class IfConfigMeXml {\n\n  @Element(required=false)\n  private String forwarded;\n\n  @Element(name=\"ip_addr\")\n  private String ipAddr;\n  [...]\n}\n```", "```kt\n<dependency>\n  <groupId>org.simpleframework</groupId>\n  <artifactId>simple-xml</artifactId>\n  <version>${simple-version}</version>\n  <exclusions>\n    <!-- StAX is not available on Android -->\n    <exclusion>\n      <artifactId>stax</artifactId>\n      <groupId>stax</groupId>\n    </exclusion>\n    <exclusion>\n      <artifactId>stax-api</artifactId>\n      <groupId>stax</groupId>\n    </exclusion>\n    <!-- Provided by Android -->\n    <exclusion>\n      <artifactId>xpp3</artifactId>\n      <groupId>xpp3</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```", "```kt\nfinal WebView resultTextView = (WebView) findViewById(R.id.result_text);\nAsyncTask<String, Void, Channel> simpleGetTask =  new AsyncTask<String, Void, Channel>() {\n   @Override\n   protected Channel doInBackground(String... params) {\n      RestTemplate restTemplate = new RestTemplate();\n      // Configure the RSS message converter.\n       RssChannelHttpMessageConverter rssChannelConverter = new RssChannelHttpMessageConverter();\n      rssChannelConverter.setSupportedMediaTypes(\n         Collections.singletonList(MediaType.TEXT_XML));\n\n        // Add the RSS message converter to the RestTemplate instance\n        restTemplate.getMessageConverters().add(rssChannelConverter);\n\n      // Make the HTTP GET request on the url (params[0]), marshaling //the response to a String\n      return restTemplate.getForObject(params[0], Channel.class);\n   }\n\n   @Override\n   protected void onPostExecute(Channel result) {\n      //get the latest article from the blog\n      Item item = (Item) result.getItems().get(0);\n\n      // load the content of the article into the WebView\n      resultTextView.loadData(item.getContent().getValue(), \"text/html\", \"UTF-8\");\n   }\n};\nString url = \"http://blog.dahanne.net/feed/\";\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\">\n<channel>\n   <title>Anthony Dahanne's blog</title>\n   <description>A blog</description>\n   [...]\n   <item>\n      <title>Article 1</title>\n      <description>content of the article</description>\n      [...]\n   </item>\n   [...]\n</channel>\n</rss>\n```", "```kt\n<dependency>\n   <groupId>com.google.code.android-rome-feed-reader</groupId>\n   <artifactId>android-rome-feed-reader</artifactId>\n   <version>${android-rome-version}</version>\n</dependency>\n\n<repositories>\n   <repository>\n      <id>android-rome-feed-reader-repository</id>\n      <name>Android ROME Feed Reader Repository</name>\n      <url>https://android-rome-feed-reader.googlecode.com/svn/maven2/releases</url>\n   </repository>\n</repositories>\n```", "```kt\n@Override\nprotected IfConfigMeJson doInBackground(String... params) {\n\n   HttpHeaders requestHeaders = new HttpHeaders();\n   requestHeaders.setAcceptEncoding(ContentCodingType.IDENTITY);\n// Add the gzip Accept-Encoding header   \n//requestHeaders.setAcceptEncoding(ContentCodingType.GZIP);\n   HttpEntity<?> requestEntity = \n        new HttpEntity<Object>(requestHeaders);\n   RestTemplate restTemplate = new RestTemplate();\n   MappingJacksonHttpMessageConverter jacksonConverter = \n        new MappingJacksonHttpMessageConverter();\n   restTemplate.getMessageConverters().add(jacksonConverter);\n   ResponseEntity<IfConfigMeJson> response = \n        restTemplate.exchange(params[0], HttpMethod.GET, \n                      requestEntity, IfConfigMeJson.class);\n   return response.getBody();\n}\n```", "```kt\nAsyncTask<String, Void, String> simpleGetTask =  new AsyncTask<String, Void, String>() {\n   @Override\n   protected String doInBackground(String... params) {\n      // Set the credentials for creating a Basic Auth request\n      HttpAuthentication authHeader = \n          new HttpBasicAuthentication(\"s4a\", \"s4a\");\n      HttpHeaders requestHeaders = new HttpHeaders();\n      requestHeaders.setAuthorization(authHeader);\n      HttpEntity<?> requestEntity = \n          new HttpEntity<Object>(requestHeaders);\n\n      RestTemplate restTemplate = new RestTemplate();\n\n      restTemplate.getMessageConverters()\n              .add(new StringHttpMessageConverter());\n\n      try {\n          // Make the GET request to the Basic Auth protected URL\n          ResponseEntity<String> response = \n                restTemplate.exchange(params[0], HttpMethod.GET, \n                       requestEntity, String.class);\n          return response.getBody();\n      } catch (HttpClientErrorException e) {\n         // Handle 401 Unauthorized response\n         Log.e(\"MainActivity\",e.getLocalizedMessage(),e);\n         return \"Wrong credentials\";\n      }\n   }\n\n   @Override\n   protected void onPostExecute(String result) {\n      // executed by the UI thread\t\t \n      resultTextView.setText(result);\n   }\n\n};\n```", "```kt\n    public class Recipe {\n\n       private Long id;\n       private String title;\n       private String description;\n       private String type;\n       private String author;\n    }\n    ```", "```kt\n    private class GetRecipesTask extends RecipeAbstractAsyncTask <Void, Void, List<Recipe>> {\n\n       @Override\n       protected void onPreExecute() {\n          showProgressDialog(\"Loading recipes. Please wait...\");\n       }\n\n       @Override\n       protected List<Recipe> doInBackground(Void... params) {\n          HttpHeaders requestHeaders =  \n                   prepareHeadersWithMediaTypeAndBasicAuthentication();\n\n          // Populate the headers in an HttpEntity object\t\t\n          HttpEntity<?> requestEntity = \n                   new HttpEntity<Object>(requestHeaders);\n\n          // Create a new RestTemplate instance\n          RestTemplate restTemplate = new RestTemplate();\n          restTemplate.getMessageConverters()\n    .add(new MappingJacksonHttpMessageConverter());\n\n          try {\n             // Perform the HTTP GET request\n             ResponseEntity<Recipe[]> responseEntity = \n                restTemplate.exchange(\n                   \"http://www.restfulapp.appspot.com/rest/recipes/\",\n                   HttpMethod.GET, requestEntity,\n       Recipe[].class);\n             return Arrays.asList(responseEntity.getBody());\n          }\n          catch (RestClientException e) {\n             Log.e(TAG, e.getMessage(), e);\n             exception = e;\n             return null;\n          }\n       }\n\n       @Override\n       protected void onPostExecute(List<Recipe> result) {\n          dismissProgressDialog();\n          if(result != null) {\n             recipes = result;\n          } else {\n             String message = exception != null ? \n                exception.getMessage() : \"unknown reason\";\n             Toast.makeText(RecipesList.this, \n                \"A problem occurred during the reception of all recipes\n                : \" +message , Toast.LENGTH_LONG).show();\n              recipes = new ArrayList<Recipe>();\n          }\n          ListAdapter adapter = new RecipeAdapter(RecipesList.this, \n             R.layout.recipeslist_item, recipes ) ;\n          setListAdapter(adapter );\n       }\n    }\n    ```", "```kt\nprotected HttpHeaders prepareHeadersWithMediaTypeAndBasicAuthentication() {\n      HttpHeaders requestHeaders = new HttpHeaders();\n      List<MediaType> acceptableMediaTypes = new ArrayList<MediaType>();\n      acceptableMediaTypes.add(MediaType.APPLICATION_JSON);\n      requestHeaders.setAccept(acceptableMediaTypes);\n      HttpAuthentication authHeader = new HttpBasicAuthentication(\"s4a\", \"s4a\");\n      requestHeaders.setAuthorization(authHeader);\n      return requestHeaders;\n   }\n```", "```kt\n// Perform the HTTP GET request\n               ResponseEntity<Recipe[]> responseEntity = restTemplate.exchange(getString(R.string.recipe_resource_url), HttpMethod.GET, requestEntity, Recipe[].class);\n```", "```kt\ncurl --user s4a:s4a  -H \"Accept: application/json\" -i http://www.restfulapp.appspot.com/rest/recipes \n[{\"id\":0,\"title\":\"Montreal's Poutine\",\"description\":\"French fries are covered with fresh cheese curds, and topped with brown gravy.\",\"type\":\"MAIN_DISH\",\"author\":\"Anthony\"},{\"id\":1,\"title\":\"a title\",\"description\":\"a description\",\"type\":\"a type\",\"author\":\"an author\"}]\n```", "```kt\n    // Perform the HTTP GET request\n    Log.i(TAG,\"Getting the recipe with id : \"+params[0] + \" : \" +url + params[0]);\n    ResponseEntity<Recipe> responseEntity = restTemplate.exchange(url + params[0], HttpMethod.GET, requestEntity,\tRecipe.class);\n    return responseEntity.getBody();\n    ```", "```kt\n    curl --user s4a:s4a  -H \"Accept: application/json\" -i http://www.restfulapp.appspot.com/rest/recipes/0\n    {\"id\":0,\"title\":\"Montreal's Poutine\",\"description\":\"French fries are covered with fresh cheese curds, and topped with brown gravy.\",\"type\":\"MAIN_DISH\",\"author\":\"Anthony\"}\n    ```", "```kt\n    // Create a new RestTemplate instance\n    RestTemplate restTemplate = new RestTemplate();\n    restTemplate.getMessageConverters()\n       .add(new MappingJacksonHttpMessageConverter());\n\n    // Populate the headers in an HttpEntity object HttpEntity<Recipe> requestEntity = new HttpEntity<Recipe>(recipe,requestHeaders);\n    try {\n       // Perform the HTTP PUT request\n       Log.i(TAG,\"Updating the recipe with id : \"\n          +recipe.getId() + \" : \" + url);\n       ResponseEntity<Void> responseEntity = \n          restTemplate.exchange(url, HttpMethod.PUT, requestEntity,\n          Void.class);\n       if(responseEntity.getStatusCode() != HttpStatus.OK) {\n          throw new HttpServerErrorException(\n             responseEntity.getStatusCode());\n       }\n    }\n    catch (RestClientException e) {\n       Log.d(TAG, e.getMessage(), e);\n       exception = e;\n    }\n    ```", "```kt\n    curl --user s4a:s4a  -H \"Accept: application/json\" -H \"Content-type: application/json\"  -X PUT -d '{\"id\":\"0\", \"title\":\"a title\",\"description\":\"a description\",\"type\":\"a type\",\"author\":\"an author\"}'  -i http://www.restfulapp.appspot.com/rest/recipes/\n    ```", "```kt\n    // Populate the headers in an HttpEntity object \n    HttpEntity<Recipe> requestEntity = \n       new HttpEntity<Recipe>(recipe,requestHeaders);\n    try {\n       // Perform the HTTP POST request\n       Log.i(TAG,\"Posting the recipe with id : \"\n          +recipe.getId() + \" : to \" +url);\n       ResponseEntity<Void> responseEntity = \n          restTemplate.exchange(url, HttpMethod.POST, requestEntity,\n          Void.class);\n       if(responseEntity.getStatusCode() != HttpStatus.CREATED) {\n          throw new HttpServerErrorException(\n             responseEntity.getStatusCode());\n       }\n    }\n    catch (RestClientException e) {\n       Log.d(TAG, e.getMessage(), e);\n       exception = e;\n    }\n    return null;\n    ```", "```kt\n    curl --user s4a:s4a  -H \"Accept: application/json\" -H \"Content-type: application/json\"  -X POST -d '{\"title\":\"a title\",\"description\":\"a description\",\"type\":\"a type\",\"author\":\"an author\"}'  -i http://www.restfulapp.appspot.com/rest/recipes/\n    ```", "```kt\n    try {\n       // Perform the HTTP DELETE request\n       Log.i(TAG,\"Deleting the recipe with id : \"\n          +recipe.getId() + \" : from \" +url +recipe.getId() );\n       ResponseEntity<Void> responseEntity = \n          restTemplate.exchange(url+recipe.getId(), \n          HttpMethod.DELETE, requestEntity,\tVoid.class);\n       if(responseEntity.getStatusCode() != HttpStatus.NO_CONTENT) {\n          throw new HttpServerErrorException(\n          responseEntity.getStatusCode());\n       }\n    }\n    catch (RestClientException e) {\n       Log.d(TAG, e.getMessage(), e);\n       exception = e;\n    }\n    ```", "```kt\n    curl --user s4a:s4a  -H \"Accept: application/json\" -X DELETE   -i http://www.restfulapp.appspot.com/rest/recipes/1\n    ```", "```kt\n@EActivity(R.layout.activity_main)\npublic class MainActivity extends Activity {\n\n   private IfConfigMeJson all;\n\n   //inject the view to the activity layout\n    @ViewById(R.id.result_text)\n    TextView resultTextView;\n\n    //inject the Rest service that wraps RestTemplate\n    @RestService\n   IfConfigMeRestClient restClient;\n         //Use the Rest Service in a background thread\n    @Background\n    @AfterInject\n    void getAllInfo() {\n       all = restClient.getAll();\n    }\n\n    //wait a few seconds for the service to finish\n   @UiThread(delay = 5000)\n   @AfterViews\n   void afterViews() {\n      resultTextView.setText(\"Your IP is : \"+all.getIpAddr());\n   }\n\n}\n```", "```kt\n@Rest(rootUrl = \"http://ifconfig.me\", converters = \n      { MappingJacksonHttpMessageConverter.class })\npublic interface IfConfigMeRestClient {\n\n   @Get(\"/all.json\")\n   @Accept(MediaType.APPLICATION_JSON)\n   IfConfigMeJson getAll();\n\n}\n```", "```kt\n    https://accounts.google.com/o/oauth2/auth?\n    client_id=508046100884-o6jgcn8e7c1g5gklhc8gibr80ouio8df.apps.googleusercontent.com&\n    response_type=code&\n    redirect_uri=http://localhost&\n    scope=https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/plus.me\n    ```", "```kt\n    http://localhost/?code=4/urIB_wqrOqGpX-2w1UPXD8dHQAYO.ArEX_6EbNP0ZuJJVnL49Cc98lfsNdgI\n    ```", "```kt\n    POST /o/oauth2/token HTTP/1.1\n    Host: accounts.google.com\n    Content-Type: application/x-www-form-urlencoded\n\n    code=4/v6xr77ewYqhvHSyW6UJ1w7jKwAzu&\n    client_id=8819981768.apps.googleusercontent.com&\n    client_secret={client_secret}&\n    redirect_uri=https://oauth2-login-demo.appspot.com/code&\n    grant_type=authorization_code\n    ```", "```kt\n    {\n      \"access_token\":\"1/fFAGRNJru1FTz70BzhT3Zg\",\n      \"expires_in\":3920,\n      \"token_type\":\"Bearer\",\n      \"refresh_token\":\"1/xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI\"\n    }\n    ```", "```kt\n    GET /oauth2/v1/userinfo HTTP/1.1\n    Authorization: Bearer 1/fFBGRNJru1FQd44AzqT3Zg\n    Host: googleapis.com\n    ```", "```kt\n<dependency>\n  <groupId>org.springframework.social</groupId>\n  <artifactId>spring-social-google</artifactId>\n  <version>1.0.0.M1</version>\n  <exclusions>\n    <!-- Exclude in favor of Spring Android RestTemplate -->\n    <exclusion>\n      <artifactId>spring-web</artifactId>\n      <groupId>org.springframework</groupId>\n      </exclusion>\n      <exclusion>\n      <artifactId>spring-core</artifactId>\n      <groupId>org.springframework</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n[...]\n<repository>\n  <id>spring.social.google</id>\n  <name>Spring Social Google</name>\n  <url>https://github.com/GabiAxel/maven/raw/master/</url>\n</repository>\n```", "```kt\n[...]\n<application\n    android:name=\".MainApplication\"\n    android:icon=\"@drawable/app_notes\"\n    android:label=\"@string/app_name\" >\n    <activity\n        android:name=\".GoogleActivity\"\n        android:label=\"@string/title_main\" >\n        [...]\n    </activity>\n    <activity\n        android:name=\".GoogleWebOAuthActivity\"\n        android:excludeFromRecents=\"true\"\n        android:noHistory=\"true\" />\n    <activity android:name=\".GoogleProfileActivity\" />\n</application>\n```", "```kt\npublic class MainApplication extends Application {\n  private ConnectionFactoryRegistry connectionFactoryRegistry;\n  private SQLiteOpenHelper repositoryHelper;\n  private ConnectionRepository connectionRepository;\n\n  // ***************************************\n  // Application Methods\n  // ***************************************\n  @Override\n  public void onCreate() {\n    // create a new ConnectionFactoryLocator and populate it with Google ConnectionFactory\n    this.connectionFactoryRegistry = new ConnectionFactoryRegistry();\n    this.connectionFactoryRegistry.addConnectionFactory(new GoogleConnectionFactory(getClientId(),\n        getClientSecret()));\n\n    // set up the database and encryption\n    this.repositoryHelper = new SQLiteConnectionRepositoryHelper(this);\n    this.connectionRepository = new SQLiteConnectionRepository(this.repositoryHelper,\n        this.connectionFactoryRegistry, AndroidEncryptors.text(\"password\", \"5c0744940b5c369b\"));\n  }\n```", "```kt\n@Override\npublic void onStart() {\n  super.onStart();\n  if (isConnected()) {\n    showGoogleOptions();\n  } else {\n    showConnectOption();\n  }\n}\n\nprivate boolean isConnected() {\n  return connectionRepository.findPrimaryConnection(Google.class) != null;\n}\n```", "```kt\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n\n  //javascript is mandatory\n  getWebView().getSettings().setJavaScriptEnabled(true);\n\n  // Using a custom web view client to capture the access token\n  getWebView().setWebViewClient(new GoogleOAuthWebViewClient());\n\n  this.connectionRepository = getApplicationContext().getConnectionRepository();\n  this.connectionFactory = getApplicationContext().getGoogleConnectionFactory();\n}\n\n@Override\npublic void onStart() {\n  super.onStart();\n\n  // display the Google authorization page\n  getWebView().loadUrl(getAuthorizeUrl());\n}\n\n// ***************************************\n// Private methods\n// ***************************************\nprivate String getAuthorizeUrl() {\n  String redirectUri = getString(R.string.google_oauth_callback_url);\n  String scope = getString(R.string.google_scope);\n\n  // Generate the Google authorization url to be used in the browser \n  OAuth2Parameters params = new OAuth2Parameters();\n  params.setRedirectUri(redirectUri);\n  params.setScope(scope);\n  return this.connectionFactory.getOAuthOperations().buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, params);\n}\n```", "```kt\n<resources>\n    <string name=\"google_app_id\">508046100884-o6jgcn8e7c1g5gklhc8gibr80ouio8df.apps.googleusercontent.com</string>\n    <string name=\"google_app_secret\">RuUyrF5qoGYWTFm1r_o8Gs4F</string>\n    <string name=\"google_oauth_callback_url\">http://localhost</string>\n    <string name=\"google_scope\">https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/plus.me</string>\n</resources>\n```", "```kt\nprivate class GoogleOAuthWebViewClient extends WebViewClient {\n\n  private static final String LOCALHOST = \"localhost\";\n  private static final String CODE = \"code\";\n\n  /*\n   * The WebViewClient has another method called shouldOverridUrlLoading which does not capture the javascript \n   * redirect to the success page. So we're using onPageStarted to capture the url.\n   */\n  @Override\n  public void onPageStarted(WebView view, String url, Bitmap favicon) {\n    // parse the captured url\n    Uri uri = Uri.parse(url);\n     // log the url : very interesting for debugging the OAuth workflow\n    Log.d(TAG, url);\n\n    /*\n     * The WebViewClient is launched to load an URL from the provider that will ask the user whether or not he accepts our app to access his data.\n     * Once the provider successfully gets the approval from the user, it will redirect this WebViewClient to the callback_uri, with a query parameter named \"code\" : this is the authorization code\n     */\n    String host = uri.getHost();\n    String code = uri.getQueryParameter(CODE);\n\n    // The WebViewClient is redirected to the callback_uri, let's trade the authorization code for the access token\n    if (LOCALHOST.equals(host)) {\n      if(!exchangeAuthorizationCodeForAccessToken.getStatus().equals(AsyncTask.Status.RUNNING)) {\n        exchangeAuthorizationCodeForAccessToken.execute(code);\n        Toast.makeText(getApplicationContext(), \"Redirecting you to the app main activity\", Toast.LENGTH_LONG).show();\n        //preparing to quit this activity for the main activity\n        getWebView().setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n}\n```", "```kt\nprivate AsyncTask<String, Void, Void> exchangeAuthorizationCodeForAccessToken =  new AsyncTask<String, Void, Void>() {\n\n  private Exception exception;\n\n  @Override\n  protected Void doInBackground(String... params) {\n    // executed by a background thread\n    //params[0] should contain the authorization code\n    try {\n      AccessGrant exchangeForAccess = connectionFactory.getOAuthOperations().exchangeForAccess(params[0], getString(R.string.google_oauth_callback_url), null);\n      Connection<Google> connection = connectionFactory.createConnection(exchangeForAccess);\n      connectionRepository.addConnection(connection);\n    } catch (DuplicateConnectionException e) {\n      Log.e(TAG,\"something went wrong when adding the accessToken to the connection repository\",e);\n      exception = e;\n    } catch (Exception e) {\n      Log.e(TAG,\"something went wrong when adding the accessToken to the connection repository\",e);\n      exception = e;\n    }\n    return null;\n  }\n\n  @Override\n  protected void onPostExecute(Void result) {\n    // executed by the UI thread once the background thread is done getting the result\n    if(exception != null) {\n      Toast.makeText(getApplicationContext(), exception.getMessage(), Toast.LENGTH_LONG).show();\n    }\n      // we go back to the main activity to display the options\n      displayGoogleOptions();\n  }\n\n};\n```", "```kt\n@Override\nprotected LegacyGoogleProfile doInBackground(Void... params) {\n\n    LegacyGoogleProfile userProfile = google.userOperations().getUserProfile();\n    aboutMe = google.personOperations().getGoogleProfile().getAboutMe();\n    profileBitmap = BitmapFactory.decodeStream(new URL(userProfile.getProfilePictureUrl()).openConnection().getInputStream());\n    return userProfile;\n\n}\n```"]