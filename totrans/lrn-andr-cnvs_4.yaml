- en: Chapter 4. NinePatch Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。NinePatch 图像
- en: 'In this chapter we will learn about NinePatch images: what they are, their
    importance, how they are created, how they can be used, and what difference they
    can make in our Android applications.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解NinePatch图像：它们是什么，它们的重要性，如何创建它们，如何使用它们，以及它们可以在我们的Android应用程序中产生什么影响。
- en: NinePatch images are important because we want to develop our layout in such
    a way that it can adjust if either the orientation changes or our application
    is hosted on devices with different resolution. Our application layout needs to
    be flexible enough to adjust according to the resolution, screen size, and orientation
    of different devices. NinePatch images are images that have stretchable areas.
    The stretchable areas can stretch horizontally and vertically to encapsulate the
    content inside. The best part is that, if the width and height of the content
    is not defined, NinePatch images can stretch horizontally and vertically to fit
    all kinds of content with any type of width and height. Normally NinePatch images
    are used in the backgrounds of different types of containers or views that will
    host some kind of content. It can be used as a background for our activity in
    our application or it can be used only to form the background of a button with
    some text in it. Ninepatch images are normal PNG images with an extra 1-pixel
    wide border. One thing must be made sure that NinePatch images must be saved with
    .`9.png` file extension.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NinePatch 图像非常重要，因为我们希望以这样的方式开发我们的布局，即如果方向改变或者我们的应用程序在不同的分辨率设备上运行，它都可以调整。我们应用程序的布局需要足够灵活，以根据不同设备的分辨率、屏幕尺寸和方向进行调整。NinePatch
    图像是具有可伸展区域的图像。这些可伸展区域可以水平和垂直伸展以包含内部内容。最好的部分是，如果内容的宽度和高度未定义，NinePatch 图像可以水平和垂直伸展以适应任何类型的宽度和高度的任何内容。通常，NinePatch
    图像用于不同类型容器或视图的背景中，这些容器或视图将承载某种类型的内容。它可以作为我们应用程序中活动的背景，或者仅用于带文本的按钮的背景。Ninepatch
    图像是带有额外1像素宽边框的普通PNG图像。必须确保一件事，NinePatch 图像必须保存为 `.9.png` 文件扩展名。
- en: 'NinePatch image s are so called because the Drawable object is allowed to draw
    an image in nine sections. To make the idea clear, just have a look at the following
    diagram:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: NinePatch 图像之所以这样称呼，是因为Drawable对象允许在九个区域中绘制图像。为了使这个概念清晰，请查看以下图表：
- en: '![NinePatch Images](img/5396OS_04_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![NinePatch 图像](img/5396OS_04_01.jpg)'
- en: In the previous diagram there are stretchable and non-stretchable areas. In
    a NinePatch image, four sections will be stretchable; in the preceding example
    they are sections **2**, **4**, **6**, and **8.** Four sections will be non-stretchable,
    in the preceding example they are sections **1**, **3**, **7**, and **9**. The
    last section is the content section that will stretch in both the directions;
    in the previous example it is section **5**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个图表中，有可伸展和不可伸展的区域。在NinePatch图像中，四个部分将是可伸展的；在前面示例中它们是部分**2**，**4**，**6**和**8**。四个部分将不可伸展，在前面示例中它们是部分**1**，**3**，**7**和**9**。最后一部分是内容区域，将在两个方向上伸展；在之前的示例中它是部分**5**。
- en: In the stretchable sections, sections **2** and **8** will stretch only horizontally.
    Sections **4** and **6** will stretch only vertically. Section **5** will stretch
    horizontally and vertically and this is the main section of the graphic that will
    hold the contents.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在可伸展的区域中，第**2**和**8**部分仅水平伸展。第**4**和**6**部分仅垂直伸展。第**5**部分将水平和垂直伸展，这是图形的主要部分，用于容纳内容。
- en: One important thing here is that it's not necessary to have the patches in the
    exact style as shown in the example. The NinePatch image can be created to have
    patches that may extend only horizontally or vertically; moreover it can have
    more patches than in the mentioned example.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里重要的一点是，并不一定需要按照示例中显示的确切样式来设置补丁。NinePatch 图像可以创建为仅水平或垂直延伸的补丁；此外，它还可以拥有比提到的示例更多的补丁。
- en: Creating a NinePatch image
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 NinePatch 图像
- en: To create a NinePatch image, Android provides a very simple tool; however, before
    we move to that tool we need to know the requirements to use the tool. The first
    thing is that we need to have our base PNG graphic file that we will convert to
    our first NinePatch image. We can create our base PNG image in any graphics-editing
    tool such as Photoshop. So we will start creating our base PNG image by opening
    Photoshop and creating a new PNG image.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建 NinePatch 图像，Android 提供了一个非常简单的工具；然而，在使用该工具之前，我们需要了解使用该工具的要求。首先，我们需要有一个基础的
    PNG 图形文件，我们将把它转换成我们的第一个 NinePatch 图像。我们可以在任何图形编辑工具中创建我们的基础 PNG 图像，比如 Photoshop。因此，我们将通过打开
    Photoshop 并创建一个新的 PNG 图像来开始创建我们的基础 PNG 图像。
- en: 'The following screenshot shows the **New** file-creation dialog in Photoshop:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了 Photoshop 中**新建**文件对话框：
- en: '![Creating a NinePatch image](img/5396OS_04_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![创建 NinePatch 图像](img/5396OS_04_02.jpg)'
- en: We are planning to create a box with green color and we will convert the content
    inside that to a NinePatch image later. To start, we will name our file as `MyFirst9PatchBox`
    and will set **Background Contents** to **Transparent**. By clicking on **OK**
    we will get an empty canvas. Next we will draw a box with green color inside and
    with a transparent background.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划创建一个绿色的盒子，稍后会将盒子内的内容转换为 NinePatch 图像。首先，我们将文件命名为 `MyFirst9PatchBox` 并将 **背景内容**
    设置为 **透明**。点击 **确定** 后，我们会得到一个空白画布。接下来，我们将在画布内绘制一个带有透明背景的绿色盒子。
- en: 'The following screenshot shows the green box we drew in Photoshop:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了我们在 Photoshop 中绘制的绿色盒子：
- en: '![Creating a NinePatch image](img/5396OS_04_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![创建 NinePatch 图像](img/5396OS_04_03.jpg)'
- en: By default Photoshop saves the file in the PSD format but we will save the file
    in the PNG format because we will need a PNG file to convert it to NinePatch image.
    Alternatively, we can save the file for web; that way the PNG created will be
    lighter. This will increase the overall application performance. Using many heavy
    images in our application can reduce the performance of our application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Photoshop 以 PSD 格式保存文件，但我们会以 PNG 格式保存文件，因为我们需要一个 PNG 文件来将其转换为 NinePatch
    图像。或者，我们可以将文件保存为网页格式；这样创建的 PNG 文件会更小。这将提高应用程序的整体性能。在我们的应用程序中使用许多重量级的图像可能会降低应用程序的性能。
- en: To create a NinePatch image from our green box PNG file, we will open the Draw
    9-patch tool provided in the Android SDK in the `Tools` folder. To do this we
    will browse to `Tools` folder in Android SDK and will locate the `draw9patch.bat`
    file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的绿色盒子 PNG 文件创建 NinePatch 图像，我们将打开 Android SDK 中 `Tools` 文件夹提供的 Draw 9-patch
    工具。为此，我们将浏览到 Android SDK 中的 `Tools` 文件夹，并找到 `draw9patch.bat` 文件。
- en: The path for the file would be `F:\Android\adt-bundle-windows-x86_64-20130219\adt-bundle-windows-x86_64-20130219\sdk\tools`,
    where `F` is my drive, Android is a folder at the root of `F` drive and the rest
    comes inside the Android folder. The following screenshot shows the location of
    the `draw9patch` tool.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的路径为 `F:\Android\adt-bundle-windows-x86_64-20130219\adt-bundle-windows-x86_64-20130219\sdk\tools`，其中
    `F` 是我的驱动器，Android 是 `F` 驱动器根目录下的一个文件夹，其余部分位于 Android 文件夹内。下面的截图展示了 `draw9patch`
    工具的位置。
- en: '![Creating a NinePatch image](img/5396OS_04_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![创建 NinePatch 图像](img/5396OS_04_04.jpg)'
- en: 'By double-clicking on that we can open the `draw9patch` tool. The following
    screenshot shows the `draw9patch` tool with an empty screen:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 双击可以打开 `draw9patch` 工具。下面的截图展示了带有空屏幕的 `draw9patch` 工具：
- en: '![Creating a NinePatch image](img/5396OS_04_05.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![创建 NinePatch 图像](img/5396OS_04_05.jpg)'
- en: In the next step we will either drag-and-drop our PNG base image to the `draw9patch`
    tool or will open our PNG file in the `draw9patch` tool.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将把我们的 PNG 基础图像拖拽到 `draw9patch` 工具中，或者直接在 `draw9patch` 工具中打开我们的 PNG 文件。
- en: 'The following screenshot shows our base PNG file and the `draw9patch` tool
    side by side:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了我们的基础 PNG 文件和 `draw9patch` 工具并排显示：
- en: '![Creating a NinePatch image](img/5396OS_04_06.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![创建 NinePatch 图像](img/5396OS_04_06.jpg)'
- en: 'When we drag-and-drop or open our base PNG file in the `draw9patch` tool, the
    following screenshot is what we will see:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将基础 PNG 文件拖拽或打开在 `draw9patch` 工具中时，我们会看到以下截图：
- en: '![Creating a NinePatch image](img/5396OS_04_07.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![创建 NinePatch 图像](img/5396OS_04_07.jpg)'
- en: The right-hand side area shows the drawing area where we will define our patches—the
    areas that we want to stretch and the areas that we don't want to stretch. The
    left-hand side pane shows the preview area.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧区域显示了绘图区域，我们将在其中定义我们的补丁区域——需要拉伸的区域和不需要拉伸的区域。左侧窗格显示了预览区域。
- en: In the next step we will define our patches. When we move the cursor over the
    image, we will see very light horizontal and vertical lines. We will drag these
    horizontal and vertical lines to define our patches.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将定义我们的补丁。当我们将光标移到图像上时，我们会看到非常浅的水平和垂直线。我们将拖动这些水平和垂直线来定义我们的补丁。
- en: 'The following screenshot shows our defined patches:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了我们定义的补丁：
- en: '![Creating a NinePatch image](img/5396OS_04_08.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![创建NinePatch图像](img/5396OS_04_08.jpg)'
- en: The light green vertical and horizontal regions show us our defined patches
    and these are the stretchable sections. If we define our patches incorrectly,
    then when we put contents inside them, they won't stretch properly to capture
    all the content. This tool shows us whether we have bad patches. There is a button
    on top right corner in the left-hand side pane named **Show bad patches**. By
    clicking on it, it will show us the bad patches if we have bad patches in our
    9-patch image.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 浅绿色垂直和水平区域显示了我们定义的补丁区域，这些是可拉伸的部分。如果我们错误地定义了补丁，那么当我们在其中放入内容时，它们将无法正确伸展以包含所有内容。这个工具会告诉我们是否有错误的补丁。在左侧窗格的右上角有一个名为**显示错误补丁**的按钮。点击它，如果我们的9-patch图像中有错误补丁，它会显示错误补丁。
- en: 'The following screenshot shows the bad patches:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了错误补丁：
- en: '![Creating a NinePatch image](img/5396OS_04_09.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建NinePatch图像](img/5396OS_04_09.jpg)'
- en: These patches marked with a red border are the bad patches that won't stretch
    properly to capture the entire contents inside it. I have done this just to make
    the idea clear what a bad patch will look like. We will adjust our horizontal
    and vertical lines to get proper patches, will check if there are no bad patches,
    and then we will save our file as `MyFirst9Patch.9.png`; then we are done with
    creating our first NinePatch image.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些用红色边框标记的补丁是错误的补丁，它们不能正确伸展以包含其中的全部内容。我这样做只是为了清楚地说明错误补丁的外观。我们将调整水平和垂直线以获得正确的补丁，检查是否有错误补丁，然后我们将文件保存为`MyFirst9Patch.9.png`；这样我们就完成了第一个NinePatch图像的创建。
- en: Using a NinePatch image
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NinePatch图像
- en: We will start by opening Eclipse and starting a new Android Project. We will
    name our project as `MyFirst9PatchApp`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从打开Eclipse并开始一个新的Android项目开始。我们将项目命名为`MyFirst9PatchApp`。
- en: 'The following screenshot shows the new app''s configuration settings:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了新应用程序的配置设置：
- en: '![Using a NinePatch image](img/5396OS_04_10.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用NinePatch图像](img/5396OS_04_10.jpg)'
- en: In the next step of the wizard we will provide our base PNG file as the icon
    for our application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在向导的下一步中，我们将提供基础的PNG文件作为我们应用程序的图标。
- en: 'The following screenshot shows the icon configuration screen:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了图标配置屏幕：
- en: '![Using a NinePatch image](img/5396OS_04_11.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用NinePatch图像](img/5396OS_04_11.jpg)'
- en: 'In the next step we will name our main activity as `MyFirst9PatchAppMainActivity`.
    The following screenshot shows the main activity configuration screen:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将主活动命名为`MyFirst9PatchAppMainActivity`。下面的截图显示了主活动配置屏幕：
- en: '![Using a NinePatch image](img/5396OS_04_12.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![使用NinePatch图像](img/5396OS_04_12.jpg)'
- en: 'We will click on **Finish**, which completes the execution of the wizard, and
    will come to the **Design** view of our application. The following screenshot
    shows the **Design** view of our application:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将点击**完成**，这会完成向导的执行，并进入我们应用程序的**设计**视图。下面的截图显示了应用程序的**设计**视图：
- en: '![Using a NinePatch image](img/5396OS_04_13.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用NinePatch图像](img/5396OS_04_13.jpg)'
- en: The next thing we will do is to copy our NinePatch image in the `res/drawable`
    folder of our project, so that we can use that NinePatch image in our code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的是将我们的NinePatch图像复制到项目的`res/drawable`文件夹中，这样我们就可以在代码中使用这个NinePatch图像了。
- en: 'Next we will open the `activity_my_first9_patch_app_main.xml` file of our main
    activity and will create a button in the code. The entire `Button` code looks
    like the following code snippet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将打开主活动的`activity_my_first9_patch_app_main.xml`文件，并在代码中创建一个按钮。整个`Button`代码如下所示：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following two lines are the most important in the previous code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码中以下两行是最重要的：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first line shows which Drawable tool the button will use as its background
    and the second line shows which text to display on the button as its content.
    Now in the preceding example, the string name is `buttonwith9patchimage` and its
    value is **Button With 9 Patch Image in the Background and we need to add some
    more text to make the button background extended more than 3 lines**. The need
    to add so much text to the button is to make it multiline; this will enable us
    to see the stretching effect of the NinePatch image.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行显示了按钮将使用哪个Drawable工具作为其背景，第二行显示了按钮上要显示的文本内容。现在在上面的例子中，字符串名称是`buttonwith9patchimage`，它的值是**背景带有9
    Patch图像的按钮**，并且我们需要添加更多文本以使按钮背景扩展超过3行。需要向按钮添加这么多文本是为了使其成为多行；这将使我们能够看到NinePatch图像的拉伸效果。
- en: 'The following screenshot shows the button with the stretched NinePatch image
    in the background:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了背景带有拉伸NinePatch图像的按钮：
- en: '![Using a NinePatch image](img/5396OS_04_14.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用NinePatch图像](img/5396OS_04_14.jpg)'
- en: Up until now, it is clear that we will use the NinePatch images mostly for dealing
    with our background graphics; especially when we don't know the width and height
    of the content that we want it to contain. So the next thing that we will do is
    change the whole background of our application's main activity. Let's say we don't
    like the default white background color for our activity and we need a custom
    background. In the preceding application, we will delete the button code from
    our XML file and will add the following code to the `Layout` tag.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，很明显，我们主要将使用NinePatch图像来处理背景图形；尤其是当我们不知道想要包含内容的宽度和高度时。接下来我们要做的是更改应用程序主活动的整个背景。比如说，我们不喜欢活动的默认白色背景，我们需要一个自定义背景。在前面提到的应用程序中，我们将从XML文件中删除按钮代码，并在`Layout`标签中添加以下代码。
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The previous code will enable us to use a stretchable background for our whole
    activity. Complete code for this tag will look like the following code snippet:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将使我们能够为整个活动使用可拉伸的背景。此标签的完整代码如下所示：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And when we test the application in the emulator, this is what we will see:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在模拟器中测试应用程序时，我们会看到以下内容：
- en: '![Using a NinePatch image](img/5396OS_04_15.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用NinePatch图像](img/5396OS_04_15.jpg)'
- en: In the previous image we can see that our NinePatch box image has stretched
    vertically and horizontally to fill the entire activity screen. This will provide
    a custom stretchable background for all our graphics-rich applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图片中，我们可以看到我们的NinePatch盒图像已经垂直和水平拉伸以填满整个活动屏幕。这将为我们所有图形丰富的应用程序提供一个自定义的可拉伸背景。
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have learned about images that can stretch to fill the container
    they are hosted in. These are known as NinePatch images. We learned about the
    importance of these stretchable images, their architecture, and the basic understanding
    of these images. We have also learned how we will convert simple images to these
    stretchable images and what are the common mistakes that we need to avoid. We
    have also learned how we can use these images in our Android applications in the
    background of views, controls, or in the background of the entire activity. In
    the next chapter we will learn about user interactions and graphics such as touch
    events.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到了一种可以拉伸以填满其所在容器的图像，这就是所谓的NinePatch图像。我们学习了这些可拉伸图像的重要性、它们的架构以及这些图像的基本理解。我们还学会了如何将简单图像转换为这些可拉伸图像，以及需要避免的常见错误。我们也学习了如何在Android应用程序中使用这些图像作为视图、控件背景，或者整个活动的背景。在下一章中，我们将学习关于用户交互和图形，如触摸事件。
