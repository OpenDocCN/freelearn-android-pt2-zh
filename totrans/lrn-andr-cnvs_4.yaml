- en: Chapter 4. NinePatch Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will learn about NinePatch images: what they are, their
    importance, how they are created, how they can be used, and what difference they
    can make in our Android applications.'
  prefs: []
  type: TYPE_NORMAL
- en: NinePatch images are important because we want to develop our layout in such
    a way that it can adjust if either the orientation changes or our application
    is hosted on devices with different resolution. Our application layout needs to
    be flexible enough to adjust according to the resolution, screen size, and orientation
    of different devices. NinePatch images are images that have stretchable areas.
    The stretchable areas can stretch horizontally and vertically to encapsulate the
    content inside. The best part is that, if the width and height of the content
    is not defined, NinePatch images can stretch horizontally and vertically to fit
    all kinds of content with any type of width and height. Normally NinePatch images
    are used in the backgrounds of different types of containers or views that will
    host some kind of content. It can be used as a background for our activity in
    our application or it can be used only to form the background of a button with
    some text in it. Ninepatch images are normal PNG images with an extra 1-pixel
    wide border. One thing must be made sure that NinePatch images must be saved with
    .`9.png` file extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'NinePatch image s are so called because the Drawable object is allowed to draw
    an image in nine sections. To make the idea clear, just have a look at the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NinePatch Images](img/5396OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous diagram there are stretchable and non-stretchable areas. In
    a NinePatch image, four sections will be stretchable; in the preceding example
    they are sections **2**, **4**, **6**, and **8.** Four sections will be non-stretchable,
    in the preceding example they are sections **1**, **3**, **7**, and **9**. The
    last section is the content section that will stretch in both the directions;
    in the previous example it is section **5**.
  prefs: []
  type: TYPE_NORMAL
- en: In the stretchable sections, sections **2** and **8** will stretch only horizontally.
    Sections **4** and **6** will stretch only vertically. Section **5** will stretch
    horizontally and vertically and this is the main section of the graphic that will
    hold the contents.
  prefs: []
  type: TYPE_NORMAL
- en: One important thing here is that it's not necessary to have the patches in the
    exact style as shown in the example. The NinePatch image can be created to have
    patches that may extend only horizontally or vertically; moreover it can have
    more patches than in the mentioned example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a NinePatch image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a NinePatch image, Android provides a very simple tool; however, before
    we move to that tool we need to know the requirements to use the tool. The first
    thing is that we need to have our base PNG graphic file that we will convert to
    our first NinePatch image. We can create our base PNG image in any graphics-editing
    tool such as Photoshop. So we will start creating our base PNG image by opening
    Photoshop and creating a new PNG image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **New** file-creation dialog in Photoshop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are planning to create a box with green color and we will convert the content
    inside that to a NinePatch image later. To start, we will name our file as `MyFirst9PatchBox`
    and will set **Background Contents** to **Transparent**. By clicking on **OK**
    we will get an empty canvas. Next we will draw a box with green color inside and
    with a transparent background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the green box we drew in Photoshop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default Photoshop saves the file in the PSD format but we will save the file
    in the PNG format because we will need a PNG file to convert it to NinePatch image.
    Alternatively, we can save the file for web; that way the PNG created will be
    lighter. This will increase the overall application performance. Using many heavy
    images in our application can reduce the performance of our application.
  prefs: []
  type: TYPE_NORMAL
- en: To create a NinePatch image from our green box PNG file, we will open the Draw
    9-patch tool provided in the Android SDK in the `Tools` folder. To do this we
    will browse to `Tools` folder in Android SDK and will locate the `draw9patch.bat`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The path for the file would be `F:\Android\adt-bundle-windows-x86_64-20130219\adt-bundle-windows-x86_64-20130219\sdk\tools`,
    where `F` is my drive, Android is a folder at the root of `F` drive and the rest
    comes inside the Android folder. The following screenshot shows the location of
    the `draw9patch` tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By double-clicking on that we can open the `draw9patch` tool. The following
    screenshot shows the `draw9patch` tool with an empty screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next step we will either drag-and-drop our PNG base image to the `draw9patch`
    tool or will open our PNG file in the `draw9patch` tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our base PNG file and the `draw9patch` tool
    side by side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we drag-and-drop or open our base PNG file in the `draw9patch` tool, the
    following screenshot is what we will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The right-hand side area shows the drawing area where we will define our patches—the
    areas that we want to stretch and the areas that we don't want to stretch. The
    left-hand side pane shows the preview area.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step we will define our patches. When we move the cursor over the
    image, we will see very light horizontal and vertical lines. We will drag these
    horizontal and vertical lines to define our patches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our defined patches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The light green vertical and horizontal regions show us our defined patches
    and these are the stretchable sections. If we define our patches incorrectly,
    then when we put contents inside them, they won't stretch properly to capture
    all the content. This tool shows us whether we have bad patches. There is a button
    on top right corner in the left-hand side pane named **Show bad patches**. By
    clicking on it, it will show us the bad patches if we have bad patches in our
    9-patch image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the bad patches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a NinePatch image](img/5396OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These patches marked with a red border are the bad patches that won't stretch
    properly to capture the entire contents inside it. I have done this just to make
    the idea clear what a bad patch will look like. We will adjust our horizontal
    and vertical lines to get proper patches, will check if there are no bad patches,
    and then we will save our file as `MyFirst9Patch.9.png`; then we are done with
    creating our first NinePatch image.
  prefs: []
  type: TYPE_NORMAL
- en: Using a NinePatch image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by opening Eclipse and starting a new Android Project. We will
    name our project as `MyFirst9PatchApp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the new app''s configuration settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a NinePatch image](img/5396OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next step of the wizard we will provide our base PNG file as the icon
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the icon configuration screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a NinePatch image](img/5396OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next step we will name our main activity as `MyFirst9PatchAppMainActivity`.
    The following screenshot shows the main activity configuration screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a NinePatch image](img/5396OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will click on **Finish**, which completes the execution of the wizard, and
    will come to the **Design** view of our application. The following screenshot
    shows the **Design** view of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a NinePatch image](img/5396OS_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we will do is to copy our NinePatch image in the `res/drawable`
    folder of our project, so that we can use that NinePatch image in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we will open the `activity_my_first9_patch_app_main.xml` file of our main
    activity and will create a button in the code. The entire `Button` code looks
    like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two lines are the most important in the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first line shows which Drawable tool the button will use as its background
    and the second line shows which text to display on the button as its content.
    Now in the preceding example, the string name is `buttonwith9patchimage` and its
    value is **Button With 9 Patch Image in the Background and we need to add some
    more text to make the button background extended more than 3 lines**. The need
    to add so much text to the button is to make it multiline; this will enable us
    to see the stretching effect of the NinePatch image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the button with the stretched NinePatch image
    in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a NinePatch image](img/5396OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Up until now, it is clear that we will use the NinePatch images mostly for dealing
    with our background graphics; especially when we don't know the width and height
    of the content that we want it to contain. So the next thing that we will do is
    change the whole background of our application's main activity. Let's say we don't
    like the default white background color for our activity and we need a custom
    background. In the preceding application, we will delete the button code from
    our XML file and will add the following code to the `Layout` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code will enable us to use a stretchable background for our whole
    activity. Complete code for this tag will look like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And when we test the application in the emulator, this is what we will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a NinePatch image](img/5396OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous image we can see that our NinePatch box image has stretched
    vertically and horizontally to fill the entire activity screen. This will provide
    a custom stretchable background for all our graphics-rich applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have learned about images that can stretch to fill the container
    they are hosted in. These are known as NinePatch images. We learned about the
    importance of these stretchable images, their architecture, and the basic understanding
    of these images. We have also learned how we will convert simple images to these
    stretchable images and what are the common mistakes that we need to avoid. We
    have also learned how we can use these images in our Android applications in the
    background of views, controls, or in the background of the entire activity. In
    the next chapter we will learn about user interactions and graphics such as touch
    events.
  prefs: []
  type: TYPE_NORMAL
