["```kt\n    import flash.display.Loader;\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.Event;\n    import flash.events.MediaEvent;\n    import flash.events.TouchEvent;\n    import flash.filesystem.File;\n    import flash.media.CameraRoll;\n    import flash.media.MediaPromise;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var loader:Loader;\n    private var cameraRoll:CameraRoll;\n\n    ```", "```kt\n    protected function setupLoader():void {\n    loader = new Loader();\n    loader.contentLoaderInfo.addEventListener(Event.COMPLETE, sizePhoto);\n    stage.addChild(loader);\n    }\n\n    ```", "```kt\n    protected function setupCameraRoll():void {\n    if(CameraRoll.supportsBrowseForImage){\n    cameraRoll = new CameraRoll();\n    cameraRoll.addEventListener(MediaEvent.SELECT, imageSelected);\n    registerListeners();\n    }else{\n    trace(\"CameraRoll does not support browse for image!\");\n    }\n    }\n\n    ```", "```kt\n    protected function registerListeners():void {\n    Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\n    stage.addEventListener(TouchEvent.TOUCH_TAP, loadFromCameraRoll);\n    }\n\n    ```", "```kt\n    protected function loadFromCameraRoll(e:TouchEvent):void {\n    cameraRoll.browseForImage();\n    }\n\n    ```", "```kt\n    protected function imageSelected(e:MediaEvent):void {\n    var promise:MediaPromise = e.data;\n    loader.loadFilePromise(promise);\n    }\n\n    ```", "```kt\n    protected function sizePhoto(e:Event):void {\n    loader.width = stage.stageWidth;\n    loader.scaleY = loader.scaleX;\n    }\n\n    ```", "```kt\n    import flash.display.Loader;\n    import flash.display.Shader;\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.Event;\n    import flash.events.TouchEvent;\n    import flash.filters.ShaderFilter;\n    import flash.net.URLLoader;\n    import flash.net.URLLoaderDataFormat;\n    import flash.net.URLRequest;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private const photoURL:String = \" {local file path or http address}\";\n    private var loader:Loader;\n    private var urlRequest:URLRequest;\n    private var urlLoader:URLLoader;\n    private var pbjArray:Array;\n    private var currentFilter:int;\n    private var shader:Shader;\n    private var shaderFilter:ShaderFilter;\n\n    ```", "```kt\n    protected function setupArray():void {\n    pbjArray = new Array();\n    pbjArray[0] = \"dot.pbj\";\n    pbjArray[1] = \"LineSlide.pbj\";\n    pbjArray[2] = \"outline.pbj\";\n    }\n\n    ```", "```kt\n    protected function setupLoader():void {\n    loader = new Loader();\n    loader.contentLoaderInfo.addEventListener(Event.COMPLETE, sizePhoto);\n    stage.addChild(loader);\n    }\n\n    ```", "```kt\n    protected function registerListeners():void {\n    Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\n    loader.addEventListener(TouchEvent.TOUCH_TAP, loadShader);\n    currentFilter = 0;\n    }\n\n    ```", "```kt\n    protected function loadPhotograph():void {\n    loader.load(new URLRequest(photoURL));\n    }\n\n    ```", "```kt\n    protected function sizePhoto(e:Event):void {\n    loader.width = stage.stageWidth;\n    loader.scaleY = loader.scaleX;\n    }\n\n    ```", "```kt\n    protected function loadShader(e:TouchEvent):void {\n    urlRequest = new URLRequest(pbjArray[currentFilter]);\n    urlLoader = new URLLoader();\n    urlLoader.dataFormat = URLLoaderDataFormat.BINARY;\n    urlLoader.addEventListener(Event.COMPLETE, applyFilter);\n    urlLoader.load(urlRequest);\n    if(currentFilter < pbjArray.length-1){\n    currentFilter++;\n    }else{\n    currentFilter = 0;\n    }\n    }\n\n    ```", "```kt\n    protected function applyFilter(e:Event):void {\n    shader = new Shader(e.target.data);\n    shaderFilter = new ShaderFilter(shader);\n    loader.filters = [shaderFilter];\n    }\n\n    ```", "```kt\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.NetStatusEvent;\n    import flash.media.Video;\n    import flash.net.NetConnection;\n    import flash.net.NetStream;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n\n    ```", "```kt\n    private const videoPath:String = \"assets/test.m4v\";\n    private var video:Video;\n    private var streamClient:Object;\n    private var connection:NetConnection;\n    private var stream:NetStream;\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 24;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0xCCCCCC;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function setupVideoConnection():void {\n    streamClient = new Object();\n    streamClient.onTextData = onTextData;\n    streamClient.onMetaData = onMetaData;\n    streamClient.onCuePoint = onCuePoint;\n    video = new Video();\n    video.smoothing = true;\n    addChild(video);\n    connection = new NetConnection();\n    connection.client = streamClient;\n    connection.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);\n    connection.connect(null);\n    }\n\n    ```", "```kt\n    protected function connectStream():void {\n    stream = new NetStream(connection);\n    stream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);\n    stream.client = streamClient;\n    video.attachNetStream(stream);\n    stream.play(videoPath);\n    }\n\n    ```", "```kt\n    protected function onNetStatus(e:NetStatusEvent):void {\n    traceField.appendText(e.info.code + \"\\n\");\n    switch (e.info.code) {\n    case \"NetConnection.Connect.Success\":\n    connectStream();\n    break;\n    case \"NetStream.Buffer.Full\":\n    video.width = stage.stageWidth;\n    video.scaleY = video.scaleX;\n    traceField.y = video.height;\n    break;\n    }\n    }\n\n    ```", "```kt\n    public function onTextData(info:Object):void {\n    traceField.appendText(\"Text!\\n\");\n    }\n\n    ```", "```kt\n    public function onMetaData(info:Object):void {\n    traceField.appendText(\"Duration: \" + info.duration + \"\\n\");\n    traceField.appendText(\"Width: \" + info.width + \"\\n\");\n    traceField.appendText(\"Height: \" + info.height + \"\\n\");\n    traceField.appendText(\"Codec: \" + info.videocodecid + \"\\n\");\n    traceField.appendText(\"FPS: \" + info.videoframerate + \"\\n\");\n    }\n\n    ```", "```kt\n    public function onCuePoint(info:Object):void {\n    traceField.appendText(\"Cuepoint!\\n\");\n    }\n\n    ```", "```kt\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.NetStatusEvent;\n    import flash.media.Video;\n    import flash.net.NetConnection;\n    import flash.net.NetStream;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n\n    ```", "```kt\n    private const fmsPath:String = \"rtmp://fms/vod\";\n    private var video:Video;\n    private var streamClient:Object;\n    private var connection:NetConnection;\n    private var stream:NetStream;\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 24;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0xCCCCCC;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function setupVideoConnection():void {\n    streamClient = new Object();\n    streamClient.onBWDone = onTextData;\n    streamClient.onTextData = onTextData;\n    streamClient.onMetaData = onMetaData;\n    streamClient.onCuePoint = onCuePoint;\n    video = new Video();\n    video.smoothing = true;\n    addChild(video);\n    connection = new NetConnection();\n    connection.client = streamClient;\n    connection.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);\n    connection.connect(fmsPath);\n    }\n\n    ```", "```kt\n    protected function connectStream():void {\n    stream = new NetStream(connection);\n    stream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);\n    stream.client = streamClient;\n    video.attachNetStream(stream);\n    stream.play(\"mp4:test.m4v\");\n    }\n\n    ```", "```kt\n    protected function onNetStatus(e:NetStatusEvent):void {\n    traceField.appendText(e.info.code + \"\\n\");\n    switch (e.info.code) {\n    case \"NetConnection.Connect.Success\":\n    connectStream();\n    break;\n    case \"NetStream.Buffer.Full\":\n    video.width = stage.stageWidth;\n    video.scaleY = video.scaleX;\n    traceField.y = video.height;\n    break;\n    }\n    }\n\n    ```", "```kt\n    public function onBWDone():void {\n    traceField.appendText(\"BW Done!\\n\");\n    }\n\n    ```", "```kt\n    public function onTextData(info:Object):void {\n    traceField.appendText(\"Text!\\n\");\n    }\n\n    ```", "```kt\n    public function onMetaData(info:Object):void {\n    traceField.appendText(\"Duration: \" + info.duration + \"\\n\");\n    traceField.appendText(\"Width: \" + info.width + \"\\n\");\n    traceField.appendText(\"Height: \" + info.height + \"\\n\");\n    traceField.appendText(\"Codec: \" + info.videocodecid + \"\\n\");\n    traceField.appendText(\"FPS: \" + info.videoframerate + \"\\n\");\n    }\n\n    ```", "```kt\n    public function onCuePoint(info:Object):void {\n    traceField.appendText(\"Cuepoint!\\n\");\n    }\n\n    ```", "```kt\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.TransformGestureEvent;\n    import flash.media.Sound;\n    import flash.media.SoundChannel;\n    import flash.media.SoundTransform;\n    import flash.net.URLRequest;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var sound:Sound;\n    private var channel:SoundChannel;\n    private var sTransform:SoundTransform;\n    private var dial:Sprite;\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 24;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0xCCCCCC;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function setupDial():void {\n    dial = new Sprite();\n    dial.graphics.beginFill(0xFFFFFF, 1);\n    dial.x = stage.stageWidth/2;\n    dial.y = stage.stageHeight/2;\n    dial.graphics.drawCircle(0,0,150);\n    dial.graphics.endFill();\n    dial.graphics.lineStyle(5,0x440000);\n    dial.graphics.moveTo(0, -150);\n    dial.graphics.lineTo(0, 0);\n    addChild(dial);\n    }\n\n    ```", "```kt\n    protected function setupSound():void {\n    sound = new Sound();\n    sound.load(new URLRequest(\"assets/test.mp3\"));\n    sTransform = new SoundTransform(0.5, 0);\n    channel = new SoundChannel();\n    channel.soundTransform = sTransform;\n    channel = sound.play();\n    traceField.text = \"Volume: \" + sTransform.volume;\n    }\n\n    ```", "```kt\n    protected function registerListeners():void {\n    Multitouch.inputMode = MultitouchInputMode.GESTURE; dial.addEventListener(TransformGestureEvent. GESTURE_ROTATE, onRotate);\n    }\n\n    ```", "```kt\n    protected function onRotate(e:TransformGestureEvent):void {\n    dial.rotation += e.rotation;\n    sTransform.volume = (dial.rotation+180)/360;\n    channel.soundTransform = sTransform;\n    traceField.text = \"Volume: \" + sTransform.volume;\n    }\n\n    ```", "```kt\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.TimerEvent;\n    import flash.media.Sound;\n    import flash.media.SoundChannel;\n    import flash.media.SoundMixer;\n    import flash.net.URLRequest;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n    import flash.utils.ByteArray;\n    import flash.utils.Timer;\n\n    ```", "```kt\n    private var sound:Sound;\n    private var channel:SoundChannel;\n    private var spectrum:Sprite;\n    private var timer:Timer;\n\n    ```", "```kt\n    protected function setupSpectrum():void {\n    spectrum = new Sprite();\n    addChild(spectrum);\n    }\n\n    ```", "```kt\n    protected function registerTimer():void {\n    timer = new Timer(100);\n    timer.addEventListener(TimerEvent.TIMER, onTimer);\n    }\n\n    ```", "```kt\n    protected function setupSound():void {\n    sound = new Sound();\n    sound.load(new URLRequest(\"assets/test.mp3\"));\n    channel = new SoundChannel();\n    channel = sound.play();\n    timer.start();\n    }\n\n    ```", "```kt\n    protected function onTimer(e:TimerEvent):void {\n    var a:Number = 0;\n    var n:Number = 0;\n    var i:int = 0;\n    var ba:ByteArray = new ByteArray();\n    SoundMixer.computeSpectrum(ba);\n    spectrum.graphics.clear();\n    spectrum.graphics.lineStyle(4, 0xFFFFFF, 0.8, false);\n    spectrum.graphics.moveTo(0, (n/2)+150);\n    for(i=0; i<=256; i++) {\n    a = ba.readFloat();\n    n = a*300;\n    spectrum.graphics.lineTo(i*(stage.stageWidth/256), (n/2)+150);\n    }\n    spectrum.graphics.endFill();\n    }\n\n    ```", "```kt\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.SampleDataEvent;\n    import flash.events.TouchEvent;\n    import flash.media.Sound;\n    import flash.media.SoundChannel;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n    import flash.utils.ByteArray;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n\n    ```", "```kt\n    private var sound:Sound;\n    private var channel:SoundChannel;\n    private var touchPressure:Number;\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 24;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0xCCCCCC;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function setupSound():void {\n    sound = new Sound();\n    channel = new SoundChannel();\n    }\n\n    ```", "```kt\n    protected function registerListeners():void {\n    Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\n    stage.addEventListener(TouchEvent.TOUCH_BEGIN, onTouch);\n    sound.addEventListener(SampleDataEvent.SAMPLE_DATA, onSampleDataRequest);\n    channel = sound.play();\n    }\n\n    ```", "```kt\n    protected function onTouch(e:TouchEvent):void {\n    touchPressure = e.pressure;\n    traceField.text = \"Pressure: \" + touchPressure;\n    }\n\n    ```", "```kt\n    protected function onSampleDataRequest(e:SampleDataEvent):void {\n    var out:ByteArray = new ByteArray();\n    for( var i:int = 0 ; i < 8192; i++ ) { out.writeFloat(Math.sin((Number(i+e.position)/ Math.PI/2))*touchPressure);\n    out.writeFloat(Math.sin((Number(i+e.position)/ Math.PI/2))*touchPressure);\n    }\n    e.data.writeBytes(out);\n    }\n\n    ```"]