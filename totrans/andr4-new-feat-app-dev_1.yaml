- en: Chapter 1. Action Bar for All
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Action bar** API was firstly introduced with Android 3.0\. With Android Ice
    Cream Sandwich, action bar supports small screen sizes. This chapter shows how
    to use and configure the action bar.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Action bar types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an action bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an ActionProvider and ShareActionProvider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an action view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using action bar for navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Action bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Action bar is a user interface element located on top of the user''s device
    screen. It provides actions and navigation capabilities to the user. Action bar
    has been available since API Level 11 (Android 3.0 Honeycomb) and after Ice Cream
    Sandwich was released, it supports small screen devices too. A sample Action Bar
    with tabs is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Action bar](img/9526_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As it can be seen in the preceding screenshot, on the left of the bar there
    is an application logo and title, and then come the tabs for navigation. Lastly,
    the action buttons are placed after the tabs. The action buttons that do not fit
    to screen are displayed as an overflow menu with three dots on the right of the
    bar. In the previous screenshot, the action bar is displayed on a large screen
    device. However, in small screen devices, the Action Bar is displayed as a stack
    of bars as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Action bar](img/9526_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As it can be seen in the preceding screenshot, there is not enough space to
    display all action bar items and the action bar is displayed with two bars on
    top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another type of action bar is the **split** action bar. In this type of action
    bar, action buttons are displayed in a bar at the bottom of the screen in narrow
    screens as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Action bar](img/9526_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding an action bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After Ice Cream Sandwich, Android doesn't require the menu button to reach the
    options menu. The best practice is to use action bar instead of the menu button.
    It is very easy to migrate from the options menu to the action bar. Now we are
    going to create a menu and then migrate that menu to the action bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, create an Android project and then add a menu that contains `Settings`
    and `About` as menu items. The resulting menu XML file should look like the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The layout XML for this sample is a `LinearLayout` layout with a `TextView`
    component in it as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `onCreateOptionsMenu` and `onOptionsItemSelected` methods as
    shown in the following code block, in order to show the menu items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to display the action bar, the Android applications should target
    a minimum of API Level 11 in the `AndroidManifest.xml` file as shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration, when the application runs on devices that have Android
    3.0 or greater, the action bar will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run this application on an emulator with API Level 15, we will see
    the overflow menu on the right of the action bar and the options menu buttons
    will be displayed when the overflow menu is pressed. In order to show the options
    menu buttons on the action bar (not as an overflow menu), just add `android:showAsAction="ifRoom|withText"`
    in the `item` tags of the menu XML file. The resulting menu XML file should look
    like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is not enough space (`ifRoom`) to display the options menu buttons,
    the buttons will be displayed as an overflow menu. In order to show the options
    menu buttons with icon only (if an icon is provided), `withText` should be removed.
    When you run the application it will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an action bar](img/9526_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In some cases, you may not want to display the action bar. In order to remove
    the action bar, add `android:theme="@android:style/Theme.Holo.NoActionBar"` to
    the `activity` tag in the `AndroidManifest.xml` file. The resulting `AndroidManifest.xml`
    should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to show the action bar as a *split* action bar, add the `android:uiOptions="splitActionBarWhenNarrow"`
    application in the `activity` tag in `AndroidManifest.xml`. The resulting `AndroidManifest.xml`
    should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this application on an emulator, the screen will look like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an action bar](img/9526_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding an ActionProvider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use a custom view instead of a simple button in action bar, the
    `ActionProvider` class could be the solution. **ActionProvider** has been available
    since API Level 14\. ActionProvider can generate a custom view in the action bar,
    can generate submenus, and can handle events of the views that it generates. In
    order to create an ActionProvider, we should extend the `ActionProvider` class.
    The following code shows a sample class that extends the `ActionProvider` class
    and displays a custom layout instead of a simple button in action bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to add a constructor and override the `onCreateActionView()` method.
    In the constructor, we assign `Context` to a variable because we are going to
    need it in further implementations. The `onCreateActionView()` method is the place
    where we generate a custom layout for the action bar menu item. `onPerformDefaultAction()`
    is the method which is called when the action bar menu item is in the overflow
    menu and is clicked from there. If the ActionProvider provides submenus, this
    method is never called. The layout XML for the custom layout used in the `onCreateActionView()`
    method is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the XML file, we added an `ImageButton` component and a `TextView`
    component to a `LinearLayout` layout. The `onClickListener()` event of `ImageButton`
    is implemented in the `onCreateActionView()` method of the `Chapter1ActionProvider`
    class. In this event, a `Toast` message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Activity` class that displays the action bar is shown the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to display a custom layout for an action bar menu item, we have to
    assign an `ActionProvider` class in the `menu` XML file. We assign `Chapter1ActionProvider`
    which was implemented as in the earlier code as `ActionProvider`. The menu XML
    file in our example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see in the `menu` XML file, we provided an `ActionProvider` class to
    the `settings` menu item. The last important thing is setting the minimum SDK
    version to API Level 14 in the `AndroidManifest.xml` file, because `ActionProvider`
    is a new feature released in API Level 14\. The `AndroidManifest.xml` file should
    look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this application in an emulator, a user interface component with
    an image button and a text view will be displayed in the action bar. A toast message
    will be displayed if you press the image button. The screen will look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an ActionProvider](img/9526_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding submenus to the ActionProvider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to show submenus with ActionProvider. In order to add submenus,
    we should override the `onPrepareSubMenu(SubMenu subMenu)` and `hasSubMenu()`
    methods in the `Chapter1ActionProvider` class. The resulting code of the `Chapter1ActionProvider`
    class should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the `onPrepareSubMenu(SubMenu subMenu)` method, we dynamically created submenus
    and set their `onMenuItemClickListener` events. The `onPrepareSubMenu(SubMenu
    subMenu)` method is called if the `hasSubMenu()` method returns true, so we implemented
    it as returning true.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to create submenus from a `menu` XML file. If you want
    to create submenus from a `menu` XML file, `onPrepareSubMenu(SubMenu subMenu)`
    should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This code shows how we could inflate an XML file to create the submenus using
    the `menu` XML file `menu2`.
  prefs: []
  type: TYPE_NORMAL
- en: ShareActionProvider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ShareActionProvider** provides a consistent way of sharing. It puts an action
    button on the action bar with a share icon. When you click that button, it lists
    the available applications for sharing. All you need is to declare `ShareActionProvider`
    in the `menu` item as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Activity` class that uses `ShareActionProvider` should look like the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the code, we get the `ShareActionProvider` attribute of the
    `menu` item in the `onCreateOptionsMenu(Menu menu)` method. Then we define the
    intent for sharing with the `setShareIntent` method of `ShareActionProvider`.
    `getShareIntent()` method creates an **intent** for sharing text. We use this
    method to define intent for the `ShareActionProvider` instance.
  prefs: []
  type: TYPE_NORMAL
- en: ShareActionProvider keeps the history of applications used for sharing in a
    file. The default file that ShareActionProvider uses is `ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME`.
    It is possible to change this file with the `setShareHistoryFileName` method.
    All you need is to pass an XML file name with the .xml extension to this method.
    ShareActionProvider uses this file to find the most frequently used application
    for sharing. Then it displays the most frequently used application near the share
    action button as a default sharing target.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen of the application with ShareActionProvider looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ShareActionProvider](img/9526_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the ShareActionProvider was introduced in API Level 14, we have to set
    the minimum SDK to 14 in the `AndroidManifest.xml` file as shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding an action view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **action view** is a user interface component that appears in the action
    bar instead of an action button. This view is collapsible, that is if it is configured
    as collapsible, meaning it expands when the action button is pressed. If it is
    not configured as collapsible, it is viewed expanded by default. In the following
    example, we added an action view and showed its events and how to handle these
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, add a layout for the action view that has three buttons with the text
    `Large`, `Medium`, and `Small` as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to bind this action view to an action bar `menu` item. The XML
    code of `menu` is shown in the following code bock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the `menu` XML code, we bind the action view to the `size`
    menu item by setting the `actionLayout` property. We also set the `showAsAction`
    property to `collapseActionView`. This way the action view is collapsible and
    it expands when the action button item is pressed. This option helps us to save
    space in the action bar. If this property is not set as `collapseActionView`,
    the action view is displayed as expanded by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Activity` class that handles action view events is shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you see in the `Chapter1ActionViewActivity`, you can set event listeners
    of the items in action view in the `onCreateOptionsMenu(Menu menu)` method. We
    set the `onClickListener` event of the buttons in the action view in the `onCreateOptionsMenu(Menu
    menu)` method.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to expand and collapse the action view programmatically with
    the `expandActionView()` and `col` `lapseActionView()` methods. As you can see
    in the `onClick(View v)` method of the `Chapter1ActionViewActivity` method, we
    manually collapsed the action view with the `collapseActionView()` method.
  prefs: []
  type: TYPE_NORMAL
- en: You can do an action when the action view is expanded or collapsed with the
    `OnActionExpandListener` class. As you can see in the code, we defined the `Chapter1ActionListener`
    class that implements `OnActionExpandListener`. We override the `onMenuItemActionCollapse(MenuItem
    item)` and `onMenuItemActionExpand(MenuItem item)` methods of this class in order
    to show a `Toast` message. We passed `Activity` as a parameter to the constructor
    of `Chapter1ActionListener` because we need the `Activity` when showing the `Toast`
    message. We have to register the `setOnActionExpandListener()` method with the
    `OnActionExpandListener` class, in order to handle expand and collapse events.
    As you can see in the code, we registered this event in the `onCreateOptionsMenu(Menu
    menu)` method. We show a `Toast` message when the action view is collapsed and
    expanded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the action view is introduced in API Level 14, we have to set the minimum
    SDK property to 14 or greater in the `AndroidManifest.xml` file as shown in the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this application on an emulator it will look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an action view](img/9526_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the action bar for navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tabbed navigation could also be implemented with the `TabWidget` class. However,
    the action bar has some advantages. The action bar automatically adjusts itself
    according to the device screen size. For instance, if there is not enough space
    for tabs, it will display tabs in a stacked bar manner. Thus, it's better to use
    the action bar for tabbed navigation implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see how to use the action bar for tabbed navigation. Firstly,
    create an Android project and add two fragments: one that displays `Fragment A`
    and an other that displays `Fragment B`. The layout XML for fragments should look
    like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The classes that extend the `Fragment` class for the two fragments should look
    like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to use action bar for tabbed navigation, we should firstly implement
    the `ActionBar.TabListener` class. The class that implements `TabListener` is
    going to be used in the `Activity` class in adding tabs. The `Activity` class
    with the `TabListener` implementation should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Chapter1TabListener` class there are three methods that need to be
    overridden: `onTabReselected(Tab tab, FragmentTransaction ft)`, `onTabUnselected(Tab
    tab, FragmentTransaction ft)`, and `onTabSelected(Tab tab, FragmentTransaction
    ft)`. In the `onTabSelected(Tab tab, FragmentTransaction ft)` method, we initialize
    and add the fragment to our activity if it doesn''t exist. If it exists, we simply
    attach to it. When the tab is unselected, the `onTabUnselected(Tab tab, FragmentTransaction
    ft)` method is called. In this method, we detach the fragment because it shouldn''t
    be displayed. When the tab is reselected, the `onTabReselected(Tab tab, FragmentTransaction
    ft)` method is called. We do nothing in this method. In the `Chapter1ActionBarTabActivity`
    class, we create and set up the action bar. Layout for our activity has nothing
    but a `LinearLayout` layout and we use fragments for the user interface. Firstly,
    we set the navigation mode of action bar to `ActionBar.NAVIGATION_MODE_TABS` because
    we want tabbed navigation. Then we create two tabs, set their `TabListener` events,
    and add them to the `action bar` instance. When you run the application, you will
    see two tabs named **FIRST TAB** and **SECOND TAB**. The first tab will display
    **Fragment A** and the second tab will display **Fragment B**. The screen will
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the action bar for navigation](img/9526_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is important not to forget to set the minimum SDK level to API Level 11 or
    higher, because the action bar was introduced in API Level 11.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the action bar as this approach is more
    consistent than using the options menu. You also saw how to create custom layouts
    in the action bar using the ActionProvider. You learned how to use ShareActionProvider
    and how it is an effective way of implementing sharing in your app. You learned
    how to use the action view and how to make it collapsible. Finally, you learned
    how to use a the ction bar for tabbed navigation. It has the advantages of adapting
    itself to device screen size, so it is better to use the action bar than using
    older APIs. In the next chapter, we are going to learn about an Android layout
    called GridLayout and we will see how to add and configure it.
  prefs: []
  type: TYPE_NORMAL
