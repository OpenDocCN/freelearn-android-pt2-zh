- en: Chapter 2. Mandatory Access Controls and SELinux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 1](ch01.html "Chapter 1. Linux Access Controls"), *Linux Access
    Controls*, we introduced some of the shortcomings of a discretionary access control
    system. In these systems, the owner of an object has full control over its permissions
    flags and can demonstrate greater capabilities (for example, the ability to `chown`)
    when executing as `root` or with certain capabilities. In this chapter, we will:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Examine the fundamentals of MAC
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce some industry drivers for SELinux
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss labels, users, roles, and types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the implementation of tangible policy to allow and constrain object
    interaction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ideal MAC systems maintain the property of providing definitive access controls
    on kernel resources, such as files, irrespective of an object's owner. For instance,
    with a MAC system, the owner of an object might not have full control of its permissions.
    In Linux, the MAC framework works orthogonally to the current DAC controls. This
    means that the MAC controls do not interfere with the DAC controls. In other words,
    to avoid potential conflicts between the MAC and DAC systems, the kernel validates
    access using the DAC permissions before checking the MAC permissions. If the DAC
    permissions result in a permissions violation, then the MAC permissions are never
    checked. The kernel will validate access against the MAC permissions provider
    only when the DAC permissions pass. Failure at either level will result in a return
    of `EACCESS`. If the DAC and the MAC permissions pass, then the kernel resource
    (for example, a file descriptor) is sent back to user space.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, a framework called the **Linux Security Module** (**LSM**) framework
    was merged during the Linux 2.6.x series of kernels. This framework allows you
    to enable the mandatory access control systems in a build time selection by tethering
    the LSM hooks to the security provider. **Security Enhanced Linux** (**SELinux**)
    is the first consumer of this MAC security framework within the kernel and is
    an implementation of a mandatory access control system. SELinux ships in a wide
    variety of Linux systems, such as **Red Hat Enterprise Linux** (**RHEL**) and
    consequently Fedora. Recently, it has begun shipping with Android. The source
    code for SELinux can be found in the Linux source code tree under `kernel/security/selinux`
    for those wishing to review it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Getting back to the basics
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SELinux is a reimplementation of a design engineered by the U.S. government
    and The University of Utah known as the **FLUX Advanced Security Kernel** (**FLASK**).
    The SELinux and FLASK architecture provide a central policy file utilized while
    determining the results of access control decisions. This central policy is in
    a whitelist form. This means that all access control rules must be defined explicitly
    by the policy file. This policy file is abstracted and served by a software component
    called a security server. When the Linux kernel needs to make an access control
    decision and SELinux is enabled, the kernel interacts with the security server
    by means of the LSM hooks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 是由美国政府与犹他大学共同设计的一种名为 **FLUX Advanced Security Kernel** (**FLASK**) 的重新实现。SELinux
    和 FLASK 架构提供了一个中央策略文件，在确定访问控制决策结果时使用。这个中央策略以白名单形式存在。这意味着所有访问控制规则必须由策略文件明确定义。这个策略文件被抽象化，并由一个名为安全服务器的软件组件提供服务。当
    Linux 内核需要做出访问控制决策并且启用了 SELinux 时，内核通过 LSM 钩子与安全服务器进行交互。
- en: In a running system, a process is the active entity that gets time on the CPU
    to perform tasks. The user merely invokes these processes to do the work on their
    behalf. This is an important concept. As we type this book, we trust that the
    word processors running on our machines with our credentials aren't opening our
    SSH keys and embedding them in the document metadata. Right now, the process is
    in control of the computing resources, not the user. The process is the running
    entity, it is the process that makes system calls to the kernel for resources,
    not the physical human being. With this in mind, the very first actor in this
    SELinux system is the process, typically referred to as the **subject**. It is
    the subject that accesses files. It is the subject that the security server will
    use to make access decisions on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行中的系统中，进程是获得 CPU 时间来执行任务的活动实体。用户只是调用这些进程来代表他们执行工作。这是一个重要的概念。在我们编写这本书时，我们相信运行在我们机器上的具有我们凭据的字处理器没有打开我们的
    SSH 密钥并将它们嵌入到文档元数据中。现在，是进程控制着计算资源，而不是用户。进程是运行实体，是进程向内核请求资源的系统调用，而不是物理人类。考虑到这一点，SELinux
    系统中的第一个参与者通常是进程，通常被称为 **主体**。是主体访问文件。是安全服务器用来做出访问决策的主体。
- en: Consequently, the subject utilizes kernel resources. This kind of kernel resource
    is an example of a **target**. The subject performs actions on the target. Naturally,
    one should ask, "What actions does a subject perform?" These are known as access
    vectors and typically correlate to the name of the syscall performed. For example,
    the subject could perform an `open` on the target. It is important to note that
    targets could be processes as well. For instance, if the system call is `ptrace`,
    the subject could be something along the lines of a debugger, and the target would
    be the process you wish to debug. A subject is frequently a process, but a target
    could be a process, socket, file, or something else.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，主体使用内核资源。这种内核资源是 **目标** 的一个例子。主体在目标上执行操作。自然地，人们应该问：“主体执行哪些操作？”这些被称为访问向量，通常与执行的
    syscall 名称相关联。例如，主体可以在目标上执行 `open`。需要注意的是，目标也可以是进程。例如，如果系统调用是 `ptrace`，主体可能是类似于调试器的东西，而目标则是你希望调试的进程。主体通常是进程，但目标可能是进程、套接字、文件或其他东西。
- en: Labels
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签
- en: SELinux provides semantics for describing policies related to the targets and
    subjects using labels. Labels are the metadata associated with an object that
    maintains the subject's and target's access information. The data associated with
    this object is a string. Returning to the debugger example, the `gdb` process
    might have a subject label string of `debugger`, and the target might have a label
    of `debugee`. Then in the security policy, some semantic could be used to express
    that processes with the subject label `debugger` are allowed to debug applications
    with target label `debugee`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 使用标签来描述与目标和主体相关的策略语义。标签是与对象关联的元数据，维护主体和目标的访问信息。与该对象关联的数据是一个字符串。回到调试器示例，`gdb`
    进程可能有一个主体标签字符串为 `debugger`，而目标可能有一个标签为 `debugee`。然后在安全策略中，可以使用一些语义来表达具有主体标签 `debugger`
    的进程被允许调试具有目标标签 `debugee` 的应用程序。
- en: 'Fortunately, and perhaps unfortunately, SELinux does not use such simple labels.
    In fact, the labels are made up of four colon-delimited fields: user, role, type,
    and level. This additional complexity affords very flexible control options.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，或许也是不幸的是，SELinux并没有使用如此简单的标签。实际上，标签由四个冒号分隔的字段组成：用户、角色、类型和级别。这种额外的复杂性为非常灵活的控制选项提供了可能。
- en: Users
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: The very first field in a label identifies the user. The user field is used
    as part of the design for **user-based access controls** (**UBAC**). However,
    this is not typically associated with human users as it is with the concept of
    users in DAC. SELinux users typically define a group of traditional users. A common
    example is to identify all normal users as the SELinux user, `user_u`. Perhaps
    a separate user for system processes, such as `system_u`. By convention in the
    desktop SELinux community, user portions of the string are suffixed with a `_u`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 标签中的第一个字段用于标识用户。用户字段作为**基于用户的访问控制**（**UBAC**）设计的一部分。然而，这通常并不与人机用户相关联，而是与DAC中的用户概念相关。SELinux用户通常会定义一组传统用户。一个常见的例子是将所有正常用户标识为SELinux用户，如`user_u`。也许还会为系统进程设置一个单独的用户，比如`system_u`。在桌面SELinux社区的传统中，用户部分的字符串通常会以`_u`结尾。
- en: Roles
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角色
- en: The second field in a label is role. The role is used as part of the design
    for **role-based access controls** (**RBAC**). Roles are used to provide additional
    granularity to the user. For instance, suppose we have the user field, `sysadm_u`,
    reserved for administrators. The administrator might be in separate tasks, and
    depending on the tasks, the role (and therefore, privileges) of users in `sysadm_u`
    may change. For example, when an administrator needs to mount and unmount file
    systems, the role field might change to `mount_admin_r`. When an administrator
    is setting the `iptables` rules, the role might change to `net_admin_r`. Roles
    allow the isolation of privileges within the scope of the tasks being performed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 标签中的第二个字段是角色。角色作为**基于角色的访问控制**（**RBAC**）设计的一部分。角色用于向用户提供更细致的权限。例如，假设我们保留了用户字段`sysadm_u`给管理员。管理员可能会执行不同的任务，根据任务的不同，`sysadm_u`中的角色（以及相应的权限）可能会改变。例如，当管理员需要挂载和卸载文件系统时，角色字段可能会变为`mount_admin_r`。当管理员设置`iptables`规则时，角色可能会变为`net_admin_r`。角色允许在执行任务的范围内隔离权限。
- en: Types
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: Type is the third field of the colon-delimited label. The type field is evaluated
    during the **type enforcement** (**TE**) portion of SELinux's access control model.
    TE is the major component that drives SELinux's security capabilities, and it
    is at this point where the policy starts to take effect.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 类型是冒号分隔标签的第三个字段。类型字段在SELinux的**类型强制**（**TE**）部分进行评估。TE是推动SELinux安全能力的主要组成部分，正是在这一环节政策开始生效。
- en: SELinux is based on a whitelist system where everything is denied by default
    and requires explicit approval from the policy for an interaction to occur. This
    approval is initially determined from the policy via an allow rule that references
    both the subject's and target's type. SELinux types can also be assigned attributes.
    Attributes allow you to give numerous types a common set of rules. Attributes
    can help minimize the amount of types, and can be used in fashion similar to that
    of an inheritance model.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux基于一个白名单系统，默认情况下拒绝一切，并需要从策略中获得明确的允许，以便进行交互。这种允许最初是通过引用主体和目标类型的允许规则从策略中确定的。SELinux类型还可以分配属性。属性可以帮助您为多种类型提供一组通用规则。属性可以像继承模型那样使用。
- en: Access vectors
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问向量
- en: Data is accessed by processes via system calls and possible user defined access
    methods. The user defined access methods are usually controlled via a userspace
    object manager. These access paths, also known as vectors, make up a set of actions
    that can be applied to the object. For instance, if a process opens a file, writes
    some data into the file, and then reads it back, the access vectors exercised
    would be `open`, `read`, and `write`. If a process debugs another process, the
    access vector would be `ptrace`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是通过系统调用和可能的用户定义访问方法由进程访问的。用户定义的访问方法通常由用户空间对象管理器控制。这些访问路径，也称为向量，构成了一组可以应用于对象的行为。例如，如果一个进程打开一个文件，写入一些数据然后再次读取，那么执行的访问向量将是`open`、`read`和`write`。如果一个进程调试另一个进程，那么访问向量将是`ptrace`。
- en: Multilevel security
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多级安全
- en: SELinux also supports a **multilevel security** (**MLS**) model, which pays
    homage to the **Bell-LaPadula** (**BLP**) model, but alternate models could be
    used. The BLP model was created to formalize the Department of Defense's security
    policies. For example, a person with a secret clearance should not be able to
    read top-secret material. However, let's suppose this person has a brilliant idea
    that ultimately needs to be protected at the top-secret level; that data could
    then be "up-classified" to top-secret. This is referred to as "no read up or write
    down".
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux还支持一个**多级安全**（**MLS**）模型，该模型向**Bell-LaPadula**（**BLP**）模型致敬，但也可以使用其他模型。BLP模型是为了正式化国防部的安全政策而创建的。例如，一个有秘密许可的人不应该能够阅读绝密材料。但是，假设这个人有一个绝妙的想法，最终需要以绝密级别保护；那么这些数据可以被"升级"为绝密。这被称为"不向上读或向下写"。
- en: The SELinux implementation of this field has subfields. The first field is sensitivity,
    and will always be present. In the context of the previous example, pertinent
    sensitivities include secret and top secret. The second subfield is category,
    and might not be present. These fields also make sense in the context of government
    classification. The data itself might be compartmentalized, so while the sensitivity
    is the same, such as top secret, the data should only be disseminated to people
    within the same compartment or category. Sensitivities are defined in a hierarchical
    fashion via the dominance keyword. In a typical policy, `s0` is the lowest sensitivity
    and `sN` where `n > 0` is the highest. Thus, `s1` has a greater sensitivity than
    `s0`. Categories are sets. The controls associated with the level, which is comprised
    of sensitivities and potentially categories, follow set theory concepts, such
    as dominance and equality. In MLS security, all interactions are allowed by default,
    unlike type enforcement. Both the sensitivity and the category can be ranged,
    and categories can be enumerated. Thus, a label might have some number of sensitivities
    and different number of categories.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux对此字段的实现包含子字段。第一个字段是敏感性，将始终存在。在之前例子的背景下，相关的敏感性包括秘密和绝密。第二个子字段是类别，可能不存在。这些字段在政府分类的背景下也是有意义的。数据本身可能是分隔的，所以尽管敏感性相同，比如都是绝密，但数据只应该分发给同一隔间或类别内的人。敏感性通过优势关键词以层次化的方式定义。在典型的策略中，`s0`是最低敏感性，而`n
    > 0`的`sN`是最高敏感性。因此，`s1`的敏感性高于`s0`。类别是集合。与级别相关的控制，包括敏感性和可能的类别，遵循集合论概念，如优势和相等。在MLS安全中，所有交互默认都是允许的，与类型强制不同。敏感性和类别都可以是范围的，类别可以列举。因此，一个标签可能有一些数量的敏感性和不同数量的类别。
- en: Putting it together
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将其组合起来
- en: SELinux labels are quite flexible and sometimes complex. It's often beneficial
    to start with a contrived example that focuses on type enforcement. Later, we
    can add additional fields later as the need for finer granularity becomes more
    apparent. Conveniently, you can project this model to scenarios in everyday life
    to provide some sense of tangibility to the material. Dan Walsh, a prominent SELinux
    figure, posted a blog post using pets as an analogy. Let's continue on with that
    premise, but we will make some modifications as we go and define our own examples.
    It's best to start with simple type enforcement as it is the easiest to understand.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux标签非常灵活，有时也相当复杂。通常，从关注类型强制的一个人为例子开始是有益的。随后，我们可以根据需要更细粒度的需求，添加其他字段。方便的是，你可以将这个模型投射到日常生活中的场景，为材料提供一定的实质性感觉。著名的SELinux人物Dan
    Walsh发表了一篇博客，使用宠物作为类比。让我们以此为基础，但在进行中我们会做一些修改，并定义自己的例子。最好从简单的类型强制开始，因为它最容易理解。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read Dan Walsh's original blog post introducing the pet analogy at [http://opensource.com/business/13/11/selinux-policy-guide](http://opensource.com/business/13/11/selinux-policy-guide).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读Dan Walsh的原始博客文章，了解宠物类比，文章地址是[http://opensource.com/business/13/11/selinux-policy-guide](http://opensource.com/business/13/11/selinux-policy-guide)。
- en: 'Suppose we own a cat and a dog. We don''t want the cat to eat dog food. We
    don''t want the dog to eat cat food. At this point, we have already identified
    two subjects, a cat and a dog, and two targets, cat food and dog food. We also
    have identified an access vector, eating. We can use allow rules to implement
    our policy. Possible rules could look like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一只猫和一只狗。我们不希望猫吃狗粮。我们不希望狗吃猫粮。在这一点上，我们已经识别出两个主体，一只猫和一只狗，以及两个目标，猫粮和狗粮。我们还识别出一个访问向量，即吃。我们可以使用允许规则来实现我们的策略。可能的规则可能如下所示：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's use this example to start and define a basic syntax for expressing the
    access controls we would like to enforce. The first token is `allow`, stating
    we wish to allow an interaction between a subject and a target. The dog is assigned
    the type, `dog`, and the cat, `cat`. The cat food is assigned the type `cat_chow`,
    and the dog food, `dog_chow`. The access vector in this case is `eat`. With this
    basic syntax, which is also valid SELinux syntax, we restrict the animals to the
    food they should eat. Notice the `:food` annotation after the type. This is the
    class field of the target object. For instance, there might also be `dog_chow`
    `treat` and `cat_chow` classes that could indicate our desire to allow access
    to treats in a fashion that is potentially different from the way we allow access
    to foods that are not treats.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用这个例子来开始定义我们希望实施的表达访问控制的基本语法。第一个标记是 `allow`，表明我们希望允许主体和目标之间的交互。狗被分配类型 `dog`，猫为
    `cat`。猫粮被分配类型 `cat_chow`，狗粮为 `dog_chow`。在这种情况下，访问向量是 `eat`。使用这种基本语法（也是有效的 SELinux
    语法），我们限制动物只能吃它们应该吃的食物。注意类型后的 `:food` 注解。这是目标对象的类字段。例如，还可能有 `dog_chow` `treat`
    和 `cat_chow` 类，这可能表明我们希望以可能与允许访问非零食食物不同的方式允许访问零食。
- en: 'Let''s say we get two more dogs, and our scenario has three dogs. The dogs
    are of different sizes: small, medium, and large. We want to make sure none of
    these new dogs eat others'' food. We could do something like create a new type
    for each of the dogs and prevent dogs from eating the food of other dogs. It would
    look something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们又得到两只狗，我们的场景有三只狗。这些狗的大小不同：小的、中等的和大的。我们希望确保这些新狗不要吃其他狗的食物。我们可以为每只狗创建一个新类型，并阻止狗吃其他狗的食物。它可能看起来像这样：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This would work; however, the total number of types would be difficult to manage,
    and that would continue to grow if we allow the large dog to eat the smaller breeds''
    food. What we could do is use MLS support to assign a sensitivity to each target
    or dog food bowl. Let''s assume the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将起作用；然而，类型的总数将难以管理，如果我们允许大狗吃小品种的食物，那么类型将继续增长。我们可以做的是使用 MLS 支持，为每个目标或狗食碗分配一个敏感度。假设以下情况：
- en: The cat's food bowl has sensitivity, `tiny`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 猫的食物碗具有敏感度，`tiny`
- en: The small dog's food bowl has sensitivity, `small`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小狗的食物碗具有敏感度，`small`
- en: The medium-sized dog's food bowl has sensitivity, `medium`
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中型狗的食物碗具有敏感度，`medium`
- en: The large dog's food bowl has sensitivity, `large`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大狗的食物碗具有敏感度，`large`
- en: 'We also need to make sure that the subjects are labeled with the proper sensitivity
    as well:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保对这些主题进行适当的敏感度标注：
- en: The cat should have sensitivity, `tiny`
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 猫应有敏感度，`tiny`
- en: The small dog should have sensitivity, `small`
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小狗应有敏感度，`small`
- en: The medium-sized dog should have sensitivity, `medium`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中型狗应有敏感度，`medium`
- en: The large dog should have sensitivity, `large`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大狗应有敏感度，`large`
- en: 'At this point, we need to introduce additional syntax to allow the interactions,
    since by default, MLS allows everything and TE denies everything. We''ll use `mlsconstrain`,
    to restrict interactions within the system. The rule could look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要引入额外的语法以允许交互，因为默认情况下，MLS 允许一切而 TE 拒绝一切。我们将使用 `mlsconstrain` 来限制系统内的交互。规则可能如下所示：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This constraint only allows subjects to eat food with the same sensitivity level.
    SELinux defines the keywords `l1` and `l2`. The `l1` keyword is the level of the
    target and `l2` is the level of the source. Because the rules are part of a whitelist,
    this also prevents subjects from eating food that does not have the equivalent
    sensitivity level.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个约束只允许主体吃具有相同敏感度级别的食物。SELinux 定义了关键字 `l1` 和 `l2`。`l1` 关键字是目标的级别，`l2` 是源的级别。因为规则是白名单的一部分，这也防止主体吃不具有等效敏感度级别的食物。
- en: 'Now, let''s say we get yet another large dog. Now we have two large breed dogs.
    However, they have different diets and need to access different foods. We could
    add a new type or modify an existing type, but this would have the same limitations
    that led us to use sensitivities to prevent access. We could add another sensitivity,
    but it might get confusing that there are `large1` and `large2` sensitivities.
    At this point, categories would allow us to get a bit more granular in our controls.
    Suppose we add a category denoting the breed. Our MLS portion of our label would
    look something like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们又有了一条大型犬。现在我们有了两条大型品种的狗。然而，它们有不同的饮食，需要接触不同的食物。我们可以添加一个新的类型或修改现有的类型，但这将具有导致我们使用敏感性防止访问的相同限制。我们可以添加另一个敏感性，但可能会有点混淆，因为有`large1`和`large2`敏感性。在这一点上，类别将允许我们在控制上更加细化。假设我们添加了一个表示品种的类别。我们标签的MLS部分将看起来像这样：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These could be used to prevent the black lab from eating the golden retriever's
    food. Now suppose you're surprised with another dog, a Saint Bernard. Let's say
    this new Bernard can eat any large dog's food, but the other large dogs can't
    eat his food. We could label the food bowls and the dogs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则可以用来防止黑拉布拉多犬吃金毛犬的食物。现在假设你又惊喜地得到了另一条狗，一条圣伯纳犬。假设这条新的伯纳犬可以吃任何大型犬的食物，但其他大型犬不能吃它的食物。我们可以给食物碗和狗贴上标签。
- en: '| Dog Breed | Subject label | Target label |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 狗品种 | 主体标签 | 目标标签 |'
- en: '| --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Golden Retriever | `Dog:large:golden_retriver` | `dog_chow:large:golden_retriver`
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 金毛犬 | `Dog:large:golden_retriver` | `dog_chow:large:golden_retriver` |'
- en: '| Black Lab | `Dog:large:black_lab` | `dog_chow:large:black_lab` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 黑拉布拉多犬 | `Dog:large:black_lab` | `dog_chow:large:black_lab` |'
- en: '| Saint Bernard | `Dog:large:saint_bernard, black_lab, golden_retriever` |
    `dog_chow:large:saint_bernard` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 圣伯纳犬 | `Dog:large:saint_bernard, black_lab, golden_retriever` | `dog_chow:large:saint_bernard`
    |'
- en: '| Cat | `Cat:tiny` | `cat_chow:tiny` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 猫 | `Cat:tiny` | `cat_chow:tiny` |'
- en: The existing `mlsconstraint` needs modification. If the Saint Bernard ran out
    of food and went to the Black Lab's dish, the Saint Bernard would not be able
    to eat from it since the levels are not equal (`Dog:large:saint_bernard, black_lab,
    golden_retriever` is not the same as `dog_chow:large:black_lab`). Remember, the
    levels are sets, so we need to introduce some notion that if the subjects set
    dominates the target set, that interaction should be allowed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的`mlsconstraint`需要修改。如果圣伯纳犬的食物吃完了，去吃黑拉布拉多犬的食物，由于等级不同（`Dog:large:saint_bernard,
    black_lab, golden_retriever`与`dog_chow:large:black_lab`不同），圣伯纳犬将无法吃它。记住，这些等级是集合，因此我们需要引入某种概念，如果主体集合支配目标集合，那么应该允许这种交互。
- en: 'This could be accomplished with the `dom` keyword:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过`dom`关键词实现：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The dominate keyword, `dom`, differs from equality, indicating `l1` is a superset
    of `l2` In other words, the levels associated with the target, `l2`, are among
    the potentially larger set of levels associated with the subject, `l1`. At this
    point, we are able to keep all the food separated and used however we see fit.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 主导关键词`dom`与等于不同，表示`l1`是`l2`的超集。换句话说，与目标`l2`相关的级别包含在与主体`l1`相关联的潜在更大级别集合中。在这一点上，我们能够保持所有食物的分离，按照我们的意愿使用。
- en: After getting all these dogs, you realize it's time to feed them, so you get
    a bag of dog food and put some in each bowl. However, before you can add dog food
    to the bowls, we need some allow rules and labels that will let you. Remember,
    SELinux is a whitelist-based system, and everything must be explicitly allowed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在得到所有这些狗之后，你意识到是时候喂它们了，所以你拿了一袋狗粮，在每个碗中放一些。但是，在我们能在碗中添加狗粮之前，我们需要一些允许规则和标签。记住，SELinux
    是一个基于白名单的系统，所有内容必须明确允许。
- en: 'We will label the human with the `human` label and define some rules. Oh yeah...
    don''t forget to feed the cat, as well:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将人类标记为`human`标签，并定义一些规则。哦，对了...别忘了喂猫：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will also need to label `human` with all the sensitivities and categories,
    but this would become cumbersome when we need to add additional dogs, breeds,
    and breed sizes to our system. We could just bypass the constraint if the type
    is `human`. With this approach, we always trust `human` to put the correct food
    in the appropriate bowl:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要给`human`标记上所有的敏感性和类别，但当我们需要在系统中添加额外的狗、品种和品种大小时，这将变得繁琐。如果类型是`human`，我们可以绕过这个约束。采用这种方法，我们总是相信`human`会将正确的食物放入适当的碗中：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note the addition of `put` in the access vectors of the MLS constraint. Viola!
    The human can now feed his ever-growing pack of animals.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在MLS约束的访问向量中加入了`put`。瞧！现在人类可以喂养他日益增长的动物群体了。
- en: 'So your birthday rolls around, and you receive an automatic dog feeder as a
    present. You label the food dispenser, `dispenser` and modify the MLS constraints:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你的生日到了，你收到了一个自动喂狗器作为礼物。你给食物分配器打上标签`dispenser`，并修改MLS约束：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Again, we see a need to condense the number of types and get organized to prevent
    having to duplicate lines. This is where attributes are quite handy. We can assign
    an attribute to our `human` and `dispenser` types by first defining the attribute:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们发现需要减少类型数量并组织起来，以防止不得不重复行。这时，属性就显得非常方便。我们可以首先定义一个属性，并将其分配给我们的`human`和`dispenser`类型。
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we can add it to the type:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将其添加到类型中：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This could also be done at type declaration:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以在类型声明时完成：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At this point, we could modify the MLS statements to look like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以修改MLS声明，使其看起来像这样：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now let''s suppose you hire a maid service. You want to ensure anyone sent
    by the maid service is able to feed your pets. For that matter, let''s let your
    family members feed them, as well. This would be a good use case for the user
    capabilities. We will define the following users: `adults_u`, `kids_u`, and `maid_u`.
    Then we''ll need to add a constraint statement to allow interactions by these
    users:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你雇佣了一个家政服务。你希望确保任何由家政服务派遣的人都能够喂养你的宠物。就此而言，让我们也让你的家庭成员喂养它们。这将是一个使用用户能力的良好案例。我们将定义以下用户：`adults_u`、`kids_u`和`maid_u`。然后我们需要添加一个约束声明，以允许这些用户的互动：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This would prevent the kids from feeding the dogs, but let the maids and adults
    feed them. Now suppose you hire a gardener. You could create yet another user,
    `gardener_u`, or you could collapse the users into a few classes and use roles.
    Let''s suppose we collapse `gardener_u` and `maid_u` into `staff_u`. There is
    no reason the gardener should be feeding the dog, so we could use role-based transitions
    to move the staff between their duties. For instance, suppose staff can perform
    more than one service, that is, the same person might garden and clean. In this
    case, they might take on the role of `gardener_r` or `maid_r`. We could use the
    role capability of SELinux to meet this need:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将防止儿童喂养狗，但允许家政和成人喂养。现在假设你雇佣了一个园丁。你可以创建另一个用户`gardener_u`，或者你可以将用户合并为几个类别并使用角色。假设我们将`gardener_u`和`maid_u`合并为`staff_u`。没有理由让园丁喂养狗，因此我们可以使用基于角色的转换来让员工在职责之间移动。例如，假设员工可以执行多项服务，即同一个人可能既园艺又打扫。在这种情况下，他们可能会承担`gardener_r`或`maid_r`的角色。我们可以使用SELinux的角色功能来满足这一需求：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Staff may only feed the dogs when they're in the `animal_care_r` role. How to
    get into and back out of that role is really the only component missing. You need
    to have a well-defined system for how the staff can move into the animal care
    role and transition back out. These transitions in SELinux occur either automatically
    via dynamic role transitions or via source code modifications. We'll assume that
    any human entity (gardener, adults, kids) all start in the `human_r` role.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 员工只有在`animal_care_r`角色中才能喂养狗。如何进入和退出该角色是唯一缺少的组件。你需要有一个明确的系统，规定员工如何进入动物护理角色并转换回来。在SELinux中，这些转换要么通过动态角色转换自动发生，要么通过源代码修改。我们将假设任何人类实体（园丁、成人、儿童）都从`human_r`角色开始。
- en: 'Dynamic role transitions work with a two-part rule, the first part allows the
    transition to occur via an allow rule:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 动态角色转换遵循一个两部分的规则，第一部分允许通过一个允许规则发生转换：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The role transition statements are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 角色转换声明如下：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This would be a good case to attribute the `dog_chow` and `cat_chow` types
    to a new attribute, `animal_chow`, and rewrite the preceding role transitions
    to:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个将`dog_chow`和`cat_chow`类型归为一个新属性`animal_chow`的好案例，并重写前面的角色转换为：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With these role transitions, you can only go from the `human_r` role to `animal_care_r`.
    You would need to define transitions to get back as well. It's also important
    to note that you might define other roles. Suppose you define the role `gardener_r`,
    and when someone is in that role, they cannot transition to `animal_care_r`. Suppose
    your justification for this policy is that gardeners might work with chemicals
    unsafe for pets, so they would need to wash their hands before feeding pets. In
    such a situation, they should only be able to transition to `animal_care_r` from
    the `hand_wash_r` role.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些角色转换，你只能从 `human_r` 角色转换到 `animal_care_r`。你还需要定义转换以返回。同样重要的是要注意，你可能会定义其他角色。假设你定义了
    `gardener_r` 角色，并且当某人处于该角色时，他们不能转换到 `animal_care_r`。假设你制定这项政策的理由是园丁可能会使用对宠物不安全的化学物质，因此他们在喂宠物之前需要洗手。在这种情况下，他们应该只能从
    `hand_wash_r` 角色转换到 `animal_care_r`。
- en: Complexities and best practices
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂性与最佳实践
- en: As you can now appreciate, SELinux is complex, and can be thought of as a general
    purpose "meta programming policy language". You're literally programming what
    interactions are allowed to occur in a very complex OS such as Linux, where the
    interactions themselves are often complex. Just like a programming language, you
    can do things with different styles and methods that will yield differing results.
    Perhaps using a `switch()` in that program will make it cleaner and easier to
    understand rather than an `else-if` block, even though functionally you will end
    up with the same thing. SELinux is the same; you can often accomplish things with
    one portion of the enforcement mechanisms that would be more appropriately accomplished
    using an alternate mechanism. In later chapters, we will cover the process of
    labeling the target and subject, one of the more difficult parts of the system.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在所理解的，SELinux是复杂的，可以被认为是一种通用的“元编程策略语言”。你实际上是在编程哪些交互被允许在一个非常复杂的操作系统中发生，比如Linux，交互本身通常是复杂的。就像编程语言一样，你可以用不同的风格和方法做事情，这将产生不同的结果。也许在那个程序中使用
    `switch()` 会使其更清晰易懂，而不是 `else-if` 块，尽管从功能上讲，你最终会得到相同的结果。SELinux也是如此；你通常可以使用执行机制的一部分来完成更适合使用另一种机制来完成的事情。在后面的章节中，我们将介绍对目标和主体进行标记的过程，这是系统中较为困难的部分之一。
- en: When someone authors a program, they often have a set of requirements in place
    that the software should perform. These are the requirements of the software.
    In SELinux, you should do the same thing. You should gather the security requirements
    and understand the threat models you wish to protect yourself from. A well designed
    SELinux policy would meet these goals. A great design would do it in a way that
    is easy to extend. That's ultimately where careful and judicious use of the combination
    of UBAC, RBAC, TE, and MLS will help achieve the requirements and design goals.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当某人编写一个程序时，他们通常会有一个要求软件应执行的一系列要求。这些是软件的要求。在SELinux中，你也应该这样做。你应该收集安全要求并了解你希望保护自己免受的威胁模型。一个设计良好的SELinux策略将满足这些目标。一个伟大的设计将以易于扩展的方式进行。这就是谨慎和明智地使用UBAC、RBAC、TE和MLS组合最终将帮助你实现要求和设计目标的地方。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the major working portions of SELinux that include
    type enforcement, multilevel and multicategory security, as well as users and
    roles. Additionally, we saw how to apply these technologies to implement increasingly
    complex access policies to a tangible example. In the next chapter, we will move
    outside of the kernel and discover how Android works in its very unique user space.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了SELinux的主要工作部分，包括类型强制执行、多级别和多类别安全以及用户和角色。此外，我们还了解了如何将这些技术应用于实现越来越复杂的访问策略到一个具体的示例。在下一章中，我们将走出内核，探索Android在其非常独特的用户空间中是如何工作的。
