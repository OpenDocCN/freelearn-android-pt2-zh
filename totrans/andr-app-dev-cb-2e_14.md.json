["```kt\n    <uses-permission android:name=\"android.permission.SEND_SMS\"/>\n    ```", "```kt\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Do Something\"\n        android:layout_centerInParent=\"true\"\n        android:onClick=\"doSomething\"/>\n    ```", "```kt\n    private final int REQUEST_PERMISSION_SEND_SMS=1;\n    ```", "```kt\n    private boolean checkPermission(String permission) {\n        int permissionCheck = ContextCompat.checkSelfPermission(\n                this, permission);\n        return (permissionCheck == PackageManager.PERMISSION_GRANTED);\n    }\n    ```", "```kt\n    private void showExplanation(String title,\n        String message, final String permission, final int permissionRequestCode) {\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setTitle(title).setMessage(message).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n                requestPermission(permission, permissionRequestCode);\n            }\n        });\n        builder.create().show();\n    }\n    ```", "```kt\n    private void requestPermission(String permissionName, int permissionRequestCode) {\n        ActivityCompat.requestPermissions(this, new String[]{permissionName}, permissionRequestCode);\n    }\n    ```", "```kt\n    public void doSomething(View view) {\n        if (!checkPermission(Manifest.permission.SEND_SMS)) {\n            if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.SEND_SMS)) {\n                showExplanation(\"Permission Needed\", \"Rationale\", Manifest.permission.SEND_SMS, REQUEST_PERMISSION_SEND_SMS);\n            } else {\n                requestPermission(Manifest.permission.SEND_SMS, REQUEST_PERMISSION_SEND_SMS);\n            }\n        } else {\n            Toast.makeText(MainActivity.this, \"Permission (already) Granted!\", Toast.LENGTH_SHORT).show();\n        }\n    }\n    ```", "```kt\n    @Override\n    public void onRequestPermissionsResult(\n        int requestCode,\n        String permissions[],\n        int[] grantResults) {\n        switch (requestCode) {\n            case REQUEST_PERMISSION_SEND_SMS: {\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    Toast.makeText(MainActivity.this, \"Permission Granted!\", Toast.LENGTH_SHORT).show();\n                } else {\n                    Toast.makeText(MainActivity.this, \"Permission Denied!\", Toast.LENGTH_SHORT).show();\n                }\n                return;\n            }\n        }\n    }\n    ```", "```kt\nadb shell pm [grant|revoke] <package> <permission-name>\n```", "```kt\nadb shell pm grant com.packtpub.androidcookbook.runtimepermissions android.permission.SEND_SMS\n```", "```kt\n    <receiver android:name=\".AlarmBroadcastReceiver\">\n        <intent-filter>\n            <action android:name=\"com.packtpub.androidcookbook.alarms.ACTION_ALARM\" />\n        </intent-filter>\n    </receiver>\n    ```", "```kt\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Set Alarm\"\n        android:layout_centerInParent=\"true\"\n        android:onClick=\"setAlarm\"/>\n    ```", "```kt\n    public class AlarmBroadcastReceiver extends BroadcastReceiver {\n\n        public static final String ACTION_ALARM=\"com.packtpub.androidcookbook.alarms.ACTION_ALARM\";\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            if (ACTION_ALARM.equals(intent.getAction())) {\n                Toast.makeText(context, ACTION_ALARM, Toast.LENGTH_SHORT).show();\n            }\n        }\n    }\n    ```", "```kt\n    public void setAlarm(View view) {\n        Intent intentToFire = new Intent(getApplicationContext(), AlarmBroadcastReceiver.class);\n        intentToFire.setAction(AlarmBroadcastReceiver.ACTION_ALARM);\n        PendingIntent alarmIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, intentToFire, 0);\n        AlarmManager alarmManager = (AlarmManager)getApplicationContext().getSystemService(Context.ALARM_SERVICE);\n        long thirtyMinutes=SystemClock.elapsedRealtime() + 30 * 60 * 1000;\n        alarmManager.set(AlarmManager.ELAPSED_REALTIME, thirtyMinutes, alarmIntent);\n    }\n    ```", "```kt\nalarmManager.set(AlarmManager.ELAPSED_REALTIME, thirtyMinutes, alarmIntent);\n```", "```kt\nset(AlarmType, Time, PendingIntent);\n```", "```kt\npublic static final String ACTION_ALARM=\"com.packtpub.androidcookbook.alarms.ACTION_ALARM\";\n```", "```kt\nalarmManager.cancel(alarmIntent);\n```", "```kt\nsetRepeating(AlarmType, Time (in milliseconds), Interval, PendingIntent);\n```", "```kt\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n    ```", "```kt\n    <receiver android:name=\".BootBroadcastReceiver\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n        </intent-filter>\n    </receiver>\n    ```", "```kt\n    public class BootBroadcastReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            if (intent.getAction().equals(\"android.intent.action.BOOT_COMPLETED\")) {\n                Toast.makeText(context, \"BOOT_COMPLETED\", Toast.LENGTH_SHORT).show();\n            }\n        }\n    }\n    ```", "```kt\npublic void onReceive(Context context, Intent intent) {\n    if (intent.getAction().equals(\"android.intent.action.BOOT_COMPLETED\")) {\n        Toast.makeText(context, \"BOOT_COMPLETED\", Toast.LENGTH_SHORT).show();\n    } else if (intent.getAction().equals(\"<another_action>\")) {\n        //handle another action\n    }\n}\n```", "```kt\n    <Button\n        android:id=\"@+id/buttonStart\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Start\"\n        android:layout_centerInParent=\"true\"\n        android:onClick=\"start\" />\n    ```", "```kt\n    Button mButtonStart;\n    ```", "```kt\n    private class CountingTask extends AsyncTask<Integer, Integer, Integer> {\n        @Override\n        protected Integer doInBackground(Integer... params) {\n            int count = params[0];\n            for (int x=0;x<=count; x++){\n                //Nothing to do\n            }\n            return count;\n        }\n        @Override\n        protected void onPostExecute(Integer integer) {\n            super.onPostExecute(integer);\n            mButtonStart.setEnabled(true);\n        }\n    }\n    ```", "```kt\n    mButtonStart=(Button)findViewById(R.id.buttonStart);\n    ```", "```kt\n    public void start(View view){\n        mButtonStart.setEnabled(false);\n        new CountingTask().execute(10000000);\n    }\n    ```", "```kt\nAsyncTask<Params, Progress, Result >\n```", "```kt\n< AsyncTask>.cancel(true);\n```", "```kt\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\" />\n    <ImageButton\n        android:id=\"@+id/imageButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:src=\"img/ic_btn_speak_now\"\n        android:onClick=\"speakNow\"/>\n    ```", "```kt\n    private final int REQUEST_SPEECH=1;\n    ```", "```kt\n    PackageManager pm = getPackageManager();\n    List<ResolveInfo> activities = pm.queryIntentActivities(\n        new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);\n    if (activities.size() == 0) {\n        findViewById(R.id.imageButton).setEnabled(false);\n        Toast.makeText(this, \"Speech Recognition Not Supported\", Toast.LENGTH_LONG).show();\n    }\n    ```", "```kt\n    public void speakNow(View view) {\n        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\n        startActivityForResult(intent, REQUEST_SPEECH);\n    }\n    ```", "```kt\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode==REQUEST_SPEECH && resultCode == RESULT_OK && data!=null) {\n            ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n            TextView textView = (TextView)findViewById(R.id.textView);\n            if (result.size()>0){\n                textView.setText(\"\");\n                for (String item : result ) {\n                    textView.append(item+\"\\n\");\n                }\n            }\n        }\n    }\n    ```", "```kt\nfloat[] confidence = data.getFloatArrayExtra(RecognizerIntent.EXTRA_CONFIDENCE_SCORES);\n```", "```kt\nSpeechRecognizer speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);\n```", "```kt\n    classpath 'com.google.gms:google-services:1.5.0-beta2'\n    ```", "```kt\n    apply plugin: 'com.google.gms.google-services'\n    ```", "```kt\n    compile 'com.google.android.gms:play-services-auth:8.3.0'\n    ```", "```kt\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n    <permission android:name=\"< packageName >.permission.C2D_MESSAGE\"\n        android:protectionLevel=\"signature\" />\n    <uses-permission android:name=\"< packageName >.permission.C2D_MESSAGE\" />\n    ```", "```kt\n    <receiver\n        android:name=\"com.google.android.gms.gcm.GcmReceiver\"\n        android:exported=\"true\"\n        android:permission=\"com.google.android.c2dm.permission.SEND\" >\n        <intent-filter>\n            <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\n            <category android:name=\"<packageName>\" />\n            <action android:name=\"com.google.android.c2dm.intent.REGISTRATION\" />\n        </intent-filter>\n    </receiver>\n    <service\n        android:name=\".GCMService\"\n        android:exported=\"false\" >\n        <intent-filter>\n            <action android:name=\"com.google.android.c2dm.intent.GCM_RECEIVED_ACTION\"/>\n            <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\n        </intent-filter>\n    </service>\n    <service\n        android:name=\".GCMInstanceService\"\n        android:exported=\"false\">\n        <intent-filter>\n            <action android:name=\"com.google.android.gms.iid.InstanceID\" />\n        </intent-filter>\n    </service>\n    <service\n        android:name=\".GCMRegistrationService\"\n        android:exported=\"false\">\n    </service>\n    ```", "```kt\n    public class GCMRegistrationService extends IntentService {\n\n        private final String SENT_TOKEN=\"SENT_TOKEN\";\n\n        public GCMRegistrationService() {\n            super(\"GCMRegistrationService\");\n        }\n\n        @Override\n        protected void onHandleIntent(Intent intent) {\n            super.onCreate();\n            SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n            try {\n                InstanceID instanceID = InstanceID.getInstance(this);\n                String token = instanceID.getToken(getString(R.string.gcm_defaultSenderId), GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);\n                Log.i(\"GCMRegistrationService\", \"GCM Registration Token: \" + token);\n                //sendTokenToServer(token);\n                sharedPreferences.edit().putBoolean(SENT_TOKEN, true).apply();\n            } catch (Exception e) {\n                sharedPreferences.edit().putBoolean(SENT_TOKEN, false).apply();\n            }\n        }\n    }\n    ```", "```kt\n    public class GCMInstanceService extends InstanceIDListenerService {\n        @Override\n             public void onTokenRefresh() {\n            Intent intent = new Intent(this, GCMRegistrationService.class);\n            startService(intent);\n        }\n    }\n    ```", "```kt\n    public class GCMService extends GcmListenerService {\n\n        @Override\n        public void onMessageReceived(String from, Bundle data) {\n            super.onMessageReceived(from, data);\n            Log.i(\"GCMService\", \"onMessageReceived(): \" + data.toString());\n        }\n    }\n    ```", "```kt\n    Intent intent = new Intent(this, GCMRegistrationService.class);\n    startService(intent);\n    ```", "```kt\nString token = instanceID.getToken(getString(R.string.gcm_defaultSenderId), GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);\n```", "```kt\nprivate boolean isGooglePlayServicesAvailable() {\n    GoogleApiAvailability googleApiAvailability = GoogleApiAvailability.getInstance();\n    int resultCode = googleApiAvailability.isGooglePlayServicesAvailable(this);\n    if (resultCode != ConnectionResult.SUCCESS) {\n        if (googleApiAvailability.isUserResolvableError(resultCode)) {\n            googleApiAvailability.getErrorDialog(this, resultCode, PLAY_SERVICES_RESOLUTION_REQUEST).show();\n        } else {\n            Toast.makeText(MainActivity.this, \"Unsupported Device\", Toast.LENGTH_SHORT).show();\n            finish();\n        }\n        return false;\n    }\n    return true;\n}\n```", "```kt\nif (isGooglePlayServicesAvailable()) {\n    Intent intent = new Intent(this, GCMRegistrationService.class);\n    startService(intent);\n}\n```", "```kt\n    classpath 'com.google.gms:google-services:1.5.0-beta2'\n    ```", "```kt\n    apply plugin: 'com.google.gms.google-services'\n    ```", "```kt\n    compile 'com.google.android.gms:play-services-auth:8.3.0'\n    ```", "```kt\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentTop=\"true\" />\n\n    <com.google.android.gms.common.SignInButton\n        android:id=\"@+id/signInButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\" />\n    ```", "```kt\n    private final int REQUEST_SIGN_IN=1;\n    GoogleApiClient mGoogleApiClient;\n    ```", "```kt\n    GoogleApiClient.OnConnectionFailedListener mOnConnectionFailedListener = new GoogleApiClient.OnConnectionFailedListener() {\n        @Override\n        public void onConnectionFailed(ConnectionResult connectionResult) {\n            Toast.makeText(MainActivity.this, \"connectionResult=\"+connectionResult.getErrorMessage(), Toast.LENGTH_SHORT).show();\n        }\n    };\n    ```", "```kt\n    GoogleSignInOptions googleSignInOptions = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n        .requestEmail()\n        .build();\n    mGoogleApiClient = new GoogleApiClient.Builder(this)\n        .addOnConnectionFailedListener(mOnConnectionFailedListener)\n        .addConnectionCallbacks(mConnectionCallbacks)\n        .addApi(Auth.GOOGLE_SIGN_IN_API, googleSignInOptions)\n        .build();\n    findViewById(R.id.signInButton).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            signIn();\n        }\n    });\n    ```", "```kt\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == REQUEST_SIGN_IN) {\n            GoogleSignInResult googleSignInResult = Auth.GoogleSignInApi.getSignInResultFromIntent(data);\n            if (googleSignInResult.isSuccess()) {\n                GoogleSignInAccount googleSignInAccount = googleSignInResult.getSignInAccount();\n                TextView textView = (TextView)findViewById(R.id.textView);\n                textView.setText(\"Signed in: \" + googleSignInAccount.getDisplayName());\n                findViewById(R.id.signInButton).setVisibility(View.GONE);\n            }\n        }\n    }\n    ```"]