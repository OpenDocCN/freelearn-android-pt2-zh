["```kt\n    SampleObject sampleObject = new SampleObject();\n    ```", "```kt\n    SoftReference<SampleObject> sampleObjectSoftRef = new SoftReference<SampleObject>(new SampleObject());\n    SampleObject sampleObject = sampleObjectSoftRef.get();\n    ```", "```kt\n    WeakReference<SampleObject> sampleObjectWeakRef = new WeakReference<SampleObject>(new SampleObject());\n    ```", "```kt\nadb shell cmd appops set RUN_IN_BACKGROUND ignore\n\n```", "```kt\nadb shell cmd appops set RUN_IN_BACKGROUND allow\n\n```", "```kt\nInteger i = 0;\n```", "```kt\nInteger i = new Integer(0);\n```", "```kt\nInteger integer = 0;\ninteger++;\n```", "```kt\n    int temp = integer.intValue() + 1;\n    ```", "```kt\n    i = temp;\n    ```", "```kt\nInteger sum = 0;\nfor (int i = 0; i < 500; i++) {\n    sum += i;\n}\n```", "```kt\nint sum = 0;\nfor (int i = 0; i < 500; i++) {\n    sum += i;\n}\n```", "```kt\nList<Integer> list;\nMap<Integer, Object> map;\nSet<Integer> set;\n```", "```kt\n// SparseArray\nfor (int i = 0; i < map.size(); i++) {\n    Object value = map.get(map.keyAt(i));\n}\n```", "```kt\n// HashMap\nfor (Iterator iter = map.keySet().iterator(); iter.hasNext(); ) {\n    Object value = iter.next();\n}\n```", "```kt\npublic class CyclesTest {\n\n    public void test() {\n        List list = createArray(LENGTH);\n        iteratorCycle(list);\n        whileCycle(list);\n        forCycle(list);\n    }\n\n    private void iteratorCycle(List<String> list) {\n        Iterator<String> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            String stemp = iterator.next();\n        }\n    }\n\n    private void whileCycle(List<String> list) {\n        int j = 0;\n        while (j < list.size()) {\n            String stemp = (String) list.get(j);\n            j++;\n        }\n    }\n\n    private void forCycle(List<String> list) {\n        for (int i = 0; i < list.size(); i++) {\n            String stemp = (String) list.get(i);\n        }\n    }\n\n    private List createArray(int length) {\n        String sArray[] = new String[length];\n        for (int i = 0; i < length; i++)\n            sArray[i] = \"Array \" + i;\n        return Arrays.asList(sArray);\n    }\n}\n```", "```kt\nprivate void classicCycle(Dummy[] dummies) {\n    int sum = 0;\n    for (int i = 0; i < dummies.length; ++i) {\n        sum += dummies[i].dummy;\n    }\n}\n\nprivate void fasterCycle(Dummy[] dummies) {\n    int sum = 0;\n    int len = dummies.length;\n    for (int i = 0; i < len; ++i) {\n        sum += dummies[i].dummy;\n    }\n}\n\nprivate void enhancedCycle(Dummy[] dummies) {\n    int sum = 0;\n    for (Dummy a : dummies) {\n        sum += a.dummy;\n    }\n}\n```", "```kt\npublic enum SHAPE {\n    RECTANGLE, \n    TRIANGLE, \n    SQUARE, \n    CIRCLE\n}\n```", "```kt\npublic class SHAPE {\n    public static final int RECTANGLE = 0;\n    public static final int TRIANGLE = 1;\n    public static final int SQUARE = 2;\n    public static final int CIRCLE = 3;\n}\n```", "```kt\npublic void calculateSurface(SHAPE shape) {\n    switch (shape) {\n        case RECTANGLE:\n            //calculate rectangle surface\n            break;\n        case TRIANGLE:\n            //calculate triangle surface\n            break;\n        case SQUARE:\n            //calculate square surface\n            break;\n        case CIRCLE:\n            //calculate circle surface\n            break;\n    }\n}\n```", "```kt\npublic void calculateSurface(int shape) {\n    switch (shape) {\n        case RECTANGLE:\n            //calculate rectangle surface\n            break;\n        case TRIANGLE:\n            //calculate triangle surface\n            break;\n        case SQUARE:\n            //calculate square surface\n            break;\n        case CIRCLE:\n            //calculate circle surface\n            break;\n    }\n}\n```", "```kt\n@IntDef(flag = true, \n        value = {VALUE1, VALUE2, VALUE3})\npublic @interface MODE {\n}\n```", "```kt\npublic static final int RECTANGLE = 0;\npublic static final int TRIANGLE = 1;\npublic static final int SQUARE = 2;\npublic static final int CIRCLE = 3;\n\n@IntDef({RECTANGLE, TRIANGLE, SQUARE, CIRCLE})\npublic @interface Shape {\n}\n```", "```kt\npublic abstract void setShape(@Shape int mode);\n\n@Shape\npublic abstract int getShape();\n```", "```kt\nString string = new String(\"example\");\n```", "```kt\nString string = \"example\";\n```", "```kt\nString string = \"This is \";\nstring += \"a string\";\n```", "```kt\nStringBuffer stringBuffer = new StringBuffer(\"This is \");\nstringBuffer.append(\"a string\");\n```", "```kt\nStringBuffer stringBuffer = new StringBuffer(64);\nstringBuffer.append(\"This is \");\nstringBuffer.append(\"a string\");\nstringBuffer.appendâ€¦\n```", "```kt\npublic String format(Date date) {\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM- dd'T'HH:mm:ss.SSSZ\");\n    return dateFormat.format(date);\n}\n```", "```kt\nprivate DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM- dd'T'HH:mm:ss.SSSZ\");\n\npublic String format(Date date) {\n    return dateFormat.format(date);\n}\n```", "```kt\nInputStream is = null;\nOutputStream os = null;\ntry {\n    is = new FileInputStream(\"../inputFile.txt\");\n    os = new FileOutputStream(\"../outputFile.txt\");\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (is != null)\n            is.close();\n        if (os != null)\n            os.close();\n    } catch (IOException e) {\n    }\n}\n```", "```kt\nInputStream is = null;\nOutputStream os = null;\ntry {\n    is = new FileInputStream(\"../inputFile.txt\");\n    os = new FileOutputStream(\"../outputFile.txt\");\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (is != null)\n            is.close();\n    } catch (IOException e) {\n         e.printStackTrace();\n    }\n    try {\n        if (os != null)\n            os.close();\n    } catch (IOException e) { \n         e.printStackTrace();\n    }\n}\n```", "```kt\npublic abstract class ObjectPool<T> {\n    private SparseArray<T> freePool;\n    private SparseArray<T> lentPool;\n    private int maxCapacity;\n\n    public ObjectPool(int initialCapacity, int maxCapacity) {\n        initialize(initialCapacity);\n        this.maxCapacity = maxCapacity;\n    }\n\n    public ObjectPool(int maxCapacity) {\n        this(maxCapacity / 2, maxCapacity);\n    }\n\n    public T acquire() {\n        T t = null;\n        synchronized (freePool) {\n            int freeSize = freePool.size();\n            for (int i = 0; i < freeSize; i++) {\n                int key = freePool.keyAt(i);\n                t = freePool.get(key);\n                if (t != null) {\n                    this.lentPool.put(key, t);\n                    this.freePool.remove(key);\n                    return t;\n                }\n            }\n            if (t == null && lentPool.size() + freeSize < maxCapacity) {\n                t = create();\n                lentPool.put(lentPool.size() + freeSize, t);\n            }\n        }\n        return t;\n    }\n\n    public void release(T t) {\n        if (t == null) {\n            return;\n        }\n        int key = lentPool.indexOfValue(t);\n        restore(t);\n        this.freePool.put(key, t);\n        this.lentPool.remove(key);\n    }\n\n    protected abstract T create();\n\n    protected void restore(T t) {\n\n    }\n\n    private void initialize(final int initialCapacity) {\n        lentPool = new SparseArray<>();\n        freePool = new SparseArray<>();\n        for (int i = 0; i < initialCapacity; i++) {\n            freePool.put(i, create());\n        }\n    }\n}\n```", "```kt\npublic interface Courier<T> {\n    void equip(T param);\n}\n```", "```kt\npublic class PackCourier implements Courier<Pack> {\n    private Van van;\n\n    public PackCourier(int id) {\n        super(id);\n        van = new Van(id);\n    }\n\n    public void equip(Pack pack) {\n        van.load(pack);\n    }\n}\n```", "```kt\npublic class Delivery extends Id {\n    private Courier<Pack> courier;\n\n    public Delivery(int id) {\n        super(id);\n        courier = new Factory().getCourier(0); \n    }\n\n    public void deliver(Pack pack, Destination destination) {\n        courier.equip(pack);\n    }\n}\n```", "```kt\npublic class Factory {\n    private static SparseArray<Courier> pool;\n\n    public Factory() {\n        if (pool == null)\n            pool = new SparseArray<>();\n    }\n\n    public Courier getCourier(int type) {\n        Courier courier = pool.get(type);\n        if (courier == null) {\n            courier = create(type);\n            pool.put(type, courier);\n        }\n        return courier;\n    }\n\n    private Courier create(int type) {\n        Courier courier = null;\n        switch (type) {\n            case 0:\n                courier = new PackCourier(0);\n        }\n        return courier;\n    }\n}\n```", "```kt\nfor (int i = 0; i < DEFAULT_COURIER_NUMBER; i++) {\n    new Delivery(i).deliver(new Pack(i), new Destination(i));\n}\n```", "```kt\npublic class MainActivity extends Activity {\nprivate static View view;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n    view = findViewById(R.id.textView);\n}\n}\n```", "```kt\npublic View(Context context) {\n    super(context);\n}\n\npublic View(Context context, AttributeSet attrs) {\n    super(context, attrs);\n}\n\npublic View(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n}\n\npublic View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n    super(context, attrs, defStyleAttr, defStyleRes);\n}\n```", "```kt\npublic class MainActivity extends Activity {\nprivate static Drawable drawable;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n    View view = findViewById(R.id.textView);\n    view.setBackground(drawable);\n}\n}\n```", "```kt\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        new MyAsyncTask().execute();\n    }\n\n    private class MyAsyncTask extends AsyncTask {\n\n        @Override\n        protected Object doInBackground(Object[] params) {\n            return doSomeStuff();\n        }\n\n        private Object doSomeStuff() {\n            //do something to get result\n            return new Object();\n        }\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState); \n        new MyAsyncTask(this).execute();\n    }\n\n    private static class MyAsyncTask extends AsyncTask {\n        private WeakReference<MainActivity> mainActivity;\n\n        public MyAsyncTask(MainActivity mainActivity) {\n            this.mainActivity = new WeakReference<>(mainActivity);\n        }\n\n        @Override\n        protected Object doInBackground(Object[] params) {\n            return doSomeStuff();\n        }\n\n        private Object doSomeStuff() {\n            //do something to get result\n            return new Object();\n        }\n\n        @Override\n        protected void onPostExecute(Object o) {\n            super.onPostExecute(o);\n            if (mainActivity.get() != null){\n                //adapt contents\n            }\n        }\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity {\n    private TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState); \n        new MyTask(this).run();\n    }\n\n    private class MyTask {\n        private MainActivity mainActivity;\n\n        public MyAsyncTask(MainActivity mainActivityOld) {\n            this.mainActivity = mainActivityOld;\n        }\n\n        protected void run() {\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        wait(2000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    mainActivity.runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            textView.setText(\"Done!\");\n                        }\n                    });\n                }\n            }).run();\n        }\n    }\n}\n```", "```kt\npublic class Singleton {\n    private static Singleton singleton;\n    private Callback callback;\n\n    public static Singleton getInstance() {\n        if (singleton == null)\n            singleton = new Singleton();\n        return singleton;\n    }\n\n    public Callback getCallback() {\n        return callback;\n    }\n\n    public void setCallback(Callback callback) {\n        this.callback = callback;\n    }\n\n    public interface Callback {\n        void callback();\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity implements Singleton.Callback {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Singleton.getInstance().setCallback(this);\n    }\n\n    @Override\n    public void callback() {\n        //doSomething\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity implements Singleton.Callback {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Singleton.getInstance().setCallback(this);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        Singleton.getInstance().setCallback(null);\n    }\n\n    @Override\n    public void callback() {\n        //doSomething\n    }\n}\n```", "```kt\npublic class Singleton {\n    private static Singleton singleton;\n    private WeakReference<Callback> callback;\n\n    public static Singleton getInstance() {\n        if (singleton == null)\n            singleton = new Singleton();\n        return singleton;\n    }\n\n    public Callback getCallback() {\n        return callback.get();\n    }\n\n    public void setCallback(Callback callback) {\n        this.callback = new WeakReference<Callback>(callback);\n    }\n\n    public interface Callback {\n        void callback();\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Singleton.getInstance().setCallback(new Singleton.Callback() {\n\n            @Override\n            public void callback() {\n                //doSomething\n            }\n        });\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity {\n    private Handler handler = new Handler();\n    private TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        textView = (TextView) findViewById(R.id.textView);\n        handler.postDelayed(new Runnable() {\n\n            @Override\n            public void run() {\n                textView.setText(\"Done!\");\n            }\n        }, 10000);\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity {\n    private Handler handler = new Handler();\n    private TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState); \n        handler.postDelayed(new MyRunnable(textView), 10000);\n    }\n\n    private static class MyRunnable implements Runnable {\n        private TextView textView;\n\n        public MyRunnable(TextView textView) {\n            this.textView = textView;\n        }\n\n        @Override\n        public void run() {\n            textView.setText(\"Done!\");\n        }\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity {\n    private Handler handler = new Handler();\n    private TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState); \n        handler.postDelayed(new MyRunnable(textView), 10000);\n    }\n\n    private static class MyRunnable implements Runnable {\n        private WeakReference<TextView> textViewRef;\n\n        public MyRunnable(TextView textView) {\n            this.textViewRef = new WeakReference<TextView>(textView);\n        }\n\n        @Override\n        public void run() {\n            if (textViewRef.get() != null)\n                textViewRef.get().setText(\"Done!\");\n        }\n    }\n}\n```", "```kt\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    handler.removeCallbacksAndMessages(null);\n}\n```", "```kt\n<service\n    android:name=\".MainService\"\n    android:process=\":MainService\"></service>\n```", "```kt\n<application\n    â€¦\n    android:largeHeap=\"true\">\n    â€¦\n</application>\n```", "```kt\nActivityManager activityManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);\nint capacity = 20;\nif (activityManager.isLowRamDevice()) {\n    capacity = 10;\n}\nâ€¦\n```", "```kt\nint capacity = 20;\nif (ActivityManagerCompat.isLowRamDevice()) {\n    capacity = 10;\n}\nâ€¦\n```", "```kt\n@Override\npublic void onTrimMemory(int level) {\n    switch (level) {\n        case TRIM_MEMORY_COMPLETE:\n            //app invisible - mem low - lru bottom\n        case TRIM_MEMORY_MODERATE:\n            //app invisible - mem low - lru medium\n        case TRIM_MEMORY_BACKGROUND:\n            //app invisible - mem low - lru top\n        case TRIM_MEMORY_UI_HIDDEN:\n            //app invisible - lru top\n        case TRIM_MEMORY_RUNNING_CRITICAL:\n            //app visible - mem critical - lru top\n        case TRIM_MEMORY_RUNNING_LOW:\n            //app visible - mem low - lru top\n        case TRIM_MEMORY_RUNNING_MODERATE:\n            //app visible - mem moderate - lru top\n            break;\n    }\n}\n```", "```kt\nD/dalvikvm: <GcReason> <AmountFreed>, <HeapStats>, <ExternalMemoryStats>, <PauseTime> \n```", "```kt\nD/dalvikvm(9932): GC_CONCURRENT freed 1394K, 14% free 32193K/37262K, external 18524K/24185K, paused 2ms\n```", "```kt\nI/art: <GcReason> <GcName> <ObjectsFreed>(<SizeFreed>) AllocSpace Objects, <LargeObjectsFreed>(<LargeObjectSizeFreed>) <HeapStats> LOS objects, <PauseTimes>\n```", "```kt\nI/art : Explicit concurrent mark sweep GC freed 125742(6MB) AllocSpace objects, 34(576KB) LOS objects, 22% free, 25MB/32MB, paused 1.621ms total 73.285ms\n```", "```kt\nActivityManager.ACTION_REPORT_HEAP_LIMIT\n```", "```kt\nif (BuildConfig.DEBUG) {\n    StrictMode.VmPolicy policy = new StrictMode.VmPolicy.Builder()\n            .detectAll()\n            .penaltyLog()\n            .build();\n    StrictMode.setVmPolicy(policy);\n}\n```", "```kt\nE/StrictMode: class com.packtpub.androidhighperformanceprogramming.TestActivity; instances=2; limit=1 android.os.StrictMode$InstanceCountViolation: class com.packtpub.androidhighperformanceprogramming.TestActivity; instances=2; limit=1\nat android.os.StrictMode.setClassInstanceLimit(StrictMode.java:1)\n```", "```kt\nadb shell dumpsys <SERVICE>\n\n```", "```kt\nadb shell service list\n\n```", "```kt\nadb shell dumpsys <SERVICE> -h\n\n```", "```kt\nadb shell dumpsys meminfo\n\n```", "```kt\nApplications Memory Usage (kB):\nUptime: 239111 Realtime: 239111\n\nTotal PSS by process:\n 64798 kB: system (pid 1299)\n 33811 kB: com.android.systemui (pid 1528)\n 30001 kB: com.google.android.gms (pid 2006)\n 29371 kB: com.android.launcher3 (pid 2388 / activities)\n 25394 kB: com.google.process.gapps (pid 1923)\n 21991 kB: com.google.android.gms.persistent (pid 1815)\n 21069 kB: com.google.android.apps.maps (pid 2075)\n 20067 kB: com.google.android.apps.messaging (pid 2245)\n 17678 kB: zygote (pid 966)\n 17176 kB: com.android.phone (pid 1750)\n 15637 kB: com.google.android.gms.unstable (pid 2576)\n 10041 kB: android.process.acore (pid 1555)\n 9961 kB: com.android.inputmethod.latin (pid 1744)\n 9692 kB: android.process.media (pid 1879)\n 9333 kB: com.google.android.gms.wearable (pid 2112)\n 8748 kB: com.android.email (pid 2054)\n\n```", "```kt\nadb shell dumpsys meminfo <PID>\n\n```", "```kt\nApplications Memory Usage (kB):\nUptime: 6489195 Realtime: 6489195\n\n** MEMINFO in pid 2693 [com.packtpub.androidhighperformanceprogramming.chap4] **\n Pss  Private  Private  Swapped     Heap \n Total    Dirty    Clean    Dirty     Size \n ------   ------   ------   ------   ------\n Native Heap     3150     3060        0        0    16384 \n Dalvik Heap     2165     2088        0        0     2274 \n Dalvik Other      292      280        0        0\n Stack      128      128        0        0\n Other dev        4        0        4        0\n .so mmap      862      100        8        0\n .apk mmap      218        0       52        0\n .ttf mmap       20        0        0        0\n .dex mmap     3848        0     3844        0\n .oat mmap     1134        0       40        0\n .art mmap     1015      520        0        0\n Other mmap        7        4        0        0\n Unknown       77       76        0        0\n TOTAL    12920     6256     3948        0    18658 \n\n Objects\n Views:       36         ViewRootImpl:        1\n AppContexts:        3           Activities:        1\n Assets:        2        AssetManagers:        2\n Local Binders:        8        Proxy Binders:       13\n Parcel memory:        3         Parcel count:       12\n Death Recipients:        0      OpenSSL Sockets:        0\n\n SQL\n MEMORY_USED:        0\n PAGECACHE_OVERFLOW:        0          MALLOC_SIZE:        0\n\n```", "```kt\nadb shell dumpsys procstats â€“hours 3\n\n```", "```kt\nAGGREGATED OVER LAST 3 HOURS:\n * system / 1000 / v23:\n TOTAL: 100% (62MB-64MB-67MB/55MB-57MB-59MB over 16)\n Persistent: 100% (62MB-64MB-67MB/55MB-57MB-59MB over 16)\n * com.android.systemui / u0a14 / v23:\n TOTAL: 100% (35MB-36MB-36MB/29MB-30MB-31MB over 16)\n Persistent: 100% (35MB-36MB-36MB/29MB-30MB-31MB over 16)\n Service: 0.01%\n * com.android.inputmethod.latin / u0a33 / v23:\n TOTAL: 100% (11MB-11MB-11MB/8.2MB-8.2MB-8.2MB over 16)\n Imp Bg: 100% (11MB-11MB-11MB/8.2MB-8.2MB-8.2MB over 16)\n * com.google.android.gms.persistent / u0a7 / v8185470:\n TOTAL: 100% (22MB-22MB-23MB/17MB-17MB-17MB over 16)\n Imp Fg: 100% (22MB-22MB-23MB/17MB-17MB-17MB over 16)\n * com.android.phone / 1001 / v23:\n TOTAL: 100% (18MB-18MB-19MB/14MB-15MB-16MB over 16)\n Persistent: 100% (18MB-18MB-19MB/14MB-15MB-16MB over 16)\n * com.android.launcher3 / u0a8 / v23:\n TOTAL: 100% (28MB-29MB-32MB/23MB-24MB-28MB over 119)\n Top: 100% (28MB-29MB-32MB/23MB-24MB-28MB over 119)\n\nRun time Stats:\n SOff/Norm: +1s478ms\n SOn /Norm: +4h1m17s720ms\n TOTAL: +4h1m19s198ms\n\nMemory usage:\n Persist: 117MB (96 samples)\n Top    : 29MB (238 samples)\n ImpFg  : 23MB (198 samples)\n ImpBg  : 11MB (40 samples)\n Service: 56MB (127 samples)\n Receivr: 1.1KB (69 samples)\n CchEmty: 76MB (146 samples)\n TOTAL  : 312MB\n ServRst: 18 (11 samples)\n\n Start time: 2015-11-29 07:19:00\n Total elapsed time: +4h1m21s462ms (partial) libart.so \n\n```", "```kt\npercent (minPss-avgPss-maxPss / minUss-avgUss-maxUss)\n\n```", "```kt\nadb shell dumpsys procstats com.packtpub.androidhighperformanceprogramming --hours 3\n\n```", "```kt\nAGGREGATED OVER LAST 3 HOURS:\nSystem memory usage:\n SOn /Norm: 1 samples:\n Cached: 260MB min, 260MB avg, 260MB max\n Free: 185MB min, 185MB avg, 185MB max\n ZRam: 0.00 min, 0.00 avg, 0.00 max\n Kernel: 43MB min, 43MB avg, 43MB max\n Native: 39MB min, 39MB avg, 39MB max\n Mod: 1 samples:\n Cached: 240MB min, 240MB avg, 240MB max\n Free: 18MB min, 18MB avg, 18MB max\n ZRam: 0.00 min, 0.00 avg, 0.00 max\n Kernel: 43MB min, 43MB avg, 43MB max\n Native: 39MB min, 39MB avg, 39MB max\n Low: 1 samples:\n Cached: 232MB min, 232MB avg, 232MB max\n Free: 15MB min, 15MB avg, 15MB max\n ZRam: 0.00 min, 0.00 avg, 0.00 max\n Kernel: 43MB min, 43MB avg, 43MB max\n Native: 39MB min, 39MB avg, 39MB max\n Crit: 1 samples:\n Cached: 211MB min, 211MB avg, 211MB max\n Free: 12MB min, 12MB avg, 12MB max\n ZRam: 0.00 min, 0.00 avg, 0.00 max\n Kernel: 43MB min, 43MB avg, 43MB max\n Native: 39MB min, 39MB avg, 39MB max\n\nSummary:\n\nRun time Stats:\n SOff/Norm: +1s478ms\n SOn /Norm: +4h25m22s212ms\n Mod:  +5m2s547ms\n Low:  +1m21s22ms\n Crit: +2m54s947ms\n TOTAL: +4h34m42s206ms\n\n```"]