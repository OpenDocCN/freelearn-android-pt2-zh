["```kt\nboolean allowed = SELinux.checkSELinuxAccess(peerSecurityContext, peerSecurityContext, \"zygote\", \"specifyids\");\n```", "```kt\nif (mFoundPolicyFile) {\n  SELinuxMMAC.assignSeinfoValue(pkg);\n}\n```", "```kt\n// Locations of potential install policy files.\nprivate static final File[] INSTALL_POLICY_FILE = {\n  new File(Environment.getDataDirectory(), \"system/mac_permissions.xml\"),\n  new File(Environment.getRootDirectory(), \"etc/security/mac_permissions.xml\"),\n  null };\n```", "```kt\nprivate static boolean readInstallPolicy(File[] policyFiles) {\n  FileReader policyFile = null;\n  int i = 0;\n  while (policyFile == null && policyFiles != null && policyFiles[i] != null) {\n    try {\n      policyFile = new FileReader(policyFiles[i]);\n      break;\n    } catch (FileNotFoundException e) {\n      Slog.d(TAG,\"Couldn't find install policy \" + policyFiles[i].getPath());\n    }\n  i++;\n  }\n...\n```", "```kt\n// Signature seinfo values read from policy.\nprivate static final HashMap<Signature, String> sSigSeinfo =\nnew HashMap<Signature, String>();\n// Package name seinfo values read from policy.\nprivate static final HashMap<String, String> sPackageSeinfo =\nnew HashMap<String, String>();\n```", "```kt\nif (((pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) ||\n((pkg.applicationInfo.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0)) {\n```", "```kt\n// We just want one of the signatures to match.\nfor (Signature s : pkg.mSignatures) {\n  if (s == null)\n    continue;\n  if (sSigSeinfo.containsKey(s)) {\n    String seinfo = pkg.applicationInfo.seinfo = sSigSeinfo.get(s);\n    if (DEBUG_POLICY_INSTALL)\n      Slog.i(TAG, \"package (\" + pkg.packageName +\n        \") labeled with seinfo=\" + seinfo);\n    return;\n    }\n  }\n  // Check for seinfo labeled by package.\n  if (sPackageSeinfo.containsKey(pkg.packageName)) {\n    String seinfo = pkg.applicationInfo.seinfo = sPackageSeinfo.get(pkg.packageName);\n    if (DEBUG_POLICY_INSTALL)\n      Slog.i(TAG, \"package (\" + pkg.packageName +\n        \") labeled with seinfo=\" + seinfo);\n      return;\n    }\n  }\n}\n```", "```kt\n<!-- Platform dev key in AOSP -->\n<signer signature=\"@PLATFORM\" >\n  <seinfo value=\"platform\" />\n</signer>\n```", "```kt\n<!-- release dev key in AOSP -->\n<signer signature=\"@RELEASE\" >\n  <seinfo value=\"release\" />\n  <package name=\"com.android.browser\" >\n  <seinfo value=\"browser\" />\n  </package>\n</signer>\n...\n```", "```kt\n...\n<!-- All other keys -->\n<default>\n  <seinfo value=\"default\" />\n</default>\n```", "```kt\n$ adb pull /system/etc/security/mac_permissions.xml\n$ xmllint --format mac_permissions.xml\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- AUTOGENERATED FILE DO NOT MODIFY -->\n<policy>\n  <signer signature=\"308204ae30820396a003020102020900d2cba57296ebebe2300d06092a864886f70d0101050500308196310b300906035504061302555331133...\ndec513c8443956b7b0182bcf1f1d\">\n    <allow-all/>\n    <seinfo value=\"platform\"/>\n  </signer>\n```", "```kt\n[@PLATFORM]\nALL : $DEFAULT_SYSTEM_DEV_CERTIFICATE/platform.x509.pem\n```", "```kt\n[@RELEASE]\nENG       : $DEFAULT_SYSTEM_DEV_CERTIFICATE/testkey.x509.pem\nUSER      : $DEFAULT_SYSTEM_DEV_CERTIFICATE/testkey.x509.pem\nUSERDEBUG : $DEFAULT_SYSTEM_DEV_CERTIFICATE/testkey.x509.pem\n```", "```kt\nuser=bluetooth domain=bluetooth type=bluetooth_data_file\n```", "```kt\nuser=_app domain=untrusted_app type=app_data_file levelFrom=app\n```", "```kt\n$ wget https://f-droid.org/repo/org.zeroxlab.zeroxbenchmark_9.apk\n$ adb install org.zeroxlab.zeroxbenchmark_9.apk \n567 KB/s (1193455 bytes in 2.052s)\npkg: /data/local/tmp/org.zeroxlab.zeroxbenchmark_9.apk\nSuccess\n\n```", "```kt\n$ adb logcat | grep SELinux\nI/SELinuxMMAC( 2557): package (org.zeroxlab.zeroxbenchmark) installed with seinfo=default\n\n```", "```kt\n$ adb shell ps -Z | grep untrusted\nu:r:untrusted_app:s0:c40,c256 u0_a40 17890 2285 org.zeroxlab.zeroxbenchmark\n\n```", "```kt\nError:\nout/host/linux-x86/bin/checkseapp -p out/target/product/udoo/obj/ETC/sepolicy_intermediates/sepolicy -o out/target/product/udoo/obj/ETC/seapp_contexts_intermediates/seapp_contexts out/target/product/udoo/obj/ETC/seapp_contexts_intermediates/seapp_contexts.tmp\nError: Could not find selinux boolean \"app_level\" on line: 42 in file: out/target/product/udoo/obj/ETC/seapp_contexts_intermediates/seapp_contexts\nError: Could not validate\n\n```", "```kt\n$ adb push $OUT/root/sepolicy /data/security/current/\n$ adb push $OUT/root/seapp_contexts /data/security/current/\n$ adb shell setprop selinux.reload_policy 1\n\n```", "```kt\n$ adb shell getsebool -a | grep app_level\napp_level --> off\n\n```", "```kt\n$ adb uninstall org.zeroxlab.zeroxbenchmark\n\n```", "```kt\n$ adb shell ps -Z | grep untrusted\nu:r:untrusted_app:s0:c40,c256 u0_a40 17890 2285 org.zeroxlab.zeroxbenchmark\n\n```", "```kt\n$ adb shell ls -la /data | grep security\ndrwx------ system system 1970-01-04 00:22 security\n\n```", "```kt\n$ adb uninstall org.zeroxlab.zeroxbenchmark\n$ adb install ~/org.zeroxlab.zeroxbenchmark_9.apk\n<launch apk>\n$ adb shell ps -Z | grep org.zeroxlab.zeroxbenchmark\nu:r:untrusted_app:s0 u0_a40 3324 2285 org.zeroxlab.zeroxbenchmark\n\n```", "```kt\n$ adb uninstall org.zeroxlab.zeroxbenchmark\n\n```", "```kt\n<signer signature=\"@BENCHMARK\" >\n<allow-all />\n<seinfo value=\"benchmark\" />\n</signer>\n\n```", "```kt\n$ mkdir tmp\n$ cd tmp\n$ unzip ~/org.zeroxlab.zeroxbenchmark_9.apk\n$ cd META-INF/\n$ $ openssl pkcs7 -inform DER -in *.RSA -out CERT.pem -outform PEM Â -print_certs\n\n```", "```kt\nsubject=/C=UK/ST=ORG/L=ORG/O=fdroid.org/OU=FDroid/CN=FDroid\nissuer=/C=UK/ST=ORG/L=ORG/O=fdroid.org/OU=FDroid/CN=FDroid\n-----BEGIN CERTIFICATE-----\nMIIDPDCCAiSgAwIBAgIEUVJuojANBgkqhkiG9w0BAQUFADBgMQswCQYDVQQGEwJV\nSzEMMAoGA1UECBMDT1JHMQwwCgYDVQQHEwNPUkcxEzARBgNVBAoTCmZkcm9pZC5v\n...\n```", "```kt\n$ mkdir UDOO_SOURCE_ROOT/certs\n$ mv CERT.pem UDOO_SOURCE_ROOT/certs/benchmark.x509.pem\n\n```", "```kt\n[@BENCHMARK]\nALL : certs/benchmark.x509.pem\n\n```", "```kt\nuser=_app seinfo=benchmark domain=benchmark_app type=benchmark_app_data_file\n\n```", "```kt\n# Declare the new type\ntype benchmark_app, domain;\n# This macro adds it to the untrusted app domain set and gives it some allow rules\n# for basic functionality as well as object access to the type in argument 2.\nuntrustedapp_domain(benchmark_app, benchmark_app_data_file)\n\n```", "```kt\ntype benchmark_app_data_file, file_type, data_file_type, app_public_data_type;\n\n```", "```kt\n$ mmm external/sepolicy/\n$ adb push $OUT/system/etc/security/mac_permissions.xml /data/security/current/\n$ adb push $OUT/root/sepolicy /data/security/current/\n$ adb push $OUT/root/seapp_contexts /data/security/current/\n$ adb shell setprop selinux.reload_policy 1\n\n```", "```kt\n$ adb install ~/org.zeroxlab.zeroxbenchmark_9.apk\n$ adb logcat | grep -i SELinux\n\n```", "```kt\nI/SELinuxMMAC( 2564): package (org.zeroxlab.zeroxbenchmark) installed with seinfo=default\n\n```", "```kt\nprivate static final File[] INSTALL_POLICY_FILE = {\nnew File(Environment.getDataDirectory(), \"security/mac_permissions.xml\"),\nnew File(Environment.getRootDirectory(), \"etc/security/mac_permissions.xml\"),\nnull};\n```", "```kt\n$ adb remount\n$ adb push $OUT/system/etc/security/mac_permissions.xml /system/etc/security/\n\n```", "```kt\nI/SELinuxMMAC( 2564): package (org.zeroxlab.zeroxbenchmark) installed with seinfo=default\n\n```", "```kt\nI/SELinuxMMAC( 2559): package (org.zeroxlab.zeroxbenchmark) installed with seinfo=benchmark\n\n```", "```kt\n<launch apk>\n$ adb shell ps -Z | grep org.zeroxlab.zeroxbenchmark\nu:r:benchmark_app:s0 u0_a45 3493 2285 org.zeroxlab.zeroxbenchmark\n$ adb shell ls -Z /data/data | grep org.zeroxlab.zeroxbenchmark\ndrwxr-x--x u0_a45 u0_a45 u:object_r:benchmark_app_data_file:s0 org.zeroxlab.zeroxbenchmark\n\n```"]