- en: Chapter 1. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start the book with an overview of Material Design and Android 6 Marshmallow.
    The new Material Design concept from Google has been a revolution in the way apps
    look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: During the course of the book, we will build an app called `MasteringAndroidApp`.
    In this chapter, we will explain what the app is about. In this app, we will put
    into practice all the concepts and theory explained in every chapter. At the end
    of the book, we should have a rich app, full of features, which can be easily
    modified to create your own version and uploaded to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: We will ensure that we have all the necessary tools, downloading the latest
    version of Android and introducing **Genymotion**, the quickest emulator for Android,
    strongly recommended for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Material Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key points for Android 6 Marshmallow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the tools ready
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDK Manager
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Genymotion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Material Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, Material Design was a revolution in the way apps look
    and feel. You have probably heard of this concept before, but what is it exactly?
  prefs: []
  type: TYPE_NORMAL
- en: Material Design is a new visual language created by Google, used on all the
    platforms, websites, and mobile devices that are based on materials, meaningful
    transitions, animations, and responsive interactions.
  prefs: []
  type: TYPE_NORMAL
- en: The material is a metaphor of an element that can be seen on the surface; it
    consists of layers that can have different heights and widths, but their thickness
    is always one unit, as with sheets of paper. We can place materials above each
    other, which introduces a depth element to the view, a *Z* coordinate. In the
    same way, we can have a sheet of paper on top of another, casting shadows and
    defining a visual priority.
  prefs: []
  type: TYPE_NORMAL
- en: The content is displayed on the materials but they don't add thickness to it.
    The content can be displayed in any shape and color; it can be a plain background
    color, a text, a video, and many other things. It is limited within the bounds
    of the material.
  prefs: []
  type: TYPE_NORMAL
- en: The material can expand and the content can expand with it, but the content
    can never expand more than the material. We can't have two materials at the same
    *Z* position. One of them always has to be below or on top of the other. If we
    interact with the materials, we always interact at the top layer level. For instance,
    a touch event will be performed in the top layer and won't go through to the layers
    below. You can change the size and shape of the materials and the two materials
    can be merged into one, but they can't bend or fold.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing Material Design](img/B04887_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is an example of an app using the Material Design style; we can see cards
    with shadows, different content, and an app bar with a navigation drawer. All
    these components will be explained in the course of this book, and we will aim
    to build an app using the same style.
  prefs: []
  type: TYPE_NORMAL
- en: Material design also came with important UI elements, such as `RecyclerView`.
    This is a view that will replace `ListView`, which came earlier in Android, to
    create any kind of a scrollable list of elements. We'll work with these components
    in [Chapter 5](ch05.html "Chapter 5. Lists and Grids"), *Lists and Grids*, starting
    with the basic version of `ListView`, evolving it to understand how `RecyclerView`
    was born, and finishing with an example of it.
  prefs: []
  type: TYPE_NORMAL
- en: The `CardView` was another major UI element introduced. We can see one in the
    previous image; it's a component with a background and shadows that can be customized
    to fit all the content that we want. We will work with it in [Chapter 6](ch06.html
    "Chapter 6. CardView and Material Design"), *CardView and Material Design*, where
    we'll also introduce the next component—design support library.
  prefs: []
  type: TYPE_NORMAL
- en: Design support library is a *must have* library that includes animations, **FAB**
    (**Floating Action Button**), and the navigation drawer. You've probably already
    seen the sliding menu that comes from the left in other apps. Design support library
    offers support for these components in previous Android versions, allowing us
    to use Material Design features in older versions.
  prefs: []
  type: TYPE_NORMAL
- en: All of the above are features from a UI and programming perspective, but Material
    design also introduced different features for our phone, such as a new notification
    management system with different priority levels. For instance, we can say which
    notifications are important and establish a time frame when we don't want to be
    disturbed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing Material Design](img/B04887_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another thing that we can't miss is the battery consumption improvement in this
    version, which can save up to 90 minutes of battery compared to previous Android
    versions, and it is due to a new Android runtime called ART. To explain it in
    a nontechnical way, it translates the app to a language that can be understood
    by Android faster when the app is installed. The previous runtime, **Dalvik**,
    had to do this translation while executing our app rather than just once at the
    installation. This helps the app consume less battery and run faster.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Android 6 Marshmallow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main changes in this version has to do with the permissions for apps.
    Before Android M, we were used to accepting the permissions of an app when we
    were about to download it; the play store showed us a list of permissions that
    an app has, and we needed to accept them in order to download and install it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing Android 6 Marshmallow](img/B04887_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Runtime permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This has changed with the introduction of runtime permissions. The idea here
    is to accept the permission only when you need it. For instance, WhatsApp might
    not need access to your microphone until your make a call or leave a voice message.
  prefs: []
  type: TYPE_NORMAL
- en: '![Runtime permissions](img/B04887_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is something we need to take into account when we develop an app; it is
    a change for the developer who now needs to control what is to be done if the
    user doesn't accept the permission. Previously, we didn't have to do any controlling
    because it was an all-or-none choice at installation time; now, we have to consider
    the decision of the user at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Power-saving optimizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is another improvement regarding the battery life of our phones since
    Lollipop; this time, Google has introduced two new states: **doze mode** and **app
    standby**.'
  prefs: []
  type: TYPE_NORMAL
- en: Doze mode improves the sleep efficiency of idle devices. If we turn off the
    screen and are not using the phone, we enter the idle state. Previously, applications
    could do network operations and continue working in the background; now, with
    the introduction of doze mode, the system periodically allows our apps to work
    in the background and perform other pending operations for a brief period of time.
    Again, this brings in some consideration while developing; for instance, in this
    mode, our apps can't access the network.
  prefs: []
  type: TYPE_NORMAL
- en: '![Power-saving optimizations](img/B04887_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: App standby is an induced idle mode for an app that has not been used for a
    while and doesn't have any processes running in the background. It is used for
    an app if it does not show any notifications and if the user has not explicitly
    asked it to be exempt from optimization. This idle mode prevents the app from
    accessing the network and executing pending jobs. When the power cable is connected,
    all apps in a standby state are released, and the idle restrictions are removed.
  prefs: []
  type: TYPE_NORMAL
- en: Text selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous versions, when a user selected text, a set of actions appeared
    on the action bar, such as copy, cut, and paste. With this version, we can show
    these actions and more, in a floating bar that will be presented above the selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text selection](img/B04887_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fingerprint authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this version of Android, we can authenticate the use of our fingerprint.
    The authentication can be at a device level to unlock the phone, not just to unlock
    a specific app; so, we can authenticate users in our app based on how recently
    they unlocked their device.
  prefs: []
  type: TYPE_NORMAL
- en: We have a new object available, `FingerprintManager`, which will be in charge
    of the authentication and allow us to show a dialog requesting the fingerprint.
    We would need a device with a fingerprint sensor in order to use this feature.
  prefs: []
  type: TYPE_NORMAL
- en: '![Fingerprint authentication](img/B04887_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Direct share
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Direct share is a new addition to simplify the content sharing process. Previously,
    if we were in the gallery and wanted to share a picture to a contact in WhatsApp,
    we had to click on **Share**, find WhatsApp in the list of apps, and then find
    a contact inside WhatsApp to share this content. This process will be simplified,
    showing a list of contacts with whom you can share the information directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Direct share](img/B04887_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These are the main new features that have been released with Android 6 Marshmallow;
    the complete list can be seen at [http://developer.android.com/preview/index.html](http://developer.android.com/preview/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating MasteringAndroidApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen the main features of the latest Android version, we can
    introduce the app that we are going to develop during the book. This app will
    include most of these features, but we will also spend time in the components
    widely used in previous Android versions.
  prefs: []
  type: TYPE_NORMAL
- en: To master Android, we should be prepared to understand legacy code; for instance,
    we might have to work on an app that still uses `ListView` instead of `RecyclerView`,
    which is new. We will not always create apps from scratch with the latest components,
    especially if we are professional Android developers. Also, looking at previous
    components will help us understand the natural evolution of these components to
    have a better idea of how they are now.
  prefs: []
  type: TYPE_NORMAL
- en: We will start creating this app totally from scratch, starting with the initial
    design, having a look at the most used design and navigation patterns in Android,
    such as tabs at the top, a sliding menu on the left side, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The app that we will develop, `MasteringAndroidApp`, is one with server-side
    interaction. This app will show information that is stored in the cloud, and we
    will create the cloud component, making our app communicate with it. The topic
    we have chosen for the app is a job listing board, where we will create job offers
    on the server side, and the users of the app can read these offers and receive
    notifications.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily customize the topic; this will be an example where you can change
    the information and create your own app with the same structure. In fact, it's
    better if you think of your own idea because we will discuss how to publish the
    app in Play Store and how to monetize it; we will add adverts, which will generate
    revenue when the users click on it. So, if you apply what you learn using your
    idea, by the time you finish the book, you will have an app ready to be distributed.
  prefs: []
  type: TYPE_NORMAL
- en: We will develop the app explaining the programming patterns that are most used
    in Android as well as concurrency techniques and different methods to connect
    to rest APIs or servers.
  prefs: []
  type: TYPE_NORMAL
- en: We'll not only be focusing on the backend, but also on the UI; by displaying
    the information in an efficient way, using lists and grids, downloading images
    from the Internet, and customizing fonts and views with the latest material design
    features.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn the mechanism for debugging our apps, managing logs, and consider
    the memory usage while learning how to identify and prevent memory leaks.
  prefs: []
  type: TYPE_NORMAL
- en: Our app will have an offline mode based on a database, where we will store the
    content from the cloud. So, if the mobile loses connection, we can still show
    the information available when we were last online.
  prefs: []
  type: TYPE_NORMAL
- en: To complete our app, we will add extra features such as push notifications,
    crash reports, and analytics.
  prefs: []
  type: TYPE_NORMAL
- en: To finish, we will see how the Android build system works, exporting our app
    in different versions as well as obfuscating the code to protect it and prevent
    decompiling.
  prefs: []
  type: TYPE_NORMAL
- en: We have compressed a huge amount of information that will help you to master
    Android by the end of the book; however, before starting with our app, let's get
    the tools ready.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the tools ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tools that we will need during the book are the latest version of Android
    Studio, an Android SDK updated to Android M or later. It is also recommended that
    you have **Genymotion**, an emulator to test the app.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we need to download and install Android Studio, the official tool to
    develop in Android. It can be downloaded from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the website, you will have a link to download it depending on
    your OS version.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the tools ready](img/B04887_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once it's installed, we need to download an Android M SDK, which will provide
    all the classes and resources necessary to develop an app for a specific Android
    version. This is done through SDK Manager, a tool included inside Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: We can click on **Tools** | **Android** | **SDK Manager** or find a shortcut
    in the uppermost bar of Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the tools ready](img/B04887_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we open SDK manager, we will see a list of the available SDK platforms
    and SDK tools. We need to ensure that the latest version available is installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the tools ready](img/B04887_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this, we have all that we need to develop our app. In order to test it,
    it would be ideal to have Genymotion, which is an Android emulator that will help
    us test our app on different devices.
  prefs: []
  type: TYPE_NORMAL
- en: The reason we use this emulator instead of the Android default one is primarily
    the speed. Deploying an app in Genymotion is even quicker than using a physical
    device. Apart from this, we benefit from other features, such as resizable windows,
    copying and pasting from our computer, and other smaller details that are time
    consuming with the default emulator. It can be downloaded from [https://www.genymotion.com](https://www.genymotion.com).
  prefs: []
  type: TYPE_NORMAL
- en: All we need to do is install it, and once opened, we can add emulators with
    the same features included with existing devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the tools ready](img/B04887_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through the important changes in the latest versions
    of Android, highlighting Android Marshmallow and Material Design.
  prefs: []
  type: TYPE_NORMAL
- en: We explained what we will do in the app that we'll be building through the course
    of this book and the tools that we'll need to create it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the existing design patterns in Android
    and start designing our app.
  prefs: []
  type: TYPE_NORMAL
