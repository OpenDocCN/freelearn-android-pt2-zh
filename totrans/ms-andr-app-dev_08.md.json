["```kt\npublic class DatabaseContract {\n\n  public static final String DB_NAME = \"mastering_android_app.db\";\n\n  public abstract class JobOfferTable {\n\n    public static final String TABLE_NAME = \"job_offer_table\";\n\n    public static final String TITLE = \"title\";\n    public static final String DESC = \"description\";\n    public static final String TYPE = \"type\";\n    public static final String SALARY = \"salary\";\n    public static final String LOCATION = \"location\";\n    public static final String COMPANY_ID = \"company_id\";\n  }\n\n  public abstract class CompanyTable {\n\n    public static final String TABLE_NAME = \"company_table\";\n\n    public static final String NAME = \"name\";\n    public static final String IMAGE_LINK = \"image_link\";\n  }\n}\n```", "```kt\n/**\n* DATABASE VERSION\n*/\nprivate static final int DATABASE_VERSION = 1;\n```", "```kt\n@Override\npublic void onCreate(SQLiteDatabase db) {\n  //Create database here\n}\n\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n  //Update database here\n}\n```", "```kt\npublic DBOpenHelper(Context context){\n  super(context, DatabaseContract.DB_NAME, null, DATABASE_VERSION);\n}\n```", "```kt\ndb.execSQL(CREATE_JOB_OFFER_TABLE);\ndb.execSQL(CREATE_COMPANY_TABLE);\n```", "```kt\n/**\n* SQL CREATE TABLE JOB OFFER sentence\n*/\nprivate static final String CREATE_JOB_OFFER_TABLE = \"CREATE TABLE \"\n+ DatabaseContract.JobOfferTable.TABLE_NAME + \" (\"\n+ DatabaseContract.JobOfferTable.TITLE + TEXT_TYPE + COMMA\n+ DatabaseContract.JobOfferTable.DESC + TEXT_TYPE + COMMA\n+ DatabaseContract.JobOfferTable.TYPE + TEXT_TYPE + COMMA\n+ DatabaseContract.JobOfferTable.SALARY + TEXT_TYPE + COMMA\n+ DatabaseContract.JobOfferTable.LOCATION + TEXT_TYPE + COMMA\n+ DatabaseContract.JobOfferTable.COMPANY_ID + INTEGER_TYPE + \" )\";\n```", "```kt\n/**\n* TABLE STRINGS\n*/\nprivate static final String TEXT_TYPE = \" TEXT\";\nprivate static final String INTEGER_TYPE = \" INTEGER\";\nprivate static final String COMMA = \", \";\n```", "```kt\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n  db.execSQL(DROP_JOB_OFFER_TABLE);\n  db.execSQL(DROP_COMPANY_TABLE);\n  onCreate(db);\n}\n\n/**\n* SQL DELETE TABLE SENTENCES\n*/\npublic static final String DROP_JOB_OFFER_TABLE = \"DROP TABLE IF EXISTS \"+ DatabaseContract.JobOfferTable.TABLE_NAME;\npublic static final String DROP_COMAPNY_TABLE = \"DROP TABLE IF EXISTS \"+ DatabaseContract.CompanyTable.TABLE_NAME;\n```", "```kt\npublic class DBOpenHelper extends SQLiteOpenHelper {\n\n  private static final int DATABASE_VERSION = 1;\n\n  /**\n  * TABLE STRINGS\n  */\n  private static final String TEXT_TYPE = \" TEXT\";\n  private static final String INTEGER_TYPE = \" INTEGER\";\n  private static final String COMMA = \", \";\n\n  /**\n  * SQL CREATE TABLE sentences\n  */\n  private static final String CREATE_JOB_OFFER_TABLE = \"CREATE TABLE \"\n  + DatabaseContract.JobOfferTable.TABLE_NAME + \" (\"\n  + DatabaseContract.JobOfferTable.TITLE + TEXT_TYPE + COMMA\n  + DatabaseContract.JobOfferTable.DESC + TEXT_TYPE + COMMA\n  + DatabaseContract.JobOfferTable.TYPE + TEXT_TYPE +\n\n  COMMA       + DatabaseContract.JobOfferTable.SALARY + TEXT_TYPE +\n\n  COMMA       + DatabaseContract.JobOfferTable.LOCATION + TEXT_TYPE +\n\n  COMMA + DatabaseContract.JobOfferTable.COMPANY_ID +\n\n  INTEGER_TYPE + \" )\";\n\n  private static final String CREATE_COMPANY_TABLE = \"CREATE TABLE \"\n  + DatabaseContract.CompanyTable.TABLE_NAME + \" (\"\n  + DatabaseContract.CompanyTable.NAME + TEXT_TYPE + COMMA\n  + DatabaseContract.CompanyTable.IMAGE_LINK + TEXT_TYPE +  \" )\";\n\n  /**\n  * SQL DELETE TABLE SENTENCES\n  */\n  public static final String DROP_JOB_OFFER_TABLE = \"DROP TABLE IF EXISTS \"+ DatabaseContract.JobOfferTable.TABLE_NAME;\n  public static final String DROP_COMPANY_TABLE = \"DROP TABLE IF EXISTS \"+ DatabaseContract.CompanyTable.TABLE_NAME;\n\n  public DBOpenHelper(Context context){\n    super(context, DatabaseContract.DB_NAME, null, DATABASE_VERSION);\n  }\n\n  @Override\n  public void onCreate(SQLiteDatabase db) {\n    db.execSQL(CREATE_JOB_OFFER_TABLE);\n    db.execSQL(CREATE_COMPANY_TABLE);\n  }\n\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n    db.execSQL(DROP_COMPANY_TABLE);\n    db.execSQL(DROP_JOB_OFFER_TABLE);\n    onCreate(db);\n  }\n}\n```", "```kt\npublic class MasteringAndroidDAO {\n\n  /**\n  * Singleton pattern\n  */\n  private static MasteringAndroidDAO sInstane = null;\n\n  /**\n  * Get an instance of the Database Access Object\n  *\n  * @return instance\n  */\n  public static MasteringAndroidDAO getInstance(){\n    if (sInstane == null){\n      sInstane = new MasteringAndroidDAO();\n    }\n    return sInstane;\n  }\n\n  public synchronized boolean storeOffers(Context context, List<JobOffer> offers){\n    //Store offers\n  }\n\n  public synchronized List<JobOffer> getOffersFromDB(Context context){\n    //Get offers\n  }\n\n}\n```", "```kt\ntry {\n  SQLiteDatabase db = newDBOpenHelper(context).getWritableDatabase();\n\n  db.beginTransaction();\n  //insert single job offer\n  db.setTransactionSuccessful();\n  db.endTransaction();\n  db.close();\n} catch ( Exception e){\n  Log.d(\"MasteringAndroidDAO\",e.toString());\n  return false;\n}\n```", "```kt\nCursor cursorCompany = db.query(DatabaseContract.CompanyTable.TABLE_NAME,\n  new String[]{\"rowid\"},\n  DatabaseContract.CompanyTable.NAME +\" LIKE ?\",\n  new String[]{offer.getCompany()},\n  null,null,null);\n```", "```kt\nString queryString = \"SELECT rowid FROM company_table WHERE name LIKE '?'\"; \nCursor c = sqLiteDatabase.rawQuery(queryString, whereArgs);\n```", "```kt\nCursor c = queryâ€¦.\nwhile (c.moveToNext()) {\n  String currentName = c.getString(c.getColumnIndex(\"column_name\"));\n}\n```", "```kt\npublic int findCompanyId(SQLiteDatabase db, JobOffer offer){\n  Cursor cursorCompany = db.query(DatabaseContract.CompanyTable.TABLE_NAME,\n  new String[]{\"rowid\"},\n  DatabaseContract.CompanyTable.NAME +\" LIKE ?\",\n  new String[]{offer.getCompany()},\n  null,null,null);\n\n  int id = -1;\n\n  if (cursorCompany.moveToNext()){\n    id = cursorCompany.getInt(0);\n  }\n  return id;\n}\n```", "```kt\ndb.insertWithOnConflict(DATABASE_TABLE, null, initialValues, SQLiteDatabase.CONFLICT_IGNORE);\n```", "```kt\npublic boolean storeOffers(Context context, List<JobOffer> offers){\n\n  try {\n    SQLiteDatabase db = new DBOpenHelper(context).getWritableDatabase();\n\n    db.beginTransaction();\n\n    for (JobOffer offer : offers){\n\n      ContentValues cv_company = new ContentValues();\n      cv_company.put(DatabaseContract.CompanyTable.NAME, offer.getCompany());\n      cv_company.put(DatabaseContract.CompanyTable.IMAGE_LINK,offer.getImageLink());\n\n      int id = findCompanyId(db,offer);\n\n      if (id < 0) {\n        id = (int) db.insert(DatabaseContract.CompanyTable.TABLE_NAME,null,cv_company);\n      }\n\n      ContentValues cv = new ContentValues();\n      cv.put(DatabaseContract.JobOfferTable.TITLE,offer.getTitle());\n      cv.put(DatabaseContract.JobOfferTable.DESC,offer.getDescription());\n      cv.put(DatabaseContract.JobOfferTable.TYPE, offer.getType());\n      cv.put(DatabaseContract.JobOfferTable.DESC, offer.getDescription());\n      cv.put(DatabaseContract.JobOfferTable.SALARY,offer.getSalary());\n      cv.put(DatabaseContract.JobOfferTable.LOCATION,offer.getLocation());\n      cv.put(DatabaseContract.JobOfferTable.COMPANY_ID,id);\n\n      db.insert(DatabaseContract.JobOfferTable.TABLE_NAME,null,cv);\n    }\n\n    db.setTransactionSuccessful();\n    db.endTransaction();\n\n    db.close();\n\n  } catch ( Exception e){\n    Log.d(\"MasteringAndroidDAO\", e.toString());\n    return false;\n  }\n\n  return true;\n}\n```", "```kt\npublic List<JobOffer> getOffersFromDB(Context context){\n\n  SQLiteDatabase db = new DBOpenHelper(context).getWritableDatabase();\n\n  String join = DatabaseContract.JobOfferTable.TABLE_NAME + \" JOIN \" +\n  DatabaseContract.CompanyTable.TABLE_NAME + \" ON \" +\n  DatabaseContract.JobOfferTable.TABLE_NAME+\".\"+DatabaseContract.JobOfferTable.COMPANY_ID\n  +\" = \" + DatabaseContract.CompanyTable.TABLE_NAME+\".rowid\";\n\n  Cursor cursor = db.query(join,null,null,null,null,null,null);\n\n  List<JobOffer> jobOfferList = new ArrayList<>();\n\n  while (cursor.moveToNext()) {\n    //Create job offer from cursor and add it\n    //to the list\n  }\n\n  cursor.close();\n  db.close();\n\n  return jobOfferList;\n}\n```", "```kt\nwhile (cursor.moveToNext()) {\n\n  JobOffer offer = new JobOffer();\n  offer.setTitle(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.TABLE_NAME)));\n  offer.setDescription(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.DESC)));\n  offer.setType(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.TYPE)));\n  offer.setSalary(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.SALARY)));\n  offer.setLocation(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.LOCATION)));\n  offer.setCompany(cursor.getString(cursor.getColumnIndex(DatabaseContract.CompanyTable.NAME)));\n  offer.setImageLink(cursor.getString(cursor.getColumnIndex(DatabaseContract.CompanyTable.IMAGE_LINK)));\n\n  jobOfferList.add(offer);\n}\n```", "```kt\n/**\n* Remove all offers and companies\n*/\npublic void clearDB(Context context)\n{\n  SQLiteDatabase db = new DBOpenHelper(context).getWritableDatabase();\n  // db.delete(String tableName, String whereClause, String[] whereArgs);\n  // If whereClause is null, it will delete all rows.\n  db.delete(DatabaseContract.JobOfferTable.TABLE_NAME, null, null);\n  db.delete(DatabaseContract.CompanyTable.TABLE_NAME, null, null);\n}\n```", "```kt\npublic boolean isOnline() {\n  ConnectivityManager cm =\n  (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo netInfo = cm.getActiveNetworkInfo();\n  return netInfo != null && netInfo.isConnectedOrConnecting();\n}\n```", "```kt\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container,\nBundle savedInstanceState) {\n  // Inflate the layout for this fragment\n  View view = inflater.inflate(R.layout.fragment_list, container, false);\n\n  mRecyclerView = (RecyclerView) view.findViewById(R.id.my_recycler_view);\n\n  // use this setting to improve performance if you know that changes\n  // in content do not change the layout size of the RecyclerView\n  mRecyclerView.setHasFixedSize(true);\n\n  // use a linear layout manager\n  mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n\n  //Retrieve the list of offers\n\n  if (isOnline()){\n    retrieveJobOffers();\n  } else {\n    showOffersFromDB();\n  }\n\n  return view;\n}\n\npublic void retrieveJobOffers(){\n  ParseQuery<JobOffer> query = ParseQuery.getQuery(\"JobOffer\");\n  query.findInBackground(new FindCallback<JobOffer>() {\n\n    @Override\n    public void done(List<JobOffer> jobOffersList, ParseException e) {\n      MasteringAndroidDAO.getInstance().clearDB(getActivity());\n      MasteringAndroidDAO.getInstance().storeOffers(getActivity(), jobOffersList);\n      mListItems = MasteringAndroidDAO.getInstance().getOffersFromDB(getActivity());\n      JobOffersAdapter adapter = new JobOffersAdapter(mListItems);\n      mRecyclerView.setAdapter(adapter);\n    }\n\n  });\n}\n\npublic void showOffersFromDB(){\n  mListItems = MasteringAndroidDAO.getInstance().getOffersFromDB(getActivity());\n  JobOffersAdapter adapter = new JobOffersAdapter(mListItems);\n  mRecyclerView.setAdapter(adapter);\n}\n```", "```kt\npublic class MAAProvider extends ContentProvider {\n\n  @Override\n  public boolean onCreate() {\n    return false;\n  }\n\n  @Override\n  public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n    return null;\n  }\n\n  @Override\n  public Uri insert(Uri uri, ContentValues values) {\n    return null;\n  }\n\n  @Override\n  public int delete(Uri uri, String selection, String[] selectionArgs) {\n    return 0;\n  }\n\n  @Override\n  public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n    return 0;\n  }\n\n  @Override\n  public String getType(Uri uri) {\n    return null;\n  }\n}\n```", "```kt\n@Override\npublic Uri insert(Uri uri, ContentValues values) {\n  if (uri.equals(\"content://com.packtub.masteringandroidapp.MAAProvider/company_table\")){\n    //Do an insert in company_table\n} else if (uri.equals(\"content://com.packtub.masteringandroidapp.MAAProvider/offer_table\")){\n//Do an insert in offer table\n} else if ... {\n  .\n  .\n  .\n}\n}\n```", "```kt\npublic class MAAProvider extends ContentProvider {\n\n  public final String authority = \"com.packtpub.masteringandroidapp.MAAProvider\";\n\n  private UriMatcher mUriMatcher;\n\n  private static final int COMPANY_TABLE = 0;\n  private static final int COMPANY_TABLE_ROW = 1;\n  private static final int OFFER_TABLE = 2;\n  private static final int OFFER_TABLE_ROW = 3;\n  private static final int JOIN_TABLE = 4;\n  private static final int JOIN_TABLE_ROW = 5;\n\n  @Override\n  public boolean onCreate() {\n    mUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n    mUriMatcher.addURI(authority,DatabaseContract.CompanyTable.TABLE_NAME,COMPANY_TABLE);\n    mUriMatcher.addURI(authority,DatabaseContract.CompanyTable.TABLE_NAME+\"/#\",COMPANY_TABLE_ROW);\n    mUriMatcher.addURI(authority,DatabaseContract.JobOfferTable.TABLE_NAME,OFFER_TABLE);\n    mUriMatcher.addURI(authority,DatabaseContract.JobOfferTable.TABLE_NAME+\"/#\",OFFER_TABLE_ROW);\n    mUriMatcher.addURI(authority,DatabaseContract.OFFER_JOIN_COMPANY,JOIN_TABLE);\n    mUriMatcher.addURI(authority,DatabaseContract.OFFER_JOIN_COMPANY+\"/#\",JOIN_TABLE_ROW);\n\n    mDB = new DBOpenHelper(getContext()).getWritableDatabase();\n\n    return true;\n  }\n\n  @Override\n  public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n    switch (mUriMatcher.match(uri)){\n      case COMPANY_TABLE:\n      //Query company table\n      break;\n      case COMPANY_TABLE_ROW:\n      //Query company table by id\n      break;\n      .\n      .\n```", "```kt\nprivate SQLiteDatabase mDB;\n```", "```kt\nmDB = new DBOpenHelper(getContext()).getWritableDatabase();\n```", "```kt\n@Override\npublic Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n  switch (mUriMatcher.match(uri)){\n    case COMPANY_TABLE:\n    return mDB.query(DatabaseContract.CompanyTable.TABLE_NAME, projection,selection,selectionArgs,null,null,sortOrder);\n    case COMPANY_TABLE_ROW:\n    selection = \"rowid LIKE \"+uri.getLastPathSegment();\n    return mDB.query(DatabaseContract.CompanyTable.TABLE_NAME, projection,selection,selectionArgs,null,null,sortOrder);\n    case OFFER_TABLE:\n    return mDB.query(DatabaseContract.JobOfferTable.TABLE_NAME, projection,selection,selectionArgs,null,null,sortOrder);\n    case OFFER_TABLE_ROW:\n    selection = \"rowid LIKE \"+uri.getLastPathSegment();\n    return mDB.query(DatabaseContract.JobOfferTable.TABLE_NAME, projection,selection,selectionArgs,null,null,sortOrder);\n    case JOIN_TABLE:\n    return mDB.query(DBOpenHelper.OFFER_JOIN_COMPANY, projection,selection,selectionArgs,null,null,sortOrder);\n    case JOIN_TABLE_ROW:\n    selection = \"rowid LIKE \"+uri.getLastPathSegment();\n    return mDB.query(DBOpenHelper.OFFER_JOIN_COMPANY, projection,selection,selectionArgs,null,null,sortOrder);\n  }\n  return null;\n}\n```", "```kt\npublic static final String OFFER_JOIN_COMPANY = DatabaseContract.JobOfferTable.TABLE_NAME + \" JOIN \" +\nDatabaseContract.CompanyTable.TABLE_NAME + \" ON \" +\nDatabaseContract.JobOfferTable.TABLE_NAME+\".\"+DatabaseContract.JobOfferTable.COMPANY_ID\n+\" = \" + DatabaseContract.CompanyTable.TABLE_NAME+\".rowid\";Content Resolver\n```", "```kt\nContentResolver cr = getContentResolver();\n```", "```kt\nUri uriPath = Uri.parse(\"content://\"+MAAProvider.authority + \"/\" + DatabaseContract.OFFER_JOIN_COMPANY);\nCursor cursor = cr.query(uriPath, null, null, null, null);\n```", "```kt\n.\n.\n.\n    <activity\n        android:name=\".OfferDetailActivity\"\n        android:label=\"@string/title_activity_offer_detail\" >\n    </activity>\n    <provider android:name=\"com.packtpub.masteringandroidapp.MAAProvider\"\n        android:authorities=\"com.packtpub.masteringandroidapp.MAAProvider\">\n    </provider>\n</application>\n```", "```kt\npublic void showOffersFromContentProvider(){\n  ContentResolver cr = getActivity().getContentResolver();\n  Uri uriPath = Uri.parse(\"content://\"+MAAProvider.authority + \"/\" + DatabaseContract.OFFER_JOIN_COMPANY);\n  Cursor cursor = cr.query(uriPath, null, null, null, null);\n\n  List<JobOffer> jobOfferList = new ArrayList<>();\n  while (cursor.moveToNext()) {\n\n    JobOffer offer = new JobOffer();\n    offer.setTitle(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.TITLE)));\n    offer.setDescription(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.DESC)));\n    offer.setType(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.TYPE)));\n    offer.setSalary(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.SALARY)));\n    offer.setLocation(cursor.getString(cursor.getColumnIndex(DatabaseContract.JobOfferTable.LOCATION)));\n    offer.setCompany(cursor.getString(cursor.getColumnIndex(DatabaseContract.CompanyTable.NAME)));\n    offer.setImageLink(cursor.getString(cursor.getColumnIndex(DatabaseContract.CompanyTable.IMAGE_LINK)));\n\n    jobOfferList.add(offer);\n  }\n  JobOffersAdapter adapter = new JobOffersAdapter(jobOfferList);\n  mRecyclerView.setAdapter(adapter);\n}\n```", "```kt\nif (isOnline()){\n  retrieveJobOffers();\n} else {\n  showOffersFromContentProvider();\n}\n```", "```kt\npublic class ListFragment extends android.support.v4.app.Fragment implements LoaderManager.LoaderCallbacks<Cursor>\n\n@Override\npublic Loader<Cursor> onCreateLoader(int id, Bundle args) {\n  return null;\n}\n\n@Override\npublic void onLoadFinished(Loader<Cursor> loader, Cursor data) {\n\n}\n\n@Override\npublic void onLoaderReset(Loader<Cursor> loader) {\n\n}\n```", "```kt\npublic static final int MAA_LOADER = 1;\n```", "```kt\ngetLoaderManager().initLoader(MAA_LOADER, null, this);\n```", "```kt\npublic static final String JOIN_TABLE_URI =  \"content://\" + MAAProvider.authority + \"/\" + DatabaseContract.OFFER_JOIN_COMPANY;\n@Override\npublic Loader<Cursor> onCreateLoader(int loaderID, Bundle bundle)\n{\n  switch (loaderID) {\n    case MAA_LOADER:\n    return new CursorLoader(\n    getActivity(),   // Parent activity context\n    Uri.parse(MAAProvider.JOIN_TABLE_URI),\n    // Table to query\n    null,            // Projection to return\n    null,            // No selection clause\n    null,            // No selection arguments\n    null             // Default sort order\n    );\n    default:\n    //Invalid ID\n    return null;\n  }\n}\n```", "```kt\n@Override\npublic void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {\n\n  List<JobOffer> jobOfferList = new ArrayList<>();\n\n  while (cursor.moveToNext()) {\n    jobOfferList.add(JobOffer.createJobOfferfromCursor(cursor));\n  }\n\n  JobOffersAdapter adapter = new JobOffersAdapter(jobOfferList);\n  mRecyclerView.setAdapter(adapter);\n}\n```", "```kt\n@Override\npublic void onLoaderReset(Loader<Cursor> loader) {\n  //mAdapter.changeCursor(null);\n}\n```", "```kt\nSimpleCursorAdapter mAdapter =\nnew SimpleCursorAdapter(\n  this,                // Current context\n  R.layout.list_item,  // Layout for a single row\n  null,                // No Cursor yet\n  mFromColumns,        // Cursor columns to use\n  mToFields,           // Layout fields to use\n  0                    // No flags\n);\n```", "```kt\nmAdapter.changeCursor(cursor);\n```", "```kt\npublic class JobOfferCursorAdapter extends RecyclerView.Adapter<JobOfferCursorsAdapter.MyViewHolder>{\n\n  Cursor mDataCursor;\n\n  @Override\n  public int getItemCount() {\n    return (mDataCursor == null) ? 0 : mDataCursor.getCount();\n  }\n\n  public void changeCursor(Cursor newCursor) {\n    //If the cursors are the same do nothing\n    if (mDataCursor == newCursor){\n      return;\n    }\n\n    //Swap the cursors\n    Cursor previous = mDataCursor;\n    mDataCursor = newCursor;\n\n    //Notify the Adapter to update the new data\n    if (mDataCursor != null){\n      this.notifyDataSetChanged();\n    }\n\n    //Close previous cursor\n    if (previous != null) {\n      previous.close();\n    }\n  }\n\n  private JobOffer getItem(int position) {\n    //To be implemented\n    return null;\n  }\n\n  @Override\n  public JobOfferCursorAdapter.MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    //To be implemented\n    return null;\n  }\n\n  @Override\n  public void onBindViewHolder(MyViewHolder holder, int position) {\n    //To be implemented\n  }\n\n  private class MyViewHolder..\n\n}\n```", "```kt\nprivate Object getItem(int position) {\n  mDataCursor.moveToPosition(position);\n  return JobOffer.createJobOfferfromCursor(mDataCursor);\n}\n```", "```kt\n@Override\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n  View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.row_job_offer, parent, false);\n  return new MyViewHolder(v);\n}\n\n@Override\npublic void onBindViewHolder(JobOfferCursorAdapter.MyViewHolder holder, int position) {\n  JobOffer jobOffer =  getItem(position);\n  holder.textViewName.setText(jobOffer.getTitle());\n  holder.textViewDescription.setText(jobOffer.getDescription());\n}\n\npublic class MyViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener{\n\n  public TextView textViewName;\n  public TextView textViewDescription;\n\n  public  MyViewHolder(View v){\n    super(v);\n    textViewName = (TextView)v.findViewById(R.id.rowJobOfferTitle);\n    textViewDescription = (TextView)v.findViewById(R.id.rowJobOfferDesc);\n    v.setOnClickListener(this);\n  }\n\n  @Override\n  public void onClick(View view) {\n    Intent intent = new Intent(view.getContext(), OfferDetailActivity.class);\n    JobOffer selectedJobOffer = getItem(getAdapterPosition());\n    intent.putExtra(\"job_title\", selectedJobOffer.getTitle());\n    intent.putExtra(\"job_description\",selectedJobOffer.getDescription());\n    intent.putExtra(\"job_image\",selectedJobOffer.getImageLink());\n    view.getContext().startActivity(intent);\n  }\n}\n```", "```kt\nmAdapter = new JobOfferCursorAdapter();\nmRecyclerView.setAdapter(mAdapter);\n\ngetLoaderManager().initLoader(MAA_LOADER, null, this);\n\nretrieveJobOffers();\n\nreturn view;\n```", "```kt\n@Override\npublic void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {\n  Log.d(\"ListFragment\", \"OnLoader Finished :\" + cursor.getCount());\n  mAdapter.changeCursor(cursor);\n}\n\n@Override\npublic void onLoaderReset(Loader<Cursor> loader) {\n  mAdapter.changeCursor(null);\n  Log.d(\"ListFragment\", \"OnLoader Reset :\");\n}\n```", "```kt\n07-25 16:45:42.796  32059-32059/com.packtpub.masteringandroidapp D/ListFragmentï¹• OnLoader Finished :0\n07-25 16:45:43.507  32059-32059/com.packtpub.masteringandroidapp D/ListFragmentï¹• Storing offers :7\n```", "```kt\ncase JOIN_TABLE:\nCursor cursor =  mDB.query(DBOpenHelper.OFFER_JOIN_COMPANY, projection,selection,selectionArgs,null,null,sortOrder);\ncursor.setNotificationUri(getContext().getContentResolver(), uri);\nreturn cursor;\n```", "```kt\nContext.getContentResolver().notifyChange(Uri.parse(MAAProvider.JOIN_TABLE_URI), null);\n```", "```kt\npublic void done(List<JobOffer> jobOffersList, ParseException e) {\n  Log.d(\"ListFragment\",\"Storing offers :\"+jobOffersList.size());\n  MasteringAndroidDAO.getInstance().clearDB(getActivity());\n  MasteringAndroidDAO.getInstance().storeOffers(getActivity(), jobOffersList);\n  getActivity().getContentResolver().notifyChange(Uri.parse (MAAProvider.JOIN_TABLE_URI), null);\n}\n```", "```kt\n<android.support.v4.widget.SwipeRefreshLayout  android:id=\"@+id/swipeRefreshLayout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\">\n  <android.support.v7.widget.RecyclerView android:id=\"@+id/my_recycler_view\" android:scrollbars=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" />\n</android.support.v4.widget.SwipeRefreshLayout>\n```", "```kt\nmSwipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swipeRefreshLayout);\nmSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n  @Override\n  public void onRefresh() {\n    retrieveJobOffers();\n  }\n});\n```", "```kt\n@Override\npublic void done(List<JobOffer> jobOffersList, ParseException e) {\n  Log.d(\"ListFragment\",\"Storing offers :\"+jobOffersList.size());\n  MasteringAndroidDAO.getInstance().clearDB(getActivity());\n  MasteringAndroidDAO.getInstance().storeOffers(getActivity(), jobOffersList);\n  getActivity().getContentResolver().notifyChange(Uri.parse(MAAProvider.JOIN_TABLE_URI), null);\n  mSwipeRefreshLayout.setRefreshing(false);\n}\n```", "```kt\n<resources>\n  <color name=\"orange\">#FF9900</color>\n  <color name=\"green\">#009900</color>\n  <color name=\"blue\">#000099</color> \n</resources>\n\nsetColorSchemeResources(R.color.orange, R.color.green, R.color.blue);\n```"]