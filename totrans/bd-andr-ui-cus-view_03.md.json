["```kt\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    Log.d(TAG, \"touch: \" + event); \n    return super.onTouchEvent(event); \n} \n```", "```kt\nD/com.packt.rrafols.customview.CircularActivityIndicator: touch: MotionEvent { action=ACTION_DOWN, actionButton=0, id[0]=0, x[0]=644.3645, y[0]=596.55804, toolType[0]=TOOL_TYPE_FINGER, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=30656461, downTime=30656461, deviceId=9, source=0x1002 }\n```", "```kt\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    Log.d(TAG, \"touch: \" + event); \n    return true; \n} \n```", "```kt\n...CircularActivityIndicator: touch: MotionEvent { action=ACTION_DOWN, ...CircularActivityIndicator: touch: MotionEvent { action=ACTION_UP, ...CircularActivityIndicator: touch: MotionEvent { action=ACTION_DOWN, ...CircularActivityIndicator: touch: MotionEvent { action=ACTION_MOVE, ...CircularActivityIndicator: touch: MotionEvent { action=ACTION_MOVE, ...CircularActivityIndicator: touch: MotionEvent { action=ACTION_MOVE, ...CircularActivityIndicator: touch: MotionEvent { action=ACTION_UP, ...CircularActivityIndicator: touch: MotionEvent { action=ACTION_DOWN,\n```", "```kt\nprivate boolean pressed; \n\npublic CircularActivityIndicator(Context context, AttributeSet attributeSet) { \n    ... \n    ... \n    pressed = false; \n} \n```", "```kt\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    Log.d(TAG, \"touch: \" + event); \n    switch(event.getAction()) { \n        case MotionEvent.ACTION_DOWN: \n            pressed = true; \n            return true; \n\n        case MotionEvent.ACTION_UP: \n            pressed = false; \n            return true; \n\n        default: \n            return false; \n    } \n} \n```", "```kt\nprivate static final int DEFAULT_FG_COLOR = 0xffff0000; \nprivate static final int PRESSED_FG_COLOR = 0xff0000ff; \n\n@Override \nprotected void onDraw(Canvas canvas) { \n    if (pressed) { \n        foregroundPaint.setColor(PRESSED_FG_COLOR); \n    } else { \n        foregroundPaint.setColor(DEFAULT_FG_COLOR); \n    } \n```", "```kt\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    Log.d(TAG, \"touch: \" + event); \n    switch(event.getAction()) { \n        case MotionEvent.ACTION_DOWN: \n            pressed = true; \n            invalidate(); \n            return true; \n\n        case MotionEvent.ACTION_UP: \n            pressed = false; \n            invalidate(); \n            return true; \n\n        default: \n            pressed = false; \n            invalidate(); \n            return false; \n    } \n} \n```", "```kt\nprivate void changePressedState(boolean pressed) { \n    this.pressed = pressed; \n    invalidate(); \n} \n\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    Log.d(TAG, \"touch: \" + event); \n    switch(event.getAction()) { \n        case MotionEvent.ACTION_DOWN: \n            changePressedState(true); \n            return true; \n\n        case MotionEvent.ACTION_UP: \n            changePressedState(false); \n            return true; \n\n        default: \n            changePressedState(false); \n            return false; \n    } \n} \n```", "```kt\nprivate float lastX, lastY; \n\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    switch(event.getAction()) { \n        case MotionEvent.ACTION_DOWN: \n            changePressedState(true); \n\n            lastX = event.getX(); \n            lastY = event.getY(); \n            return true; \n\n        case MotionEvent.ACTION_UP: \n            changePressedState(false); \n            return true; \n\n        case MotionEvent.ACTION_MOVE: \n            float dragX = event.getX(); \n            float dragY = event.getY(); \n\n            float dx = dragX - lastX; \n            float dy = dragY - lastY; \n\n            selectedAngle += (dx + dy) / 2; \n\n            lastX = dragX; \n            lastY = dragY; \n\n            invalidate(); \n            return true; \n\n        default: \n            return false; \n    } \n} \n```", "```kt\nprivate int computeAngle(float x, float y) { \n    x -= getWidth() / 2; \n    y -= getHeight() / 2; \n\n    int angle = (int) (180.0 * Math.atan2(y, x) / Math.PI) + 90; \n    return (angle > 0) ? angle : 360 + angle; \n} \n\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    switch(event.getAction()) { \n        case MotionEvent.ACTION_DOWN: \n            selectedAngle = computeAngle(event.getX(), event.getY()); \n            changePressedState(true); \n            return true; \n\n        case MotionEvent.ACTION_UP: \n            changePressedState(false); \n            return true; \n\n        case MotionEvent.ACTION_MOVE: \n            selectedAngle = computeAngle(event.getX(), event.getY()); \n            invalidate(); \n            return true; \n\n        default: \n            return false; \n    } \n} \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<RelativeLayout  \n\n    android:id=\"@+id/activity_main\" \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\" \n    android:padding=\"@dimen/activity_vertical_margin\" \n    tools:context=\"com.packt.rrafols.customview.MainActivity\"> \n\n    <ScrollView \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:layout_alignParentTop=\"true\" \n        android:layout_alignParentStart=\"true\" \n        android:layout_marginTop=\"13dp\"> \n\n        <LinearLayout \n            android:layout_width=\"match_parent\" \n            android:layout_height=\"wrap_content\" \n            android:orientation=\"vertical\"> \n\n            <TextView \n                android:layout_width=\"match_parent\" \n                android:layout_height=\"wrap_content\" \n                android:paddingTop=\"100dp\" \n                android:paddingBottom=\"100dp\" \n                android:text=\"Top\" \n                android:background=\"@color/colorPrimaryDark\" \n                android:textColor=\"@android:color/white\" \n                android:gravity=\"center\"/> \n\n            <com.packt.rrafols.customview.CircularActivityIndicator \n                android:layout_width=\"match_parent\" \n                android:layout_height=\"300dp\"/> \n\n            <TextView \n                android:layout_width=\"match_parent\" \n                android:layout_height=\"wrap_content\" \n                android:paddingTop=\"100dp\" \n                android:paddingBottom=\"100dp\" \n                android:text=\"Bottom\" \n                android:background=\"@color/colorPrimaryDark\" \n                android:textColor=\"@android:color/white\" \n                android:gravity=\"center\"/> \n        </LinearLayout> \n    </ScrollView> \n</RelativeLayout> \n```", "```kt\nprivate boolean computeAndSetAngle(float x, float y) { \n    x -= getWidth() / 2; \n    y -= getHeight() / 2; \n\n    double radius = Math.sqrt(x * x + y * y); \n    if(radius > circleSize/2) return false; \n\n    int angle = (int) (180.0 * Math.atan2(y, x) / Math.PI) + 90; \n    selectedAngle = ((angle > 0) ? angle : 360 + angle); \n    return true; \n} \n\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    boolean processed; \n\n    switch(event.getAction()) { \n        case MotionEvent.ACTION_DOWN: \n            processed = computeAndSetAngle(event.getX(), event.getY()); \n            if(processed) { \n                getParent().requestDisallowInterceptTouchEvent(true); \n                changePressedState(true); \n            } \n            return processed; \n\n        case MotionEvent.ACTION_UP: \n            getParent().requestDisallowInterceptTouchEvent(false); \n            changePressedState(false); \n            return true; \n\n        case MotionEvent.ACTION_MOVE: \n            processed = computeAndSetAngle(event.getX(), event.getY()); \n            invalidate(); \n            return processed; \n\n        default: \n            return false; \n    } \n} \n```", "```kt\nprivate GestureDetector gestureListener; \nprivate Scroller angleScroller; \n\npublic CircularActivityIndicator(Context context, AttributeSet attributeSet) { \n    super(context, attributeSet); \n\n    ... \n\n    selectedAngle = 280; \n    pressed = false; \n\n    angleScroller = new Scroller(context, null, true); \n    angleScroller.setFinalX(selectedAngle); \n\n    gestureListener = new GestureDetector(context, new\n    GestureDetector.OnGestureListener() { \n       boolean processed; \n\n       @Override \n       public boolean onDown(MotionEvent event) { \n           processed = computeAndSetAngle(event.getX(), event.getY()); \n           if (processed) { \n               getParent().requestDisallowInterceptTouchEvent(true); \n               changePressedState(true); \n               postInvalidate(); \n           } \n           return processed; \n       } \n\n       @Override \n       public void onShowPress(MotionEvent e) { \n\n       } \n\n       @Override \n       public boolean onSingleTapUp(MotionEvent e) { \n           endGesture(); \n           return false; \n       } \n\n       @Override \n       public boolean onScroll(MotionEvent e1, MotionEvent e2, float\n       distanceX, float distanceY) { \n           computeAndSetAngle(e2.getX(), e2.getY()); \n           postInvalidate(); \n           return true; \n       } \n\n       @Override \n       public void onLongPress(MotionEvent e) { \n           endGesture(); \n       } \n\n       @Override \n       public boolean onFling(MotionEvent e1, MotionEvent e2, float\n       velocityX, float velocityY) { \n           return false; \n       } \n   }); \n} \n```", "```kt\n@Override \npublic boolean onTouchEvent(MotionEvent event) { \n    return gestureListener.onTouchEvent(event); \n} \n```", "```kt\nprivate void endGesture() { \n    getParent().requestDisallowInterceptTouchEvent(false); \n    changePressedState(false); \n    postInvalidate(); \n} \n```", "```kt\nprivate boolean computeAndSetAngle(float x, float y) { \n    x -= getWidth() / 2; \n    y -= getHeight() / 2; \n\n    double radius = Math.sqrt(x * x + y * y); \n    if(radius > circleSize/2) return false; \n\n    int angle = (int) (180.0 * Math.atan2(y, x) / Math.PI) + 90; \n    angle = ((angle > 0) ? angle : 360 + angle); \n\n    if(angleScroller.computeScrollOffset()) { \n        angleScroller.forceFinished(true); \n    } \n\n    angleScroller.startScroll(angleScroller.getCurrX(), 0, angle -\n    angleScroller.getCurrX(), 0); \n    return true; \n} \n```", "```kt\n@Override \nprotected void onDraw(Canvas canvas) { \n    boolean notFinished = angleScroller.computeScrollOffset(); \n    selectedAngle = angleScroller.getCurrX(); \n\n    ... \n\n    if (notFinished) invalidate(); \n} \n```"]