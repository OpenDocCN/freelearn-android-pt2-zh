["```kt\n#r \"Microsoft.WindowsAzure.Storage\" \n\nusing System.Net; \nusing System.Text; \nusing Microsoft.WindowsAzure.Storage.Table; \n\nprivate const string PartitionKey = \"XamSnap\"; \n\npublic static async Task<HttpResponseMessage>  \n  Run(HttpRequestMessage req, CloudTable outputTable,  \n  TraceWriter log) \n{ \n  dynamic data = await req.Content.ReadAsAsync<object>(); \n  string userName = data?.userName; \n  string password = data?.password; \n\n  if (string.IsNullOrEmpty(userName) ||  \n    string.IsNullOrEmpty(password)) \n  { \n    return new HttpResponseMessage(HttpStatusCode.BadRequest); \n  } \n} \n\n```", "```kt\n//Let's hash all incoming passwords \npassword = Hash(password); \n\nvar operation = TableOperation.Retrieve<User>( \n  PartitionKey, userName); \nvar result = outputTable.Execute(operation); \nvar existing = result.Result as User; \nif (existing == null) \n{ \n  operation = TableOperation.Insert(new User \n  { \n    RowKey = userName, \n    PartitionKey = PartitionKey, \n    PasswordHash = password, \n  }); \n  result = outputTable.Execute(operation); \n\n  if (result.HttpStatusCode == (int)HttpStatusCode.Created) \n  { \n    return new HttpResponseMessage(HttpStatusCode.OK); \n  } \n  else \n  { \n    return new HttpResponseMessage( \n      (HttpStatusCode)result.HttpStatusCode); \n  } \n} \nelse if (existing.PasswordHash != password) \n{ \n  return new HttpResponseMessage(HttpStatusCode.Unauthorized); \n} \nelse \n{ \n  return new HttpResponseMessage(HttpStatusCode.OK); \n} \n\n```", "```kt\nprivate static string Hash(string password) \n{ \n  var crypt = new System.Security.Cryptography.SHA256Managed(); \n  var hash = new StringBuilder(); \n  byte[] crypto = crypt.ComputeHash( \n    Encoding.UTF8.GetBytes(password), 0,  \n    Encoding.UTF8.GetByteCount(password)); \n  foreach (byte b in crypto) \n  { \n    hash.Append(b.ToString(\"x2\")); \n  } \n  return hash.ToString(); \n} \n\npublic class User : TableEntity \n{ \n  public string PasswordHash { get; set; } \n} \n\n```", "```kt\n{ \n  \"userName\":\"test\", \n  \"password\":\"password\" \n} \n\n```", "```kt\npublic class AzureWebService : IWebService \n{ \n  #region IWebService implementation \n\n  public Task<User> Login(string username, string password) \n  { \n    throw new NotImplementedException(); \n  } \n\n  // -- More methods here --  \n\n  #endregion \n} \n\n```", "```kt\nusing System.Net.Http; \nusing System.Net.Http.Headers; \nusing System.Threading.Tasks; \nusing Newtonsoft.Json; \n\npublic class AzureWebService : IWebService \n{ \n  private const string BaseUrl =  \n    \"https://xamsnap.azurewebsites.net/api/\"; \n  private const string ContentType = \"application/json\"; \n  private readonly HttpClient httpClient = new HttpClient(); \n\n  // -- Existing code here -- \n} \n\n```", "```kt\nprivate async Task<HttpResponseMessage> Post( \n  string url, string code, object obj) \n{ \n  string json = JsonConvert.SerializeObject(obj); \n  var content = new StringContent(json); \n  content.Headers.ContentType =  \n    new MediaTypeHeaderValue(ContentType); \n\n  var response = await httpClient.PostAsync( \n    BaseUrl + url + \"?code=\" + code, content); \n  response.EnsureSuccessStatusCode(); \n  return response; \n} \n\nprivate async Task<T> Post<T>(string url, string code, object obj) \n{ \n  var response = await Post(url, code, obj); \n  string json = await response.Content.ReadAsStringAsync(); \n  return JsonConvert.DeserializeObject<T>(json); \n}} \n\n```", "```kt\npublic async Task<User> Login(string userName, string password) \n{ \n  await Post(\"login\", \"key_here\", new \n  { \n    userName, \n    password, \n  }); \n\n  return new User \n  { \n    Name = userName, \n    Password = password, \n  }; \n}} \n\n```", "```kt\n//Replace this line \nServiceContainer.Register<IWebService>( \n  () => new FakeWebService()); \n\n//With this line \nServiceContainer.Register<IWebService>( \n  () => new AzureWebService()); \n\n```", "```kt\n#r \"Microsoft.WindowsAzure.Storage\" \n\nusing System.Net; \nusing Microsoft.WindowsAzure.Storage.Table; \n\npublic async static Task<HttpResponseMessage> Run( \n  HttpRequestMessage req, IQueryable<TableEntity> inputTable, \n  TraceWriter log) \n{ \n    dynamic data = await req.Content.ReadAsAsync<object>(); \n    string userName = data?.userName; \n    if (string.IsNullOrEmpty(userName)) \n    { \n      return new HttpResponseMessage(HttpStatusCode.BadRequest); \n    } \n\n    var results = inputTable \n      .Where(r => r.PartitionKey == userName) \n      .Select(r => new { Name = r.RowKey }) \n      .ToList(); \n    return req.CreateResponse(HttpStatusCode.OK, results); \n} \n\n```", "```kt\n#r \"Microsoft.WindowsAzure.Storage\" \n\nusing System.Net; \nusing Microsoft.WindowsAzure.Storage.Table; \n\npublic async static Task<HttpResponseMessage> Run( \n  HttpRequestMessage req, CloudTable outputTable, TraceWriter log) \n{ \n  dynamic data = await req.Content.ReadAsAsync<object>(); \n  string userName = data?.userName; \n  string friendName = data?.friendName; \n  if (string.IsNullOrEmpty(userName) || \n    string.IsNullOrEmpty(friendName)) \n  { \n    return new HttpResponseMessage(HttpStatusCode.BadRequest); \n  } \n\n  var operation = TableOperation.InsertOrReplace(new TableEntity \n  { \n    PartitionKey = userName, \n    RowKey = friendName, \n  }); \n  var result = outputTable.Execute(operation); \n\n  return req.CreateResponse( \n    (HttpStatusCode)result.HttpStatusCode); \n} \n\n```", "```kt\npublic Task<User[]> GetFriends(string userName) \n{ \n  return Post<User[]>(\"friends\", \"key_here\", new \n  { \n    userName \n  }); \n}\npublic async Task<User> AddFriend( \n  string userName, string friendName) \n{ \n  await Post(\"addfriend\", \"key_here\", new \n  { \n    userName, \n    friendName \n  }); \n\n  return new User \n  { \n    Name = friendName \n  }; \n} \n\n```", "```kt\n#r \"Microsoft.WindowsAzure.Storage\" \n\nusing System.Net; \nusing Microsoft.WindowsAzure.Storage.Table; \n\npublic async static Task<HttpResponseMessage> Run( \n  HttpRequestMessage req, IQueryable<Conversation> inputTable, \n  TraceWriter log) \n{ \n  dynamic data = await req.Content.ReadAsAsync<object>(); \n  string userName = data?.userName; \n  if (string.IsNullOrEmpty(userName)) \n  { \n    return new HttpResponseMessage(HttpStatusCode.BadRequest); \n  } \n\n  var results = inputTable \n    .Where(r => r.PartitionKey == userName) \n    .Select(r => new { Id = r.RowKey, UserName = r.UserName }) \n    .ToList(); \n  return req.CreateResponse(HttpStatusCode.OK, results); \n} \n\npublic class Conversation : TableEntity \n{ \n  public string UserName { get; set; } \n} \n\n```", "```kt\n#r \"Microsoft.WindowsAzure.Storage\" \n\nusing System.Net; \nusing Microsoft.WindowsAzure.Storage.Table; \n\npublic async static Task<HttpResponseMessage> Run( \n  HttpRequestMessage req, IQueryable<Message> inputTable, \n  TraceWriter log) \n{ \n  dynamic data = await req.Content.ReadAsAsync<object>(); \n  string conversation = data?.conversation; \n  if (string.IsNullOrEmpty(conversation)) \n  { \n    return new HttpResponseMessage(HttpStatusCode.BadRequest); \n  } \n\n  var results = inputTable \n    .Where(r => r.PartitionKey == conversation) \n    .Select(r => new { Id = r.RowKey,  \n      UserName = r.UserName, Text = r.Text }) \n    .ToList(); \n  return req.CreateResponse(HttpStatusCode.OK, results); \n} \n\npublic class Message : TableEntity \n{ \n  public string UserName { get; set; } \n  public string Text { get; set; } \n} \n\n```", "```kt\n#r \"Microsoft.WindowsAzure.Storage\" \n\nusing System.Net; \nusing Microsoft.WindowsAzure.Storage.Table; \n\npublic async static Task<HttpResponseMessage> Run( \n  HttpRequestMessage req, CloudTable outputTable, TraceWriter log) \n{ \n  dynamic data = await req.Content.ReadAsAsync<object>(); \n  if (data == null) \n    return req.CreateResponse(HttpStatusCode.BadRequest); \n\n  var operation = TableOperation.InsertOrReplace(new Message \n  { \n    PartitionKey = data.Conversation, \n    RowKey = data.Id, \n    UserName = data.UserName, \n    Text = data.Text, \n  }); \n  var result = outputTable.Execute(operation); \n\n  return req.CreateResponse( \n    (HttpStatusCode)result.HttpStatusCode); \n} \n\npublic class Message : TableEntity \n{ \n    public string UserName { get; set; } \n    public string Text { get; set; } \n} \n\n```", "```kt\npublic Task<Conversation[]> GetConversations(string userName) \n{ \n  return Post<Conversation[]>(\"conversations\", \"key_here\", new \n  { \n    userName \n  }); \n} \n\npublic Task<Message[]> GetMessages(string conversation) \n{ \n  return Post<Message[]>(\"messages\", \"key_here\", new \n  { \n    conversation \n  }); \n} \n\npublic async Task<Message> SendMessage(Message message) \n{ \n  message.Id = Guid.NewGuid().ToString(\"N\"); \n  await Post(\"sendmessage\", \"key_here\", message); \n  return message; \n} \n\n```", "```kt\npublic interface INotificationService \n{ \n  void Start(string userName); \n  void SetToken(object deviceToken); \n} \n\n```", "```kt\n//At the top of the class \nreadonly INotificationService notificationService =  \n  ServiceContainer.Resolve<INotificationService>();\n\n//Later, after a successful login \nnotificationService.Start(UserName); \n\n```", "```kt\npublic class AppleNotificationService : INotificationService \n{ \n  private readonly CultureInfo enUS =  \n    CultureInfo.CreateSpecificCulture(\"en-US\"); \n  private SBNotificationHub hub; \n  private string userName; \n} \n\n```", "```kt\npublic void Start(string userName) \n{ \n  this.userName = userName; \n\n  var pushSettings =  \n    UIUserNotificationSettings.GetSettingsForTypes( \n    UIUserNotificationType.Alert |  \n    UIUserNotificationType.Badge |  \n    UIUserNotificationType.Sound, null); \n\n  UIApplication.SharedApplication \n    .RegisterUserNotificationSettings(pushSettings); \n} \n\n```", "```kt\npublic void SetToken(object deviceToken) \n{ \n    if (hub == null) \n    { \n        hub = new SBNotificationHub(\"yourconnection\", \"xamsnap\"); \n    } \n\n    string template = \"{\"aps\": {\"alert\": \"$(message)\"}}\"; \n    var tags = new NSSet(userName); \n    hub.RegisterTemplateAsync((NSData)deviceToken, \"iOS\",  \n      template, DateTime.Now.AddDays(90).ToString(enUS), tags, \n      errorCallback => \n      { \n        if (errorCallback != null) \n          Console.WriteLine(\"Push Error: \" + errorCallback); \n      }); \n}} \n\n```", "```kt\npublic override void DidRegisterUserNotificationSettings( \n  UIApplication application,  \n  UIUserNotificationSettings notificationSettings) \n{ \n  application.RegisterForRemoteNotifications(); \n} \n\npublic override void RegisteredForRemoteNotifications( \n  UIApplication application, NSData deviceToken) \n{ \n  var notificationService =  \n    ServiceContainer.Resolve<INotificationService>(); \n  notificationService.SetToken(deviceToken); \n} \n\npublic override void FailedToRegisterForRemoteNotifications( \n  UIApplication application, NSError error) \n{ \n  Console.WriteLine(\"Push Error: \" + error.LocalizedDescription); \n} \n\n```", "```kt\nServiceContainer.Register<INotificationService>( \n  () => new AppleNotificationService()); \n\n```", "```kt\n#r \"Microsoft.Azure.NotificationHubs\"  \nusing Microsoft.Azure.NotificationHubs; \n\n```", "```kt\nprivate async static Task SendPush( \n  string userName, string message) \n{ \n  var dictionary = new Dictionary<string, string>(); \n  dictionary[\"message\"] = userName + \": \" + message; \n\n  var hub = NotificationHubClient \n    .CreateClientFromConnectionString(\"yourconnection \"xamsnap\"); \n  await hub.SendTemplateNotificationAsync(dictionary, userName); \n} \n\n```", "```kt\n//Place this right before returning the HTTP response \nawait SendPush((string)data.UserName, (string)data.Text); \n\n```", "```kt\npublic static class Constants \n{ \n    public const string ProjectId = \"yourprojectid\"; \n    public const string ConnectionString = \"yourconnectionstring\"; \n    public const string HubName = \"xamsnap\"; \n} \n\n```", "```kt\n[assembly: Permission(Name =  \n  \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")] \n[assembly: UsesPermission(Name =  \n  \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")] \n[assembly: UsesPermission(Name =  \n  \"com.google.android.c2dm.permission.RECEIVE\")] \n[assembly: UsesPermission( \n  Name = \"android.permission.GET_ACCOUNTS\")] \n[assembly: UsesPermission( \n  Name = \"android.permission.WAKE_LOCK\")] \n\n```", "```kt\n[BroadcastReceiver(Permission =  \n  Gcm.Client.Constants.PERMISSION_GCM_INTENTS)] \n[IntentFilter(new string[] {  \n  Gcm.Client.Constants.INTENT_FROM_GCM_MESSAGE },  \n  Categories = new string[] { \"@PACKAGE_NAME@\" })] \n[IntentFilter(new string[] {  \n  Gcm.Client.Constants.INTENT_FROM_GCM_REGISTRATION_CALLBACK },  \n  Categories = new string[] { \"@PACKAGE_NAME@\" })] \n[IntentFilter(new string[] {  \n  Gcm.Client.Constants.INTENT_FROM_GCM_LIBRARY_RETRY },  \n  Categories = new string[] { \"@PACKAGE_NAME@\" })] \npublic class PushBroadcastReceiver :  \n  GcmBroadcastReceiverBase<PushHandlerService> \n{ } \n\n```", "```kt\n[Service] \npublic class PushHandlerService : GcmServiceBase  \n{ \n  public PushHandlerService() : base (PushConstants.ProjectNumber)  \n  { } \n} \n\n```", "```kt\nprotected async override void OnRegistered( \n  Context context, string registrationId) \n{     \n  var notificationService =  \n    ServiceContainer.Resolve<INotificationService>(); \n  notificationService.SetToken(registrationId); \n} \n\n```", "```kt\nprotected override void OnMessage( \n  Context context, Intent intent) \n{ \n  string message = intent.Extras.GetString(\"message\"); \n  if (!string.IsNullOrEmpty(message)) \n  { \n    var notificationManager = (NotificationManager) \n      GetSystemService(Context.NotificationService); \n\n    var notification = new NotificationCompat.Builder(this) \n      .SetContentIntent( \n        PendingIntent.GetActivity(this, 0,  \n          new Intent(this, typeof(LoginActivity)), 0)) \n      .SetSmallIcon(Android.Resource.Drawable.SymActionEmail) \n      .SetAutoCancel(true) \n      .SetContentTitle(\"XamSnap\") \n      .SetContentText(message) \n      .Build(); \n    notificationManager.Notify(1, notification); \n  } \n} \n\n```", "```kt\nprotected override void OnUnRegistered( \n  Context context, string registrationId) \n{ \n  Console.WriteLine(\"GCM unregistered!\"); \n} \n\nprotected override void OnError ( \n  Context context, string errorId) \n{ \n  Console.WriteLine(\"GCM error: \" + errorId); \n} \n\n```", "```kt\npublic class GoogleNotificationService : INotificationService \n{ \n  readonly Context context; \n  NotificationHub hub; \n  string userName; \n\n  public GoogleNotificationService(Context context) \n  { \n    this.context = context; \n  } \n\n  public void SetToken(object deviceToken) \n  { \n    hub = new NotificationHub( \n      Constants.HubName, Constants.ConnectionString, context); \n    try \n    { \n      string template = \"{\"data\":{\"message\":\"$(message)\"}}\"; \n      hub.RegisterTemplate((string)deviceToken,  \n        \"Android\", template, userName); \n    } \n    catch (Exception exc) \n    { \n      Console.WriteLine(\"RegisterTemplate Error: \" + exc.Message); \n    } \n  } \n\n  public void Start(string userName) \n  { \n    this.userName = userName; \n    GcmClient.CheckDevice(context); \n    GcmClient.CheckManifest(context); \n    GcmClient.Register(context, Constants.ProjectId); \n  } \n} \n\n```", "```kt\nServiceContainer.Register<INotificationService>( \n  () => new GoogleNotificationService(this)); \n\n```"]