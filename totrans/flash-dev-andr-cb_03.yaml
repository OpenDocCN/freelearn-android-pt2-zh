- en: 'Chapter 3. Movement through Space: Accelerometer and Geolocation Sensors'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 空间移动：加速度计和地理定位传感器
- en: 'This chapter will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将涵盖以下内容：
- en: Detecting whether or not an Android device supports the accelerometer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测Android设备是否支持加速度计
- en: Detecting Android device movement in 3D space
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测Android设备在3D空间中的移动
- en: Adjusting the accelerometer sensor update interval
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整加速度计传感器更新间隔
- en: Updating display object position through accelerometer sensor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过加速度计传感器更新显示对象位置
- en: Switching between portrait and landscape based upon device tilt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据设备倾斜在竖屏和横屏之间切换
- en: Detecting whether or not a device supports a geolocation sensor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测设备是否支持地理定位传感器
- en: Detecting whether the geolocation sensor has been disabled by the user
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测用户是否禁用了地理定位传感器
- en: Retrieving device geolocation sensor data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取设备地理定位传感器数据
- en: Adjusting the geolocation sensor update interval
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整地理定位传感器更新间隔
- en: Retrieving map data through geolocation coordinates
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过地理坐标获取地图数据
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Android devices are not only equipped with touch panels, virtual keyboards,
    and other input mechanisms, but they also include sensors such as accelerometer
    for detecting change in 3D space, and geolocation on both a fine (satellite) and
    coarse (triangulation) level. This chapter will examine how to tap into these
    sensors in meaningful ways within Flash platform-based Android applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Android设备不仅配备了触摸面板、虚拟键盘和其他输入机制，还包括用于检测3D空间变化的加速度计传感器，以及细粒度（卫星）和粗粒度（三角测量）的地理定位。本章将探讨如何在基于Flash平台的Android应用中有意义地利用这些传感器。
- en: All of the recipes in this chapter are represented as pure ActionScript 3 classes
    and are not dependent upon external libraries or the Flex framework. Therefore,
    we will be able to use these examples in any IDE we wish.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有内容都表示为纯ActionScript 3类，并不依赖于外部库或Flex框架。因此，我们可以将这些示例用于我们希望的任何IDE中。
- en: Detecting whether or not an Android device supports the accelerometer
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测Android设备是否支持加速度计
- en: When developing projects which target the Android operating system, it is always
    a good idea to make sure that certain sensors, such as the accelerometer, are
    actually supported on the device. In the case of an Android phone, this will probably
    always be the case, but we should never assume the capabilities of any device.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在针对Android操作系统开发项目时，确保设备支持某些传感器（如加速度计）总是一个好主意。在Android手机的情况下，这可能总是如此，但我们绝不能假设任何设备的功能。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We will need to use Accelerometer API classes to detect whether or not an accelerometer
    is supported:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用加速度计API类来检测是否支持加速度计：
- en: 'First, import the following classes into your project:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到你的项目中：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Declare a `TextField` and `TextFormat` object pair to allow visible output
    upon the device:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`TextField`和`TextFormat`对象对，以允许在设备上输出可见内容：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add it to the
    `DisplayList`. Here, we create a method to perform all of these actions for us:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的`TextField`，应用`TextFormat`，并将其添加到`DisplayList`中。这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, simply invoke `Accelerometer.isSupported` to confirm support for this
    capability:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，只需调用`Accelerometer.isSupported`来确认对此功能的支持：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This invocation will return a Boolean value of `true` or `false`, indicating
    device support for this sensor:![How to do it...](img/1420_03_05.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此调用将返回一个布尔值`true`或`false`，表示设备对此传感器的支持情况：![如何实现...](img/1420_03_05.jpg)
- en: How it works...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Detecting whether the device includes an accelerometer sensor will determine
    whether or not a user can effectively utilize an application that is dependent
    upon such data. If our query returns as false, then it is up to us to notify the
    user or provide some sort of alternative to gathering accelerometer data from
    the device as a form of interaction.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 检测设备是否包含加速度计传感器将决定用户是否能有效利用依赖于此类数据的应用程序。如果我们的查询返回为false，那么我们有责任通知用户或提供某种替代方式，以从设备收集加速度数据作为互动形式。
- en: Detecting Android device movement in 3D space
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测Android设备在3D空间中的移动
- en: The `Accelerometer` class works in tandem with the device's motion sensor to
    measure and report movement and acceleration coordinates as the device is moved
    through 3D space. To measure this data and react to these measurements, we must
    perform certain actions to allow the gathering of accelerometer data within our
    application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Accelerometer`类与设备的动作传感器协同工作，在设备在3D空间移动时测量并报告运动和加速度坐标。为了测量这些数据并对这些测量做出反应，我们必须执行某些操作，以便在我们的应用程序中收集加速度数据。'
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to employ certain ActionScript classes to allow monitoring of
    accelerometer feedback:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用某些ActionScript类，以便监控加速度传感器的反馈：
- en: 'First, import the following classes into your project:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到你的项目中：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Declare a `TextField` and `TextFormat` object pair to allow visible output
    upon the device, along with an `Accelerometer` object:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`TextField`和一个`TextFormat`对象对，以便在设备上输出可见内容，以及一个`Accelerometer`对象：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add it to the
    `DisplayList`. Here, we create a method to perform all of these actions for us:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的`TextField`，应用一个`TextFormat`，并将其添加到`DisplayList`中。在这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We must now instantiate an `Accelerometer` object to register an `AccelerometerEvent`
    listener to. In this case, we will have it invoke a function called `movementDetected.`
    We also first check to see whether or not the `Accelerometer API` is actually
    supported on the device by checking the `Accelerometer.isSupported` property:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在必须实例化一个`Accelerometer`对象，以便注册一个`AccelerometerEvent`监听器。在这种情况下，我们将它调用一个名为`movementDetected`的函数。我们还首先检查设备是否支持`Accelerometer
    API`，通过检查`Accelerometer.isSupported`属性：
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We are now able to monitor and respond to device movement through the `movementDetected`
    method:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在能够通过`movementDetected`方法监控并响应设备移动：
- en: '[PRE8]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The output will look similar to this:![How to do it...](img/1420_03_06.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将类似于这样：![如何操作...](img/1420_03_06.jpg)
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: 'By registering an event listener to `AccelerometerEvent.UPDATE` we are able
    to detect changes reported by the movement sensor on an Android device. There
    are four properties that are reported back through this event: `accelerationX,
    accelerationY, accelerationZ`, and `timestamp`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过注册一个事件监听器到`AccelerometerEvent.UPDATE`，我们能够检测到Android设备上的动作传感器报告的变化。有四个属性通过此事件报告回来：`accelerationX,
    accelerationY, accelerationZ`和`timestamp`。
- en: '`accelerationX:` A `Number` which measures acceleration along the x-axis, which
    runs from left to right when the device is placed in an upright position. A positive
    acceleration is indicated when the device is moved to the right. Leftward movement
    is presented as a negative number.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accelerationX:` 一个`Number`类型的值，它测量沿着x轴的加速度，当设备直立放置时，x轴从左到右。当设备向右移动时，表示为正加速度。向左移动则表示为负数。'
- en: '`accelerationY:` A `Number` which measures acceleration along the y-axis, which
    runs from bottom to top when the device is placed in an upright position. A positive
    acceleration is indicated when the device is moved upwards. Downward movement
    is presented as a negative number.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accelerationY:` 一个`Number`类型的值，它测量沿着y轴的加速度，当设备直立放置时，y轴从下到上。当设备向上移动时，表示为正加速度。向下移动则表示为负数。'
- en: '`accelerationZ:` A `Number` which measures acceleration along the z-axis, which
    runs perpendicular to the face of the device. A positive acceleration is indicated
    when the device is moved so that the face points skyward. Movement positioning
    the face at an earthward angle will be represented as a negative number.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accelerationZ:` 一个`Number`类型的值，它测量沿着z轴的加速度，z轴垂直于设备表面。当设备移动使得表面朝向天空时，表示为正加速度。将表面定位在地面上方角度时，将表示为负数。'
- en: '`timestamp:` An `int` which measures the amount of milliseconds since the application
    has been initialized. This can be used to track update events over time.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestamp:` 一个`int`类型的值，它测量自应用程序初始化以来经过的毫秒数。这可以用来随时间跟踪更新事件。'
- en: There's more...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The accelerometer is often used when creating balance-based games on Android
    such as having a ball travel through a maze based upon device tilt, but we can
    use this data in any way we wish to monitor changes in space, tilt, or other movement-based
    actions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度传感器在创建基于平衡的Android游戏时经常被使用，例如让一个球基于设备倾斜通过迷宫，但我们也可以以任何我们想要的方式来使用这些数据，以监测空间、倾斜或基于其他动作的变化。
- en: Adjusting the accelerometer sensor update interval
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整加速度传感器更新间隔
- en: While the default accelerometer sensor update interval may be just fine for
    most applications, what if we would like to speed up or slow down this interval
    for a specific purpose?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数应用程序可能默认的加速度计传感器更新间隔就足够了，但如果我们要针对特定目的加快或减慢这个间隔该怎么办？
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to change the accelerometer sensor update interval using methods
    included with the `Accelerometer` class:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`Accelerometer`类中包含的方法来更改加速度计传感器更新间隔：
- en: 'First, import the following classes into your project:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到您的项目中：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We'll now declare a number of objects to use in the example. First, a `TextField`
    and `TextFormat` object pair to allow visible output upon the device, along with
    an `Accelerometer` object.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将声明一些要在示例中使用的对象。首先，一个`TextField`和一个`TextFormat`对象对，以便在设备上允许可见输出，以及一个`Accelerometer`对象。
- en: Then we will need to also employ a `Number` to keep track of our interval amount.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们还需要使用一个`Number`来跟踪我们的间隔量。
- en: Also needed are two `Sprite` objects for the user to interact with.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还需要两个`Sprite`对象供用户与之交互。
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add it to the
    `DisplayList`. Here, we create a method to perform all of these actions for us:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置`TextField`，应用`TextFormat`，并将其添加到`DisplayList`中。这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To detect user input through touch, we will create two `Sprite` instances and
    add each to the `Stage`. To differentiate between `Sprite` instances in any event
    listener we register with these objects, we will provide a unique `name` property
    upon each `Sprite:`
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了通过触摸检测用户输入，我们将创建两个`Sprite`实例并将每个实例添加到`Stage`中。为了在我们与这些对象注册的任何事件监听器中区分`Sprite`实例，我们将为每个`Sprite`提供一个唯一的`name`属性：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We also first check to see whether or not the Accelerometer API is actually
    supported on the device by checking the `Accelerometer.isSupported` property.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们还要检查设备是否实际支持加速度计API，通过检查`Accelerometer.isSupported`属性。
- en: We will then need to set the specific input mode for the multitouch APIs to
    support touch input by setting `Multitouch.inputMode` to the `MultitouchInputMode.TOUCH_POINT`
    constant.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要将多点触控API的特定输入模式设置为通过将`Multitouch.inputMode`设置为`MultitouchInputMode.TOUCH_POINT`常量来支持触摸输入。
- en: Each Sprite will register a `TouchEvent.TOUCH_TAP` listener so that it will
    be able to invoke a method to shift the update interval upon touch tap.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个Sprite将注册一个`TouchEvent.TOUCH_TAP`监听器，这样它就能够通过触摸轻敲来调用一个方法来改变更新间隔。
- en: Now, we can instantiate an `Accelerometer` object and invoke the `setRequestedUpdateInterval`
    method, which requires an interval measured in milliseconds to be passed into
    the method call.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以实例化一个`Accelerometer`对象并调用`setRequestedUpdateInterval`方法，此方法调用需要传入以毫秒为单位的间隔。
- en: 'We''ll also register an event listener to respond to any device movement:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将注册一个事件监听器以响应任何设备移动：
- en: '[PRE13]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our `shiftInterval` method will now respond to any touch taps intercepted by
    the two `Sprite` boxes we created. We are checking to see what `name` property
    has been given to each `Sprite` and shift the `accelerometerInterval` accordingly:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`shiftInterval`方法现在将响应我们创建的两个`Sprite`框拦截的任何触摸轻敲。我们将检查每个`Sprite`被赋予的`name`属性，并相应地调整`accelerometerInterval`：
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The accelerometer sensor update interval will now invoke the following function,
    which will output detected movement and interval data through our `TextField:`
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加速度计传感器更新间隔现在将调用以下函数，该函数将通过我们的`TextField`输出检测到的移动和间隔数据：
- en: '[PRE15]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The result will appear similar to the following:![How to do it...](img/1420_03_07.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将类似于以下内容：![如何操作...](img/1420_03_07.jpg)
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By setting the accelerometer update interval through `setRequestedUpdateInterval()`,
    we are able to adjust this interval based upon circumstances in our particular
    application. In the preceding demonstration class, we have rendered two `Sprites`
    acting as an increase and decrease `TouchEvent.TOUCH_TAP` event receptors. Tapping
    upon these `DisplayObjects` will either increase or decrease the accelerometer
    update interval, which is monitored through our `TextField` on the screen.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`setRequestedUpdateInterval()`设置加速度计更新间隔，我们能够根据特定应用程序中的情况调整此间隔。在前面演示类中，我们渲染了两个作为增加和减少`TouchEvent.TOUCH_TAP`事件受体的`Sprites`。轻敲这些`DisplayObjects`将会增加或减少加速度计更新间隔，这个间隔通过屏幕上的`TextField`进行监控。
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Note that the default accelerometer sensor update interval is dependent upon
    whichever device is running our application. This strategy can also be used to
    try and even out the interval across devices.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认的加速度传感器更新间隔取决于运行我们应用程序的设备。这种策略也可以用来尝试平衡不同设备间的间隔。
- en: Updating display object position through accelerometer events
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过加速度事件更新显示对象位置
- en: The accelerometer sensor can be used when creating all sorts of games or applications
    for an Android device. One of the more frequent uses of this data is to update
    the position of a `DisplayObject` on the `Stage` in response to accelerometer
    update event data.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Android 设备上的各种游戏或应用程序时可以使用加速度传感器。这种数据更频繁的用途之一是响应加速度更新事件数据，更新 `Stage` 上 `DisplayObject`
    的位置。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to employ certain ActionScript classes to allow monitoring of
    accelerometer feedback through a `DisplayObject` instance. In this example, we
    will employ a simple `Shape` object and change its position based upon this data:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用某些 ActionScript 类，以便通过 `DisplayObject` 实例监听加速度反馈。在这个例子中，我们将使用一个简单的 `Shape`
    对象，根据这些数据改变其位置：
- en: 'First, import the following classes into your project:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到你的项目中：
- en: '[PRE16]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We'll now declare a number of objects to use in the example. First, a `TextField`
    and `TextFormat` object pair, along with a `Shape` to allow visible output upon
    the device.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将声明一些要在示例中使用的对象。首先，一个 `TextField` 和 `TextFormat` 对象对，以及一个 `Shape` 以便在设备上显示输出。
- en: 'We must also declare an `Accelerometer` object in order to monitor and respond
    to device movement:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还必须声明一个 `Accelerometer` 对象，以便监听和响应设备移动：
- en: '[PRE17]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add it to the
    `DisplayList`. Here, we create a method to perform all of these actions for us:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置 `TextField`，应用 `TextFormat`，并将其添加到 `DisplayList` 中。这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE18]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Create a new `Shape` object called `box`, draw a rectangle with the `Graphics`
    API, and add it to the `Stage:`
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `box` 的新 `Shape` 对象，使用 `Graphics` API 绘制一个矩形，并将其添加到 `Stage` 上：
- en: '[PRE19]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We must now instantiate an `Accelerometer` object to register an `AccelerometerEvent`
    listener to. In this case, we will have it invoke a function called `movementDetected`.
    We also first check to see whether or not the Accelerometer API is actually supported
    on the device by checking the `Accelerometer.isSupported` property:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在必须实例化一个 `Accelerometer` 对象，以便注册一个 `AccelerometerEvent` 监听器。在这种情况下，我们将让它调用一个名为
    `movementDetected` 的函数。我们还要首先检查设备是否支持 Accelerometer API，通过检查 `Accelerometer.isSupported`
    属性：
- en: '[PRE20]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We are now able to monitor and respond to device movement through the `movementDetected`
    method by adjusting the x and y coordinates of our `Shape` object, based upon
    the `accelerationX` and `accelerationY` data reported through the `AccelerometerEvent.UPDATE`
    data being reported.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过调整 `Shape` 对象的 x 和 y 坐标，通过 `movementDetected` 方法监听和响应设备移动，基于 `AccelerometerEvent.UPDATE`
    事件报告的 `accelerationX` 和 `accelerationY` 数据。
- en: In the following function, we are going to perform a number of checks to be
    sure our `Shape` does not move off of the `Stage` as the device is tilted. We
    will also output the x and y properties of our `Sprite` to a `TextField`
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下函数中，我们将执行一系列检查，以确保当设备倾斜时 `Shape` 不会移出 `Stage`。我们还将输出 `Sprite` 的 x 和 y 属性到一个
    `TextField`
- en: '[PRE21]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The resulting output will appear similar to the following:![How to do it...](img/1420_03_08.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果输出将类似于以下内容：![如何操作...](img/1420_03_08.jpg)
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By registering an event listener to `AccelerometerEvent.UPDATE` we are able
    to detect changes reported by the movement sensor on an Android device. Using
    ActionScript, we can then respond to these changes in movement and tilt, as the
    code example demonstrates, by moving a `DisplayObject` around the screen based
    upon the reported sensor data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过注册 `AccelerometerEvent.UPDATE` 事件监听器，我们可以检测到 Android 设备上运动传感器报告的变化。使用 ActionScript，我们可以对这些运动和倾斜的变化做出响应，如代码示例所示，根据报告的传感器数据在屏幕上移动
    `DisplayObject`。
- en: In the example, not only are we moving the `Shape` object around the screen,
    but we are also being mindful to never allow the shape to leave the screen through
    a number of conditional statements taking into account object width, height, and
    detected screen dimensions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们不仅在屏幕上移动 `Shape` 对象，同时通过多个条件语句考虑对象的宽度、高度和检测到的屏幕尺寸，确保形状不会离开屏幕。
- en: Switching between portrait and landscape based upon device tilt
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据设备倾斜切换横屏和竖屏
- en: Most Android devices will allow both portrait and landscape views for the user
    to interact with. The portrait mode is enabled when the device is held with the
    y-axis aligned from top to bottom, while landscape mode is enabled by holding
    the device so that the y-axis is measured from left to right. By using data reported
    from the accelerometer sensor, we can know when these movements have occurred
    and respond to them within our application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Android设备允许用户以纵向和横向视图交互。当设备以y轴从上到下对齐时，启用纵向模式；而通过将设备持握以y轴从左到右测量时，启用横向模式。通过使用加速度计传感器报告的数据，我们可以知道这些移动何时发生并在我们的应用程序内响应该移动。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to employ the `Accelerometer` API to detect device rotation and
    tilt:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`Accelerometer` API来检测设备旋转和倾斜：
- en: 'First, import the following classes into your project:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到你的项目中：
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We'll now declare a number of objects to use in the example. First, a `TextField`
    and `TextFormat` object pair to allow visible output upon the device.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将声明一些在示例中要使用的对象。首先，一个`TextField`和`TextFormat`对象对，以允许在设备上输出可见内容。
- en: 'We must also declare an `Accelerometer` object in order to monitor and respond
    to device movement:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还必须声明一个`Accelerometer`对象，以便监控并响应用户设备的移动：
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add it to the
    `DisplayList`. Here, we create a method to perform all of these actions for us:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将设置我们的`TextField`，应用一个`TextFormat`，并将其添加到`DisplayList`中。这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE24]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we must create an `Accelerometer` instance and assign an event listener
    of type `AccelerometerEvent.UPDATE` to it. This will trigger the `movementDetected`
    method whenever a change in accelerometer data is detected. We also first check
    to see whether or not the Accelerometer API is actually supported on the device
    by checking the `Accelerometer.isSupported` property:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须创建一个`Accelerometer`实例，并为其分配一个类型为`AccelerometerEvent.UPDATE`的事件监听器。每当检测到加速度计数据发生变化时，这将触发`movementDetected`方法。我们还首先检查设备是否实际支持加速度计API，通过检查`Accelerometer.isSupported`属性：
- en: '[PRE25]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Within our `movementDetected` method, we simply need to monitor the acceleration
    data reported by the sensor and adjust our application accordingly. We''ll also
    output data to our `TextField` to monitor device movement:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`movementDetected`方法中，我们只需监控传感器报告的加速度数据，并相应地调整我们的应用程序。我们还将输出数据到我们的`TextField`以监控设备移动：
- en: '[PRE26]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The result will appear similar to the following:![How to do it...](img/1420_03_09.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将类似于以下这样：![如何操作...](img/1420_03_09.jpg)
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As the accelerometer movement is detected within our application, the `movementDetected`
    method will report data regarding the `x, y`, and `z` axis of the device. If we
    monitor the acceleration value that is reported, we can respond to device tilt
    in a way that takes into account the vertical orientation and thus know whether
    or not to adjust elements on the `Stage` for portrait or landscape viewing.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序检测到加速度移动时，`movementDetected`方法将报告有关设备`x, y`和`z`轴的数据。如果我们监控所报告的加速度值，我们可以以考虑垂直方向的方式响应用户设备的倾斜，从而知道是否需要调整`Stage`上的元素以适应纵向或横向观看。
- en: There's more...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: In this example, we are using pure ActionScript to detect accelerometer senor
    data and respond to it. When using the mobile Flex framework in developing our
    application, we can allow the framework to handle device orientation for us when
    setting up our **Flex Mobile Project** by choosing the **Automatically reorient**
    option in the **Mobile Settings** dialog.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用纯ActionScript来检测加速度计传感器数据并响应该数据。在开发应用程序时使用移动Flex框架，通过在**Flex Mobile
    Project**设置中选择**Mobile Settings**对话框中的**Automatically reorient**（自动重新定向）选项，我们可以让框架处理设备方向。
- en: '![There''s more...](img/1420_03_01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1420_03_01.jpg)'
- en: See also…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: '[Chapter 6](ch06.html "Chapter 6. Structural Adaptation: Handling Device Layout
    and Scaling"), *Structural Adaptation: Handling Device Layout and Scaling*, also
    has more information on adapting to device orientation changes using alternative
    detection methods.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章. 结构适应性：处理设备布局和缩放")，*结构适应性：处理设备布局和缩放*，也包含有关使用其他检测方法适应设备方向变化的信息。'
- en: Detecting whether or not a device supports a geolocation sensor
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测设备是否支持地理定位传感器
- en: When developing projects which target the Android operating system, it is always
    a good idea to make sure that certain sensors, such as the geolocation sensor,
    are actually supported on the device. In the case of an Android device, this will
    probably always be the case, but we should never assume the capabilities of any
    device.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在针对Android操作系统开发项目时，确保某些传感器（如地理定位传感器）实际上在设备上得到支持总是一个好主意。在Android设备的情况下，这可能总是如此，但我们绝不应假设任何设备的功能。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to use internal classes to detect whether or not the geolocation
    API is supported:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用内部类来检测地理定位API是否得到支持：
- en: 'First, import the following classes into your project:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到您的项目中：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Declare a `TextField` and `TextFormat` object pair to allow visible output
    upon the device:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`TextField`和`TextFormat`对象对，以允许在设备上可见输出：
- en: '[PRE28]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add the `TextField`
    to the `DisplayList`. Here, we create a method to perform all of these actions
    for us:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的`TextField`，应用一个`TextFormat`，并将`TextField`添加到`DisplayList`中。在这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE29]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, simply invoke `Geolocation.isSupported` to confirm support for this capability:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，只需调用`Geolocation.isSupported`以确认对此功能的的支持：
- en: '[PRE30]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This invocation will return a Boolean value of `true` or `false`, indicating
    device support for this sensor. This result will be output to the `TextField`
    we created:![How to do it...](img/1420_03_10.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此调用将返回一个布尔值`true`或`false`，表示设备是否支持此传感器。此结果将输出到我们创建的`TextField`中：![如何操作...](img/1420_03_10.jpg)
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Detecting whether the device includes a geolocation sensor will determine whether
    or not a user can effectively utilize an application that is dependent upon such
    data. If our query returns as false, then it is up to us to notify the user or
    provide some sort of alternative to gathering such data from the user. This is
    normally handled by the user inputting specific location data manually.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 检测设备是否包含地理定位传感器将决定用户是否可以有效利用依赖于此类数据的应用程序。如果我们的查询返回为false，那么由我们来通知用户或提供某种替代方式来收集此类数据。这通常由用户手动输入特定位置数据来处理。
- en: See also…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'The availability of the geolocation sensors must be requested by the application
    developer through an Android manifest file. In order for our application to use
    these sensors, permissions must be stated within the manifest file. See [Chapter
    9](ch09.html "Chapter 9. Manifest Assurance: Security and Android Permissions"),
    *Manifest Assurance: Security and Android Permissions*, for more information.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应用开发者必须通过一个Android清单文件请求地理定位传感器的可用性。为了让我们的应用程序使用这些传感器，必须在清单文件中声明权限。更多信息请参见[第9章](ch09.html
    "第9章. 清单保证：安全与Android权限")，*清单保证：安全与Android权限*。
- en: Detecting whether the geolocation sensor has been disabled by the user
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 检测用户是否已禁用地理定位传感器
- en: There are many reasons why the Android geolocation sensor may not be available
    for use in our application. The user could have simply switched this sensor off
    to conserve battery life, or perhaps we, as developers, did not provide adequate
    permissions through the Android manifest file to allow geolocation access. In
    any case, it is a good idea to check and respond with a kind prompt if the sensor
    has been disabled.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多原因可能导致Android地理定位传感器在我们的应用程序中不可用。用户可能为了节省电池寿命而关闭了此传感器，或者也许是我们作为开发者没有通过Android清单文件提供足够的权限以允许地理定位访问。无论如何，检查并如果传感器被禁用，以友好的提示回应是一个好主意。
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to check the `muted` property included with the `Geolocation`
    class:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要检查`Geolocation`类中包含的`muted`属性：
- en: 'First, import the following classes into your project:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到您的项目中：
- en: '[PRE31]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Declare a `TextField` and `TextFormat` object pair to allow visible output
    upon the device along with a `Geolocation` object:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`TextField`和`TextFormat`对象对，以允许在设备上可见输出以及一个`Geolocation`对象：
- en: '[PRE32]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add the `TextField`
    to the `DisplayList`. Here, we create a method to perform all of these actions
    for us:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的`TextField`，应用一个`TextFormat`，并将`TextField`添加到`DisplayList`中。在这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE33]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now, we must instantiate a `Geolocation` instance and register an event listener
    to determine whether geolocation becomes disabled while our application is running.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须实例化一个`Geolocation`实例，并注册一个事件监听器，以确定在应用程序运行期间地理定位是否被禁用。
- en: Note
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We could also simply check the `muted` property at any time now that we have
    defined a `Geolocation` instance.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经定义了一个`Geolocation`实例，我们也可以随时简单地检查`muted`属性。
- en: '[PRE34]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once we invoke the method, check the muted property. If this returns `true`,
    we can access the device geolocation sensor; if it returns `false`, then we know
    the sensor has been disabled:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们调用了这个方法，检查muted属性。如果这返回`true`，我们可以访问设备地理位置传感器；如果返回`false`，那么我们知道传感器已被禁用：
- en: '[PRE35]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The result will be output to the device screen as shown in the following screenshot:![How
    to do it...](img/1420_03_11.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在设备屏幕上，如下截图所示：![如何操作...](img/1420_03_11.jpg)
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Once we construct a `Geolocation` instance, we then are able to access the `muted`
    property of that class. By checking the `muted` property of a `Geolocation` object,
    we can either disable geolocation features in our application, prompt the user
    to manually enter their location, or simply notify the user that they must enable
    the geolocation sensor on the device in order to proceed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们构建了一个`Geolocation`实例，我们就可以访问该类的`muted`属性。通过检查`Geolocation`对象的`muted`属性，我们可以在应用程序中禁用地理位置功能，提示用户手动输入他们的位置，或者简单地通知用户必须启用设备上的地理位置传感器才能继续。
- en: There's more...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As demonstrated in our example, the `Geolocation` object can have a `status`
    event registered to it, which will alert us when the `muted` property changes.
    We can use this to detect changes in the property while running the application
    and respond accordingly.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们的示例所示，`Geolocation`对象可以注册一个`status`事件，当`muted`属性发生变化时会提醒我们。我们可以使用它在应用程序运行时检测属性变化并相应地作出响应。
- en: See also…
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'The availability of the geolocation sensors must be requested by the application
    developer through an Android manifest file. In order for our application to use
    these sensors, permissions must be stated within the manifest file. See [Chapter
    9](ch09.html "Chapter 9. Manifest Assurance: Security and Android Permissions")
    for more information.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发者必须通过Android清单文件请求地理位置传感器的可用性。为了让我们的应用程序使用这些传感器，必须在清单文件中声明权限。更多信息请参见[第9章](ch09.html
    "第9章. 清单保证：安全与Android权限")。
- en: Retrieving device geolocation sensor data
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取设备地理位置传感器数据
- en: The `Geolocation` class can be used to reveal a full set of properties for tracking
    device position on the globe. This is useful for mapping, weather, travel, and
    other location-aware applications. To measure this data and react to these measurements,
    we must perform certain actions.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`Geolocation`类可以用来揭示一组完整的属性，用于在全球范围内跟踪设备位置。这对于地图、天气、旅行和其他位置感知应用程序很有用。为了测量这些数据并对这些测量做出反应，我们必须执行某些操作。'
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to employ certain ActionScript classes to allow monitoring of
    geolocation feedback:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用某些ActionScript类来允许监控地理位置反馈：
- en: 'First, import the following classes into your project:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到您的项目中：
- en: '[PRE36]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Declare a `TextField` and `TextFormat` object pair to allow visible output
    upon the device along with a `Geolocation` object:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`TextField`和`TextFormat`对象对，允许设备上可见输出，以及一个`Geolocation`对象：
- en: '[PRE37]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add the `TextField`
    to the `DisplayList`. Here, we create a method to perform all of these actions
    for us:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的`TextField`，应用`TextFormat`，并将`TextField`添加到`DisplayList`中。这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE38]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We must now instantiate a `Geolocation` object to register a `GeolocationEvent`
    listener to. In this case, we will have it invoke a function called `geolocationUpdate`.
    We also first check to see whether or not the Geolocation API is actually supported
    on the device by checking the `Geolocation.isSupported` property:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在必须实例化一个`Geolocation`对象，以注册一个`GeolocationEvent`监听器。在这种情况下，我们将调用一个名为`geolocationUpdate`的函数。我们还首先检查设备上是否实际支持Geolocation
    API，通过检查`Geolocation.isSupported`属性：
- en: '[PRE39]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We are now able to monitor and respond to device movement through the `geolocationUpdate`
    method. In this case, we are outputting the collected data to a `TextField:`
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在能够通过`geolocationUpdate`方法监控并响应用户移动设备。在这种情况下，我们将收集到的数据输出到一个`TextField`：
- en: '[PRE40]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The output will look something like this:![How to do it...](img/1420_03_12.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将如下所示：![如何操作...](img/1420_03_12.jpg)
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'By registering an event listener to `GeolocationEvent.UPDATE` we are able to
    detect changes reported by the geolocation sensor on an Android device. Note that
    not every Android device will be able to report upon all of these properties;
    it will vary based upon device being used. There are eight possible properties
    that are reported back through this event: `altitude, heading, horizontalAccuracy,
    latitude, longitude, speed, timestamp`, and `verticalAccuracy`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 通过注册一个事件监听器到`GeolocationEvent.UPDATE`，我们能够检测到Android设备上报的地理传感器变化。请注意，并不是每个Android设备都能报告所有这些属性；这将取决于所使用的设备。通过这个事件报告回的共有八个可能的属性：`altitude,
    heading, horizontalAccuracy, latitude, longitude, speed, timestamp`和`verticalAccuracy`。
- en: '`altitude:` A `Number` measuring current altitude, in meters.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`altitude:` 一个`Number`类型的值，表示当前的海拔高度，以米为单位。'
- en: '`heading:` A `Number` representative of the direction of movement, in degrees.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heading:` 一个`Number`类型的值，表示移动的方向，以度为单位。'
- en: '`horizontalAccuracy:` A `Number` measuring the horizontal accuracy of the sensor
    measurement, in meters.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`horizontalAccuracy:` 一个`Number`类型的值，表示传感器测量的水平精度，以米为单位。'
- en: '`latitude:` A `Number` representative of the current device latitude, in degrees.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`latitude:` 一个`Number`类型的值，表示当前设备的纬度，以度为单位。'
- en: '`longitude:` A `Number` representative of the current device longitude, in
    degrees.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`longitude:` 一个`Number`类型的值，表示当前设备的经度，以度为单位。'
- en: '`speed:` A `Number` measuring speed in meters per second.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speed:` 一个`Number`类型的值，表示每秒的速度，以米为单位。'
- en: '`timestamp:` An `int` representative of the number of milliseconds since application
    initialization.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestamp:` 一个`int`类型的值，表示自应用程序初始化以来的毫秒数。'
- en: '`verticalAccuracy:` A `Number` measuring the vertical accuracy of the sensor
    measurement, in meters.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verticalAccuracy:` 一个`Number`类型的值，表示传感器测量的垂直精度，以米为单位。'
- en: Adjusting the geolocation sensor update interval
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整地理传感器更新间隔
- en: While the default geolocation sensor update interval may be just fine for most
    applications, what if we would like to speed up or slow down this interval for
    a specific purpose?
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数应用程序可能默认的地理传感器更新间隔就足够了，但如果我们想为特定目的加快或减慢这个间隔呢？
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to change the geolocation sensor update interval using methods
    included with the `Geolocation` class:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`Geolocation`类中包含的方法来更改地理传感器更新间隔：
- en: 'First, import the following classes into your project:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到你的项目中：
- en: '[PRE41]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We'll now declare a number of objects to use in the example. First, a `TextField`
    and `TextFormat` object to allow visible output upon the device, along with an
    `Geolocation` object.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将声明一些在示例中要使用的对象。首先是一个`TextField`和一个`TextFormat`对象，以便在设备上允许可见输出，以及一个`Geolocation`对象。
- en: Then we will need to also employ a `Number` to keep track of our interval amount.
    Also needed are two `Sprite` objects for the user to interact with.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们还需要使用一个`Number`来跟踪我们的间隔量。还需要两个`Sprite`对象供用户交互。
- en: '[PRE42]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add the `TextField`
    to the `DisplayList`. Here, we create a method to perform all of these actions
    for us:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的`TextField`，应用一个`TextFormat`，并将`TextField`添加到`DisplayList`中。这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE43]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: To detect user input through touch, we will create two `Sprite` instances and
    add each to the `Stage`. To differentiate between `Sprite` instances in any event
    listener we register with these objects, we will provide a unique name property
    upon each `Sprite:`
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检测用户的触摸输入，我们将创建两个`Sprite`实例并将它们各自添加到`Stage`中。为了在注册这些对象的事件监听器中区分`Sprite`实例，我们将为每个`Sprite`提供一个唯一的名称属性：
- en: '[PRE44]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We first check to see whether or not the Geolocation API is actually supported
    on the device by checking the `Geolocation.isSupported` property.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先检查设备是否实际支持Geolocation API，通过检查`Geolocation.isSupported`属性。
- en: We will then need to set the specific input mode for the multitouch APIs to
    support touch input by setting `Multitouch.inputMode` to the `MultitouchInputMode.TOUCH_POINT`
    constant. Each `Sprite` will register a `TouchEvent.TOUCH_TAP` listener so that
    it will be able to invoke a method to shift the update interval upon touch tap.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要将多点触控APIs的特定输入模式设置为支持触摸输入，通过将`Multitouch.inputMode`设置为`MultitouchInputMode.TOUCH_POINT`常量。每个`Sprite`将注册一个`TouchEvent.TOUCH_TAP`监听器，这样它就能够通过触摸点击来调用一个方法，以改变更新间隔。
- en: Now, we can also instantiate a `Geolocation` object and invoke the `setRequestedUpdateInterval`
    method, which requires an interval measured in milliseconds to be passed into
    the method call.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们还可以实例化一个`Geolocation`对象并调用`setRequestedUpdateInterval`方法，该方法需要传递一个以毫秒为单位的间隔到方法调用中。
- en: 'We''ll register an event listener to respond to any device movement:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将注册一个事件监听器以响应任何设备移动：
- en: '[PRE45]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Our `shiftInterval` method will now respond to any touch taps intercepted by
    the two `Sprite` boxes we created. We are checking to see what name property has
    been given to each `Sprite` and shift the `accelerometerInterval` accordingly:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`shiftInterval`方法现在将响应我们创建的两个`Sprite`框拦截的任何触摸点击。我们将检查每个`Sprite`被赋予了什么名称属性，并相应地调整`accelerometerInterval`：
- en: '[PRE46]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The geolocation sensor update interval will now invoke the following function
    which will output detected movement and interval data through our `TextField:`
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在地理传感器更新间隔将会调用以下函数，该函数将通过我们的`TextField`输出检测到的移动和间隔数据：
- en: '[PRE47]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The result will appear similar to the following screenshot:![How to do it...](img/1420_03_13.jpg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将类似于以下截图：![如何操作...](img/1420_03_13.jpg)
- en: How it works...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By setting the geolocation update interval through `setRequestedUpdateInterval()`,
    we are able to adjust this interval based upon circumstances in our particular
    application. In the `demonstration` class in the preceding section, we have rendered
    two `Sprites` acting as an increase and decrease `TouchEvent.TOUCH_TAP` event
    receptors. Tapping upon these `DisplayObjects` will either increase or decrease
    the geolocation update interval, which is monitored through our `TextField` on
    the screen.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`setRequestedUpdateInterval()`设置地理定位更新间隔，我们能够根据特定应用程序中的情况调整此间隔。在前一节的`demonstration`类中，我们渲染了两个作为增加和减少`TouchEvent.TOUCH_TAP`事件受体的`Sprites`。点击这些`DisplayObjects`将会增加或减少地理定位更新间隔，这通过屏幕上的`TextField`进行监控。
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Note that the default geolocation sensor update interval is dependent upon whichever
    device is running our application. This strategy can also be used to try and even
    out the interval across devices. Some things, however, are totally out of our
    control. For instance, if a user is located deep inside of a building and has
    a poor GPS signal, the update interval can actually be well over a minute. Various
    factors such as this should be kept in mind.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认的地理定位传感器更新间隔取决于运行我们应用程序的设备。这种策略也可以用来尝试平衡不同设备之间的间隔。然而，有些事情完全在我们的控制之外。例如，如果用户深处建筑物内并且GPS信号差，更新间隔实际上可能超过一分钟。应考虑此类各种因素。
- en: Retrieving map data through geolocation coordinates
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过地理坐标获取地图数据
- en: To retrieve a map through the use of geolocation coordinates is one of the fundamental
    uses of the ActionScript Geolocation API. In this recipe, we will examine how
    to render a map on the Stage and generate a marker based on latitude and longitude
    coordinates reported by the device geolocation sensors using the Google Maps API
    for Flash.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 使用地理坐标获取地图是 ActionScript 地理定位 API 的基本用途之一。在本教程中，我们将研究如何使用 Google 地图 API for
    Flash 在舞台上渲染地图，并基于设备地理传感器报告的纬度和经度坐标生成标记。
- en: Getting ready...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: 'There are a few steps we will need to take before getting into the recipe itself.
    These steps will prepare our project with the proper code libraries and allow
    us access to the Google Maps services:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本教程之前，我们需要采取几个步骤。这些步骤将准备我们的项目与适当的代码库，并允许我们访问 Google 地图服务：
- en: First, we must download the Google Maps API for Flash from [http://code.google.com/apis/maps/documentation/flash/](http://code.google.com/apis/maps/documentation/flash/)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须从[http://code.google.com/apis/maps/documentation/flash/](http://code.google.com/apis/maps/documentation/flash/)下载
    Google 地图 API for Flash。
- en: The package will include two separate `.swc` files. One for Flex, and the other
    for ActionScript projects. In this example, we will extract the pure `AS3 .swc`
    to our local hard drive.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该软件包将包括两个独立的`.swc`文件。一个用于Flex，另一个用于ActionScript项目。在此示例中，我们将提取纯`AS3 .swc`到本地硬盘。
- en: From the same URL (in the first point) click on the link that reads **Sign up
    for a Google Maps API Key** to generate an API key and register a URL. You will
    need both of these items to complete the example.![Getting ready...](img/1420_03_02.jpg)
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从同一个URL（在第一点）点击阅读**注册 Google 地图 API 密钥**的链接以生成API密钥并注册一个URL。完成此示例你需要这两样东西。![准备中...](img/1420_03_02.jpg)
- en: Now, include the Google Maps SDK into your development environment by either
    adding the .swc through the **ActionScript Build Path** properties dialog in the
    case of Flash Builder (you can also simply drag the `.swc` into the `libs` directory)
    or FDT or through the **Advanced ActionScript Properties** dialog in Flash Professional:![Getting
    ready...](img/1420_03_03.jpg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过在Flash Builder中通过**ActionScript Build Path**属性对话框添加`.swc`（你也可以直接将`.swc`拖到`libs`目录中），或者在Flash
    Professional中通过**Advanced ActionScript Properties**对话框，将Google Maps SDK包含到你的开发环境中：![准备就绪...](img/1420_03_03.jpg)
- en: We are now ready to proceed with the recipe.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备进行食谱操作。
- en: How to do it...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will need to create our map `DisplayObject`, generate event listeners for
    `Geolocation` API updates, and adjust map properties based upon our current location:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建我们的地图`DisplayObject`，为`Geolocation` API更新生成事件监听器，并根据我们当前的位置调整地图属性：
- en: 'First, import the following classes into your project:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下类导入到你的项目中：
- en: '[PRE48]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Next, we will want to import a number of classes included in the Google Maps
    SDK. These classes will allow us to render a `Map` on the `Stage`, listen for
    map-specific events, and render a `Marker` on our current location:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们希望导入Google Maps SDK中包含的许多类。这些类允许我们在`Stage`上渲染`Map`，监听特定于地图的事件，并在我们当前的位置渲染`Marker`：
- en: '[PRE49]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We will now create a number of object references to be used in this example.
    First, a `TextField` and `TextFormat` object pair to allow visible output upon
    the device, along with a `Geolocation` object.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一些在本示例中要使用的对象引用。首先，一个`TextField`和`TextFormat`对象对，以便在设备上允许可见输出，以及一个`Geolocation`对象。
- en: 'Then we will need to also employ `Map` and `LatLng` objects to render a map
    of our location:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们还需要使用`Map`和`LatLng`对象来渲染我们位置的地图：
- en: '[PRE50]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We are now ready to create our `Map` by passing in the API key and URL we set
    up when registering with Google, and adding the `Map` to the display list:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备通过传递我们在注册Google时设置好的API密钥和URL来创建我们的`Map`，并将`Map`添加到显示列表中：
- en: '[PRE51]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We will now set up our `TextField`, apply a `TextFormat`, and add the `TextField`
    to the `DisplayList`. Here, we create a method to perform all of these actions
    for us:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的`TextField`，应用`TextFormat`，并将`TextField`添加到`DisplayList`中。在这里，我们创建一个方法来执行所有这些操作：
- en: '[PRE52]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'It is important that we register listeners for both geolocation updates, and
    `Map` completion events, so that we are able to read coordinate data, and know
    when our `Map` is ready for interaction. We also first check to see whether or
    not the Geolocation API is actually supported on the device by checking the `Geolocation.isSupported`
    property:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重要的是，我们需要为地理位置更新和`Map`完成事件注册监听器，这样我们才能读取坐标数据，并知道我们的`Map`何时准备好交互。我们还首先检查设备是否实际支持Geolocation
    API，通过检查`Geolocation.isSupported`属性来实现：
- en: '[PRE53]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'As the geolocation updates are being handled locally, this will most likely
    be our first event listener to fire. We will grab the `longitude` and `latitude`
    from data provided by the device geolocation sensor through this event and create
    a `LatLong` object from this which will be fed into the `Map` upon initialization:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于地理位置更新是在本地处理的，这很可能是我们的第一个事件监听器被触发。我们将通过此事件从设备地理位置传感器提供的数据中获取`longitude`（经度）和`latitude`（纬度），并由此创建一个`LatLong`对象，在初始化时将其输入到`Map`中：
- en: '[PRE54]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Once our `mapReady` listener method fires, we will already have the coordinate
    information needed to display our current coordinates through the `Map` and also
    render a simple `Marker` at this precise location:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的`mapReady`监听器方法触发，我们就已经有了通过`Map`显示我们当前坐标的必要坐标信息，同时在这个精确的位置渲染一个简单的`Marker`：
- en: '[PRE55]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The result will look similar to this:![How to do it...](img/1420_03_04.jpg)
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将类似于这样：![如何操作...](img/1420_03_04.jpg)
- en: How it works...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: By tapping into a mapping service such as Google Maps, we can listen for local
    device geolocation updates and feed the necessary data into the mapping service
    to perform numerous tasks.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过接入像Google Maps这样的地图服务，我们可以监听本地设备地理位置更新，并将必要的数据输入到地图服务中以执行众多任务。
- en: In the case of this example, we simply center the `Map` to our device coordinates
    and place a `Marker` overlay upon the `Map`. Whenever you are using a service
    such as this, it is always a good idea to thoroughly read the documentation to
    know both the possibilities and limitation n of the service.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只是将`Map`中心对准设备坐标，并在`Map`上放置一个`Marker`覆盖层。每次使用这类服务时，彻底阅读文档了解服务的可能性和限制总是一个好主意。
- en: The `url` property should be set to an online location where the purpose and
    scope of the application is described, as per Google's request.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`url` 属性应设置为在线位置，其中描述了应用程序的目的和范围，根据谷歌的要求。'
- en: Note
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: We are setting the `sensor` property of our `Map` instance to `true`. This is
    required if the `Map` is reacting to data based upon device geolocation sensors
    by Google. If we were simply allowing the user to input coordinates and adjust
    the `Map` location in that way, we would set the `sensor` property to `false`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `Map` 实例的 `sensor` 属性设置为 `true`。如果 `Map` 是基于谷歌设备地理位置传感器反应数据，这是必需的。如果我们只是允许用户输入坐标并通过这种方式调整
    `Map` 的位置，我们会将 `sensor` 属性设置为 `false`。
- en: There's more...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this case, we are using the Google Maps API for Flash. It is quite robust,
    but you may want to use another mapping system such as Yahoo! Maps, MapQuest,
    or some other service. That is fine since they will all require similar information;
    only the specific API setup will differ.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，我们使用了谷歌地图 API 的 Flash 版本。它相当健壮，但您可能希望使用其他地图系统，如 Yahoo! 地图、MapQuest 或其他服务。这是没问题的，因为它们都需要类似的信息；只是具体的
    API 设置会有所不同。
