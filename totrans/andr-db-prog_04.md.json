["```kt\npublic class CitizenTable {\npublic static final String TABLE_NAME = \"citizen_table\";\n/**\n* DEFINE THE TABLE\n*/\n// ID COLUMN MUST LOOK LIKE THIS\npublic static final String ID = \"_id\";\npublic static final String NAME = \"name\";\npublic static final String STATE = \"state\";\npublic static final String INCOME = \"income\";\n/**\n* DEFINE THE CONTENT TYPE AND URI\n*/\n// TO BE DISCUSSED LATER. . .\n}\n\n```", "```kt\npublic class CitizenContentProvider extends ContentProvider {\nprivate static final String DATABASE_NAME = \"citizens.db\";\nprivate static final int DATABASE_VERSION = 1;\npublic static final String AUTHORITY =\n\"jwei.apps.dataforandroid.ch4.CitizenContentProvider\";\n// OVERRIDE AND IMPLEMENT OUR DATABASE SCHEMA\nprivate static class DatabaseHelper extends SQLiteOpenHelper{\nDatabaseHelper(Context context) {\nsuper(context,DATABASE_NAME,null,DATABASE_VERSION);\n}\n@Override\npublic void onCreate(SQLiteDatabase db) {\n// CREATE INCOME TABLE\ndb.execSQL(\"CREATE TABLE \" + CitizenTable.TABLE_NAME +\n\" (\" + CitizenTable.ID + \" INTEGER PRIMARY KEY\nAUTOINCREMENT,\" + CitizenTable.NAME + \" TEXT,\" +\nCitizenTable.STATE + \" TEXT,\" + CitizenTable.INCOME +\n\" INTEGER);\");\n}\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion,\nint newVersion) {\nLog.w(\"LOG_TAG\", \"Upgrading database from version \" +\noldVersion + \" to \" + newVersion +\n\", which will destroy all old data\");\n// KILL PREVIOUS TABLES IF UPGRADED\ndb.execSQL(\"DROP TABLE IF EXISTS \" +\nCitizenTable.TABLE_NAME);\n// CREATE NEW INSTANCE OF SCHEMA\nonCreate(db);\n}\n}\nprivate DatabaseHelper dbHelper;\n// NOTE THE DIFFERENT METHODS THAT NEED TO BE IMPLEMENTED\n@Override\npublic boolean onCreate() {\n// . . .\n}\n@Override\npublic int delete(Uri uri, String where, String[] whereArgs){\n// . . .\n}\n@Override\npublic String getType(Uri uri) {\n// . . .\n}\n@Override\npublic Uri insert(Uri uri, ContentValues initialValues) {\n// . . .\nContentProviderContentProviderabout}\n@Override\npublic Cursor query(Uri uri, String[] projection, String\nselection, String[] selectionArgs, String sortOrder) {\n// . . .\n}\n@Override\npublic int update(Uri uri, ContentValues values, String where,\nString[] whereArgs) {\n// . . .\n}\n}\n\n```", "```kt\npublic static final String AUTHORITY =\n\"jwei.apps.dataforandroid.ch4.CitizenContentProvider\";\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\n\npackage=\"jwei.apps.dataforandroid\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\">\n<application android:icon=\"@drawable/icon\"\nandroid:label=\"@string/app_name\">\n<provider\nandroid:name=\n\"jwei.apps.dataforandroid.ch4.CitizenContentProvider\"\nandroid:authorities=\n\"jwei.apps.dataforandroid.ch4.CitizenContentProvider\"/>\n</application>\n</manifest>\n\n```", "```kt\npublic class CitizenContentProvider extends ContentProvider {\nprivate static final String DATABASE_NAME = \"citizens.db\";\nprivate static final int DATABASE_VERSION = 1;\npublic static final String AUTHORITY =\n\"jwei.apps.dataforandroid.ch4.CitizenContentProvider\";\nprivate static final UriMatcher sUriMatcher;\nprivate static HashMap<String, String> projectionMap;\n// URI MATCH OF A GENERAL CITIZENS QUERY\nprivate static final int CITIZENS = 1;\n// URI MATCH OF A SPECIFIC CITIZEN QUERY\nprivate static final int SSID = 2;\nprivate static class DatabaseHelper extends SQLiteOpenHelper {\n// . . .\n}\nprivate DatabaseHelper dbHelper;\n@Override\npublic boolean onCreate() {\n// HELPER DATABASE IS INITIALIZED\ndbHelper = new DatabaseHelper(getContext());\nreturn true;\n}\n@Override\npublic int delete(Uri uri, String where, String[] whereArgs){\n// . . .\n}\n@Override\npublic String getType(Uri uri) {\n// . . .\n}\n@Override\npublic Uri insert(Uri uri, ContentValues initialValues) {\n// . . .\n}\n@Override\npublic Cursor query(Uri uri, String[] projection,\nString selection, String[] selectionArgs, String sortOrder) {\nSQLiteQueryBuilder qb = new SQLiteQueryBuilder();\nqb.setTables(CitizenTable.TABLE_NAME);\nswitch (sUriMatcher.match(uri)) {\ncase CITIZENS:\nqb.setProjectionMap(projectionMap);\nbreak;\ncase SSID:\nString ssid =\nuri.getPathSegments(). get(CitizenTable.SSID_PATH_POSITION);\nqb.setProjectionMap(projectionMap);\n// FOR QUERYING BY SPECIFIC SSID\nqb.appendWhere(CitizenTable.ID + \"=\" + ssid);\nbreak;\ndefault:\nthrow new IllegalArgumentException (\"Unknown URI \" + uri);\n}\nSQLiteDatabase db = dbHelper.getReadableDatabase();\nCursor c = qb.query(db, projection, selection,\nselectionArgs, null, null, sortOrder);\n// REGISTERS NOTIFICATION LISTENER WITH GIVEN CURSOR\n// CURSOR KNOWS WHEN UNDERLYING DATA HAS CHANGED\nc.setNotificationUri(getContext().getContentResolver(),\nuri);\nreturn c;\nContentProviderContentProviderquery method, implementing}\n@Override\npublic int update(Uri uri, ContentValues values, String where,\nString[] whereArgs) {\n// . . .\n}\n// INSTANTIATE AND SET STATIC VARIABLES\nstatic {\nsUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\nsUriMatcher.addURI(AUTHORITY, \"citizen\", CITIZENS);\nsUriMatcher.addURI(AUTHORITY, \"citizen/#\", SSID);\n// PROJECTION MAP USED FOR ROW ALIAS\nprojectionMap = new HashMap<String, String>();\nprojectionMap.put(CitizenTable.ID, CitizenTable.ID);\nprojectionMap.put(CitizenTable.NAME, CitizenTable.NAME);\nprojectionMap.put(CitizenTable.STATE, CitizenTable.STATE);\nprojectionMap.put(CitizenTable.INCOME,\nCitizenTable.INCOME);\n}\n}\n\n```", "```kt\nString ssid =\nuri.getPathSegments().get(CitizenTable.SSID_PATH_POSITION);\n\n```", "```kt\npublic class CitizenContentProvider extends ContentProvider {\nprivate static final String DATABASE_NAME = \"citizens.db\";\nprivate static final int DATABASE_VERSION = 1;\npublic static final String AUTHORITY =\n\"jwei.apps.dataforandroid.ch4.CitizenContentProvider\";\nprivate static final UriMatcher sUriMatcher;\nprivate static HashMap<String, String> projectionMap;\n// URI MATCH OF A GENERAL CITIZENS QUERY\nprivate static final int CITIZENS = 1;\n// URI MATCH OF A SPECIFIC CITIZEN QUERY\nprivate static final int SSID = 2;\nprivate static class DatabaseHelper extends SQLiteOpenHelper {\n// . . .\n}\nprivate DatabaseHelper dbHelper;\n@Override\npublic boolean onCreate() {\n// HELPER DATABASE IS INITIALIZED\ndbHelper = new DatabaseHelper(getContext());\nreturn true;\n}\n@Override\npublic int delete(Uri uri, String where, String[] whereArgs) {\nSQLiteDatabase db = dbHelper.getWritableDatabase();\nint count;\nswitch (sUriMatcher.match(uri)) {\ncase CITIZENS:\n// PERFORM REGULAR DELETE\ncount = db.delete(CitizenTable.TABLE_NAME, where,\nwhereArgs);\nbreak;\ncase SSID:\n// FROM INCOMING URI GET SSID\nString ssid =\nuri.getPathSegments(). get(CitizenTable.SSID_PATH_POSITION);\n// USER WANTS TO DELETE A SPECIFIC CITIZEN\nString finalWhere = CitizenTable.ID+\"=\"+ssid;\n// IF USER SPECIFIES WHERE FILTER THEN APPEND\nif (where != null) {\nfinalWhere = finalWhere + \" AND \" + where;\n}\ncount = db.delete(CitizenTable.TABLE_NAME,\nfinalWhere, whereArgs);\nbreak;\ndefault:\nthrow new IllegalArgumentException (\"Unknown URI \" + uri);\n}\ngetContext().getContentResolver().notifyChange(uri, null);\nreturn count;\n}\nContentProviderContentProviderupdate() methods, implementing@Override\npublic String getType(Uri uri) {\n// . . .\n}\n@Override\npublic Uri insert(Uri uri, ContentValues initialValues) {\n// . . .\n}\n@Override\npublic Cursor query(Uri uri, String[] projection,\nString selection, String[] selectionArgs, String sortOrder) {\n// . . .\n}\n@Override\npublic int update(Uri uri, ContentValues values, String where,\nString[] whereArgs) {\nSQLiteDatabase db = dbHelper.getWritableDatabase();\nint count;\nswitch (sUriMatcher.match(uri)) {\ncase CITIZENS:\n// GENERAL UPDATE ON ALL CITIZENS\ncount = db.update(CitizenTable.TABLE_NAME, values,\nwhere, whereArgs);\nbreak;\ncase SSID:\n// FROM INCOMING URI GET SSID\nString ssid =\nuri.getPathSegments(). get(CitizenTable.SSID_PATH_POSITION);\n// THE USER WANTS TO UPDATE A SPECIFIC CITIZEN\nString finalWhere = CitizenTable.ID+\"=\"+ssid;\nif (where != null) {\nfinalWhere = finalWhere + \" AND \" + where;\n}\n// PERFORM THE UPDATE ON THE SPECIFIC CITIZEN\ncount = db.update(CitizenTable.TABLE_NAME, values,\nfinalWhere, whereArgs);\nbreak;\ndefault:\nthrow new IllegalArgumentException (\"Unknown URI \" + uri);\n}\ngetContext().getContentResolver().notifyChange(uri, null);\nreturn count;\n}\n// INSTANTIATE AND SET STATIC VARIABLES\nstatic {\n// . . .\n}\n}\n\n```", "```kt\nString finalWhere = CitizenTable.ID+\"=\"+ssid;\n// IF USER SPECIFIES WHERE FILTER THEN APPEND\nif (where != null) {\nfinalWhere = finalWhere + \" AND \" + where;\n}\n\n```", "```kt\ngetContext().getContentResolver().notifyChange(uri, null);\n\n```", "```kt\npublic class CitizenContentProvider extends ContentProvider {\nprivate static final String DATABASE_NAME = \"citizens.db\";\nprivate static final int DATABASE_VERSION = 1;\npublic static final String AUTHORITY =\n\"jwei.apps.dataforandroid.ch4.CitizenContentProvider\";\nprivate static final UriMatcher sUriMatcher;\nprivate static HashMap<String, String> projectionMap;\n// URI MATCH OF A GENERAL CITIZENS QUERY\nprivate static final int CITIZENS = 1;\n// URI MATCH OF A SPECIFIC CITIZEN QUERY\nprivate static final int SSID = 2;\nprivate static class DatabaseHelper extends SQLiteOpenHelper {\n// . . .\n}\nprivate DatabaseHelper dbHelper;\n@Override\npublic boolean onCreate() {\n// . . .\n}\n@Override\npublic int delete(Uri uri, String where, String[] whereArgs) {\n// . . .\n}\n@Override\npublic String getType(Uri uri) {\nswitch (sUriMatcher.match(uri)) {\ncase CITIZENS:\nreturn CitizenTable.CONTENT_TYPE;\ncase SSID:\nreturn CitizenTable.CONTENT_ITEM_TYPE;\ndefault:\nthrow new IllegalArgumentException(\"Unknown URI \" + uri);\n}\n}\n@Override\npublic Uri insert(Uri uri, ContentValues initialValues) {\n// ONLY GENERAL CITIZENS URI IS ALLOWED FOR INSERTS\n// DOESN'T MAKE SENSE TO SPECIFY A SINGLE CITIZEN\nif (sUriMatcher.match(uri) != CITIZENS) { throw new IllegalArgumentException(\"Unknown URI \" + uri); }\n// PACKAGE DESIRED VALUES AS A CONTENTVALUE OBJECT\nContentValues values;\nif (initialValues != null) {\nvalues = new ContentValues(initialValues);\n} else {\nvalues = new ContentValues();\n}\nSQLiteDatabase db = dbHelper.getWritableDatabase();\nlong rowId = db.insert(CitizenTable.TABLE_NAME,\nCitizenTable.NAME, values);\nif (rowId > 0) {\nUri citizenUri = ContentUris.withAppendedId(CitizenTable.CONTENT_URI, rowId);\n// NOTIFY CONTEXT OF THE CHANGE\ngetContext().getContentResolver().notifyChange(citizenUri,\nnull);\nContentProviderContentProvidergetType() method, implementingreturn citizenUri;\n}\nthrow new SQLException(\"Failed to insert row into \" + uri);\n}\n@Override\npublic Cursor query(Uri uri, String[] projection,\nString selection, String[] selectionArgs, String sortOrder) {\n// . . .\n}\n@Override\npublic int update(Uri uri, ContentValues values, String where,\nString[] whereArgs) {\n// . . .\n}\n// INSTANTIATE AND SET STATIC VARIABLES\nstatic {\n// . . .\n}\n}\n\n```", "```kt\npublic class CitizenTable {\npublic static final String TABLE_NAME = \"citizen_table\";\n/**\n* DEFINE THE TABLE\n*/\n// . . .\n/**\n* DEFINE THE CONTENT TYPE AND URI\n*/\n// THE CONTENT URI TO OUR PROVIDER\npublic static final Uri CONTENT_URI = Uri.parse(\"content://\" +\nCitizenContentProvider.AUTHORITY + \"/citizen\");\n// MIME TYPE FOR GROUP OF CITIZENS\npublic static final String CONTENT_TYPE =\n\"vnd.android.cursor.dir/vnd.jwei512.citizen\";\n// MIME TYPE FOR SINGLE CITIZEN\npublic static final String CONTENT_ITEM_TYPE =\n\"vnd.android.cursor.item/vnd.jwei512.citizen\";\n// RELATIVE POSITION OF CITIZEN SSID IN URI\npublic static final int SSID_PATH_POSITION = 1;\n}\n\n```", "```kt\npublic class ContentProviderActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nContentResolver cr = getContentResolver();\nContentValues contentValue = new ContentValues();\ncontentValue.put(CitizenTable.NAME, \"Jason Wei\");\ncontentValue.put(CitizenTable.STATE, \"CA\");\ncontentValue.put(CitizenTable.INCOME, 100000);\ncr.insert(CitizenTable.CONTENT_URI, contentValue);\ncontentValue = new ContentValues();\ncontentValue.put(CitizenTable.NAME, \"James Lee\");\ncontentValue.put(CitizenTable.STATE, \"NY\");\ncontentValue.put(CitizenTable.INCOME, 120000);\ncr.insert(CitizenTable.CONTENT_URI, contentValue);\ncontentValue = new ContentValues();\ncontentValue.put(CitizenTable.NAME, \"Daniel Lee\");\ncontentValue.put(CitizenTable.STATE, \"NY\");\ncontentValue.put(CitizenTable.INCOME, 80000);\ncr.insert(CitizenTable.CONTENT_URI, contentValue);\n// QUERY TABLE FOR ALL COLUMNS AND ROWS\nCursor c = cr.query(CitizenTable.CONTENT_URI, null, null,\nnull, CitizenTable.INCOME + \" ASC\");\n// LET THE ACTIVITY MANAGE THE CURSOR\nstartManagingCursor(c);\nint idCol = c.getColumnIndex(CitizenTable.ID);\nint nameCol = c.getColumnIndex(CitizenTable.NAME);\nint stateCol = c.getColumnIndex(CitizenTable.STATE);\nint incomeCol = c.getColumnIndex(CitizenTable.INCOME);\nwhile (c.moveToNext()) {\nint id = c.getInt(idCol);\nString name = c.getString(nameCol);\nString state = c.getString(stateCol);\nint income = c.getInt(incomeCol);\nSystem.out.println(\"RETRIEVED ||\" + id + \"||\" + name +\n\"||\" + state + \"||\" + income);\n}\nSystem.out.println(\"-------------------------------\");\n// QUERY BY A SPECIFIC ID\nUri myC = Uri.withAppendedPath(CitizenTable.CONTENT_URI,\n\"2\");\nCursor c1 = cr.query(myC, null, null, null, null);\n// LET THE ACTIVITY MANAGE THE CURSOR\nstartManagingCursor(c1);\nwhile (c1.moveToNext()) {\nint id = c1.getInt(idCol);\nString name = c1.getString(nameCol);\nString state = c1.getString(stateCol);\nint income = c1.getInt(incomeCol);\nSystem.out.println(\"RETRIEVED ||\" + id + \"||\" + name +\n\"||\" + state + \"||\" + income);\n}\n}\n}\n\n```", "```kt\nUri myC = Uri.withAppendedPath(CitizenTable.CONTENT_URI, \"2\");\n\n```"]