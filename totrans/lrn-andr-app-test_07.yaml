- en: Chapter 7. Behavior-driven Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Behavior-driven Development** (**BDD**) can be understood as the evolution
    and confluence of **Test-driven Development** (**TDD**) and acceptance testing.
    Both techniques were discussed in previous chapters, so you may want to look back
    at [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting Started with Testing"),
    *Getting Started with Testing,* and [Chapter 6](part0061_split_000.html#page "Chapter 6. Practicing
    Test-driven Development"), *Practicing Test-driven Development,* before proceeding.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Behavior-driven Development introduces some new concepts, such as the use of
    a common vocabulary to describe the tests, and the inclusion of business participants
    in the software development project, such as product owners or business analysts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: We have visited Test-driven Development before, and we focused on converting
    low-level requirements into tests that could drive our development process. Behavior-driven
    Development forces us to concentrate on higher level requirements, and by using
    a specific vocabulary, we can express these requirements in a way that can be
    further analyzed or evaluated. Some people believe BDD is only the philosophy
    of TDD done right.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: We will explore these concepts through examples, so that you can draw your own
    conclusions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Given, When, and Then
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given/When/Then words are the common vocabulary that spans the divide between
    business and technology, and as described at [http://behaviour-driven.org](http://behaviour-driven.org),
    they can also be referred to as the ubiquitous language of Behavior-driven Development.
    The framework is based on the following three core principles that we reproduce
    here, verbatim:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Business and technology should refer to the same system in the same way
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any system should have an identified, verifiable value to the business
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up-front analysis, design, and planning, all have a diminishing return
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Behavior-driven Development relies on the use of this specific vocabulary.
    Additionally, the format in which requirements are expressed is predetermined,
    allowing tools to interpret and execute them:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Given**: This is to describe the initial state before an external stimuli
    is received.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When**: This is to describe the key action the user performs.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Then**: This is to analyze the results of the actions. To be observable,
    the actions performed should have some kind of outcome.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FitNesse
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'FitNesse is a software development collaboration tool that can be used to manage
    BDD scenarios. Strictly speaking FitNesse is a set of tools, described as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: As a software testing tool, FitNesse is a lightweight, open source framework
    that allows teams to collaborate
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also a Wiki where you can easily create, edit pages, and share information
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web server, so it doesn't require additional configuration or administrative
    privileges to set up, or configure
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the FitNesse distribution from [http://www.fitnesse.org](http://www.fitnesse.org).
    The distribution is a JAR file that installs itself on first run. Throughout these
    examples, we used FitNesse standalone release 20140901 but newer versions should
    also work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Running FitNesse from the command line
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, when FitNesse runs, it listens on port 80, so to run unprivileged,
    you should change the port on the command line. In this example, we use `8900`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output obtained when we run the command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once running, you can direct your browser to the local FitNesse server home
    page (`http://localhost:8900/FrontPage`), and you will be presented with this
    content:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Running FitNesse from the command line](img/00035.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Creating a TemperatureConverterTests subwiki
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once FitNesse is up and running, we can start by creating a subwiki to organize
    our tests. You may already be familiar with the wiki concept. If not, wiki is
    a website that allows page editing and creation by its users. This editing process
    is done from within the browser, and uses a markup language that greatly simplifies
    the process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find out more about wikis in what could perhaps be the most famous wiki
    at [http://en.wikipedia.org/wiki/Wiki](http://en.wikipedia.org/wiki/Wiki).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Though this subwiki organization is not mandatory, it is highly recommended,
    especially if you plan to use FitNesse for acceptance testing on multiple projects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: One of the most simplified processes is hyperlink creation, which is done only
    by using *CamelCase* or *WikiWords*; that is a word that starts with a capital
    letter and has at least one or more capital letter in it. This WikiWord will be
    converted into a hyperlink to a page, with that name.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the **TemperatureConverterTests** subwiki, we simply press the **Edit**
    button to the right of the FitNesse logo, to edit the home page, adding the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This adds a new table to the page by using the "|" markup as the first character
    and to delimit the columns.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: We also add a column with a descriptive comment about the tests. This comment
    is turned into italics by surrounding it with two single quotes (''). This text
    will create a wiki link named, `TemperatureConverterTests`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Press **Save,** and the page will be modified.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the page is displayed, we can verify that `TemperatureConverterTests`
    is now followed by a **[?]** (question mark) because the page has not been created
    yet, and will be created when we click on it. Click on it now, this puts us straight
    into edit mode of the new page. We can add some comments to clearly identify this
    newly created front page of the subwiki:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the text `TemperatureConverterTests` `SubWiki` is escaped using `!-` and
    `-!` to prevent it from being converted to another page link.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Press **Save** again.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Adding child pages to the subwiki
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, we add a new child page by using the **[Add]** link that appears next to
    the page title.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different options for creating the child page, and we can select:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Static: This is a normal Wiki page'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Suite: This is a page containing other tests composing a suite'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test: This is a page that contains tests'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will select to add a suite page and call it `TemperatureConverterTestSuite`
    as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding child pages to the subwiki](img/00036.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: After pressing **Save**, this page is created and has been automatically added
    as a link to the `TemperatureConverterTests` subwiki.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Let's follow this newly created link to reach the test suite page.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Once you're here, add another child using **[Add]** | **[Test Page]**. This
    adds a test page, and we will name it `TemperatureConverterCelsiusToFahrenheitFixture,`
    as this will contain our fixture. The naming here is just a convention to organize
    our wiki.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save** to finish the operation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Adding the acceptance test fixture
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Up until now, we were only creating wiki pages. Nothing exciting about that!
    Now, we will be adding our acceptance test fixture directly to the page. Be sure
    you have navigated to the newly added page, `TemperatureConverterCelsiusToFahrenheitFixture`,
    click on **Edit**, and replace `<test page>` with the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This table defines several items for our test feature:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`TemperatureConverterCelsiusToFahrenheitFixture`: This is the table title and
    the test fixture name.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`celsius`: This is the column name for the value we are providing as input
    to the test.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fahrenheit?`: This is the column name for the value expected as the result
    of the conversion. The question mark indicates that this is a result value.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~=`: This indicates that the result is approximately this value.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`< _ <`: This indicates that the expected value is within this range.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Invalid temperature`: -274.00 C below absolute zero is the value expected
    by the failed conversion.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save this content by clicking on **Save**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Adding the supporting test classes
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we press the **Test** button, which is below the FitNesse logo (see the following
    screenshot for details), we will receive an error. In some way this is expected
    because we haven't created the supporting test fixture yet. The test fixture will
    be a very simple class that invokes the `TemperatureConverter` class methods.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'FitNesse supports the following two different test systems:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '**fit**: This is the older of the two methods and uses HTML, parsed just prior
    to the fixture being called'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**slim**: This is newer; all the table processing is done inside FitNesse within
    slim runners'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further information about these test systems can be found at [http://fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.TestSystems](http://fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.TestSystems).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we use slim, by setting the variable `TEST_SYSTEM` within
    the same page as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we are going to create the slim test fixture. Remember the text fixture
    is a simple class that allows us to run our already written temperature conversion
    code from the FitNesse test suite. We create a new package, named `com.blundell.tut.fitnesse.fixture`,
    inside of our existing project `TemperatureConverter` and inside the `core` module.
    We will be creating the fixture inside this package.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have to create the `TemperatureConverterCelsiusToFahrenheitFixture`
    class, which we defined in our acceptance test table:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As a reminder it should look something like this when done:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the supporting test classes](img/00037.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: This fixture should delegate to our real code and not do anything by itself.
    We decided to return `String` from `fahrenheit(),` so we can return the `Exception`
    message in the same method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: At this point, run the core module tests to ensure you have not broken anything
    (and to compile the newly created class for later).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'On the FitNesse test page, we should also define the package the test resides
    in. This allows the tests written in FitNesse to find the test fixture written
    in our Android project. In the same page we are still editing, add:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we add our Android project class files to the path of our FitNesse tests.
    This allows FitNesse to use our newly written test fixture and our `TemperatureConverter`;
    the code under test:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This should be adapted to your system paths. The main point here is the path
    after `/core/`. This is pointing to where the compiled `*.class` files are for
    your application under test. Note, that we need to add the test sources and the
    project sources separately.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'After finishing these steps, we can click on the **Test** button to run the
    tests, and the following screenshot will reflect the results:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the supporting test classes](img/00038.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: We can easily identify every test that succeeded by their green color, and the
    failed ones by their red color. In this example, we don't have any failure, so
    everything is green. Notice, it also shows the `classpath` and `TEST_SYSTEM` variables
    we declared.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: FitNesse has another useful feature, **Test History**. All the test runs and
    a specific number of results are saved for a period of time, so that you can review
    the results later on and compare them, and thus, analyze the evolution of your
    changes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: This feature is accessed by clicking **Test** **History** located at the bottom
    of the list, under **Tools,** on the top menu.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see the results for the last 3 test runs,
    where 2 failed and 1 succeeded. Also by clicking on the **+** (plus) or **-**
    (minus) signs, you can expand or collapse the view to show or hide detailed information
    about the test run:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the supporting test classes](img/00039.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: GivWenZen
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GivWenZen is a framework that builds upon FitNesse and Slim to allow the user
    to exploit the Behavior-driven Development technique of expression, using the
    **Given-When-Then** vocabulary to describe tests. These test descriptions are
    also created using the FitNesse wiki facility, of expressing the tests as plain
    text contained in tables in a wiki page.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: The idea is simple and straightforward, and follows up with what we have been
    doing with FitNesse, but this time instead of writing acceptance tests giving
    a table of values, we will use the three Behavior-driven Development magic words,
    **Given-When-Then**, to describe our scenarios.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, let''s install FitNesse with GivWenZen. Download the full distribution
    from its download list page at [http://goo.gl/o3Hlpo](http://goo.gl/o3Hlpo). Once
    unzipped, the GivWenZen JAR starts up exactly the same way as FitNesse did (because
    it''s just a modification on top):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Further reading, comprehensive instructions and examples can be found on the
    wiki at [https://github.com/weswilliams/GivWenZen/wiki](https://github.com/weswilliams/GivWenZen/wiki).
    We used GivWenZen 1.0.3 in these examples, but newer versions should work as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The GivWenZen full distribution includes all the dependencies needed, including
    FitNesse, so if you have FitNesse running from previous examples it is better
    to stop it, as you must use a different JAR for GivWenZen.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Upon startup, point your browser to the home page and you will find a familiar
    FitNesse front page, or if you have configured the port like we did previously,
    check out some tests at `http://localhost:8900/GivWenZenTests`. You can take some
    time to explore the examples included.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Creating the test scenario
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a simple scenario for our temperature converter, so we can understand
    Given-When-Then a bit better.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'As a plain English sentence, our scenario would be:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '*Given* I''m using the Temperature Converter, *When* I enter 100 into the Celsius
    field, *Then* I obtain 212 in the Fahrenheit field.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'The value is directly translated into a GivWenZen scenario by adding this to
    a wiki page:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The translation is straightforward. The table title must be `script`, and in
    this case it is preceded by a dash (-) to hide it. Then each of the **Given-When-Then**
    scenarios is placed in a column, and the predicate in the other column.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running this script, when the whole page is executed, we need to initialize
    GivWenZen by running another script. You do this by adding it to the top of the
    wiki page:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We also need to initialize the classpath and add the corresponding imports
    for all scripts. Usually, this is done in one of the **SetUp** pages, which are
    executed before running every test script (like the `setUp()` method in a JUnit
    test), but for the sake of simplicity, we are adding the initialization to this
    same page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You will need to change the last two path variables to match your `TemperatureConverter`
    project; you'll see why you need these later.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the tests at this point by clicking the **Test** button, you will
    receive the following message:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The second column in the table, for our test outline, holds the domain steps,
    hence, the exception `DomainStepNotFound`. You need a step class with an annotated
    method matching this pattern: "I''m using the TemperatureConverter".'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical causes of this error are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`StepClass` is missing: This is our error'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StepClass` is missing the `@DomainSteps` annotation'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StepMethod` is missing the `@DomainStep` annotation'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `StepMethod` annotation has a regular expression that does not match the
    current test step you have written
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example step class could be:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The step class should be placed in the package or subpackage of `bdd.steps`,
    or you could alternatively define your own custom package. This package is going
    to live inside the `/core/test/` module of our application. If you noticed, above
    the **setUp** page, we added our application on the path, so this DomainStep can
    be found after we build the project.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use the `@DomainStep(s)` annotation in our project, we need the
    GivWenZen JAR on our project test path. This can be done by copying the `givwenzen.jar`
    file into `/core/libs,` or even better with Gradle by adding it as a remote dependency
    to `build.gradle`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll notice that this `testCompile` dependency isn't the official GivWenZen
    release but someone has forked (copied) the code, and uploaded it. This doesn't
    matter to us for now because we are only using the two annotation classes (which
    I know are identical in this version), but it's worth keeping in mind and reverting
    to the original GivWenZen library if it is ever released as a remote dependency.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the small outline example, in our particular case the implementation
    of `StepClass` will be:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, we are using a subpackage of `bdd.steps` because, by default,
    this is the package hierarchy GivWenZen searches for step's implementations. Otherwise,
    extra configuration is needed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Classes implementing steps should be annotated by `@DomainSteps,` and each of
    the step's methods annotated by `@DomainStep`. Each step method annotation receives
    a String regular expression as a parameter. This regular expression is used by
    GivWenZen to match the steps.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in our scenario, we have defined this step:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our annotation is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will match, and the regular expression group values defined by `ANY_TEMPERATURE`
    and `UNIT_NAME` will be obtained and provided to the method as its argument''s
    `value` and `unitName`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Recall that in a previous chapter I recommended reviewing regular expressions
    because they could be useful. Well this is probably one of these places where
    they are extremely useful. It allows for a flexible use of the English language.
    Here `I(?: a|''m)` was used to allow **I am** and **I''m**. In `ANY_TEMPERATURE,`
    we are matching every possible temperature value with the optional sign and decimal
    point. Consequently `UNIT_NAME` matches the unit name; that is, Celsius or Fahrenheit.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: These regular expressions are used in the construction of the `@DomainStep`
    annotation parameters. Groups delimited by `()` parenthesis in these regular expressions
    are converted into method parameters. This is how `setField()` obtains its parameters.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Then we have a `verifyConversion()` method that returns true or false depending
    on whether the actual conversion matches the expected one, within a difference
    of two decimal places.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have some methods that actually invoke the conversion methods in
    the `TemperatureConverter` class.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the tests once again, all the tests pass. We can confirm this by
    analyzing the output message:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We should not only create scenarios for normal situations, but cover exceptional
    conditions as well. Say, in plain text, our scenario is something like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Given I''m using the Temperature Converter, when I enter `-274` into the Celsius
    field, then I obtain an **Invalid temperature: -274.00C below absolute zero**
    exception.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be translated into a GivWenZen table like the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By adding a single supporting step method, we will be able to run it. The step
    method can be implemented like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method obtains the exception message, temperature value, and unit from
    the regular expression. Then this is compared against the actual exception message
    to verify that it matches.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget when you add Java code to your `StepClass` annotation you will
    need to compile the class again so that FitNesse can use the new code. One way
    to do this is just to run your Java tests from the IDE, forcing a recompile.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we can create other scenarios that, in this situation, will be
    supported by the existing step''s methods. These scenarios could be:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Because GivWenZen is based on FitNesse, we are free to combine both approaches
    and include the tests from our previous session, in the same suite. Doing so,
    we can run the entire suite from the suite page, obtaining the overall results
    as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the test scenario](img/00040.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discovered Behavior-driven Development as an evolution of
    Test-driven Development, which we examined in previous chapters.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the driving forces behind Behavior-driven Development. We analyzed
    the concepts serving as the foundations, explored the Given-When-Then vocabulary
    idea, and introduced FitNesse and Slim as helpful tools in deploying tests.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: We presented GivWenZen, a tool based on FitNesse that gives us the ability to
    create near-English, prose-style scenarios, and test them.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了 GivWenZen，这是一个基于 FitNesse 的工具，它使我们能够创建近乎英文的、散文式场景，并对它们进行测试。
- en: We introduced these techniques and tools to our sample Android project. However,
    we are still limited to test subjects that are testable under the JVM, avoiding
    the use of Android-specific classes and the user interface. We will be exploring
    some alternatives to overcome this limitation in [Chapter 9](part0079_split_000.html#page
    "Chapter 9. Alternative Testing Tactics"), *Alternative Testing Tactics*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些技术和工具引入到了我们的示例 Android 项目中。然而，我们的测试对象仍然局限于可以在 JVM 下测试的，避免使用特定于 Android
    的类和用户界面。我们将在[第9章](part0079_split_000.html#page "第9章. 替代测试策略")，*替代测试策略*中探索一些方法来克服这一限制。
- en: The next chapter deals with a different aspect of testing, concentrating on
    performance and profiling, which is a natural step to follow after we have our
    application behaving correctly, and according to our test specifications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论测试的另一面，专注于性能和剖析，这在我们应用程序按预期运行并符合我们的测试规范后，是一个自然而然的步骤。
