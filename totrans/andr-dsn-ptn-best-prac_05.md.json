["```kt\ncompile 'com.android.support:appcompat-v7:24.1.1'compile 'com.android.support:design:24.1.1'compile 'com.android.support:cardview-v7:24.1.1'compile 'com.android.support:recyclerview-v7:24.1.1'\n```", "```kt\n<android.support.design.widget.CoordinatorLayoutandroid:id=\"@+id/content\"android:layout_width=\"match_parent\"android:layout_height=\"match_parent\"></android.support.design.widget.CoordinatorLayout>\n```", "```kt\n<android.support.v7.widget.RecyclerView \n    android:id=\"@+id/main_recycler_view\" \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\" \n    /> \n\n```", "```kt\n<ImageView \n    android:id=\"@+id/item_image\" \n    android:layout_width=\"@dimen/item_image_size\" \n    android:layout_height=\"@dimen/item_image_size\" \n    android:layout_gravity=\"center_vertical|end\" \n    android:layout_margin=\"@dimen/item_image_margin\" \n    android:scaleType=\"fitXY\" \n    android:src=\"img/placeholder\" /> \n\n<TextView \n    android:id=\"@+id/item_name\" \n    android:layout_width=\"0dp\" \n    android:layout_height=\"wrap_content\" \n    android:layout_gravity=\"center_vertical\" \n    android:layout_weight=\"1\" \n    android:paddingBottom=\"24dp\" \n    android:paddingStart=\"@dimen/item_name_paddingStart\" \n    tools:text=\"placeholder\" \n    android:textSize=\"@dimen/item_name_textSize\" /> \n\n```", "```kt\npublic class Filling { \n    private int image; \n    private int name; \n\n    public Filling(int image, int name) { \n        this.image = image; \n        this.name = name; \n    } \n} \n\n```", "```kt\nstatic final Filling fillings[] = new Filling[3]; \nfillings[0] = new Filling(R.drawable.cheese, R.string.cheese); \nfillings[1] = new Filling(R.drawable.ham, R.string.ham); \nfillings[2] = new Filling(R.drawable.tomato, R.string.tomato); \n\n```", "```kt\n<string name=\"cheese\">Cheese</string> \n<string name=\"ham\">Ham</string> \n<string name=\"tomato\">Tomato</string> \n\n```", "```kt\n    RecyclerView recyclerView; \n    DataAdapter adapter;; \n\n    ```", "```kt\n    final ArrayList<Filling> fillings = initializeData(); \n    adapter = new DataAdapter(fillings); \n\n    recyclerView = (RecyclerView) findViewById(R.id.recycler_view); \n    recyclerView.setHasFixedSize(true); \n    recyclerView.setLayoutManager(new LinearLayoutManager(this)); \n    recyclerView.setAdapter(adapter); \n\n    ```", "```kt\n    // Inflate recycler view \n    @Override \n    public DataAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { \n        Context context = parent.getContext(); \n        LayoutInflater inflater = LayoutInflater.from(context); \n\n        View v = inflater.inflate(R.layout.item, parent, false); \n        return new ViewHolder(v); \n        } \n\n    // Display data \n    @Override \n    public void onBindViewHolder(DataAdapter.ViewHolder holder, int position) { \n        Filling filling = fillings.get(position); \n\n        ImageView imageView = holder.imageView; \n        imageView.setImageResource(filling.getImage()); \n\n        TextView textView = holder.nameView; \n        textView.setText(filling.getName()); \n    } \n\n    @Override \n    @Overridepublic int getItemCount() {    return fillings.size();}\n    ```", "```kt\n    public class ViewHolder extends RecyclerView.ViewHolder { \n        ImageView imageView; \n        TextView nameView; \n\n        public ViewHolder(View itemView) { \n            super(itemView); \n            imageView = (ImageView) itemView.findViewById(R.id.item_image); \n            nameView = (TextView) itemView.findViewById(R.id.item_name); \n        } \n    } \n\n    ```", "```kt\npublic interface OldLocation { \n\n    String getBuilding(); \n    void setBuilding(String building); \n\n    int getFloor(); \n    void setFloor(int floor); \n\n    String getOffice(); \n    void setOffice(String office); \n\n    int getDesk(); \n    void setDesk(int desk); \n} \n\n```", "```kt\npublic class CustomerLocation implements OldLocation { \n    String building; \n    int floor; \n    String office; \n    int desk; \n\n    @Override \n    public String getBuilding() { return building; } \n\n    @Override \n    public void setBuilding(String building) { \n        this.building = building; \n    } \n\n    @Override \n    public int getFloor() { return floor; } \n\n    @Override \n    public void setFloor(int floor) { \n        this.floor = floor; \n    } \n\n    @Override \n    public String getOffice() { return office; } \n\n    @Override \n    public void setOffice(String office) { \n        this.office = office; \n    } \n\n    @Override \n    public int getDesk() { return desk; } \n\n    @Override \n    public void setDesk(int desk) { \n        this.desk = desk; \n    } \n} \n\n```", "```kt\n    public class Adapter implements NewLocation { \n        final OldLocation oldLocation; \n\n        String building; \n        int floor; \n        int desk; \n\n        // Wrap in old interface \n        public Adapter(OldLocation oldLocation) { \n            this.oldLocation = oldLocation; \n            setBuilding(this.oldLocation.getBuilding()); \n            setFloor(this.oldLocation.getFloor()); \n            setDesk(this.oldLocation.getDesk()); \n        } \n\n        @Override \n        public String getBuilding() { return building; } \n\n        @Override \n        public void setBuilding(String building) { \n            this.building = building; \n        } \n\n        @Override \n        public int getFloor() { return floor; } \n\n        @Override \n        public void setFloor(int floor) { \n            this.floor = floor; \n        } \n\n        @Override \n        public int getDesk() { return desk; } \n\n        @Override \n        public void setDesk(int desk) { \n            this.desk = desk; \n        } \n    } \n\n    ```", "```kt\n    TextView textView = (TextView)findViewById(R.id.text_view); \n\n    OldLocation oldLocation = new CustomerLocation(); \n    oldLocation.setBuilding(\"Town Hall\"); \n    oldLocation.setFloor(3); \n    oldLocation.setDesk(14); \n\n    NewLocation newLocation = new Adapter(oldLocation); \n\n    textView.setText(new StringBuilder() \n            .append(newLocation.getBuilding()) \n            .append(\", floor \") \n            .append(newLocation.getFloor()) \n            .append(\", desk \") \n            .append(newLocation.getDesk()) \n            .toString()); \n\n    ```", "```kt\n    public interface SandwichInterface { \n\n        void makeSandwich(String filling1, String filling2); \n    } \n\n    ```", "```kt\n    public abstract class AbstractSandwich { \n        protected SandwichInterface sandwichInterface; \n\n        protected AbstractSandwich(SandwichInterface sandwichInterface) { \n            this.sandwichInterface = sandwichInterface; \n        } \n\n        public abstract void make(); \n    } \n\n    ```", "```kt\n    public class Sandwich extends AbstractSandwich { \n        private String filling1, filling2; \n\n        public Sandwich(String filling1, String filling2, SandwichInterface sandwichInterface) { \n            super(sandwichInterface); \n            this.filling1 = filling1; \n            this.filling2 = filling2; \n        } \n\n        @Override \n        public void make() { \n            sandwichInterface.makeSandwich(filling1, filling2); \n        } \n    } \n\n    ```", "```kt\n    public class Open implements SandwichInterface { \n        private static final String DEBUG_TAG = \"tag\"; \n\n        @Override \n        public void makeSandwich(String filling1, String filling2) { \n            Log.d(DEBUG_TAG, \"Open sandwich \" + filling1 + filling2); \n        } \n    } \n\n    public class Closed implements SandwichInterface { \n        private static final String DEBUG_TAG = \"tag\"; \n\n        @Override \n        public void makeSandwich(String filling1, String filling2) { \n            Log.d(DEBUG_TAG, \"Closed sandwich \" + filling1 + filling2); \n        } \n    } \n\n    ```", "```kt\n    AbstractSandwich openSandwich = new Sandwich(\"Cheese \", \"Tomato\", new Open()); \n    openSandwich.make(); \n\n    AbstractSandwich closedSandwich = new Sandwich(\"Ham \", \"Eggs\", new Closed()); \n    closedSandwich.make();  \n\n    ```", "```kt\n    D/tag: Open sandwich Cheese Tomato \n    D/tag: Closed sandwich Ham Eggs \n\n    ```", "```kt\n    public interface Product { \n\n        int dispense(); \n    } \n\n    ```", "```kt\n    public class Crisps implements Product { \n\n        @Override \n        public int dispense() { \n            return R.drawable.crisps; \n        } \n    } \n\n    public class Drink implements Product { \n       ... \n            return R.drawable.drink; \n       ... \n    } \n\n    public class Fruit implements Product { \n        ... \n            return R.drawable.fruit; \n        ... \n    } \n\n    ```", "```kt\n    public class Facade { \n        private Product crisps; \n        private Product fruit; \n        private Product drink; \n\n        public Facade() { \n            crisps = new Crisps(); \n            fruit = new Fruit(); \n            drink = new Drink(); \n        } \n\n        public int dispenseCrisps() { \n            return crisps.dispense(); \n        } \n\n        public int dispenseFruit() { \n            return fruit.dispense(); \n        } \n\n        public int dispenseDrink() { \n            return drink.dispense(); \n        } \n    } \n\n    ```", "```kt\n    <ImageView \n        android:id=\"@+id/image_view\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" /> \n\n    ```", "```kt\n    ImageView imageView = (ImageView) findViewById(R.id.image_view); \n\n    ```", "```kt\n    Facade facade = new Facade(); \n\n    ```", "```kt\n    imageView.setImageResource(facade.dispenseCrisps()); \n\n    ```", "```kt\n    public interface Filter { \n\n        List<Ingredient> meetCriteria(List<Ingredient> ingredients); \n    } \n\n    ```", "```kt\n    public class Ingredient { \n\n        String name; \n        String local; \n        boolean vegetarian; \n\n        public Ingredient(String name, String local, boolean vegetarian){ \n            this.name = name; \n            this.local = local; \n            this.vegetarian = vegetarian; \n        } \n\n        public String getName() { \n            return name; \n        } \n\n        public String getLocal() { \n            return local; \n        } \n\n        public boolean isVegetarian(){ \n            return vegetarian; \n        } \n    } \n\n    ```", "```kt\n    public class VegetarianFilter implements Filter { \n\n        @Override \n        public List<Ingredient> meetCriteria(List<Ingredient> ingredients) { \n            List<Ingredient> vegetarian = new ArrayList<Ingredient>(); \n\n            for (Ingredient ingredient : ingredients) { \n                if (ingredient.isVegetarian()) { \n                    vegetarian.add(ingredient); \n                } \n            } \n            return vegetarian; \n        } \n    } \n\n    ```", "```kt\n    public class LocalFilter implements Filter { \n\n        @Override \n        public List<Ingredient> meetCriteria(List<Ingredient> ingredients) { \n            List<Ingredient> local = new ArrayList<Ingredient>(); \n\n            for (Ingredient ingredient : ingredients) { \n                if (Objects.equals(ingredient.getLocal(), \"Locally produced\")) { \n                    local.add(ingredient); \n                } \n            } \n            return local; \n        } \n    } \n\n    ```", "```kt\n    public class NonLocalFilter implements Filter { \n\n        @Override \n        public List<Ingredient> meetCriteria(List<Ingredient> ingredients) { \n            List<Ingredient> nonLocal = new ArrayList<Ingredient>(); \n\n            for (Ingredient ingredient : ingredients) { \n                if (ingredient.getLocal() != \"Locally produced\") { \n                    nonLocal.add(ingredient); \n                } \n            } \n            return nonLocal; \n        } \n    } \n\n    ```", "```kt\n    public class AndCriteria implements Filter { \n        Filter criteria; \n        Filter otherCriteria; \n\n        public AndCriteria(Filter criteria, Filter otherCriteria) { \n            this.criteria = criteria; \n            this.otherCriteria = otherCriteria; \n        } \n\n        @Override \n        public List<Ingredient> meetCriteria(List<Ingredient> ingredients) { \n            List<Ingredient> firstCriteria = criteria.meetCriteria(ingredients); \n            return otherCriteria.meetCriteria(firstCriteria); \n        } \n    } \n\n    ```", "```kt\n    public class OrCriteria implements Filter { \n        Filter criteria; \n        Filter otherCriteria; \n\n        public OrCriteria(Filter criteria, Filter otherCriteria) { \n            this.criteria = criteria; \n            this.otherCriteria = otherCriteria; \n        } \n\n        @Override \n        public List<Ingredient> meetCriteria(List<Ingredient> ingredients) { \n            List<Ingredient> firstCriteria = criteria.meetCriteria(ingredients); \n            List<Ingredient> nextCriteria = otherCriteria.meetCriteria(ingredients); \n\n            for (Ingredient ingredient : nextCriteria) { \n                if (!firstCriteria.contains(ingredient)) { \n                    firstCriteria.add(ingredient); \n                } \n            } \n            return firstCriteria; \n        } \n    } \n\n    ```", "```kt\n    List<Ingredient> ingredients = new ArrayList<Ingredient>(); \n\n    ingredients.add(new Ingredient(\"Cheddar\", \"Locally produced\", true)); \n    ingredients.add(new Ingredient(\"Ham\", \"Cheshire\", false)); \n    ingredients.add(new Ingredient(\"Tomato\", \"Kent\", true)); \n    ingredients.add(new Ingredient(\"Turkey\", \"Locally produced\", false)); \n\n    ```", "```kt\n    Filter local = new LocalFilter(); \n    Filter nonLocal = new NonLocalFilter(); \n    Filter vegetarian = new VegetarianFilter(); \n    Filter localAndVegetarian = new AndCriteria(local, vegetarian); \n    Filter localOrVegetarian = new OrCriteria(local, vegetarian); \n\n    ```", "```kt\n    public void printIngredients(List<Ingredient> ingredients, String header) { \n\n        textView.append(header); \n\n        for (Ingredient ingredient : ingredients) { \n            textView.append(new StringBuilder() \n                    .append(ingredient.getName()) \n                    .append(\" \") \n                    .append(ingredient.getLocal()) \n                    .append(\"\\n\") \n                    .toString()); \n        } \n    } \n\n    ```", "```kt\n    printIngredients(local.meetCriteria(ingredients), \n    \"LOCAL:\\n\"); \n    printIngredients(nonLocal.meetCriteria(ingredients), \n    \"\\nNOT LOCAL:\\n\"); \n    printIngredients(vegetarian.meetCriteria(ingredients), \n    \"\\nVEGETARIAN:\\n\"); \n    printIngredients(localAndVegetarian.meetCriteria(ingredients), \n    \"\\nLOCAL VEGETARIAN:\\n\"); \n    printIngredients(localOrVegetarian.meetCriteria(ingredients), \n    \"\\nENVIRONMENTALLY FRIENDLY:\\n\"); \n\n    ```"]