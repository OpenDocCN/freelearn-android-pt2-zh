["```kt\npublic override bool FinishedLaunching(\n   UIApplication application,\n   NSDictionary launchOptions) \n{ \n  //View Models \n  ServiceContainer.Register<LoginViewModel>(() =>\n     new LoginViewModel()); \n  ServiceContainer.Register<FriendViewModel>(() =>\n     new FriendViewModel()); \n  ServiceContainer.Register<RegisterViewModel>(() =>\n     new RegisterViewModel()); \n  ServiceContainer.Register<MessageViewModel>(() =>\n     new MessageViewModel()); \n\n  //Models \n  ServiceContainer.Register<ISettings>(() =>\n     new FakeSettings()); \n  ServiceContainer.Register<IWebService>(() =>\n     new FakeWebService()); \n\n  return true; \n} \n\n```", "```kt\nreadonly LoginViewModel loginViewModel =\n   ServiceContainer.Resolve<LoginViewModel>(); \n\n```", "```kt\npublic override void ViewDidLoad() \n{ \n  base.ViewDidLoad(); \n\n  login.TouchUpInside += async(sender, e) => \n  { \n    loginViewModel.UserName = username.Text; \n    loginViewModel.Password = password.Text; \n\n    try \n    { \n      await loginViewModel.Login(); \n\n      //TODO: navigate to a new screen \n    } \n    catch (Exception exc) \n    { \n      new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show(); \n    } \n  }; \n} \n\n```", "```kt\npublic override void ViewWillAppear(bool animated) \n{ \n  base.ViewWillAppear(animated); \n\n  loginViewModel.IsBusyChanged += OnIsBusyChanged; \n} \n\npublic override void ViewWillDisappear(bool animated) \n{ \n  base.ViewWillDisappear(animated); \n\n  loginViewModel.IsBusyChanged -= OnIsBusyChanged; \n} \n\nvoid OnIsBusyChanged(object sender, EventArgs e) \n{ \n  username.Enabled = \n    password.Enabled = \n    login.Enabled =  \n    indicator.Hidden = !loginViewModel.IsBusy; \n} \n\n```", "```kt\nPerformSegue(\"OnLogin\", this); \n\n```", "```kt\nclass TableSource : UITableViewSource \n{ \n  const string CellName = \"ConversationCell\"; \n  readonly MessageViewModel messageViewModel =\n     ServiceContainer.Resolve<MessageViewModel>(); \n\n  public override nint RowsInSection(\n     UITableView tableview, nint section) \n  { \n    return messageViewModel.Conversations == null ?\n       0 : messageViewModel.Conversations.Length; \n  } \n\n  public override UITableViewCell GetCell(\n     UITableView tableView, NSIndexPath indexPath) \n  { \n    var conversation =\n       messageViewModel.Conversations[indexPath.Row]; \n    var cell = tableView.DequeueReusableCell(CellName); \n    if (cell == null) \n    { \n      cell = new UITableViewCell(\n         UITableViewCellStyle.Default, CellName); \n      cell.Accessory =\n         UITableViewCellAccessory.DisclosureIndicator; \n    } \n    cell.TextLabel.Text = conversation.UserName; \n    return cell; \n  } \n} \n\n```", "```kt\nreadonly MessageViewModel messageViewModel = \n  ServiceContainer.Resolve<MessageViewModel>(); \n\npublic override void ViewDidLoad() \n{ \n  base.ViewDidLoad(); \n\n  TableView.Source = new TableSource(); \n} \n\npublic async override void ViewWillAppear(bool animated) \n{ \n  base.ViewWillAppear(animated); \n\n  try \n  { \n    await messageViewModel.GetConversations(); \n\n    TableView.ReloadData(); \n  } \n  catch(Exception exc) \n  { \n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show(); \n  } \n} \n\n```", "```kt\nclass TableSource : UITableViewSource \n{ \n  const string CellName = \"FriendCell\"; \n  readonly FriendViewModel friendViewModel =\n     ServiceContainer.Resolve<FriendViewModel>(); \n\n  public override nint RowsInSection(\n     UITableView tableview, nint section) \n  { \n    return friendViewModel.Friends == null ?\n       0 : friendViewModel.Friends.Length; \n  } \n\n  public override UITableViewCell GetCell(\n     UITableView tableView, NSIndexPath indexPath) \n  { \n    var friend =\n       friendViewModel.Friends[indexPath.Row]; \n    var cell = tableView.DequeueReusableCell(CellName); \n    if (cell == null) \n    { \n      cell = new UITableViewCell(\n         UITableViewCellStyle.Default, CellName); \n      cell.AccessoryView =\n         UIButton.FromType(UIButtonType.ContactAdd); \n      cell.AccessoryView.UserInteractionEnabled = false; \n    } \n    cell.TextLabel.Text = friend.Name; \n    return cell; \n  } \n} \n\n```", "```kt\nreadonly FriendViewModel friendViewModel =\n   ServiceContainer.Resolve<FriendViewModel>(); \n\npublic override void ViewDidLoad() \n{ \n  base.ViewDidLoad(); \n\n  TableView.Source = new TableSource(); \n} \n\npublic async override void ViewWillAppear(bool animated) \n{ \n  base.ViewWillAppear(animated); \n\n  try \n  { \n    await friendViewModel.GetFriends(); \n\n    TableView.ReloadData(); \n  } \n  catch(Exception exc) \n  { \n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show(); \n  } \n} \n\n```", "```kt\nclass TableSource : UITableViewSource\n{\n  const string MyCellName = \"MyCell\";\n  const string TheirCellName = \"TheirCell\";\n  readonly MessageViewModel messageViewModel =\n    ServiceContainer.Resolve();\n  readonly ISettings settings = ServiceContainer.Resolve();\n\n  public override nint RowsInSection(\n    UITableView tableview, nint section)\n  {\n    return messageViewModel.Messages == null ? 0 :\n      messageViewModel.Messages.Length;\n  }\n\n  public override UITableViewCell GetCell(\n    UITableView tableView, NSIndexPath indexPath)\n  {\n    var message = messageViewModel.Messages [indexPath.Row];\n    bool isMyMessage = message.UserName == settings.User.Name;\n    var cell = (BaseMessageCell)tableView.DequeueReusableCell(\n      isMyMessage ? MyCellName : TheirCellName);\n    cell.TextLabel.Text = message.Text;\n    return cell;\n  }\n}\n\n```", "```kt\nreadonly MessageViewModel messageViewModel = \n  ServiceContainer.Resolve<MessageViewModel>(); \n\npublic override void ViewDidLoad() \n{ \n  base.ViewDidLoad(); \n\n  TableView.Source = new TableSource(); \n} \n\npublic async override void ViewWillAppear(bool animated) \n{ \n  base.ViewWillAppear(animated); \n\n  Title = messageViewModel.Conversation.UserName; \n  try \n  { \n    await messageViewModel.GetMessages(); \n    TableView.ReloadData(); \n  } \n  catch (Exception exc) \n  { \n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show(); \n  } \n} \n\n```", "```kt\nreadonly ConversationsController controller; \n\npublic TableSource(ConversationsController controller) \n{ \n  this.controller = controller;\n}\n\npublic override void RowSelected(\n  UITableView tableView, NSIndexPath indexPath)\n{ \n  var conversation = messageViewModel.Conversations[indexPath.Row]; \n  messageViewModel.Conversation = conversation; \n  controller.PerformSegue(\"OnConversation\", this); \n}\n\n```", "```kt\nTableView.Source = new TableSource(this); \n\n```", "```kt\nUIToolbar toolbar; \nUITextField message; \nUIBarButtonItem send; \n\n```", "```kt\npublic override void ViewDidLoad() \n{ \n  base.ViewDidLoad(); \n\n  //Text Field \n  message = new UITextField( \n    new CGRect(0, 0, TableView.Frame.Width - 88, 32)) \n  { \n    BorderStyle = UITextBorderStyle.RoundedRect, \n    ReturnKeyType = UIReturnKeyType.Send, \n    ShouldReturn = _ => \n    { \n        Send(); \n        return false; \n    }, \n  }; \n\n  //Bar button item \n  send = new UIBarButtonItem(\"Send\", UIBarButtonItemStyle.Plain, \n    (sender, e) => Send()); \n\n  //Toolbar \n  toolbar = new UIToolbar( \n    new CGRect(0, TableView.Frame.Height - 44,  \n      TableView.Frame.Width, 44)); \n  toolbar.Items = new[] \n  { \n    new UIBarButtonItem(message), \n    send \n  }; \n\n  TableView.Source = new TableSource(); \n  TableView.TableFooterView = toolbar; \n} \n\n```", "```kt\npublic async override void ViewWillAppear(bool animated) \n{ \n  base.ViewWillAppear(animated); \n\n  Title = messageViewModel.Conversation.Username; \n\n  messageViewModel.IsBusyChanged += OnIsBusyChanged; \n\n  try \n  { \n    await messageViewModel.GetMessages(); \n    TableView.ReloadData(); \n    message.BecomeFirstResponder(); \n  } \n  catch (Exception exc) \n  { \n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show(); \n  } \n} \n\n```", "```kt\npublic override void ViewWillDisappear(bool animated) \n{ \n  base.ViewWillDisappear(animated); \n\n  messageViewModel.IsBusyChanged -= OnIsBusyChanged; \n} \n\n```", "```kt\nvoid OnIsBusyChanged (object sender, EventArgs e) \n{ \n  message.Enabled = send.Enabled = !messageViewModel.IsBusy; \n} \n\n```", "```kt\nasync void Send() \n{ \n  //Just hide the keyboard if they didn't type anything \n  if (string.IsNullOrEmpty(message.Text)) \n  { \n    message.ResignFirstResponder(); \n    return; \n  } \n\n  //Set the text, send the message \n  messageViewModel.Text = message.Text; \n  await messageViewModel.SendMessage(); \n\n  //Clear the text field & view model \n  message.Text = messageViewModel.Text = string.Empty; \n\n  //Reload the table \n  TableView.InsertRows(new[]  \n  {  \n    NSIndexPath.FromRowSection( \n      messageViewModel.Messages.Length - 1, 0)  \n  }, UITableViewRowAnimation.Automatic); \n} \n\n```"]