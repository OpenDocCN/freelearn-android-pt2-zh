- en: Chapter 2. Important Features of the IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter describes several important features in Eclipse and an ADT Environment
    useful to develop an Android app. It is separated into the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Project explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphical user interface designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging pane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dalvik Debug Monitor Server (DDMS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SDK manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android virtual device manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The project explorer is a tool to view all folders and files under a project.
    By double-clicking the item, one can open and edit the file. When we create a
    new project, which will be discussed thoroughly in [Chapter 3](ch03.html "Chapter 3. Creating
    a New Android Project"),*Creating a New Project*, the ADT will automatically create
    all these default folders and files, as shown in the following screenshot. Depending
    on the project, we may ignore or modify all these files. These are brief descriptions
    of the default folders and files in your Android project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project explorer](img/1103OS-02-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Project explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'The table that follows contains the brief description of the important folders
    and files available in the project tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder | Functions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/src` | the Java codes are here |'
  prefs: []
  type: TYPE_TB
- en: '| `/gen` | generated automatically |'
  prefs: []
  type: TYPE_TB
- en: '| `/assets` | put your fonts, videos, sounds here. Is more like a file system
    and can also place css, javascript files and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `/libs` | external library (normally in JAR) |'
  prefs: []
  type: TYPE_TB
- en: '| `/res` | images, layout, and global variables |'
  prefs: []
  type: TYPE_TB
- en: '| `/drawable-xhdpi` | for extra high specification devices (for examples Tablet,
    Galaxy SIII, HTC One X) |'
  prefs: []
  type: TYPE_TB
- en: '| `/drawable-hdpi ` | for high specification phones (Examples: SGSI, SGSII)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/drawable-mdpi` | for medium specification phones (Examples: Galaxy W, HTC
    Desire) |'
  prefs: []
  type: TYPE_TB
- en: '| `/drawable-ldpi ` | for low specification phones (Examples: Galaxy Y, HTC
    WildFire ) |'
  prefs: []
  type: TYPE_TB
- en: '| `/layout ` | all XML files for the screen(s) layout |'
  prefs: []
  type: TYPE_TB
- en: '| `/menu` | XML files for the screen menu |'
  prefs: []
  type: TYPE_TB
- en: '| `/values` | global constants |'
  prefs: []
  type: TYPE_TB
- en: '| `/values-v11` | template style definitions for devices with Honeycomb (Android
    API level 11) |'
  prefs: []
  type: TYPE_TB
- en: '| `/values-v14` | template style definitions for devices with ICS (Android
    API level 14) |'
  prefs: []
  type: TYPE_TB
- en: '| `AndroidManifest.xml` | One of the important files to define the apps. This
    is the first file located by the Android OS in order to run the app. It contains
    the app''s properties, activity declarations and list of permissions. |'
  prefs: []
  type: TYPE_TB
- en: Code editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the tool where the programming is cooked. Several important features
    of the Eclipse code editor (programmers love to have) are intelligence and the
    error marker (refer screenshot to follow). Code completion suggests objects, methods
    or variables available to be incorporated in our code, while the error marker
    will notify any syntax error immediately without having to compile the code. These
    features help a lot for faster programming:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code editor](img/1103OS-02-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code editor
  prefs: []
  type: TYPE_NORMAL
- en: 'The code editor''s appearance is customizable to suit your style and preference.
    To change the editor''s environment, such as the background color or the code''s
    font styles, right-click on the editor and choose **Preferences**, and then navigate
    to **General** | **Appearance** | **Colors and Fonts**. Then click on **Edit**
    to customize, refer the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code editor](img/1103OS-02-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing the Code Editor's appearance
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also several other XML code editors that help during design and development.
    They come in two flavors: GUI based; where things can be manipulated with a GUI
    interface, useful for someone who is uncomfortable editing the XML code manually;
    Source based: where XML codes can be manually edited. Some of the editors are
    listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Graphical layout editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit and design your XML layout files with a drag and drop interface. The layout
    editor renders your interface as well, offering you a preview as you design your
    layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Android manifest editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit Android manifests with a simple graphical interface. This editor is invoked
    when you open an `AndroidManifest.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Menu editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit menu groups and items with a simple graphical interface. This editor is
    invoked when you open an XML file with a `<menu>` declared (usually located in
    the `res/menu` folder).
  prefs: []
  type: TYPE_NORMAL
- en: Resources editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit resources with a simple graphical interface. This editor is invoked when
    you open an XML file with a `<resources>` tag declared.
  prefs: []
  type: TYPE_NORMAL
- en: XML resources editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit XML resources with a simple graphical interface. This editor is invoked
    when you open an XML file.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical user interface designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the interface designer. It functions as the GUI editor for controls
    or a **widget** to the application screen. There are three sections of this GUI
    designer, the palette, configuration chooser and the screen layout preview, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface designer](img/1103OS-02-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ADT's GUI designer
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Palette** contains all the GUI controls (widgets) that can help us design
    the interface. The available controls depend upon the API level we choose during
    creation of the project. Some of the common controls are: button, text field,
    radio button, check box, multimedia controls and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The configuration chooser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It lets you decide the appearance of your app view across different screen sizes,
    orientation, densities and themes.
  prefs: []
  type: TYPE_NORMAL
- en: The screen layout designer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a canvas to put things up and try out different designs. It is a designing
    workspace. Also, it provides a preview of how the screen may appear in a device.
  prefs: []
  type: TYPE_NORMAL
- en: Properties window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It helps in editing properties of the widgets. All the properties corresponding
    to widgets can be viewed and edited via this window visually. Though the properties
    can be edited directly by editing the XML file, this GUI interface eases it. All
    the changes made are persisted to XML file instantly and automatically. The following
    screenshot shows the **Properties** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Properties window](img/1103OS-02-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Properties window
  prefs: []
  type: TYPE_NORMAL
- en: Debugging pane
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the debugging perspective, we see the syntax errors, warning, console messages,
    run-time errors, variable transition (if breakpoint is used) and **LogCat.** **LogCat**
    is useful to trace any activity happening inside the device or emulator. The following
    screenshot shows the window to list all code problems, such as warnings or syntax
    errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging pane](img/1103OS-02-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Problems warnings or code syntax errors
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample of console messages from the ADB is listed in the following screenshot.
    As a java person, we would be tempted to use `System.out.println()` to split out
    message and objects'' values; which are shown in the **LogCat** view, however
    it is advisable to use `Log` class for this purpose, reason being we can filter,
    print different colors and define log types. This could be one way of debugging
    your program, by displaying variables'' values or parameters. To use `Log`, import
    `android.util.Log`, and use one of the following methods to print messages to
    **LogCat**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Debugging pane](img/1103OS-02-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Android Debug Bridge console (displays ADB activities)
  prefs: []
  type: TYPE_NORMAL
- en: '**LogCat** is used to view the internal log of the Android system, as shown
    in the following screenshot. It is useful to trace any activity happening inside
    the device or emulator through the ADB (Android Debug Bridge). ADB is a tool to
    connect your PC with the virtual device or actual device. Without it, the developer
    cannot directly transmit the APK file to an Android device/emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging pane](img/1103OS-02-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The LogCat (tracedump of all device/emulator activities)
  prefs: []
  type: TYPE_NORMAL
- en: Dalvik Debug Monitor Server (DDMS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DDMS is a must have tool to view the emulator/device activities. To access
    DDMS in the Eclipse, navigate to **Windows** | **Open Perspective** | **Other**
    and then choose **DDMS**. By default it is available in the Android SDK (it''s
    inside the folder `android-sdk/tools` by the file `ddms`). From this perspective
    the following aspects are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Devices**: The list of the devices and AVDs that are connected to ADB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emulator Control**: It helps to carry out device functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LogCat**: It views real time system log messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threads**: It gives an idea of currently running threads within a VM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Heap**: It shows heap usage by application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allocation Tracker**: It provides information on memory allocation of objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Explorer**: It explores the device file system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image shows important aspects of DDMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dalvik Debug Monitor Server (DDMS)](img/1103OS-02-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dalvik Debug Monitor Server (DDMS)
  prefs: []
  type: TYPE_NORMAL
- en: SDK manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SDK Manager is the tool to update Android SDK and manage the download of Android
    OS system images, documentations, and APIs. The icon appears, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SDK manager](img/1103OS-02-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The SDK manager icon
  prefs: []
  type: TYPE_NORMAL
- en: The next screen to follow, as shown in the screenshot has a very long list.
    We need to be very decisive about what API level we need and select accordingly
    as the download may take significant time, depending upon the Internet speed.
    If not sure then choose the latest API level.
  prefs: []
  type: TYPE_NORMAL
- en: Expand the API level we want to issue and check the SDK platform. This download
    consists of the API for the corresponding level and the Android OS system image.
    By default, the system image is based on the ARM's architecture. However to run
    Android OS system image faster on an Intel architecture machine, just tick the
    **Intel Atom x86 System Image** option.
  prefs: []
  type: TYPE_NORMAL
- en: Tick the **Samples for SDK** if you need to learn from the samples. If your
    app needs to incorporate the Google special API (such as the Google Maps), then
    you might need to download the Google API. The rest of the list is about the device
    specific APIs. Unless you are planning to optimize your app for a certain device,
    then do not download.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have finished selecting the necessary APIs, then click on the **Install
    package** button. Should you have any connection reset problem while downloading,
    navigate to **Tools** | **Options**. Uncheck the **Force https://...** sources
    to be fetched using **http://...** and try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SDK manager](img/1103OS-02-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Android SDK Manager window
  prefs: []
  type: TYPE_NORMAL
- en: Android virtual device manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android virtual device is a virtual mobile device (emulator) that runs on your
    computer. The emulator lets you test an Android application without using a physical
    device. Although, it's not the best testing approach, as it just mimics the device,
    but at least you have something to test in case you cannot afford an actual Android
    device.
  prefs: []
  type: TYPE_NORMAL
- en: When the emulator is running, you can interact with the emulated mobile device
    just as you would in an actual mobile device, except that you use your mouse pointer
    to touch the touchscreen and you are able to use some keyboard keys to invoke
    certain keys on the device.
  prefs: []
  type: TYPE_NORMAL
- en: The Android emulator mimics all of the hardware and software features of a typical
    mobile device, except that it cannot place actual phone calls. It provides a variety
    of navigation and control keys, which you can "tap" using your mouse or keyboard
    to generate events for your application. It also provides a screen in which your
    application is displayed, together with any other running Android applications.
    For some features we may have to be aware of hot keys and details are at [http://developer.android.com/tools/help/emulator.html#KeyMapping](http://developer.android.com/tools/help/emulator.html#KeyMapping)
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the button as shown in the following screenshot, to open the Android
    SDK and **AVD Manager** window. **AVD** is **Android Virtual Device**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android virtual device manager](img/1103OS-02-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The AVD icon
  prefs: []
  type: TYPE_NORMAL
- en: 'The **AVD Manager** is shown in the following screenshot. First, click on **New…**
    to set a new emulator, as seen in the screenshot. Enter a name (for example, `nexus`),
    choose a target (make sure the Android OS system image has been downloaded for
    the selected target), and for simplicity choose the device, and all other fields
    will be auto-populated. We can also edit if you want something different. Also,
    choose **CPU** as **ARM (armeabi-v7a)** and click on **Create AVD**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android virtual device manager](img/1103OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new AVD
  prefs: []
  type: TYPE_NORMAL
- en: Click on the new AVD that is already created, and start the AVD using the **Start**
    button. Use the default setting and click on the **Launch** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Android virtual device manager](img/1103OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we have a lower specification of processor and memory, you will notice that
    its emulator boot-up is really slow. I would like to advise you to have at least
    3GB of RAM to make it faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait until the left screen displays a nice picture with icons, as shown in
    the following screenshot. The left component is your device (smartphone) screen
    and the right component is the physical smartphone keypad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android virtual device manager](img/1103OS-02-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Android emulator
  prefs: []
  type: TYPE_NORMAL
- en: Running the Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The project with no error will be able to be executed and sent to the AVD.
    To run a project, click on the **Run** button as, shown on the following image.
    If your system is already running several emulators, Eclipse will ask which version
    of the emulator to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the Application](img/1103OS-02-16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Run application button
  prefs: []
  type: TYPE_NORMAL
- en: Getting help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to **Help** in the menu, and choose **Search**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Eclipse help: [http://help.eclipse.org/juno/index.jsp](http://help.eclipse.org/juno/index.jsp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ADT help: [http://developer.android.com/tools/help/adt.html](http://developer.android.com/tools/help/adt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android developer''s official reference: [http://developer.android.com](http://developer.android.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ADT update: regularly check the ADT update from the menu, **Help** | **Check
    for Updates**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More on DDMS: [http://developer.android.com/tools/debugging/ddms.html](http://developer.android.com/tools/debugging/ddms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed several important tools available in the Eclipse
    and the ADT, such as the project explorer, code editor, graphical user interface
    designer, properties window, debugging pane, Dalvik debug monitor, SDK manager,
    AVD manager, and the run application facilities. The next chapter will discuss
    how to create a new Android application project.
  prefs: []
  type: TYPE_NORMAL
