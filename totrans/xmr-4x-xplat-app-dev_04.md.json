["```kt\npublic class User \n{ \n  //NOTE: we will treat this as a unique name \n  public string Name { get; set; } \n\n  //NOTE: we'll try to use this in a secure way \n  public string Password { get; set; } \n} \n\n```", "```kt\npublic class Conversation \n{ \n  public string Id { get; set; } \n\n  public string UserName { get; set; } \n} \n\npublic class Message \n{ \n  public string Id { get; set; } \n\n  //NOTE: the Id of a Conversation \n  public string Conversation { get; set; }  \n\n  public string UserName { get; set; } \n\n  public string Text { get; set; }\n\n//NOTE: some messages will include photos \n  public string Image { get; set; } \n} \n\n```", "```kt\npublic interface IWebService \n{ \n  Task<User> Login(string userName, string password); \n\n  Task<User> Register(User user); \n\n  Task<User[]> GetFriends(string userName); \n\n  Task<User> AddFriend(string username, string friendName); \n\n  Task<Conversation[]> GetConversations(string userName); \n\n  Task<Message[]> GetMessages(string conversation); \n\n  Task<Message> SendMessage(Message message); \n} \n\n```", "```kt\npublic class FakeWebService : IWebService\n{\n  public int SleepDuration { get; set; }\n\n  public FakeWebService()\n  {\n    SleepDuration = 1000;\n  }\n\n  private Task Sleep()\n  {\n    return Task.Delay(SleepDuration);\n  }\n\n  public async Task<User> Login(string userName, string password)\n  {\n    await Sleep(); \n    return new User { Name = userName }; \n  }\n}\n\n```", "```kt\npublic async Task<User[]> GetFriends(string userId)\n{\n  await Sleep();\n  return new[] \n  { \n    new User { Name = \"bobama\" }, \n    new User { Name = \"bobloblaw\" }, \n    new User { Name = \"georgemichael\" }, \n  };\n}\n\npublic async Task<User> AddFriend(\n  string username, string friendName)\n{\n  await Sleep(); \n  return new User { Name = friendName };\n}\n\n```", "```kt\npublic async Task<Conversation[]> GetConversations(\n  string userName)\n{\n  await Sleep();\n  return new[] \n  { \n    new Conversation { Id = \"1\", UserName = \"bobama\" },\n    new Conversation { Id = \"2\", UserName = \"bobloblaw\" }, \n    new Conversation { Id = \"3\", UserName = \"georgemichael\" }, \n  };\n}\n\n```", "```kt\npublic async Task<Message[]> GetMessages(string conversation) \n{ \n  await Sleep(); \n\n  return new[] \n  { \n    new Message \n    { \n      Id = \"1\", \n      Conversation = conversation, \n      UserName = \"bobloblaw\", \n      Text = \"Hey\", \n    }, \n    new Message \n    { \n      Id = \"2\", \n      Conversation = conversation, \n      UserName = \"georgemichael\", \n      Text = \"What's Up?\", \n    }, \n    new Message \n    { \n      Id = \"3\", \n      Conversation = conversation, \n      UserName = \"bobloblaw\", \n      Text = \"Have you seen that new movie?\", \n    }, \n    new Message \n    { \n      Id = \"4\", \n      Conversation = conversation, \n      UserName = \"georgemichael\", \n      Text = \"It's great!\", \n    }, \n  }; \n} \n\n```", "```kt\npublic async Task<Message> SendMessage(Message message) \n{ \n  await Sleep(); \n\n  return message; \n} \n\n```", "```kt\npublic interface ISettings \n{ \n  User User { get; set; } \n\n  void Save(); \n} \n\n```", "```kt\npublic class FakeSettings : ISettings \n{ \n  public User User { get; set; } \n\n  public void Save() { } \n} \n\n```", "```kt\npublic class BaseViewModel \n{ \n  protected readonly IWebService service = \n     ServiceContainer.Resolve<IWebService>(); \n  protected readonly ISettings settings = \n     ServiceContainer.Resolve<ISettings>(); \n\n  public event EventHandler IsBusyChanged = (sender, e) => { }; \n\n  private bool isBusy = false; \n\n  public bool IsBusy \n  { \n    get { return isBusy; } \n    set \n    { \n      isBusy = value; \n      IsBusyChanged(this, EventArgs.Empty); \n    } \n  } \n} \n\n```", "```kt\npublic class LoginViewModel : BaseViewModel \n{ \n  public string UserName { get; set; } \n\n  public string Password { get; set; } \n\n  public async Task Login() \n  { \n    if (string.IsNullOrEmpty(UserName)) \n      throw new Exception(\"Username is blank.\"); \n\n    if (string.IsNullOrEmpty(Password)) \n      throw new Exception(\"Password is blank.\"); \n\n    IsBusy = true; \n    try \n    { \n      settings.User = await service.Login(UserName, Password); \n      settings.Save(); \n    } \n    finally \n    { \n      IsBusy = false; \n    } \n  } \n} \n\n```", "```kt\npublic class RegisterViewModel : BaseViewModel \n{ \n  public string UserName { get; set; } \n\n  public string Password { get; set; } \n\n  public string ConfirmPassword { get; set; } \n} \n\n```", "```kt\npublic async Task Register() \n{ \n  if (string.IsNullOrEmpty(UserName)) \n    throw new Exception(\"Username is blank.\"); \n\n  if (string.IsNullOrEmpty(Password)) \n    throw new Exception(\"Password is blank.\"); \n\n  if (Password != ConfirmPassword) \n    throw new Exception(\"Passwords do not match.\"); \n\n  IsBusy = true; \n  try \n  { \n    settings.User = await service.Register(new User  \n    {  \n      Name = UserName, \n      Password = Password,  \n    }); \n    settings.Save(); \n  } \n  finally \n  { \n    IsBusy = false; \n  } \n} \n\n```", "```kt\npublic class FriendViewModel : BaseViewModel \n{ \n  public User[] Friends { get; private set; } \n\n  public string UserName { get; set; } \n} \n\n```", "```kt\npublic async Task GetFriends() \n{ \n  if (settings.User == null) \n    throw new Exception(\"Not logged in.\"); \n\n  IsBusy = true; \n  try \n  { \n    Friends = await service.GetFriends(settings.User.Name); \n  } \n  finally \n  { \n    IsBusy = false; \n  } \n} \n\n```", "```kt\npublic async Task AddFriend()\n{\n  if (settings.User == null)\n    throw new Exception(\"Not logged in.\");\n  if (string.IsNullOrEmpty(UserName))\n    throw new Exception(\"Username is blank.\");\n  IsBusy = true; \n\n  try \n  { \n    var friend = await service\n      .AddFriend(settings.User.Name, UserName); \n    //Update our local list of friends \n    var friends = new List<User>(); \n    if (Friends != null)\n      friends.AddRange(Friends); \n    friends.Add(friend); \n    Friends =  friends.OrderBy(f => f.Name).ToArray(); \n  } \n  finally \n  { \n    IsBusy =  false; \n  }\n}\n\n```", "```kt\npublic class MessageViewModel : BaseViewModel \n{ \n  public Conversation[] Conversations { get; private set; } \n\n  public Conversation Conversation { get; set; } \n\n  public Message[] Messages { get; private set; } \n\n  public string Text { get; set; } \n} \n\n```", "```kt\npublic async Task GetConversations() \n{ \n  if (settings.User == null) \n    throw new Exception(\"Not logged in.\"); \n\n  IsBusy = true; \n  try \n  { \n    Conversations = await service\n       .GetConversations(settings.User.Name); \n  } \n  finally \n  { \n    IsBusy = false; \n  } \n} \n\n```", "```kt\npublic async Task GetMessages() \n{ \n  if (Conversation == null) \n    throw new Exception(\"No conversation.\"); \n\n  IsBusy = true; \n  try \n  { \n    Messages = await service\n       .GetMessages(Conversation.Id); \n  } \n  finally \n  { \n    IsBusy = false; \n  } \n} \n\n```", "```kt\npublic async Task SendMessage() \n{ \n  if (settings.User == null) \n    throw new Exception(\"Not logged in.\"); \n\n  if (Conversation == null) \n    throw new Exception(\"No conversation.\"); \n\n  if (string.IsNullOrEmpty (Text)) \n    throw new Exception(\"Message is blank.\"); \n\n  IsBusy = true; \n  try \n  { \n    var message = await service.SendMessage(new Message  \n    {  \n        UserName = settings.User.Name,\n         Conversation = Conversation.Id, \n        Text = Text \n    }); \n\n    //Update our local list of messages \n    var messages = new List<Message>(); \n    if (Messages != null) \n      messages.AddRange(Messages); \n    messages.Add(message); \n\n    Messages = messages.ToArray(); \n  } \n  finally \n  {\n    IsBusy = false; \n  } \n} \n\n```", "```kt\nAssert.That(myVariable, Is.EqualTo(0)); \n\n```", "```kt\nAssert.That(myVariable, Is.Not.EqualTo(0)); \n\n```", "```kt\npublic class BaseTest \n{ \n  [SetUp] \n  public virtual void SetUp() \n  { \n    ServiceContainer.Register<IWebService>(() =>\n       new FakeWebService { SleepDuration = 0 }); \n    ServiceContainer.Register<ISettings>(() =>\n       new FakeSettings()); \n  } \n} \n\n```", "```kt\n[TestFixture] \npublic class LoginViewModelTests : BaseTest \n{ \n  LoginViewModel loginViewModel; \n  ISettings settings; \n\n  [SetUp] \n  public override void SetUp() \n  { \n    base.SetUp(); \n\n    settings = ServiceContainer.Resolve<ISettings>(); \n    loginViewModel = new LoginViewModel(); \n  } \n\n  [Test] \n  public async Task LoginSuccessfully() \n  { \n    loginViewModel.UserName = \"testuser\"; \n    loginViewModel.Password = \"password\"; \n\n    await loginViewModel.Login(); \n\n    Assert.That(settings.User, Is.Not.Null); \n  } \n} \n\n```", "```kt\n//Change Is.Not.Null to Is.Null \nAssert.That(settings.User, Is.Null); \n\n```", "```kt\n[Test] \npublic async Task LoginWithNoUsernameOrPassword() \n{ \n  //Throws an exception \n  await loginViewModel.Login(); \n} \n\n```", "```kt\n[Test,  \n  ExpectedException(typeof(Exception),  \n  ExpectedMessage = \"Username is blank.\")] \n\n```"]