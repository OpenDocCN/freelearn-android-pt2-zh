["```kt\n@PersistenceCapable(detachable = \"true\")\n@Inheritance(strategy = InheritanceStrategy.SUBCLASS_TABLE)\npublic class ModelBase {\n@PrimaryKey\n@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)\nprivate Long id;\npublic Long getId() {\nreturn id;\n}\n}\n\n```", "```kt\n@PersistenceCapable(detachable = \"true\")\n@Inheritance(strategy = InheritanceStrategy.SUBCLASS_TABLE)\n\n```", "```kt\n// NOTE HOW WE DECLARE OUR OBJECT AS PERSISTENCE CAPABLE\n@PersistenceCapable\npublic class VideoGame extends ModelBase {\n// NOTE THE PERSISTENT TAGS\n@Persistent\nprivate String name;\n// USE A SPECIAL GOOGLE APP ENGINE LINK CLASS FOR URLS\n@Persistent\nprivate Link imgUrl;\n@Persistent\nprivate int consoleType;\npublic VideoGame(String name, String url, String consoleType) {\nthis.name = name;\nthis.imgUrl = new Link(url);\n// CONVERT ALL CONSOLES TO INTEGER TYPES\nthis.consoleType = VideoGameConsole.convertStringToInt(consoleType);\n}\npublic String getName() {\nreturn name;\n}\npublic void setName(String name) {\nthis.name = name;\n}\npublic Link getImgUrl() {\nreturn imgUrl;\n}\npublic void setImgUrl(Link imgUrl) {\nthis.imgUrl = imgUrl;\n}\npublic int getConsoleType() {\nreturn consoleType;\n}\npublic void setConsoleType(int consoleType) {\nthis.consoleType = consoleType;\n}\npublic static class VideoGameConsole {\npublic static final String XBOX = \"Xbox\";\npublic static final String PS3 = \"Ps3\";\npublic static final String WII = \"Wii\";\npublic static final String PSP = \"Psp\";\npublic static final String DS = \"NintendoDS\";\npublic static final String PS2 = \"Ps2\";\npublic static final String[] CATEGORIES = { \"Xbox\", \"Ps3\", \"Wii\", \"Psp\", \"NintendoDS\", \"Ps2\" };\npublic static int convertStringToInt(String type) {\nif (type == null) { return -1; }\nif (type.equalsIgnoreCase(XBOX)) {\nreturn 0;\n} else if (type.equalsIgnoreCase(PS3)) {\nreturn 1;\n} else if (type.equalsIgnoreCase(PS2)) {\nreturn 2;\n} else if (type.equalsIgnoreCase(PSP)) {\nreturn 3;\n} else if (type.equals(WII)) {\nreturn 4;\n} else if (type.equals(DS)) {\nreturn 5;\n} else {\nreturn -1;\n}\n}\n}\n}\n\n```", "```kt\npublic final class PMF {\nprivate static final PersistenceManagerFactory pmfInstance = JDOHelper.getPersistenceManagerFactory(\"transactions-optional\");\nprivate PMF() {\n}\npublic static PersistenceManagerFactory get() {\nreturn pmfInstance;\n}\n}\n\n```", "```kt\npublic class VideoGameJDOWrapper {\n/**\n* INSERT A SINGLE VIDEOGAME OBJECT\n*\n* @param g\n* - a video game object\n*/\npublic static void insertGame(VideoGame g) {\nPersistenceManager pm = PMF.get().getPersistenceManager();\ntry {\npm.makePersistent(g);\n} finally {\npm.close();\n}\n}\n/**\n* INSERT MULTIPLE VIDEOGAME OBJECTS - MORE EFFICIENT METHOD\n*\n* @param games\n* - a list of video game objects\n*/\npublic static void batchInsertGames(List<VideoGame> games) {\nPersistenceManager pm = PMF.get().getPersistenceManager();\ntry {\n// ONLY NEED TO RETRIEVE AND USE PERSISTENCEMANAGER ONCE\npm.makePersistentAll(games);\n} finally {\npm.close();\n}\n}\n}\n\n```", "```kt\npublic class VideoGameJDOWrapper {\npublic static void insertGame(VideoGame g) {\n. . .\n}\npublic static void batchInsertGames(List<VideoGame> games) {\n. . .\n}\n/**\n* GET ALL VIDEO GAMES OF A CERTAIN PLATFORM\n*\n* @param platform\n* - desired platform of games\n* @return\n*/\npublic static List<VideoGame> getGamesByType(String platform) {\nPersistenceManager pm = PMF.get().getPersistenceManager();\n// CONVERT STRING OF PLATFORM TO INT TYPE\nint type = VideoGameConsole.convertStringToInt(platform);\n// INIT A NEW QUERY AND SPECIFY THE OBJECT TYPE\nQuery query = pm.newQuery(VideoGame.class);\n// SET THE FILTER - EQUIVALENT TO SQL WHERE FILTER\nquery.setFilter(\"consoleType == inputType\");\n// TELL THE QUERY WHAT PARAMETERS YOU WILL SEND\nquery.declareParameters(\"int inputType\");\nList<VideoGame> ret = null;\ntry {\n// EXECUTE QUERY WITH PARAMETERS\nret = (List<VideoGame>) query.execute(type);\n} finally {\n// CLOSE THE QUERY AT THE END\nquery.closeAll();\n}\nreturn ret;\n}\n/**\n* GET ALL VIDEO GAMES OF A GIVEN PLATFORM WITH A LIMIT ON THE NUMBER OF\n* RESULTS\n*\n* @param platform\n* - desired platform of games\n* @param limit\n* - max number of results to return\n* @return\n*/\npublic static List<VideoGame> getGamesByTypeWithLimit (String platform, int limit) {\nint type = VideoGameConsole.convertStringToInt(platform);\nPersistenceManager pm = PMF.get().getPersistenceManager();\nQuery query = pm.newQuery(VideoGame.class);\nquery.setFilter(\"consoleType == inputType\");\nquery.declareParameters(\"int inputType\");\n// SAME QUERY AS ABOVE BUT THIS TIME SET A MAX RETURN LIMIT\nquery.setRange(0, limit);\nList<VideoGame> ret = null;\ntry {\nret = (List<VideoGame>) query.execute(type);\n} finally {\nquery.closeAll();\n}\nreturn ret;\n}\n/**\n* QUICKEST WAY TO RETRIEVE OBJECT IF YOU HAVE THE ID\n*\n* @param id\n* - row id of the object\n* @return\n*/\npublic static VideoGame getVideoGamesById(long id) {\nPersistenceManager pm = PMF.get().getPersistenceManager();\nreturn (VideoGame) pm.getObjectById(VideoGame.class, id);\n}\n}\n\n```", "```kt\nPersistenceManager pm = PMF.get().getPersistenceManager();\n// CONVERT STRING OF PLATFORM TO INT TYPE\nint type = VideoGameConsole.convertStringToInt(platform);\n// INIT A NEW QUERY AND SPECIFY THE OBJECT TYPE\nQuery query = pm.newQuery(VideoGame.class);\n\n```", "```kt\n// SET THE FILTER - EQUIVALENT TO SQL WHERE FILTER\nquery.setFilter(\"consoleType == inputType\");\n// TELL THE QUERY WHAT PARAMETERS YOU WILL SEND\nquery.declareParameters(\"int inputType\");\n\n```", "```kt\nquery.setRange(0, limit);\n\n```", "```kt\npublic class VideoGameJDOWrapper {\npublic static void insertGame(VideoGame g) {\n}\npublic static void batchInsertGames(List<VideoGame> games) {\n}\npublic static List<VideoGame> getGamesByType(String platform) {\n}\npublic static List<VideoGame> getGamesByTypeWithLimit (String platform, int limit) {\n. . .\n}\npublic static VideoGame getVideoGamesById(long id) {\n. . .\n}\n/**\n* METHOD FOR UPDATING THE NAME OF A VIDEO GAME\n*\n* @param newName\n* - new name of the game\n* @param id\n* - the row id of the object\n* @return\n*/\npublic static boolean updateVideoGameName(String newName, long id) {\nPersistenceManager pm = PMF.get().getPersistenceManager();\nboolean success = false;\ntry {\n// AS LONG AS PERSISTENCE MANAGER IS OPEN THEN ANY CHANGES TO OBJECT\n// WILL AUTOMATICALLY GET UPDATED AND STORED\nVideoGame v = (VideoGame) pm.getObjectById(VideoGame. class, id);\nif (v != null) {\n// KEEP PERSISTENCEMANAGER OPEN\nv.setName(newName);\nsuccess = true;\n}\n} catch (JDOObjectNotFoundException e) {\ne.printStackTrace();\nsuccess = false;\n} finally {\n// ONCE CHANGES ARE MADE - CLOSE MANAGER\npm.close();\n}\nreturn success;\n}\n/**\n* DELETE ALL GAMES OF A CERTAIN PLATFORM\n*\n* @param platform\n* - specify the platform of the games you want to delete\n*/\npublic static void deleteGamesByType(String platform) {\nPersistenceManager pm = PMF.get().getPersistenceManager();\nint type = VideoGameConsole.convertStringToInt(platform);\n// INIT QUERY AGAIN\nQuery query = pm.newQuery(VideoGame.class);\n// SAME WHERE FILTERS\nquery.setFilter(\"consoleType == inputType\");\nquery.declareParameters(\"int inputType\");\n// NOW CALL THE DELETE METHOD\nquery.deletePersistentAll(type);\n}\n}\n\n```", "```kt\nPersistenceManager pm = PMF.get().getPersistenceManager();\nboolean success = false;\ntry {\nVideoGame v = (VideoGame) pm.getObjectById(VideoGame.class, id);\nif (v != null) {\n// KEEP PERSISTENCEMANAGER OPEN\nv.setName(newName);\nsuccess = true;\n}\n}\n\n```", "```kt\n// NOW CALL THE DELETE METHOD\nquery.deletePersistentAll(type);\n\n```"]