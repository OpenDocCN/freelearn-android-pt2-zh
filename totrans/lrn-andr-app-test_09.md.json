["```kt\nandroid {\n  â€¦\n  buildTypes { \n        debug {\n            testCoverageEnabled true\n        }\n      }\n\n    jacoco {\n        version = '0.7.2.201409121644'\n    }\n}\n```", "```kt\n$./gradlew build createDebugCoverageReport\n\n```", "```kt\n$./gradlew build connectedCheck\n\n```", "```kt\n:app:connectedAndroidTest \n:app:createDebugCoverageReport \n:app:connectedCheck \n\nBUILD SUCCESSFUL\n\n```", "```kt\napply plugin: 'jacoco''jacoco''jacoco''jacoco'''\n```", "```kt\n$./gradlew jacocoTestReport \n\n```", "```kt\ntry {\n   double temp = Double.parseDouble(str);\n   double result = (option == Option.C2F)\n? TemperatureConverter.celsiusToFahrenheit(temp)\n: TemperatureConverter.fahrenheitToCelsius(temp);\n   String resultString = String.format(\"%.2f\",\",(\"%.(\"%.\"\",\",\" result);\n   destinationEditNumber.setNumber(result);\n   destinationEditNumber.setSelection(resultString.length());\n} catch (NumberFormatException ignore) {\n// WARNING this is generated whilst numbers are being entered,\n   // for example just a -''''''\n   // so we don'tdon'tdon'tdon't' want to show the error just yet\n} catch (Exception e) {\nsourceEditNumber.setError(\"ERROR: \" + e.getLocalizedMessage());\n}\n```", "```kt\n} catch (InvalidTemperatureException e) {\nsourceEditNumber.setError(\"ERROR: \" + e.getLocalizedMessage());\n}\n```", "```kt\npublic void testInvalidTemperatureInCelsius() throws Throwable {\n        runTestOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                celsiusInput.requestFocus();\n            }\n        });\n        getInstrumentation().waitForIdleSync();\n\n        // invalid temp less than ABSOLUTE_ZERO_C\n        sendKeys(\"MINUS 3 8 0\");\");\");\");\"\n\n        String msg = \"Expected celsius input to contain an error.\";.\";.\";.\";\"\n        assertNotNull(msg, celsiusInput.getError());\n}\n```", "```kt\ndependencies {\n\n    ...\n\n    androidTestCompile('com.jayway.android.robotium:robotium-solo:5.2.1')\n}\n```", "```kt\npublic class TemperatureConverterActivityTests extends \nActivityInstrumentationTestCase2<TemperatureConverterActivity> {\n\n    private TemperatureConverterActivity activity;\n    private Solo solo;\n\n    public TemperatureConverterActivityTests() {\n        super(TemperatureConverterActivity.class);\n    }\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        activity = getActivity();\n        solo = new Solo(getInstrumentation(), activity);\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n        solo.finishOpenedActivities();\n        super.tearDown();\n    }\n}\n```", "```kt\npublic void testFahrenheitToCelsiusConversion() {\nsolo.clearEditText(CELSIUS_INPUT);\n   solo.clearEditText(FAHRENHEIT_INPUT);\n   solo.clickOnEditText(FAHRENHEIT_INPUT);\n   solo.enterText(FAHRENHEIT_INPUT, \"32.5\");\n   solo.clickOnEditText(CELSIUS_INPUT);\n   double f = 32.5;\n   double expectedC = TemperatureConverter.fahrenheitToCelsius(f);\n   double actualC = \n((EditNumber) solo.getEditText(CELSIUS_INPUT)).getNumber();\n   double delta = Math.abs(expectedC - actualC);\n\n   String msg = f + \"F -> \" + expectedC + \"C \"\n     + \"\"\"\"\"but was \" + actualC + \"C (delta \" + delta + \")\";\n   assertTrue(msg, delta < 0.005);\n}\n```", "```kt\n  private static final int CELSIUS = 0;\n  private static final int FAHRENHEIT = 1;\n```", "```kt\npublic final void testClickOptionMenuSavesDecimalPreference() {\nint decimalPlaces = 5;\n   String numberRegEx = \"^[0-9]+$\";\n\n   solo.sendKey(Solo.MENU);\n   solo.clickOnText(\"Preferences\");\n   solo.clickOnText(\"Decimal places\");\n   assertTrue(solo.searchText(numberRegEx));\n\n   solo.clearEditText(DECIMAL_PLACES);\n   assertFalse(solo.searchText(numberRegEx));\n\n   solo.enterText(DECIMAL_PLACES, Integer.toString(decimalPlaces));\nsolo.clickOnButton(\"OK\");\n   solo.goBack();\n\n   solo.sendKey(Solo.MENU);\n   solo.clickOnText(\"Preferences\");\n   solo.clickOnText(\"Decimal places\");\n   assertTrue(solo.searchText(numberRegEx));\n\n   int editTextDecimalPlaces = \nInteger.parseInt(solo.getEditText(DECIMAL_PLACES)\n.getText().toString());\nassertEquals(decimalPlaces, editTextDecimalPlaces);\n}\n```", "```kt\n  private static final int DECIMAL_PLACES = 2;\n```", "```kt\njava.lang.RuntimeException: Stub!\n at android.content.Context.<init>(Context.java:4)\n at android.content.ContextWrapper.<init>(ContextWrapper.java:5)\n at android.app.Application.<init>(Application.java:6)\n\n```", "```kt\nthrow new RuntimeException(\"Stub!\");\n\n```", "```kt\ntestCompile 'org.robolectric:robolectric:2.4'\n```", "```kt\ndef androidModuleName = \":app\";\ndef flavor = \"debug\"\n\nevaluationDependsOn(androidModuleName)\n\napply plugin: 'java'\n\ndependencies {\n    def androidModule = project(androidModuleName)\n    testCompile project(path: androidModuleName, \nconfiguration: \"${flavor}Compile\")\n\n    def debugVariant = androidModule.android.applicationVariants\n.find({ it.name == flavor })\n    testCompile debugVariant.javaCompile.classpath\n    testCompile debugVariant.javaCompile.outputs.files\n    testCompile files(\nandroidModule.plugins.findPlugin(\"com.android.application\")\n.getBootClasspath())\n\n    testCompile 'junit:junit:4.12'\n    testCompile 'org.robolectric:robolectric:2.4'\n}\n```", "```kt\nWARNING: No manifest file found at ./AndroidManifest.xml.Falling back to the Android OS resources only. To remove this warning, annotate your test class with @Config(manifest=Config.NONE).\n\n```", "```kt\nmanifest=../app/src/main/AndroidManifest.xml\nemulateSdk = 16\n```", "```kt\n@RunWith(RobolectricTestRunner.class)\npublic class EditNumberTests {\n\n  private static final double DELTA = 0.00001d;\n\n  private EditNumber editNumber;\n```", "```kt\n@RunWith annotation. Then we defined the editNumber field, to hold the reference to the EditNumber class:\n```", "```kt\n    @Before\n    public void setUp() throws Exception {\n        editNumber = new EditNumber(Robolectric.application);\n        editNumber.setFocusable(true);\n    } \n```", "```kt\ncomprises the usual setup() method. In the setUp() method, we created an EditNumber with an application context, and then we set it as focusable. The context is used to create the view, and Robolectric handles this for us:\n```", "```kt\n    @Test\n    public final void testClear() {\n        String value = \"123.45\";\";\";\";\"\n        editNumber.setText(value);\n\n        editNumber.clear();\n\n        assertEquals(\"\",  editNumber.getText().toString());\n    }\n    @Test\n    public final void testSetNumber() {\n        editNumber.setNumber(123.45);\n\n        assertEquals(\"123.45\", editNumber.getText().toString());\n    }\n\n    @Test\n    public final void testGetNumber() {\n        editNumber.setNumber(123.45);\n\n        assertEquals(123.45, editNumber.getNumber(), DELTA);\n    }\n```", "```kt\nEditNumber tests of our previous examples.\n```", "```kt\norg.junit.Assert.assertEquals(3, myList.size());\n```", "```kt\njava.lang.AssertionError: \nExpected :3\nActual   :2\n```", "```kt\nassertEquals(\"List not the correct size \" + myList, \n3, myList.size());\n```", "```kt\njava.lang.AssertionError: List not the correct size [A, B] \nExpected :3\nActual   :2\n```", "```kt\norg.fest.assertions.api.assertThat(myList).hasSize(3);\n```", "```kt\njava.lang.AssertionError: expected size:<3> but was:<2> in:<['A', 'B'']>\n```", "```kt\nassertThat(myList).contains(\"A\", \"\"B\", \"\"C\");\noutput: \n  java.lang.AssertionError: expecting:\n<['A',]>\n to contain:\n<['A', 'B', 'C']>\n but could not find:\n<['C']>\n```", "```kt\nassertEquals(View.VISIBLE, layout.getVisibility());\n\nassertThat(layout).isVisible();\n```", "```kt\ntestCompile 'org'.easytesting:fest-assert-core:2.0M10'\n```", "```kt\ntestCompile com.squareup.spoon:spoon-client:1.1.2\n```", "```kt\nSpoon.screenshot(activity, \"max_celcius_to_fahrenheit\");\n```", "```kt\n$java -jar spoon-runner-1.1.2-jar-with-dependencies.jar \\\n --apk androidApplicationTestGuide.apk \\\n--test-apk androidApplicationTestGuideTests.apk\n\n```", "```kt\nbuildscript {\n    dependencies {\n        classpath 'com'.shazam.fork:fork-gradle-plugin:0.10.0'\n    }\n}\n\napply plugin: 'fork'\n```", "```kt\n./gradlew fork\n```"]