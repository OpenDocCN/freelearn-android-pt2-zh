["```kt\npublic class AccessPrivateDataTest extends AndroidTestCase {\n\n   public void testAccessAnotherAppsPrivateDataIsNotPossible()  {\n        String filesDirectory = getContext().getFilesDir().getPath();\n        String privateFilePath = filesDirectory + \n\"/data/com.android.cts.appwithdata/private_file.txt\";\n        try {\n            new FileInputStream(privateFilePath);\n            fail(\"Was able to access another app's private data\");\n        } catch (FileNotFoundException e) {\n            // expected\n        }\n   }\n}\n```", "```kt\npublic class RenamingMockContext extends RenamingDelegatingContext {\n\n    private static final String PREFIX = \"test.\";\n\n    public RenamingMockContext(Context context) {\n        super(context, PREFIX);\n    }\n\n    @Override\n    public SharedPreferences getSharedPreferences(String name, int mode) {\n        return super.getSharedPreferences(PREFIX + name, mode);\n    }\n}\n```", "```kt\npublic class TemperatureConverterApplicationTests extends ApplicationTestCase<TemperatureConverterApplication> {\n\n    public TemperatureConverterApplicationTests() {\n        this(\"TemperatureConverterApplicationTests\");\n    }\n\n    public TemperatureConverterApplicationTests(String name) {\n        super(TemperatureConverterApplication.class);\n        setName(name);\n    }\n\n    public void testSetAndRetreiveDecimalPlaces() {\n        RenamingMockContext mockContext = new RenamingMockContext(getContext());\n        setContext(mockContext);\n        createApplication();\n        TemperatureConverterApplication application = getApplication();\n\n        application.setDecimalPlaces(3);\n\n        assertEquals(3, application.getDecimalPlaces());\n    }\n}\n```", "```kt\npublic class TemperatureConverterApplication extends Application {\n    private static final int DECIMAL_PLACES_DEFAULT = 2;\n    private static final String KEY_DECIMAL_PLACES = \".KEY_DECIMAL_PLACES\";\n\n    private SharedPreferences sharedPreferences;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n    }\n\n    public void setDecimalPlaces(int places) {\n        Editor editor = sharedPreferences.edit();\n        editor.putInt(KEY_DECIMAL_PLACES, places);\n        editor.apply();\n    }\n\n    public int getDecimalPlaces() {\n        return sharedPreferences.getInt(KEY_DECIMAL_PLACES, DECIMAL_PLACES_DEFAULT);\n    }\n}\n```", "```kt\npublic class ForwardingActivity extends Activity {\n    private static final int GHOSTBUSTERS = 999121212;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_forwarding);\n        View button = findViewById(R.id.forwarding_go_button);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(\"tel:\" + GHOSTBUSTERS);\n                startActivity(intent);\n                finish();\n            }\n        });\n    }\n}\n```", "```kt\npublic class ForwardingActivityTest extends ActivityUnitTestCase<ForwardingActivity> {\n    private Intent startIntent;\n\n    public ForwardingActivityTest() {\n        super(ForwardingActivity.class);\n    }\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        Context context = getInstrumentation().getContext();\n        startIntent = new Intent(context, ForwardingActivity.class);\n    }\n```", "```kt\npublic void testLaunchingSubActivityFiresIntentAndFinishesSelf() {\nActivity activity = startActivity(startIntent, null, null);\nView button = activity.findViewById(R.id.forwarding_go_button);\n\nbutton.performClick();\n\nassertNotNull(getStartedActivityIntent());\nassertTrue(isFinishCalled());\n}\n```", "```kt\npublic void testExampleOfLifeCycleCreation() {\n  Activity activity = startActivity(startIntent, null, null);\n\n  // At this point, onCreate() has been called, but nothing else\n  // so we complete the startup of the activity\n  getInstrumentation().callActivityOnStart(activity);\n  getInstrumentation().callActivityOnResume(activity);\n\n  // At this point you could test for various configuration aspects\n  // or you could use a Mock Context \n  // to confirm that your activity has made\n  // certain calls to the system and set itself up properly.\n\n  getInstrumentation().callActivityOnPause(activity);\n\n  // At this point you could confirm that \n  // the activity has paused properly,\n  // as if it is no longer the topmost activity on screen.\n\n    getInstrumentation().callActivityOnStop(activity);\n\n  // At this point, you could confirm that \n  // the activity has shut itself down appropriately,\n  // or you could use a Mock Context to confirm that \n  // your activity has released any\n  // system resources it should no longer be holding.\n\n  // ActivityUnitTestCase.tearDown() is always automatically called\n  // and will take care of calling onDestroy().\n }\n```", "```kt\npublic class MockContextExampleActivity extends Activity {\n    private static final String FILE_NAME = \"my_file.txt\";\n\n    private TextView textView;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mock_context_example);\n\n        textView = (TextView) findViewById(R.id.mock_text_view);\n        try {\n            FileInputStream fis = openFileInput(FILE_NAME);\n            textView.setText(convertStreamToString(fis));\n        } catch (FileNotFoundException e) {\n            textView.setText(\"File not found\");\n        }\n    }\n\n    private String convertStreamToString(java.io.InputStream is) {\n   Scanner s = new Scanner(is, \"UTF-8\").useDelimiter(\"\\\\A\");\n       return s.hasNext() ? s.next() : \"\";\n    }\n\n    public String getText() {\n        return textView.getText().toString();\n    }\n}\n```", "```kt\n$ adb shell \n$ echo \"This is real data\" > data/data/com.blundell.tut/files/my_file.txt\n\n$ echo \"This is *MOCK* data\" > /data/data/com.blundell.tut/files/test.my_file.txt\n\n```", "```kt\npublic class MockContextExampleTest \nextends ActivityUnitTestCase<MockContextExampleActivity> {\n\nprivate static final String PREFIX = \"test.\";\nprivate RenamingDelegatingContext mockContext;\n\npublic MockContextExampleTest() {\nsuper(MockContextExampleActivity.class);\n}\n\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp();\nmockContext = new RenamingDelegatingContext(getInstrumentation().getTargetContext(), PREFIX);\nmockContext.makeExistingFilesAndDbsAccessible();\n}\n\npublic void testSampleTextDisplayed() {\nsetActivityContext(mockContext);\n\n   startActivity(new Intent(), null, null);\n\nassertEquals(\"This is *MOCK* data\\n\", getActivity().getText());\n}\n}\n```", "```kt\npublic class BrowserProviderTests extends AndroidTestCase {\n    private List<Uri> deleteUris;\n\n    @Override\n    protected void setUp() throws Exception {\n       super.setUp();\n        deleteUris = new ArrayList<Uri>();\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n        for (Uri uri : deleteUris) {\n            deleteUri(uri);\n        }\n        super.tearDown();\n    }\n}\n```", "```kt\nAndroidTestCase. The BrowserProviderTests class extends AndroidTestCase because a Context is needed to access the provider content.\n```", "```kt\npublic void testHasDefaultBookmarks() {\n  Cursor c = getBookmarksSuggest(\"\");\n  try {\n    assertTrue(\"No default bookmarks\", c.getCount() > 0);\n  } finally {\n    c.close();\n  }\n}\n```", "```kt\npublic void testPartialFirstTitleWord() {\n   assertInsertQuery(\n\"http://www.example.com/rasdfe\", \"nfgjra sdfywe\", \"nfgj\");\n}\n```", "```kt\npublic void testFullTitleJapanese() {\nString title = \"\\u30ae\\u30e3\\u30e9\\u30ea\\u30fc\\u30fcGoogle\\u691c\\u7d22\";\nassertInsertQuery(\"http://www.example.com/sdaga\", title, title);\n}\n```", "```kt\nprivate void assertInsertQuery(String url, String title, String query) {\n        addBookmark(url, title);\n        assertQueryReturns(url, title, query);\n    }\n    private void addBookmark(String url, String title) {\n        Uri uri = insertBookmark(url, title);\n        assertNotNull(uri);\n        assertFalse(BOOKMARKS_URI.equals(uri));\n        deleteUris.add(uri);\n    }\n    private Uri insertBookmark(String url, String title) {\n        ContentValues values = new ContentValues();\n        values.put(\"title\", title);\n        values.put(\"url\", url);\n        values.put(\"visits\", 0);\n        values.put(\"date\", 0);\n        values.put(\"created\", 0);\n        values.put(\"bookmark\", 1);\n        return getContext().getContentResolver().insert(BOOKMARKS_URI, values);\n    }\n\nprivate void assertQueryReturns(String url, String title, String query) {\n  Cursor c = getBookmarksSuggest(query);\n  try {\n    assertTrue(title + \" not matched by \" + query, c.getCount() > 0);\n    assertTrue(\"More than one result for \" + query, c.getCount() == 1);\n    while (c.moveToNext()) {\n      String text1 = getCol(c, SearchManager.SUGGEST_COLUMN_TEXT_1);\n      assertNotNull(text1);\n      assertEquals(\"Bad title\", title, text1);\n      String text2 = getCol(c, SearchManager.SUGGEST_COLUMN_TEXT_2);\n      assertNotNull(text2);\n      String data = getCol(c, SearchManager.SUGGEST_COLUMN_INTENT_DATA);\n      assertNotNull(data);\n      assertEquals(\"Bad URL\", url, data);\n    }\n  } finally {\n    c.close();\n  }\n}\n\nprivate String getCol(Cursor c, String name) {\n  int col = c.getColumnIndex(name);\n  String msg = \"Column \" + name + \" not found, \" \n               + \"columns: \" + Arrays.toString(c.getColumnNames());\n  assertTrue(msg, col >= 0);\n  return c.getString(col);\n}\n\nprivate Cursor getBookmarksSuggest(String query) {\n  Uri suggestUri = Uri.parse(\"content://browser/bookmarks/search_suggest_query\");\n  String[] selectionArgs = {query};\n  Cursor c = getContext().getContentResolver().query(suggestUri, null, \"url LIKE ?\", selectionArgs, null);\n  assertNotNull(c);\n  return c;\n}\n\nprivate void deleteUri(Uri uri) {\n  int count = getContext().getContentResolver().delete(uri, null, null);\n  assertEquals(\"Failed to delete \" + uri, 1, count);\n}\n```", "```kt\n@Test(expected = InvalidTemperatureException.class)\npublic final void testExceptionForLessThanAbsoluteZeroF() {\n TemperatureConverter.\nfahrenheitToCelsius(TemperatureConverter.ABSOLUTE_ZERO_F - 1);\n}\n\n@Test(expected = InvalidTemperatureException.class)\npublic final void testExceptionForLessThanAbsoluteZeroC() {\n  TemperatureConverter.\ncelsiusToFahrenheit(TemperatureConverter.ABSOLUTE_ZERO_C - 1);\n}\n```", "```kt\n    public void testExceptionForLessThanAbsoluteZeroC() {\n        try {\n          TemperatureConverter.celsiusToFahrenheit(ABSOLUTE_ZERO_C - 1);\n          fail();\n        } catch (InvalidTemperatureException ex) {\n          // do nothing we expect this exception!\n        }\n    }\n```", "```kt\npublic class DummyServiceTest extends ServiceTestCase<DummyService> {\n    public DummyServiceTest() {\n        super(DummyService.class);\n    }\n\n    public void testBasicStartup() {\n        Intent startIntent = new Intent();\n        startIntent.setClass(getContext(), DummyService.class);\n        startService(startIntent);\n    }\n\n    public void testBindable() {\n        Intent startIntent = new Intent();\n        startIntent.setClass(getContext(), DummyService.class);\n        bindService(startIntent);\n    }\n}\n```", "```kt\n    public class LocalBinder extends Binder {\n        DummyService getService() {\n            return DummyService.this;\n        }\n    }\n```", "```kt\ndependencies {\n    // other compile dependencies\n\n    androidTestCompile('com.google.dexmaker:dexmaker-mockito:1.1')\n}\n```", "```kt\n  import static org.mockito.Matchers.*;\nimport static org.mockito.Mockito.*;\n```", "```kt\n    packagingOptions {\n        exclude 'META-INF/LICENSE'\n        exclude 'folder/duplicatedFileName'\n  }\n```", "```kt\ntestTextChangedFilter*\n        * WorksForBlankInput\n        * WorksForSingleDigitInput\n        * WorksForMultipleDigitInput\n        * WorksForZeroInput\n        * WorksForDecimalInput\n        * WorksForNegativeInput\n        * WorksForDashedInput\n        * WorksForPositiveInput\n        * WorksForCharacterInput\n        * WorksForDoubleDecimalInput\n```", "```kt\npublic void testTextChangedFilterWorksForCharacterInput() {\n  assertEditNumberTextChangeFilter(\"A1A\", \"1\");\n}\n/**\n * @param input  the text to be filtered \n * @param output the result you expect once the input has been filtered\n*/\nprivate void assertEditNumberTextChangeFilter(String input, String output) {\n int lengthAfter = output.length();\n TextWatcher mockTextWatcher = mock(TextWatcher.class);\n editNumber.addTextChangedListener(mockTextWatcher);\n\n editNumber.setText(input);\n\n verify(mockTextWatcher)\n.afterTextChanged(editableCharSequenceEq(output));\n verify(mockTextWatcher)\n.onTextChanged(charSequenceEq(output), eq(0), eq(0), eq(lengthAfter));\n verify(mockTextWatcher)\n.beforeTextChanged(charSequenceEq(\"\"), eq(0), eq(0), eq(lengthAfter));\n}\n```", "```kt\nverify(mockTextWatcher)\n.afterTextChanged(editableCharSequenceEq(output));\nverify(mockTextWatcher)\n.onTextChanged(charSequenceEq(output), eq(0), eq(0), eq(lengthAfter));\nverify(mockTextWatcher)\n.beforeTextChanged(charSequenceEq(\"\"), eq(0), eq(0), eq(lengthAfter));\n```", "```kt\n    abstract boolean matches(T t);\n```", "```kt\nclass CharSequenceMatcher extends ArgumentMatcher<CharSequence> {\n\n    private final CharSequence expected;\n\n    static CharSequence charSequenceEq(CharSequence expected) {\n        return argThat(new CharSequenceMatcher(expected));\n    }\n\n    CharSequenceMatcher(CharSequence expected) {\n        this.expected = expected;\n    }\n\n    @Override\n    public boolean matches(Object actual) {\n        return expected.toString().equals(actual.toString());\n    }\n\n    @Override\n    public void describeTo(Description description) {\n        description.appendText(expected.toString());\n    }\n}\n```", "```kt\nArgument(s) are different! Wanted: \ntextWatcher.afterTextChanged(<Editable char sequence matcher>);\nActual invocation has different arguments:\ntextWatcher.afterTextChanged(1);\n\nArgument(s) are different! Wanted: \ntextWatcher.afterTextChanged(1XX);\nActual invocation has different arguments: \ntextWatcher.afterTextChanged(1);\n```", "```kt\nverify(mockTextWatcher).onTextChanged(charSequenceEq(output), …\n```", "```kt\npublic class FocusTest extends AndroidTestCase {\n private FocusFinder focusFinder;\n\n private ViewGroup layout;\n\n private Button leftButton;\n private Button centerButton;\n private Button rightButton;\n\n@Override\nprotected void setUp() throws Exception {\n super.setUp();\n\n focusFinder = FocusFinder.getInstance();\n // inflate the layout\n Context context = getContext();\n LayoutInflater inflater = LayoutInflater.from(context);\n layout = (ViewGroup) inflater.inflate(R.layout.view_focus, null);\n\n // manually measure it, and lay it out\n layout.measure(500, 500);\n layout.layout(0, 0, 500, 500);\n\n leftButton = (Button) layout.findViewById(R.id.focus_left_button);\n centerButton = (Button) layout.findViewById(R.id.focus_center_button);\n rightButton = (Button) layout.findViewById(R.id.focus_right_button);\n}\n```", "```kt\npublic void testGoingRightFromLeftButtonJumpsOverCenterToRight() {\n View actualNextButton = \nfocusFinder.findNextFocus(layout, leftButton, View.FOCUS_RIGHT);\n String msg = \"right should be next focus from left\";\n assertEquals(msg, this.rightButton, actualNextButton);\n}\n\npublic void testGoingLeftFromRightButtonGoesToCenter() {\n View actualNextButton = \nfocusFinder.findNextFocus(layout, rightButton, View.FOCUS_LEFT);\n String msg = \"center should be next focus from right\";\n assertEquals(msg, this.centerButton, actualNextButton);\n}\n```", "```kt\npublic class ParserExampleActivityTest extends AndroidTestCase {\n\n public void testParseXml() throws IOException {\n InputStream assetsXml = getContext().getAssets()\n.open(\"my_document.xml\");\n\n  String result = parseXml(assetsXml);\n  assertNotNull(result);\n }\n}\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<records>\n  <record>\n    <name>Paul</name>\n  </record>\n</records>\n```", "```kt\npublic void assertNotInLowMemoryCondition() {\n//Verification: check if it is in low memory\nActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();\n ((ActivityManager)getActivity()\n.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryInfo(mi);\nassertFalse(\"Low memory condition\", mi.lowMemory);\n}\n```", "```kt\n    private String captureProcessInfo() {\n        InputStream in = null;\n        try {\n           String cmd = \"ps\";\n           Process p = Runtime.getRuntime().exec(cmd);\n           in = p.getInputStream();\n           Scanner scanner = new Scanner(in);\n           scanner.useDelimiter(\"\\\\A\");\n           return scanner.hasNext() ? scanner.next() : \"scanner error\";\n        } catch (IOException e) {\n           fail(e.getLocalizedMessage());\n        } finally {\n           if (in != null) {\n               try {\n                   in.close();\n               } catch (IOException ignore) {\n               }\n            }\n        }\n        return \"captureProcessInfo error\";\n    }\n```", "```kt\n        Log.d(TAG, captureProcessInfo());\n```", "```kt\nD/ActivityTest(1): USER     PID   PPID  VSIZE  RSS     WCHAN    PC   NAME\nD/ActivityTest(1): root      1     0     312    220   c009b74c 0000ca4c S /init\nD/ActivityTest(1): root      2     0     0      0     c004e72c 00000000 S kthreadd\nD/ActivityTest(1): root      3     2     0      0     c003fdc8 00000000 S ksoftirqd/0\nD/ActivityTest(1): root      4     2     0      0     c004b2c4 00000000 S events/0\nD/ActivityTest(1): root      5     2     0      0     c004b2c4 00000000 S khelper\nD/ActivityTest(1): root      6     2     0      0     c004b2c4 00000000 S suspend\nD/ActivityTest(1): root      7     2     0      0     c004b2c4 00000000 S kblockd/0\nD/ActivityTest(1): root      8     2     0      0     c004b2c4 00000000 S cqueue\nD/ActivityTest(1): root      9     2     0      0     c018179c 00000000 S kseriod\n\n```", "```kt\ndependencies {\n// other dependencies\nandroidTestCompile('com.android.support.test.espresso:espresso-core:2.0')\n}\nandroid {\n    defaultConfig {\n    // other configuration\n    testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n}\n// Annoyingly there is a overlap with Espresso dependencies at the moment \n// add this closure to fix internal jar file name clashes\npackagingOptions {\n        exclude 'LICENSE.txt'\n    }\n}\n```", "```kt\npublic class ExampleEspressoTest extends ActivityInstrumentationTestCase2<EspressoActivity> {\n\n    public ExampleEspressoTest() {\n        super(EspressoActivity.class);\n    }\n\n    @Override\n    public void setUp() throws Exception {\n        getActivity();\n    }\n```", "```kt\n    public void testClickingButtonShowsImage() {\n        Espresso.onView(\n              ViewMatchers.withId(R.id.espresso_button_order))\n              perform(ViewActions.click());\n\n        Espresso.onView(\n              ViewMatchers.withId(R.id.espresso_imageview_cup))\n                .check(ViewAssertions.matches(ViewMatchers.isDisplayed()));\n    }\n```", "```kt\n    public void testClickingButtonShowsImage() {\n        onView(withId(R.id.espresso_button_order))\n                .perform(click());\n\n        onView(withId(R.id.espresso_imageview_cup))\n                .check(matches(isDisplayed()));\n    }\n```"]