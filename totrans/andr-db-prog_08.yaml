- en: Chapter 8. Exploring External Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章 探索外部数据库
- en: In the previous chapter we introduced the notion of moving away from completely
    localized databases that exist solely on the Android client side, and towards
    utilizing an external database that could help us in several ways throughout the
    development process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了从完全局限于Android客户端的数据库，转向使用外部数据库的概念，这在我们整个开发过程中可以以多种方式提供帮助。
- en: We saw how by using an external database, we were able to improve memory usage
    in our Android applications (namely, by not having to store extremely large database
    files) without sacrificing too much performance by using caches. Furthermore,
    we saw how using an external database allowed us to back up user data (in case
    a user switches phones or uninstalls your application), prevent users from seeing
    stale data (since all data exists in one central location), as well as potentially
    see other user's data (remember the global high scores example).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，通过使用外部数据库，我们能够在Android应用程序中改善内存使用（特别是，不必存储非常大的数据库文件），同时通过使用缓存而没有牺牲太多性能。此外，我们还了解到，使用外部数据库允许我们备份用户数据（以防用户更换手机或卸载你的应用程序），防止用户看到过时的数据（因为所有数据都存在于一个中央位置），以及可能查看其他用户的数据（记得全球高分示例）。
- en: Using external databases that your application can communicate with over a network
    will make you a much more versatile application developer and will give you the
    tools to create fully scalable data-centric applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可以通过网络与应用程序通信的外部数据库，将使你成为更加多才多艺的应用程序开发者，并为你提供创建完全可扩展的数据中心应用程序的工具。
- en: Different external databases
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的外部数据库
- en: So what kinds of external databases are out there anyways? Just like how Android,
    iOS, Palm, and so on, are all examples of operating systems which allow you to
    develop mobile applications, there are several easily accessible platforms out
    there which allow you to host and develop external databases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那么到底有哪些类型的外部数据库呢？正如Android、iOS、Palm等操作系统都允许你开发移动应用一样，目前有几个容易访问的平台允许你托管和开发外部数据库。
- en: One such "platform" is just setting up a traditional dedicated server with database
    capabilities. For instance, a popular example of this would be having a dedicated
    computer hosting an **Apache Tomcat** server that's connected to a **MySQL** database.
    I won't go into the details of how you would set up this kind of server-database
    connection (primarily because you can do it in any number of ways), but instead
    let's just think about high-level concepts and then move on to a simple pros and
    cons list.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个“平台”就是设置一个具有数据库功能的传统专用服务器。例如，这种方式的流行例子是使用专用计算机托管连接到**MySQL**数据库的**Apache
    Tomcat**服务器。我不会详细介绍如何设置这种服务器-数据库连接（主要是因为你可以用无数种方式来做），但让我们先考虑一下高级概念，然后再来看一个简单的优缺点列表。
- en: At a high level, the Apache Tomcat server acts as an intermediary that handles
    all incoming and outgoing HTTP requests (that is, network requests). The server
    itself listens for all these incoming requests, and upon receiving one, has code
    that tells it how to handle the request and subsequently what to return as a response.
    The code that handles the request and returns a response is often known as the
    **HTTP servlet,** and in upcoming chapters we'll actually implement a few of these
    servlets to give you a better idea for how they work.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，Apache Tomcat服务器充当了一个中介，处理所有的进出的HTTP请求（即网络请求）。服务器本身监听所有这些传入的请求，并在接收到请求时，有代码告诉它如何处理请求以及随后返回什么作为响应。处理请求并返回响应的代码通常被称为**HTTP服务端小程序**，在接下来的章节中，我们将实际实现一些这样的小程序，以便让你更好地了解它们是如何工作的。
- en: Moving on though, the Apache Tomcat server is also connected to a MySQL database
    through a **Java Database Connectivity** driver (**JDBC**). Once configured, this
    will allow us to handle incoming HTTP requests, which then tell the server to
    issue a query to the MySQL database. Once the MySQL database retrieves the query,
    it will execute it and return the desired data, ultimately to be sent back to
    the original requester.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Apache Tomcat服务器还通过**Java数据库连接**驱动（**JDBC**）连接到MySQL数据库。一旦配置好，这将允许我们处理传入的HTTP请求，这些请求然后告诉服务器向MySQL数据库发出查询。一旦MySQL数据库检索到查询，它将执行它并返回所需的数据，最终发送回原始请求者。
- en: Using this kind of a model, the pros are that it's fully customizable and that
    you have full control over how each part is implemented. However, this can be
    a double-edged sword and can be a good or bad thing depending on who is handling
    the server and the database. Focusing on the database portion, because it is fully
    customizable, we have complete control over what **database management system
    (DBMS)** we want to use and furthermore what our database schema should look like
    for our given database management system. Throughout the application development
    process, we can even elect to switch our DBMS or alter our schema if we felt it
    was necessary – for instance, if we needed a more scalable DBMS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种模式，优点是它完全可定制，你可以完全控制每个部分的实现方式。然而，这可以是一把双刃剑，是好是坏取决于谁在处理服务器和数据库。关注数据库部分，由于它完全可定制，我们可以完全控制我们想要使用的**数据库管理系统（DBMS）**，甚至进一步控制我们的数据库架构应该是什么样的，以满足给定的数据库管理系统。在整个应用程序开发过程中，如果我们认为有必要，我们甚至可以选择更换我们的DBMS或更改我们的架构——例如，如果我们需要一个更具可扩展性的DBMS。
- en: And this is where the problem lies. Though MySQL is by far the world's most
    used DBMS and in most cases does a great job, it's not designed to be extremely
    scalable. Thus, for large, data-heavy applications, using MySQL would be a sub
    optimal design decision. And going back to my original point that using a fully
    customizable server and database can be a double-edged sword, one can easily see
    how flexibility and responsibility go hand in hand in this case. As we gain more
    flexibility in the design/implementation of our system, we simultaneously have
    more responsibility when it comes to making intelligent design decisions – otherwise,
    our application's performance may deteriorate quickly (that is, imagine if all
    of Google's data was hosted on a single computer – what a nightmare).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 问题就出在这里。虽然MySQL到目前为止是全球使用最广泛的数据库管理系统，在大多数情况下都能出色完成任务，但它并非设计为极致可扩展的。因此，对于大型、数据密集型的应用程序来说，使用MySQL可能是一个次优的设计决策。回到我最初的观点，即使用完全可定制的服务器和数据库可能是一把双刃剑，可以很容易看出在这种情况下灵活性和责任感是如何并存的。当我们获得系统设计和实施的更多灵活性时，同时我们也承担着更多关于做出明智设计决策的责任——否则，我们的应用程序性能可能会迅速恶化（即想象一下，如果所有谷歌的数据都托管在一台计算机上——那将是一场噩梦）。
- en: Other cons are that these systems typically require a higher cost initially,
    as we need to actually buy computers/servers. In addition, because these computers/servers
    are prone to failure, we'll have to manage them regularly to make sure they don't
    crash. Because of their flexibility, many companies and startups opt for this
    model, though many end up hiring specialists dedicated to maintaining these servers
    as well as backend developers dedicated to building out these servers and databases.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其他缺点是，这些系统通常需要更高的初始成本，因为我们需要实际购买计算机/服务器。此外，由于这些计算机/服务器容易发生故障，我们将不得不定期管理它们，以确保它们不会崩溃。由于它们的灵活性，许多公司和初创企业选择这种模式，尽管许多公司最终会雇佣专门负责维护这些服务器以及后端开发人员专门构建这些服务器和数据库的专家。
- en: Recently, though, the idea of cloud computing has become increasingly popular,
    and here I'll introduce two such platforms. The first is **Amazon's Web Services
    (AWS)**, which provides a suite of cloud computing services, but specifically
    **Amazon's Elastic Compute Cloud (EC2)** and **Amazon's Relational Database Service
    (RDS)**. The primary difference between the two is that Amazon's EC2 is designed
    to be a fully-functional and fully-virtual computing environment that allows you
    to control as many server/database instances as you'd like (thus making it inherently
    scalable). Amazon's RDS, on the other hand, is designed to only act as a cloud
    database, though the service contains features which give you the option of scaling
    your computation and storage capabilities. Thus, depending on your applications,
    you could choose whichever service is most appropriate. Amazon's computing services
    are now used by many, including such high-profile startups as Yelp, Reddit, Quora,
    FourSquare, Hootsuite, amongst others, and is definitely something to keep in
    mind as you design any future backends.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，近年来云计算的概念越来越受欢迎，这里我将介绍两个这样的平台。第一个是 **亚马逊网络服务（AWS）**，它提供了一系列云计算服务，特别是 **亚马逊弹性计算云（EC2）**
    和 **亚马逊关系数据库服务（RDS）**。这两者之间的主要区别在于，亚马逊的 EC2 被设计成一个功能齐全、完全虚拟的计算环境，允许你控制尽可能多的服务器/数据库实例（从而使其具有固有的可扩展性）。而亚马逊的
    RDS，则被设计成仅作为一个云数据库，尽管该服务包含了一些使你能够选择扩展计算和存储能力的功能。因此，根据你的应用程序，你可以选择最合适的服务。亚马逊的计算服务现在被许多公司使用，包括
    Yelp、Reddit、Quora、FourSquare、Hootsuite 等知名初创公司，在设计任何未来后端时，这绝对是一个值得考虑的因素。
- en: The other cloud computing service is **Google's App Engine (GAE)** and is one
    that we'll take a more in-depth look into. Both AWS and GAE are easy to set up
    (relative to the traditional server method) with GAE known to be slightly more
    user friendly. However, the primary reason we're going to look at GAE as opposed
    to AWS (besides the fact that this is now a Google-themed book!) is that GAE allows
    you to run small-scale applications for free (up to certain predefined limits),
    while AWS only allows you to access their free pricing tier for a year. In this
    way, everyone will get to follow along as we look at more code in later sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个云计算服务是 **谷歌的应用引擎（GAE）**，我们会更深入地了解它。AWS 和 GAE 都容易设置（相对于传统服务器方法），而 GAE 以更用户友好而闻名。然而，我们之所以要关注
    GAE 而非 AWS（除了这是一本现在以 Google 为主题的书之外）的主要原因是，GAE 允许你免费运行小规模的应用程序（直至某些预定义的限制），而 AWS
    只允许你在一年内访问其免费定价层。这样，每个人都能在后续章节中跟随我们查看更多代码。
- en: Finally, the difference between the traditional server/database model and the
    new cloud computing model is that we don't actually need to own and manage a dedicated
    server! These cloud computing services allow us to essentially "rent out" server
    space within Amazon/Google's various data centers and allow us to quickly/cheaply
    create reliable, scalable applications. However, what we're giving up is some
    control and flexibility in the implementation, and I'll discuss this in the next
    section when we talk about **Google App Engine's Java Data Object (JDO)** databases.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，传统服务器/数据库模型与新的云计算模型之间的区别在于，我们实际上不需要拥有和管理专用的服务器！这些云计算服务允许我们基本上在亚马逊/谷歌的各个数据中心内“租用”服务器空间，并允许我们快速/低成本地创建可靠、可扩展的应用程序。然而，我们放弃的是在实施过程中的一些控制和灵活性，在下一节我们讨论
    **Google App Engine 的 Java 数据对象 (JDO)** 数据库时，我会进一步阐述这一点。
- en: Google App Engine and JDO databases
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google App Engine 和 JDO 数据库
- en: So what exactly is Google App Engine and why do we need it? Well, GAE is a platform
    that enables you to build and host web apps on the same systems that power Google
    applications. GAE allows us to quickly develop and deploy our applications without
    having to worry about reliability, scalability, hardware, patches or backups,
    and so on. However, this reliability and scalability comes at a cost and that
    cost is the flexibility with which we can select our DBMS and design our database
    schema. In fact, both of these are more or less chosen for you when you choose
    to use GAE as your backend!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Google App Engine 究竟是什么，我们为什么需要它呢？其实，GAE 是一个平台，它允许你在支撑 Google 应用程序的同一天然系统上构建和托管网络应用。GAE
    使我们能够快速开发部署应用程序，而无需担心可靠性、可扩展性、硬件、补丁或备份等问题。然而，这种可靠性和可扩展性是有代价的，那就是我们在选择 DBMS 和设计数据库架构时的灵活性。实际上，当你选择使用
    GAE 作为后端时，这两者基本上都是为你预先选好的！
- en: GAE comes with a JDO database - meaning that it comes with a special database
    that allows you to directly convert Java objects into rows of data called **entities**
    (hence the name). This JDO database is built on top of a special web database
    called BigTable, which is designed to be extremely quick and scalable, and is
    actually not a relational DBMS like MySQL (see [http://en.wikipedia.org/wiki/BigTable)](http://en.wikipedia.org/wiki/BigTable)).
    This primarily means that not all of the features we learned in [Chapter 3](ch03.html
    "Chapter 3. SQLite Queries"), *SQLite Queries*, about SQL (that is, JOINS) will
    be applicable here, so your design decisions regarding how your database schema
    should look are somewhat limited.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GAE附带了一个JDO数据库——这意味着它带有一个特殊的数据库，允许你将Java对象直接转换为称为**实体**（因此得名）的数据行。这个JDO数据库构建在一个名为BigTable的特殊网络数据库之上，它旨在实现极快和可扩展，实际上并不是像MySQL那样的关系型数据库管理系统（见[http://en.wikipedia.org/wiki/BigTable)](http://en.wikipedia.org/wiki/BigTable)）。这主要意味着我们在[第3章](ch03.html
    "第3章. SQLite查询")中学习的关于SQL（即JOINS）的所有功能在这里并不都适用，因此关于你的数据库架构应该如何设计，你的决策会有一定的限制。
- en: 'In light of this, Google does a nice job in providing you with a variant of
    SQL called **GQL,** which is a querying language designed for retrieving entities
    from the App Engine scalable datastore. Again, there are some differences but
    the general feel of GQL is much like that of SQL: where you have `SELECT` statements
    with `WHERE` filters and other familiar clauses like `ORDER BY` and `LIMIT`. In
    this way, for those who are only familiar with relational systems like MySQL,
    it shouldn''t be terribly difficult to pick up.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，谷歌提供了一种名为**GQL**的SQL变体，这是一种查询语言，专为从App Engine可扩展数据存储中检索实体而设计。同样，这里有一些差异，但GQL的一般感觉与SQL非常相似：你有带有`WHERE`筛选器的`SELECT`语句，以及其他熟悉的子句，如`ORDER
    BY`和`LIMIT`。这样，对于那些只熟悉像MySQL这样的关系系统的用户来说，学习起来应该不会太困难。
- en: For the sake of completeness, other differences include not being able to filter
    on multiple conditions without having to build an index, not being able to use
    inequality filters on multiple columns within the same query, and not being able
    to filter for rows with missing fields, amongst others. The reason for all of
    these seemingly arbitrary differences involve the architecture of the BigTable
    database. Because of the way it's designed and the way it indexes each row that
    is inserted, certain queries that are available in relational databases like MySQL
    will no longer be applicable with BigTable. However, because of this architecture,
    BigTable is inherently scalable, and so when choosing between the two just keep
    these trade-offs in mind.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性起见，其他差异包括在不建立索引的情况下无法基于多个条件进行筛选，无法在同一个查询中对多个列使用不等式筛选器，以及无法筛选缺少字段的行等。所有这些看似任意的差异的原因都涉及到BigTable数据库的架构。由于它的设计方式以及它为每插入的行建立索引的方式，像MySQL这样的关系数据库中可用的某些查询将不再适用于BigTable。然而，正是由于这种架构，BigTable本质上是可扩展的，因此在选择两者之间时，请记住这些权衡。
- en: 'In any case, words can only take you so far and all of these differences and
    similarities will become much clearer once we start seeing some actual code. Thus,
    in addition to having the Android SDK installed, I invite you to take some time
    getting Google App Engine set up using the following URL as a guide:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，语言只能带你走到这么远，一旦我们开始看到一些实际的代码，所有这些差异和相似性将会变得更加清晰。因此，除了安装Android SDK之外，我建议你花些时间通过以下URL指南来搭建Google
    App Engine：
- en: '[http://code.google.com/appengine/downloads.html#Download_the_Google_App_Engine_SDK](http://code.google.com/appengine/downloads.html#Download_the_Google_App_Engine_SDK)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.google.com/appengine/downloads.html#Download_the_Google_App_Engine_SDK](http://code.google.com/appengine/downloads.html#Download_the_Google_App_Engine_SDK)'
- en: At this point, we're ready to dive right into some code and try to piece together
    a fully functional Google App Engine backend for our Android applications!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经准备好直接深入一些代码，尝试为我们的Android应用程序拼凑一个完全功能的Google App Engine后端！
- en: 'GAE: an example with video games'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GAE：以视频游戏为例
- en: In the next couple of chapters, we'll be going through an example where we wish
    to create an application that allows us to see what video games are available
    through Blockbuster. This will ultimately involve everything from writing a scraper
    to fetch and retrieve those video games from Blockbuster's website, storing these
    game objects into our GAE database, writing servlets to get/remove game objects
    from our GAE database through HTTP requests, and last but not least finishing
    it off with some code for the Android client side.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将通过一个例子来学习如何创建一个应用程序，以查看通过Blockbuster可以获取哪些视频游戏。这将涉及到从编写爬虫来从Blockbuster的网站获取和检索这些视频游戏，将游戏对象存储到我们的GAE数据库中，编写servlet通过HTTP请求从我们的GAE数据库中获取/删除游戏对象，最后但同样重要的是，完成一些适用于Android客户端的代码。
- en: 'In this chapter, we''ll focus on setting up our database and writing wrapper
    methods to help us store, retrieve, update, and delete data for future steps.
    And so to start, every GAE application needs to first define a base entity class
    which essentially defines what a row is in our database. Note that each entity
    needs to have an ID or a key associated with it, so the only field we really need
    is the one for an ID. Here is the `ModelBase` class, which we will use as our
    base entity class and which we will override for all objects that we create:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍如何设置数据库并编写包装方法，以帮助我们存储、检索、更新和删除数据，为后续步骤做准备。首先，每个GAE应用程序都需要定义一个基本实体类，这个类本质上定义了数据库中的行。请注意，每个实体都需要有一个与之关联的ID或键，所以我们真正需要的只是一个ID字段。下面是`ModelBase`类，我们将它用作我们的基本实体类，并对我们创建的所有对象进行重写：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So we''ll notice that the general structure of the class resembles that of
    a relatively simple Java object, but that there are some odd `@` tags. Let''s
    look at the first two:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会注意到这个类的总体结构类似于相对简单的Java对象，但有一些奇怪的`@`标签。让我们先看看前两个：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first one tells us that this class needs to be `PersistenceCapable`. When
    you define an object as capable of being persistent, what you're telling the JDO
    database is that this object is capable of being stored and retrieved from the
    datastore. It's important to declare your entity classes as `PersistenceCapable`
    and then declare the desired fields as being `Persistent`. You'll see that there's
    also a parameter called `detachable`, which we set to be `true`. This gives us
    permission to edit and modify entities that we retrieved from our database even
    after we've closed it. Now, this does not mean that those modifications will persist
    in the database because it is closed, but at least we'll have permission to do
    so.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一点告诉我们，这个类需要是`PersistenceCapable`。当你定义一个对象为可持久化的，你其实是在告诉JDO数据库，这个对象能够从数据存储中存储和检索。声明实体类为`PersistenceCapable`并声明所需的字段为`Persistent`是非常重要的。你会看到还有一个名为`detachable`的参数，我们将其设置为`true`。这使得我们有权在关闭数据库后编辑和修改从数据库中检索的实体。现在，这并不意味着这些修改会在数据库中持久化，因为数据库已经关闭，但至少我们有权限这样做。
- en: Next there is an `Inheritance` tag which basically means that we're allowed
    to create entities that override this base entity, hence inherit the base entity.
    The other two tags are pretty self-explanatory. The first declares that our ID
    (I'll quickly note that in my case I chose to use a long type as my ID but one
    can also use a Key type object) acts as the `PrimaryKey` for our entity. For people
    with a background in SQL this should immediately ring a bell, but basically this
    just tells the JDO database that objects of this entity will have a unique long
    ID field to be used for lookups, and so on. The last tag is one that we mentioned
    briefly earlier - namely the `Persistent` tag which simply tells us that this
    long ID field should be stored as its own column in our table.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`Inheritance`标签，这意味着我们允许创建覆盖这个基础实体的实体，从而继承基础实体。另外两个标签相当容易理解。第一个声明我们的ID（我快速说明一下，在我的例子中我选择使用long类型的ID，但也可以使用Key类型对象）作为我们实体的`PrimaryKey`。对于有SQL背景的人来说，这应该立即就能明白，但这基本上就是告诉JDO数据库，这个实体的对象将有一个唯一的long
    ID字段，用于查找等操作。最后一个标签是我们之前简要提到的一个——即`Persistent`标签，它只是告诉我们这个long ID字段应该作为我们表中自己的列存储。
- en: 'And now, for the actual `VideoGame` object, first notice how we extend (inherit)
    the previous `ModelBase` class and then we continue by defining all desired persistent
    fields as well as implementing the constructor, and so on, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于实际的`VideoGame`对象，首先注意我们是如何扩展（继承）之前的`ModelBase`类，然后继续定义所有期望的持久化字段，并实现构造函数等，如下所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you get the gist of what the `@` tags are doing, the rest is pretty self-explanatory.
    Here I''m simply declaring a few fields as persistent, and then I implement a
    constructor as well as a convenient inner class. The reason why I like having
    a convenience class (that is, `VideoGameConsole` in this case) is that typically
    in tables, querying for integers is a lot more efficient and reliable than querying
    for strings (one: you don''t need to worry about case matching, and two: integer
    comparisons are just much more efficient in general than string comparisons).
    And so, ideally I''d like a way to convert strings to integers and potentially
    even be able to map a group of strings to an integer (that is, "PS3" could get
    mapped to 1, and so could "Playstation 3" or "PS 3").'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了`@`标签的作用，其余部分就相当容易理解了。这里我只是声明了几个字段为持久化字段，然后实现了一个构造函数以及一个方便的内部类。我喜欢有一个便捷类（在这个例子中是`VideoGameConsole`）的原因是，在表中，查询整数通常比查询字符串更有效且更可靠（一方面：你不需要担心大小写匹配，另一方面：整数比较通常比字符串比较更有效）。因此，理想情况下，我希望能有一种方法将字符串转换为整数，甚至可能将一组字符串映射到一个整数（例如，“PS3”可以映射到1，同样“Playstation
    3”或“PS 3”也可以）。
- en: Now that we have our `VideoGame` entity defined, we're ready to start implementing
    our database and telling it how to interact with these `VideoGame` entities.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经定义了`VideoGame`实体，我们就可以开始实现数据库，并告诉它如何与这些`VideoGame`实体进行交互。
- en: The PersistenceManager and Queries
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化管理器和查询
- en: 'So the first step is defining a way to establish a connection between the server
    and the database. Remember back at the beginning of the book when we had to call
    methods such as `getWritableDatabase()` before making any queries? Well the same
    is true here, but instead of using a `SQLiteOpenHelper` class, we will define
    a `PersistenceManager` class as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是定义一种方法，以建立服务器与数据库之间的连接。回想一下在本书开始时，我们在进行任何查询之前必须调用如`getWritableDatabase()`这样的方法？在这里也是一样的，但我们不是使用`SQLiteOpenHelper`类，而是定义一个`PersistenceManager`类，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that it is defined as a singleton for improved efficiency, and all we're
    doing is opening a persistence (database) manager that can handle transactions
    (queries). Then in our future queries, we no longer need to sacrifice performance
    by repeatedly requesting for a `PersistenceManager` and instead can grab the existing
    instance.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它被定义为单例以提高效率，我们所做的一切就是打开一个可以处理事务（查询）的持久化（数据库）管理器。然后在我们的未来查询中，我们不再需要通过重复请求`PersistenceManager`来牺牲性能，而是可以直接获取现有实例。
- en: 'Once we have our `PersistenceManager` defined, we can start implementing our
    series of wrappers and we''ll begin by looking at how to insert new game objects:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了`PersistenceManager`，我们就可以开始实现一系列包装器，并且我们将从如何插入新的游戏对象开始看起：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Not too bad right? The idea is simple and is one that we have seen earlier
    simply grab our instance of the `PersistenceManager` (that is, our connection
    to the database) and make the `VideoGame` object that''s passed in persistent.
    Again, remember that when working with GAE, the idea of persistence is the same
    as insertion and so by making an object persistent, we are literally telling the
    database to convert our entity into a row of our `VideoGame` table. We can also
    see that when adding many entities at once, GAE offers us an efficient way to
    do so by using batch inserts. Now let''s take a look at how we would get video
    game objects from our database. Querying for entities is much more involved than
    simply inserting entities, but instead of devoting an entire chapter to all the
    different ways you can submit queries (like we did in [Chapter 3](ch03.html "Chapter 3. SQLite
    Queries"), *SQLite Queries)* I''ll just s how you one convenient and intuitive
    way to do it, and if you''re curious I invite you to check out:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不错吧？这个概念很简单，我们之前已经见过，只需获取`PersistenceManager`的实例（即与数据库的连接）并使传入的`VideoGame`对象持久化。再次提醒，在使用GAE时，持久化的概念与插入相同，因此通过使对象持久化，我们实际上是在告诉数据库将我们的实体转换成`VideoGame`表的一行。我们还可以看到，当一次添加多个实体时，GAE通过使用批量插入为我们提供了一个高效的实现方式。现在让我们看看如何从数据库中获取视频游戏对象。查询实体比简单插入实体要复杂得多，但与其像[第3章](ch03.html
    "第3章。SQLite查询")那样专门用一整章介绍所有不同的查询方式，我只想展示一种方便直观的方法，如果你好奇，我邀请你查看：
- en: '[http://code.google.com/appengine/docs/java/datastore/queries.html](http://code.google.com/appengine/docs/java/datastore/queries.html)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.google.com/appengine/docs/java/datastore/queries.html](http://code.google.com/appengine/docs/java/datastore/queries.html)（链接内容不需翻译，保留英文）'
- en: 'But yes, here''s one way to do it and it should remind you of our previous
    encounters with the `SQLiteQueryBuilder` class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，以下是实现方式之一，它应该会让你想起我们之前遇到的`SQLiteQueryBuilder`类：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s dissect the first method piece by piece:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐块分析第一种方法：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we grab our `PersistenceManager` and then we convert the passed-in platform
    into an integer type, since we''re going to filter by platform. Next, we tell
    our `PersistenceManager` that we want to open a new query (that is, start a new
    `SELECT` statement) and so we call our `newQuery()` method. Then, we set the details
    of our query with the following methods:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先获取`PersistenceManager`实例，然后将传入的平台转换为整型，因为我们将按平台进行过滤。接下来，我们告诉`PersistenceManager`我们要打开一个新的查询（即开始一个新的`SELECT`语句），因此我们调用了`newQuery()`方法。然后，我们使用以下方法设置查询的详细信息：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here we first set our filter and specify on which column we want to perform
    the filtering (that is, setting the `WHERE` part of our query). Next, we set a
    placeholder for the parameters that will get passed in (think of the ? placeholders
    from earlier) and lastly, we execute the query and pass in the platform type parameter.
    In the method that follows, everything remains the same except for an additional
    `LIMIT` filter, set using the following method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们首先设置过滤器，并指定想要执行过滤的列（即设置查询的`WHERE`部分）。接下来，我们为将要传递的参数设置一个占位符（回想一下之前的?占位符），最后，我们执行查询并传递平台类型参数。在下面这个方法中，除了增加了一个`LIMIT`过滤器外，其他都保持不变，该过滤器通过以下方法设置：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The third method we implemented is relatively straightforward – the JDO database
    allows you to quickly retrieve an entity if you have their unique key or ID by
    calling the PersistenceManager''s `getObjectById()` method. Again, there are many
    ways to execute queries in GAE as well as many other clauses and subtleties that
    I won''t go into in this book, but for now you should have the basic idea down
    and should be able to execute the vast majority of queries needed. Finally, let''s
    take a look at how we would update and delete objects from our database:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现的第三种方法相对直接——JDO数据库允许你通过调用`PersistenceManager`的`getObjectById()`方法，快速检索具有唯一键或ID的实体。同样，在GAE中执行查询的方法有很多，以及许多其他子句和细微差别，本书将不展开讨论，但现在你应该掌握了基本概念，并应该能够执行绝大多数需要的查询。最后，让我们看看如何从数据库中更新和删除对象：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Again, let''s take the first method – our update method — and dissect it piece
    by piece:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们以第一种方法——更新方法为例，逐块分析：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So just like in the previous example, we start by getting our connection with
    the JDO database. Then we try to retrieve our `VideoGame` object by calling the
    `getObjectById()` method and passing in the unique ID of the entity we want to
    update. Here's one of the odd things about the `PersistenceManager` that you should
    keep in mind.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的示例一样，我们首先与JDO数据库建立连接。然后尝试通过调用`getObjectById()`方法并传入我们想要更新的实体的唯一ID来检索我们的`VideoGame`对象。以下是关于`PersistenceManager`的一件你应该记住的奇怪事情。
- en: Instead of having an explicit update method, which we are used to seeing by
    now, with a `PersistenceManager` as long as the connection is open any changes
    you make to the object will automatically get updated in the database. So notice
    that in this method, the first step is to retrieve the entity, update it while
    the connection is still open, and then close the connection once the entity has
    been updated.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们现在习惯看到的显式更新方法不同，只要连接打开，对对象所做的任何更改都会自动在数据库中更新。因此请注意，在这个方法中，第一步是检索实体，在连接仍然打开时更新它，然后在实体更新后关闭连接。
- en: Of course in this example we only update a specific ID at a time, but one can
    see how by keeping this detail in mind, we can easily write a method that updates
    a group of entities at once - simply query for a list of them and update each
    one while the `PersistenceManager` is still open.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在这个例子中，我们一次只更新一个特定的ID，但可以想象，如果我们牢记这个细节，就可以轻松编写一个同时更新一组实体的方法——只需查询它们的一列表，并在`PersistenceManager`仍然打开的情况下逐一更新。
- en: 'And last but not least, for our delete method, we see that all the steps are
    the same as the previous get methods, except for the last line, where we use the
    method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的是，对于我们的删除方法，我们看到除了最后一行使用方法之外，所有步骤都与之前的get方法相同：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Otherwise, all of the prior logic stays the same. And that's it! Now we have
    a JDO database wrapper class that allows us to abstract away all of the messy
    `PersistenceManager` syntax, and which gives us a quick way to insert, retrieve,
    update, and delete data from our GAE backend! The next step then is to actually
    figure out a way to retrieve this video game data, at which point we can simply
    wrap it in our `VideoGame` entity class and push it into our database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，所有之前的逻辑保持不变。就是这样！现在我们有一个JDO数据库包装类，它让我们可以抽象出所有混乱的`PersistenceManager`语法，并为我们提供了一种快速插入、检索、更新和删除GAE后端数据的方法！下一步是实际找出获取这个视频游戏数据的方法，到那时我们可以简单地将它包装在我们的`VideoGame`实体类中，并将其推送到我们的数据库。
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we moved away from the Android platform and started expanding
    upon our understanding of external databases. We began by taking a cursory look
    at what our options were: the traditional dedicated server with the database connection
    (for instance an Apache Tomcat server hooked up to a MySQL server) or a cloud
    computing server/database combination, such as **Amazon Web Services (AWS)** or
    **Google App Engine (GAE)**.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们离开了Android平台，开始扩展对外部数据库的理解。我们首先简要地了解了我们的选择：传统的专用服务器与数据库连接（例如，将Apache
    Tomcat服务器连接到MySQL服务器）或云计算服务器/数据库组合，如**亚马逊网络服务（AWS）**或**谷歌应用引擎（GAE）**。
- en: Google App Engine is nice in that it's much easier to set up and also allows
    us to build simple, relatively small-scale applications free of cost and time
    constraints. Both cloud-computing solutions come with reliable servers as well
    as efficient, scalable databases, but limit the amount of control you have over
    your backend – especially when compared to the unlimited freedom you have when
    you buy your own dedicated server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌应用引擎的好处在于，它更容易设置，并允许我们构建简单、相对小规模的应用程序，不受成本和时间限制。这两种云计算解决方案都配备了可靠的服务器以及高效、可扩展的数据库，但限制了你对后端的控制程度——特别是与购买自己的专用服务器时拥有的无限自由相比。
- en: Sticking with GAE, we started building out a simple video games application
    that shows us all the games available through Blockbuster. We introduced the notion
    of persistence in GAE and wrote our first entity class. We then wrote our own
    `PersistenceManager` singleton class and implemented a convenience class for getting,
    inserting, updating, and deleting data from our database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续使用GAE，开始构建一个简单的视频游戏应用程序，显示我们通过Blockbuster可以获得的所有游戏。我们引入了GAE中持久化的概念，并编写了我们的第一个实体类。然后，我们编写了自己的`PersistenceManager`单例类，并实现了一个方便的类，用于从我们的数据库获取、插入、更新和删除数据。
- en: We covered a lot of ground in this chapter, but we still have a long way to
    go before having a complete, fully functional application. In the next chapter,
    we'll look at ways to retrieve data and then store it using the wrapper methods
    written in this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中涉及了很多内容，但要在拥有一个完整、完全可用的应用程序之前，我们还有很长的路要走。在下一章中，我们将探讨如何使用本章编写的包装方法来检索数据并将其存储起来。
