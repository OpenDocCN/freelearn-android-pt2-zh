- en: Chapter 4. Layout Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 布局模式
- en: In the previous chapters, we have looked at the most important patterns used
    for creating objects and at some of the most used material components. To bring
    these together, we need to consider the overall layouts an application might need.
    This allows us to plan our app in greater detail as well as introducing the interesting
    challenge of designing an app for different-sized screens and orientations. Android
    makes developing for a variety of screen sizes and shapes very simple and intuitive,
    and with a minimum of extra coding. We will then conclude by exploring and creating
    a strategy pattern.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经了解了创建对象时最常用的模式以及一些最常使用的材质组件。为了将这些内容整合在一起，我们需要考虑应用程序可能需要的整体布局。这使我们能够更详细地规划我们的应用程序，同时也带来了为不同尺寸屏幕和方向设计应用程序的有趣挑战。Android
    平台为开发各种屏幕尺寸和形状提供了非常简单直观的方法，并且只需编写很少的额外代码。最后，我们将探索并创建一个策略模式。
- en: 'In this chapter, you will learn how to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何：
- en: Use relative and linear layouts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相对布局和线性布局
- en: Apply gravity and weight
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用重力和权重
- en: Scale weights with weightSum
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 weightSum 缩放权重
- en: Use the percent support library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用百分比支持库
- en: Develop layouts for specific screen sizes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为特定屏幕尺寸开发布局
- en: Create a strategy pattern
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建策略模式
- en: The Android platform provides a variety of layout classes. These range from
    the very simple **frame layout** to the quite complex layouts provided by the
    support library. By far the most widely used and most versatile are the linear
    and relative layouts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Android 平台提供了一系列布局类。从非常简单的**帧布局**到支持库提供的相当复杂的布局。最广泛使用且最灵活的是线性布局和相对布局。
- en: Linear layouts
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性布局
- en: Choosing between a relative layout and a linear one is normally very simple.
    If your components line up from side to side on top of each other, then a **linear
    layout** is the obvious choice. Although it is quite possible to nest view groups,
    for more complex layouts, the relative version is often the best choice. This
    is largely because nesting layouts is resource hungry and deep hierarchies should
    be avoided where possible. The **relative layout** can be used to create a huge
    number of intricate layouts with very little need for nesting.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在相对布局和线性布局之间选择通常非常简单。如果您的组件是从一边到另一边堆叠的，那么**线性布局**是明显的选择。尽管嵌套视图组是可能的，但对于更复杂的布局，相对布局通常是最好的选择。这主要是因为嵌套布局会消耗资源，应尽可能避免深层层次结构。**相对布局**可以用来创建许多复杂的布局，而无需大量嵌套。
- en: Whichever form best suits our needs, once we begin testing our layouts on screens
    of different shapes, or even rotate a screen through 90°, we soon see that all
    the thought that we put into creating components with pleasing proportions is
    lost. Very often, these issues can be remedied by positioning elements using **gravity**
    properties and scaling them with the **weight** property.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种形式最适合我们的需求，一旦开始在形状不同的屏幕上测试我们的布局，或者将屏幕旋转90°，我们很快就会发现我们在创建具有美观比例的组件上所做的所有思考都白费了。通常，这些问题可以通过使用**重力**属性定位元素并通过**权重**属性进行缩放来解决。
- en: Weight and gravity
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权重和重力
- en: Being able to set position and proportion without having to worry overly about
    exact screen shape can save us a lot of work. By setting the weight property of
    components and widgets, we can determine the relative amount of screen width or
    height an individual component takes up. This is particularly useful when we want
    most of our widgets set with `wrap_content`, so that they grow as the user needs,
    but also want one view to take up as much space as is available.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 能够设置位置和比例而不必过分关注屏幕的确切形状可以为我们节省大量工作。通过设置组件和控件的权重属性，我们可以确定单个组件占用的屏幕宽度或高度的比例。当我们希望大多数控件使用`wrap_content`，以便根据用户需求进行扩展，但同时也希望一个视图占用尽可能多的空间时，这特别有用。
- en: For example, the image in the following layout will shrink appropriately as
    the text above it grows.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下布局中的图像将随着上方文本的增长而适当缩小。
- en: '![Weight and gravity](img/image_04_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![权重和重力](img/image_04_001.jpg)'
- en: 'The image view is the only view to have weight applied, the other views all
    have their `height` declared with `wrap_content`. As seen here, we have to set
    the `layout_height` to `0dp` here to avoid any internal conflicts when setting
    the view''s height:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在此图中，只有图像视图应用了权重，其他视图的`height`都使用`wrap_content`声明。正如这里所看到的，我们需要将`layout_height`设置为`0dp`以避免在设置视图高度时发生内部冲突：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Weight can not only be applied to individual widgets and views, but to view
    groups and nested layouts.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 权重不仅可以应用于单个小部件和视图，还可以应用于视图组和嵌套布局。
- en: Automatically filling screen space that is liable to change is very useful,
    but weight can be applied to more than one view to create layouts where views
    each consume a specified relative area of an activity. For example, the following
    images were scaled with weights of `1`, `2`, `3`, and `2`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自动填充可能变化的屏幕空间非常有用，但权重可以应用于多个视图，以创建每个视图占用活动指定相对面积的布局。例如，以下图片就使用了`1`、`2`、`3`和`2`的权重进行缩放。
- en: '![Weight and gravity](img/image_04_002.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![权重和重力](img/image_04_002.jpg)'
- en: 'Although nesting layouts within each other is something to generally avoid,
    it is often worth considering one or two levels as this can produce some very
    workable activities. For example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管通常应避免在一个布局中嵌套另一个布局，但考虑一两个层级往往是有价值的，因为这可以产生一些非常实用的活动。例如：
- en: '![Weight and gravity](img/image_04_003.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![权重和重力](img/image_04_003.jpg)'
- en: 'This layout uses only two nested view groups and the use of weight can keep
    the structure very workable across quite a wide range of form factors. Of course,
    this layout would look terrible in portrait, but we see how this issue is countered
    later in the chapter. The XML to generate such a layout would look like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局仅使用两个嵌套的视图组，且权重的使用可以使得结构在相当广泛的屏幕尺寸上都能很好地工作。当然，这个布局在竖屏模式下看起来会很糟糕，但我们在本章后面会看到如何解决这个问题。生成此类布局的XML代码如下所示：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The example above begs an interesting question. What if we do not want to fill
    the entire width or height of our layout? What if we want some space left? This
    is easily managed with the **weightSum** property.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例引出了一个有趣的问题。如果我们不想填满布局的整个宽度和高度怎么办？如果我们想要留出一些空间呢？这可以通过**weightSum**属性轻松管理。
- en: 'To see how weightSum works, add the following highlighted property to the inner
    linear layout definition in the previous example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解`weightSum`是如何工作的，可以在上一个示例中的内部线性布局定义中添加以下突出显示的属性：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By setting a maximum weight for the layout, the inner weights will be set in
    proportion to this. In this example, a `weightSum` of `10` sets the inner weights,
    which are `3` and `2`, to 3/10 and 2/10 of the layout height, like so:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为布局设置最大权重，内部权重将按比例设置。在这个例子中，`weightSum`为`10`设置了内部权重，即`3`和`2`，分别占布局高度的3/10和2/10，如下所示：
- en: '|  |   |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|  |   |'
- en: '|  | ![Weight and gravity](img/image_04_004.jpg) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|  | ![权重和重力](img/image_04_004.jpg) |'
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that both the weight and `weightSum` are floating point properties, and
    a greater level of accuracy can be achieved with lines such as this: `android:weightSum="20.5"`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，权重和`weightSum`都是浮点属性，使用如下这样的行可以取得更高的精确度：`android:weightSum="20.5"`。
- en: The use of weight is an extremely useful way to make the most of unknown screen
    sizes and shapes. Another technique for managing overall screen space is to use
    gravity to position components and their contents.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用权重是充分利用未知屏幕大小和形状的极其有用的方法。管理整体屏幕空间的另一种技术是使用重力来定位组件及其内容。
- en: 'The **gravity** property is used to justify views and/or their contents. In
    the example given previously, the following markup was used to position the action
    at the bottom of the activity:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**gravity**属性用于对齐视图及其内容。在之前给出的示例中，以下标记被用于将动作定位在活动的底部：'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This example demonstrates how `layout_gravity` is used to justify a view (or
    view group) within its container. The contents of a single view can also be positioned
    within that view with the `gravity` property, which can be set with something
    like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例演示了如何使用`layout_gravity`来对齐容器内的视图（或视图组）。单个视图的内容也可以通过`gravity`属性在视图内部定位，可以像这样设置：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ordering our layouts into rows and columns is perhaps the simplest way to consider
    screen layouts, but it is not the only one. The **relative layout** provides an
    alternative technique that is based on position rather than proportion. The relative
    layout also allows us to proportion its content by using the **percent support
    library**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将布局按行和列排序可能是考虑屏幕布局的最简单方法，但这不是唯一的方法。**相对布局**提供了一种基于位置而非比例的替代技术。相对布局还允许我们使用**百分比支持库**来对其内容进行比例调整。
- en: Relative layouts
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相对布局
- en: 'Probably the biggest advantage of the relative layout is the way it can be
    used to reduce the number of nested view groups when building complex layouts.
    This works by defining views'' positions in accordance to how they are positioned
    and aligned to each other with properties such as `layout_below` and `layout_toEndOf`.
    To see how this is done, consider the linear layout of the previous example. We
    can recreate this as a relative layout with no nested viewgroups, like so:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 相对布局最大的优势可能是它能够减少在构建复杂布局时嵌套视图组数量。这是通过定义视图的位置以及它们如何通过属性如`layout_below`和`layout_toEndOf`相互定位和对齐来实现的。要看这是如何操作的，可以考虑上一个示例中的线性布局。我们可以将其重新创建为一个没有嵌套视图组的相对布局，如下所示：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Despite the obvious advantage that this approach requires no nested view groups,
    we have to set the individual view's dimensions explicitly, and as soon as we
    preview the output on different screens, these proportions are soon lost or, at
    the very least, distorted.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法的明显优势是不需要嵌套视图组，但我们必须明确设置单个视图的尺寸，一旦在不同屏幕上预览输出，这些比例很快就会丢失，或者至少会被扭曲。
- en: One solution to this issue could be to create separate `dimens.xml` files for
    different screen configurations, but if we want something that fills a precise
    percentage of the screen, then we will never be able to guarantee this across
    every possible device. Fortunately, Android provides a very useful support library.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法之一可能是为不同的屏幕配置创建单独的`dimens.xml`文件，但如果我们想要填充屏幕的精确百分比，那么我们永远无法保证在每种可能的设备上都能实现这一点。幸运的是，Android提供了一个非常有用的支持库。
- en: The percent support library
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 百分比支持库
- en: Being able to define exact proportions for a given component could be something
    of a problem in a relative layout, as we can only really describe where things
    are rather than their prominence within the group. Fortunately, the percent library
    provides **PercentRelativeLayout** to counter this problem.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在相对布局中为给定组件定义确切比例可能是一个问题，因为我们只能描述事物在哪里，而不能描述它们在组内的突出程度。幸运的是，百分比库提供了**PercentRelativeLayout**来解决这一问题。
- en: 'As with other support libraries, the percent library must be included in the
    `build.gradle` file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他支持库一样，百分比库必须包含在`build.gradle`文件中：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To create the same layout as previously, we would use the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建之前的相同布局，我们将使用以下代码：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The percent library provides an intuitive and simple way to create proportions
    that are not easily distorted by being displayed on an untested form factor. These
    models work very well when tested on other devices with the same orientation.
    However, once we rotate these layouts through 90°, we can see the problem. Fortunately,
    the Android SDK allows us to reuse our layout patterns to create alternative versions
    with the minimum of re-coding. As we might expect, this is achieved by creating
    designated layout configurations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 百分比库提供了一种直观且简单的方法来创建比例，这些比例在未测试的形态因素上显示时不容易被扭曲。这些模型在其他具有相同方向的设备上测试时工作得非常好。然而，一旦我们将这些布局旋转90°，我们就能看到问题所在。幸运的是，Android
    SDK允许我们重用我们的布局模式，以最小的重新编码创建替代版本。正如我们所料，这是通过创建指定的布局配置来实现的。
- en: Screen rotation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕旋转
- en: Most, if not all, mobile devices allow for screen reorientation. Many apps,
    such as video players, are better suited to one orientation than another. Generally
    speaking, we want our apps to look their best, however rotated.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数，如果不是全部的移动设备，都允许屏幕重新定向。许多应用程序（如视频播放器）更适合一个方向而不是另一个。一般来说，我们希望我们的应用程序无论旋转多少度都能看起来最好。
- en: 'Most layouts look terrible when translated from portrait to landscape or vice
    versa. Clearly, we need to create alternatives for these situations. Fortunately,
    we do not have to start from scratch. The best way to see how this is done is
    to start with a standard portrait layout like the one here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当从竖屏转换为横屏或反之亦然时，大多数布局看起来都很糟糕。显然，我们需要为这些情况创建替代方案。幸运的是，我们不需要从头开始。要看这是如何实现的，可以从这里的一个标准的竖屏布局开始：
- en: '![Screen rotation](img/image_04_005.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕旋转](img/image_04_005.jpg)'
- en: 'This can be recreated with the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下代码重新创建：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Again, once this is rotated, it looks very poorly designed. To create an acceptable
    landscape version, view your layout in design mode and click on the configuration
    icon in the top-left corner of the design panel and select **Create Landscape
    Variation**:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，一旦旋转，它看起来设计得非常糟糕。为了创建一个可接受的横屏版本，请在设计模式下查看你的布局，并点击设计面板左上角的配置图标，选择**创建横屏变体**：
- en: '![Screen rotation](img/image_04_006.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕旋转](img/image_04_006.jpg)'
- en: 'This produces a copy of our file in a folder that will be referred to for its
    layout definitions whenever the app finds itself in landscape mode. This directory
    lies alongside the `res/layout` folder and is called `res/layout-land`. It is
    simply a matter now of rearranging our views to suit this new format, and we can,
    in fact, use the layout from earlier in the chapter, like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在一个文件夹中创建我们文件的副本，该文件夹在应用程序处于横屏模式时会引用其布局定义。这个目录与`res/layout`文件夹并列，名为`res/layout-land`。现在只需重新排列我们的视图以适应这种新格式，实际上，我们可以使用本章早些时候的布局，如下所示：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Screen rotation](img/image_04_007.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕旋转](img/image_04_007.jpg)'
- en: It only takes a few seconds to apply these changes and create a landscape layout,
    but there is more we can do here. In particular, we can create layouts designed
    specifically for larger screens and tablets.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 应用这些更改并创建横屏布局只需几秒钟，但我们还可以做得更多。特别是，我们可以创建专门为大屏幕和平板电脑设计的布局。
- en: Large screen layouts
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大屏幕布局
- en: When we were creating a landscape version of our layout from the configuration
    menu, you will no doubt have noticed the **Create layout-xlarge** **Version**
    option, and, as you would imagine, this is used to create layouts suitable for
    the larger screens of tablets and even TVs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从配置菜单创建我们布局的横屏版本时，你无疑注意到了**创建layout-xlarge版本**的选项，正如你所想象的，这是用于为平板电脑和甚至电视的大屏幕创建合适的布局。
- en: If you select this option, you will immediately see that our judicious use of
    the percent library has produced an identical layout, and it is tempting to feel
    that this layout is unnecessary, but this would be to miss the point. Devices
    such as a 10'' tablet provide a lot more space and rather than just enlarge our
    layout, we should use this opportunity to provide more content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择这个选项，你会立即看到我们对百分比库的明智使用产生了相同的布局，可能会觉得这个布局是不必要的，但这会忽略重点。像10英寸平板这样的设备提供了更多的空间，我们不仅应该放大我们的布局，还应该利用这个机会提供更多的内容。
- en: 'In this example, we will just add an extra frame for the xlarge version. This
    is easily done by adding the following XML and adjusting the height percentage
    value of some of the other views:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只为xlarge版本添加一个额外的框架。这很容易做到，只需添加以下XML，并调整其他视图的高度百分比值：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Large screen layouts](img/image_04_008.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![大屏幕布局](img/image_04_008.jpg)'
- en: As well as making the most of larger screens, we can also achieve the opposite
    for small screens with the `small` qualifier. This is useful to optimize layouts
    for small screens by making elements smaller or even removing less important content.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了充分利用大屏幕，我们也可以通过使用`small`限定符为小屏幕实现相反的效果。这有助于优化小屏幕的布局，通过缩小元素大小，甚至移除不那么重要的内容。
- en: Qualifiers like those we have seen here are very useful but they are still quite
    broad. Depending on device resolution, we could very easily find the same layout
    being applied to a large phone and a small tablet. Fortunately, the framework
    provides a way for us to be more precise when defining our layouts.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的限定符非常有用，但它们仍然相当宽泛。根据设备分辨率，我们可能会很容易地发现相同的布局被应用于大手机和小平板上。幸运的是，框架提供了让我们在定义布局时更加精确的方法。
- en: Width qualifiers
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宽度限定符
- en: As developers, we spend a lot of time and energy sourcing and creating great
    imagery and other media. It is important that we do this work justice and ensure
    it is displayed at its best. Imagine that you have a layout that deserves to be
    at least 720 pixels across, to be best appreciated. In such a case, there are
    two things we can do.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们花费大量时间和精力寻找和创造优质的图像和其他媒体内容。重要的是，我们要让这些工作得到应有的展示，确保它们以最佳效果呈现。想象一下，你有一个至少需要720像素宽才能最好地欣赏的布局。在这种情况下，我们可以做两件事。
- en: 'Firstly, we can ensure that our app is only available on devices that have,
    at least, our desired screen resolution, and this can be done by editing the `AndroidManifest`
    file, by adding the following tag within the `manifest` element:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以确保我们的应用程序只在至少具有我们所需屏幕分辨率的设备上可用，这可以通过编辑`AndroidManifest`文件来实现，在`manifest`元素内添加以下标签：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Usually it would be a shame to make our app unavailable to users of small screens
    and the times we might do this are rare. Apps designed for large TV screens or
    for precise photo editing might be the exception. More often we would rather create
    layouts to suit as many screen sizes as possible and that leads us to our second
    option.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，让我们的应用对小型屏幕用户不可用是一件遗憾的事，我们可能这样做的情况很少。为大型电视屏幕设计或精确照片编辑的应用可能是例外。更常见的是，我们更愿意创建适合尽可能多的屏幕尺寸的布局，这导致了我们的第二个选项。
- en: 'The Android platform allows us to design layouts for specific screen sizes
    according to criteria such as **minimum and available width** in pixels. By *minimum*,
    we mean the narrowest of the two screen dimensions, regardless of orientation.
    For most devices, this would mean width when viewed in portrait mode and height
    in landscape mode. The use of *available* width provides another level of flexibility,
    in that the width is measured according to how a screen is orientated, allowing
    us to design some very specific layouts. Optimizing layouts according to the smallest
    width is very simple and is done with qualifiers as before. So a file named:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓平台允许我们根据诸如 **最小和可用宽度**（以像素为单位）的具体屏幕尺寸标准来设计布局。通过*最小*，我们指的是两个屏幕尺寸中最窄的一个，无论方向如何。对于大多数设备来说，这意味着在纵向模式下查看时的宽度，以及横向模式下的高度。使用*可用*宽度提供了另一个级别的灵活性，即宽度是根据屏幕的方向来测量的，这允许我们设计一些非常特定的布局。根据最小宽度优化布局非常简单，就像以前使用限定符一样。所以一个名为：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: will replace
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将替换
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: on devices with a shortest side of 720 dp or greater.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在最短边为 720 dp 或更大的设备上。
- en: Of course, we can create a folder for any size we choose, for example `res/layout-sw600dp`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以创建任意大小文件夹，例如 `res/layout-sw600dp`。
- en: 'This technique is great for designing layouts for large screens regardless
    of orientation. However, it could be very useful to design a layout that would
    be applied according to the apparent width based on how a device is oriented at
    any given moment. This is achieved in a similar manner, by designating directories.
    To design for available width, use:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术非常适合为大型屏幕设计布局，无论方向如何。然而，根据设备在特定时刻的方向来应用基于外观宽度的布局设计可能非常有用。这是通过指定目录以类似方式实现的。为了设计可用宽度，使用：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And to optimize for available height, use:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化可用高度，使用：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These qualifiers provide very useful techniques for ensuring our designs make
    the most of available hardware, but there is a slight drawback if we want to develop
    for devices running Android 3.1 or lower. On these devices, the minimum and available
    width qualifiers are not available and we have to use `large` and `xlarge` qualifiers.
    This can lead to two identical layouts, wasting space and adding to our maintenance
    costs. Thankfully there is a way around this, in the form of layout aliases.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些限定符提供了确保我们的设计充分利用可用硬件的非常有用的技术，但如果我们想要为运行 Android 3.1 或更低版本的设备开发，就有一个小缺点。在这些设备上，最小和可用宽度限定符不可用，我们必须使用
    `large` 和 `xlarge` 限定符。这可能导致两个相同的布局，浪费空间并增加我们的维护成本。幸运的是，有一种方法可以解决这个问题，那就是布局别名。
- en: Layout aliases
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局别名
- en: 'To demonstrate how layout aliases work we will imagine a simple case where
    we have just two layouts, our default `activity_main.xml` file which will have
    just two views and a second layout that we will call `activity_main_large.xml`
    which will have three views to take advantage of larger screens. To see how this
    is done, follow these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示布局别名如何工作，我们将想象一个简单的案例，我们只有两个布局，一个是默认的 `activity_main.xml` 文件，其中只有两个视图，另一个是我们称之为
    `activity_main_large.xml` 的布局，它有三个视图，以利用更大的屏幕。要了解如何完成此操作，请按照以下步骤操作：
- en: 'Open the `activity_main` file and provide it with these two views:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main` 文件，为其提供以下两个视图：
- en: '[PRE16]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Copy this file, call it `activity_main_large` and add the following view to
    it:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制此文件，将其命名为 `activity_main_large` 并添加以下视图：
- en: '[PRE17]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Create two **New | Android resource directories** called `res/values-large`
    and `res/values-sw720dp`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个名为 `res/values-large` 和 `res/values-sw720dp` 的 **新建 | 安卓资源目录**。
- en: 'In the `values-large` folder, create a file called `layout.xml` and complete
    it like so:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `values-large` 文件夹中，创建一个名为 `layout.xml` 的文件，并完成如下：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finally, create an identical file in the `values-sw720dp` folder:![Layout aliases](img/image_04_009.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `values-sw720dp` 文件夹中创建一个相同的文件：![布局别名](img/image_04_009.jpg)
- en: Using layout aliases in this way means we only have to create one large layout
    and it will be applied to larger screens regardless of which Android platform
    a device is running.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式使用布局别名意味着我们只需要创建一个大型布局，无论设备运行的是哪个Android平台，它都将应用于大屏幕。
- en: In this example, we chose `720dp` as our threshold. In most cases this would
    target 10'' tablets and larger. If we wanted our large layout to run on most 7''
    tablets and large phones, we would use `600dp`, and we can of course select any
    value that suits our purpose.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们选择`720dp`作为我们的阈值。在大多数情况下，这将针对10英寸平板和更大的设备。如果我们希望我们的较大布局在大多数7英寸平板和大手机上运行，我们会使用`600dp`，当然我们可以选择任何符合我们目的的值。
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are some, very rare, occasions where we might want to restrict an app
    to only landscape or portrait. This can be achieved by adding `android:screenOrientation="portrait"`
    or `android:screenOrientation="landscape"`to the activity tag in the manifest
    file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望限制应用仅支持横屏或竖屏。这可以通过在清单文件的activity标签中添加`android:screenOrientation="portrait"`或`android:screenOrientation="landscape"`来实现。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Generally speaking, we should create landscape and portrait layouts for phones,
    7'' tablets and 10'' tablets.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，我们应该为手机、7英寸平板和10英寸平板创建横屏和竖屏布局。
- en: Designing appealing and intuitive layouts is among the most important tasks
    we face as developers, and the shortcuts introduced here greatly reduce the amount
    of work we have to do, freeing us up to concentrate on designing attractive applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 设计吸引人且直观的布局是我们作为开发者面临的最重要任务之一，这里引入的快捷方式大大减少了我们的工作量，使我们能够专注于设计吸引人的应用程序。
- en: As with the last chapter, we have concentrated on the more practical issue of
    layout structure, and this is of course prerequisite to further development. However,
    there are a lot of patterns for us to familiarize ourselves with and the sooner
    we become familiar with them the better and the more likely that we will identify
    structures that would benefit from having a pattern applied. Once such pattern
    that could be applied in situations like those explored in this chapter is the
    strategy design pattern.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章一样，我们关注的是更实际的布局结构问题，这当然是进一步开发的前提。然而，有很多模式需要我们熟悉，我们越早熟悉它们越好，这样我们就越有可能识别出那些可能从应用模式中受益的结构。本章探讨的情况中可以应用的一种模式就是策略设计模式。
- en: The strategy pattern
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略模式
- en: 'The strategy pattern is another widely used and incredibly useful. Its beauty
    lies in its versatility as it can be applied in numerous situations. Its purpose
    is to provide a selection of solutions (strategies) to a given problem at runtime.
    A good example would be an app with a strategy to run different code depending
    whether the app was being installed on Windows, Mac OS, or Linux. Were the system
    of designation we used above to design UIs for different devices so efficient,
    we could easily use a strategy pattern to carry out this task. It would look something
    like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模式是另一种被广泛使用且极其有用的模式。其美妙之处在于它的灵活性，因为它可以应用于众多场景中。其目的是在运行时为给定问题提供一系列解决方案（策略）。一个很好的例子就是，一个应用在安装于Windows、Mac
    OS或Linux系统时，会采用不同的策略来运行不同的代码。如果我们上面用来为不同设备设计UI的系统如此高效，我们可以轻松地使用策略模式来完成这项任务。它看起来会像这样：
- en: '![The strategy pattern](img/image_04_010.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![策略模式](img/image_04_010.jpg)'
- en: 'For now, we will step ahead a little and imagine a situation where the users
    of our sandwich maker app are ready to pay. We will assume three methods: credit
    card, cash, and a coupon. Those paying cash will simply pay the set price. A little
    unfairly, those paying by card will be charged a small fee and those with a coupon
    will get 10% off. We will also use a singleton to represent the basic price before
    these strategies are applied. Follow these steps to set up a strategy pattern:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将稍微向前迈进一步，设想一下我们的三明治制作应用用户准备支付的情况。我们将假设三种支付方式：信用卡、现金和优惠券。现金支付的用户将直接支付设定的价格。有些不公平的是，信用卡支付的用户将被收取小额费用，而持有优惠券的用户将获得10%的折扣。我们还将使用单例来表示应用这些策略之前的基本价格。按照以下步骤设置策略模式：
- en: 'We start, as is often the case, with an interface:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通常从接口开始：
- en: '[PRE20]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, create concrete implementations of this interface, like so:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建这个接口的具体实现，如下所示：
- en: '[PRE21]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now add the following class:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加以下类：
- en: '[PRE22]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, add the singleton class that is going to provide our basic price:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加将提供我们基本价格的单例类：
- en: '[PRE23]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is all that we need to do to create the pattern. A singleton was used
    because the price of the current sandwich is something that needs to only have
    a single instance and be reached from anywhere in the code. Before we build a
    UI and test our pattern, let''s take a quick look at the strategy class diagram:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要创建模式所做的一切。使用单例是因为当前三明治的价格是需要只有一个实例并且在代码的任何地方都能访问到的东西。在我们构建用户界面并测试我们的模式之前，让我们快速查看一下策略类图：
- en: '![The strategy pattern](img/image_04_011.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![策略模式](img/image_04_011.jpg)'
- en: 'We can see from the diagram that the activity contains an `onClick()` callback.
    Before we can see how this works, we need to create a layout with three action
    buttons to test each of our three payment options. Follow these steps to achieve
    this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中我们可以看到，活动包含了一个`onClick()`回调。在我们了解这是如何工作的之前，我们需要创建一个带有三个操作按钮的布局，以测试我们的三种支付选项。按照以下步骤来实现这一点：
- en: Create a layout file with a horizontal linear layout at its root.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个以水平线性布局为根的布局文件。
- en: 'Add the following view and inner layout:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下视图和内部布局：
- en: '[PRE24]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now add buttons to the relative layout. The first two look like this:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在给相对布局添加按钮。前两个按钮看起来像这样：
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The third is the same as the second, with the following exceptions:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个与第二个相同，除了以下例外：
- en: '[PRE26]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now open the Java activity file extend it so that it implements this listener:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开Java活动文件，扩展它，使其实现这个监听器：
- en: '[PRE27]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next add the following field:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来添加以下字段：
- en: '[PRE28]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Include these lines on the `onCreate()` method:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate()`方法中包含以下这些行：
- en: '[PRE29]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally add the `onClick()` method, like so:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后添加`onClick()`方法，如下所示：
- en: '[PRE30]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can now test our output on a device or emulator:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试在设备或模拟器上的输出了：
- en: '![The strategy pattern](img/image_04_012.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![策略模式](img/image_04_012.jpg)'
- en: The strategy pattern can be applied to many situations and as you develop almost
    any software, you will come across situations where it can be applied time and
    again. We will certainly return to it here. Hopefully, introducing it now will
    help you spot situations where it can be utilized.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模式可以应用于许多情况，并且在你开发几乎任何软件时，你都会遇到可以一次又一次应用它的情况。我们肯定会在这里再次讨论它。希望现在介绍它能够帮助你发现可以利用它的情况。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to get the most out of Android layouts. This
    has involved deciding which layout type to use for which purpose, and although
    there are many others, the linear and relative layouts offer the functionality
    and flexibility for very many possible layouts. Once a layout has been selected,
    we can then organize the space with weight and gravity properties. The process
    of designing layouts for a variety of possible screen sizes was greatly helped
    by employing the percent library and PercentRelativeLayout.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何充分利用Android布局。这包括决定哪种布局类型适合哪种用途，尽管还有很多其他类型，但线性布局和相对布局提供了非常多的可能布局的功能和灵活性。选择了一个布局之后，我们可以使用权重和重力属性来组织空间。通过使用百分比库和PercentRelativeLayout，大大简化了为各种可能的屏幕尺寸设计布局的过程。
- en: The biggest challenge a developer faces when designing Android layouts for an
    enormous number of real world devices our apps might find themselves running on.
    Fortunately, the use of resource designation makes light work of this.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者在为可能运行我们应用的众多现实世界设备设计Android布局时面临的最大挑战。幸运的是，资源指定的使用使得这项工作变得轻松。
- en: With a working layout in place, we can move on to look at how we can now use
    this space to display some useful information. This will take us on to look at
    how lists and their data are managed by the recycler view, which we shall do in
    the next chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有了可用的布局后，我们可以继续了解如何利用这个空间显示一些有用的信息。这将引导我们在下一章中探讨recycler view如何管理列表及其数据。
