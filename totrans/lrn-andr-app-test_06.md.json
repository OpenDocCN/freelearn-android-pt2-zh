["```kt\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:21.0.2'\n\n    compile project(':core')\n}\n```", "```kt\n  public TemperatureConverterActivityTests() {\n    this(\"TemperatureConverterActivityTests\");\n  }\n\n  public TemperatureConverterActivityTests(String name) {\n    super(TemperatureConverterActivity.class);\n    setName(name);\n  }\n```", "```kt\n@Override  \npublic void setUp() throws Exception {\n    super.setUp();\n    activity = getActivity();\n}\n```", "```kt\ncelsiusInput = (EditText)\n  activity.findViewById(R.id.converter_celsius_input);\nfahrenheitInput = (EditText)\n  activity.findViewById(R.id.converter_fahrenheit_input);\n```", "```kt\n  public final void testHasInputFields() {\n    assertNotNull(celsiusInput);\n    assertNotNull(fahrenheitInput);\n  }\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout \n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:orientation=\"vertical\">\n\n  <TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginBottom=\"@dimen/margin\"\n    android:text=\"@string/message\" />\n\n  <<TextView\n    android:id=\"@+id/converter_celsius_label\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginStart=\"@dimen/margin\"\n    android:text=\"@string/celsius\" />\n\n  <EditText\n    android:id=\"@+id/converter_celsius_input\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"@dimen/margin\"  />\n\n  <TextView\n    android:id=\"@+id/converter_fahrenheit_label\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginStart=\"@dimen/margin\"\n    android:text=\"@string/fahrenheit\"  />\n\n  <EditText\n    android:id=\"@+id/converter_fahrenheit_input\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"@dimen/margin\"  />\n</LinearLayout>\n```", "```kt\npublic class TemperatureConverterActivity extends Activity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_temperature_converter);\n    }\n}\n```", "```kt\n    public void testFieldsShouldStartEmpty() {\n        assertEquals(\"\", celsiusInput.getText().toString());\n        assertEquals(\"\", fahrenheitInput.getText().toString());\n    }\n```", "```kt\n    public void testFieldsOnScreen() {\n        View origin = activity.getWindow().getDecorView();\n\n        assertOnScreen(origin, celsiusInput);\n        assertOnScreen(origin, fahrenheitInput);\n    }\n```", "```kt\n    public void testAlignment() {\n        assertLeftAligned(celsiusLabel, celsiusInput);\n        assertLeftAligned(fahrenheitLabel, fahrenheitInput);\n        assertLeftAligned(celsiusInput, fahrenheitInput);\n        assertRightAligned(celsiusInput, fahrenheitInput);\n    }\n```", "```kt\ncelsiusLabel = (TextView)\n  activity.findViewById(R.id.converter_celsius_label);\nfahrenheitLabel = (TextView)\n  activity.findViewById(R.id.converter_fahrenheit_label);\n```", "```kt\n    public void testCelciusInputFieldCoversEntireScreen() {\n     LayoutParams lp;\n     int expected = LayoutParams.MATCH_PARENT;\n     lp = celsiusInput.getLayoutParams();  \n     assertEquals(\"celsiusInput layout width is not MATCH_PARENT\", expected, lp.width);\n    }\n\n    public void testFahrenheitInputFieldCoversEntireScreen() {\n     LayoutParams lp;\n     int expected = LayoutParams.MATCH_PARENT;\n     lp = fahrenheitInput.getLayoutParams();\n     assertEquals(\"fahrenheitInput layout width is not MATCH_PARENT\", expected, lp.width);\n    }\n```", "```kt\n<EditText\n    android:id=\"@+id/converter_celsius_input\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"@dimen/margin\"\n    android:gravity=\"end|center_vertical\" /> \n```", "```kt\n    public void testFontSizes() {\n        float pixelSize = 24f;\n        assertEquals(pixelSize, celsiusLabel.getTextSize());\n        assertEquals(pixelSize, fahrenheitLabel.getTextSize());\n    }\n```", "```kt\n    public void testFontSizes() {\n        float pixelSize = getFloatPixelSize(R.dimen.label_text_size);\n\n        assertEquals(pixelSize, celsiusLabel.getTextSize());\n        assertEquals(pixelSize, fahrenheitLabel.getTextSize());\n    }\n\n    private float getFloatPixelSize(int dimensionResourceId) {\n        return getActivity().getResources()\n                 .getDimensionPixelSize(dimensionResourceId);\n    }\n```", "```kt\n    public void testCelsiusInputMargins() {\n        LinearLayout.LayoutParams lp =\n(LinearLayout.LayoutParams) celsiusInput.getLayoutParams();\n\n        assertEquals(getIntPixelSize(R.dimen.margin), lp.leftMargin);\n        assertEquals(getIntPixelSize(R.dimen.margin), lp.rightMargin);\n    }\n\n    public void testFahrenheitInputMargins() {\n        LinearLayout.LayoutParams lp =\n(LinearLayout.LayoutParams) fahrenheitInput.getLayoutParams();\n\n        assertEquals(getIntPixelSize(R.dimen.margin), lp.leftMargin);\n        assertEquals(getIntPixelSize(R.dimen.margin), lp.rightMargin);\n    }\n```", "```kt\n    private int getIntPixelSize(int dimensionResourceId) {\n        return (int) getFloatPixelSize(dimensionResourceId);\n    }\n```", "```kt\npublic void testCelsiusInputJustification() {\n  int expectedGravity = Gravity.END | Gravity.CENTER_VERTICAL;\n  int actual = celsiusInput.getGravity();\n  String errorMessage = String.format(\n\"Expected 0x%02x but was 0x%02x\", expectedGravity, actual);\n  assertEquals(errorMessage, expectedGravity, actual);\n}\n\npublic void testFahrenheitInputJustification() {\n  int expectedGravity = Gravity.END | Gravity.CENTER_VERTICAL;\n  int actual = fahrenheitInput.getGravity();\n  String errorMessage = String.format(\n\"Expected 0x%02x but was 0x%02x\", expectedGravity, actual);\n  assertEquals(errorMessage, expectedGravity, actual);\n}\n```", "```kt\nandroid:gravity=\"end|center_vertical\"\n```", "```kt\n   public void testVirtualKeyboardSpaceReserved() {\n        int expected = getIntPixelSize(R.dimen.keyboard_space);\n        int actual = fahrenheitInput.getBottom();\nString errorMessage = \n  \"Space not reserved, expected \" + expected + \" actual \" + actual;\n        assertTrue(errorMessage, actual <= expected);\n    }\n```", "```kt\n@UiThreadTest\npublic void testFahrenheitToCelsiusConversion() {\n  celsiusInput.clear();\n  fahrenheitInput.clear();\n  fahrenheitInput.requestFocus();\n  fahrenheitInput.setText(\"32.5\");\n  celsiusInput.requestFocus();\n  double f = 32.5;\n  double expectedC = TemperatureConverter.fahrenheitToCelsius(f);\n  double actualC = celsiusInput.getNumber();\n  double delta = Math.abs(expectedC - actualC);\n  String msg = \"\" + f + \"F -> \" + expectedC + \"C but was \" \n    + actualC + \"C (delta \" + delta + \")\";\n  assertTrue(msg, delta < 0.005);\n}\n```", "```kt\npublic class TemperatureConverterActivityTests extends ActivityInstrumentationTestCase2<TemperatureConverterActivity> {\n\n  private TemperatureConverterActivity activity;  \n  private EditNumber celsiusInput;\n  private EditNumber fahrenheitInput;\n  private TextView celsiusLabel;\n  private TextView fahrenheitLabel;\n```", "```kt\njava.lang.ClassCastException:\nandroid.widget.EditText cannot be cast to com.blundell.tut.EditNumber\nat com.blundell.tut.TemperatureConverterActivityTests.setUp(\nTemperatureConverterActivityTests.java:36)\nat android.test.AndroidTestRunner.runTest(\nAndroidTestRunner.java:191)\n\n```", "```kt\n<com.blundell.tut.EditNumber\n    android:id=\"@+id/converter_celsius_input\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"@dimen/margin\"\n    android:gravity=\"end|center_vertical\" />\n```", "```kt\napply plugin: 'java''java'\n\ndependencies {\n    compile fileTree(dir: 'libs''libs', include: [''''*.jar'])\n\n    testCompile 'junit'junit:junit:4.+''''\n}\n```", "```kt\n@Test\npublic void testFahrenheitToCelsius() {\n    for (double knownCelsius : conversionTable.keySet()) {\n        double knownFahrenheit = conversionTable.get(knownCelsius);\n\n        double resultCelsius =\nTemperatureConverter.fahrenheitToCelsius(knownFahrenheit);\n\n        double delta = Math.abs(resultCelsius - knownCelsius);\n        String msg = knownFahrenheit + \"F -> \" + knownCelsius + \"C\"+ \"but is \" + resultCelsius;\n        assertTrue(msg, delta < 0.0001);\n     }\n}\n```", "```kt\nMap<Double, Double> conversionTable = new HashMap<Double, Double>() {\n  // initialize (celsius, fahrenheit) pairs\n  put(0.0, 32.0);\n  put(100.0, 212.0);\n  put(-1.0, 30.20);\n  put(-100.0, -148.0);\n  put(32.0, 89.60);\n  put(-40.0, -40.0);\n  put(-273.0, -459.40);\n}};\n```", "```kt\njava.lang.AssertionError: -40.0F -> -40.0C but is 0.0\n at org.junit.Assert.fail(Assert.java:88)\n at org.junit.Assert.assertTrue(Assert.java:41)\n at com.blundell.tut.TemperatureConverterTests.testFahrenheitToCelsius(TemperatureConverterTests.java:31).\n\n```", "```kt\n    private static final double ABSOLUTE_ZERO_F = -459.67d;\n\n    private static final String ERROR_MESSAGE_BELOW_ZERO_FMT =       \"Invalid temperature: %.2f%c below absolute zero\";\n\n    private TemperatureConverter() {\n        // non-instantiable helper class\n    }\n\n    public static double fahrenheitToCelsius(double fahrenheit) {\n        if (fahrenheit < ABSOLUTE_ZERO_F) {\n            String msg = String.format(ERROR_MESSAGE_BELOW_ZERO_FMT,               fahrenheit, 'F''F');\n            throw new InvalidTemperatureException(msg);\n        }\n        return ((fahrenheit - 32) / 1.8d);\n    }\n```", "```kt\npublic class InvalidTemperatureException extends RuntimeException {\n\n  public InvalidTemperatureException(String msg) {\n    super(msg);\n  }\n\n}\n```", "```kt\npublic EditNumberTests() {\n this(\"EditNumberTests\");\n }\n\n public EditNumberTests(String name) {\n setName(name);\n    }\n```", "```kt\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        editNumber = new EditNumber(mContext);\n        editNumber.setFocusable(true);\n    }\n```", "```kt\n@UiThreadTest\npublic void testClear() {\nString value = \"123.45\";\n          editNumber.setText(value);\n\n          editNumber.clear();\n\n          assertEquals(\"\", editNumber.getText().toString());\n} \n```", "```kt\njunit.framework.ComparisonFailure: expected:<[]> but was:<[123.45]>\nat com.blundell.tut.EditNumberTests.testClear(EditNumberTests.java:31)\nat java.lang.reflect.Method.invokeNative(Native Method)\nat android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:191)\n\n```", "```kt\n  public void clear() {\n    setText(\"\");\n  }\n```", "```kt\n           public void testSetNumber() {\n\n        editNumber.setNumber(123.45);\n\n        assertEquals(\"123.45\", editNumber.getText().toString());\n    }\n```", "```kt\n    private static final String DEFAULT_FORMAT = \"%.\"%.2f\";\";\n\n    public void setNumber(double number) {\n        super.setText(String.format(DEFAULT_FORMAT, number));\n    }\n```", "```kt\n      public void testGetNumber() {\n\n        editNumber.setNumber(123.45);\n\n        assertEquals(123.45, editNumber.getNumber());\n    }\n```", "```kt\n    public double getNumber() {\n        String number = getText().toString();\n        if (TextUtils.isEmpty(number)) {\n            return 0D;\n        }\n        return Double.valueOf(number);\n    }\n```", "```kt\npublic class TemperatureConverterActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_temperature_converter);\n    }\n\n    /**\n     * Changes fields values when the text changes; applying the correlated conversion method.\n     */\n    static class TemperatureChangedWatcher implements TextWatcher {\n\n        @Override\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n        }\n\n        @Override\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n\n        }\n\n        @Override\n        public void afterTextChanged(Editable s) {\n        }\n    }\n}\n```", "```kt\n/**\n * Changes fields values when the text changes;\n * applying the correlated conversion method.\n */\nstatic class TemperatureChangedWatcher implements TextWatcher {\n\nprivate final EditNumber sourceEditNumber;\nprivate final EditNumber destinationEditNumber;\nprivate final Option option;\n\nprivate TemperatureChangedWatcher(Option option,\nEditNumber source,\nEditNumber destination) {\nthis.option = option;\n   this.sourceEditNumber = source;\n   this.destinationEditNumber = destination;\n}\n\nstatic TemperatureChangedWatcher newCelciusToFehrenheitWatcher(EditNumber source, EditNumber destination) {\nreturn new TemperatureChangedWatcher(Option.C2F, source, destination);\n}\n\nstatic TemperatureChangedWatcher newFehrenheitToCelciusWatcher(EditNumber source, EditNumber destination) {\nreturn new TemperatureChangedWatcher(Option.F2C, source, destination);\n}\n\n@Override\npublic void onTextChanged(CharSequence input, int start, int before, int count) {\nif (!destinationEditNumber.hasWindowFocus()\n|| destinationEditNumber.hasFocus()\n|| input == null) {\n       return;\n}\n\n   String str = input.toString();\n   if (\"\".equals(str)) {\n       destinationEditNumber.setText(\"\");\n          return;\n}\n\n   try {\n      double temp = Double.parseDouble(str);\n      double result = (option == Option.C2F)\n? TemperatureConverter.celsiusToFahrenheit(temp)\n: TemperatureConverter.fahrenheitToCelsius(temp);\n    String resultString = String.format(\"%.2f\", result);\n    destinationEditNumber.setNumber(result);\n    destinationEditNumber.setSelection(resultString.length());\n   } catch (NumberFormatException ignore) {\n      // WARNING this is generated whilst \n // numbers are being entered,\n // for example just a '-' \n // so we don''t want to show the error just yet\n   } catch (Exception e) {\n     sourceEditNumber.setError(\"ERROR: \" + e.getLocalizedMessage());\n   }\n}\n\n@Override\npublic void afterTextChanged(Editable editable) {\n// not used\n}\n\n@Override\npublic void beforeTextChanged(CharSequence s, int start, int count, int after) {\n// not used\n}\n}\n```", "```kt\n/**\n * C2F: celsiusToFahrenheit\n * F2C: fahrenheitToCelsius\n */\npublic enum Option {\n    C2F, F2C\n}\n```", "```kt\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.activity_temperature_converter);\n  EditNumber celsiusEditNumber =\n  (EditNumber) findViewById(R.id.converter_celsius_input); \n  EditNumber fahrenheitEditNumber =\n  (EditNumber) findViewById(R.id.converter_fahrenheit_input);\n  celsiusEditNumber\n  .addTextChangedListener(\nnewCelciusToFehrenheitWatcher(celsiusEditNumber, fahrenheitEditNumber));\n\nfahrenheitEditNumber\n .addTextChangedListener(\n newFehrenheitToCelciusWatcher(fahrenheitEditNumber, \n celsiusEditNumber));\n}\n```", "```kt\n@Test\n    public void testCelsiusToFahrenheit() {\n        for (double knownCelsius : conversionTable.keySet()) {\n            double knownFahrenheit = conversionTable.get(knownCelsius);\n\n            double resultFahrenheit = \nTemperatureConverter.celsiusToFahrenheit(knownCelsius);\n\n            double delta = Math.abs(resultFahrenheit - knownFahrenheit);\n            String msg = knownCelsius + \"C -> \" + knownFahrenheit + \"F\"\n+ \" but is \" + resultFahrenheit;\n            assertTrue(msg, delta < 0.0001);\n        }\n    }\n```", "```kt\n    static final double ABSOLUTE_ZERO_C = -273.15d;\n\n    public static double celsiusToFahrenheit(double celsius) {\n        if (celsius < ABSOLUTE_ZERO_C) {\n            String msg = String.format(\nERROR_MESSAGE_BELOW_ZERO_FMT, celsius, 'C');\n            throw new InvalidTemperatureException(msg);\n        }\n        return (celsius * 1.8d + 32);\n    }\n```", "```kt\n    @Test(expected = InvalidTemperatureException.class)\n    public void testExceptionForLessThanAbsoluteZeroF() {\n        TemperatureConverter.fahrenheitToCelsius(ABSOLUTE_ZERO_F - 1);\n    }\n```", "```kt\n    @Test(expected = InvalidTemperatureException.class)\n    public void testExceptionForLessThanAbsoluteZeroC() {\n        TemperatureConverter.celsiusToFahrenheit(ABSOLUTE_ZERO_C - 1);\n    }\n```", "```kt\npublic void testInputFilter() throws Throwable {\n        runTestOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                celsiusInput.requestFocus();\n            }\n        });\n        getInstrumentation().waitForIdleSync();\n\n        sendKeys(\"MINUS 1 PERIOD 2 PERIOD 3 PERIOD 4\");\n        double number = celsiusInput.getNumber();\n\n        String msg = \"-1.2.3.4 should be filtered to -1.234 \" \n          + \"but is \" + number;\n        assertEquals(msg, -1.234d, number);\n    }\n```", "```kt\n   public EditNumber(Context context) {\n        super(context);\n        init();\n   }\n   public EditNumber(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n   }\n\n   public EditNumber(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n   }\n\n   private void init() {\n    // DigistKeyListener.getInstance(true, true)\n    // returns an instance that accepts digits, sign and decimal point\n    InputFilter[] filters =\n      new InputFilter[]{DigitsKeyListener.getInstance(true, true)};\n       setFilters(filters);\n   }\n```"]