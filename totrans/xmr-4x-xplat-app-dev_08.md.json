["```kt\npublic interface IFriendService \n{ \n    Task<User[]> GetFriends(string userName); \n} \n\n```", "```kt\nprivate IFriendService friendService =  \n  ServiceContainer.Resolve<IFriendService>(); \n\npublic async Task GetFriends() \n{ \n  //previous code here, use 'friendService' instead of 'service' \n  Friends = await friendService.GetFriends(settings.User.Name);  \n} \n\n```", "```kt\npublic class ContactsService : IFriendService \n{ \n  public async Task<User[]> GetFriends(string userName) \n  { \n    var book = new Xamarin.Contacts.AddressBook(); \n    await book.RequestPermission(); \n\n```", "```kt\n    var users = new List<User>(); \n    foreach (var contact in book) \n    { \n      users.Add(new User \n      { \n        Name = contact.DisplayName, \n      }); \n    } \n    return users.ToArray();     \n  } \n} \n\n```", "```kt\nServiceContainer.Register<IFriendService>( \n  () => new ContactsService()); \n\n```", "```kt\npublic class ContactsService : IFriendService \n{ \n  public async Task<User[]> GetFriends(string userName) \n  { \n    var book = new  \n        Xamarin.Contacts.AddressBook(Application.Context); \n    await book.RequestPermission(); \n\n    var users = new List<User>(); \n    foreach (var contact in book) \n    { \n      users.Add(new User \n      { \n        Name = contact.DisplayName, \n      }); \n    } \n    return users.ToArray();     \n  } \n} \n\n```", "```kt\npublic class Location\n{\n    public double Latitude { get; set; }\n    public double Longitude { get; set; }\n}\n```", "```kt\npublic Location Location { get; set; }\n```", "```kt\npublic interface ILocationService\n{\n    Task<Location> GetCurrentLocation();\n}\n```", "```kt\n//As a member variable\nprivate ILocationService locationService = \n  ServiceContainer.Resolve<ILocationService>();\n//Then in SendMessage()\nvar location = await locationService.GetCurrentLocation();\nvar message = await service.SendMessage(new Message\n{\n    UserName = settings.User.Name,\n    Conversation = Conversation.Id,\n    Text = Text,\n    Location = location,\n});\n```", "```kt\npublic class LocationService : ILocationService \n{ \n  private const int Timeout = 3000; \n  private Geolocator _geolocator; \n\n  public async Task<Location> GetCurrentLocation() \n  { \n    try \n    { \n      //NOTE: wait until here to create Geolocator \n      //  so that the iOS prompt appears on GetCurrentLocation() \n      if (_geolocator == null) \n        _geolocator = new Geolocator(); \n\n      var location = await _geolocator.GetPositionAsync(Timeout); \n\n      Console.WriteLine(\"GPS location: {0},{1}\", \n        location.Latitude, location.Longitude); \n\n      return new Location \n      { \n        Latitude = location.Latitude, \n        Longitude = location.Longitude, \n      }; \n    } \n    catch (Exception exc) \n    { \n      Console.WriteLine(\"Error finding GPS location: \" + exc); \n\n      //If anything goes wrong, just return null \n      return null; \n    } \n  } \n} \n\n```", "```kt\nServiceContainer.Register<ILocationService>( \n  () => new LocationService()); \n\n```", "```kt\nif (_geolocator == null) \n  _geolocator = new Geolocator(Application.Context); \n\n```", "```kt\nServiceContainer.Register<ILocationService>( \n  () => new LocationService()); \n\n```", "```kt\npublic string Image { get; set; } \n\n```", "```kt\nif (string.IsNullOrEmpty(Text) && string.IsNullOrEmpty(Image))\n   throw new Exception(\"Message is blank.\");\n\n//Then further down \nvar message = await service.SendMessage(new Message\n{\n     UserName = settings.User.Name,\n     Conversation = Conversation.Id,\n     Text = Text,\n     Image = Image,\n     Location = location,\n});\n//Clear our variables \nText =\n      Image = null;  \n\n```", "```kt\nUIBarButtonItem photo; \nMediaPicker picker; \n\n```", "```kt\npicker = new MediaPicker(); \nphoto = new UIBarButtonItem(UIBarButtonSystemItem.Camera,  \n  (sender, e) => \n  { \n    //In case the keyboard is up \n    message.ResignFirstResponder(); \n\n    var actionSheet = new UIActionSheet(\"Choose photo?\"); \n    actionSheet.AddButton(\"Take Photo\"); \n    actionSheet.AddButton(\"Photo Library\"); \n    actionSheet.AddButton(\"Cancel\"); \n    actionSheet.Clicked += OnActionSheetClicked; \n    actionSheet.CancelButtonIndex = 2; \n    actionSheet.ShowFrom(photo, true); \n  }); \n\n```", "```kt\nasync void OnActionSheetClicked( \n  object sender, UIButtonEventArgs e) \n{ \n  MediaPickerController controller = null; \n  try \n  { \n    if (e.ButtonIndex == 0) \n    { \n      if (!picker.IsCameraAvailable) \n      { \n        new UIAlertView(\"Oops!\",  \n          \"Sorry, camera not available on this device!\", null,  \n          \"Ok\").Show(); \n        return; \n      } \n\n      controller = picker.GetTakePhotoUI( \n        new StoreCameraMediaOptions()); \n      PresentViewController(controller, true, null); \n\n      var file = await controller.GetResultAsync(); \n      messageViewModel.Image = file.Path; \n      Send(); \n    } \n    else if (e.ButtonIndex == 1) \n    { \n      controller = picker.GetPickPhotoUI(); \n      PresentViewController(controller, true, null); \n\n      var file = await controller.GetResultAsync(); \n      messageViewModel.Image = file.Path; \n      Send(); \n    } \n  } \n  catch (TaskCanceledException) \n  { \n    //Means the user just cancelled \n  } \n  finally \n  { \n    controller?.DismissViewController(true, null); \n  } \n} \n\n```", "```kt\npublic override UITableViewCell GetCell( \n  UITableView tableView, NSIndexPath indexPath)\n  {\n     var message = messageViewModel.Messages[indexPath.Row];\n     bool isMyMessage = message.UserName == settings.User.Name;\n     var cell = tableView.DequeueReusableCell( \n       isMyMessage ? MyCellName : TheirCellName);\n     cell.TextLabel.Text = message.Text ?? string.Empty;\n     cell.ImageView.Image = string.IsNullOrEmpty(message.Image) ?\n       null : UIImage.FromFile(message.Image);\n     return cell; \n  }  \n\n```", "```kt\n//Just after subscribing to IsBusyChanged \nif (PresentedViewController != null) \n  return; \n\n```", "```kt\n<ImageButton \n  android:layout_width=\"wrap_content\" \n  android:layout_height=\"wrap_content\" \n  android:id=\"@+id/photoButton\" \n  android:layout_alignParentLeft=\"true\" \n  android:src=\"img/ic_menu_camera\" /> \n\n```", "```kt\n<!-MyMessageListItem--> \n<ImageView\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:id=\"@+id/myMessageImage\" />\n<TextView   android:text=\"Message\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:id=\"@+id/myMessageText\"\n   android:layout_margin=\"3dp\"\n   android:textColor=\"@android:color/holo_blue_bright\"\n   android:layout_toRightOf=\"@id/myMessageImage\" /> \n<!-TheirMessageListItem--> \n<ImageView\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:id=\"@+id/theirMessageImage\" />\n<TextView\n   android:text=\"Message\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:id=\"@+id/theirMessageText\"\n   android:layout_margin=\"3dp\"\n   android:textColor=\"@android:color/holo_green_light\"\n   android:layout_alignParentRight=\"true\" />  \n\n```", "```kt\nMediaPicker picker; \nImageButton photoButton; \nbool choosingPhoto; \n\n```", "```kt\nprotected override void OnCreate(Bundle savedInstanceState) \n{ \n  base.OnCreate(savedInstanceState); \n\n  Title = viewModel.Conversation.UserName; \n  SetContentView(Resource.Layout.Messages); \n  listView = FindViewById<ListView>(Resource.Id.messageList); \n  messageText = FindViewById<EditText>(Resource.Id.messageText); \n  sendButton = FindViewById<Button>(Resource.Id.sendButton); \n  photoButton = FindViewById<ImageButton>( \n    Resource.Id.photoButton); \n\n  picker = new MediaPicker(this); \n\n  listView.Adapter = \n    adapter = new Adapter(this); \n  sendButton.Click += (sender, e) => Send();\n\n  photoButton.Click += (sender, e) => \n  { \n    var dialog = new AlertDialog.Builder(this) \n      .SetTitle(\"Choose photo?\") \n      .SetPositiveButton(\"Take Photo\", OnTakePhoto) \n      .SetNegativeButton(\"Photo Library\", OnChoosePhoto) \n      .SetNeutralButton(\"Cancel\", delegate { }) \n      .Create(); \n    dialog.Show(); \n  }; \n} \n\nasync void Send() \n{ \n  viewModel.Text = messageText.Text; \n  try \n  { \n    await viewModel.SendMessage(); \n    messageText.Text = string.Empty; \n    adapter.NotifyDataSetInvalidated(); \n  } \n  catch (Exception exc) \n  { \n    DisplayError(exc); \n  } \n} \n\n```", "```kt\n void OnTakePhoto(object sender, EventArgs e)\n {\n     var intent = picker.GetTakePhotoUI(\n       new StoreCameraMediaOptions());\n     choosingPhoto = true;\n     StartActivityForResult(intent, 1);\n }\n void OnChoosePhoto(object sender, EventArgs e)\n {\n     var intent = picker.GetPickPhotoUI();\n     choosingPhoto = true;\n     StartActivityForResult(intent, 1);\n } \n\n```", "```kt\nprotected async override void OnActivityResult(\n  int requestCode, Result resultCode, Intent data)\n{\n   if (resultCode == Result.Ok)\n   {\n       var file = await data.GetMediaFileExtraAsync(this);\n       viewModel.Image = file.Path;\n       Send();\n   }\n} \n\n```", "```kt\nif (choosingPhoto) \n{\n   choosingPhoto = false;\n   return;\n} \n\n```"]