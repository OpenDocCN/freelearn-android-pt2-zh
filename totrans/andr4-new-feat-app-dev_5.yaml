- en: Chapter 5. Fragments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 碎片
- en: Although **fragments** were introduced with Android 3.0, they are now available
    for small screen devices with Android Ice Cream Sandwich. This chapter will cover
    the basics of fragments and how to use them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管**碎片**是在Android 3.0中引入的，但现在它们也适用于小屏幕设备，支持Android Ice Cream Sandwich。本章将介绍碎片的基础知识以及如何使用它们。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Fragment basics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碎片基础
- en: Creating and managing fragments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理碎片
- en: Types of fragments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碎片类型
- en: Fragment basics
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碎片基础
- en: '**Fragment** is a modular component in an activity which has its own life cycle
    and event handling, and it is very similar to an activity. Although fragments
    have their own life cycle, they are directly affected by their owner activity''s
    life cycle. For instance, if an activity is destroyed, its fragments are also
    destroyed. Every fragment should have an owner activity. A fragment could be added
    to or removed from an activity dynamically.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**碎片**是活动中的一个模块化组件，它有自己的生命周期和事件处理，与活动非常相似。尽管碎片有自己的生命周期，但它们直接受到所属活动生命周期的直接影响。例如，如果一个活动被销毁，它的碎片也会被销毁。每个碎片都应该有一个所属活动。碎片可以动态地添加到活动中或从活动中移除。'
- en: Fragments increase software reusability and provide flexibility in user interface
    design. A fragment could be used by more than one activity. This way you implement
    once and use multiple times. Furthermore, it is possible to use a fragment for
    different layout configurations and different screen modes. This way it provides
    flexibility in user interface design.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 碎片提高了软件的可复用性，并在用户界面设计中提供了灵活性。一个碎片可以被多个活动使用。这样，你只需实现一次，就可以多次使用。此外，碎片可以用于不同的布局配置和不同的屏幕模式，从而在用户界面设计中提供灵活性。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to design fragments such that they could work independently,
    that is, they should not depend on other fragments and activities. In this way
    it is possible to reuse fragments independently from other fragments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 设计碎片时，重要的是要使它们能够独立工作，即它们不应该依赖于其他碎片和活动。这样，碎片可以独立于其他碎片被复用。
- en: Fragment lifecycle
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 碎片生命周期
- en: 'Fragments have their own lifecycle; however, they are still directly affected
    by their owner activity''s lifecycle. The following diagram shows the creation
    flow of lifecycle of a fragment:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 碎片拥有自己的生命周期；然而，它们仍然直接受到所属活动生命周期的直接影响。下图展示了碎片生命周期的创建流程：
- en: '![Fragment lifecycle](img/9526OS_05_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![碎片生命周期](img/9526OS_05_01.jpg)'
- en: 'The blocks in the diagram perform the following tasks:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的各个块执行以下任务：
- en: '`onAttach():` When a fragment is added to an activity, the `onAttach()` method
    is called.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onAttach():` 当碎片被添加到活动中时，会调用`onAttach()`方法。'
- en: '`onCreate():` This method is called when a fragment is created.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCreate():` 当创建碎片时，会调用此方法。'
- en: '`onCreateView():` This method returns a view. This view is the user interface
    of the fragment. If the fragment is doing background works and doesn''t have a
    user interface, then this method should return null.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCreateView():` 此方法返回一个视图。这个视图是碎片的用户界面。如果碎片只进行后台工作并且没有用户界面，那么这个方法应该返回null。'
- en: '`onActivityCreated():` This method is called after the owner activity is created.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onActivityCreated():` 在所属活动创建后，会调用此方法。'
- en: '`onStart():` After this method is called, the fragment''s view becomes visible
    to the user.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onStart():` 在此方法被调用后，碎片的视图对用户可见。'
- en: '`onResume()`: After this method is called, the fragment becomes active and
    the user can interact with the fragment. This method could be called more than
    once, because this method is called after the application is restarted or paused.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onResume()`: 在此方法被调用后，碎片变为活动状态，用户可以与碎片交互。这个方法可能会被多次调用，因为每次应用重新启动或暂停后都会调用此方法。'
- en: 'The following diagram shows the destruction flow of the life cycle of a fragment:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了碎片生命周期的销毁流程：
- en: '![Fragment lifecycle](img/9526OS_05_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![碎片生命周期](img/9526OS_05_02.jpg)'
- en: 'The blocks in the diagram perform the following tasks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的各个块执行以下任务：
- en: '`onPause():` This method is called when the fragment is paused and no longer
    interacts with the user.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onPause():` 当碎片暂停并且不再与用户交互时，会调用此方法。'
- en: '`onStop():` This method is called when the fragment is stopped. The fragment
    is not visible to the user after this method is called.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onStop():` 当碎片停止时，会调用此方法。在此方法被调用后，碎片对用户不再可见。'
- en: '`onDestroyView():` This method is called when the view of the fragment is destroyed.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDestroyView():` 当碎片视图被销毁时，会调用此方法。'
- en: '`onDestroy():` This method is called when the fragment is no longer in use.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDestroy():` 当片段不再使用时，会调用这个方法。'
- en: '`onDetach()`: This method is called when the fragment is removed from the activity.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDetach()`: 当片段从活动中移除时，会调用这个方法。'
- en: Creating and managing fragments
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理片段
- en: 'We are going to learn how to create and manage fragments with a sample Android
    application. This application is going to list book names. When a book name is
    clicked, the author of the book will be displayed. This application will be designed
    for small and large screen devices, this way we will see how to use fragments
    for different screen sizes. The following is the screenshot of this application
    for small screens. As you can see in this screenshot, the left hand side of the
    screen has the list of books and when a book is clicked, the right hand side of
    the screen will be displayed which shows the author of the clicked book:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要学习如何通过一个示例安卓应用来创建和管理片段。这个应用将列出书籍名称。当点击书籍名称时，会显示书籍的作者。这个应用将针对小屏幕和大屏幕设备进行设计，这样我们就能看到如何在不同屏幕尺寸下使用片段。以下是为小屏幕设备的应用截图。如您在这张截图中所见，屏幕左侧有书籍列表，当点击书籍时，屏幕右侧会显示点击书籍的作者信息：
- en: '![Creating and managing fragments](img/9526_05_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![创建和管理片段](img/9526_05_03.jpg)'
- en: We will firstly implement these screens, and then we will design this application
    for large screens.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先实现这些屏幕，然后针对大屏幕设计这个应用。
- en: 'In this application, we have two activities, one for the first screen and one
    for the second screen. Each activity consists of one fragment. The following diagram
    shows the structure of this application:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，我们有两个活动（Activity），一个用于第一屏，另一个用于第二屏。每个活动包含一个片段（Fragment）。以下图表展示了该应用的结构：
- en: '![Creating and managing fragments](img/9526OS_05_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建和管理片段](img/9526OS_05_04.jpg)'
- en: 'The XML code for the layout of `Fragment B` is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`Fragment B` 的布局 XML 代码如下：'
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in this code, it has a `LinearLayout` layout with a `TextView`
    component. `TextView` is for displaying the author of the book. We don't have
    a layout for `Fragment A`, because it is a `ListFragment` property which includes
    the `ListView` component.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在这段代码中看到的，它有一个包含 `TextView` 组件的 `LinearLayout` 布局。`TextView` 用于显示书籍的作者。我们没有为
    `Fragment A` 设计布局，因为它是包含 `ListView` 组件的 `ListFragment` 属性。
- en: Now we need two classes that extend the `Fragment` classes for each fragment.
    The following is the class for `Fragment A`*:*
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为每个片段创建两个扩展 `Fragment` 类的类。以下是 `Fragment A` 的类定义：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, the `Chapter5_1FragmentA` class extends `ListFragment`, because
    we are listing the books in this screen. It is similar to `ListActivity` and this
    class has a `ListView` view. In the `onActivityCreated` method we set the `ListAdapter`
    property of the `ListFragment`. The source for the adapter is a class that contains
    the string arrays of book names and authors as shown in the following code block:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`Chapter5_1FragmentA` 类扩展了 `ListFragment`，因为我们在这一屏中列出书籍。它类似于 `ListActivity`，并且这个类有一个
    `ListView` 视图。在 `onActivityCreated` 方法中，我们设置了 `ListFragment` 的 `ListAdapter` 属性。适配器的数据源是一个包含书籍名称和作者字符串数组的类，如下代码块所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After initializing `ListAdapter`, we set the `OnItemClickListener` event of
    the `ListView` view. This event is called when a `ListView` item is clicked. When
    an item is clicked, the `onItemClick` method is called. In this method, a new
    activity is started with the author of the book. As you can see in the code, we
    reach the owner activity of the fragment with the `getActivity()` method. We could
    receive the `ApplicationContext` with the `getActivity()` method. Remember that
    the `OnCreateView` method is called before `OnActivityCreated`, and because of
    that we initialized `ListAdapter` and `ListView` in the `OnActivityCreated` method,
    because we need the user interface components to be created before we initialize
    them and they are created in `OnCreateView`. We don't need to override the `OnCreateView`
    method of `ListFragment`, because it returns a `ListView`. You can override the
    `OnCreateView` method if you want to use a customized `ListView`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化`ListAdapter`之后，我们设置了`ListView`视图的`OnItemClickListener`事件。当点击`ListView`的项时，会调用此事件。项被点击时，会调用`onItemClick`方法。在这个方法中，会启动一个新的活动，显示书籍作者的信息。如代码所示，我们通过`getActivity()`方法获取到片段的所有者活动。我们也可以通过`getActivity()`方法获取`ApplicationContext`。请记住，`OnCreateView`方法是在`OnActivityCreated`之前调用的，因此我们在`OnActivityCreated`方法中初始化`ListAdapter`和`ListView`，因为我们需要在初始化它们之前创建用户界面组件，而这些组件是在`OnCreateView`中创建的。我们不需要重写`ListFragment`的`OnCreateView`方法，因为它已经返回了一个`ListView`。如果你想要使用自定义的`ListView`，可以重写`OnCreateView`方法。
- en: 'The following is the class for `Fragment B`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Fragment B`的类：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see from this code, if a fragment has a user interface, this method
    should be overridden and should return a view. In our sample application, we are
    returning a view inflated with the XML layout that we previously implemented.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，如果一个片段有用户界面，那么应该重写这个方法，并且返回一个视图。在我们的示例应用程序中，我们返回了一个使用我们之前实现的XML布局填充的视图。
- en: 'Now we need two activity classes that host these fragments. The following is
    the `Activity` class of `Activity A` that hosts `Fragment A`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要两个托管这些片段的活动类。以下是托管`Fragment A`的`Activity A`的`Activity`类：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is a simple `Activity` class that just sets the content view with a layout.
    The XML layout code of the `Activity A` class is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的`Activity`类，只是用布局设置了内容视图。`Activity A`类的XML布局代码如下：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see from this code, we specified `Fragment A` with the class property
    `com.chapter5.Chapter5_1FragmentA`. Furthermore, we specified the `id` property.
    Fragments should have either an `id` or a `tag` property as an identifier because
    Android needs that in restoring the fragment when the activity is restarted.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们使用类属性`com.chapter5.Chapter5_1FragmentA`指定了`Fragment A`，并且我们还指定了`id`属性。片段应该有一个`id`或`tag`属性作为标识符，因为当活动重新启动时，Android需要它来恢复片段。
- en: 'The `Activity` class for `Activity B` that hosts `Fragment B` is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是托管`Fragment B`的`Activity B`的`Activity`类：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is a simple `Activity` class that just sets the content view with a layout.
    The XML layout code of `Activity B` is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的`Activity`类，只是用布局设置了内容视图。`Activity B`的XML布局代码如下：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see from this code, we specified `Fragment B` with the class property
    `com.chapter5.Chapter5_1FragmentB`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们使用类属性`com.chapter5.Chapter5_1FragmentB`指定了`Fragment B`。
- en: Programmatically adding a fragment
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以编程方式添加一个片段
- en: 'In our previous sample application, we added a fragment to an activity layout
    in XML layout code. You can also add a fragment to an activity programmatically.
    The following is the programmatically added fragment version of our previous sample
    application and XML layout code of the activity:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例应用程序中，我们曾在XML布局代码中将一个片段添加到活动布局中。你也可以以编程方式将片段添加到活动中。以下是我们之前示例应用程序的以编程方式添加片段的版本以及活动的XML布局代码：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see from this XML code, we removed the `Fragment` tags because we
    are adding `Fragment A` programmatically. As you can see in the `Chapter5_1Activity_A`
    class, we added a method called `addFragment()`. We used the `FragmentTransaction`
    class in order to add `Fragment A`. The `FragmentTransaction` class is used for
    operations such as adding fragments, removing fragments, attaching fragments to
    the UI, and so on. As you can see in the `addMethod()` method, you can get an
    instance of `FragmentTransaction` with `FragmentManager` using the `beginTransaction()`
    method. Finally we have to call the `commit()` method for the changes to be applied.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个XML代码中可以看出，我们移除了`Fragment`标签，因为我们是程序化地添加`Fragment A`。在`Chapter5_1Activity_A`类中，我们添加了一个名为`addFragment()`的方法。我们使用了`FragmentTransaction`类来添加`Fragment
    A`。`FragmentTransaction`类用于添加片段、移除片段、将片段附加到UI等操作。在`addMethod()`方法中可以看出，你可以通过`FragmentManager`使用`beginTransaction()`方法获取`FragmentTransaction`的实例。最后，我们必须调用`commit()`方法，以便应用更改。
- en: '`FragmentManager` is used for managing fragments. As you can see in the code,
    you can get an instance of `FragmentManager` by the `getFragmentManager()` method.
    `FragmentManager` allows you to begin a transaction by the `beginTransaction()`
    method, get a fragment in activity by the `findFragmentById()` or `findFragmentbyTag()`
    methods, and pop a fragment off the back stack by the `popBackStack()` method.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`FragmentManager`用于管理片段。从代码中可以看出，你可以通过`getFragmentManager()`方法获取`FragmentManager`的实例。`FragmentManager`允许你通过`beginTransaction()`方法开始一个事务，通过`findFragmentById()`或`findFragmentbyTag()`方法在活动中获取一个片段，以及通过`popBackStack()`方法将片段从返回栈中弹出。'
- en: Event sharing with activity
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与活动共享事件
- en: 'In our example, we started an activity in the `ListFragment` class'' `onItemClick`
    method . We can establish the same operation by creating a callback interface
    in `ListFragment` and make the `Activity` class implement that callback. By this
    way the `Fragment` class will notify the owner `Activity` class. When the owner
    `Activity` class is notified, it can share the notification by other fragments.
    This way, fragments can share an event and communicate. We can go about this operation
    using the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们在`ListFragment`类的`onItemClick`方法中启动了一个活动。我们可以通过在`ListFragment`中创建一个回调接口，并让`Activity`类实现该回调，来建立相同的操作。这样，`Fragment`类就会通知所有者`Activity`类。当所有者`Activity`类得到通知时，可以通过其他片段共享该通知。这种方式，片段可以共享事件并进行通信。我们可以按照以下步骤进行此操作：
- en: 'We create the callback interface in the `Chapter5_1FragmentA` class:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`Chapter5_1FragmentA`类中创建回调接口：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We create an instance of `OnBookSelectedListener` and assign the owner activity
    to that instance in the `Chapter5_1FragmentA` class:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`Chapter5_1FragmentA`类中创建一个`OnBookSelectedListener`实例，并将所有者活动分配给该实例：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see from this code, the owner activity class of `Chapter5_1FragmentA`
    should implement the `onBookSelectedListener` instance or there will be a class
    cast exception.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，`Chapter5_1FragmentA`的所有者活动类应该实现`onBookSelectedListener`实例，否则会出现类转换异常。
- en: 'We make the `Chapter5_1Activity_A` class implement the `onBookSelectedListener`
    interface:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们让`Chapter5_1Activity_A`类实现`onBookSelectedListener`接口：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see from this code, `Chapter5_1Activity_A` receives a selected book
    index in the event callback and starts the activity with author data.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，`Chapter5_1Activity_A`在事件回调中接收选定的书籍索引，并使用作者数据启动活动。
- en: 'We call the `onBookSelected` method in the `onItemClick` method of the `Chapter5_1FragmentA`
    class:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`Chapter5_1FragmentA`类的`onItemClick`方法中调用了`onBookSelected`方法：
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this way, we made the activity and fragment share an event callback.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就让活动和片段共享了一个事件回调。
- en: Using multiple fragments in an activity
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在活动中使用多个片段
- en: 'Our sample book listing application is designed for small screens. When you
    execute this application on a larger screen, it will look bad. We have to use
    the space efficiently in larger screen sizes. In order to achieve this, we have
    to create a new layout for large screens. The new layout is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例书籍列表应用程序是为小屏幕设计的。当你在更大的屏幕上执行此应用程序时，它看起来会很糟糕。我们必须在大屏幕尺寸中有效地利用空间。为了实现这一点，我们必须为大屏幕创建一个新的布局。新布局如下：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see from this code, we put two fragments in a horizontal `LinearLayout`
    layout. In the previous sample application, there was one fragment in each activity,
    but in this activity there are two fragments in order to use the space efficiently.
    By setting the `layout_weight` property to `1`, we make the fragments consume
    equal spaces on the screen.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从此代码中可以看出，我们将两个片段放入了水平`LinearLayout`布局中。在之前的示例应用程序中，每个活动中只有一个片段，但为了有效地利用空间，这个活动中有两个片段。通过将`layout_weight`属性设置为`1`，我们使片段在屏幕上占据相等的空间。
- en: 'We have to put this new layout XML file under a folder named `layout-xlarge-land`
    under the `res` folder. In this way, the Android uses this layout file when the
    device screen is large and in landscape mode. Android decides which layout file
    to use on runtime according to layout folder names. `layout` is the default folder
    name for Android. If Android can''t find a suitable layout folder for a device
    screen size and mode, it uses the layout in the `layout` folder. Some of the common
    qualifiers for layout are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将这个新的布局XML文件放在`res`文件夹下的一个名为`layout-xlarge-land`的文件夹中。这样，当设备屏幕大且处于横屏模式时，Android会使用这个布局文件。Android根据布局文件夹名称在运行时决定使用哪个布局文件。`layout`是Android的默认文件夹名称。如果Android找不到适合设备屏幕尺寸和模式的布局文件夹，它会使用`layout`文件夹中的布局。一些常见的布局限定符如下：
- en: '`small` for small screen sizes'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`small`用于小屏幕尺寸'
- en: '`normal` for normal screen sizes'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normal`用于正常屏幕尺寸'
- en: '`large` for large screen sizes'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`large`用于大屏幕尺寸'
- en: '`xlarge` for extra large screen sizes'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xlarge`用于超大屏幕尺寸'
- en: '`land` for landscape orientation'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`land`用于横屏方向'
- en: '`port` for portrait orientation'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`用于竖屏方向'
- en: 'However, this layout is not enough to make our sample function correctly on
    large screens. To make the new layout function correctly, we have to change how
    the fragments are managed. Update the `onBookSelected` property in `Chapter5_1Activity_A`
    as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种布局还不足以使我们的示例在大屏幕上正确运行。为了使新布局正确运行，我们必须改变管理片段的方式。更新`Chapter5_1Activity_A`中的`onBookSelected`属性如下：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see from this code, we get the `Fragment B` class by using `FragmentManager`.
    If the `fragment_b` is not null, we understand that this activity contains `Fragment
    B`, and the device has a large screen, because `Fragment B` is used in `Activity
    A` only when the screen is large and in landscape mode. Then using `fragment_b`,
    we get the `textViewAuthor` TextView component and update its text with the chosen
    book's author name. On the right of the screen we see the author name of the chosen
    book.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们通过使用`FragmentManager`获取了`Fragment B`类。如果`fragment_b`不为空，我们理解此活动包含`Fragment
    B`，并且设备具有大屏幕，因为只有在屏幕大且处于横屏模式时，`Activity A`才会使用`Fragment B`。然后使用`fragment_b`，我们获取了`textViewAuthor`
    TextView组件，并用所选书籍的作者姓名更新其文本。在屏幕右侧，我们可以看到所选书籍的作者姓名。
- en: If `fragment_b` is null, we understand that the device has a small screen, and
    we start a new activity using `Intent`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`fragment_b`为空，我们理解设备屏幕较小，并通过`Intent`启动新的活动。
- en: 'In the `AndroidManifest.xml` file, we have to set the minimum SDK version to
    API Level 14, because fragments have been available for small screens since API
    Level 14\. The `AndroidManifest.xml` file should look like the following code
    block:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AndroidManifest.xml`文件中，我们必须将最低SDK版本设置为API级别14，因为自API级别14起，小屏幕上就已经可以使用片段了。`AndroidManifest.xml`文件应如下面的代码块所示：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Our sample application will look like the following on a large screen:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在大屏幕上，我们的示例应用程序将如下所示：
- en: '![Using multiple fragments in an activity](img/9526_05_05.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![在活动中使用多个片段](img/9526_05_05.jpg)'
- en: Types of fragments
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 片段的类型
- en: 'There are four types of fragments:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种类型的片段：
- en: '`ListFragment`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListFragment`'
- en: '`DialogFragment`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogFragment`'
- en: '`PreferenceFragment`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreferenceFragment`'
- en: '`WebViewFragment`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebViewFragment`'
- en: In this section, we will develop a sample application that uses these fragments.
    At the end of this section, the application will be completed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发一个使用这些片段的示例应用程序。在本节结束时，应用程序将开发完成。
- en: ListFragment
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ListFragment`'
- en: This fragment is similar to `ListActivity` and contains a `ListView` view by
    default. It is used for displaying a list of items. In our previous sample code,
    we used `ListFragment`; see the *Creating and managing fragments* section for
    `ListFragment`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此片段与`ListActivity`相似，默认包含一个`ListView`视图，用于显示项目列表。在我们之前的示例代码中，我们使用了`ListFragment`；有关`ListFragment`的创建和管理，请参阅*创建和管理片段*部分。
- en: DialogFragment
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`DialogFragment`'
- en: 'This fragment displays a dialog on top of its owner activity. In the following
    sample application, we are going to create a fragment that has a **Delete** button.
    When the button is clicked, a **DialogFragment** dialog box will be displayed.
    The **DialogFragment** dialog box will have a confirmation message and two buttons
    – **OK** and **Cancel** buttons. If the **OK** button is clicked, a message will
    be displayed and **DialogFragment** will be dismissed. The screens of the sample
    application will look like the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此片段在其所属活动的顶部显示一个对话框。在以下示例应用程序中，我们将创建一个带有**删除**按钮的片段。点击该按钮时，将显示一个**DialogFragment**对话框。**DialogFragment**对话框将包含一条确认信息以及两个按钮——**确定**和**取消**按钮。如果点击**确定**按钮，将显示一条消息，并关闭**DialogFragment**。示例应用程序的屏幕将如下截图所示：
- en: '![DialogFragment](img/9526_05_06.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![DialogFragment](img/9526_05_06.jpg)'
- en: 'The layout XML code of the fragment with a **Delete** button is shown in the
    following code block:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 带有**删除**按钮的片段的布局XML代码如下：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This layout is a simple layout with a `LinearLayout` layout and a `Button`
    component in it. The `Fragment` class of this layout is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局是一个简单的布局，其中包含一个`LinearLayout`布局和一个`Button`组件。此布局的`Fragment`类如下：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see from this code, in the `onClick` method of `Chapter5_2Fragment`
    class, an instance of the `Chapter5_2DialogFragment` class is created and using
    this instance, a dialog is displayed with its `show()` method.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从这段代码中看到的，在`Chapter5_2Fragment`类的`onClick`方法中，创建了`Chapter5_2DialogFragment`类的一个实例，并使用此实例显示对话框，通过其`show()`方法。
- en: 'The layout code of the **DialogFragment** dialog box is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**DialogFragment**对话框的布局代码如下：'
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see from this previous code, we used `GridLayout` as the root layout.
    Then we input a `TextView` component which displays the confirmation message.
    Finally, two buttons are added to the layout—**OK** and **Cancel** buttons. The
    following is the `DialogFragment` class of this layout:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从之前的代码中看到的，我们使用了`GridLayout`作为根布局。然后我们输入了一个显示确认信息的`TextView`组件。最后，在布局中添加了两个按钮——**确定**和**取消**按钮。以下是此布局的`DialogFragment`类：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you the see from this code, this class extends can `DialogFragment` class.
    In the `onCreateView` method of the `Chapter5_2DialogFragment` class, we initialize
    the buttons and set their `onClick` events. In the `onClick` method of the `Chapter5_2DialogFragment`
    class, we handle the button click events. If the clicked button is **Cancel**,
    we dismiss the dialog window. If the clicked button is **OK**, we show an information
    message and dismiss the dialog. As you can see from the preceding code, the `dismiss()`
    method is used for closing the dialog.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从这段代码中看到的，这个类扩展了`DialogFragment`类。在`Chapter5_2DialogFragment`类的`onCreateView`方法中，我们初始化按钮并为它们设置`onClick`事件。在`Chapter5_2DialogFragment`类的`onClick`方法中，我们处理按钮点击事件。如果点击的按钮是**取消**，我们关闭对话框窗口。如果点击的按钮是**确定**，我们显示一条信息消息并关闭对话框。如您从前面的代码中看到的，`dismiss()`方法用于关闭对话框。
- en: PreferenceFragment
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PreferenceFragment
- en: 'This fragment is similar to `PreferenceActivity`. It shows the preferences
    and saves them to `SharedPreferences`. In this section, we will extend the previous
    example code. We will put a preference about showing the confirmation message
    during deletion. The user could be able to choose to see or not to see confirmation
    message. We perform the following steps for using `PreferenceFragment`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个片段与`PreferenceActivity`类似。它显示偏好设置，并将其保存到`SharedPreferences`中。在本节中，我们将扩展之前的示例代码。我们将添加一个关于在删除期间显示确认信息的偏好设置。用户可以选择是否查看确认信息。以下是使用`PreferenceFragment`的步骤：
- en: 'Create a source XML for the preference screen and put it under the `res/xml`
    folder:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个偏好屏幕的源XML，并将其放在`res/xml`文件夹下：
- en: '[PRE20]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see from the previous code, our preference screen contains a check
    box preference for the confirmation message.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您从之前的代码中看到的，我们的偏好屏幕包含一个用于确认信息的复选框偏好设置。
- en: 'Create a class that extends `PreferenceFragment`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展`PreferenceFragment`的类：
- en: '[PRE21]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see from this code, creating a preference screen is very easy; you
    just call the `addPreferencesFromResource` method with the XML file you created
    for the preferences. Now, we will in put a settings option menu item and we will
    open the preference screen by clicking on this menu item. In order to achieve
    this, we will modify the `Chapter5_2Fragment` class using the following steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，创建一个偏好设置屏幕非常简单；你只需调用`addPreferencesFromResource`方法，并传入你为偏好设置创建的XML文件即可。现在，我们将添加一个设置选项菜单项，并通过点击这个菜单项来打开偏好设置屏幕。为了实现这一点，我们将按照以下步骤修改`Chapter5_2Fragment`类：
- en: 'We will add `setHasOptionsMenu(true)` to the `onCreateView` method of the `Chapter5_2Fragment`
    class:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`Chapter5_2Fragment`类的`onCreateView`方法中添加`setHasOptionsMenu(true)`：
- en: '[PRE22]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will add the following methods to the `Chapter5_2Fragment` class:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`Chapter5_2Fragment`类中添加以下方法：
- en: '[PRE23]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see from this code, `onCreateOptionsMenu` is contributing to the
    options menu. This is the how a fragment contributes to the owner activity's menu.
    When the options menu item is clicked, a new activity is started with the `onOptionsItemSelected`
    method.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，`onCreateOptionsMenu`为选项菜单做出了贡献。这就是一个片段如何为所属活动的菜单做出贡献的。当点击选项菜单项时，将使用`onOptionsItemSelected`方法启动一个新的活动。
- en: 'The `fragment_menu` menu XML is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`fragment_menu`菜单XML如下所示：'
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`Chapter5_2PreferenceActivity` is the class that hosts `Chapter5_2PereferenceFragment`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chapter5_2PreferenceActivity`是托管`Chapter5_2PereferenceFragment`的类：'
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see from this code, we programmatically add `Chapter5_2PereferenceFragment`
    to the `Chapter5_2PreferenceActivity` class.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们以编程方式将`Chapter5_2PereferenceFragment`添加到`Chapter5_2PreferenceActivity`类中。
- en: 'The preference screen should look like the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 偏好设置屏幕应如下所示截图：
- en: '![PreferenceFragment](img/9526_05_07.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![偏好设置截图](img/9526_05_07.jpg)'
- en: By adding this preference option, the user has the choice of whether or not
    to receive the confirmation message. (To read the setting, use the standard `SharedPreference`
    APIs.)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加此偏好设置选项，用户可以选择是否接收确认消息。（要读取设置，请使用标准的`SharedPreference` API。）
- en: WebViewFragment
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`WebViewFragment`'
- en: '`WebViewFragment` is a premade `WebView` wrapped in a fragment. `WebView` inside
    this fragment is automatically paused or resumed when the fragment is paused or
    resumed. In this section, we will extend the previous sample codes to show the
    usage of `WebViewFragment`.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebViewFragment`是一个预先封装在片段中的`WebView`。当片段暂停或恢复时，此片段中的`WebView`会自动暂停或恢复。在本节中，我们将扩展之前的示例代码，以展示`WebViewFragment`的使用方法。'
- en: 'We add an **open web** button to the `Chapter5_2Fragment` class'' layout XML
    code. The resulting layout is as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`Chapter5_2Fragment`类的布局XML代码中添加了一个**打开网页**按钮。生成的布局如下所示：
- en: '[PRE26]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We create a class that extends `WebViewFragment` and an activity that hosts
    this fragment using the following code block:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个扩展`WebViewFragment`的类，以及一个使用以下代码块托管此片段的活动：
- en: '[PRE27]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As you can see from this code, we get the `WebView` instance in the `onActivityCreated`
    method and load a URL that opens Google's website.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们在`onActivityCreated`方法中获取了`WebView`实例，并加载了一个打开谷歌网站的URL。
- en: 'The activity that hosts this fragment is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 托管此片段的活动如下：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see from this code, we programmatically add `Chapter5_2WebViewFragment`
    to `Chapter5_2WebViewActivity`. This sample application opens the [www.google.com](http://www.google.com)
    website when the **open web** button is clicked.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们以编程方式将`Chapter5_2WebViewFragment`添加到`Chapter5_2WebViewActivity`中。当点击**打开网页**按钮时，这个示例应用程序将打开[www.google.com](http://www.google.com)网站。
- en: 'The final version of the `Chapter5_2Fragment` class is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chapter5_2Fragment`类的最终版本如下：'
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The main `Activity` class for this application is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的主`Activity`类如下所示：
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This `Activity` class is the owner activity of `Chapter5_2Fragment`. The layout
    of the preceding `Activity` is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Activity`类是`Chapter5_2Fragment`的所有者活动。前面`Activity`的布局如下：
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `AndroidManifest.xml` file of this sample application should look like
    the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例应用程序的`AndroidManifest.xml`文件应如下所示：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see in this code, we need Internet permission to open a website.
    Furthermore, we need to set the minimum SDK to API Level 14 in order to use fragments
    with small screens.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们需要互联网权限来打开一个网站。此外，为了在小屏幕上使用片段，我们还需要将最低SDK设置为API Level 14。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Fragments are available for small screen devices with Android Ice Cream Sandwich
    being introduced. In this chapter, we first learned the basics of fragments, and
    the construction and destruction life cycle of fragments. Then, we learned about
    creating and managing fragments with a sample application. Finally, we learned
    the specialized types of fragments – `ListFragment`, `DialogFragment`, `PreferenceFragment`,
    and `WebViewFragment`. In the next chapter, we will see some practices to develop
    applications that support different screen sizes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 片段（Fragments）在引入Android Ice Cream Sandwich的小屏幕设备上可用。在本章中，我们首先学习了片段的基础知识，以及片段的构建与销毁生命周期。接着，我们通过一个示例应用程序学习了创建和管理片段的方法。最后，我们了解了片段的特殊类型——`ListFragment`、`DialogFragment`、`PreferenceFragment`和`WebViewFragment`。在下一章中，我们将看到一些实践方法，以开发支持不同屏幕尺寸的应用程序。
