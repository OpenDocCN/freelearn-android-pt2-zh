- en: Chapter 5. Fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although **fragments** were introduced with Android 3.0, they are now available
    for small screen devices with Android Ice Cream Sandwich. This chapter will cover
    the basics of fragments and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Fragment basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fragment basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Fragment** is a modular component in an activity which has its own life cycle
    and event handling, and it is very similar to an activity. Although fragments
    have their own life cycle, they are directly affected by their owner activity''s
    life cycle. For instance, if an activity is destroyed, its fragments are also
    destroyed. Every fragment should have an owner activity. A fragment could be added
    to or removed from an activity dynamically.'
  prefs: []
  type: TYPE_NORMAL
- en: Fragments increase software reusability and provide flexibility in user interface
    design. A fragment could be used by more than one activity. This way you implement
    once and use multiple times. Furthermore, it is possible to use a fragment for
    different layout configurations and different screen modes. This way it provides
    flexibility in user interface design.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to design fragments such that they could work independently,
    that is, they should not depend on other fragments and activities. In this way
    it is possible to reuse fragments independently from other fragments.
  prefs: []
  type: TYPE_NORMAL
- en: Fragment lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fragments have their own lifecycle; however, they are still directly affected
    by their owner activity''s lifecycle. The following diagram shows the creation
    flow of lifecycle of a fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fragment lifecycle](img/9526OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The blocks in the diagram perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onAttach():` When a fragment is added to an activity, the `onAttach()` method
    is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCreate():` This method is called when a fragment is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCreateView():` This method returns a view. This view is the user interface
    of the fragment. If the fragment is doing background works and doesn''t have a
    user interface, then this method should return null.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onActivityCreated():` This method is called after the owner activity is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStart():` After this method is called, the fragment''s view becomes visible
    to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onResume()`: After this method is called, the fragment becomes active and
    the user can interact with the fragment. This method could be called more than
    once, because this method is called after the application is restarted or paused.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the destruction flow of the life cycle of a fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fragment lifecycle](img/9526OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The blocks in the diagram perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onPause():` This method is called when the fragment is paused and no longer
    interacts with the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStop():` This method is called when the fragment is stopped. The fragment
    is not visible to the user after this method is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDestroyView():` This method is called when the view of the fragment is destroyed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDestroy():` This method is called when the fragment is no longer in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDetach()`: This method is called when the fragment is removed from the activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to learn how to create and manage fragments with a sample Android
    application. This application is going to list book names. When a book name is
    clicked, the author of the book will be displayed. This application will be designed
    for small and large screen devices, this way we will see how to use fragments
    for different screen sizes. The following is the screenshot of this application
    for small screens. As you can see in this screenshot, the left hand side of the
    screen has the list of books and when a book is clicked, the right hand side of
    the screen will be displayed which shows the author of the clicked book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and managing fragments](img/9526_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will firstly implement these screens, and then we will design this application
    for large screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this application, we have two activities, one for the first screen and one
    for the second screen. Each activity consists of one fragment. The following diagram
    shows the structure of this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and managing fragments](img/9526OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The XML code for the layout of `Fragment B` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this code, it has a `LinearLayout` layout with a `TextView`
    component. `TextView` is for displaying the author of the book. We don't have
    a layout for `Fragment A`, because it is a `ListFragment` property which includes
    the `ListView` component.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need two classes that extend the `Fragment` classes for each fragment.
    The following is the class for `Fragment A`*:*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `Chapter5_1FragmentA` class extends `ListFragment`, because
    we are listing the books in this screen. It is similar to `ListActivity` and this
    class has a `ListView` view. In the `onActivityCreated` method we set the `ListAdapter`
    property of the `ListFragment`. The source for the adapter is a class that contains
    the string arrays of book names and authors as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After initializing `ListAdapter`, we set the `OnItemClickListener` event of
    the `ListView` view. This event is called when a `ListView` item is clicked. When
    an item is clicked, the `onItemClick` method is called. In this method, a new
    activity is started with the author of the book. As you can see in the code, we
    reach the owner activity of the fragment with the `getActivity()` method. We could
    receive the `ApplicationContext` with the `getActivity()` method. Remember that
    the `OnCreateView` method is called before `OnActivityCreated`, and because of
    that we initialized `ListAdapter` and `ListView` in the `OnActivityCreated` method,
    because we need the user interface components to be created before we initialize
    them and they are created in `OnCreateView`. We don't need to override the `OnCreateView`
    method of `ListFragment`, because it returns a `ListView`. You can override the
    `OnCreateView` method if you want to use a customized `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the class for `Fragment B`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, if a fragment has a user interface, this method
    should be overridden and should return a view. In our sample application, we are
    returning a view inflated with the XML layout that we previously implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need two activity classes that host these fragments. The following is
    the `Activity` class of `Activity A` that hosts `Fragment A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a simple `Activity` class that just sets the content view with a layout.
    The XML layout code of the `Activity A` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, we specified `Fragment A` with the class property
    `com.chapter5.Chapter5_1FragmentA`. Furthermore, we specified the `id` property.
    Fragments should have either an `id` or a `tag` property as an identifier because
    Android needs that in restoring the fragment when the activity is restarted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Activity` class for `Activity B` that hosts `Fragment B` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a simple `Activity` class that just sets the content view with a layout.
    The XML layout code of `Activity B` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, we specified `Fragment B` with the class property
    `com.chapter5.Chapter5_1FragmentB`.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically adding a fragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our previous sample application, we added a fragment to an activity layout
    in XML layout code. You can also add a fragment to an activity programmatically.
    The following is the programmatically added fragment version of our previous sample
    application and XML layout code of the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this XML code, we removed the `Fragment` tags because we
    are adding `Fragment A` programmatically. As you can see in the `Chapter5_1Activity_A`
    class, we added a method called `addFragment()`. We used the `FragmentTransaction`
    class in order to add `Fragment A`. The `FragmentTransaction` class is used for
    operations such as adding fragments, removing fragments, attaching fragments to
    the UI, and so on. As you can see in the `addMethod()` method, you can get an
    instance of `FragmentTransaction` with `FragmentManager` using the `beginTransaction()`
    method. Finally we have to call the `commit()` method for the changes to be applied.
  prefs: []
  type: TYPE_NORMAL
- en: '`FragmentManager` is used for managing fragments. As you can see in the code,
    you can get an instance of `FragmentManager` by the `getFragmentManager()` method.
    `FragmentManager` allows you to begin a transaction by the `beginTransaction()`
    method, get a fragment in activity by the `findFragmentById()` or `findFragmentbyTag()`
    methods, and pop a fragment off the back stack by the `popBackStack()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: Event sharing with activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our example, we started an activity in the `ListFragment` class'' `onItemClick`
    method . We can establish the same operation by creating a callback interface
    in `ListFragment` and make the `Activity` class implement that callback. By this
    way the `Fragment` class will notify the owner `Activity` class. When the owner
    `Activity` class is notified, it can share the notification by other fragments.
    This way, fragments can share an event and communicate. We can go about this operation
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the callback interface in the `Chapter5_1FragmentA` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We create an instance of `OnBookSelectedListener` and assign the owner activity
    to that instance in the `Chapter5_1FragmentA` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from this code, the owner activity class of `Chapter5_1FragmentA`
    should implement the `onBookSelectedListener` instance or there will be a class
    cast exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We make the `Chapter5_1Activity_A` class implement the `onBookSelectedListener`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from this code, `Chapter5_1Activity_A` receives a selected book
    index in the event callback and starts the activity with author data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We call the `onBookSelected` method in the `onItemClick` method of the `Chapter5_1FragmentA`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this way, we made the activity and fragment share an event callback.
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple fragments in an activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our sample book listing application is designed for small screens. When you
    execute this application on a larger screen, it will look bad. We have to use
    the space efficiently in larger screen sizes. In order to achieve this, we have
    to create a new layout for large screens. The new layout is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, we put two fragments in a horizontal `LinearLayout`
    layout. In the previous sample application, there was one fragment in each activity,
    but in this activity there are two fragments in order to use the space efficiently.
    By setting the `layout_weight` property to `1`, we make the fragments consume
    equal spaces on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have to put this new layout XML file under a folder named `layout-xlarge-land`
    under the `res` folder. In this way, the Android uses this layout file when the
    device screen is large and in landscape mode. Android decides which layout file
    to use on runtime according to layout folder names. `layout` is the default folder
    name for Android. If Android can''t find a suitable layout folder for a device
    screen size and mode, it uses the layout in the `layout` folder. Some of the common
    qualifiers for layout are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`small` for small screen sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normal` for normal screen sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`large` for large screen sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlarge` for extra large screen sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`land` for landscape orientation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port` for portrait orientation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, this layout is not enough to make our sample function correctly on
    large screens. To make the new layout function correctly, we have to change how
    the fragments are managed. Update the `onBookSelected` property in `Chapter5_1Activity_A`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, we get the `Fragment B` class by using `FragmentManager`.
    If the `fragment_b` is not null, we understand that this activity contains `Fragment
    B`, and the device has a large screen, because `Fragment B` is used in `Activity
    A` only when the screen is large and in landscape mode. Then using `fragment_b`,
    we get the `textViewAuthor` TextView component and update its text with the chosen
    book's author name. On the right of the screen we see the author name of the chosen
    book.
  prefs: []
  type: TYPE_NORMAL
- en: If `fragment_b` is null, we understand that the device has a small screen, and
    we start a new activity using `Intent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `AndroidManifest.xml` file, we have to set the minimum SDK version to
    API Level 14, because fragments have been available for small screens since API
    Level 14\. The `AndroidManifest.xml` file should look like the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Our sample application will look like the following on a large screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using multiple fragments in an activity](img/9526_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Types of fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four types of fragments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ListFragment`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogFragment`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PreferenceFragment`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WebViewFragment`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will develop a sample application that uses these fragments.
    At the end of this section, the application will be completed.
  prefs: []
  type: TYPE_NORMAL
- en: ListFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This fragment is similar to `ListActivity` and contains a `ListView` view by
    default. It is used for displaying a list of items. In our previous sample code,
    we used `ListFragment`; see the *Creating and managing fragments* section for
    `ListFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: DialogFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This fragment displays a dialog on top of its owner activity. In the following
    sample application, we are going to create a fragment that has a **Delete** button.
    When the button is clicked, a **DialogFragment** dialog box will be displayed.
    The **DialogFragment** dialog box will have a confirmation message and two buttons
    – **OK** and **Cancel** buttons. If the **OK** button is clicked, a message will
    be displayed and **DialogFragment** will be dismissed. The screens of the sample
    application will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DialogFragment](img/9526_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The layout XML code of the fragment with a **Delete** button is shown in the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This layout is a simple layout with a `LinearLayout` layout and a `Button`
    component in it. The `Fragment` class of this layout is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, in the `onClick` method of `Chapter5_2Fragment`
    class, an instance of the `Chapter5_2DialogFragment` class is created and using
    this instance, a dialog is displayed with its `show()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The layout code of the **DialogFragment** dialog box is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from this previous code, we used `GridLayout` as the root layout.
    Then we input a `TextView` component which displays the confirmation message.
    Finally, two buttons are added to the layout—**OK** and **Cancel** buttons. The
    following is the `DialogFragment` class of this layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you the see from this code, this class extends can `DialogFragment` class.
    In the `onCreateView` method of the `Chapter5_2DialogFragment` class, we initialize
    the buttons and set their `onClick` events. In the `onClick` method of the `Chapter5_2DialogFragment`
    class, we handle the button click events. If the clicked button is **Cancel**,
    we dismiss the dialog window. If the clicked button is **OK**, we show an information
    message and dismiss the dialog. As you can see from the preceding code, the `dismiss()`
    method is used for closing the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: PreferenceFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This fragment is similar to `PreferenceActivity`. It shows the preferences
    and saves them to `SharedPreferences`. In this section, we will extend the previous
    example code. We will put a preference about showing the confirmation message
    during deletion. The user could be able to choose to see or not to see confirmation
    message. We perform the following steps for using `PreferenceFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a source XML for the preference screen and put it under the `res/xml`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from the previous code, our preference screen contains a check
    box preference for the confirmation message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a class that extends `PreferenceFragment`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see from this code, creating a preference screen is very easy; you
    just call the `addPreferencesFromResource` method with the XML file you created
    for the preferences. Now, we will in put a settings option menu item and we will
    open the preference screen by clicking on this menu item. In order to achieve
    this, we will modify the `Chapter5_2Fragment` class using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add `setHasOptionsMenu(true)` to the `onCreateView` method of the `Chapter5_2Fragment`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will add the following methods to the `Chapter5_2Fragment` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from this code, `onCreateOptionsMenu` is contributing to the
    options menu. This is the how a fragment contributes to the owner activity's menu.
    When the options menu item is clicked, a new activity is started with the `onOptionsItemSelected`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fragment_menu` menu XML is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`Chapter5_2PreferenceActivity` is the class that hosts `Chapter5_2PereferenceFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, we programmatically add `Chapter5_2PereferenceFragment`
    to the `Chapter5_2PreferenceActivity` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preference screen should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PreferenceFragment](img/9526_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By adding this preference option, the user has the choice of whether or not
    to receive the confirmation message. (To read the setting, use the standard `SharedPreference`
    APIs.)
  prefs: []
  type: TYPE_NORMAL
- en: WebViewFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`WebViewFragment` is a premade `WebView` wrapped in a fragment. `WebView` inside
    this fragment is automatically paused or resumed when the fragment is paused or
    resumed. In this section, we will extend the previous sample codes to show the
    usage of `WebViewFragment`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We add an **open web** button to the `Chapter5_2Fragment` class'' layout XML
    code. The resulting layout is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We create a class that extends `WebViewFragment` and an activity that hosts
    this fragment using the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from this code, we get the `WebView` instance in the `onActivityCreated`
    method and load a URL that opens Google's website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The activity that hosts this fragment is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this code, we programmatically add `Chapter5_2WebViewFragment`
    to `Chapter5_2WebViewActivity`. This sample application opens the [www.google.com](http://www.google.com)
    website when the **open web** button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final version of the `Chapter5_2Fragment` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The main `Activity` class for this application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This `Activity` class is the owner activity of `Chapter5_2Fragment`. The layout
    of the preceding `Activity` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `AndroidManifest.xml` file of this sample application should look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this code, we need Internet permission to open a website.
    Furthermore, we need to set the minimum SDK to API Level 14 in order to use fragments
    with small screens.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fragments are available for small screen devices with Android Ice Cream Sandwich
    being introduced. In this chapter, we first learned the basics of fragments, and
    the construction and destruction life cycle of fragments. Then, we learned about
    creating and managing fragments with a sample application. Finally, we learned
    the specialized types of fragments – `ListFragment`, `DialogFragment`, `PreferenceFragment`,
    and `WebViewFragment`. In the next chapter, we will see some practices to develop
    applications that support different screen sizes.
  prefs: []
  type: TYPE_NORMAL
