["```kt\nEntity entity = new Entity();\n\n// Ignore updates for this entity\nentity.setIgnoreUpdate(true);\n\n// Allow this entity to continue updating\nentity.setIgnoreUpdate(false);\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<resources>\n    <style name=\"Theme.NoBackground\" parent=\"android:Theme\">\n        <item name=\"android:windowBackground\">@null</item>\n    </style>\n</resources>\n```", "```kt\n<application\n        android:theme=\"@style/Theme.NoBackground\"\n        android:icon=\"@drawable/ic_launcher\"\n        android:label=\"@string/app_name\" \n        >\n```", "```kt\n@Override\npublic EngineOptions onCreateEngineOptions() {\n  mCamera = new Camera(0, 0, 800, 480);\n\n  EngineOptions engineOptions = new EngineOptions(true,\n                ScreenOrientation.LANDSCAPE_FIXED, new \n                FillResolutionPolicy(),mCamera);\n\n  engineOptions.getAudioOptions().setNeedsSound(true);\n  engineOptions.getAudioOptions().getSoundOptions().setMaxSimultaneousStreams(2);\n\n  return engineOptions;\n}\n```", "```kt\npublic SpritePool(ITextureRegion pTextureRegion, VertexBufferObjectManager pVertexBufferObjectManager){\n  this.mTextureRegion = pTextureRegion;\n  this.mVertexBufferObjectManager = pVertexBufferObjectManager;\n}\n```", "```kt\n    @Override\n    protected Sprite onAllocatePoolItem() {\n      return new Sprite(0, 0, this.mTextureRegion, this.mVertexBufferObjectManager);\n    }\n    ```", "```kt\n    public synchronized Sprite obtainPoolItem(final float pX, final float pY) {\n      Sprite sprite = super.obtainPoolItem();\n\n      sprite.setPosition(pX, pY);\n      sprite.setVisible(true);\n      sprite.setIgnoreUpdate(false);  \n      sprite.setColor(1,1,1);\n\n      return sprite;\n    }\n    ```", "```kt\n    @Override\n    protected void onHandleRecycleItem(Sprite pItem) {\n      super.onHandleRecycleItem(pItem);\n\n      pItem.setVisible(false);\n      pItem.setIgnoreUpdate(true);\n      pItem.clearEntityModifiers();\n      pItem.clearUpdateHandlers();\n    }\n    ```", "```kt\n// obtain a sprite and attach it to the scene at position (10, 10)\nSprite sprite = pool.obtainPoolItem(10, 10);\nmScene.attachChild(sprite);\n```", "```kt\n      // Create a new sprite group with a maximum sprite capacity of 500\n      mSpriteGroup = new SpriteGroup(0, 0, mBitmapTextureAtlas, 500,     mEngine.getVertexBufferObjectManager());\n\n      // Attach the sprite group to the scene\n      mScene.attachChild(mSpriteGroup);\n    ```", "```kt\n      // Create new sprite\n      Sprite sprite = new Sprite(tempX, tempY, spriteWidth, spriteHeight, mTextureRegion, mEngine.getVertexBufferObjectManager());\n\n      // Attach our sprite to the sprite group\n      mSpriteGroup.attachChild(sprite);\n    ```", "```kt\n    // Create texture atlas\n    mBitmapTextureAtlas = new BuildableBitmapTextureAtlas(mEngine.getTextureManager(), 32, 32, TextureOptions.BILINEAR);\n\n    // Create texture region\n    mTextureRegion = BitmapTextureAtlasTextureRegionFactory.createFromAsset(mBitmapTextureAtlas, getAssets(), \"marble.png\");\n\n    // Build/load texture atlas\n    mBitmapTextureAtlas.build(new BlackPawnTextureAtlasBuilder<IBitmapTextureAtlasSource, BitmapTextureAtlas>(0, 0, 0));\n    mBitmapTextureAtlas.load();\n    ```", "```kt\n    // Create a new sprite group with a maximum sprite capacity of 500\n    mSpriteGroup = new SpriteGroup(0, 0, mBitmapTextureAtlas, 500, mEngine.getVertexBufferObjectManager());\n\n    // Attach the sprite group to the scene\n    mScene.attachChild(mSpriteGroup);\n    ```", "```kt\nSprite sprite = new Sprite(tempX, tempY, spriteWidth, spriteHeight, mTextureRegion, mEngine.getVertexBufferObjectManager());\n\n// Attach our sprite to the sprite group\nmSpriteGroup.attachChild(sprite);\n```", "```kt\nentity.setCullingEnabled(true);\n```"]