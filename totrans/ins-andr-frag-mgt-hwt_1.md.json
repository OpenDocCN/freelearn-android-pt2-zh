["```kt\n    import android.support.v4.app.FragmentActivity;\n    ```", "```kt\n    import android.content.*;\n    import android.support.v4.app.*;\n    import android.view.*;\n    import android.widget.*;\n    import android.os.Bundle;\n    ```", "```kt\n    public class FragmentCompatibility extends FragmentActivity {\n       ...\n    }\n    ```", "```kt\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.main);\n\n      /*\n      * There is the main_container view so we are not in multi paned\n      * and we attach the fragment at runtime (we cannot modify lately\n      * the fragment organization if it's defined in XML)\n      */\n      boolean isMultiPaned = (findViewById(R.id.main_container) == null);\n      if (!isMultiPaned) {\n\n        /*\n        * If we are coming from a previous instance we don't\n        * have to reattach the SmallListFragment.\n        */\n        if (savedInstanceState != null) {\n          return;\n        }\n        SmallListFragment slf = new SmallListFragment();\n\n        getSupportFragmentManager().beginTransaction()\n        .add(R.id.main_container, slf).commit();\n      }\n    }\n    ```", "```kt\n        public static class SmallListFragment extends ListFragment {\n              ….\n        }\n    ```", "```kt\n    @Override\n    public void onActivityCreated(Bundle b) {\n      super.onActivityCreated(b);\n      setListAdapter(\n        new ArrayAdapter<String>(getActivity(),\n        android.R.layout.simple_list_item_1,\n        itemTitleArray\n        )\n      );\n      // First, we need to understand if is multi paned\n      mIsMultiPaned = (getActivity().findViewById(R.id.main_container) == null);\n\n    }\n    ```", "```kt\n    @Override\n    public void onListItemClick(ListView l, View v, int position, long id) {\n        if (mIsMultiPaned) {\n        //mDetail.updateContent(position);\n        } else {\n          SmallFragment sf = new SmallFragment();\n\n          FragmentTransaction transaction =\n          getActivity().getSupportFragmentManager().beginTransaction();\n          transaction.replace(R.id.main_container, sf);\n          transaction.addToBackStack(null);\n          transaction.commit();\n        }\n\n      }\n    }\n    ```", "```kt\n        public static class SmallFragment extends Fragment {\n          ...\n        }\n    ```", "```kt\n        public View onCreateView(\n            LayoutInflater inflater,\n            ViewGroup container,\n            Bundle savedInstanceState) {\n            View v = inflater.inflate(R.layout.simple, null);\n\n            return v;\n        }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout \n        android:id=\"@+id/main_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" >\n        <FrameLayout\n            android:id=\"@+id/detail_container\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"match_parent\"\n        />\n    </LinearLayout>\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout \n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" >\n        <fragment android:name=\"org.ktln2.android.packt.FragmentCompatibility$SmallListFragment\"\n            android:id=\"@+id/list_fragment\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_weight=\"1\"\n            />\n        <fragment android:name=\"org.ktln2.android.packt.FragmentCompatibility$SmallFragment\"\n            android:id=\"@+id/detail_fragment\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_weight=\"1\"\n            />\n     </LinearLayout>\n    ```", "```kt\nif (savedInstanceState != null) {\n    return;\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<merge>\n  <include layout=\"@layout/skeleton_extended\"/>\n</merge>\n```", "```kt\n<resources>\n    <style\n            name=\"AppTheme\"\n            parent=\"android:Theme.Light\" />\n</resources>\n```", "```kt\n<resources>\n    <style\n            name=\"AppTheme\"\n            parent=\"android:Theme.Holo.Light\" />\n</resources>\n```", "```kt\nandroid:theme=\"@style/AppTheme\"\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu >\n    <item android:id=\"@+id/menu_new\"\n          android:title=\"New\"\n          android:showAsAction=\"ifRoom\"/>\n    <item android:id=\"@+id/help\"\n          android:title=\"Help\" />\n</menu>\n```", "```kt\n    <uses-sdk\n        android:minSdkVersion=\"4\"\n        android:targetSdkVersion=\"11\" />\n```", "```kt\n    import android.app.Dialog;\n    import android.app.AlertDialog;\n    ```", "```kt\n        static public class DialogCompatibility extends DialogFragment {\n         …\n         }\n    ```", "```kt\n          @Override\n          public Dialog onCreateDialog(Bundle savedInstanceState) {\n          return new AlertDialog.Builder(getActivity())\n          .setTitle(\"Fragment and dialog\")\n          .create();\n        }\n    ```", "```kt\n        <item android:id=\"@+id/menu_dialog\"\n              android:title=\"Dialog\"\n              android:showAsAction=\"ifRoom\"\n              />\n    ```", "```kt\n      @Override\n      public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n          case R.id.menu_dialog:\n          DialogCompatibility dc = new DialogCompatibility();\n          DialogCompatibility.newInstance().show(getSupportFragmentManager(), \"dialog\");\n          return true;\n          default:\n          return super.onOptionsItemSelected(item);\n        }\n      }\n    ```", "```kt\nif (android.os.Build.VERSION.SDK_INT => android.os.Build.VERSION_CODES.HONECOMB) {\n   // ...\n} else if (android.os.Build.VERSION.SDK_INT =>\nandroid.os.Build.VERSION_CODES.GINGERBREAD){\n     // ...\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n   <bool name=\"isHoneycomb\">false</bool>\n</resources>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n   <bool name=\"isHoneycomb\">true</bool>\n</resources>\n```", "```kt\nResource r = getResources();\nboolean isHoneycomb = r.getBoolean(R.bool.isHoneycomb)\n```", "```kt\npublic void startManagingCursor(Cursor)\npublic Cursor managedQuery(Uri, String, String, String, String)\n```", "```kt\n    import android.support.v4.app.FragmentActivity;\n    import android.support.v4.app.*;\n    import android.support.v4.content.*;\n    ```", "```kt\n    public class LoaderCompatibilityApplication extends FragmentActivity {\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n        }\n    }\n    ```", "```kt\n      static public class RSSFragment extends ListFragment\n        implements LoaderManager.LoaderCallbacks<String[]> {\n      }\n    ```", "```kt\n      @Override\n      public void onActivityCreated(Bundle savedInstance) {\n        super.onActivityCreated(savedInstance);\n\n        setListAdapter(\n        new ArrayAdapter<String>(\n        getActivity(),\n        android.R.layout.simple_list_item_1,\n        new String[]{}\n        )\n        );\n        /*\n        * Differently to what the documentation says,\n        * append forceLoad() otherwise the Loader will not be called.\n        */\n        getLoaderManager().initLoader(0, null, this).forceLoad();\n      }\n    ```", "```kt\n      public RSSLoader onCreateLoader(int id, Bundle args) {\n        return new RSSLoader(getActivity());\n      }\n\n      public void onLoaderReset(Loader<String[]> loader) {\n      }\n\n      public void onLoadFinished(Loader<String[]> loader, String[] data) {\n        setListAdapter(\n          new ArrayAdapter<String>(\n            getActivity(),\n            android.R.layout.simple_list_item_1,\n            data\n          )\n        );\n      }\n    ```", "```kt\n      static public class RSSLoader extends AsyncTaskLoader<String[]> {\n        @Override\n        public String[] loadInBackground() {\n          String xml = \"\";\n          String[] news;\n\n          try {\n            xml = doGet();\n            news = getNews(xml);\n          } catch (Exception e) {\n            news = new String[] {e.getMessage()};\n          }\n\n          return news;\n        }\n      }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout \n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n        <fragment   android:name=\"org.ktln2.android.packt.LoaderCompatibilityApplication$RSSFragment\"\n            android:id=\"@+id/rss_list\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"fill_parent\"\n            />\n    </LinearLayout>\n    ```", "```kt\nnew Thread(new Runnable() {\n  public void run() {\n    this.sleep(5000);\n  }\n}).start();\n```", "```kt\npublic void onClick(View v) {\n\n  new Thread(new Runnable() {\n\n    public void run() {\n\n      Bitmap b = loadImageFromNetwork(\"http://example.com/image.png\");\n\n      mImageView.setImageBitmap(b);\n    }\n\n  }).start();\n\n}\n```", "```kt\n  new Thread(new Runnable() {\n    @Override\n    public void run() {\n      Looper.prepare();\n\n      mFirstHandler = new Handler() {\n        @Override\n        public void handleMessage(Message message) {\n          android.util.Log.i(TAG, (String)message.obj);\n        }\n      };\n\n      Looper.loop();\n    }\n  }).start();\n\n    new Thread(new Runnable() {\n    @Override\n    public void run() {\n      int cycle = 0;\n      while (true) {\n        try {\n          Thread.sleep(5000);\n\n          Message msg = mFirstHandler.obtainMessage();\n\n          msg.obj = \"Hi thread we are at \" + cycle;\n          mFirstHandler.sendMessage(msg);\n\n          cycle++;\n        } catch (java.lang.InterruptedException error) {\n          android.util.Log.i(TAG, \"error: \" + error.getMessage());\n        }\n      }\n    }\n  }).start();\n```", "```kt\n            mImageView.post(new Runnable() {\n                public void run() {\n                    mImageView.setImageBitmap(bitmap);\n                }\n            });\n```", "```kt\nclass PNGUpdate extends AsyncTask<URL, Integer, Long> {\n  Bitmap mBitmap;\n  ImageView mImageView;\n\n  public PNGUpdate(ImageView iv) {\n    mImageView = iv;\n  }\n\n  protected Long doInBackground(URL... urls) {\n   int count = urls.length;\n    for (int i = 0; i < count; i++) {\n      mBitmap = loadImageFromNetwork(urls[i]);\n    }\n\n    return 0;\n  }\n\n  protected void onPostExecute(Long result) {\n    mImageView.setImageBitmap(mBitmap);\n  }\n}\n```", "```kt\nnew PNGUpdate(myImageView).execute(pngURL)\n```", "```kt\n    import android.content.Context;\n    import android.support.v4.content.Loader;\n    import android.os.AsyncTask;\n    import java.util.Observer;\n    import java.util.Observable;\n    ```", "```kt\n    class RSSLowLevelLoader extends Loader<String[]> implements Observer {\n        …\n    }\n    ```", "```kt\n    private Task mTask = null;\n    private RSSObservable mTimerObservable = null;\n    ```", "```kt\n    /*\n     * Don't retain a reference to the context in the class since this\n     * will / can cause a memory leak.\n     */\n        public RSSLowLevelLoader(Context context) {\n            super(context);\n\n            mTimerObservable = new RSSObservable();\n            mTimerObservable.start(mURL);\n            mTimerObservable.addObserver(this);\n        }\n    ```", "```kt\n      private class Task extends AsyncTask<Void, Void, String[]> {\n      @Override\n        protected String[] doInBackground(Void... params) {\n          String xml = \"\";\n          String[] news = null;\n          try {\n            xml = RemoteHelper.doGet(\"http://www.packtpub.com/rss.xml\");\n            news = RemoteHelper.getNews(xml);\n          } catch (java.lang.Exception e) {\n            news = new String[] {e.getMessage()};\n          }\n\n          return news;\n        }\n\n        @Override\n        protected void onPostExecute(String[] results) {\n        // remember: deliverResult() must be called from the UI Thread\n          RSSLowLevelLoader.this.deliverResult(results);\n        }\n      }\n    ```", "```kt\n      @Override\n      protected void onStartLoading() {\n        if (takeContentChanged()) {\n          forceLoad();\n        }\n      }\n      @Override\n      protected void onStopLoading() {\n        if (mTask != null) {\n          boolean result = mTask.cancel(false);\n          android.util.Log.i(TAG, \"onStopLoading() = \" + result);\n\n          mTask = null;\n        }\n\n      }\n      @Override\n      protected void onForceLoad() {\n        android.util.Log.i(TAG, \"onForceLoad()\");\n        super.onForceLoad();\n\n        onStopLoading();\n\n        mTask = new Task();\n        mTask.execute();\n      }\n\n      @Override\n      protected void onReset() {\n        mTimerObservable.stop();\n      }\n    ```", "```kt\n    @Override\n    public void deliverResult(String[] data) {\n      if (isReset()) {\n        // if there is data to be garbage collected do it now\n        return;\n      }\n\n      super.deliverResult(data);\n    }\n    ```", "```kt\n      @Override\n      public void update(Observable obs, Object data) {\n        /*\n        * The default implementation checks to see if the loader\n        * is currently started; if so, it simply calls forceLoad().\n        */\n        onContentChanged();\n      }\n    ```", "```kt\n    public class RSSObservable extends Observable {\n      private String mContents = \"\";\n      private String mURL = null;\n      private Timer mTimer = null;  \n\n      public RSSObservable() {\n        mTimer = new Timer();\n      }\n\n      private class InnerTimer extends TimerTask {\n        @Override\n        public void run() {\n\n          String xml = \"\";\n          try {\n            xml = RemoteHelper.doGet(mURL);\n          } catch (Exception e) {}\n          if (xml != mContents) {\n            RSSObservable.this.setChanged();\n            RSSObservable.this.notifyObservers(null);\n\n            mContents = xml;\n          }\n        }\n      }\n\n      public void start(String URL) {\n        mURL = URL;\n        mTimer.schedule(new InnerTimer(), 10000, 20000);\n      }\n\n      public void stop() {\n         mTimer.cancel();\n      }\n    }\n    ```", "```kt\n    import com.actionbarsherlock.app.SherlockFragmentActivity;\n    import com.actionbarsherlock.app.SherlockFragment;\n    import com.actionbarsherlock.app.ActionBar;\n    import com.actionbarsherlock.view.Menu;\n    import com.actionbarsherlock.view.MenuItem;\n    import com.actionbarsherlock.view.MenuInflater;\n    ```", "```kt\n    public class ActionBarActivity extends SherlockFragmentActivity {\n        …\n    }\n    ```", "```kt\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n\n            // if you wan to configure something\n            // about ActionBar use this instance\n            ActionBar ab = getSupportActionBar();\n        }\n    ```", "```kt\n        @Override\n        public boolean onCreateOptionsMenu(Menu menu) {\n            MenuInflater inflater = getSupportMenuInflater();\n            inflater.inflate(R.menu.main, menu);\n\n            return true;\n        }\n    ```", "```kt\n      @Override\n      public boolean onOptionsItemSelected(MenuItem item) {\n          switch (item.getItemId()) {\n            default:\n                Toast.makeText(this, \"Hi!\", 1000).show();\n            }\n\n          return super.onOptionsItemSelected(item);\n        }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu >\n        <item android:id=\"@+id/first\"\n              android:title=\"First\"\n              android:showAsAction=\"ifRoom\"/>\n        <item android:id=\"@+id/second\"\n              android:title=\"Second\"\n              android:showAsAction=\"ifRoom\"/>\n    </menu>\n    ```", "```kt\nactionbarinstance.setDisplayHomeAsUpEnabled(true);\n```", "```kt\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n  switch (item.getItemId()) {\n\n    case android.R.id.home:\n\n    Intent intent = new Intent(this, MyOwnActivity.class);\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    startActivity(intent);\n\n    return true;\n\n    default:\n    return super.onOptionsItemSelected(item);\n\n  }\n}\n```", "```kt\n    import com.actionbarsherlock.view.MenuItem;\n    import com.actionbarsherlock.view.MenuInflater;\n    import android.widget.EditText;\n    ```", "```kt\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n      MenuInflater inflater = getSupportMenuInflater();\n      inflater.inflate(R.menu.main, menu);\n\n      MenuItem menuItem = menu.findItem(R.id.search);\n      menuItem.setOnActionExpandListener(new MenuItem.OnActionExpandListener() {\n        @Override\n        public boolean onMenuItemActionCollapse(MenuItem item) {\n          return true;\n        }\n\n        @Override\n        public boolean onMenuItemActionExpand(MenuItem item) {\n          return true;\n        }\n      });\n      EditText fakeSearchView = (EditText)menuItem.getActionView();\n\n      return true;\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu >\n      <item android:id=\"@+id/search\"\n        android:title=\"Search\"\n        android:showAsAction=\"always|collapseActionView\"\n         android:actionLayout=\"@layout/action_view\"\n        />\n    </menu>\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <EditText \n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Search\"/>\n    ```", "```kt\n    import com.actionbarsherlock.widget.ShareActionProvider;\n    import android.content.Intent;\n    ```", "```kt\n      public boolean onCreateOptionsMenu(Menu menu) {\n        // remember to use getSupportMenuInflater()\n        MenuInflater inflater = getSupportMenuInflater();\n        inflater.inflate(R.menu.main, menu);\n\n        ShareActionProvider sap = (ShareActionProvider)menu.findItem(R.id.share).getActionProvider();\n        // be cautious about the parameter otherwise the\n        // menu can be empty\n        Intent intent = new Intent(Intent.ACTION_SEND);\n        intent.setType(\"text/plain\");\n        sap.setShareIntent(intent);\n\n        return true;\n      }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu >\n        <item android:id=\"@+id/share\"\n          android:title=\"Share\"\n          android:showAsAction=\"always\"\n          android:actionProviderClass=\"com.actionbarsherlock.widget.ShareActionProvider\" />\n    </menu>\n    ```", "```kt\n    import com.actionbarsherlock.app.SherlockFragmentActivity;\n    import com.actionbarsherlock.view.ActionMode;\n    ```", "```kt\n    private ActionMode.Callback mActionModeCallback = new ActionMode.Callback() {\n\n        // Called after startActionMode()\n        @Override\n        public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n        // Inflate a menu resource providing context menu items\n        MenuInflater inflater = mode.getMenuInflater();\n        inflater.inflate(R.menu.context_menu, menu);\n        return true;\n      }\n\n      // Called each time the action mode is shown. Always called after onCreateActionMode, but\n      // may be called multiple times if the mode is invalidated.\n      @Override\n      public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n        return false; // Return false if nothing is done\n      }\n\n      // Called when the user selects a contextual menu item\n      @Override\n      public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n        switch (item.getItemId()) {\n          case R.id.action_1:\n          mode.finish(); // Action picked, so close the CAB\n          return true;\n          default:\n          return false;\n        }\n      }\n\n      // Called when the user exits the action mode\n      @Override\n      public void onDestroyActionMode(ActionMode mode) {\n      }\n    };\n    ```", "```kt\n      getListView().setOnItemClickListener(new AdapterView.OnItemClickListener() {\n        @Override\n        public void onItemClick(AdapterView<?>parent, View view, int position, long id) {\n          if (mActionMode != null) {\n            return;\n          }\n\n        // Start the CAB using the ActionMode.Callback defined above\n        ActionBarActivity.this.startActionMode(mActionModeCallback);\n        view.setSelected(true);\n        }\n      });\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu >\n        <item android:id=\"@+id/action_1\"\n              android:title=\"Action 1\" />\n        <item android:id=\"@+id/action_2\"\n              android:title=\"Action 2\" />\n    </menu>\n    ```", "```kt\n    import com.actionbarsherlock.app.SherlockFragmentActivity;\n    import com.actionbarsherlock.app.ActionBar;\n    import android.support.v4.view.ViewPager;\n    import com.viewpagerindicator.TitlePageIndicator;\n    ```", "```kt\n    public class ActionBarActivity extends SherlockFragmentActivity implements ActionBar.TabListener {\n    …\n    }\n    ```", "```kt\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        ActionBar ab = getSupportActionBar();\n        ab.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);\n\n        ViewPager pager = (ViewPager)findViewById(R.id.pager);\n        pager.setAdapter(new TabsAdapter(getSupportFragmentManager()));\n\n        //Bind the title indicator to the adapter\n        TitlePageIndicator titleIndicator = (TitlePageIndicator)findViewById(R.id.titles);\n        titleIndicator.setViewPager(pager);\n      }\n    ```", "```kt\n      public class TabsAdapter extends FragmentPagerAdapter {\n        public TabsAdapter(FragmentManager fm) {\n          super(fm);\n        }\n\n        @Override\n        public Fragment getItem(int position) {\n          return new DummyFragment();\n        }\n\n        @Override\n        public int getCount() {\n          return 3;\n        }\n\n        @Override\n        public CharSequence getPageTitle(int position) {\n          return \"Page \" + position;\n        }\n\n      }\n    ```", "```kt\n      /*\n      * TabListener interface's methods\n      */\n      public void onTabReselected(ActionBar.Tab tab, FragmentTransaction ft) {\n      // User selected the already selected tab. Usually do nothing.\n      }\n\n      public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction ft) {\n      }\n\n      public void onTabSelected(ActionBar.Tab tab, FragmentTransaction ft) {\n      }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout \n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n        <com.viewpagerindicator.TitlePageIndicator\n            android:id=\"@+id/titles\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"fill_parent\" />\n    <android.support.v4.view.ViewPager\n        android:id=\"@+id/pager\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        />\n    </LinearLayout>\n    ```"]