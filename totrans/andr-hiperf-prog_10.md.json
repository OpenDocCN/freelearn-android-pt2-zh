["```kt\npublic Bitmap scale(){\n  //Options creation\n  BitmapFactory.Options bmpFactoryOptions = new BitmapFactory.Options();\n\n  //Reading source resolution\n  bmpFactoryOptions.inJustDecodeBounds = true;\n  BitmapFactory.decodeFile(url, bmpFactoryOptions);\n\n  int heightRatio = (int) Math.ceil(bmpFactoryOptions.outHeight / (float) desiredHeight);\n  int widthRatio = (int) Math.ceil(bmpFactoryOptions.outWidth / (float) desiredWidth);\n\n  //Setting properties to obtain the desired result\n  if (heightRatio > 1 || widthRatio > 1) {\n      if (heightRatio > widthRatio) {\n          bmpFactoryOptions.inSampleSize = heightRatio;\n      } else {\n          bmpFactoryOptions.inSampleSize = widthRatio;\n      }\n}\n\n//Restoring the Options\nbmpFactoryOptions.inJustDecodeBounds = false;\n\n//Loading Bitmap\nreturn BitmapFactory.decodeFile(url, bmpFactoryOptions);\n}\n```", "```kt\npublic Bitmap scale(){\n  //Options creation\n  BitmapFactory.Options bmpFactoryOptions = new BitmapFactory.Options();\n\n  //Reading source resolution\n  bmpFactoryOptions.inJustDecodeBounds = true;\n  BitmapFactory.decodeFile(url, bmpFactoryOptions);\n\n  //Setting properties to obtain the desired result\n  bmpFactoryOptions.inScaled = true;\n  bmpFactoryOptions.inDensity = desiredWidth;\n  bmpFactoryOptions.inTargetDensity =  bmpFactoryOptions.outWidth;\n\n  //Restoring the Options\n  bmpFactoryOptions.inJustDecodeBounds = false;\n\n  //Loading Bitmap\n  return BitmapFactory.decodeFile(url, bmpFactoryOptions);\n}\n```", "```kt\npublic Bitmap scale(){\n  //Options creation\n  BitmapFactory.Options bmpFactoryOption = new BitmapFactory.Options();\n\n  //Reading source resolution\n  bmpFactoryOption.inJustDecodeBounds = true;\n  BitmapFactory.decodeFile(url, bmpFactoryOption);\n\n  int heightRatio = (int) Math.ceil(bmpFactoryOption.outHeight / (float) desiredHeight);\n  int widthRatio = (int) Math.ceil(bmpFactoryOption.outWidth / (float) desiredWidth);\n\n  //Setting properties to obtain the desired result\n  if (heightRatio > 1 || widthRatio > 1) {\n      if (heightRatio > widthRatio) {\n          bmpFactoryOption.inSampleSize = heightRatio;\n      } else {\n          bmpFactoryOption.inSampleSize = widthRatio;\n      }\n  }\n  bmpFactoryOption.inScaled = true;\n  bmpFactoryOption.inDensity = desiredWidth;\n  bmpFactoryOption.inTargetDensity =  desiredWidth * bmpFactoryOption.inSampleSize;\n\n  //Restoring the Options\n  bmpFactoryOption.inJustDecodeBounds = false;\n\n  //Loading Bitmap\n  return BitmapFactory.decodeFile(url, bmpFactoryOption);\n}\n```", "```kt\npublic class BitmapTask extends AsyncTask<String, Void, Bitmap> {\n    private WeakReference<ImageView> imageView;\n    private int desiredWidth;\n    private int desiredHeight;\n\n    public BitmapTask(ImageView imageView, int desiredWidth, int desiredHeight) {\n        this.imageView = new WeakReference<>(imageView);\n        this.desiredHeight = desiredHeight;\n        this.desiredWidth = desiredWidth;\n    }\n\n    @Override\n    protected Bitmap doInBackground(String... params) {\n        return new BitmapScaler().scaleUsingCombinedTechniques(params[0], desiredWidth, desiredHeight);\n    }\n\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        super.onPostExecute(bitmap);\n        if (imageView != null && imageView.get() != null && bitmap != null)\n            imageView.get().setImageBitmap(bitmap);\n    }\n}\n```", "```kt\npublic class BitmapCache {\n    private LruCache<String, Bitmap> lruCache;\n\n    public BitmapCache() {\n        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n        final int cacheSize = maxMemory / 8;\n        lruCache = new LruCache<String, Bitmap>(cacheSize);\n    }\n\n    public void add(String key, Bitmap bitmap) {\n        if (get(key) == null) {\n            lruCache.put(key, bitmap);\n        }\n    }\n\n    public Bitmap get(String key) {\n        return lruCache.get(key);\n    }\n}\n```", "```kt\nlruCache = new LruCache<String, Bitmap>(cacheSize){\n    @Override\n    protected int sizeOf(String key, Bitmap value) {\n        return value.getByteCount();\n    }\n};\n```", "```kt\npublic void loadBitmap(int resId, final ImageView imageView, String url) {\n    String imageKey = String.valueOf(resId);\n    Bitmap bitmap = bitmapCache.get(imageKey);\n    if (bitmap != null) {\n        imageView.setImageBitmap(bitmap);\n    } else {\n        imageView.setImageResource(R.drawable.placeholder);\n        BitmapDownloaderTask task = new BitmapDownloaderTask(bitmapCache, new BitmapDownloaderTask.OnImageReady() {\n            @Override\n            public void onImageReady(Bitmap bitmap) {\n                imageView.setImageBitmap(bitmap);\n            }\n        });\n        task.execute(url);\n    }\n}\n```", "```kt\nclass InitDiskCacheTask extends AsyncTask<File, Void, Void> {\n    @Override\n    protected Void doInBackground(File... params) {\n        synchronized (mDiskCacheLock) {\n            File cacheDir = params[0];\n            mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);\n            mDiskCacheStarting = false;\n            mDiskCacheLock.notifyAll();\n        }\n        return null;\n    }\n}\n```", "```kt\npublic void addBitmapToCache(String key, Bitmap bitmap) throws IOException {\n    if (bitmapCache.get(key) == null) {\n        bitmapCache.add(key, bitmap);\n    }\n    synchronized (mDiskCacheLock) {\n        if (mDiskLruCache != null && mDiskLruCache.get(key) == null) {\n            mDiskLruCache.put(key, bitmap);\n        }\n    }\n}\n```", "```kt\npublic Bitmap decode(String url) {\n    //Options creation\n    BitmapFactory.Options bmpFactoryOptions = new BitmapFactory.Options();\n\n    bmpFactoryOptions.inPreferredConfig = Bitmap.Config.RGB_565;\n\n    //Loading Bitmap\n    return BitmapFactory.decodeFile(url, bmpFactoryOptions);\n}\n```", "```kt\nprivate boolean canBitmapBeReused(\n        Bitmap bitmap, BitmapFactory.Options options) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        int width = options.outWidth / options.inSampleSize;\n        int height = options.outHeight / options.inSampleSize;\n        int byteCount = width * height * getBytesPerPixel(bitmap.getConfig());\n        return byteCount <= bitmap.getAllocationByteCount();\n    }\n    return bitmap.getWidth() == options.outWidth\n            && bitmap.getHeight() == options.outHeight\n            && options.inSampleSize == 1;\n}\n\nprivate int getBytesPerPixel(Bitmap.Config config) {\n    switch (config) {\n        case ARGB_8888:\n            return 4;\n        case RGB_565:\n        case ARGB_4444:\n            return 2;\n        default:\n        case ALPHA_8:\n            return 1;\n    }\n}\n```", "```kt\nprivate Bitmap getBitmapFromPool(BitmapFactory.Options options, Set<SoftReference<Bitmap>> bitmapsPool) {\n    Bitmap bitmap = null;\n    if (bitmapsPool != null && !bitmapsPool.isEmpty()) {\n        synchronized (bitmapsPool) {\n            final Iterator<SoftReference<Bitmap>> iterator\n                    = bitmapsPool.iterator();\n            Bitmap item;\n            while (iterator.hasNext()) {\n                item = iterator.next().get();\n                if (null != item && item.isMutable()) {\n                    if (canBitmapBeReused(item, options)) {\n                        bitmap = item;\n                        iterator.remove();\n                        break;\n                    }\n                } else {\n                    iterator.remove();\n                }\n            }\n        }\n    }\n    return bitmap;\n}\n```", "```kt\npublic Bitmap decodeBitmap(String filename, int reqWidth, int reqHeight) {\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    addOptions(options);\n    return BitmapFactory.decodeFile(filename, options);\n}\n\nprivate void addOptions(BitmapFactory.Options options) {\n    options.inMutable = true;\n    Bitmap inBitmap = getBitmapFromPool(options);\n    if (inBitmap != null) {\n        options.inBitmap = inBitmap;\n    }\n}\n```", "```kt\npublic class BitmapCache {\n    private Set<SoftReference<Bitmap>> bitmapsPool;\n    private LruCache<String, Bitmap> lruCache;\n\n    public BitmapCache() {\n        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n        final int cacheSize = maxMemory / 8;\n        lruCache = new LruCache<String, Bitmap>(cacheSize) {\n            @Override\n            protected int sizeOf(String key, Bitmap value) {\n                return value.getByteCount();\n            }\n\n            @Override\n            protected void entryRemoved(boolean evicted, String key,\n              Bitmap oldValue, Bitmap newValue) {\n                bitmapsPool.add(new SoftReference<>(oldValue));\n            }\n        };\n        bitmapsPool = Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());\n    }\n\n    public void add(String key, Bitmap bitmap) {\n        if (get(key) == null) {\n            lruCache.put(key, bitmap);\n        }\n    }\n\n    public Bitmap get(String key) {\n        return lruCache.get(key);\n    }\n}\n```", "```kt\n[\n{\n    \"level\": 23,\n    \"name\": \"Marshmallow\",\n    \"version\": \"6.0\"\n}, {\n    \"level\": 22,\n    \"name\": \"Lollipop\",\n    \"version\": \"5.1\"\n}, {\n    \"level\": 21,\n    \"name\": \"Lollipop\",\n    \"version\": \"5.0\"\n}, {\n    \"level\": 19,\n    \"name\": \"KitKat\",\n    \"version\": \"4.4\"\n}\n]\n```", "```kt\n{\n  \"level\": [23, 22, 21, 19],\n  \"name\": [\"Marshmallow\", \"Lollipop\", \"Lollipop\", \"Kitkat\"],\n  \"version\": [\"6.0\", \"5.1\", \"5.0\", \"4.4\"]\n}\n```", "```kt\nmessage Person {\n    required string name = 1;\n    required int32 id = 2;\n    optional string email = 3;\n\n    enum PhoneType {\n        MOBILE = 0;\n        HOME = 1;\n        WORK = 2;\n    }\n\n    message PhoneNumber {\n        required string number = 1;\n        optional PhoneType type = 2 [default = HOME];\n    }\n\n    repeated PhoneNumber phone = 4;\n}\n```", "```kt\n{\n  \"user\": {\n      \"username\": \"username\",\n      \"name\": \"Name\",\n      \"height\": 185,\n      \"enabled\": true,\n      \"purchases\": [\n{\n              \"id\": \"purchaseId1\",\n              \"name\": \"purchaseName1\",\n              \"quantity\": 2,\n              \"price\": 120\n          }, {\n              \"id\": \"purchaseId2\",\n              \"name\": \"purchaseName2\",\n              \"quantity\": 1,\n              \"price\": 10\n          }\n]\n  }\n}\n```", "```kt\nnamespace com.flatbuffer.example;\n\ntable User {\n    username: string;\n    name: string;\n    height: int;\n    enabled: bool;\n    purchases: [Purchase];\n}\n\ntable Purchase {\n    id: string;\n    name: string;\n    quantity: int;\n    price: int;\n}\n\nroot_type User;\n```", "```kt\nflatc --java\n\n```", "```kt\npublic final class User extends Table {\n    public static User getRootAsUser(ByteBuffer _bb) {\n        return getRootAsUser(_bb, new User());\n    }\n\n    public static User getRootAsUser(ByteBuffer _bb, User obj) {\n        _bb.order(ByteOrder.LITTLE_ENDIAN);\n        return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb));\n    }\n\n    public User __init(int _i, ByteBuffer _bb) {\n        bb_pos = _i;\n        bb = _bb;\n        return this;\n    }\n\n    public String username() {\n        int o = __offset(4);\n        return o != 0 ? __string(o + bb_pos) : null;\n    }\n\n    public ByteBuffer usernameAsByteBuffer() {\n        return __vector_as_bytebuffer(4, 1);\n    }\n\n    public String name() {\n        int o = __offset(6);\n        return o != 0 ? __string(o + bb_pos) : null;\n    }\n\n    public ByteBuffer nameAsByteBuffer() {\n        return __vector_as_bytebuffer(6, 1);\n    }\n\n    public int height() {\n        int o = __offset(8);\n        return o != 0 ? bb.getInt(o + bb_pos) : 0;\n    }\n\n    public boolean enabled() {\n        int o = __offset(10);\n        return o != 0 ? 0 != bb.get(o + bb_pos) : false;\n    }\n\n    public Purchase purchases(int j) {\n        return purchases(new Purchase(), j);\n    }\n\n    public Purchase purchases(Purchase obj, int j) {\n        int o = __offset(12);\n        return o != 0 ? obj.__init(__indirect (__vector(o) + j * 4), bb) : null;\n    }\n\n    public int purchasesLength() {\n        int o = __offset(12);\n        return o != 0 ? __vector_len(o) : 0;\n    }\n\n    public static int createUser(FlatBufferBuilder builder,\n                                 int usernameOffset,\n                                 int nameOffset,\n                                 int height,\n                                 boolean enabled,\n                                 int purchasesOffset) {\n        builder.startObject(5);\n        User.addPurchases(builder, purchasesOffset);\n        User.addHeight(builder, height);\n        User.addName(builder, nameOffset);\n        User.addUsername(builder, usernameOffset);\n        User.addEnabled(builder, enabled);\n        return User.endUser(builder);\n    }\n\n    public static void startUser(FlatBufferBuilder builder) {\n        builder.startObject(5);\n    }\n\n    public static void addUsername(FlatBufferBuilder builder, int usernameOffset) {\n        builder.addOffset(0, usernameOffset, 0);\n    }\n\n    public static void addName(FlatBufferBuilder builder, int nameOffset) {\n        builder.addOffset(1, nameOffset, 0);\n    }\n\n    public static void addHeight(FlatBufferBuilder builder, int height) {\n        builder.addInt(2, height, 0);\n    }\n\n    public static void addEnabled(FlatBufferBuilder builder, boolean enabled) {\n        builder.addBoolean(3, enabled, false);\n    }\n\n    public static void addPurchases(FlatBufferBuilder builder, int purchasesOffset) {\n        builder.addOffset(4, purchasesOffset, 0);\n    }\n\n    public static int createPurchasesVector(FlatBufferBuilder builder, int[] data) {\n        builder.startVector(4, data.length, 4);\n        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n\n    public static void startPurchasesVector(FlatBufferBuilder builder, int numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    public static int endUser(FlatBufferBuilder builder) {\n        int o = builder.endObject();\n        return o;\n    }\n\n    public static void finishUserBuffer(FlatBufferBuilder builder, int offset) {\n        builder.finish(offset);\n    }\n}\n```", "```kt\nprivate User loadFlatBuffer(byte[] bytes) {\n    ByteBuffer bb = ByteBuffer.wrap(bytes);\n    return User.getRootAsUser(bb);\n}\n```", "```kt\npublic class ExampleObject {\n    private int id;\n\n    public ExampleObject(int id) {\n        this.setId(id);\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n```", "```kt\npublic class ExampleObject {\n    private int id;\n\n    public ExampleObject(int id) {\n        this.id = id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n```", "```kt\npublic class OuterClass {\n    private int id;\n\n    public OuterClass() {\n    }\n\n    private void doSomeStuff() {\n        InnerClass innerObject = new InnerClass();\n        innerObject.doSomeOtherStuff();\n    }\n\n    private class InnerClass {\n        private InnerClass() {\n        }\n\n        private void doSomeOtherStuff() {\n            OuterClass.this.doSomeStuff();\n        }\n    }\n}\n```", "```kt\nclass OuterClass {\n    private int id;\n\n    private void doSomeStuff() {\n        OuterClass$InnerClass innerObject = new OuterClass$InnerClass();\n        innerObject.doSomeStuff();\n    }\n\n    int access$0() {\n        return id;\n    }\n}\n```", "```kt\nclass InnerClass {\nOuterClass this$0;\n\n    void doSomeOtherStuff() {\n        InnerClass.access$100(this$0);\n    }\n\n static void access$100(OuterClass outerClass) {\n        outerClass.doSomeStuff(); \n    }\n\n    static int access$0(OuterClass outerClass) {\n        return outerClass.id;\n    }\n}\n```", "```kt\npublic class OuterClass {\n    int id;\n\n    void doSomeStuff() {\n        InnerClass innerObject = new InnerClass();\n        innerObject.doSomeOtherStuff();\n    }\n\n    private class InnerClass {\n\n        private void doSomeOtherStuff() {\n            OuterClass.this.doSomeStuff();\n        }\n    }\n}\n```", "```kt\nandroid {\n    ...\n    defaultConfig {\n        ...\n        jackOptions {\n            enabled true\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n```", "```kt\npublic interface OnNewsSelected {\n    void onNewsClick(News news);\n}\n```", "```kt\npublic class MainActivity extends Activity implements OnNewsSelected\n{\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    public void onNewsClick(News news) {\n        // code to handle the click on a news\n    }\n}\n```", "```kt\npublic interface OnNewsSelected {\n    void onNewsClick(News news);\n\n    void onNewsLongClick(News news);\n}\n```", "```kt\npublic interface OnNewsSelected {\n    void onNewsClick(News news);\n\n    default void onNewsLongClick(Context context, News news) {\n        Intent intent = new Intent(context, NewsDetailActivity.class);\n        intent.putExtra(NEWS_KEY, news);\n        context.startActivity(intent);\n    }\n}\n```", "```kt\npublic interface OnNewsSelected {\n    void onNewsClick(News news);\n\n    static void onNewsLongClick(Context context, News news) {\n        Intent intent = new Intent(context, NewsDetailActivity.class);\n        intent.putExtra(NEWS_KEY, news);\n        context.startActivity(intent);\n    }\n}\n```", "```kt\npublic interface Adder {\n    int add(int a, int b);\n}\n```", "```kt\nAdder adder = (int a, int b) -> a + b;\n```", "```kt\nsetAdder((a, b) -> a + b);\n```", "```kt\nsetAdder(new Adder() {\n\n    @Override\n    public int add(int a, int b) {\n        return a + b;\n    }\n});\n```", "```kt\n@Retention( RetentionPolicy.RUNTIME )\npublic @interface Devices {\n    Manufacturer[] value() default{};\n}\n\n@Repeatable( value = Device.class )\npublic @interface Manufacturer {\n    String value();\n}\n```", "```kt\n@Manufacturer(\"Samsung\")\n@Manufacturer(\"LG\")\n@Manufacturer(\"HTC\")\n@Manufacturer(\"Motorola\")\npublic interface Device {\n\n}\n```", "```kt\nbuildTypes {\n    debug {\n        debuggable true\n    }\n    release {\n        minifyEnabled true \n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\n}\n```", "```kt\nbuildTypes {\n    debug {\n        debuggable true\n    }\n    release {\n        minifyEnabled true\n        shrinkResources true\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\n}\n```", "```kt\ndefaultConfig {\n    applicationId \"applicationId\"\n    minSdkVersion 18\n    targetSdkVersion 23\n    versionCode 1\n    versionName \"1.0\"\n    resConfigs \"en\", \"fr\"\n}\n```"]