- en: Chapter 5. Adding RadioButton, CheckBox, Menu, and Preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Are you excited enough? If not, you should be; we are half way through and
    ready to explore some more of the widgets that are commonly used and have a lot
    of significance in any application. The things to be covered in this chapter are
    adding a menu, check box, radio button, and preference to the application. We
    will make use of these widgets and create the `DistanceConverter` application
    .The main objective of this application is to convert distance entered in km/m
    to mile/foot and yards. The following are the steps that we cover in this chapter
    to successfully create the `DistanceConverter` application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a project: `DistanceConverter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a RadioGroup.RadioButton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a CheckBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the Strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the Preferences screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hook up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding menu and Preference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting values from Preference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DistanceConverter` application will allow users to input distance in km/m
    and convert them to miles, feet, and yards simultaneously. We have already covered
    creating a new project in the earlier chapters, hence we will keep it very short
    here. Let''s create a new project by navigating to **File** | **New** | **Others**
    | **Android Application Project**. Enter the fitting data from the following table
    in the corresponding wizards:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Application name | `DistanceCon` |'
  prefs: []
  type: TYPE_TB
- en: '| Project Name | `DistanceCon` |'
  prefs: []
  type: TYPE_TB
- en: '| Package Name | `com.packt.ch05.distancecon` |'
  prefs: []
  type: TYPE_TB
- en: '| Template | `BlankActivity` |'
  prefs: []
  type: TYPE_TB
- en: '| Activity | `MainActivity` |'
  prefs: []
  type: TYPE_TB
- en: '| Layout | `activity_main` |'
  prefs: []
  type: TYPE_TB
- en: 'The following screen shows some data being filled in the wizard as per the
    preceeding table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new project](img/1103OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a RadioGroup, RadioButton, and a TextField
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android SDK provides two types of radio controls to be used in conjunction,
    where only one control can be chosen at a given time. RadioGroup (`android.widget.RadioGroup`)
    is used to encapsulate a set of RadioButton controls for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we add the RadioGroup and RadioButton control, let''s add the label
    `Distance` and the TextField to allow users to provide inputs. Open `the activity_main.xml`
    file, and add following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get back and add the RadioGroup and RadioButtons in it. Add the following
    entries to the same file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have made `android:checked="true"` to be checked by default. After this step
    we would see some errors, don't worry about them as we are yet to define these
    strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is what we may see after adding the preceeding code
    in the XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a RadioGroup, RadioButton, and a TextField](img/1103OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a CheckBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use CheckBox to allow users to have a conversion facility available
    for multiple types of conversions, at once. To add a CheckBox, add the following
    code in `activity_main.xml`. We will have three checkboxes for each: Mile, Foot,
    and Yard; the same can be achieved using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Also add a button, such that upon clicking on it the conversion kicks off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting screen should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a CheckBox](img/1103OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will invoke the `Preference` screen from the menu. There are essentially
    three different types of menus available: Options menu, Context menu, and Pop
    up Menu. Here, we will use the Options menu for our purpose. To add the menu under
    `res/menu` create a new file named `prefsetting.xml`. Add the menu item, using
    the `<item></item>` element by adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the menu item is set as `android:title="Preferences"`. The `android:showAsAction`
    keyword indicates how an item should appear in the action bar. For more menu options
    and attributes please refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/topics/ui/menus.html](http://developer.android.com/guide/topics/ui/menus.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/topics/resources/menu-resource.html](http://developer.android.com/guide/topics/resources/%E2%80%A8menu-resource.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Under the **res/values** tab, open `strings.xml` and add the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After this step all the previous verbose errors should disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Preference screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Preferences are an important aspect of the android applications. It allows
    users to have the choice to modify and personalize it. Preferences can be set
    two ways: the first method is to create the `preferences.xml` file in the `res/xml`
    directory and the second method is to set the preferences from the code. We will
    use the former, also the easier one, by creating the `preferences.xml` file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `xml` directory, if it does not exit, and add the `preferences.xml`
    file. Every preference needs the following attributes, as shown in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `android:key` | Used to get the preference value |'
  prefs: []
  type: TYPE_TB
- en: '| `android:title` | To specify the android title |'
  prefs: []
  type: TYPE_TB
- en: '| `android:summary` | Summary about preferences |'
  prefs: []
  type: TYPE_TB
- en: '| `android:defaultValue` | Optional, used to set the default values |'
  prefs: []
  type: TYPE_TB
- en: 'Usually, there are five different preference views, as listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Views | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CheckBoxPreference` | Simple checkbox returns true/false |'
  prefs: []
  type: TYPE_TB
- en: '| `ListPreference` | Shows RadioGroup, only 1 item selected |'
  prefs: []
  type: TYPE_TB
- en: '| `EditTextPreference` | Shows dialog box edit TextView, returns String |'
  prefs: []
  type: TYPE_TB
- en: '| `RingTonePreference` | RadioGroup that shows ringtone |'
  prefs: []
  type: TYPE_TB
- en: '| `PreferenceCategory` | Is a category with preferences |'
  prefs: []
  type: TYPE_TB
- en: 'We will make use of `CheckBoxPreference`, `ListPreference`, and `PreferenceCategory`
    in our application. Let''s add these preferences view in the `preferences.xml`
    file we have created. Add the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in spitting a lot of errors, however we will now solve this
    by defining strings. `ListPreference` provides a list and allows the selection
    of only one item, and hence, contains `android:entries,` and `android:entryValues`
    takes array. Now we will provide an array declaration for the same, to do that
    under `res/values`, if it does not exist, create the file `arrays.xml` and add
    the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Define the following strings that are used in the `preferences.xml` file in
    the `strings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are done defining the Preference screen, let''s do some work to
    show it. The Preference framework comes with the activity class `android.preference`.
    `PreferenceActivity` needs to be overridden with our class. Create a class `UserSettings.java`
    under the `com.packt.ch05.distnacecon` package and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`addPreferencesFromResources()` loads the Preference screen from the `preferences.xml`
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: Hook up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After doing all the hard work of defining and putting things in place, let's
    get in to do some action by hooking up everything with the main screen (Main Activity).
    Open the `MainActivity.java` file and let's binds things in now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize the widgets as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onCreate` method is first called to fetch the instances of widgets as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Binding the menu and Preference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We specify our earlier defined menu from the resources file `prefesetting.xml`,
    by `getMenuInflater().inflate(R.menu.prefsetting, menu)` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On the menu item select the `override` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`onActivityResult` is called receiving the result from the following code,
    so perform the operation needed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Getting values from Preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we want to reflect the value set in the Preference screen onto the main
    screen to show personalization.
  prefs: []
  type: TYPE_NORMAL
- en: We get the values from the Preference screen and set it back to the main screen
    in `showPreferenceSettings()`. We get the preferences values via `PreferenceManager`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: On clicking the **Calculate** button, the conversion should happen and the result
    should be shown. To show the result we make use of the ToastView command here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onClick` function is called when the button is clicked, we then get the
    RadioButton values and the checked CheckBox values and call the corresponding
    convert functions which is then shown via ToastView with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the conversion method for each type as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Add the other conversion method for the others as well.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, add the following tag which denotes an activity in the `AndroidManifest.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The complete code and resources are available in a downloadable source code.
  prefs: []
  type: TYPE_NORMAL
- en: Run the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we run the application, the following screen should appear where the first
    screen accepts the input and the output appears as ToastView popup on clicking
    the **Calculate** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Run the application](img/1103OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Preference screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Run the application](img/1103OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have learned about how to get going with widgets, such as
    CheckBox, RadioButton together with RadioButton, menu, and creating custom Preferences
    view and getting values from it. Also, using these concepts we have created the
    `DistanceConverter` application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to handle the various screen types and
    orientations for this application.
  prefs: []
  type: TYPE_NORMAL
