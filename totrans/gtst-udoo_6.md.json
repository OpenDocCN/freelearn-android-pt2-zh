["```kt\n    #define TEMPERATURE_POLL_PERIOD 1000\n    #define SENSOR A0\n    #define BOILER 12\n    int reading;\n    ```", "```kt\n    void setup() {\n      pinMode(BOILER, OUTPUT);\n      digitalWrite(BOILER, LOW);\n      Serial.begin(115200);\n    }\n    ```", "```kt\n    float convertToCelsius(int value) {\n      float voltage = (value / 1024.0) * 3.3;\n      return (voltage - 0.5) * 100;\n    }\n    ```", "```kt\n    void loop() {\n      reading = analogRead(SENSOR);\n      Serial.print(\"Degrees C:\");\n      Serial.println(convertToCelsius(reading));\n      delay(TEMPERATURE_POLL_PERIOD);\n    }\n    ```", "```kt\n#include <adk.h>\n#define BUFFSIZE 128\nchar accessoryName[] = \"Chronotherm\";\nchar manufacturer[] = \"Example, Inc.\";\nchar model[] = \"Chronotherm\";\nchar versionNumber[] = \"0.1.0\";\nchar serialNumber[] = \"1\";\nchar url[] = \"http://www.example.com\";\nuint8_t buffer[BUFFSIZE];\nuint32_t readBytes = 0;\nUSBHost Usb;\nADK adk(&Usb, manufacturer, model, accessoryName, versionNumber, url, serialNumber);\n```", "```kt\nvoid writeToAdk(float temperature) {\n  char tempBuffer[BUFFSIZE];\n  sprintf(tempBuffer, \"%f\", temperature);\n  memcpy(buffer, tempBuffer, BUFFSIZE);\n  adk.write(strlen(tempBuffer), buffer);\n}\n```", "```kt\n    void executor(uint8_t command) {\n      switch(command) {\n        case 0:\n          digitalWrite(BOILER, LOW);\n          break;\n        case 1:\n          digitalWrite(BOILER, HIGH);\n          break;\n        default:\n          // noop\n          break;\n      }\n    }\n    ```", "```kt\n    void executeFromAdk() {\n      adk.read(&readBytes, BUFFSIZE, buffer);\n      if (readBytes > 0){\n        executor(buffer[0]);\n      }\n    }\n    ```", "```kt\nvoid loop() {\n  Usb.Task();\n  if (adk.isReady()) {\n    reading = analogRead(SENSOR);\n    writeToAdk(convertToCelsius(reading));\n    executeFromAdk();\n    delay(DELAY);\n  }\n}\n```", "```kt\n    <resources>\n      <usb-accessory\n        version=\"0.1.0\"\n        model=\"Chronotherm\"\n        manufacturer=\"Example, Inc.\"/>\n    </resources>\n    ```", "```kt\n    <resources>\n      <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n      <dimen name=\"activity_vertical_margin\">16dp</dimen>\n      <dimen name=\"text_title\">40sp</dimen>\n      <dimen name=\"temperature\">100sp</dimen>\n      <dimen name=\"temperature_round\">300dp</dimen>\n      <dimen name=\"circle_round\">120dp</dimen>\n    </resources>\n    ```", "```kt\n    <resources>\n      <color name=\"mine_shaft\">#444444</color>\n      <color name=\"pistachio\">#99CC00</color>\n      <color name=\"coral_red\">#FF4444</color>\n      <style name=\"AppTheme\" parent=\"Theme.AppCompat\"></style>\n    </resources>\n    ```", "```kt\n    <shape\n\n      android:shape=\"oval\">\n\n      <stroke\n        android:width=\"2dp\"\n        android:color=\"@color/coral_red\"/>\n\n      <size\n        android:width=\"@dimen/circle_round\"\n        android:height=\"@dimen/circle_round\"/>\n    </shape>\n    ```", "```kt\n    <LinearLayout \n\n      android:orientation=\"vertical\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n      android:paddingRight=\"@dimen/activity_horizontal_margin\"\n      android:paddingTop=\"@dimen/activity_vertical_margin\"\n      android:paddingBottom=\"@dimen/activity_vertical_margin\"\n      tools:context=\".Overview\">\n    </LinearLayout>\n\n    ```", "```kt\n    <LinearLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n      <TextClock\n        android:textSize=\"@dimen/text_title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" />\n\n      <TextView\n        android:id=\"@+id/boiler_status\"\n        android:text=\"ACTIVE\"\n        android:gravity=\"end\"\n        android:textColor=\"@color/mine_shaft\"\n        android:textSize=\"@dimen/text_title\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n    </LinearLayout>\n    ```", "```kt\n    <LinearLayout\n      android:orientation=\"horizontal\"\n      android:gravity=\"center\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\">\n\n      <LinearLayout\n        android:id=\"@+id/view_container\"\n        android:gravity=\"center\"\n        android:orientation=\"horizontal\"\n        android:layout_width=\"0dp\"\n        android:layout_weight=\"1\"\n        android:layout_height=\"match_parent\">\n      </LinearLayout>\n\n      <TextView\n        android:id=\"@+id/temperature\"\n        android:text=\"20.5Â°\"\n        android:background=\"@drawable/circle\"\n        android:gravity=\"center\"\n        android:textColor=\"@color/coral_red\"\n        android:textSize=\"@dimen/temperature\"\n        android:layout_width=\"@dimen/temperature_round\"\n        android:layout_height=\"@dimen/temperature_round\" />\n    </LinearLayout>\n    ```", "```kt\n    private AdkManager mAdkManager;\n    private TextView mTemperature;\n    private TextView mStatus;\n\n    ```", "```kt\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_overview);\n    mTemperature = (TextView) findViewById(R.id.temperature);\n    mStatus = (TextView) findViewById(R.id.boiler_status);\n\n    ```", "```kt\n    public class TemperatureBar extends SeekBar {\n      public TemperatureBar(Context context) {\n        super(context);\n      }\n      public TemperatureBar(Context context, AttributeSet attrs) {\n        super(context, attrs);\n      }\n      public TemperatureBar(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n      }\n    }\n    ```", "```kt\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n      super.onSizeChanged(h, w, oldh, oldw);\n    }\n\n    @Override\n    protected synchronized void onMeasure(int width, int height) {\n      super.onMeasure(height, width);\n      setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());\n    }\n\n    @Override\n    protected void onDraw(Canvas c) {\n      c.rotate(-90);\n      c.translate(-getHeight(), 0);\n      onSizeChanged(getWidth(), getHeight(), 0, 0);\n      super.onDraw(c);\n    }\n    ```", "```kt\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n      if (!isEnabled()) {\n        return false;\n      }\n      switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN:\n        case MotionEvent.ACTION_MOVE:\n        case MotionEvent.ACTION_UP:\n          setProgress(getMax() - (int) (getMax() * event.getY() / getHeight()));\n          onSizeChanged(getWidth(), getHeight(), 0, 0);\n          break;\n        case MotionEvent.ACTION_CANCEL:\n          break;\n      }\n      return true;\n    }\n    ```", "```kt\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n    <dimen name=\"bar_height\">400dp</dimen>\n    <dimen name=\"text_title\">40sp</dimen>\n    ```", "```kt\n    <LinearLayout \n      android:orientation=\"vertical\"\n      android:layout_width=\"0dp\"\n      android:layout_weight=\"1\"\n      android:layout_height=\"wrap_content\">\n    </LinearLayout>\n    ```", "```kt\n    <TextView\n      android:id=\"@+id/degrees\"\n      android:text=\"0\"\n      android:gravity=\"center\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\" />\n\n    <me.palazzetti.widget.TemperatureBar\n      android:id=\"@+id/seekbar\"\n      android:max=\"40\"\n      android:layout_gravity=\"center\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"@dimen/bar_height\" />\n\n    <TextView\n      android:id=\"@+id/time\"\n      android:text=\"00\"\n      android:gravity=\"center\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\" />\n    ```", "```kt\n    public class DegreeListener implements SeekBar.OnSeekBarChangeListener {\n      private TextView mDegrees;\n      public DegreeListener(TextView degrees) {\n        mDegrees = degrees;\n      }\n    ```", "```kt\n      @Override\n      public void onProgressChanged(SeekBar seekBar, int progress, boolean b) {\n        mDegrees.setText(String.valueOf(progress));\n      }\n\n      @Override\n      public void onStartTrackingTouch(SeekBar seekBar) {}\n\n      @Override\n      public void onStopTrackingTouch(SeekBar seekBar) {}\n    }\n    ```", "```kt\n    public class TemperatureWidget {\n      private static final int BAR_NUMBER = 24;\n      public static TemperatureBar[] addTo(Context ctx, ViewGroup parent, boolean enabled) {\n        TemperatureBar[] bars = new TemperatureBar[BAR_NUMBER];\n        for (int i = 0; i < BAR_NUMBER; i++) {\n          View v = LayoutInflater.from(ctx).inflate(R.layout.temperature_bar, parent, false);\n          TextView time = (TextView) v.findViewById(R.id.time);\n          TextView degree = (TextView) v.findViewById(R.id.degrees);\n          TemperatureBar bar = (TemperatureBar) v.findViewById(R.id.seekbar);\n          time.setText(String.format(\"%02d\", i));\n          degree.setText(String.valueOf(0));\n          bar.setOnSeekBarChangeListener(new DegreeListener(degree));\n          bar.setProgress(0);\n          bar.setEnabled(enabled);\n          parent.addView(v, parent.getChildCount());\n          bars[i] = bar;\n        }\n        return bars;\n      }\n    }\n    ```", "```kt\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_overview);\n    mTemperature = (TextView) findViewById(R.id.temperature);\n    mStatus = (TextView) findViewById(R.id.boiler_status);\n    ViewGroup container = (ViewGroup) findViewById(R.id.view_container);\n    mBars = TemperatureWidget.addTo(this, container, false);\n\n    ```", "```kt\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n      int id = item.getItemId();\n      if (id == R.id.action_settings) {\n        Intent intent = new Intent(this, Settings.class);\n        startActivity(intent);\n        return true;\n      }\n      return super.onOptionsItemSelected(item);\n    }\n    ```", "```kt\n    <LinearLayout \n\n      android:orientation=\"vertical\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n      android:paddingRight=\"@dimen/activity_horizontal_margin\"\n      android:paddingTop=\"@dimen/activity_vertical_margin\"\n      android:paddingBottom=\"@dimen/activity_vertical_margin\"\n      tools:context=\"me.palazzetti.chronotherm.Settings\">\n    </LinearLayout>\n\n    ```", "```kt\n    <LinearLayout\n      android:id=\"@+id/edit_container\"\n      android:orientation=\"horizontal\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n    </LinearLayout>\n\n    <Button\n      android:text=\"Save settings\"\n      android:layout_marginTop=\"50dp\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\" />\n    ```", "```kt\n    public class Settings extends ActionBarActivity {\n      private TemperatureBar[] mBars;\n      // ... \n    ```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.activity_settings);\n      ViewGroup container = (ViewGroup)   findViewById(R.id.edit_container);\n      mBars = TemperatureWidget.addTo(this, container, true);\n    }\n    ```", "```kt\n    private void readPreferences() {\n      SharedPreferences sharedPref = getSharedPreferences(\"__CHRONOTHERM__\", Context.MODE_PRIVATE);\n      for (int i = 0; i < mBars.length; i++) {\n        int value = sharedPref.getInt(String.valueOf(i), 0);\n        mBars[i].setProgress(value);\n      }\n    }\n    ```", "```kt\n    protected void onResume() {\n      super.onResume();\n      readPreferences();\n      mAdkManager.open();\n    }\n    ```", "```kt\n    public void savePreferences(View v) {\n      SharedPreferences sharedPref = getSharedPreferences(\"chronotherm\", Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor = sharedPref.edit();\n      for (int i = 0; i < mBars.length; i ++) {\n        editor.putInt(String.valueOf(i), mBars[i].getProgress());\n      }\n      editor.apply();\n      this.finish();\n    }\n    ```", "```kt\n    <Button\n      android:onClick=\"savePreferences\"\n      android:text=\"Save settings\"\n      android:layout_marginTop=\"50dp\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\" />\n    ```", "```kt\n    public interface OnDataChangeListener {\n      void onTemperatureChanged(float temperature);\n      void onBoilerChanged(boolean status);\n    }\n    ```", "```kt\n    public class Overview extends ActionBarActivity implements OnDataChangeListener {\n    ```", "```kt\n    @Override\n    public void onTemperatureChanged(float temperature) {\n      mTemperature.setText(String.format(\"%.1fÂ°\", temperature));\n    }\n\n    @Override\n    public void onBoilerChanged(boolean status) {\n      if (status) {\n        mStatus.setTextColor(getResources().getColor(R.color.pistachio));\n      }\n      else {\n        mStatus.setTextColor(getResources().getColor(R.color.mine_shaft));\n      }\n    }\n    ```", "```kt\n    private final static int TEMPERATURE_POLLING = 1000;\n    private final static int TEMPERATURE_UPDATED = 0;\n    private final static int BOILER_UPDATED = 1;\n    private AdkManager mAdkManager;\n    private Context mContext;\n    private OnDataChangeListener mCaller;\n    private ScheduledExecutorService mSchedulerSensor;\n    private Handler mMainLoop;\n    boolean mBoilerStatus = false;\n    ```", "```kt\n    public DataReader(AdkManager adkManager, Context ctx, OnDataChangeListener caller) {\n      this.mAdkManager = adkManager;\n      this.mContext = ctx;\n      this.mCaller = caller;\n      mMainLoop = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(Message message) {\n          switch (message.what) {\n            case TEMPERATURE_UPDATED:\n              mCaller.onTemperatureChanged((float) message.obj);\n              break;\n            case BOILER_UPDATED:\n              mCaller.onBoilerChanged((boolean) message.obj);\n              break;\n          }\n        }\n      };\n    }\n    ```", "```kt\n    private class SensorThread implements Runnable {\n      @Override\n      public void run() {\n        Message message;\n        // Reads from ADK and check boiler status\n        AdkMessage response = mAdkManager.read();\n        float temperature = response.getFloat();\n        boolean status = isBelowSetpoint(temperature);\n        // Updates temperature back to the main thread\n        message = mMainLoop.obtainMessage(TEMPERATURE_UPDATED, temperature);\n        message.sendToTarget();\n        // Turns on/off the boiler and updates the status\n        if (mBoilerStatus != status) {\n          int adkCommand = status ? 1 : 0;\n          mAdkManager.write(adkCommand);\n          message = mMainLoop.obtainMessage(BOILER_UPDATED, status);\n          message.sendToTarget();\n          mBoilerStatus = status;\n        }\n      }\n      private boolean isBelowSetpoint(float temperature) {\n        SharedPreferences sharedPref = mContext.getSharedPreferences(\"__CHRONOTHERM__\", Context.MODE_PRIVATE);\n        int currentHour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);\n        return temperature < sharedPref.getInt(String.valueOf(currentHour), 0);\n      }\n    }\n    ```", "```kt\n    public void start() {\n      // Start thread that listens to ADK\n      SensorThread sensor = new SensorThread();\n      mSchedulerSensor = Executors.newSingleThreadScheduledExecutor();\n      mSchedulerSensor.scheduleAtFixedRate(sensor, 0, TEMPERATURE_POLLING, TimeUnit.MILLISECONDS);\n    }\n    ```", "```kt\n    public void stop() {\n      mSchedulerSensor.shutdown();\n    }\n    ```", "```kt\n    private AdkManager mAdkManager;\n    private DataReader mReader;\n\n    ```", "```kt\n      mAdkManager = new AdkManager(this);\n      mReader = new DataReader(mAdkManager, this, this);\n    }\n    ```", "```kt\n    @Override\n    protected void onPause() {\n      super.onPause();\n      mReader.stop();\n    }\n\n    @Override\n    protected void onResume() {\n      super.onResume();\n      readPreferences();\n      mAdkManager.open();\n      mReader.start();\n    }\n    ```", "```kt\ndefaultConfig {\n  applicationId \"me.palazzetti.chronotherm\"\n  minSdkVersion 19\n  targetSdkVersion 21\n  versionCode 1\n  versionName \"0.1.0\"\n}\n```"]