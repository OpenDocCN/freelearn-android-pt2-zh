["```kt\n    >sudo apt-get update\n\n    ```", "```kt\n    >sudo apt-get install openjdk-6-jdk\n\n    ```", "```kt\n    >sudo apt-get install ant\n\n    ```", "```kt\n    >wget http://dl.google.com/android/android-sdk_r22.2.1-linux.tgz\n\n    ```", "```kt\n    >tar -xvf android-sdk_r22.2.1-linux.tgz\n\n    ```", "```kt\n    >wget http://dl.google.com/android/ndk/android-ndk-r9b-linux-x86_64.tar.bz2\n\n    ```", "```kt\n    >tar -xvf android-ndk-r9b-linux-x86_64.tar.bz2\n\n    ```", "```kt\n    >NDK_ROOT=/path/to/ndk\n\n    ```", "```kt\n    >sudo apt-get install ia32-libs\n\n    ```", "```kt\n JAVA_HOME=$(readlink -f /usr/bin/javac | sed \"s:bin/javac::\")\n\n```", "```kt\npackage com.packtpub.ndkcookbook.app1;\nimport android.app.Activity;\npublic class App1Activity extends Activity\n{\n};\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"app_name\">App1</string>\n</resources>\n```", "```kt\n    target=android-15\n    sdk.dir=d:/android-sdk-windows\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest \n      package=\"com.packtpub.ndkcookbook.app1\"\n      android:versionCode=\"1\"\n      android:versionName=\"1.0.0\">\n      <supports-screens\n         android:smallScreens=\"false\"\n         android:normalScreens=\"true\"\n         android:largeScreens=\"true\"\n         android:xlargeScreens=\"true\"\n         android:anyDensity=\"true\" />\n      <uses-sdk android:minSdkVersion=\"8\" />\n      <uses-sdk android:targetSdkVersion=\"18\" />\n    ```", "```kt\n      <uses-feature android:glEsVersion=\"0x00020000\"/>\n      <application android:label=\"@string/app_name\"\n                   android:icon=\"@drawable/icon\"\n                   android:installLocation=\"preferExternal\"\n                   android:largeHeap=\"true\"\n                   android:debuggable=\"false\">\n      <activity android:name=\"com.packtpub.ndkcookbook.app1.App1Activity\"\n    android:launchMode=\"singleTask\"\n    ```", "```kt\n                      android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n                      android:screenOrientation=\"landscape\"\n                      android:configChanges=\"orientation|keyboardHidden\"\n                      android:label=\"@string/app_name\">\n        <intent-filter>\n          <action android:name=\"android.intent.action.MAIN\" />\n          <category android:name=\"android.intent.category.LAUNCHER\" />\n         </intent-filter>\n       </activity>\n     </application>\n    </manifest>\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <project name=\"App1\" default=\"help\">\n        <property file=\"ant.properties\" />\n        <loadproperties srcFile=\"project.properties\" />\n        <import file=\"${sdk.dir}/tools/ant/build.xml\" />\n    </project>\n    ```", "```kt\n    >ant debug\n\n    ```", "```kt\n    BUILD SUCCESSFUL\n    Total time: 12 seconds\n\n    ```", "```kt\n    >adb install App1-debug.apk\n\n    ```", "```kt\n    * daemon not running. starting it now on port 5037 *\n    * daemon started successfully *\n    1256 KB/s (8795 bytes in 0.006s)\n     pkg: /data/local/tmp/App1-debug.apk\n    Success\n\n    ```", "```kt\n>adb install -r App1-debug.apk\n\n```", "```kt\n>adb uninstall <package-name>\n\n```", "```kt\n    #include <stdlib.h>\n    #include <jni.h>\n    #include <android/log.h>\n    #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, \"App2\", __VA_ARGS__))\n\n    extern \"C\"\n    {\n      JNIEXPORT void JNICALL\n    Java_com_packtpub_ndkcookbook_app2_App2Activity_onCreateNative( JNIEnv* env, jobject obj )\n        {\n          LOGI( \"Hello World!\" );\n        }\n    }\n    ```", "```kt\n    package com.packtpub.ndkcookbook.app2;\n\n    import android.app.Activity;\n    import android.os.Bundle;\n\n    public class App2Activity extends Activity\n    {\n        static\n        {\n    ```", "```kt\n          System.loadLibrary( \"App2\" );\n        }\n        @Override protected void onCreate( Bundle icicle )\n        {\n          super.onCreate( icicle );\n          onCreateNative();\n        }\n        public static native void onCreateNative();\n    };\n    ```", "```kt\n    TARGET_PLATFORM := android-7\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_ARM_MODE := arm\n    LOCAL_MODULE     := App2\n    LOCAL_SRC_FILES += Wrappers.cpp\n    LOCAL_ARM_MODE := arm\n    COMMON_CFLAGS := -Werror -DANDROID -DDISABLE_IMPORTGL \\\n    -isystem $(SYSROOT)/usr/include/\n    ifeq ($(TARGET_ARCH),x86)\n    \tLOCAL_CFLAGS   := $(COMMON_CFLAGS)\n      else\n    \tLOCAL_CFLAGS   := -mfpu=vfp -mfloat-abi=softfp \\\n      -fno-short-enums $(COMMON_CFLAGS)\n    endif\n    LOCAL_LDLIBS     := -llog -lGLESv2 -Wl,-s\n    LOCAL_CPPFLAGS += -std=gnu++0x\n    include $(BUILD_SHARED_LIBRARY)\n    ```", "```kt\n    APP_OPTIM := release\n    APP_PLATFORM := android-7\n    APP_STL := gnustl_static\n    APP_CPPFLAGS += -frtti \n    APP_CPPFLAGS += -fexceptions\n    APP_CPPFLAGS += -DANDROID\n    APP_ABI := armeabi-v7a\n    APP_MODULES := App2\n    NDK_TOOLCHAIN_VERSION := clang\n    ```", "```kt\n    >ndk-build\n\n    ```", "```kt\n    Compile++ arm: App2 <= Wrappers.cpp\n    SharedLibrary: libApp2.so\n    Install      : libApp2.so => libs/armeabi-v7a/libApp2.so\n\n    ```", "```kt\n    >ant debug\n\n    ```", "```kt\n>adb logcat -v time > 1.txt\n\n```", "```kt\n05-22 13:00:13.861 I/App2    ( 2310): Hello World!\n\n```", "```kt\n>adb shell cat /proc/cpuinfo\n\n```", "```kt\n    APP_ABI := armeabi-v7a\n    APP_ABI := x86\n    APP_ABI := mips\n    ```", "```kt\n    APP_ABI := armeabi armeabi-v7a x86 mips\n    ```", "```kt\n    static const char g_vShaderStr[] =\n       \"#version 100\\n\"\n       \"precision highp float;\\n\"\n       \"attribute vec3 vPosition;\\n\"\n       \"attribute vec3 vCoords;\\n\"\n       \"varying vec2 Coords;\\n\"\n       \"void main()\\n\"\n       \"{\\n\"\n       \"   Coords = vCoords.xy;\\n\"\n       \"   gl_Position = vec4( vPosition, 1.0 );\\n\"\n       \"}\\n\";\n    ```", "```kt\n    static const char g_fShaderStr[] =\n       \"#version 100\\n\"\n       \"precision highp float;\\n\"\n       \"varying vec2 Coords;\\n\"\n       \"uniform sampler2D Texture0;\\n\"\n       \"void main()\\n\"\n       \"{\\n\"\n       \"   gl_FragColor = texture2D( Texture0, Coords );\\n\"\n       \"}\\n\";\n    ```", "```kt\n    static GLuint LoadShader( GLenum type, const char* shaderSrc )\n    {\n       GLuint shader = glCreateShader( type );\n       glShaderSource ( shader, 1, &shaderSrc, NULL );\n       glCompileShader ( shader );\n       GLint compiled;\n       glGetShaderiv ( shader, GL_COMPILE_STATUS, &compiled );\n       GLsizei MaxLength = 0;\n       glGetShaderiv( shader, GL_INFO_LOG_LENGTH, &MaxLength );\n       char* InfoLog = new char[MaxLength];\n       glGetShaderInfoLog( shader, MaxLength, &MaxLength, InfoLog );\n       LOGI( \"Shader info log: %s\\n\", InfoLog );\n       return shader;\n    }\n    ```", "```kt\n  const GLfloat vVertices[] = { -1.0f, -1.0f, 0.0f,\n                                -1.0f,  1.0f, 0.0f,\n                                 1.0f, -1.0f, 0.0f,\n                                -1.0f,  1.0f, 0.0f,\n                                1.0f, -1.0f, 0.0f,\n                                1.0f,  1.0f, 0.0f\n                              };\n\n  const GLfloat vCoords[]   = {  0.0f,  0.0f, 0.0f,\n                                 0.0f,  1.0f, 0.0f,\n                                 1.0f,  0.0f, 0.0f,\n                                 0.0f,  1.0f, 0.0f,\n                                 1.0f,  0.0f, 0.0f,\n                                 1.0f,  1.0f, 0.0f\n                              };\n  glUseProgram ( g_ProgramObject );\n```", "```kt\n  GLint Loc1 = glGetAttribLocation(g_ProgramObject,\"vPosition\");\n  GLint Loc2 = glGetAttribLocation(g_ProgramObject,\"vCoords\");\n\n  glBindBuffer( GL_ARRAY_BUFFER, 0 );\n  glBindBuffer( GL_ELEMENT_ARRAY_BUFFER, 0 );\n  glVertexAttribPointer(\n    Loc1, 3, GL_FLOAT, GL_FALSE, 0, vVertices );\n  glVertexAttribPointer(\n    Loc2, 3, GL_FLOAT, GL_FALSE, 0, vCoords   );\n  glEnableVertexAttribArray( Loc1 );\n  glEnableVertexAttribArray( Loc2 );\n\n  glDisable( GL_DEPTH_TEST );\n  glDrawArrays( GL_TRIANGLES, 0, 6 );\n  glUseProgram( 0 );\n  glDisableVertexAttribArray( Loc1 );\n  glDisableVertexAttribArray( Loc2 );\n```", "```kt\n  JNIEXPORT void JNICALLJava_com_packtpub_ndkcookbook_app3_App3Activity_SetSurfaceSize(JNIEnv* env, jclass clazz, int Width, int Height )\n  {\n    LOGI( \"SurfaceSize: %i x %i\", Width, Height );\n    g_Width  = Width;\n    g_Height = Height;\n    GLDebug_LoadStaticProgramObject();\n    glGenTextures( 1, &g_Texture );\n    glBindTexture( GL_TEXTURE_2D, g_Texture );\n```", "```kt\n    glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER, GL_NEAREST );\n    glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA,ImageWidth, ImageHeight, 0, GL_RGBA,GL_UNSIGNED_BYTE, g_FrameBuffer );\n  }\n```", "```kt\n  JNIEXPORT void JNICALL Java_com_packtpub_ndkcookbook_app3_App3Activity_DrawFrame( JNIEnv* env, jobject obj )\n  {\n```", "```kt\n    OnDrawFrame();\n\n    glActiveTexture( GL_TEXTURE0 );\n    glBindTexture( GL_TEXTURE_2D, g_Texture );\n    glTexSubImage2D( GL_TEXTURE_2D, 0, 0, 0,ImageWidth, ImageHeight, GL_RGBA,GL_UNSIGNED_BYTE, g_FrameBuffer );\n    GLDebug_RenderTriangle();\n  }\n```", "```kt\n    #include <windows.h>\n\n    LRESULT CALLBACK MyFunc(HWND h, UINT msg, WPARAM w, LPARAM p)\n    {\n      if(msg == WM_DESTROY) { PostQuitMessage(0); }\n      return DefWindowProc(h, msg, w, p);\n    }\n\n    char WinName[] = \"MyWin\";\n    ```", "```kt\n    int main()\n    {\n      OnStart();\n\n      const char WinName[] = \"MyWin\";\n\n      WNDCLASS wcl;\n      memset( &wcl, 0, sizeof( WNDCLASS ) );\n      wcl.lpszClassName = WinName;\n      wcl.lpfnWndProc = MyFunc;\n      wcl.hCursor = LoadCursor( NULL, IDC_ARROW );\n\n      if ( !RegisterClass( &wcl ) ) { return 0; }\n\n      RECT Rect;\n\n      Rect.left = 0;\n      Rect.top = 0;\n    ```", "```kt\n      Rect.right  = ImageWidth;\n      Rect.bottom = ImageHeight;\n\n      DWORD dwStyle = WS_OVERLAPPEDWINDOW;\n\n      AdjustWindowRect( &Rect, dwStyle, false );\n\n      int WinWidth  = Rect.right  - Rect.left;\n      int WinHeight = Rect.bottom - Rect.top;\n\n      HWND hWnd = CreateWindowA( WinName, \"App3\", dwStyle,100, 100, WinWidth, WinHeight,0, NULL, NULL, NULL );\n      ShowWindow( hWnd, SW_SHOW );\n\n      HDC dc = GetDC( hWnd );\n    ```", "```kt\n      hMemDC = CreateCompatibleDC( dc );\n      hTmpBmp = CreateCompatibleBitmap( dc,ImageWidth, ImageHeight );\n      memset( &BitmapInfo.bmiHeader, 0,sizeof( BITMAPINFOHEADER ) );\n      BitmapInfo.bmiHeader.biSize = sizeof( BITMAPINFOHEADER );\n      BitmapInfo.bmiHeader.biWidth = ImageWidth;\n      BitmapInfo.bmiHeader.biHeight = ImageHeight;\n      BitmapInfo.bmiHeader.biPlanes = 1;\n      BitmapInfo.bmiHeader.biBitCount = 32;\n      BitmapInfo.bmiHeader.biSizeImage = ImageWidth*ImageHeight*4;\n      UpdateWindow( hWnd );\n    ```", "```kt\n      MSG msg;\n      while ( GetMessage( &msg, NULL, 0, 0 ) )\n      {\n        TranslateMessage( &msg );\n        DispatchMessage( &msg );\n      }\n      …\n    }\n    ```", "```kt\n    >gcc -o main.exe main.c -lgdi32\n    ```", "```kt\n#include <windows.h>\n\nHDC hMemDC;\nHBITMAP hTmpBmp;\nBITMAPINFO BmpInfo;\n```", "```kt\nunsigned char* g_FrameBuffer;\n```", "```kt\nvoid DrawFrame()\n{\n  int x, y;\n  for (y = 0 ; y < ImageHeight ; y++)\n  {\n    for (x = 0 ; x < ImageWidth ; x++)\n    {\n      int Ofs = y * ImageWidth + x;\n      int c = (x ^ y) & 0xFF;\n      int RGB = (c<<16) | (c<<8) | (c<<0) | 0xFF000000;\n      ( ( unsigned int* )g_FrameBuffer )[ Ofs ] =\tRGB;\n    }\n  }\n}\n```", "```kt\nLRESULT CALLBACK MyFunc(HWND h, UINT msg, WPARAM w, LPARAM p)\n{\n  PAINTSTRUCT ps;\n  switch(msg)\n  {\n  case WM_DESTROY:\n    PostQuitMessage(0);\nbreak;\n  case WM_KEYUP:\n    OnKeyUp(w);\nbreak;\n  case WM_KEYDOWN:\n    OnKeyDown(w);\nbreak;\n  case WM_LBUTTONDOWN:\n    SetCapture(h);\n    OnMouseDown(x, y);\nbreak;\n  case WM_MOUSEMOVE:\n    OnMouseMove(x, y);\nbreak;\n  case WM_LBUTTONUP:\n    OnMouseUp(x, y);\n    ReleaseCapture();\nbreak;\n  case WM_PAINT:\n    dc = BeginPaint(h, &ps);\n    DrawFrame();         \n```", "```kt\n    SetDIBits(hMemDC, hTmpBmp, 0, Height,g_FrameBuffer, &BmpInfo, DIB_RGB_COLORS);\n    SelectObject(hMemDC, hTmpBmp);\n```", "```kt\n    BitBlt(dc, 0, 0, Width, Height, hMemDC, 0, 0, SRCCOPY);\n    EndPaint(h, &ps);\nbreak;\n  }\n  return DefWindowProc(h, msg, w, p);\n}\n```", "```kt\n>make all\n\n```", "```kt\n#if defined(_WIN32)\n// windows-specific code\n#elif defined(ANDROID)\n// android-specific code\n#endif\n```", "```kt\n#if defined(_WIN32)\n#  define APP_ENTRY_POINT()  int main()\n#elif defined(ANDROID)\n#  define APP_ENTRY_POINT() int App_Init()\n#endif\n```", "```kt\nCC = gcc\nall:\n  $(CC) -o main.exe main.cpp -lgdi32 -lstdc++\n```", "```kt\n>ndk-build -B\n>ant release\n\n```", "```kt\n-release-nosign:\n[echo] No key.store and key.alias properties found in build.properties.\n[echo] Please sign App2\\bin\\App2-release-unsigned.apk manually\n[echo] and run zipalign from the Android SDK tools.\n\n```", "```kt\n>keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000\n\n```", "```kt\nEnter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n [Unknown]:  Sergey Kosarevsky\nWhat is the name of your organizational unit?\n [Unknown]:  SD\nWhat is the name of your organization?\n [Unknown]:  Linderdaum\nWhat is the name of your City or Locality?\n [Unknown]:  St.Petersburg\nWhat is the name of your State or Province?\n [Unknown]:  Kolpino\nWhat is the two-letter country code for this unit?\n [Unknown]:  RU\nIs CN=Sergey Kosarevsky, OU=SD, O=Linderdaum, L=St.Petersburg, ST=Kolpino, C=RU correct?\n [no]:  yes\n\nGenerating 2048 bit RSA key pair and self-signed certificate (SHA1withRSA) with a validity of 10000 days\n for: CN=Sergey Kosarevsky, OU=SD, O=Linderdaum, L=St.Petersburg, ST=Kolpino, C=RU\nEnter key password for <alias_name>\n (RETURN if same as keystore password):\n[Storing my-release-key.keystore]\n\n```", "```kt\n>jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore bin\\App2-release-unsigned.apk alias_name\n\n```", "```kt\n>jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore -storepass 123456 –keypass 123456 bin\\App2-release-unsigned.apk alias_name\n\n```", "```kt\n>zipalign -v 4 bin\\App2-release-unsigned.apk App2-release.apk\n\n```"]