["```kt\n    public interface Subject { \n\n        void register(Observer o); \n        void unregister(Observer o); \n        boolean getReady(); \n        void setReady(boolean b); \n    } \n\n    ```", "```kt\n    public interface Observer { \n\n        String update(); \n    } \n\n    ```", "```kt\n    public class Sandwich implements Subject { \n        public boolean ready; \n\n        // Maintain a list of observers \n        private ArrayList<Observer> orders = new ArrayList<Observer>(); \n\n        @Override \n        // Add a new observer \n        public void register(Observer o) { \n            orders.add(o); \n        } \n\n        @Override \n        // Remove observer when order complete \n        public void unregister(Observer o) { \n            orders.remove(o); \n        } \n\n        @Override \n        // Update all observers \n        public void notifyObserver() { \n            for (Observer order : orders) { \n                order.update(); \n            } \n        } \n\n        @Override \n        public boolean getReady() { \n            return ready; \n        } \n\n        public void setReady(boolean ready) { \n            this.ready = ready; \n        } \n    } \n\n    ```", "```kt\n    public class Order implements Observer { \n        private Subject subject = null; \n\n        public Order(Subject subject) { \n            this.subject = subject; \n        } \n\n        @Override \n        public String update() { \n\n            if (subject.getReady()) { \n\n                // Stop receiving notifications \n                subject.unregister(this); \n\n                return \"Your order is ready to collect\"; \n\n            } else { \n                return \"Your sandwich will be ready very soon\"; \n            } \n        } \n    } \n\n    ```", "```kt\n    <LinearLayout \n        ... \n        android:layout_alignParentBottom=\"true\" \n        android:layout_centerHorizontal=\"true\" \n        android:gravity=\"end\" \n        android:orientation=\"horizontal\"> \n\n        <Button \n            android:id=\"@+id/action_save\" \n            style=\"?attr/borderlessButtonStyle\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:minWidth=\"64dp\" \n            android:onClick=\"onOrderClicked\" \n            android:padding=\"@dimen/action_padding\" \n            android:text=\"ORDER\" \n            android:textColor=\"@color/colorAccent\" \n            android:textSize=\"@dimen/action_textSize\" /> \n\n        <Button \n            android:id=\"@+id/action_update\" \n            ... \n            android:onClick=\"onUpdateClicked\" \n            android:padding=\"@dimen/action_padding\" \n            android:text=\"UPDATE\" \n            ... \n            /> \n\n    </LinearLayout> \n\n    ```", "```kt\n    Sandwich sandwich = new Sandwich(); \n    Observer order = new Order(sandwich); \n\n    int notificationId = 1; \n\n    ```", "```kt\n    public void onOrderClicked(View view) { \n\n        // Subscribe to notifications \n        sandwich.register(order); \n        sendNotification(order.update()); \n    } \n\n    ```", "```kt\n    public void onUpdateClicked(View view) { \n\n        // Mimic message from server \n        sandwich.setReady(true); \n        sendNotification(order.update()); \n    } \n\n    ```", "```kt\nprivate void sendNotification(String message) { \n\n    NotificationCompat.Builder builder = \n            (NotificationCompat.Builder) \n            new NotificationCompat.Builder(this) \n                    .setSmallIcon(R.drawable.ic_stat_bun) \n                    .setContentTitle(\"Sandwich Factory\") \n                    .setContentText(message); \n\n    NotificationManager manager = (NotificationManager) \n            getSystemService(NOTIFICATION_SERVICE); \n    manager.notify(notificationId, builder.build()); \n\n    // Update notifications if needed \n    notificationId += 1; \n} \n\n```", "```kt\n    import java.util.Observable; \n\n    public class Sandwich extends Observable { \n        private boolean ready; \n\n        public Sandwich(boolean ready) { \n            this.ready = ready; \n        } \n\n        public boolean getReady() { \n            return ready; \n        } \n\n        public void setReady(boolean ready) { \n            this.ready = ready; \n            setChanged(); \n            notifyObservers(); \n        } \n    } \n\n    ```", "```kt\n    import java.util.Observable; \n    import java.util.Observer; \n\n    public class Order implements Observer { \n        private String update; \n\n        public String getUpdate() { \n            return update; \n        } \n\n        @Override \n        public void update(Observable observable, Object o) { \n            Sandwich subject = (Sandwich) observable; \n\n            if (subject.getReady()) { \n                subject.deleteObserver(this); \n                update = \"Your order is ready to collect\"; \n\n            } else { \n                update = \"Your sandwich will be ready very soon\"; \n            } \n        } \n    } \n\n    ```", "```kt\n    public class MainActivity extends AppCompatActivity { \n        Sandwich sandwich = new Sandwich(false); \n        Order order = new Order(); \n        private int id; \n\n        @Override \n        protected void onCreate(Bundle savedInstanceState) \n            { ... } \n\n        public void onOrderClicked(View view) { \n            sandwich.addObserver(order); \n            sandwich.setReady(true); \n            sendNotification(order.getUpdate()); \n        } \n\n        public void onUpdateClicked(View view) { \n            sandwich.setReady(true); \n            sendNotification(order.getUpdate()); \n        } \n\n        private void sendNotification(String message) \n            { ... } \n    } \n\n    ```", "```kt\n    public class UserProfile extends AppCompatActivity { \n\n        @Override \n        protected void onCreate(Bundle savedInstanceState) { \n            super.onCreate(savedInstanceState); \n            setContentView(R.layout.activity_profile); \n        } \n    } \n\n    ```", "```kt\n    Intent profileIntent = new Intent(this, UserProfile.class); \n\n    TaskStackBuilder stackBuilder = TaskStackBuilder.create(this); \n    stackBuilder.addParentStack(UserProfile.class); \n    stackBuilder.addNextIntent(profileIntent); \n\n    PendingIntent pendingIntent = stackBuilder.getPendingIntent(0, \n            PendingIntent.FLAG_UPDATE_CURRENT); \n\n    ```", "```kt\n    .setAutoCancel(true) \n    .setTicker(\"the best sandwiches in town\") \n    .setLargeIcon(BitmapFactory.decodeResource(getResources(), \n            R.drawable.ic_sandwich)) \n    .setContentIntent(pendingIntent); \n\n    ```", "```kt\n    <activity android:name=\"com.example.kyle.ordertracker.UserProfile\"> \n\n        <intent-filter> \n            <action android:name=\"android.intent.action.DEFAULT\" /> \n        </intent-filter> \n\n    </activity> \n\n    ```", "```kt\n    android:onClick=\"onTextClicked\" \n    android:onClick=\"onPictureClicked\" \n    android:onClick=\"onInboxClicked\" \n\n    ```", "```kt\n    private void sendNotification(NotificationCompat.Style style) { \n\n        ... \n\n        NotificationCompat.Builder builder = (NotificationCompat.Builder) new NotificationCompat.Builder(this) \n\n                .setStyle(style) \n\n                ... \n\n        manager.notify(id, builder.build()); \n    } \n\n    ```", "```kt\n    public void onTextClicked(View view) { \n        NotificationCompat.BigTextStyle bigTextStyle = new NotificationCompat.BigTextStyle(); \n\n        bigTextStyle.setBigContentTitle(\"Congratulations!\"); \n        bigTextStyle.setSummaryText(\"Your tenth sandwich is on us\"); \n        bigTextStyle.bigText(getString(R.string.long_text)); \n\n        id = 1; \n        sendNotification(bigTextStyle); \n    } \n\n    ```", "```kt\n    public void onPictureClicked(View view) { \n        NotificationCompat.BigPictureStyle bigPictureStyle = new NotificationCompat.BigPictureStyle(); \n\n        bigPictureStyle.setBigContentTitle(\"Congratulations!\"); \n        bigPictureStyle.setSummaryText(\"Your tenth sandwich is on us\"); \n        bigPictureStyle.bigPicture(BitmapFactory.decodeResource(getResources(), R.drawable.big_picture)); \n\n        id = 2; \n        sendNotification(bigPictureStyle); \n    } \n\n    ```", "```kt\npublic void onInboxClicked(View view) { \n    NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle(); \n\n    inboxStyle.setBigContentTitle(\"This weeks most popular sandwiches\"); \n    inboxStyle.setSummaryText(\"As voted by you\"); \n\n    String[] list = { \n            \"Cheese and pickle\", \n            ... \n    }; \n\n    for (String l : list) { \n        inboxStyle.addLine(l); \n    } \n\n    id = 3; \n    sendNotification(inboxStyle); \n} \n\n```", "```kt\nRemoteViews expandedView = new RemoteViews(this.getPackageName(), R.layout.notification); \n\n```", "```kt\nbuilder.setContent(expandedView); \n\n```", "```kt\nbuilder.setVisibility(NotificationCompat.VISIBILITY_PUBLIC) \n\n```", "```kt\nbuilder.setPriority(NotificationCompat.PRIORITY_MAX) \n\n```", "```kt\nbuilder.setVibrate(new long[]{500, 500, 500}) \n\n```", "```kt\n<manifest  \n    package=\"com.example.yourapp\"> \n\n    <uses-permission  \n        android:name=\"android.permission.VIBRATE\" /> \n\n    <application \n\n        ... \n\n    </application> \n\n</manifest> \n\n```", "```kt\n    android:onClick=\"onReminderClicked\" \n    android:onClick=\"onCancelClicked\" \n\n    ```", "```kt\n    public class Reminder extends Service \n\n    ```", "```kt\n    @Override \n    public IBinder onBind(Intent intent) { \n        return null; \n    } \n\n    ```", "```kt\n    @Override \n    public void onCreate() { \n        Log.d(DEBUG_TAG, \"Service created\"); \n    } \n\n    @Override \n    public void onDestroy() { \n        Log.d(DEBUG_TAG, \"Service destroyed\"); \n    } \n\n    ```", "```kt\n    private static final String DEBUG_TAG = \"tag\"; \n    NotificationCompat.Builder builder; \n    @Override \n    public int onStartCommand(Intent intent, int flags, int startId) { \n        Log.d(DEBUG_TAG, \"Service StartCommand\"); \n\n        // Build notification \n        builder = new NotificationCompat.Builder(this) \n                .setSmallIcon(R.drawable.ic_bun) \n                .setContentTitle(\"Reminder\") \n                .setContentText(\"Your sandwich is ready to collect\"); \n\n        // Issue timed notification in separate thread \n        new Thread(new Runnable() { \n\n            @Override \n            public void run() { \n                Timer timer = new Timer(); \n                timer.schedule(new TimerTask() { \n\n                    @Override \n                    public void run() { \n                        NotificationManager manager = (NotificationManager) \n                                getSystemService(NOTIFICATION_SERVICE); \n                        manager.notify(0, builder.build()); \n                        cancel(); \n                    } \n\n                // Set ten minute delay \n                }, 1000 * 60 * 10); \n\n                // Destroy service after first use \n                stopSelf(); \n            } \n\n        }).start(); \n\n        return Service.START_STICKY; \n    } \n\n    ```", "```kt\n    <service \n        android:name=\".Reminder\" /> \n\n    ```", "```kt\n    public void onReminderClicked(View view) { \n        Intent intent = new Intent(MainActivity.this, Reminder.class); \n        startService(intent); \n    } \n\n    public void onCancelClicked(View view) { \n        Intent intent = new Intent(MainActivity.this, Reminder.class); \n        stopService(intent); \n    } \n\n    ```"]