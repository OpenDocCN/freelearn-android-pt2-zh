["```kt\n    public abstract class Sequence implements Cloneable { \n        protected long result; \n        private String id; \n\n        public long getResult() { \n            return result; \n        } \n\n        public String getId() { \n            return id; \n        } \n\n        public void setId(String id) { \n            this.id = id; \n        } \n\n        public Object clone() { \n            Object clone = null; \n\n            try { \n                clone = super.clone(); \n\n            } catch (CloneNotSupportedException e) { \n                e.printStackTrace(); \n            } \n\n            return clone; \n        } \n    } \n\n    ```", "```kt\n    // Calculates the 10,000th prime number \n    public class Prime extends Sequence { \n\n        public Prime() { \n            result = nthPrime(10000); \n        } \n\n        public static int nthPrime(int n) { \n            int i, count; \n\n            for (i = 2, count = 0; count < n; ++i) { \n                if (isPrime(i)) { \n                    ++count; \n                } \n            } \n\n            return i - 1; \n        } \n\n        // Test for prime number \n        private static boolean isPrime(int n) { \n\n            for (int i = 2; i < n; ++i) { \n                if (n % i == 0) { \n                    return false; \n                } \n            } \n\n            return true; \n        } \n    } \n\n    ```", "```kt\n    // Calculates the 100th Fibonacci number \n    public class Fibonacci extends Sequence { \n\n        public Fibonacci() { \n            result = nthFib(100); \n        } \n\n        private static long nthFib(int n) { \n            long f = 0; \n            long g = 1; \n\n            for (int i = 1; i <= n; i++) { \n                f = f + g; \n                g = f - g; \n            } \n\n            return f; \n        } \n    } \n\n    ```", "```kt\n    public class SequenceCache { \n       private static Hashtable<String, Sequence> sequenceHashtable = new Hashtable<String, Sequence>(); \n\n        public static Sequence getSequence(String sequenceId) { \n\n            Sequence cachedSequence = sequenceHashtable.get(sequenceId); \n            return (Sequence) cachedSequence.clone(); \n        } \n\n            public static void loadCache() { \n\n            Prime prime = new Prime(); \n            prime.setId(\"1\"); \n            sequenceHashtable.put(prime.getId(), prime); \n\n            Fibonacci fib = new Fibonacci(); \n            fib.setId(\"2\"); \n            sequenceHashtable.put(fib.getId(), fib); \n        } \n    } \n\n    ```", "```kt\n    // Load the cache once only \n    SequenceCache.loadCache(); \n\n    // Lengthy calculation and display of prime result \n    Sequence prime = (Sequence) SequenceCache.getSequence(\"1\"); \n    primeText.setText(new StringBuilder() \n            .append(getString(R.string.prime_text)) \n            .append(prime.getResult()) \n            .toString()); \n\n    // Lengthy calculation and display of Fibonacci result \n    SSequence fib = (Sequence) SequenceCache.getSequence(\"2\"); \n    fibText.setText(new StringBuilder() \n            .append(getString(R.string.fib_text)) \n            .append(fib.getResult()) \n            .toString()); \n\n    ```", "```kt\n// Create a clone of already constructed object \nSequence clone = (Fibonacci) new Fibonacci().clone(); \n\n// Modify the resultlong result = clone.getResult() / 2; \n\n// Display the result quickly \ncloneText.setText(new StringBuilder()        .append(getString(R.string.clone_text))        .append(result)        .toString());\n```", "```kt\n    public abstract class Bread { \n        String description; \n        int kcal; \n\n        public String getDescription() { \n            return description; \n        } \n\n        public int getKcal() { \n            return kcal; \n        } \n    } \n\n    ```", "```kt\n    public class Bagel extends Bread { \n\n        public Bagel() { \n            description = \"Bagel\"; \n            kcal = 250; \n        } \n    } \n\n    public class Bun extends Bread { \n\n        public Bun() { \n            description = \"Bun\"; \n            kcal = 150; \n        } \n    } \n\n    ```", "```kt\n    // All bread treatments extend from this \n    public abstract class BreadDecorator extends Bread { \n\n        public abstract String getDescription(); \n\n        public abstract int getKcal(); \n    } \n\n    ```", "```kt\n    public class Butter extends BreadDecorator { \n        private Bread bread; \n\n    public Butter(Bread bread) { \n            this.bread = bread; \n        } \n\n        @Override \n        public String getDescription() { \n            return bread.getDescription() + \" Butter\"; \n        } \n\n        @Override \n        public int getKcal() { \n            return bread.getKcal() + 50; \n        } \n    } \n\n    ```", "```kt\n    public class LowFatSpread extends BreadDecorator { \n\n            return bread.getDescription() + \" Low fat spread\"; \n\n            return bread.getKcal() + 25; \n    } \n\n    public class Toasted extends BreadDecorator { \n\n            return bread.getDescription() + \" Toasted\"; \n\n            return bread.getKcal() + 0; \n    } \n\n    public class Open extends BreadDecorator { \n\n            return bread.getDescription() + \" Open\"; \n\n            return bread.getKcal() / 2; \n    } \n\n    ```", "```kt\nBread bagel = new Bagel(); \n\nLowFatSpread spread = new LowFatSpread(bagel); \n\nToasted toast = new Toasted(spread); \n\nOpen open = new Open(toast); \n\nLog.d(DEBUG_TAG, open.getDescription() + \" \" + open.getKcal()); \n\n```", "```kt\nD/tag: Bagel Low fat spread 275\nD/tag: Bun Butter Toasted 200\nD/tag: Bagel Low fat spread Toasted Open 137\n\n```", "```kt\npublic class Lettuce extends Filling { \n\n    public Lettuce() { \n        description = \"Lettuce\"; \n        kcal = 1; \n    } \n} \n\n```", "```kt\npublic class DoublePortion extends FillingDecorator { \n    private Filling filling; \n\n    public DoublePortion(Filling filling) { \n        this.filling = filling; \n    } \n\n    @Override \n    public String getDescription() { \n        return filling.getDescription() + \" Double portion\"; \n    } \n\n    @Override \n    public int getKcal() { \n        // Double the calories \n        return filling.getKcal() * 2; \n    } \n} \n\n```", "```kt\n    public interface Ingredient { \n\n        public String description(); \n\n        public int kcal(); \n    } \n\n    ```", "```kt\n    public abstract class Bread implements Ingredient { \n\n        // Base class for all bread types \n    } \n\n    public abstract class Filling implements Ingredient { \n\n        // Base class for all possible fillings \n    } \n\n    ```", "```kt\n    public class Bagel extends Bread { \n\n        @Override \n        public String description() { \n            return \"Bagel\"; \n        } \n\n        @Override \n        public int kcal() { \n            return 250; \n        } \n    } \n\n    ```", "```kt\n    public class Sandwich { \n        private List<Ingredient> ingredients = new ArrayList<Ingredient>(); \n\n        // Add individual ingredients \n        public void addIngredient(Ingredient i) { \n            ingredients.add(i); \n        } \n\n        // Calculate total calories \n        public int getKcal() { \n            int kcal = 0; \n\n            for (Ingredient ingredient : ingredients) { \n                kcal += ingredient.kcal(); \n            } \n\n            return kcal; \n        } \n\n        // Return all ingredients when selection is complete \n        public String getSandwich() { \n            String sandwich = \"\"; \n\n            for (Ingredient ingredient : ingredients) { \n                sandwich += ingredient.description() + \"\\n\"; \n            } \n\n            return sandwich; \n        } \n    } \n\n    ```", "```kt\n    public class SandwichBuilder { \n\n        public Sandwich build(Sandwich sandwich, Ingredient ingredient) { \n            sandwich.addIngredient(ingredient); \n            return sandwich; \n        } \n    } \n\n    ```", "```kt\n public class Salt implements Ingredient { \n\n    @Override \n    public String description() { \n        return \"Salt\"; \n    } \n\n    @Override \n    public int kcal() { \n        return 0; \n    } \n} \n\n```", "```kt\n    <RadioGroup  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:orientation=\"vertical\"> \n\n        <RadioButton \n            android:id=\"@+id/radio_bagel\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:checked=\"false\" \n            android:paddingBottom=\"@dimen/padding\" \n            android:text=\"@string/bagel\" /> \n\n        <RadioButton \n            android:id=\"@+id/radio_bun\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:checked=\"true\" \n            android:paddingBottom=\"@dimen/padding\" \n            android:text=\"@string/bun\" /> \n\n    </RadioGroup> \n\n    ```", "```kt\n    <CheckBox \n        android:id=\"@+id/check_egg\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:checked=\"false\" \n        android:paddingBottom=\"@dimen/padding\" \n        android:text=\"@string/egg\" /> \n\n    <CheckBox \n        android:id=\"@+id/check_cress\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:checked=\"false\" \n        android:paddingBottom=\"@dimen/padding\" \n        android:text=\"@string/cress\" /> \n\n    ```", "```kt\n    <Switch \n        android:id=\"@+id/switch_salt\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:checked=\"false\" \n        android:paddingBottom=\"@dimen/padding\" \n        android:paddingTop=\"@dimen/padding\" \n        android:text=\"@string/salt\" /> \n\n    ```", "```kt\n    <TextView \n        android:id=\"@+id/action_ok\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:layout_alignParentEnd=\"true\" \n        android:layout_gravity=\"end\" \n        android:background=\"?attr/selectableItemBackground\" \n        android:clickable=\"true\" \n        android:gravity=\"center_horizontal\" \n        android:minWidth=\"@dimen/action_minWidth\" \n        android:onClick=\"onActionOkClicked\" \n        android:padding=\"@dimen/padding\" \n        android:text=\"@android:string/ok\" \n        android:textColor=\"@color/colorAccent\" /> \n\n    <TextView \n        android:id=\"@+id/action_cancel\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:layout_gravity=\"end\" \n        android:layout_toStartOf=\"@id/action_ok\" \n        android:background=\"?attr/selectableItemBackground\" \n        android:clickable=\"true\" \n        android:gravity=\"center_horizontal\" \n        android:minWidth=\"@dimen/action_minWidth\" \n        android:padding=\"@dimen/padding\" \n        android:text=\"@string/action_cancel_text\" \n        android:textColor=\"@color/colorAccent\" /> \n\n    ```", "```kt\n    public SandwichBuilder builder; \n    public Sandwich sandwich; \n\n    private  RadioButton bagel; \n    public CheckBox egg, cress; \n    public Switch salt; \n    public TextView order; \n\n    ```", "```kt\n    bagel = (RadioButton) findViewById(R.id.radio_bagel); \n    egg = (CheckBox) findViewById(R.id.check_egg); \n    cress = (CheckBox) findViewById(R.id.check_cress); \n    salt = (Switch) findViewById(R.id.switch_salt); \n    order = (TextView) findViewById(R.id.text_order); \n\n    ```", "```kt\n    public void onActionOkClicked(View view) { \n        builder = new SandwichBuilder(); \n        sandwich = new Sandwich(); \n\n        // Radio button group \n        if (bagel.isChecked()) { \n            sandwich = builder.build(sandwich, new Bagel()); \n        } else { \n            sandwich = builder.build(sandwich, new Bun()); \n        } \n\n        // Check boxes \n        if (egg.isChecked()) { \n            sandwich = builder.build(sandwich, new Egg()); \n        } \n\n        if (cress.isChecked()) { \n            sandwich = builder.build(sandwich, new Cress()); \n        } \n\n        // Switch \n        if (salt.isChecked()) { \n            sandwich = builder.build(sandwich, new Salt()); \n        } \n\n        // Display output \n        order.setText(new StringBuilder() \n                .append(sandwich.getSandwich()) \n                .append(\"\\n\") \n                .append(sandwich.getKcal()) \n                .append(\" kcal\") \n                .toString()); \n    } \n\n    ```", "```kt\n    public abstract class Bread implements Ingredient { \n\n        String decoration; \n        int decorationKcal; \n\n        public String getDecoration() { \n            return decoration; \n        } \n\n        public int getDecorationKcal() { \n            return decorationKcal; \n        } \n    } \n\n    ```", "```kt\n    public abstract class BreadDecorator extends Bread { \n\n        public abstract String getDecoration(); \n\n        public abstract int getDecorationKcal(); \n    } \n\n    ```", "```kt\n    public class Toasted extends BreadDecorator { \n        private Bread bread; \n\n        public Toasted(Bread bread) { \n\n            this.bread = bread; \n        } \n\n        @Override \n        public String getDecoration() { \n\n            return \"Toasted\"; \n        } \n\n        @Override \n        public int getDecorationKcal() { \n\n            return 0; \n        } \n\n        // Required but not used \n        @Override \n        public String description() { return null; } \n\n        @Override \n        public int kcal() { return 0; } \n    } \n\n    ```", "```kt\n    <Switch \n        android:id=\"@+id/switch_toasted\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:checked=\"false\" \n        android:paddingBottom=\"@dimen/padding\" \n        android:paddingTop=\"@dimen/padding\" \n        android:text=\"@string/toasted\" /> \n\n    ```", "```kt\n    public Switch toasted; \n    public Bread bread; \n\n    ```", "```kt\n    toasted = (Switch) findViewById(R.id.switch_toasted); \n\n    ```", "```kt\n    String toast; \n    int extraKcal = 0; \n\n    ```", "```kt\n    // Switch : Toasted \n    if (toasted.isChecked()) { \n        Toasted t = new Toasted(bread); \n        toast = t.getDecoration(); \n        extraKcal += t.getDecorationKcal(); \n    } else { \n        toast = \"\"; \n    } \n\n    ```", "```kt\n    order.setText(new StringBuilder() \n            .append(toast + \" \") \n            .append(sandwich.getSandwich()) \n            .append(\"\\n\") \n            .append(sandwich.getKcal() + extraKcal) \n            .append(\" kcal\") \n            .append(\"\\n\") \n            .toString()); \n\n    ```"]