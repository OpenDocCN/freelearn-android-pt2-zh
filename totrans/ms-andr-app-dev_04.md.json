["```kt\nnew Handler().postDelayed(new Runnable() {\n  @Override\n  public void run() {\n\n    Intent intent = new Intent(SplashActivity.this, MainActivity.class)\n\n    startActivity(intent);\n  }\n},3000);\n```", "```kt\npublic final void runOnUiThread(Runnable action) {\n  if (Thread.currentThread() != mUiThread) {\n    mHandler.post(action);\n  } else {\n    action.run();\n  }\n}\n```", "```kt\nThread thread = new Thread(){\n\n  @Override\n  public void run() {\n    super.run();\n  }\n};\n\nthread.start();\n```", "```kt\npublic class MyAsyncTask extends AsyncTask<Integer,Integer,Void> {\n\n  ProgressBar pB;\n\n  MyAsyncTask(ProgressBar pB) {\n    this.pB = pB;\n  }\n\n  @Override\n  protected void onPreExecute() {\n    super.onPreExecute();\n    pB.setProgress(0);\n  }\n\n  @Override\n  protected void onProgressUpdate(Integer... values) {\n    super.onProgressUpdate(values);\n    pB.setProgress(values[0]);\n  }\n\n  @Override\n  protected Void doInBackground(Integer... integers) {\n    for (int i = 0; i < 10; i++){\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      onProgressUpdate(new Integer[]{i});\n    }\n    return null;\n  }\n\n  @Override\n  protected void onPostExecute(Void o) {\n    super.onPostExecute(o);\n    Log.d(\"AsyncTask\",\"Completed\");\n  }\n\n}\n```", "```kt\nnew MyAsyncTask( progressBar ).execute(new Integer[]{10});\n```", "```kt\npublic class MySingleton {\n\n    private static MySingleton sInstance;\n\n    public static MySingleton getInstance(){\n        if (sInstance == null) {\n            sInstance = new MySingleton();\n        }\n        return sInstance;\n    }\n}\n```", "```kt\npublic class MAApplication extends Application {\n\n  private static MAApplication sInstance;\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    sInstance = this;\n\n    // Enable Local Datastore.\n    Parse.enableLocalDatastore(this);\n\n    ParseObject.registerSubclass(JobOffer.class);\n\n    Parse.initialize(this, \"KEy\", \"KEY\");\n  }\n\n  private static MAApplication getInstance(){\n    return sInstance;\n  }\n}\n```", "```kt\nprivate RequestQueue mRequestQueue;\n\n@Override\npublic void onCreate() {\n  super.onCreate();\n\n  sIntasnce = this;\n\n  mRequestQueue = Volley.newRequestQueue(this);\n  .\n  .\n  .\n}\n\npublic RequestQueue getRequestQueue(){\n  return mRequestQueue;\n}\n```", "```kt\npublic class MyObserved {\n\n  public interface ObserverInterface{\n    public void notifyListener();\n  }\n\n  List<ObserverInterface> observersList;\n\n  public MyObserved(){\n    observersList = new ArrayList<ObserverInterface>();\n  }\n\n  public void addObserver(ObserverInterface observer){\n    observersList.add(observer);\n  }\n\n  public void removeObserver(ObserverInterface observer){\n    observersList.remove(observer);\n  }\n\n  public void notifyAllObservers(){\n    for (ObserverInterface observer : observersList){\n      observer.notify();\n    }\n  }\n}\n\npublic class MyObserver\nimplements MyObserved.ObserverInterface {\n\n  @Override\n  public void notify(){\n    //Do something\n  }\n}\n```"]