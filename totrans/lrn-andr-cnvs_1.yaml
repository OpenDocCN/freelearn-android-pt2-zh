- en: Chapter 1. Getting Started with Android Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will learn a little about Android Canvas, why we need it,
    and what it provides. We will create a simple Android application displaying an
    image on the screen. We will test the application on an emulator. Then we will
    discuss each section of the application and things that the reader needs to know
    about while working with Android Canvas. By the end of this chapter, the reader
    will have learned to create a basic Android application that will display an image
    using one of the simple techniques provided by Canvas and some additional information
    and good conventions to deal with graphics in applications.
  prefs: []
  type: TYPE_NORMAL
- en: Android Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Canvas provides the developer with the ability to create and modify
    2D images and shapes. Moreover, the Canvas can be used to create and render our
    own 2D objects as this class provides various drawing methods to do so. Canvas
    can also be used to create some basic animations such as frame-by-frame animations
    or to create certain `Drawable` objects such as buttons with textures and shapes
    such as circles, ovals, squares, polygons, and lines. Android also provides hardware
    acceleration to increase the performance of the drawing done by Canvas. Now we
    know what we want to develop, why we need to know about graphics, what our graphic
    needs are, and what we will use. We also know what Android Canvas is and what
    it provides us with. In short, Android Canvas is the answer to all our questions
    as it provides all the right ingredients for our graphics and some basic animation
    to get the job done. For 3D graphics, Android provides support for OpenGL; but
    in the context of this book, we will not cover 3D graphics and so will not discuss
    OpenGL. However, interested readers can check the details on [http://developer.android.com/guide/topics/graphics/opengl.html](http://developer.android.com/guide/topics/graphics/opengl.html).
  prefs: []
  type: TYPE_NORMAL
- en: Our first Android Canvas application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our goal in this section will be to create a very simple application that will
    display an image on the screen. Do not get frightened. It might seem too early
    to start developing Canvas—and it is—but our first application will not involve
    any coding or any complicated stuff. We will go through the different steps of
    creating an application. We will look into SDK versions and available APIs and
    what we are going to use. You may not understand certain sections of the applications
    or the steps that we are performing, but after performing each step we will explain
    what's going on in that step. We have only talked up to this point; let's start
    some real work. We will start by opening Eclipse and starting a new Android application
    project. To do this, in Eclipse we will navigate to **File** | **New** | **Android
    Application Project**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the new application window in Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our first Android Canvas application](img/5396OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the first screen that appears. We will name our application `MyFirstCanvasApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Application Name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Application Name** is shown in the **Manage Application** list in **Settings**;
    if we publish our application on **Play Store**, the same string will be displayed
    there. So the name should be attractive and meaningful.'
  prefs: []
  type: TYPE_NORMAL
- en: Project Name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Project Name** is only used by Eclipse, but it should be unique within the
    workspace. It can be the same as the application name.'
  prefs: []
  type: TYPE_NORMAL
- en: Package Name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Package Name** must be a unique identifier of our application. It is not
    shown to the users, but it should stay the same throughout the life of the application.
    The package name is something with the help of which different versions of the
    same applications are identified. Our package name will be `com.learningandroidcanvasmini.myfirstcanvasapp`.
    This specific syntax is not a hard and fast rule to define package names, but
    it''s a good way to avoid package name collisions. For example, if we have two
    applications with the same exact name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.learningandroidcanvasmini.myfirstcanvasapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.learningandroidcanvasmini.myfirstcancasapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s say that the first application is just a simple application displaying
    some images and the second application is a simple paint application with freehand
    drawing. If we want to publish them on Google Play Store, a package name collision
    will occur and the second application will not be allowed to get published because
    there will already be an application with the same exact name. There are two solutions
    to avoid this situation. First, changing the package name so that there is no
    collision in package names and the second application is considered as an all
    new application. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.learningcandroidcanvasmini.picdisplayapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.learningandroidcanvasmini.paintapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, we can keep the package name the same but change the `android:version`
    code and `android:version` name. Publishing will be successful, giving the impression
    that the first application is the core application (like `myfirstcanvasapp` Version
    1.0) and the second application is the updated version of the same app (like `myfirstcanvasapp`
    Version 2.0). For more details and better understanding of publishing applications
    on Google Play Store, follow the link [http://developer.android.com/distribute/googleplay/publish/preparing.html](http://developer.android.com/distribute/googleplay/publish/preparing.html).
  prefs: []
  type: TYPE_NORMAL
- en: Least possible version of SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selecting a lower possible required SDK means that our application will be able
    to run on the maximum available devices but with the limitation that if we select
    a very low version of Android, we won't be able to use hardware acceleration as
    it is not available on the lower versions of Android. If we don't require hardware
    acceleration, we can go for lower versions to target more devices, but if we are
    using some animations and graphics that may require hardware accelerations, we
    need to use a little higher version of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Target SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the highest API level our application will work with, but applications
    are generally forward compatible and will even work with SDK levels higher than
    our target SDK if the libraries used are not changed. This is a rare scenario
    but sometimes some libraries in the new versions are changed and that affects
    calls to different methods and properties of different classes, and this results
    in abnormal functions of the application. This attribute informs the system that
    we have tested the application against the target API and the system should not
    create any compatibility issues. Moreover, the application will have backward
    compatibility till the Minimum Required SDK. We will select the highest available
    SDK as we won't like our application to look outdated as lower versions will lack
    some new features (such as lack of hardware acceleration).
  prefs: []
  type: TYPE_NORMAL
- en: Theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Theme is the last option. We will keep the default selection for this, as at
    this point it is not important.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we will click on **Next** and the following screen will appear.
    This is the **Configure Project** screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the new application''s configuration screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme](img/5396OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we will check whether we want a custom launcher icon or not. On selecting
    **Create Activity**, the system will create a default activity for us automatically.
    Also configure where to create the project; mostly, it''s in our workspace. If
    we have selected the **Create custom launcher icon** checkbox, clicking on **Next**
    will take us to the following screen, the icon configuration screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme](img/5396OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On this screen, we will configure the custom launcher icon attributes, such
    as the path from where it should read the source image. We will configure the
    icon's foreground, shape, and background color. Click on **Next** to move to the
    next screen. We have selected a randomly downloaded Canvas image from the web
    as our source. The image is in PNG format. PNG images support transparency; for
    example, a completely transparent image or with some transparent background. Select
    the **Shape** as **Round** and the **Background Color** as dark gray. Other options
    are to make the shape **Square** or **None**. For more details about icons, follow
    the link [http://developer.android.com/design/style/iconography.html](http://developer.android.com/design/style/iconography.html).
  prefs: []
  type: TYPE_NORMAL
- en: The form shows different sizes of the image to the right with **mdpi**, **hdpi**,
    **xhdpi**, and **xxhdpi** written on top of each; `dpi` is dots per inch, `m`
    is medium, and `h` is high. These are the different sizes of our image for different
    screen sizes. Android devices come in different screen sizes and resolutions.
    If we want our application to have support for multiple screen sizes, starting
    from old to new devices, we should gather some information about their dpis, screen
    sizes, screen resolutions, screen densities, and so on; as we are dealing with
    graphics here, we should know about them. However, we will come to this at the
    end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows selecting the default activity screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme](img/5396OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On this form, the wizard gives us options to create an application with a **Blank
    Activity**, **Fullscreen Activity**, or **Master/Detail Flow** activity form.
    We will move forward with a blank activity by selecting **Blank Activity** and
    clicking on **Next**. Now the wizard will take us to the following form, the default
    activity form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme](img/5396OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On this form, we will name our activity as `MyFirstCanvasAppMainActivity`. The
    **Layout Name** will be populated automatically for us and **Navigation Type**
    should be selected as **None** because at this point we are not interested in
    any navigation complications in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **Finish** will close the wizard and we will be taken back to Eclipse
    with the screen as shown in the following screenshot, which shows our application
    in the **Design** mode.The following screenshot shows the first Eclipse view of
    our project after the wizard has completed execution successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme](img/5396OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we will create an **Android Virtual Device** (**AVD**) and our emulator
    from the AVD Manager with the configuration of Target SDK Ver. 4.2.2 to test our
    application. To do this, we will right-click on our project in the **Package Explorer**
    panel that appears on the left side by default. From the menu that appears, we
    will navigate to **Run As** | **Run Configurations**. In this window, we will
    select our project in the **Android** tab. Then we will navigate to the **Target**
    tab and select the AVD that we created earlier to test our application and click
    on **Run**. This will trigger the emulator to run and our application will be
    shown in the emulator as shown in following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: If we click on the Home key on the emulator and then click on the menu to see
    all the applications installed on the emulator, we will see that our custom launcher
    icon is also present in the menu as shown in the following screenshot. To give
    a good impression of our application, we must design an attractive, relevant icon
    for us. For this, Photoshop or any other graphic a design tool can be used. This
    step can be skipped if the developers own an actual device and it's configured
    for testing in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the first default activity with **Hello world!**
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme](img/5396OS_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows our application icon in the fourth row from
    top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme](img/5396OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our first application up and running, we will try to understand
    the most important sections of our project in Eclipse. After understanding the
    important sections, we will meet our goal; that is, displaying an image on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Mining our first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For starters, in every Android application there are three files that need our
    special attention; without understanding these three files, we won't be able to
    develop applications for Android. The following sections talk about these files.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main configuration file in every Android Application is `AndroidManifest.xml`.
    This is an XML file and can be seen at the root level of the project in **Package
    Explorer**. This is the main configuration file of our application and one of
    the most important files of our project. This file contains the information of
    the package or our application, the minimum and maximum SDKs used by our application,
    the activities used in our application, and permissions that our application needs
    to run or perform certain specific tasks. Whenever an application is about to
    get installed on an Android device, this is the file that provides the system
    with all the details about the permissions to resources that the application will
    require and the activities used in it. After reading this file, the system knows
    about the package name of this application, what the compatible SDKs are, what
    activities the application contains, and what permissions the application needs
    to run or perform certain tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The layout file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The layout file in our application is `activity_my_first_canvas_app_main.xml`
    and is located in the `layout` folder that's inside the `res` folder. So the complete
    path is `res/layout/activity_my_first_canvas_app_main.xml` in our project in **Package
    Explorer**. This is an XML file that is responsible for the layout of our activity
    and the views that appear on the activity in our application. Other activities
    can be laid out using the same XML format using the same XML layout files.
  prefs: []
  type: TYPE_NORMAL
- en: The code file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main activity code file in our application is `MyFirstCanvasAppMainActivity.java`.
    This is the coding file of our activity where we code all our functionality. This
    file is located in the package folder of our project; that is, inside the `src`
    folder, so the path inside the project in the **Package Explorer** becomes `src/com.learningandroidcanvasmini.myfirstcanvasapp/MyFirstCanvasAppMainActivity.java`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows it clearly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The code file](img/5396OS_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Besides the preceding files, we will discuss the `res` folder. The `res` folder
    contains the following `Drawable` folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`drawable-hdpi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable-ldpi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable-mdpi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable-xhdpi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable-xxhdpi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following screenshot displays the `drawable-xxhdpi` folder inside our `res`
    folder. This is where our icon is placed.
  prefs: []
  type: TYPE_NORMAL
- en: '![The code file](img/5396OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we check all these folders, we will find that each one contains an image
    by the name `ic_launcher.png` that is in fact the Canvas image we used during
    the creation of our application. The image is the same in each folder, but the
    size is different. Now let's say we want the original Canvas image to be displayed
    on the screen. We will copy our original Canvas image to one of these folders;
    let's say we copy the image to the `drawable-xhdpi` folder. Refresh the folders
    in the Package Explorer and then go to the **Design** view of our activity that
    is displaying the **Hello world** string. Select the string and delete it. In
    the Palette, click on **Images & Media** to expand it. Drag-and-drop an ImageView
    on the activity in the **Design** view. We will be prompted by a dialog box to
    select the source image for the ImageView.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the dialog box that prompts us to select the
    source image for the ImageView that we have dragged-and-dropped on the activity
    in the **Design** mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The code file](img/5396OS_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will select our Canvas image and click on **OK**. Our Canvas image will appear
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screen shows the image that appears on the screen in the **Design**
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The code file](img/5396OS_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will run the application. The following is what we will get on the emulator
    – our application with the image drawn on an ImageView that uses Canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The code file](img/5396OS_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is something we need to be very careful about: when we are saving image
    files in the `res` folder, we need to rename our image files carefully. Although
    the image filename may not make any difference outside this project, in Eclipse
    the image filename will give you errors if one of the following mistakes is made:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filenames containing spaces; for example, `our canvas.png`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will return an error and will not be shown in the Package Explorer pane
    in our project files. Filenames containing special characters other than `_` and
    `.`; for example, `our-canvas(1).png` will also return an error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot displays the error that will be shown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The code file](img/5396OS_01_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Filenames that don't start with alphabet characters; for example, `886_1_Canvas.png`.
    This will return an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best convention to name image files is to start with alphabet characters;
    numbers can be included after that. Use only `_` and `.` among the special characters;
    for example, `our_canvas_1.png`. This filename will be accepted and we will be
    able to use this image in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have now completed the goal of this chapter, but we need to understand a
    few more things if we don''t want to have any issues with the graphics of our
    application on different screen sizes and resolutions. If we want our application
    to support multiple screens, we need to understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Screen size**: This is the physical screen size, normally measured in inches
    diagonally. Android has four groups for all displays: small, normal, large, and
    extra large.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen density**: This is the dpi (dots per inch). These are the number of
    pixels on a physical area. This means that a 3-inch high-density screen will have
    more pixels than a 6-inch low-density screen. Lower dpis means low-density screens
    and higher dpis means high-density screens. Android has four groups for densities:
    low, medium, high, and extra high. This is where `ldpi`, `hdpi`, `mdpi`, `xhdpi`
    come in. For more details on screen size and density, follow this link: [http://developer.android.com/guide/practices/screens_support.html](http://developer.android.com/guide/practices/screens_support.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orientation**: This is the orientation of the screen. This is either portrait
    or landscape. We need to take care of this because different devices operate in
    different modes and orientation can be changed at run time by the user. So, if
    we are only designing for one of them, we have to lock the orientation of the
    screen. Then, even if the user rotates the screen, the graphics of our UI stay
    the same. It is best to design layouts and graphics for both orientations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we have learned the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The need to learn about Android Canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Android Canvas is and what it provides us
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple and basic application displaying an image on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding important files and sections of our first application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some additional information about screen sizes, densities, and orientations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter the reader will know the basics of working with graphics
    in Android. The reader will be able to create a simple application displaying
    an image on the screen and will have a basic understanding of the different sections
    of the project. He/she will also have gained knowledge about which file to use
    for what purpose and where to find it. The reader will also have gained some basic
    knowledge of screens and densities; thus, while designing and using graphics in
    an application, the reader will use this information to make better decisions
    about designing the user interface of the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will discuss threads, their importance, how can they
    be used in drawing in Canvas, and the performance tradeoff our application gets
    while using threads.
  prefs: []
  type: TYPE_NORMAL
