["```kt\njstring\nJava_com_my_package_HelloJni_stringFromJNI( JNIEnv* env,\n                                                  jobject thiz )\n{\n    return (*env)->NewStringUTF(env, \"Hello World\");\n}\n```", "```kt\npublic class MainActivity extends Activity { \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }    \n}\n```", "```kt\n<activity \n    android:name=\"com.hellojni.MainActivity\">\n    <intent-filter>\n      <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent. category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n```", "```kt\n    jstring\n    Java_com_my_package_HelloJni_stringFromJNI( JNIEnv* env,\n                                                jobject thiz )\n    {\n        return (*env)->NewStringUTF(env, \"Hello World\");\n    }\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n\n    include $(CLEAR_VARS)\n\n    LOCAL_MODULE    := HelloWorld-jni\n    LOCAL_SRC_FILES := HelloWorld-jni.c\n\n    include $(BUILD_SHARED_LIBRARY)\n    ```", "```kt\n    APP_ABI := all\n    ```", "```kt\n    APP_PLATFORM := android-9\n    ```", "```kt\nstatic {\n        System.loadLibrary(\"HelloWorld-jni\");\n}\n```", "```kt\npublic native String stringFromJNI();\n```", "```kt\n  TextView  textView = new TextView(this);\n  textView.setText( stringFromJNI() );\n  setContentView(textView);\n```", "```kt\nCompile thumb  : hello-jni <= hello-jni.c\nSharedLibrary  : libhello-jni.so\nInstall        : libhello-jni.so => libs/armeabi-v7a/libhello-jni.so\nCompile thumb  : hello-jni <= hello-jni.c\nSharedLibrary  : libhello-jni.so\nInstall        : libhello-jni.so => libs/armeabi/libhello-jni.so\nCompile x86    : hello-jni <= hello-jni.c\nSharedLibrary  : libhello-jni.so\nInstall        : libhello-jni.so => libs/x86/libhello-jni.so\nCompile mips   : hello-jni <= hello-jni.c\nSharedLibrary  : libhello-jni.so\nInstall        : libhello-jni.so => libs/mips/libhello-jni.so\n\n```", "```kt\nexport NDK_PROJECT_PATH=~/Location/HelloJNI/\n```", "```kt\n<application android:label=\"@string/app_name\"\nandroid:hasCode=\"false\">\n```", "```kt\n<uses-sdk android:minSdkVersion=\"9\" />\n```", "```kt\n<meta-data android:name=\"android.app.lib_name\"\nandroid:value=\"native-activity-example\" />\n```", "```kt\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := native-activity\nLOCAL_SRC_FILES := main.c\nLOCAL_LDLIBS    := -llog -landroid -lEGL -lGLESv1_CM\nLOCAL_STATIC_LIBRARIES := android_native_app_glue\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n$(call import-module,android/native_app_glue)\n```", "```kt\n#include <jni.h>\n#include <errno.h>\n\n#include <EGL/egl.h>\n#include <GLES/gl.h>\n\n#include <android/sensor.h>\n#include <android/log.h>\n#include <android_native_app_glue.h>\n\n#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, \"native-activity\", __VA_ARGS__))\n#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, \"native-activity\", __VA_ARGS__))\n```", "```kt\nvoid android_main(struct android_app* state) {\n    struct engine engine;\n\n    app_dummy();\n\n    memset(&engine, 0, sizeof(engine));\n    state->userData = &engine;\n    state->onAppCmd = engine_handle_cmd;\n    state->onInputEvent = engine_handle_input;\n    engine.app = state;\n\n    engine.sensorManager = ASensorManager_getInstance();\n    engine.accelerometerSensor = ASensorManager_getDefaultSensor(engine.sensorManager,\n            ASENSOR_TYPE_ACCELEROMETER);\n    engine.sensorEventQueue = ASensorManager_createEventQueue(engine.sensorManager,\n            state->looper, LOOPER_ID_USER, NULL, NULL);\n\n    if (state->savedState != NULL) {\n        engine.state = *(struct saved_state*)state->savedState;\n    }\n```", "```kt\n    while (1) {\n        int ident;\n        int events;\n        struct android_poll_source* source;\n\n        while ((ident=ALooper_pollAll(engine.animating ? 0 : -1, NULL, &events,\n                (void**)&source)) >= 0) {\n\n            if (source != NULL) {\n                source->process(state, source);\n            }\n\n            if (ident == LOOPER_ID_USER) {\n                if (engine.accelerometerSensor != NULL) {\n                    ASensorEvent event;\n                    while (ASensorEventQueue_getEvents (engine.sensorEventQueue,\n                            &event, 1) > 0) {\n                        LOGI(\"accelerometer: x=%f y=%f z=%f\",\n                                event.acceleration.x, event.acceleration.y,\n                                event.acceleration.z);\n                    }\n                }\n            }\n\n            if (state->destroyRequested != 0) {\n                engine_term_display(&engine);\n                return;\n            }\n        }\n\n        if (engine.animating) {\n            engine.state.angle += .01f;\n            if (engine.state.angle > 1) {\n                engine.state.angle = 0;\n            }\n\n            engine_draw_frame(&engine);\n        }\n    }\n}\n```", "```kt\nbuildTypes {\n        release {\n            minifyEnabled false\n            {â€¦}\n            ndk {\n                debuggable = true\n            }\n\n        }\n        debug {\n            debuggable = true\n            jniDebuggable = true\n        }\n    }\n```", "```kt\ninclude $(CLEAR_VARS)\n```", "```kt\nLOCAL_MODULE := example-module\n```", "```kt\nLOCAL_SRC_FILES := example.c\n```", "```kt\nLOCAL_SRC_FILES := example.c anotherexample.c\n```", "```kt\nTARGET_PLATFORM := android-21\n```", "```kt\nTARGET_ABI := android-21-x86\n```", "```kt\n$(call <function-name>)\n\n```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    all-subdir-makefiles\n    ```", "```kt\n    APP_CFLAGS := -mcpu=cortex-a9\n    ```", "```kt\n    APP_ABI := mips x86\n\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE := mylibrary-prebuilt\n    LOCAL_SRC_FILES := libmylibrary.so\n    include $(PREBUILT_STATIC_LIBRARY)\n    ```", "```kt\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := library-user\nLOCAL_SRC_FILES := library-user.c\nLOCAL_SHARED_LIBRARIES := mylibrary-prebuilt\ninclude $(BUILD_SHARED_LIBRARY)\n```", "```kt\n#include <file.h>\n```", "```kt\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := library-user\nLOCAL_SRC_FILES := library-user.c\nLOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include\ninclude $(PREBUILT_SHARED_LIBRARY)\n```"]