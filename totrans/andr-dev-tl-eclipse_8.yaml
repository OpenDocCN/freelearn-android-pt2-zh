- en: Chapter 8. Signing and Distributing APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the hard work done so far is not going to pay off unless we distribute
    our application for others to use. An Android application has to be signed before
    it goes on the radar for distribution. Any Android application, be it used in
    the emulator or distributed to friends, relative for testing, or published to
    Google Play store, needs to be signed electronically. In this chapter, we will
    learn about how to sign it and publish it for use by others. This chapter will
    cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: APK (Android package)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compilation for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a private key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Eclipse ADT for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish to Google Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APK – Android package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Android package** (**APK**), in simple terms, is similar to the runnable
    JAR or executable file (on Windows OS) which consists of everything that is needed
    to run the application.
  prefs: []
  type: TYPE_NORMAL
- en: The Android ecosystem uses a virtual machine, that is, **Dalvik virtual machine**
    (**DVM**) to run the Java applications. Dalvik uses its own bytecode, which is
    quite different from the Java bytecode.
  prefs: []
  type: TYPE_NORMAL
- en: A tool `dx` under Android SDK converts our Java classes to `.dex` (**Dalvik
    executable**).
  prefs: []
  type: TYPE_NORMAL
- en: The `.dex` files and resources of application (XML and images) are packaged
    by the tool **aapt** (**Android asset packing tool**) into the `.apk` file.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the hard work of coding and testing the application needs to be packaged
    for release. Packaging involves the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: Compilation for release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the very first step towards release and distribution. It comprises
    of setting a package name in the application''s manifest file, configuring application
    attributes, and compilation before release. They involve the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Choosing appropriate package name**: Once the application is released it
    cannot be undone hence, the need to dwell upon and choose a suitable package name.
    The package name can be set in the application''s manifest file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disabling debugging**: We need to make sure we disable debugging before we
    release it. To disable debugging, comment or remove the `Log()` method call in
    the code. Also, debugging can be disabled by removing the `android:debuggable`
    attribute from the `<application>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pointing out the application icon**: Every application needs to have an icon
    of itself. Please make sure that the icon follows the icon guidelines a: [http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html](http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html).
    Icons can be specified by using the icon attributes of the `<application>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Versioning**: This is the most important aspect of release and also maintenance.
    The version identifies the application''s release build and determines how it
    should be updated. To put it in the simple terms, the version number must be incremented
    with each published release. With no version in place, it is rather impossible
    for future updates. The versioning information is provided by the following two
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `android:versionCode` | It is the integer represents version of application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `android:versionName` | It is the string that is displayed to users to identify
    what is installed in the device. |'
  prefs: []
  type: TYPE_TB
- en: Both these attributes can be specified under the `<manifest>` element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Review the manifest file for permissions**: It should only specify relevant
    permissions in the manifest file using the `<uses-permission>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a private key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An android application must be signed with our own private key. It identifies
    a person, corporation, or entity associated with the application. This can be
    generated using the program `keytool` from the Java SDK. The following command
    is used for generating the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can use a different key for each published application, and specify a different
    name to identify it. Also, Google expects validity of at least 25 years or more.
    A very important thing to consider is to keep a back up and securely store the
    key, because once it is compromised it impossible to update an already published
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Signing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After obtaining the private key we need to sign the application. This is done
    using a program `jarsigner` from the Java SDK. The following command is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Alignment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the APK is signed it needs to be optimized, to do that we use the `zipalign`
    tool available with the Android SDK under the `tools/` directory. The usage is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using the Eclipse ADT for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Eclipse **Android Development Tool** (**ADT**), all the aforementioned
    steps in the *Preparing for release* section can be done with ease. Let's prepare
    our DistanceConverter from the earlier chapter for release using the Eclipse ADT.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project **DistanceConverter** and then select **Export**
    from the context menu. Select **Export Android Application**, as shown in the
    following screenshot:![Using the Eclipse ADT for release](img/1103OS_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Export** wizard will now guide you through the process of signing, including
    the steps for selecting the private key (if already generated using the tool),
    or creating a new keystore and private key. Some of the following screens are
    captured, with the first screenshot being the creation of a keystore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now select **Create new keystore** and provide the **Location** and **Password**
    values:![Using the Eclipse ADT for release](img/1103OS_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screen we can enter other details about the key creation as
    specified in the next table:![Using the Eclipse ADT for release](img/1103OS_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Export Android Application** wizard, fill in the respective details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Field | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Alias** | `DIS` – It is the key alias name |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Password** | `<password>` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Validity** | `25` – for publishing in Google Play, a period ending 22 October
    2033 is a requirement |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **First and Last Name** | `<NAME>` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Organizational Unit** | Personal |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Organization** | Personal |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **City or Locality** | `<CITY NAME>` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **State or Province** | `<STATE NAME>` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Country Code(xx)** | Two letter code (for example, US) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Click on **Finish**, and the result is compiled, signed, aligned, and ready
    for distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing to Google Play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Publishing at Google Play is very simple and involves the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Register for Google Play**: Visit and register it at [https://play.google.com/](https://play.google.com/).
    It requires $25 USD to register, and is fairly straightforward and can take a
    few days until you get the final access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uploading APK**: Once the registration is over, the users have to log in
    and upload the APK file using the **Upload Application** link. Also, they have
    to upload the required assets, and edit the listing details, the one users will
    see when they browse the application in store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finish up the task by using the **publish** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting help
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information and help on signing and publishing, refer to following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/tools/publishing/app-signing.html](http://developer.android.com/tools/publishing/app-signing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/tools/publishing/versioning.html](http://developer.android.com/tools/publishing/versioning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/tools/publishing/preparing.html](http://developer.android.com/tools/publishing/preparing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the steps involved in signing and distribution
    of APK, and how it can be achieved using the Eclipse ADT easily.
  prefs: []
  type: TYPE_NORMAL
