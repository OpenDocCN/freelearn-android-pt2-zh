- en: Chapter 2. Text-to-Speech Synthesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Have you ever wondered how your mobile device can read aloud your favorite
    e-book or your last e-mail? In this chapter, you will learn about the technology
    of text-to-speech synthesis (TTS) and how to use the Google TTS engine to develop
    applications that speak. The topics covered are:'
  prefs: []
  type: TYPE_NORMAL
- en: The technology of text to speech synthesis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google text to speech synthesis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing applications using text to speech synthesis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to develop apps that use text-to-speech
    synthesis on Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing text-to-speech synthesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Text-to-speech synthesis, often abbreviated to TTS, is a technology that enables
    a written text to be converted into speech. TTS has been used widely to provide
    screen reading for people with visual impairments, and also for users with severe
    speech impairments. Perhaps the best known user of speech synthesis technology
    is the physicist Stephen Hawking who suffers from motor neurone disease and uses
    TTS as his speech has become unintelligible. With the aid of word prediction technology
    he is able to construct a sentence which he then sends to the built-in TTS system
    (see further: [http://www.hawking.org.uk/the-computer.html](http://www.hawking.org.uk/the-computer.html)).'
  prefs: []
  type: TYPE_NORMAL
- en: TTS is also used widely in situations where the user's hands or eyes are busy,
    for example, while driving navigation systems speak the directions as the vehicle
    progresses along a route. Another widespread use for TTS is in public announcement
    systems, for example, at airports or train stations. TTS is also used in phone-based
    call-center applications and in spoken dialog systems in general to speak the
    system's prompts, and in conjunction with talking heads on websites that use conversational
    agents to provide customer help and support.
  prefs: []
  type: TYPE_NORMAL
- en: The quality of a TTS system has a significant bearing on how it is perceived
    by users. Users may be annoyed by a system that sounds robotic or that pronounces
    words such as names or addresses incorrectly. However, as long as the output from
    the TTS is intelligible, this should at least allow the system to perform adequately.
  prefs: []
  type: TYPE_NORMAL
- en: The technology of text-to-speech synthesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two main stages in text-to-speech synthesis:'
  prefs: []
  type: TYPE_NORMAL
- en: Text analysis, where the text to be synthesized is analyzed and prepared for
    spoken output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wave form generation, where the analyzed text is converted into speech.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be many problems in the text analysis stage. For example, what is
    the correct pronunciation of the word *staring*? Is it to be based on the combination
    of the word *star* + *ing* or of *stare* + *ing*? Determining the answer to this
    question involves complex analysis of the structure of words; in this case, determining
    how the root form of a word such as *stare* is changed by the addition of a suffix
    such as *ing*.
  prefs: []
  type: TYPE_NORMAL
- en: There are also words that have alternative pronunciations depending on their
    use in a particular sentence. For example, *live* as a verb will rhyme with *give*,
    but as an adjective it rhymes with *five*. The part of speech also affects stress
    assignment within a word; for example, *record* as a noun is pronounced *'record*
    (with the stress on the first syllable), and as a verb as *re'cord* (with the
    stress on the second syllable).
  prefs: []
  type: TYPE_NORMAL
- en: Another problem concerns the translation of numeric values into a form suitable
    for spoken output (referred to as *normalization*). For example, the item *12.9.13*,
    if it represents a date, should not be spoken out as *twelve dot nine dot thirteen*
    but as *December 9th, two thousand thirteen*. Note that application developers
    using the Google TTS API do not have to concern themselves with these issues as
    they are built in to the TTS engine.
  prefs: []
  type: TYPE_NORMAL
- en: Turning to wave form generation, the main methods used in earlier systems were
    either **articulatory synthesis**, which attempts to model the physical process
    by which humans produce speech, or **formant synthesis**, which models characteristics
    of the acoustic signal.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays **concatenative speech synthesis** is used, in which pre-recorded units
    of speech are stored in a speech database and selected and joined together during
    speech generation. The units are of various sizes; single sounds (or phones),
    adjacent pairs of sounds (diphones), which produce a more natural output since
    the pronunciation of a phone varies based on the surrounding phones; syllables,
    words, phrases, and sentences; and complex algorithms have been developed to select
    the best chain of candidate units and to join them together smoothly to produce
    fluent speech. The output of some systems is often indistinguishable from real
    human speech, particularly where prosody is used effectively. Prosody includes
    phrasing, pitch, loudness, tempo, and rhythm, and is used to convey differences
    in meaning as well as attitude.
  prefs: []
  type: TYPE_NORMAL
- en: Using pre-recorded speech instead of TTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the quality of TTS has improved considerably over the past few years,
    many commercial enterprises prefer to use pre-recorded speech in order to guarantee
    high-quality output. Professional artists, often referred to as voice talent,
    are employed to record the system's prompts.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of pre-recorded prompts is that they cannot be used where the text
    to be output is unpredictable—as in apps for reading e-mail, text messages, or
    news, or in applications where new names are being continually added to the customer
    list. Even where the text can be predicted but involves a large number of combinations—as
    in flight announcements at airports—the different elements of the output have
    to be concatenated from pre-recorded segments but in many cases the result is
    jerky and unnatural. Another situation is where output in other languages might
    be made available. It would be possible to employ voice talent to record the output
    in the various languages but for greater flexibility the use of different language
    versions of the TTS might be less costly and sufficient for purpose.
  prefs: []
  type: TYPE_NORMAL
- en: There has been a considerable amount of research on the issue of TTS versus
    pre-recorded speech. See, for example, *Practical Speech User Interface Design*
    by *James R. Lewis*, *CRC Press*.
  prefs: []
  type: TYPE_NORMAL
- en: Using Google text-to-speech synthesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TTS has been available on Android devices since Android 1.6 (API Level 4).The
    components of the Google TTS API (package `android.speech.tts`) are documented
    at [http://developer.android.com/reference/android/speech/tts/package-summary.html](http://developer.android.com/reference/android/speech/tts/package-summary.html).
    Interfaces and classes are listed and further details can be obtained by clicking
    on these.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the TTS engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting the TTS engine involves creating an instance of the `TextToSpeech`
    class along with the method that will be executed when the TTS engine is initialized.
    Checking that TTS has been initialized is done through an interface called `OnInitListener`.
    If TTS initialization is complete, the method `onInit` is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: The following lines of code create a `TextToSpeech` object that implements the
    `onInit` method of the `onInitListener` interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also visit the web page for the book: [http://lsi.ugr.es/zoraida/androidspeechbook](http://lsi.ugr.es/zoraida/androidspeechbook)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example, when TTS is initialized correctly, the `speak` method is invoked,
    which may include the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QUEUE_ADD`: The new entry placed at the end of the playback queue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QUEUE_FLUSH`: All entries in the playback queue are dropped and replaced by
    the new entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Due to limited storage on some devices, not all languages that are supported
    may actually be installed on a particular device. For this reason, it is important
    to check if a particular language is available before creating the `TextToSpeech`
    object. This way, it is possible to download and install the required language-specific
    resource files if necessary. This is done by sending an `Intent` with the action
    `ACTION_CHECK_TTS_DATA` method, which is part of the `TextToSpeech.Engine` class
    as given in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the language data has been correctly installed, the `onActivityResult` handler
    will receive a `CHECK_VOICE_DATA_PASS`, this is when we should create the `TextToSpeech`
    instance. If the data is not available, the action `ACTION_INSTALL_TTS_DATA` will
    be executed as given in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can see the complete code in the `TTSWithIntent` app available in the code
    bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Developing applications with Google TTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to avoid repeating the code in several places, and to be able to focus
    on the new parts as we progress to more complex applications, we have encapsulated
    the most frequently used TTS functionalities into a library named `TTSLib` (see
    `sandra.libs.tts` in the source code), which is employed in the different applications.
  prefs: []
  type: TYPE_NORMAL
- en: The `TTS.java` class has been created following the Singleton design pattern.
    This means that there can only be a single instance of this class, and thus an
    app that employs the library uses a single TTS object with which all messages
    are synthesized. This has multiple advantages, such as optimizing resources and
    preventing developers from unwittingly creating multiple `TextToSpeech` instances
    within the same application.
  prefs: []
  type: TYPE_NORMAL
- en: TTSWithLib app – Reading user input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next figure shows the opening screen of this app, in which the user types
    a text, chooses a language, and then presses a button to make the device start
    or stop reading the text. By default, the option checked is the default language
    in the device as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TTSWithLib app – Reading user input](img/5297OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code in the `TTSWithLib.java` file mainly initializes the elements in the
    visual user interface and controls the language chosen (`setLocaleList` method),
    as well as what to do when the users presses the **Speak** (`setSpeakButton`)
    and **Stop** (`setStopButton`) buttons. As can be observed in the code shown,
    the main functionality is to invoke the corresponding methods in the `TTS.java`
    file from the `TTSLib` library. In `TTS.java` (see the `TTSLib` project in the
    code bundle) there are three methods named `setLocale` for establishing the locale.
    The first one receives two arguments corresponding to the language and the country
    codes. For example, for British English the language code is `EN` and the country
    code `GB`, whereas for American English they are `EN` and `US` respectively. The
    second method sets the language code only. The third method does not receive any
    argument and just sets the device's default language. As can be observed, if any
    argument is null in the first or second method, then the second and third methods
    are invoked.
  prefs: []
  type: TYPE_NORMAL
- en: The other important methods are responsible for starting (the `speak` method)
    and stopping (the `stop` method) the synthesis, whereas the `shutdown` method
    releases the native resources used by the TTS engine. It is good practice to invoke
    the `shutdown` method, we do it in the `onDestroy` method of the calling activities;
    for example, in the `TTSDemo.java` file).
  prefs: []
  type: TYPE_NORMAL
- en: TTSReadFile app – Reading a file out loud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A more realistic scenario for text-to-speech synthesis is to read out some text,
    especially when the user's eyes and hands are busy. Similar to the previous example,
    the app retrieves some text and the user presses the **Speak** button to hear
    it. A **Stop** button is provided in case the user does not wish to hear all of
    the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'A potential use-case for this type of app is when the user accesses some text
    on the web; for example, a news item, an e-mail, or a sports report. To do this
    would involve additional code to access the internet and this goes beyond the
    scope of the current app (see for example, the MusicBrain app in [Chapter 5](ch05.html
    "Chapter 5. Form-filling Dialogs"), *Form-filling Dialogs*). So, to keep matters
    simple, the text is pre-stored in the `Assets` folder and retrieved from there.
    It is left as an exercise for the reader to retrieve texts from other sources
    and pass them to TTS to be read out. The following screenshot shows the opening
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TTSReadFile app – Reading a file out loud](img/5297OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The file `TTSReadFile.java` is similar to the file `TTSWithLib.java`. As shown
    in the code, the main difference is that it uses English as the default language
    (as it matches the stored file) and obtains the text from a file instead of from
    the user interface (see the `onClickListener` method for the `speakbutton`, and
    the `getText` method in the code bundle).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are several more advanced issues discussed in detail in the book: *Professional
    Android™ Sensor Programming, Greg Milette and Adam Stroud, Wrox, Chapter 16*.
    There are methods for selecting different voices, depending on what is available
    on particular devices. For example, the TTS API provides additional methods to
    help you play back different types of text.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has shown how to use the Google TTS API to implement text to speech
    synthesis on a device. An overview of the technology behind text to speech synthesis
    was provided, followed by an introduction to the elements of the Google TTS API.
    Two examples were presented illustrating the basics of text-to-speech synthesis.
    In subsequent chapters more sophisticated approaches will be developed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next chapter deals with the other side of the speech coin: speech-to-text
    (or speech recognition).'
  prefs: []
  type: TYPE_NORMAL
