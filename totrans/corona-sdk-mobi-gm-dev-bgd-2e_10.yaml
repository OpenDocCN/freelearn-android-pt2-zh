- en: Chapter 10. Optimizing, Testing, and Shipping Your Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Developing a game to the point of completion is a great accomplishment. It''s
    one step closer to sharing it with the rest of the world, so that other people
    can play your new game. The benefit of creating your game with Corona SDK is that
    you have the option to build for iOS and/or Android. You want to ensure that your
    application is ready for submission so that it can be distributed in the mobile
    platform you''re developing in. We''ll go over the process of what it takes to
    prepare your game for its release.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The application interface used here is frequently updated; however, you will
    be able to perform all the steps irrespective of the interface you're using.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Improve the performance of your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a distribution provisioning profile for the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage application information in iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to submit an application to the Application Loader for the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign applications for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to submit an application to the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding memory efficiency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you develop your application, you should always consider how your design
    choices affect the performance of your application. The device memory still has
    its constraints even though there are improvements in the computing power and
    memory. Performance and optimization within the device will not only achieve faster
    response times, but also help minimize memory usage and maximize battery life.
    A link to an example on how to check memory usage can be found at [https://gist.github.com/JesterXL/5615023](https://gist.github.com/JesterXL/5615023).
  prefs: []
  type: TYPE_NORMAL
- en: 'Memory is an important resource on mobile devices. When too much memory is
    being consumed, devices may be forced to quit your application when you least
    expect it. Here are some things to be aware of while developing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Eliminate memory leaks**: Allowing leaks to exist means having extra used
    memory in your application that takes up valuable space. Even though Lua does
    automatic memory management, memory leaks can still occur in your code. For example,
    when you introduce global variables into your application, it is your job to tell
    Lua when they are not needed anymore so that memory can be freed. This is done
    through using `nil` in your code (`myVariable = nil`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display images should be small in file size as much as possible**: You may
    want to have many display images in your scene, but they may take up too much
    texture memory. Sprite sheets can take a toll on the memory in your apps. They
    should be created as small as conveniently possible and have an appropriate number
    of frames that demonstrate the animation clearly. For all items that you have
    displayed, plan out which elements are constantly in your background and foreground.
    If there is a way to combine several images together so that they don''t move,
    do so. It''ll save some memory when adding multiple display images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not load all your resources at once**: Avoid loading resource files until
    they are actually needed. This will help save memory and keep your application
    from crashing while trying to load too many things at once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove objects from the display hierarchy**: When a display object is created,
    it is implicitly added to a display hierarchy. When you no longer need a display
    object, you should remove it from the display hierarchy, especially when the objects
    contain images. This can be done using `display.remove( myImage ); myImage = nil`
    or `myImage:removeSelf()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Sound files should be made as small as possible**: Use a free program, such
    as Audacity at , or your preferred audio software to compress music or sound effects
    and build for the device. It is best to compare untouched audio with compressed
    audio to hear the difference in quality. This will help you determine a good median
    between sound quality and file size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Display images have a way of taking up a lot of texture memory if you're not
    paying attention to the size and number of images being used all at once.
  prefs: []
  type: TYPE_NORMAL
- en: Group objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a property of several objects is set to the same value, it's preferable to
    add the objects to a group and then modify the property of the group. It'll make
    it much easier for you to code, and it optimizes your animation.
  prefs: []
  type: TYPE_NORMAL
- en: Turning off animations when they're not being used
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's easy to forget to stop animations from running in the background when they're
    not needed or when you've made them invisible.
  prefs: []
  type: TYPE_NORMAL
- en: When you include a listener such as `"enterFrame"` and the objects registered
    under the listener have been set to `.isVisible = false`, it'll continue to run
    in the background even though it is not seen on screen. Make sure that listeners
    are removed when they are not needed.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing image sizes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you have large file sizes, especially full-screen images, the responsiveness
    of your application will slow down because of the time it takes to load, and plus,
    it uses up a lot of memory. When using large images, try compressing the file
    size as much as you can with an image-editing tool, such as Photoshop or ImageOptim
    ([https://imageoptim.com](https://imageoptim.com)). It'll help reduce the file
    size and save you the pain of application lag. Compressing large image sizes will
    benefit you in the long run. If images are backgrounds, consider switching to
    tiled images.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing iOS applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your game is finally debugged and completed, what's next? Assuming you're
    already registered in the iOS Developer Program, there are some guidelines that
    have to be followed before an application can be submitted to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Prepping your app icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are various image sizes and naming conventions required for your app icon,
    depending on which iOS devices your application is developed for. You can find
    the latest information under the **App Icon** subsection of the **Icon and Image
    Design** section of the iOS Human Interface Guidelines, on the Apple Developer
    website at [https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/AppIcons.html#//apple_ref/doc/uid/TP40006556-CH19-SW1](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/AppIcons.html#//apple_ref/doc/uid/TP40006556-CH19-SW1).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the app icon requirements, which also need to be in a noninterlaced
    `.png` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iTunesArtwork@2x`: This is a 1024 x 1024 px image. The `.png` extension needs
    to be removed for this image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-60@2x.png`: This is a 120 x 120 px image, which is used for Retina iPhone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-60@3x.png`: This is a 180 x 180 px image, which is used for iPhone 6
    Plus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-76.png`: This is a 76 x 76 px image, which is used for iPad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-76@2x.png`: This is a 152 x 152 px image, which is used for Retina iPad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small-40.png`: This is a 40 x 40 px image, which is used for iPad 2 and
    iPad mini search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small-40@2.png`: This is an 80 x 80 px image, which is used for Retina
    iPhone/iPad search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small-40@3x.png`: This is a 120 x 120 px image, which is used for iPhone
    6 Plus search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small.png`: This is a 29 x 29 px image, which is used for iPad 2 and
    iPad mini settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small@2x.png`: This is a 58 x 58 px image, which is used for Retina iPhone/iPad
    settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small@3x.png`: This is an 87 x 87 px image, which is used for iPhone
    6 Plus settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your `build.settings` file, you will need to include the icon references
    for all the devices you are building for in your application. Here is an example
    of how to set up your file if you are creating universal builds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You do not need to include the `iTunesArtwork@2x` image in the `plist`, but
    make sure that it's inserted in your base project folder of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting up your distribution certificate and provisioning
    profile for the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have focused on creating development certificates and provisioning profiles
    to test and debug our apps on a device. Now, we have to create a distribution
    version of them in order to submit an iOS application. Be aware that Apple can
    change the design of their website at any time. So, don''t get frustrated if the
    steps and screenshots do not match up:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Apple Developer account and go to **Certificates, Identifiers,
    & Profiles**. Click on **App IDs**. Create a new App ID by selecting the **+**
    icon in the upper-right corner and create a description that pertains to your
    application so that you can identify it. If you have an existing App ID that you
    have been using during development, you can disregard this step.![Time for action
    – setting up your distribution certificate and provisioning profile for the App
    Store](img/9343OT_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Distribution** under **Provisioning Profile**. Select the **+** button
    and select **App Store** under the **Distribution** section. Press **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the App ID you want to associate with the file and click on **Continue**.
    Next, select the certificate that will be associated with your provisioning profile
    and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a profile name for your provisioning profile and select the **Generate**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, click on the **Download** button and double-click on the
    file to install it on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The App ID you use is imperative to identify your app that will be submitted.
    It is best to have a unique reverse-domain style string. Make sure that you create
    explicit App IDs for Corona apps. Do not use wildcard App IDs.
  prefs: []
  type: TYPE_NORMAL
- en: In order to distribute for the App Store, you need to create an App Store Distribution
    Provisioning Profile and a Production Certificate. Any development profile will
    not be accepted. The process is similar to making a development provisioning profile
    and development certificate.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on distribution provisioning profiles on the Apple
    Developer site at [https://developer.apple.com/ios/manage/distribution/index.action](https://developer.apple.com/ios/manage/distribution/index.action)
    (you will be asked to log in to your Apple Developer account if you haven't done
    so already) and the Corona Labs site at [http://docs.coronalabs.com/guide/distribution/iOSBuild/index.html](http://docs.coronalabs.com/guide/distribution/iOSBuild/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iTunes Connect is a suite of web-based tools that allows you to submit and manage
    your applications for distribution on the App Store. In iTunes Connect, you will
    be able to check the status of your contracts; set up your tax and banking information;
    obtain sales and finance reports; request promotional codes; and manage users,
    applications, metadata, and your In-App Purchase catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Contracts, tax, and banking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you plan on selling your app, you need to have a paid commercial agreement
    in place so that it can be posted to the App Store. You will have to request a
    contract pertaining to iOS Paid Applications. All this is done through iTunes
    Connect under the **Contracts**, **Tax**, and **Banking** links.
  prefs: []
  type: TYPE_NORMAL
- en: When requesting contracts, beware of potential issues that can occur, such as
    delays when Apple processes your information for the first time and/or issues
    when changing your current contact information in iTunes Connect (that is, change
    of address if you have moved to a different location). It is your responsibility
    to regularly contact Apple for support to make sure that the information is always
    up to date in your contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – managing your application in iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now go over how to set up our application information in iTunes Connect.
    Any other information pertaining to user accounts, contracts, and banking that
    you would like to set up can be found at [https://developer.apple.com/app-store/review/](https://developer.apple.com/app-store/review/).
  prefs: []
  type: TYPE_NORMAL
- en: Log in to iTunes Connect at [http://itunesconnect.apple.com/](http://itunesconnect.apple.com/).
    Your login information is the same as your iOS Developer account. Once logged
    in, select **Manage Your Applications**. Click on the **Add New App** button.
    **App** **Name** is the name of your application. **SKU Number** is a unique alphanumeric
    identifier for the app. **Bundle ID** is the one you created in the iOS Provisioning
    Portal. Fill in the information and click on **Continue**:![Time for action –
    managing your application in iTunes Connect](img/9343OT_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to select the date on which you want your application to be
    live in the App Store and **Price Tier** that you want to charge. There is an
    optional checkbox for **Discount for Educational Institutions**. This is only
    if you want your app to be discounted for educational institutions that want to
    purchase multiple copies at the same time. Click on **Continue** when done:![Time
    for action – managing your application in iTunes Connect](img/9343OT_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, fill in the **Metadata** section about your application. This includes
    the version number, description of your game, categories, keywords pertaining
    to your app, copyright, contact information, and support URL:![Time for action
    – managing your application in iTunes Connect](img/9343OT_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Rating** section is based on the content of your application. For each
    description, choose the level of frequency that best describes your app. There
    are certain content types that will result in automatic rejection, such as realistic
    violence portrayed in your app or personal attacks to a target individual or group.
    You can learn more about *App Store Review Guidelines* at [https://developer.apple.com/appstore/resources/approval/guidelines.html](https://developer.apple.com/appstore/resources/approval/guidelines.html).![Time
    for action – managing your application in iTunes Connect](img/9343OT_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As discussed earlier in the **Uploads** section, you will need a large version
    of your app icon, that is, iPhone/iPod Touch screenshots and iPad screenshots
    (if your app runs on iPad) of the content in your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be greeted with a page summary of your application information. Check
    to make sure that the information displayed is correct and then click on **Done**:![Time
    for action – managing your application in iTunes Connect](img/9343OT_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be sent back to your version details page. Notice a button that says
    **Ready to Upload Binary**. Click on the button, and you will be required to answer
    a couple of questions about **Export** **Compliance**. Once completed, you will
    have the permission to upload your binary through **Application** **Loader**.![Time
    for action – managing your application in iTunes Connect](img/9343OT_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iTunes Connect is where you'll be managing your application from here on out
    when distributing it to the App Store. Every single piece of information you want
    to display about your app is done through iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're in the section pertaining to **App Information**, make sure that
    your **SKU Number** is unique and that it relates to your app, so that you can
    identify it later down the line. Also, make sure that **Bundle** **ID** you designated
    for your app is the correct one.
  prefs: []
  type: TYPE_NORMAL
- en: The app availability in the **Rights and Pricing** section controls when you
    want your app to go live once it's approved. It's good to set it for a date a
    couple of weeks in the future from when you submit it. It can take a couple of
    days to a couple of weeks for the review process to go from **Under** **Review**
    to **Ready** **for** **Sale** as long as there are no problems with the submission.
    The price tier is where you set the price for your app, or it can be set to **Free**.
    You can click on **View Pricing Matrix** to determine the price you're aiming
    to sell your app for.
  prefs: []
  type: TYPE_NORMAL
- en: The information in the **Metadata** section is what the customer will see in
    the App Store. The **Rating** section pertains to Apple Content Descriptions.
    Make sure that the level of frequency is checked off as close as possible to the
    content of your application.
  prefs: []
  type: TYPE_NORMAL
- en: The **Uploads** section is where you include your 1024 x 1024 px app icon and
    screenshots that best suit your app visually. Make sure that you provide the correct
    image sizes. Once you have transitioned back to the **Application Information**
    screen, you'll notice that the status says **Prepare for Upload**. When you click
    on the **Ready to Upload Binary** button on the **Version Details** page, you
    will answer questions about **Export Compliance**. Soon after, the status will
    change to **Waiting for Upload**.
  prefs: []
  type: TYPE_NORMAL
- en: More information relating to iTunes Connect can be found at [http://developer.apple.com/library/ios/iTunesConnectGuide](http://developer.apple.com/library/ios/iTunesConnectGuide).
  prefs: []
  type: TYPE_NORMAL
- en: Building an iOS application for distribution in Corona
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come to the homestretch in getting your iOS application submitted to
    the App Store. Assuming that you have already tested your application and debugged
    it with your development provisioning profile, you're ready to create a distribution
    build that will create a binary ZIP file of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – building your application and uploading it to the Application
    Loader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time to create the final game build for iOS distribution and upload it to the
    Application Loader for review under Apple's board.
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Corona simulator, navigate to the application project folder, and
    run it. Go to the Corona simulator menu bar and then to **File** | **Build** |
    **iOS**. Fill in all your application details. Make sure that your **Application
    Name** and **Version** fields match what is displayed in your iTunes Connect account.
    Choose **Device** to build an app bundle. Next, select the target device (iPhone
    or iPad) your app is created for from the **Supported Devices** drop-down menu.
    Under the **Code Signing Identity** drop-down menu, choose the **Distribution**
    **Provisioning** **Profile** option you created in the iOS Provisioning Portal.
    In the **Save to folder** section, click on **Browse** and choose where you would
    like your application to be saved. Click on the **Build** button when done:![Time
    for action – building your application and uploading it to the Application Loader](img/9343OT_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the build has been compiled, you will be greeted with a display that your
    application is ready for distribution. Select the **Upload to App Store** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the **Welcome to Application Loader** window pops up, log in with your
    iTunes Connect information. You will then be brought to another window with the
    **Deliver Your App** or **Create New Package** option. Choose **Deliver Your App.**
    The next window displays a drop-down menu; choose the name of the application
    you will be submitting and then click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The available application information found in iTunes Connect is displayed.
    Verify that it is correct and then click on the **Choose** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the ellipsis (**…**) button to replace the current file before submitting
    it and then select the **Send** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Application Loader will begin submitting your application binary file to
    the App Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get a confirmation that your binary was delivered to the App Store
    if it uploaded successfully. You can check on the status of your application in
    iTunes Connect when it goes to review, ready for sale, live, and so on. An e-mail
    will be sent to you upon every status change of your application. That's it! This
    is how you submit an app to the App Store!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When your application has been reviewed and approved by the App Store, you can
    go into iTunes Connect and adjust the availability date if it is approved before
    your proposed launch date. Your app will be live in the App Store instantly:![Time
    for action – building your application and uploading it to the Application Loader](img/9343OT_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's important that when you build your app under **Code Signing Identity**,
    you select your distribution provisioning profile that was created for your distribution
    build. Upon the compilation of your build, you can launch the Application Loader.
    Make sure that you have Xcode installed. The Application Loader will launch readily
    after you select the **Upload to App Store** button.
  prefs: []
  type: TYPE_NORMAL
- en: While you're in the Application Loader, the name of your app will be displayed
    in the dropdown once you have completed loading the binary information to iTunes
    Connect. When you deliver your app, select the zipped-up binary from the location
    you saved your file at.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as the file is uploaded, a confirmation window will appear and an e-mail
    will be sent to the Apple ID assigned to your Apple account. Your binary will
    be shown with a **Waiting for Review** status in iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: After all these steps, you now know how to submit an iOS application to the
    App Store. Hooray!
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – making a universal iOS build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you developed an application for iPhone only, try implementing it as an iPad
    version as well so that it can become a universal build. Take the lessons you
    learned from the previous chapters using your `build.settings` and `config.lua`
    files to resize your application. Also, don't forget about what is required of
    your app icon as well. It's like hitting two birds with one stone!
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Play Store is a publishing platform that helps you publicize, sell,
    and distribute your Android applications to users around the world.
  prefs: []
  type: TYPE_NORMAL
- en: To register as a Google Play Developer and get started with publishing, visit
    the Google Play Android Developer Console publisher site. You can sign up for
    an account at [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating launcher icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A launcher icon is a graphic that represents your application. Launcher icons
    are used by applications and appear on the user''s home screen. They can also
    be used to represent shortcuts in your application. These are similar to the icons
    created for iOS applications. The following are the launcher icon requirements,
    which also need to be in a 32-bit `.png` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Icon-ldpi.png`: This is a 36 x 36 px image at 120 dpi, which is used for low-density
    screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-mdpi.png`: This is a 48 x 48 px image at 160 dpi, which is used for medium-density
    screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-hdpi.png`: This is a 72 x 72 px image at 240 dpi, which is used for high-density
    screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-xhdpi.png`: This is a 96 x 96 px image at 320 dpi, which is used for
    x-high-density screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-xxhdpi.png`: This is a 144 x 144 px image at 480 dpi, which is used for
    xx-high-density screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-xxxhdpi.png`: This is a 192 x 192 px image at 640 dpi, which is used
    for xxx-high-density screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launcher icons need to be placed in your project folder at the time you build
    your application. The Google Play Store also requires you to have a 512 x 512
    px version of your icon, which can be uploaded in the developer console at the
    upload time of your build. For more information on launcher icons, visit [http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html](http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – signing your app for the Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android system requires all the installed applications to be digitally signed
    with a certificate whose private key is held by the application's developer. The
    Android system uses the certificate as a means of identifying the author of an
    application and establishing a relationship of trust between applications. The
    certificate is not used to control which applications the user can install. The
    certificate does not need to be signed by a certificate authority; it can be self-signed.
    Certificates can be signed on either Mac or Windows systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Mac, go to **Applications** | **Utilities** | **Terminal**. On Windows,
    go to **Start Menu** | **All Programs** | **Accessories** | **Command Prompt**.
    Using the `keytool` command, add in the following lines and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace `my-release-key` with the name of your application and `aliasname` with
    a similar or equal alias name. Also, if you add any extra numbers past `999999`
    (that is, extra 9s), the application will appear broken.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – signing your app for the Google Play Store](img/9343OT_10_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You will be asked to enter a keystore password. From here, you will create a
    unique password that you, as the developer, must come up with. You will be asked
    to re-enter it. The remaining questions that will be asked pertain to your developer/company
    information, location, and so on. Fill it all in. Once you have filled in the
    required information, you have generated a key to sign your Android build. For
    more information pertaining to app signing, visit [http://developer.android.com/tools/publishing/app-signing.html](http://developer.android.com/tools/publishing/app-signing.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the Corona simulator, navigate to the application project folder and
    run it. Go to the Corona simulator menu bar and then to **File** | **Build** |
    **Android**. Fill in the information for **Application Name**, **Version Code**,
    and **Version Name** pertaining to your app. Specify a **Package** name using
    the Java scheme. Select **Google Play** from the **Target App Store** menu. Under
    **Keystore**, select the **Browse** button to locate your signed private key and
    then from the pull-down menu, select your generated key for your release build.
    You will be prompted to enter your keystore password you used to sign your application
    in the `keytool` command. Under **Key Alias**, choose the alias name you created
    for your key from the pull-down menu and enter your password when prompted. Select
    the **Browse** button to choose a location for your app build. Choose the **Build**
    button when finished:![Time for action – signing your app for the Google Play
    Store](img/9343OT_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `keytool` command generates the keystore as a file called `my-release-key.keystore`.
    The keystore and key are protected by the passwords you entered. The keystore
    contains a single key, which is valid for 999999 days. The alias is a name that
    you will use later to refer to this keystore when signing your application.
  prefs: []
  type: TYPE_NORMAL
- en: Your keystore password is something that you create and must remember when you
    build your app in Corona. There will be an option if you want to use a different
    password for the alias name. You can press *Enter* to use the same one while you're
    in the Terminal or Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: When you create your build in Corona, make sure that your version number is
    an integer with no special characters. Also, you will have to make sure that your
    `build.settings` file includes the `versionCode` as well. This will be the same
    number as your version number. Refer to [Chapter 9](ch09.html "Chapter 9. Handling
    Multiple Devices and Networking Your Apps"), *Handling Multiple Devices and Networking
    Your Apps* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: The Java scheme in your build is the reverse of your domain name with the name
    of your product/company appended and the name of your app, for example, `com.mycompany.games.mygame`.
  prefs: []
  type: TYPE_NORMAL
- en: When you have built your app by using your private key and you have selected
    an alias name, the `.apk` file will be created and will be ready to be published
    on the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – submitting an app to the Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll use the Developer Console. This is where your developer profile will be
    created to publish to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're logged in to the Developer Console, click on the Android icon and
    select the button that says **Add new application**. You will be greeted with
    a pop-up window that will allow you to upload your build. Select your default
    language from the drop-down menu and enter the name of your app under **Title**.
    Click on the **Upload APK** button to proceed to the next page.![Time for action
    – submitting an app to the Google Play Store](img/9343OT_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Upload your first APK to Production** and then on **Browse files**
    to locate the `.apk` file of your application. Select the **Open** button to upload
    your file.![Time for action – submitting an app to the Google Play Store](img/9343OT_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After your `.apk` file is uploaded, select the **Store Listing** tab. Fill out
    the information with the details of your app, including **Title**, **Short description**,
    and **Full description**:![Time for action – submitting an app to the Google Play
    Store](img/9343OT_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Graphic Assets section, add in your app screenshots. At least two screenshots
    are required to submit your app. Other mandatory graphics that are needed are
    **Hi-res icon** and **Feature Graphic**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Categorization, Contact Details, and Privacy Policy sections need to be
    addressed. Make sure that you complete these sections and click on the **Save**
    button at the top of the page before proceeding to the next tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Pricing & Distribution** tab. Select the information that pertains
    to your app. The pricing default setting is **Free**. If you want to make a paid
    version, you must set up a merchant account with Google Checkout. Click on **Save**
    when you're finished:![Time for action – submitting an app to the Google Play
    Store](img/9343OT_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After filling out all the information pertaining to your app, make sure that
    the APK, Store Listing, and Pricing & Distribution tabs have a green check mark
    next to them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Ready to Publish** button and select **Publish this
    app** in the drop-down menu. Congratulations! You have just published your app
    to the Google Play Store!![Time for action – submitting an app to the Google Play
    Store](img/9343OT_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Developer Console page displays a simple step-by-step process on how to
    publish your `.apk` file.
  prefs: []
  type: TYPE_NORMAL
- en: The assets required to publish an app show the acceptable resolution and image
    types next to each section. It is optional to include a promotional graphic, feature
    graphic, and promotional video, but it would be in your best interest to add enough
    substance to your app page. This will make it appealing to potential customers.
  prefs: []
  type: TYPE_NORMAL
- en: After all the information related to your app is completed, make sure that you
    save your progress. Once you select the **Publish this app** menu, you're done!
    You should be able to see your app in the Google Play Store within the hour you
    published it.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – adding more promos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Google Play Store gives you many options on how to promote your application.
    Additional assets can be included from the Developer Console. Try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a promotional graphic as a marketing vehicle to showcase your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a feature graphic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a promotional video of your app. A website such as YouTube is a good
    way to share a trailer of your game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop quiz – publishing applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. When creating an iOS Distribution Provisioning file, what distribution
    method do you need to use?
  prefs: []
  type: TYPE_NORMAL
- en: Development
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: App Store
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ad hoc
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Where do you refer to for the status of the submitted iOS applications?
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: iOS Provisioning Portal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Application Loader
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What is required to build an app for the Google Play Store?
  prefs: []
  type: TYPE_NORMAL
- en: Create a private key under the `keytool` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign your application with a debug key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign your application with your private key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a and c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have accomplished a huge milestone with this chapter. We know how to submit
    not only to one but two major app markets! Publishing your applications to the
    App Store and Google Play Store is not scary, after all.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have covered the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of memory efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating provision profiles for distribution to the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting a binary to the Application Loader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing a release build for Android applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting `.apk` files to the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we'll take a look at In-App Purchases in the Apple iTunes
    Store for the iOS platform.
  prefs: []
  type: TYPE_NORMAL
