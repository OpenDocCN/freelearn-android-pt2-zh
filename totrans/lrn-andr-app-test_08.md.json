["```kt\nprivate static final boolean BENCHMARK_TEMPERATURE_CONVERSION = true;\n\n@Override\npublic void onTextChanged(CharSequence input, int start, int before, int count) {\nif (!destinationEditNumber.hasWindowFocus() \n  || destinationEditNumber.hasFocus() || input == null) {\n     return;\n}\n\nString str = input.toString();\nif (\"\".equals(str)) {\n    destinationEditNumber.setText(\"\");\n    return;\n}\n\nlong t0;\nif (BENCHMARK_TEMPERATURE_CONVERSION) {\n t0 = System.currentTimeMillis();\n}\n\ntry {\n    double temp = Double.parseDouble(str);\n    double result = (option == Option.C2F)\n         ? TemperatureConverter.celsiusToFahrenheit(temp)\n         : TemperatureConverter.fahrenheitToCelsius(temp);\n    String resultString = String.format(\"%.2f\", result);\n    destinationEditNumber.setNumber(result);\n    destinationEditNumber.setSelection(resultString.length());\n} catch (NumberFormatException ignore) {\n    // WARNING this is generated whilst numbers are being entered,\n    // for example just a '-' \n    // so we don't want to show the error just yet\n} catch (Exception e) {\n    sourceEditNumber.setError(\"ERROR: \" + e.getLocalizedMessage());\n}\n\nif (BENCHMARK_TEMPERATURE_CONVERSION) {\n long t = System.currentTimeMillis() - t0;\n Log.v(TAG, \"TemperatureConversion took \" + t \n + \" ms to complete.\");\n }\n}\n```", "```kt\nTemperatureConversion took 5 ms to complete.\nTemperatureConversion took 1 ms to complete.\nTemperatureConversion took 5 ms to complete.\n\n```", "```kt\nprivate static final String TAG = \"TemperatureTag\";\n@Override\npublic void onTextChanged(CharSequence input, int start, int before, int count) {\nif (!destinationEditNumber.hasWindowFocus() \n|| destinationEditNumber.hasFocus() || input == null) {\n           return;\n        }\n\n       String str = input.toString();\n       if (\"\".equals(str)) {\n         destinationEditNumber.setText(\"\");\n             return;\n        }\n\n TimingLogger timings = new TimingLogger(TAG, \"onTextChanged\");\n timings.addSplit(\"starting conversion\");\n\n   try {\n         double temp = Double.parseDouble(str);\n  double result = (option == Option.C2F)\n      ? TemperatureConverter.celsiusToFahrenheit(temp)\n      : TemperatureConverter.fahrenheitToCelsius(temp);\n  String resultString = String.format(\"%.2f\", result);\n         destinationEditNumber.setNumber(result);\n         destinationEditNumber.setSelection(resultString.length());\n} catch (NumberFormatException ignore) {\n// WARNING this is generated whilst numbers are being entered,\n       // for example just a '-' \n// so we don't want to show the error just yet\n} catch (Exception e) {\nsourceEditNumber.setError(\"ERROR: \" + e.getLocalizedMessage());\n}\ntimings.addSplit(\"finish conversion\");\n timings.dumpToLog();\n}\n```", "```kt\nadb shell setprop log.tag.TemperatureTag VERBOSE\n\n```", "```kt\nonTextChanged: begin\nonTextChanged:      0 ms, starting conversion\nonTextChanged:      2 ms, finish conversion\nonTextChanged: end, 2 ms\n\n```", "```kt\npublic class LaunchPerformanceBase extends Instrumentation {\n\n    private static final String TAG = \"LaunchPerformanceBase\";\n\n    protected Bundle results;\n    protected Intent intent;\n\n    public LaunchPerformanceBase() {\n        this.results = new Bundle();\n        this.intent = new Intent(Intent.ACTION_MAIN);\n        this.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        setAutomaticPerformanceSnapshots();\n    }\n\n    /**\n     * Launches intent {@link #intent}, \n  * and waits for idle before returning.\n     */\n    protected void launchApp() {\n        startActivitySync(intent);\n        waitForIdleSync();\n    }\n\n    @Override\n    public void finish(int resultCode, Bundle results) {\n        Log.v(TAG, \"Test results = \" + results);\n        super.finish(resultCode, results);\n    }\n}\n```", "```kt\npublic class TemperatureConverterActivityLaunchPerformance \nextends LaunchPerformanceBase {\n\n    @Override\n    public void onCreate(Bundle arguments) {\n      super.onCreate(arguments);\n      String className = \"com.blundell.tut.TemperatureConverterActivity\";\n      intent.setClassName(BuildConfig.APPLICATION_ID, className);\n      start();\n    }\n\n    @Override\n    public void onStart() {\n      super.onStart();\n      launchApp();\n      finish(Activity.RESULT_OK, results);\n    }\n}\n```", "```kt\napp/build.gradle:\n```", "```kt\ndefaultConfig {\n        // other code\n\n        testInstrumentationRunner \"com.blundell.tut.launchperf.TemperatureConverterActivityLaunchPerformance\"\n    }\n```", "```kt\n$ adb shell am instrument -w com.blundell.tut.test/com.blundell.tut.launchperf.TermeratureConverterActivityLaunchPerformance\n\n```", "```kt\nIINSTRUMENTATION_RESULT: other_pss=7866\nINSTRUMENTATION_RESULT: global_alloc_count=4009\nINSTRUMENTATION_RESULT: java_allocated=7271\nINSTRUMENTATION_RESULT: execution_time=347\nINSTRUMENTATION_RESULT: gc_invocation_count=0\nINSTRUMENTATION_RESULT: native_pss=0\nINSTRUMENTATION_RESULT: received_transactions=-1\nINSTRUMENTATION_RESULT: other_shared_dirty=7128\nINSTRUMENTATION_RESULT: native_shared_dirty=0\nINSTRUMENTATION_RESULT: java_free=4845\nINSTRUMENTATION_RESULT: java_size=12116\nINSTRUMENTATION_RESULT: global_freed_size=155012\nINSTRUMENTATION_RESULT: java_pss=1095\nINSTRUMENTATION_RESULT: pre_sent_transactions=-1\nINSTRUMENTATION_RESULT: java_private_dirty=884\nINSTRUMENTATION_RESULT: pre_received_transactions=-1\nINSTRUMENTATION_RESULT: other_private_dirty=6228\nINSTRUMENTATION_RESULT: native_private_dirty=0\nINSTRUMENTATION_RESULT: cpu_time=120\nINSTRUMENTATION_RESULT: sent_transactions=-1\nINSTRUMENTATION_RESULT: native_allocated=10430\nINSTRUMENTATION_RESULT: java_shared_dirty=8360\nINSTRUMENTATION_RESULT: global_freed_count=1949\nINSTRUMENTATION_RESULT: native_free=14145\nINSTRUMENTATION_RESULT: native_size=10430\nINSTRUMENTATION_RESULT: global_alloc_size=372992\nINSTRUMENTATION_CODE: -1\n```", "```kt\n$ adb shell am start -n com.blundell.tut/.TemperatureConverterActivity\n$ adb shell am profile com.blundell.tut start /mnt/sdcard/tc.trace\n\n```", "```kt\n$ adb shell am profile com.blundell.tut stop\n$ adb pull /mnt/sdcard/tc.trace /tmp/tc.trace\n7681 KB/s (1051585 bytes in 0.133s)\n\n$ traceview /tmp/tc.trace\n\n```", "```kt\n@Override\npublic void onTextChanged(CharSequence input, int start, int before, int count) {\n  if (!destinationEditNumber.hasWindowFocus() \n           || destinationEditNumber.hasFocus() || input == null) {\n     return;\n}\n\nString str = input.toString();\nif (\"\".equals(str)) {\n   destinationEditNumber.setText(\"\");\n   return;\n}\n\nif (BENCHMARK_TEMPERATURE_CONVERSION) {\nDebug.startMethodTracing();\n}\n\ntry {\ndouble temp = Double.parseDouble(str);\n   double result = (option == Option.C2F)\n      ? TemperatureConverter.celsiusToFahrenheit(temp) \n      : TemperatureConverter.fahrenheitToCelsius(temp);\nString resultString = String.format(\"%.2f\", result);\n   destinationEditNumber.setNumber(result);\n   destinationEditNumber.setSelection(resultString.length());\n} catch (NumberFormatException ignore) {\n// WARNING this is generated whilst numbers are being entered,\n   // for example just a '-' \n// so we don't want to show the error just yet\n} catch (Exception e) {\n   sourceEditNumber.setError(\"ERROR: \" + e.getLocalizedMessage());\n}\n\n if (BENCHMARK_TEMPERATURE_CONVERSION) {\n Debug.stopMethodTracing();\n }\n}\n```", "```kt\n$ adb pull /mnt/sdcard/dmtrace.trace /tmp/dmtrace.trace\n 8491 KB/s (120154 bytes in 0.013s)\n$ traceview /tmp/dmtrace.trace\n\n```", "```kt\ndmtracedump –t 40 –g dmtrace.png /tmp/dmtrace.trace \n\n```", "```kt\ndmtracedump –h /tmp/dmtrace.trace > dmtrace.html\n\n```", "```kt\ncompile project(':core').\n\n```", "```kt\ncompile 'net.trajano.caliper:caliper:1.1.1'\n\n```", "```kt\npublic class TemperatureConverterBenchmark {\n\n  public static void main(String[] args) {\nCaliperMain.main(CelsiusToFahrenheitBenchmark.class, args);\n  }\n\n  public static class CelsiusToFahrenheitBenchmark {\n\n   private static final double MULTIPLIER = 10;\n   @Param({\"1\", \"10\", \"100\"})\n   int total;\n\n   private List<Double> temperatures = new ArrayList<Double>();\n\n   @BeforeExperiment\n   public void setUp() {\n      temperatures.clear();\n      generateRandomTemperatures(total);\n}\n\n   private void generateRandomTemperatures(int total) {\n       Random r = new Random(System.currentTimeMillis());\n      for (int i = 0; i < total; i++) {\n        double randomTemperature = MULTIPLIER * r.nextGaussian();\n          temperatures.add(randomTemperature);\n   }\n   }\n\n   @Benchmark\n   public void timeCelsiusToFahrenheit(int reps) {\n   for (int i = 0; i < reps; i++) {\n         for (double t : temperatures) {\n            TemperatureConverter.celsiusToFahrenheit(t);\n         }\n}\n   }\n   }\n}\n```", "```kt\n Experiment selection: \n Instruments:   [allocation, runtime]\n User parameters:   {total=[1, 10, 100]}\n Virtual machines:  [default]\n Selection type:    Full cartesian product\n\nThis selection yields 6 experiments.\nStarting trial 1 of 6: {instrument=allocation, benchmarkMethod=timeCelsiusToFahrenheit, vm=default, parameters={total=1}}… Complete!\n bytes(B): min=32.00, 1st qu.=32.00, median=32.00, mean=32.00, 3rd qu.=32.00, max=32.00\n objects: min=1.00, 1st qu.=1.00, median=1.00, mean=1.00, 3rd qu.=1.00, max=1.00\n….\nStarting trial 6 of 6: {instrument=runtime, benchmarkMethod=timeCelsiusToFahrenheit, vm=default, parameters={total=100}}… Complete!\n runtime(ns): min=158.09, 1st qu.=159.52, median=161.16, mean=162.42, 3rd qu.=163.06, max=175.13\nExecution complete: 1.420m.\nCollected 81 measurements from:\n 2 instrument(s)\n 2 virtual machine(s)\n 3 benchmark(s)\nResults have been uploaded. View them at: https://microbenchmarks.appspot.com/runs/33dcd3fc-fde7-4a37-87d9-aa595b6c9224\n\n```", "```kt\n# Caliper config file\n# Run with --print-config to see all of the options being applied\n# INSTRUMENT CONFIG\n# instrument.micro.options.warmup=10s\n# instrument.micro.options.timingInterval=500ms\n# instrument.micro.options.reportedIntervals=7\n# instrument.micro.options.maxRuntime=10s\n# VM CONFIG\nvm.args=-Xmx3g -Xms3g\n# See the Caliper webapp to get a key so you can associate results with your account\nresults.upload.options.key=abc123-a123-123a-b123-a12312312\n```"]