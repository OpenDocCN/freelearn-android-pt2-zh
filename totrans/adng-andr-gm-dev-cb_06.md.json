["```kt\n      public static int cameraWidth = 800;\n      public static int cameraHeight = 480;\n      public Scene mScene;\n      public FixedStepPhysicsWorld mPhysicsWorld;\n      public Body groundWallBody;\n      public Body roofWallBody;\n      public Body leftWallBody;\n      public Body rightWallBody;\n    ```", "```kt\n      @Override\n      public Engine onCreateEngine(final EngineOptions\n          pEngineOptions) {\n        return new FixedStepEngine(pEngineOptions, 60);\n      }\n\n      @Override\n      public EngineOptions onCreateEngineOptions() {\n        EngineOptions engineOptions = new EngineOptions(true,\n          ScreenOrientation.LANDSCAPE_SENSOR, new\n            FillResolutionPolicy(), new Camera(0,\n              0, cameraWidth, cameraHeight));\n        engineOptions.getRenderOptions().setDithering(true);\n        engineOptions.getRenderOptions().\n          getConfigChooserOptions()\n            .setRequestedMultiSampling(true);\n        engineOptions.setWakeLockOptions(\n          WakeLockOptions.SCREEN_ON);\n        return engineOptions;\n      }\n\n      @Override\n      public void onCreateResources(OnCreateResourcesCallback\n          pOnCreateResourcesCallback) {\n        pOnCreateResourcesCallback.\n          onCreateResourcesFinished();\n      }\n\n      @Override\n      public void onCreateScene(OnCreateSceneCallback\n          pOnCreateSceneCallback) {\n        mScene = new Scene();\n        mScene.setBackground(new Background(0.9f,0.9f,0.9f));\n        pOnCreateSceneCallback.onCreateSceneFinished(mScene);\n      }\n    ```", "```kt\n      @Override\n      public void onPopulateScene(Scene pScene,\n        OnPopulateSceneCallback pOnPopulateSceneCallback) {\n      }\n    ```", "```kt\n        mPhysicsWorld = new FixedStepPhysicsWorld(60, new\n          Vector2(0f,-SensorManager.GRAVITY_EARTH*2),\n            false, 8, 3);\n        mScene.registerUpdateHandler(mPhysicsWorld);\n        final FixtureDef WALL_FIXTURE_DEF =\n          PhysicsFactory.createFixtureDef(0, 0.1f,\n            0.5f);\n        final Rectangle ground =\n          new Rectangle(cameraWidth / 2f, 6f,\n            cameraWidth - 4f, 8f,\n            this.getVertexBufferObjectManager());\n        final Rectangle roof = \n          new Rectangle(cameraWidth / 2f, cameraHeight – \n            6f, cameraWidth - 4f, 8f,\n            this.getVertexBufferObjectManager());\n        final Rectangle left = \n          new Rectangle(6f, cameraHeight / 2f, 8f, \n            cameraHeight - 4f,\n            this.getVertexBufferObjectManager());\n        final Rectangle right =\n            new Rectangle(cameraWidth - 6f,\n            cameraHeight / 2f, 8f,\n            cameraHeight - 4f,\n            this.getVertexBufferObjectManager());\n        ground.setColor(0f, 0f, 0f);\n        roof.setColor(0f, 0f, 0f);\n        left.setColor(0f, 0f, 0f);\n        right.setColor(0f, 0f, 0f);\n        groundWallBody =\n          PhysicsFactory.createBoxBody(\n          this.mPhysicsWorld, ground, \n          BodyType.StaticBody, WALL_FIXTURE_DEF);\n        roofWallBody =\n          PhysicsFactory.createBoxBody(\n          this.mPhysicsWorld, roof,\n          BodyType.StaticBody, WALL_FIXTURE_DEF);\n        leftWallBody =\n          PhysicsFactory.createBoxBody(\n          this.mPhysicsWorld, left,\n          BodyType.StaticBody, WALL_FIXTURE_DEF);\n        rightWallBody =\n          PhysicsFactory.createBoxBody(\n          this.mPhysicsWorld, right,\n          BodyType.StaticBody, WALL_FIXTURE_DEF);\n        this.mScene.attachChild(ground);\n        this.mScene.attachChild(roof);\n        this.mScene.attachChild(left);\n        this.mScene.attachChild(right);\n        // Further recipes in this chapter will require us\n          to place code here.\n        mScene.setOnSceneTouchListener(this);\n        pOnPopulateSceneCallback.onPopulateSceneFinished();\n    ```", "```kt\n      @Override\n      public boolean onSceneTouchEvent(Scene pScene, TouchEvent\n          pSceneTouchEvent) {\n        // Further recipes in this chapter will require us\n          to place code here.\n        return true;\n      }\n\n      @Override\n      public void onAccelerationAccuracyChanged(\n          AccelerationData pAccelerationData) {}\n\n      @Override\n      public void onAccelerationChanged(\n          AccelerationData pAccelerationData) {\n        final Vector2 gravity = Vector2Pool.obtain(\n          pAccelerationData.getX(), \n          pAccelerationData.getY());\n        this.mPhysicsWorld.setGravity(gravity);\n        Vector2Pool.recycle(gravity);\n      }\n\n      @Override\n      public void onResumeGame() {\n        super.onResumeGame();\n        this.enableAccelerationSensor(this);\n      }\n\n      @Override\n      public void onPauseGame() {\n        super.onPauseGame();\n        this.disableAccelerationSensor();\n      }\n    ```", "```kt\n    FixtureDef BoxBodyFixtureDef = \n      PhysicsFactory.createFixtureDef(20f, 0f, 0.5f);\n    ```", "```kt\n    Rectangle staticRectangle = new Rectangle(cameraWidth /\n      2f,75f,400f,40f,this.getVertexBufferObjectManager());\n    staticRectangle.setColor(0.8f, 0f, 0f);\n    mScene.attachChild(staticRectangle);\n    PhysicsFactory.createBoxBody(mPhysicsWorld, staticRectangle,\n      BodyType.StaticBody, BoxBodyFixtureDef);\n\n    Rectangle dynamicRectangle = new Rectangle(400f, 120f, 40f, 40f,\n      this.getVertexBufferObjectManager());\n    dynamicRectangle.setColor(0f, 0.8f, 0f);\n    mScene.attachChild(dynamicRectangle);\n    Body dynamicBody = PhysicsFactory.createBoxBody(mPhysicsWorld,\n      dynamicRectangle, BodyType.DynamicBody, BoxBodyFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      dynamicRectangle, dynamicBody);\n\n    Rectangle kinematicRectangle = new Rectangle(600f, 100f,\n      40f, 40f, this.getVertexBufferObjectManager());\n    kinematicRectangle.setColor(0.8f, 0.8f, 0f);\n    mScene.attachChild(kinematicRectangle);\n    Body kinematicBody = PhysicsFactory.createBoxBody(mPhysicsWorld,\n      kinematicRectangle, BodyType.KinematicBody, BoxBodyFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      kinematicRectangle, kinematicBody);\n    ```", "```kt\n    kinematicBody.setLinearVelocity(-2f, 0f);\n    kinematicBody.setAngularVelocity((float) (-Math.PI));\n    ```", "```kt\n    private int mBodyCount = 0;\n    public static final short CATEGORYBIT_DEFAULT = 1;\n    public static final short CATEGORYBIT_RED_BOX = 2;\n    public static final short CATEGORYBIT_GREEN_BOX = 4;\n    public static final short MASKBITS_RED_BOX =\n      CATEGORYBIT_DEFAULT + CATEGORYBIT_RED_BOX;\n    public static final short MASKBITS_GREEN_BOX =\n      CATEGORYBIT_DEFAULT + CATEGORYBIT_GREEN_BOX;\n    public static final FixtureDef RED_BOX_FIXTURE_DEF =\n      PhysicsFactory.createFixtureDef(1, 0.5f, 0.5f, false,\n        CATEGORYBIT_RED_BOX, MASKBITS_RED_BOX, (short)0);\n    public static final FixtureDef GREEN_BOX_FIXTURE_DEF =\n      PhysicsFactory.createFixtureDef(1, 0.5f, 0.5f, false,\n        CATEGORYBIT_GREEN_BOX, MASKBITS_GREEN_BOX, (short)0);\n    ```", "```kt\n    private void addBody(final float pX, final float pY) {\n      this.mBodyCount++;\n      final Rectangle rectangle = new Rectangle(pX, pY, 50f, 50f,\n        this.getVertexBufferObjectManager());\n      rectangle.setAlpha(0.5f);\n      final Body body;\n      if(this.mBodyCount % 2 == 0) {\n        rectangle.setColor(1f, 0f, 0f);\n        body = PhysicsFactory.createBoxBody(this.mPhysicsWorld,\n          rectangle, BodyType.DynamicBody, RED_FIXTURE_DEF);\n      } else {\n        rectangle.setColor(0f, 1f, 0f);\n        body = PhysicsFactory.createBoxBody(this.mPhysicsWorld,\n          rectangle, BodyType.DynamicBody, GREEN_FIXTURE_DEF);\n      }\n      this.mScene.attachChild(rectangle);\n      this.mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n        rectangle, body, true, true));\n    }\n    ```", "```kt\n    if(this.mPhysicsWorld != null)\n      if(pSceneTouchEvent.isActionDown())\n        this.addBody(pSceneTouchEvent.getX(),\n          pSceneTouchEvent.getY());\n    ```", "```kt\n    Rectangle nonbouncyBoxRect = new Rectangle(0f, 0f, 100f, 100f,\n      this.getEngine().getVertexBufferObjectManager());\n    nonbouncyBoxRect.setColor(0f, 0f, 0f);\n    nonbouncyBoxRect.setAnchorCenter(((nonbouncyBoxRect.getWidth() / 2) -\n      nonbouncyBoxRect.getX()) / nonbouncyBoxRect.getWidth(),\n        ((nonbouncyBoxRect.getHeight() / 2) –\n          nonbouncyBoxRect.getY()) /\n            nonbouncyBoxRect.getHeight());\n    mScene.attachChild(nonbouncyBoxRect);\n    Rectangle bouncyBoxRect = new Rectangle(0f, -55f, 90f, 10f,\n      this.getEngine().getVertexBufferObjectManager());\n    bouncyBoxRect.setColor(0f, 0.75f, 0f);\n    bouncyBoxRect.setAnchorCenter(((bouncyBoxRect.getWidth() / 2) –\n      bouncyBoxRect.getX()) / bouncyBoxRect.getWidth(),\n        ((bouncyBoxRect.getHeight() / 2) –\n          bouncyBoxRect.getY()) /\n            bouncyBoxRect.getHeight());\n    mScene.attachChild(bouncyBoxRect);\n    ```", "```kt\n    Body multiFixtureBody = mPhysicsWorld.createBody(new BodyDef());\n    multiFixtureBody.setType(BodyType.DynamicBody);\n\n    FixtureDef nonbouncyBoxFixtureDef =   PhysicsFactory.createFixtureDef(20, 0.0f, 0.5f);\n    final PolygonShape nonbouncyBoxShape = new PolygonShape();\n    nonbouncyBoxShape.setAsBox((nonbouncyBoxRect.getWidth() / 2f) /\n      PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n        (nonbouncyBoxRect.getHeight() / 2f) /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, \n            new Vector2(nonbouncyBoxRect.getX() /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n              nonbouncyBoxRect.getY() /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT), 0f);\n    nonbouncyBoxFixtureDef.shape = nonbouncyBoxShape;\n    multiFixtureBody.createFixture(nonbouncyBoxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      nonbouncyBoxRect, multiFixtureBody));\n\n    FixtureDef bouncyBoxFixtureDef = \n      PhysicsFactory.createFixtureDef(20, \t1f, 0.5f);\n    final PolygonShape bouncyBoxShape = new PolygonShape();\n    bouncyBoxShape.setAsBox((bouncyBoxRect.getWidth() / 2f) /\n      PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n        (bouncyBoxRect.getHeight() / 2f) /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, \n            new Vector2(bouncyBoxRect.getX() /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n              bouncyBoxRect.getY() /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT), 0f);\n    bouncyBoxFixtureDef.shape = bouncyBoxShape;\n    multiFixtureBody.createFixture(bouncyBoxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      bouncyBoxRect, multiFixtureBody));\n    ```", "```kt\n    multiFixtureBody.setTransform(400f /\n      PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, 240f /\n        PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, 0f);\n    ```", "```kt\n    List<Vector2> UniqueBodyVertices = new ArrayList<Vector2>();\n    UniqueBodyVertices.addAll((List<Vector2>) ListUtils.toList(\n      new Vector2[] {\n        new Vector2(-53f,-75f),\n        new Vector2(-107f,-14f),\n        new Vector2(-101f,41f),\n        new Vector2(-71f,74f),\n        new Vector2(69f,74f),\n        new Vector2(98f,41f),\n        new Vector2(104f,-14f),\n        new Vector2(51f,-75f),\n        new Vector2(79f,9f),\n        new Vector2(43f,34f),\n        new Vector2(-46f,34f),\n        new Vector2(-80f,9f)\n    }));\n    ```", "```kt\n    List<Vector2> UniqueBodyVerticesTriangulated =\n      new EarClippingTriangulator().\n        computeTriangles(UniqueBodyVertices);\n    ```", "```kt\n    float[] MeshTriangles =\n      new float[UniqueBodyVerticesTriangulated.size() * 3];\n    for(int i = 0; i < UniqueBodyVerticesTriangulated.size(); i++) {\n      MeshTriangles[i*3] = UniqueBodyVerticesTriangulated.get(i).x;\n      MeshTriangles[i*3+1] = UniqueBodyVerticesTriangulated.get(i).y;\n      UniqueBodyVerticesTriangulated.get(i).\n        mul(1/PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT);\n    }\n    Mesh UniqueBodyMesh = new Mesh(400f, 260f, MeshTriangles,\n      UniqueBodyVerticesTriangulated.size(), DrawMode.TRIANGLES,\n        this.getVertexBufferObjectManager());\n    UniqueBodyMesh.setColor(1f, 0f, 0f);\n    mScene.attachChild(UniqueBodyMesh);\n    ```", "```kt\n    FixtureDef uniqueBodyFixtureDef =\n      PhysicsFactory.createFixtureDef(20f, 0.5f, 0.5f);\n    Body uniqueBody = PhysicsFactory.createTrianglulatedBody(\n      mPhysicsWorld, UniqueBodyMesh, UniqueBodyVerticesTriangulated,\n        BodyType.DynamicBody, uniqueBodyFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(\n      new PhysicsConnector(UniqueBodyMesh, uniqueBody));\n    ```", "```kt\n    FixtureDef BoxBodyFixtureDef = \n      PhysicsFactory.createFixtureDef(20f, 0.6f, 0.5f);\n    Rectangle Box1 = new Rectangle(340f, 160f, 20f, 20f, \n      this.getVertexBufferObjectManager());\n    mScene.attachChild(Box1);\n    PhysicsFactory.createBoxBody(mPhysicsWorld, Box1, \n      BodyType.StaticBody, BoxBodyFixtureDef);\n    Rectangle Box2 = new Rectangle(600f, 160f, 20f, 20f, \n      this.getVertexBufferObjectManager());\n    mScene.attachChild(Box2);\n    PhysicsFactory.createBoxBody(mPhysicsWorld, Box2, \n      BodyType.StaticBody, BoxBodyFixtureDef);\n    ```", "```kt\n    LinearForceBody.applyForce(0f, 2000f, \n      LinearForceBody.getWorldCenter().x, \n      LinearForceBody.getWorldCenter().y);\n    ```", "```kt\n    LinearImpulseBody.applyLinearImpulse(0f, 200f, \n      LinearImpulseBody.getWorldCenter().x, \n      LinearImpulseBody.getWorldCenter().y);\n    ```", "```kt\n    LinearVelocityBody.setLinearVelocity(0f, 20f);\n    ```", "```kt\n    AngularTorqueBody.applyTorque(2000f);\n    ```", "```kt\n    AngularImpulseBody.applyAngularImpulse(20f);\n    ```", "```kt\n    AngularVelocityBody.setAngularVelocity(10f);\n    ```", "```kt\n    Body gravityBody;\n    Body antigravityBody;\n    final FixtureDef boxFixtureDef = PhysicsFactory.createFixtureDef(2f, 0.5f, 0.9f);\n    ```", "```kt\n    Rectangle GravityRect = new Rectangle(300f, 240f, 100f, 100f,   this.getEngine().getVertexBufferObjectManager());\n    GravityRect.setColor(0f, 0.7f, 0f);\n    mScene.attachChild(GravityRect);\n    mScene.registerTouchArea(GravityRect);\n    gravityBody = PhysicsFactory.createBoxBody(mPhysicsWorld, \n      GravityRect, BodyType.DynamicBody, boxFixtureDef);\n    gravityBody.setLinearDamping(0.4f);\n    gravityBody.setAngularDamping(0.6f);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      GravityRect, gravityBody));\n    ```", "```kt\n    Rectangle AntiGravityRect = new Rectangle(500f, 240f, 100f, 100f, \n      this.getEngine().getVertexBufferObjectManager()) {\n      @Override\n      protected void onManagedUpdate(final float pSecondsElapsed) {\n        super.onManagedUpdate(pSecondsElapsed);\n        antigravityBody.applyForce(\n          -mPhysicsWorld.getGravity().x * \n            antigravityBody.getMass(),\n          -mPhysicsWorld.getGravity().y * \n            antigravityBody.getMass(),\n          antigravityBody.getWorldCenter().x, \n          antigravityBody.getWorldCenter().y);\n      }\n    };\n    AntiGravityRect.setColor(0f, 0f, 0.7f);\n    mScene.attachChild(AntiGravityRect);\n    mScene.registerTouchArea(AntiGravityRect);\n    antigravityBody = PhysicsFactory.createBoxBody(mPhysicsWorld, \n      AntiGravityRect, BodyType.DynamicBody, boxFixtureDef);\n    antigravityBody.setLinearDamping(0.4f);\n    antigravityBody.setAngularDamping(0.6f);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      AntiGravityRect, antigravityBody));\n    ```", "```kt\n    Body LineJointBodyA;\n    Body LineJointBodyB;\n    final FixtureDef boxFixtureDef =\n      PhysicsFactory.createFixtureDef(20f, 0.2f, 0.9f);\n    ```", "```kt\n    Rectangle LineJointRectA = new Rectangle(228f, 240f, 30f, 30f,   this.getEngine().getVertexBufferObjectManager());\n    LineJointRectA.setColor(0.5f, 0.25f, 0f);\n    mScene.attachChild(LineJointRectA);\n    LineJointBodyA = PhysicsFactory.createBoxBody(mPhysicsWorld, \n      LineJointRectA, BodyType.KinematicBody, boxFixtureDef);\n    Rectangle LineJointRectB = new Rectangle(228f, 200f, 30f, 30f,\n        this.getEngine().getVertexBufferObjectManager()) {\n      @Override\n      protected void onManagedUpdate(final float pSecondsElapsed) \n      {\n        super.onManagedUpdate(pSecondsElapsed);\n        LineJointBodyB.applyTorque(1000f);\n        LineJointBodyB.setAngularVelocity( Math.min(\n          LineJointBodyB.getAngularVelocity(),0.2f));\n      }\n    };\n    LineJointRectB.setColor(0.75f, 0.375f, 0f);\n    mScene.attachChild(LineJointRectB);\n    LineJointBodyB = PhysicsFactory.createBoxBody(mPhysicsWorld, \n      LineJointRectB, BodyType.DynamicBody, boxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      LineJointRectB, LineJointBodyB));\n    ```", "```kt\n    final LineJointDef lineJointDef = new LineJointDef();\n    lineJointDef.initialize(LineJointBodyA, LineJointBodyB, \n    \tLineJointBodyB.getWorldCenter(), new Vector2(0f,1f));\n    lineJointDef.collideConnected = true;\n    lineJointDef.enableLimit = true;\n    lineJointDef.lowerTranslation = -220f / \n      PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT;\n    lineJointDef.upperTranslation = 0f;\n    lineJointDef.enableMotor = true;\n    lineJointDef.motorSpeed = -200f;\n    lineJointDef.maxMotorForce = 420f;\n    mPhysicsWorld.createJoint(lineJointDef);\n    ```", "```kt\nfinal DistanceJointDef distanceJointDef = new DistanceJointDef();\ndistanceJointDef.initialize(DistanceJointBodyA,\n  DistanceJointBodyB, DistanceJointBodyA.getWorldCenter(),\n    DistanceJointBodyB.getWorldCenter());\ndistanceJointDef.length = 3.0f;\ndistanceJointDef.frequencyHz = 1f;\ndistanceJointDef.dampingRatio = 0.001f;\n```", "```kt\nfinal MouseJointDef mouseJointDef = new MouseJointDef();\nmouseJointDef.bodyA = MouseJointBodyA;\nmouseJointDef.bodyB = MouseJointBodyB;\nmouseJointDef.dampingRatio = 0.0f;\nmouseJointDef.frequencyHz = 1f;\nmouseJointDef.maxForce = (100.0f * MouseJointBodyB.getMass());\n```", "```kt\nif(pSceneTouchEvent.isActionDown()) {\n  mouseJointDef.target.set(MouseJointBodyB.getWorldCenter());\n  mouseJoint = (MouseJoint)mPhysicsWorld.createJoint(\n    mouseJointDef);\n  final Vector2 vec = Vector2Pool.obtain(\n    pSceneTouchEvent.getX() / \n    PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, \n    pSceneTouchEvent.getY() / \n    PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT);\n  mouseJoint.setTarget(vec);\n  Vector2Pool.recycle(vec);\n} else if(pSceneTouchEvent.isActionMove()) {\n  final Vector2 vec = Vector2Pool.obtain(\n    pSceneTouchEvent.getX() / \n    PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, \n    pSceneTouchEvent.getY() / \n    PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT);\n  mouseJoint.setTarget(vec);\n  Vector2Pool.recycle(vec);\n} else if(pSceneTouchEvent.isActionCancel() || \n    pSceneTouchEvent.isActionOutside() || \n      pSceneTouchEvent.isActionUp()) {\n  mPhysicsWorld.destroyJoint(mouseJoint);\n}\n```", "```kt\nfinal PrismaticJointDef prismaticJointDef =\n  new PrismaticJointDef();\nprismaticJointDef.initialize(PrismaticJointBodyA,\n  PrismaticJointBodyB, PrismaticJointBodyA.getWorldCenter(), \n    new Vector2(0f,1f));\nprismaticJointDef.collideConnected = false;\nprismaticJointDef.enableLimit = true;\nprismaticJointDef.lowerTranslation = -80f / \n  PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT;\nprismaticJointDef.upperTranslation = 80f / \n  PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT;\nprismaticJointDef.enableMotor = true;\nprismaticJointDef.maxMotorForce = 400f;\nprismaticJointDef.motorSpeed = 500f;\nmPhysicsWorld.createJoint(prismaticJointDef);\n```", "```kt\nfinal PulleyJointDef pulleyJointDef = new PulleyJointDef();\npulleyJointDef.initialize(\n    PulleyJointBodyA,\n    PulleyJointBodyB,\n    PulleyJointBodyA.getWorldPoint(\n      new Vector2(0f, 2.5f)),\n    PulleyJointBodyB.getWorldPoint(\n      new Vector2(0f, 2.5f)),\n    PulleyJointBodyA.getWorldCenter(),\n    PulleyJointBodyB.getWorldCenter(),\n    1f);\nmPhysicsWorld.createJoint(pulleyJointDef);\n```", "```kt\nfinal RevoluteJointDef revoluteJointDef = new RevoluteJointDef();\nrevoluteJointDef.initialize(\n    RevoluteJointBodyA,\n    RevoluteJointBodyB,\n    RevoluteJointBodyA.getWorldCenter());\nrevoluteJointDef.enableMotor = true;\nrevoluteJointDef.maxMotorTorque = 5000f;\nrevoluteJointDef.motorSpeed = -1f;\nmPhysicsWorld.createJoint(revoluteJointDef);\n```", "```kt\nfinal WeldJointDef weldJointDef = new WeldJointDef();\nweldJointDef.initialize(WeldJointBodyA, WeldJointBodyB,\n  WeldJointBodyA.getWorldCenter());\nmPhysicsWorld.createJoint(weldJointDef);\n```", "```kt\n    public Rectangle dynamicRect;\n    public Rectangle staticRect;\n    public Body dynamicBody;\n    public Body staticBody;\n    public boolean setFullAlphaForDynamicBody = false;\n    public boolean setHalfAlphaForDynamicBody = false;\n    public boolean setFullAlphaForStaticBody = false;\n    public boolean setHalfAlphaForStaticBody = false;\n    final FixtureDef boxFixtureDef = PhysicsFactory.createFixtureDef(2f,\n      0f, 0.9f);\n    ```", "```kt\n    public boolean isBodyContacted(Body pBody, Contact pContact)\n    {\n      if(pContact.getFixtureA().getBody().equals(pBody) ||\n        pContact.getFixtureB().getBody().equals(pBody))\n        return true;\n      return false;\n    }\n    ```", "```kt\n    public boolean areBodiesContacted(Body pBody1, Body pBody2, Contact pContact)\n    {\n      if(pContact.getFixtureA().getBody().equals(pBody1) ||\n          pContact.getFixtureB().getBody().equals(pBody1))\n        if(pContact.getFixtureA().getBody().equals(pBody2) ||\n          pContact.getFixtureB().getBody().equals(pBody2))\n          return true;\n      return false;\n    }\n    ```", "```kt\n    dynamicRect = new Rectangle(300f, 240f, 100f, 100f, \n      this.getEngine().getVertexBufferObjectManager());\n    dynamicRect.setColor(0f, 0.7f, 0f);\n    dynamicRect.setAlpha(0.5f);\n    mScene.attachChild(dynamicRect);\n    dynamicBody = PhysicsFactory.createBoxBody(mPhysicsWorld, \n      dynamicRect, BodyType.DynamicBody, boxFixtureDef);\n    dynamicBody.setLinearDamping(0.4f);\n    dynamicBody.setAngularDamping(0.6f);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      dynamicRect, dynamicBody));\n\n    staticRect = new Rectangle(500f, 240f, 100f, 100f, \n      this.getEngine().getVertexBufferObjectManager());\n    staticRect.setColor(0f, 0f, 0.7f);\n    staticRect.setAlpha(0.5f);\n    mScene.attachChild(staticRect);\n    staticBody = PhysicsFactory.createBoxBody(mPhysicsWorld, staticRect,\n      BodyType.StaticBody, boxFixtureDef);\n    ```", "```kt\n    mPhysicsWorld.setContactListener(new ContactListener(){\n      @Override\n      public void beginContact(Contact contact) {\n        if(contact.isTouching())\n        if(areBodiesContacted(staticBody,dynamicBody,contact))\n          setFullAlphaForStaticBody = true;\n        if(isBodyContacted(dynamicBody,contact))\n          setFullAlphaForDynamicBody = true;\n      }\n      @Override\n      public void endContact(Contact contact) {\n        if(areBodiesContacted(staticBody,dynamicBody,contact))\n          setHalfAlphaForStaticBody = true;\n        if(isBodyContacted(dynamicBody,contact))\n          setHalfAlphaForDynamicBody = true;\n      }\n      @Override\n      public void preSolve(Contact contact, Manifold oldManifold) {}\n      @Override\n      public void postSolve(Contact contact, ContactImpulse impulse) {}\n    });\n    ```", "```kt\n    mScene.registerUpdateHandler(new IUpdateHandler() {\n      @Override\n      public void onUpdate(float pSecondsElapsed) {\n        if(setFullAlphaForDynamicBody) {\n          dynamicRect.setAlpha(1f);\n          setFullAlphaForDynamicBody = false;\n        } else if(setHalfAlphaForDynamicBody) {\n          dynamicRect.setAlpha(0.5f);\n          setHalfAlphaForDynamicBody = false;\n        }\n        if(setFullAlphaForStaticBody) {\n          staticRect.setAlpha(1f);\n          setFullAlphaForStaticBody = false;\n        } else if(setHalfAlphaForStaticBody) {\n          staticRect.setAlpha(0.5f);\n          setHalfAlphaForStaticBody = false;\n        }\n      }\n      @Override public void reset() {}\n    });\n    ```", "```kt\n    Body dynamicBody;\n    Body staticBody;\n    FixtureDef boxFixtureDef = PhysicsFactory.createFixtureDef(20f, 0.5f,\n      0.9f);\n    Vector2 localMouseJointTarget = new Vector2();\n    MouseJointDef mouseJointDef;\n    MouseJoint mouseJoint;\n    Body groundBody;\n    ```", "```kt\n    public boolean isBodyContacted(Body pBody, Contact pContact)\n    {\n      if(pContact.getFixtureA().getBody().equals(pBody) ||\n          pContact.getFixtureB().getBody().equals(pBody))\n        return true;\n      return false;\n    }\n\n    public boolean areBodiesContacted(Body pBody1, Body pBody2, Contact pContact)\n    {\n      if(pContact.getFixtureA().getBody().equals(pBody1) ||\n          pContact.getFixtureB().getBody().equals(pBody1))\n        if(pContact.getFixtureA().getBody().equals(pBody2) ||\n          pContact.getFixtureB().getBody().equals(pBody2))\n          return true;\n      return false;\n    }\n    ```", "```kt\n    Rectangle dynamicRect = new Rectangle(400f, 60f, 40f, 40f, \n      this.getEngine().getVertexBufferObjectManager());\n    dynamicRect.setColor(0f, 0.6f, 0f);\n    mScene.attachChild(dynamicRect);\n    dynamicBody = PhysicsFactory.createBoxBody(mPhysicsWorld, \n      dynamicRect, BodyType.DynamicBody, boxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      dynamicRect, dynamicBody));\n\n    Rectangle staticRect = new Rectangle(400f, 240f, 200f, 10f,\n      this.getEngine().getVertexBufferObjectManager());\n    staticRect.setColor(0f, 0f, 0f);\n    mScene.attachChild(staticRect);\n    staticBody = PhysicsFactory.createBoxBody(mPhysicsWorld, staticRect,\n      BodyType.StaticBody, boxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      staticRect, staticBody));\n    ```", "```kt\n    mPhysicsWorld.setContactListener(new ContactListener(){\n      float maxImpulse;\n      @Override\n      public void beginContact(Contact contact) {}\n\n      @Override\n      public void endContact(Contact contact) {}\n\n      @Override\n      public void preSolve(Contact contact, Manifold oldManifold) {\n        if(areBodiesContacted(dynamicBody, staticBody, contact))\n          if(dynamicBody.getWorldCenter().y < \n              staticBody.getWorldCenter().y)\n            contact.setEnabled(false);\n      }\n\n      @Override\n      public void postSolve(Contact contact, ContactImpulse impulse) {\n        if(areBodiesContacted(dynamicBody, staticBody, contact)) {\n          maxImpulse = impulse.getNormalImpulses()[0];\n          for(int i = 1; i <\n              impulse.getNormalImpulses().length;\n              i++)\n            maxImpulse = Math.max( \n              impulse.getNormalImpulses()[i],\n              maxImpulse);\n          if(maxImpulse>400f)\n            dynamicBody.setAngularVelocity(30f);\n        }\n      }\n    });\n    ```", "```kt\n    groundBody = mPhysicsWorld.createBody(new BodyDef());\n    mouseJointDef = new MouseJointDef();\n    mouseJointDef.bodyA = groundBody;\n    mouseJointDef.bodyB = dynamicBody;\n    mouseJointDef.dampingRatio = 0.5f;\n    mouseJointDef.frequencyHz = 1f;\n    mouseJointDef.maxForce = (40.0f * dynamicBody.getMass());\n    mouseJointDef.collideConnected = false;\n    ```", "```kt\n    if(pSceneTouchEvent.isActionDown()) {\n      mouseJointDef.target.set(dynamicBody.getWorldCenter());\n      mouseJoint = (MouseJoint)mPhysicsWorld.createJoint(mouseJointDef);\n      final Vector2 vec = Vector2Pool.obtain(pSceneTouchEvent.getX() / \n        PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, \n          pSceneTouchEvent.getY() / \n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT);\n      mouseJoint.setTarget(vec);\n      Vector2Pool.recycle(vec);\n    } else if(pSceneTouchEvent.isActionMove()) {\n      final Vector2 vec = Vector2Pool.obtain(pSceneTouchEvent.getX() / \n        PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT, \n          pSceneTouchEvent.getY() / \n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT);\n      mouseJoint.setTarget(vec);\n      Vector2Pool.recycle(vec);\n      return true;\n    } else if(pSceneTouchEvent.isActionCancel() || \n        pSceneTouchEvent.isActionOutside() || \n        pSceneTouchEvent.isActionUp()) {\n      mPhysicsWorld.destroyJoint(mouseJoint);\n    }\n    ```", "```kt\n    public Body box1Body;\n    public Body box2Body;\n    public Body box3Body;\n    public boolean breakOffBox1 = false;\n    public boolean breakOffBox2 = false;\n    public boolean breakOffBox3 = false;\n    public Joint box1And2Joint;\n    public Joint box2And3Joint;\n    public Joint box3And1Joint;\n    public boolean box1And2JointActive = true;\n    public boolean box2And3JointActive = true;\n    public boolean box3And1JointActive = true;\n    public final FixtureDef boxFixtureDef = \n      PhysicsFactory.createFixtureDef(20f, 0.0f, 0.9f);\n    ```", "```kt\n    public boolean isBodyContacted(Body pBody, Contact pContact)\n    {\n      if(pContact.getFixtureA().getBody().equals(pBody) ||\n          pContact.getFixtureB().getBody().equals(pBody))\n        return true;\n      return false;\n    }\n    ```", "```kt\n    Rectangle box1Rect = new Rectangle(400f, 260f, 40f, 40f, \n      this.getEngine().getVertexBufferObjectManager());\n    box1Rect.setColor(0.75f, 0f, 0f);\n    mScene.attachChild(box1Rect);\n    box1Body = PhysicsFactory.createBoxBody(mPhysicsWorld, box1Rect,\n      BodyType.DynamicBody, boxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      box1Rect, box1Body));\n\n    Rectangle box2Rect = new Rectangle(380f, 220f, 40f, 40f, \n      this.getEngine().getVertexBufferObjectManager());\n    box2Rect.setColor(0f, 0.75f, 0f);\n    mScene.attachChild(box2Rect);\n    box2Body = PhysicsFactory.createBoxBody(mPhysicsWorld, box2Rect, \n      BodyType.DynamicBody, boxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      box2Rect, box2Body));\n    Rectangle box3Rect = new Rectangle(420f, 220f, 40f, 40f,\n      this.getEngine().getVertexBufferObjectManager());\n    box3Rect.setColor(0f, 0f, 0.75f);\n    mScene.attachChild(box3Rect);\n    box3Body = PhysicsFactory.createBoxBody(mPhysicsWorld, box3Rect, \n      BodyType.DynamicBody, boxFixtureDef);\n    mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(\n      box3Rect, box3Body));\n    ```", "```kt\n    final WeldJointDef box1and2JointDef = new WeldJointDef();\n    box1and2JointDef.initialize(box1Body, box2Body,\n      box1Body.getWorldCenter());\n    box1And2Joint = mPhysicsWorld.createJoint(box1and2JointDef);\n\n    final WeldJointDef box2and3JointDef = new WeldJointDef();\n    box2and3JointDef.initialize(box2Body, box3Body,\n      box2Body.getWorldCenter());\n    box2And3Joint = mPhysicsWorld.createJoint(box2and3JointDef);\n\n    final WeldJointDef box3and1JointDef = new WeldJointDef();\n    box3and1JointDef.initialize(box3Body, box1Body,\n      box3Body.getWorldCenter());\n    box3And1Joint = mPhysicsWorld.createJoint(box3and1JointDef);\n    ```", "```kt\n    mPhysicsWorld.setContactListener(new ContactListener(){\n      float maxImpulse;\n      @Override\n      public void beginContact(Contact contact) {}\n      @Override\n      public void endContact(Contact contact) {}\n      @Override\n      public void preSolve(Contact contact, Manifold oldManifold) {}\t@Override\n      public void postSolve(Contact contact, ContactImpulse impulse) {\n        maxImpulse = impulse.getNormalImpulses()[0];\n        for(int i = 1; i < impulse.getNormalImpulses().length; i++) \n        {\n          maxImpulse = Math.max(impulse.getNormalImpulses()[i],\n            maxImpulse);\n        }\n        if(maxImpulse>800f) {\n          if(isBodyContacted(box1Body,contact))\n            breakOffBox1 = true;\n          else if(isBodyContacted(box2Body,contact))\n            breakOffBox2 = true;\n          else if(isBodyContacted(box3Body,contact))\n            breakOffBox3 = true;\n        }\n      }\n    });\n    ```", "```kt\n    mScene.registerUpdateHandler(new IUpdateHandler() {\n      @Override\n      public void onUpdate(float pSecondsElapsed) {\n        if(breakOffBox1) {\n          if(box1And2JointActive)\n            mPhysicsWorld.destroyJoint(box1And2Joint);\n          if(box3And1JointActive)\n            mPhysicsWorld.destroyJoint(box3And1Joint);\n          box1And2JointActive = false;\n          box3And1JointActive = false;\n          breakOffBox1 = false;\n        }\n        if(breakOffBox2) {\n          if(box1And2JointActive)\n            mPhysicsWorld.destroyJoint(box1And2Joint);\n          if(box2And3JointActive)\n            mPhysicsWorld.destroyJoint(box2And3Joint);\n          box1And2JointActive = false;\n          box2And3JointActive = false;\n          breakOffBox1 = false;\n        }\n        if(breakOffBox3) {\n          if(box2And3JointActive)\n            mPhysicsWorld.destroyJoint(box2And3Joint);\n          if(box3And1JointActive)\n            mPhysicsWorld.destroyJoint(box3And1Joint);\n          box2And3JointActive = false;\n          box3And1JointActive = false;\n          breakOffBox1 = false;\n        }\n      }\n      @Override public void reset() {}\n    });\n    ```", "```kt\n    Body BoxBody;\n    Line RayCastLine;\n    Line RayCastLineHitNormal;\n    Line RayCastLineHitBounce;\n    float[] RayCastStart = {cameraWidth/2f,15f};\n    float RayCastAngle = 0f;\n    float RayCastNormalAngle = 0f;\n    float RayCastBounceAngle = 0f;\n    float RaycastBounceLineLength = 200f;\n    final FixtureDef boxFixtureDef =\n      PhysicsFactory.createFixtureDef(1f, 0.5f, 0.9f);\n    ```", "```kt\n    RayCastCallback rayCastCallBack = new RayCastCallback() {\n      @Override\n      public float reportRayFixture(Fixture fixture, Vector2 point,\n        Vector2 normal, float fraction)\n      {\n        float[] linePos = {\n          point.x * \n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n          point.y * \n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n          (point.x + (normal.x)) *\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n          (point.y + (normal.y)) *\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT};\n      RayCastLineHitNormal.setPosition(\n        linePos[0],linePos[1],\n        linePos[2],linePos[3]);\n      RayCastLineHitNormal.setVisible(true);\n      RayCastNormalAngle = MathUtils.radToDeg(\n        (float) Math.atan2(\n          linePos[3]-linePos[1],\n          linePos[2]-linePos[0]));\n      RayCastBounceAngle = (2*RayCastNormalAngle)-RayCastAngle;\n      RayCastLineHitBounce.setPosition(\n        linePos[0], linePos[1],\n        (linePos[0] + FloatMath.cos((RayCastBounceAngle + 180f) * \n          MathConstants.DEG_TO_RAD) * RaycastBounceLineLength),\n        (linePos[1] + FloatMath.sin((RayCastBounceAngle + 180f) * \n          MathConstants.DEG_TO_RAD)*RaycastBounceLineLength));\n      RayCastLineHitBounce.setVisible(true);\n      return 0f;\n      }\n    };\n    ```", "```kt\n    Rectangle Box1 = new Rectangle(400f, 350f, 200f, 200f, \n      this.getEngine().getVertexBufferObjectManager());\n    Box1.setColor(0.3f, 0.3f, 0.3f);\n    BoxBody = PhysicsFactory.createBoxBody(mPhysicsWorld, Box1,\n      BodyType.StaticBody, boxFixtureDef);\n    BoxBody.setTransform(BoxBody.getWorldCenter(), MathUtils.random(0.349f, 1.222f));\n    mScene.attachChild(Box1);\n    mPhysicsWorld.registerPhysicsConnector(\n      new PhysicsConnector(Box1, BoxBody));\n    ```", "```kt\n    RayCastLine = new Line(0f, 0f, 0f, 0f,\n      mEngine.getVertexBufferObjectManager());\n    RayCastLine.setColor(0f, 1f, 0f);\n    RayCastLine.setLineWidth(8f);\n    mScene.attachChild(RayCastLine);\n\n    RayCastLineHitNormal = new Line(0f, 0f, 0f, 0f, \n      mEngine.getVertexBufferObjectManager());\n    RayCastLineHitNormal.setColor(1f, 0f, 0f);\n    RayCastLineHitNormal.setLineWidth(8f);\n    mScene.attachChild(RayCastLineHitNormal);\n\n    RayCastLineHitBounce = new Line(0f, 0f, 0f, 0f, \n      mEngine.getVertexBufferObjectManager());\n    RayCastLineHitBounce.setColor(0f, 0f, 1f);\n    RayCastLineHitBounce.setLineWidth(8f);\n    mScene.attachChild(RayCastLineHitBounce);\n    ```", "```kt\n    if(pSceneTouchEvent.isActionMove()||pSceneTouchEvent.isActionDown()){\n      RayCastAngle = MathUtils.radToDeg((float)\n        Math.atan2(pSceneTouchEvent.getY() - RayCastStart[1],\n          pSceneTouchEvent.getX() - RayCastStart[0]));\n      RayCastLine.setPosition(\n        RayCastStart[0], RayCastStart[1],\n        pSceneTouchEvent.getX(), pSceneTouchEvent.getY());\n      RayCastLine.setVisible(true);\n      RayCastLineHitNormal.setVisible(false);\n      RayCastLineHitBounce.setVisible(false);\n      mPhysicsWorld.rayCast(rayCastCallBack, \n        new Vector2(\n          RayCastStart[0] / \n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n          RayCastStart[1] /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT),\n        new Vector2(\n          pSceneTouchEvent.getX() /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT,\n          pSceneTouchEvent.getY() /\n          PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT));\n    }\n    if(pSceneTouchEvent.isActionUp() || \n      pSceneTouchEvent.isActionOutside() || \n      pSceneTouchEvent.isActionCancel())\n    {\n      RayCastLine.setVisible(false);\n    }\n    ```"]