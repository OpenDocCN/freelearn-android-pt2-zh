["```kt\n    public class Example{\n      public static void main(String []args){\n        System.out.printf(\"Hello World!\\n\");\n      }\n    }\n    ```", "```kt\n    javac –source 1.6 –target 1.6 Example.java\n\n    ```", "```kt\n    [SDK path]/sdk/platform-tools/dx\n\n    ```", "```kt\n    /sdk/built-tools/android-[version]/dx\n\n    ```", "```kt\n    [SDK path]/sdk/platform-tools/dx –-dex –-output=Example.dex Example.class\n\n    ```", "```kt\nstruct DexFile {\n/* directly-mapped \"opt\" header */\n  const DexOptHeader* pOptHeader;\n\n/* pointers to directly-mapped structs and arrays in base DEX */\n  const DexHeader*    pHeader;\n  const DexStringId*  pStringIds;\n  const DexTypeId*    pTypeIds;\n  const DexFieldId*   pFieldIds;\n  const DexMethodId*  pMethodIds;\n  const DexProtoId*   pProtoIds;\n  const DexClassDef*  pClassDefs;\n  const DexLink*      pLinkData;\n/*\n    * These are mapped out of the \"auxiliary\" section, and may not be\n    * included in the file.\n*/\n  const DexClassLookup* pClassLookup;\n  const void*         pRegisterMapPool;       // RegisterMapClassPool\n\n/* points to start of DEX file data */\n  const u1*           baseAddr;\n\n/* track memory overhead for auxiliary structures */\n  int                 overhead;\n\n/* additional app-specific data structures associated with the DEX */\n  //void*               auxData;\n};\n```", "```kt\nstruct DexHeader {\n  u1  magic[8];           /* includes version number */\n  u4  checksum;           /* adler32 checksum */\n  u1  signature[kSHA1DigestLen]; /* SHA-1 hash */\n  u4  fileSize;           /* length of entire file */\n  u4  headerSize;         /* offset to start of next section */\n  u4  endianTag;\n  u4  linkSize;\n  u4  linkOff;\n  u4  mapOff;\n  u4  stringIdsSize;\n  u4  stringIdsOff;\n  u4  typeIdsSize;\n  u4  typeIdsOff;\n  u4  protoIdsSize;\n  u4  protoIdsOff;\n  u4  fieldIdsSize;\n  u4  fieldIdsOff;\n  u4  methodIdsSize;\n  u4  methodIdsOff;\n  u4  classDefsSize;\n  u4  classDefsOff;\n  u4  dataSize;\n  u4  dataOff;\n};\n```", "```kt\n  typedef uint8_t             u1; /*8 byte unsigned integer*/\n  typedef uint16_t            u2; /*16 byte unsigned integer*/\n  typedef uint32_t            u4; /*32 byte unsigned integer*/\n  typedef uint64_t            u8; /*64 byte unsigned integer*/\n  typedef int8_t              s1; /*8 byte signed integer*/\n  typedef int16_t             s2; /*16 byte signed integer*/\n  typedef int32_t             s4; /*32 byte signed integer*/\n  typedef int64_t             s8; /*64 byte signed integer*/\n```", "```kt\n  u1  magic[8];           /* includes version number */\n```", "```kt\n  u4  checksum;           /* adler32 checksum */\n```", "```kt\n  u1  signature[kSHA1DigestLen]; /* SHA-1 hash length = 20*/\n```", "```kt\n  u4  fileSize;/* length of entire file */\n```", "```kt\n  u4  headerSize;/* offset to start of next section */\n```", "```kt\n  u4  endianTag;\n```", "```kt\n  u4  linkSize;\n  u4  linkOff;\n```", "```kt\n  u4  mapOff;\n```", "```kt\n  u4  stringIdsSize;\n```", "```kt\n  u4  stringIdsOff;\n```", "```kt\n  u4  typeIdsSize;\n  u4  typeIdsOff;\n  u4  protoIdsSize;\n  u4  protoIdsOff;\n  u4  fieldIdsSize;\n  u4  fieldIdsOff;\n  u4  methodIdsSize;\n  u4  methodIdsOff;\n  u4  classDefsSize;\n  u4  classDefsOff;\n  u4  dataSize;\n  u4  dataOff;\n```", "```kt\nstruct DexStringId {\n  u4 stringDataOff;      /* file offset to string_data_item */\n};\n```", "```kt\nDEX_INLINE const char* dexGetStringData(const DexFile* pDexFile,\n  const DexStringId* pStringId) {\n    const u1* ptr = pDexFile->baseAddr + pStringId->stringDataOff;\n\n    // Skip the uleb128 length.\n    while (*(ptr++) > 0x7f) /* empty */ ;\n\n    return (const char*) ptr;\n}\n```", "```kt\n shows how the arguments are parsed and how the file data is used. It is as follows:\n```", "```kt\nvoid dexFileSetupBasicPointers(DexFile* pDexFile, const u1* data){\n    DexHeader *pHeader = (DexHeader*) data;\n\n    pDexFile->baseAddr = data;\n    pDexFile->pHeader = pHeader;\n    pDexFile->pStringIds = (const DexStringId*) (data + pHeader-      >stringIdsOff);\n...some code has been omitted for brevity\n}\n```", "```kt\nstruct DexTypeId {\n  u4  descriptorIdx;      /* index into stringIds list for type descriptor */\n};\n```", "```kt\nstruct DexProtoId {\n  u4  shortyIdx;          /* index into stringIds for shorty descriptor */\n  u4  returnTypeIdx;      /* index into typeIds list for return type */\n  u4  parametersOff;      /* file offset to type_list for parameter types */\n};\n```", "```kt\nstruct DexFieldId {\n  u2  classIdx;           /* index into typeIds list for defining class */\n  u2  typeIdx;            /* index into typeIds for field type */\n  u4  nameIdx;            /* index into stringIds for field name */\n};\n```", "```kt\nstruct DexMethodId {\n  u2  classIdx;           /* index into typeIds list for defining class */\n  u2  protoIdx;           /* index into protoIds for method prototype */\n  u4  nameIdx;            /* index into stringIds for method name */\n};\n```", "```kt\n([Ljava/lang/String;)V\n```", "```kt\nstruct DexClassDef {\n  u4  classIdx;           /* index into typeIds for this class */\n  u4  accessFlags;\n  u4  superclassIdx;      /* index into typeIds for superclass */\n  u4  interfacesOff;      /* file offset to DexTypeList */\n  u4  sourceFileIdx;      /* index into stringIds for source file name */\n  u4  annotationsOff;     /* file offset to annotations_directory_item */\n  u4  classDataOff;       /* file offset to class_data_item */\n  u4  staticValuesOff;    /* file offset to DexEncodedArray */\n};\n```", "```kt\nenum {\n  ACC_PUBLIC       = 0x00000001,       // class, field, method, ic\n  ACC_PRIVATE      = 0x00000002,       // field, method, ic\n  ACC_PROTECTED    = 0x00000004,       // field, method, ic\n  ACC_STATIC       = 0x00000008,       // field, method, ic\n  ACC_FINAL        = 0x00000010,       // class, field, method, ic\n  ACC_SYNCHRONIZED = 0x00000020,       // method (only allowed on natives)\n  ACC_SUPER        = 0x00000020,       // class (not used in Dalvik)\n  ACC_VOLATILE     = 0x00000040,       // field\n  ACC_BRIDGE       = 0x00000040,       // method (1.5)\n  ACC_TRANSIENT    = 0x00000080,       // field\n  ACC_VARARGS      = 0x00000080,       // method (1.5)\n  ACC_NATIVE       = 0x00000100,       // method\n  ACC_INTERFACE    = 0x00000200,       // class, ic\n  ACC_ABSTRACT     = 0x00000400,       // class, method, ic\n  ACC_STRICT       = 0x00000800,       // method\n  ACC_SYNTHETIC    = 0x00001000,       // field, method, ic\n  ACC_ANNOTATION   = 0x00002000,       // class, ic (1.5)\n  ACC_ENUM         = 0x00004000,       // class, field, ic (1.5)\n  ACC_CONSTRUCTOR  = 0x00010000,       // method (Dalvik only)\n  ACC_DECLARED_SYNCHRONIZED =\n  0x00020000,       // method (Dalvik only)\n  ACC_CLASS_MASK =\n  (ACC_PUBLIC | ACC_FINAL | ACC_INTERFACE | ACC_ABSTRACT\n  | ACC_SYNTHETIC | ACC_ANNOTATION | ACC_ENUM),\n  ACC_INNER_CLASS_MASK =\n  (ACC_CLASS_MASK | ACC_PRIVATE | ACC_PROTECTED | ACC_STATIC),\n  ACC_FIELD_MASK =\n  (ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_STATIC | ACC_FINAL\n  | ACC_VOLATILE | ACC_TRANSIENT | ACC_SYNTHETIC | ACC_ENUM),\n  ACC_METHOD_MASK =\n  (ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_STATIC | ACC_FINAL\n  | ACC_SYNCHRONIZED | ACC_BRIDGE | ACC_VARARGS | ACC_NATIVE\n  | ACC_ABSTRACT | ACC_STRICT | ACC_SYNTHETIC | ACC_CONSTRUCTOR\n  | ACC_DECLARED_SYNCHRONIZED),\n};\n```", "```kt\n/* expanded form of class_data_item. Note: If a particular item is\n * absent (e.g., no static fields), then the corresponding pointer\n * is set to NULL. */\nstruct DexClassData {\n  DexClassDataHeader header;\n  DexField*          staticFields;\n  DexField*          instanceFields;\n  DexMethod*         directMethods;\n  DexMethod*         virtualMethods;\n};\n```", "```kt\nstruct DexMethod {\n  u4 methodIdx;    /* index to a method_id_item */\n  u4 accessFlags;\n  u4 codeOff;      /* file offset to a code_item */\n};\n```", "```kt\n[SDK-path]/build-tools/android-[version]/dexdump classes.dex\n\n```", "```kt\n[SDK-path]/build-tools/android-[version]/dexdump Example.dex\n\n```", "```kt\ndx –dex –verbose-dump –dump-to=[output-file].txt [input-file].class\n\n```", "```kt\n000000: 6465 780a 3033|magic: \"dex\\n035\\0\"\n000006: 3500          |\n000008: 3567 e33f     |checksum\n00000c: b7ed dd99 5d35|signature\n000012: 754f 9c54 0302|\n000018: 62ea 0045 3d3d|\n00001e: 4e48          |\n000020: 1003 0000     |file_size:       00000310\n000024: 7000 0000     |header_size:     00000070\n000028: 7856 3412     |endian_tag:      12345678\n00002c: 0000 0000     |link_size:       0\n000030: 0000 0000     |link_off:        0\n000034: 7002 0000     |map_off:         00000270\n000038: 1000 0000     |string_ids_size: 00000010\n00003c: 7000 0000     |string_ids_off:  00000070\n000040: 0800 0000     |type_ids_size:   00000008\n000044: b000 0000     |type_ids_off:    000000b0\n000048: 0300 0000     |proto_ids_size:  00000003\n00004c: d000 0000     |proto_ids_off:   000000d0\n000050: 0100 0000     |field_ids_size:  00000001\n000054: f400 0000     |field_ids_off:   000000f4\n000058: 0400 0000     |method_ids_size: 00000004\n00005c: fc00 0000     |method_ids_off:  000000fc\n000060: 0100 0000     |class_defs_size: 00000001\n000064: 1c01 0000     |class_defs_off:  0000011c\n000068: d401 0000     |data_size:       000001d4\n00006c: 3c01 0000     |data_off:        0000013c\n                      |\n                      |\n```", "```kt\nmove vA,vB\n```", "```kt\n    mv baksmali-[version-number].jar baksmali.jar\n\n    ```", "```kt\n    chmod +x 700 baksmali\n\n    ```", "```kt\nbaksmali [Dex filename].dex\n\n```", "```kt\n.class public LExample;\n.super Ljava/lang/Object;\n.source \"Example.java\"\n\n# direct methods\n.method public constructor <init>()V\n    .registers 1\n\n    .prologue\n    .line 1\n    invoke-direct {p0}, Ljava/lang/Object;-><init>()V\n\n    return-void\n.end method\n\n.method public static main([Ljava/lang/String;)V\n    .registers 4\n\n    .prologue\n    .line 3\n    sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;\n\n    const-string v1, \"Hello World!\\n\"\n\n    const/4 v2, 0x0\n\n    new-array v2, v2, [Ljava/lang/Object;\n\n    invoke-virtual {v0, v1, v2}, Ljava/io/PrintStream;->printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;\n\n    .line 4\n    return-void\n.end method\n```", "```kt\n.class public LExample;\n.super Ljava/lang/Object;\n.source \"Example.java\"\n```", "```kt\n# direct methods\n.method public constructor <init>()V\n    .registers 1\n\n    .prologue\n    .line 1\n    invoke-direct {p0}, Ljava/lang/Object;-><init>()V\n\n    return-void\n.end method\n```", "```kt\n.registers 1\n```", "```kt\n.prologue\n```", "```kt\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\n```", "```kt\nreturn-void\n```", "```kt\n.method public static main([Ljava/lang/String;)V\n    .registers 4\n\n    .prologue\n    .line 3\n    sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;\n\n    const-string v1, \"Hello World!\\n\"\n\n    const/4 v2, 0x0\n\n    new-array v2, v2, [Ljava/lang/Object;\n\n    invoke-virtual {v0, v1, v2}, Ljava/io/PrintStream;->printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;\n\n    .line 4\n    return-void\n.end method\n```", "```kt\n([Ljava/lang/String;)V\n```", "```kt\nsget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;\n```", "```kt\nconst-string v1, \"Hello World!\\n\"\n```", "```kt\nconst/4 v2, 0x0\n```", "```kt\nnew-array v2, v2, [Ljava/lang/Object;\n```", "```kt\ninvoke-virtual {v0, v1, v2}, Ljava/io/PrintStream;->printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;\n```", "```kt\ninvoke-kind {vC, vD, vE, vF, vG}, meth@BBBB\n```", "```kt\n    dex2jar [Dex file].dex\n\n    ```", "```kt\n    dex2jar Example.dex\n\n    ```", "```kt\n    jd-gui\n\n    ```", "```kt\narm-linux-androideabi-objdump –D [native library].so\n\n```", "```kt\n    [SDK-path]/sdk/tools/emulator –no-boot-anim –memory 128 –partition-size 512\n\n    ```", "```kt\n    abd shell\n\n    ```", "```kt\n    mount\n\n    ```", "```kt\n    mount –o rw,remount [device] /system\n\n    ```", "```kt\n    adb push [NDK-path]/prebuilt/android-arm/gdbserver/gdbserver /system/bin\n\n    ```", "```kt\n    ps\n\n    ```", "```kt\n    gdbserver :[tcp-port number] –-attach [PID]\n\n    ```", "```kt\n    adb forward tcp:[device port-number] tcp:[local port-number]\n\n    ```", "```kt\n    arm-linux-androideabi-gdb\n\n    ```", "```kt\n    target remote :[PID]\n\n    ```"]