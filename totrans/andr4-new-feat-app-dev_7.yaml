- en: Chapter 7. Android Compatibility Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New Android APIs do not work in the previous versions of Android, so the Android
    Compatibility Package was thus introduced to allow the porting of the new APIs
    to the older versions of the Android platform. This chapter shows how we can use
    the Android Compatibility Package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What is and why do we use the Android Compatibility Package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Android Compatibility Package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Android Compability Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android has some great new APIs released with Android 3.0 and its later versions.
    However, many users don''t upgrade their devices to the latest Android platform.
    Google released the Android Compatibility Package that contains support for some
    of the new APIs released with Android 3.0 and its later versions. In this way,
    developers could develop applications that use new APIs and work in older Android
    versions. Some of the classes that are included in the Android Compatibility Package
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fragment`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FragmentManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FragmentTransaction`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListFragment`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogFragment`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoaderManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Loader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AsyncTaskLoader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CursorLoader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some useful APIs such as animation classes, action bar, and FragmentMapActivity
    are not included in the Android Compatibility Package.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the Android Compatibility Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to download and install the Android Compatibility Package. In order
    to download the Android Compatibility Package, click on the **Android SDK Manager**
    button in the Eclipse menu as shown in the following screenshot:![How to use the
    Android Compatibility Package](img/9526_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternately, we can reach the Android SDK Manager by the Eclipse menu using
    **Window** | **Android SDK Manager**. After the **Android SDK Manager** window
    is opened, check the **Android Support Library** option as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to use the Android Compatibility Package](img/9526_07_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Then, click on the **Install** button and install the package. Now we are ready
    to develop an Android project that can use the Android Compatibility Package.
    Firstly, create an Android project in Eclipse. Then, we need to add the support
    library to our Android project. If it doesn't exist, create a folder named `libs`
    under the Android project's root folder as shown in the following screenshot:![How
    to use the Android Compatibility Package](img/9526_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, find and copy the `<your android sdk folder>/extras/android/support/v4/android-support-v4.jar`
    file to the `libs` folder. The folder structure should be as shown in the following
    screenshot:![How to use the Android Compatibility Package](img/9526_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, if the `.jar` file is not in the project build path, add the `.jar`
    file to the project build path as shown in the following screenshot:![How to use
    the Android Compatibility Package](img/9526_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you know how to manually add the support library. Eclipse makes this process
    easy with the **Add Support Library** menu option. Use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project in the explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Android Tools** | **Add Support Library…** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the steps to complete the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we can make use of the compatibility package. We are going to create an
    application that uses the `Fragment` class, but the `Fragment` class present in
    the compatibility package, to display a text using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, create a layout XML for the fragment and name the XML file `fragment.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a layout for the activity using the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we are going to create the `Fragment` class for the `fragment.xml` layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from the preceding code, the `Fragment` class is from the `android.support.v4.app.Fragment`
    package. This means that we are using the Android Compatibility Package. If we
    don't want to use the compatibility package, then we should use the `Fragment`
    class from `the android.app.Fragment` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Activity` class for our application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding code block, the support library APIs follow
    the same naming as the standard APIs. We just need to use the correct imports
    and call the correct managers. We have to add `android.support.v4.app` to our
    import list in order to use classes that are in the compatibility package.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get the `FragmentManager` instance, we call the `getSupportFragmentManager()`
    method of our `Activity` class. As you will have noticed, the `Activity` class
    extends the `FragmentActivity` class. We need to do this because it is the only
    way in which we can use Fragments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AndroidManifest.xml` file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this code, the minimum SDK level is set to API Level 8\. We
    can set the minimum API Level to 4 or more. In this way, we can use the new APIs
    in older versions of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what the Android Compatibility Package is and how
    we can use it. We also learned how with the help of this library, we can use the
    new APIs in the older versions of Android.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn using new connectivity APIs – Android
    Beam and Wi-Fi Direct.
  prefs: []
  type: TYPE_NORMAL
