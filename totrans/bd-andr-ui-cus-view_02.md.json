["```kt\n@Override \nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { \n    super.onMeasure(widthMeasureSpec, heightMeasureSpec); \n} \n```", "```kt\ncom.packt.rrafols.customview E/AndroidRuntime: FATAL EXCEPTION: main Process: com.packt.rrafols.customview, PID: 13601 java.lang.IllegalStateException: View with id -1: com.packt.rrafols.customview.OwnCustomView#onMeasure() did not set the measured dimension by calling setMeasuredDimension() at android.view.View.measure(View.java:18871)\n```", "```kt\n<com.packt.rrafols.customview.OwnCustomView \n   android:layout_width=\"150dp\" \n   android:layout_height=\"150dp\"/> \n```", "```kt\n@Override \nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { \n    Log.d(TAG, \"width spec: \" +\n    MeasureSpec.toString(widthMeasureSpec)); \n    Log.d(TAG, \"height spec: \" +\n    MeasureSpec.toString(heightMeasureSpec)); \n    super.onMeasure(widthMeasureSpec, heightMeasureSpec); \n} \n```", "```kt\nD/com.packt.rrafols.customview.OwnCustomView: width : MeasureSpec: EXACTLY 394 D/com.packt.rrafols.customview.OwnCustomView: height: MeasureSpec: EXACTLY 394\n```", "```kt\npublic final int dpToPixels(int dp) { \n    return (int) (dp * getResources().getDisplayMetrics().density +\n    0.5); \n} \n```", "```kt\npublic final int pixelsToDp(int dp) { \n    return (int) (dp / getResources().getDisplayMetrics().density +\n    0.5); \n} \n```", "```kt\n<com.packt.rrafols.customview.OwnCustomView \n   android:layout_width=\"match_parent\" \n   android:layout_height=\"match_parent\"/> \n```", "```kt\nD/com.packt.rrafols.customview.OwnCustomView: width : MeasureSpec: EXACTLY 996 D/com.packt.rrafols.customview.OwnCustomView: height: MeasureSpec: EXACTLY 1500\n```", "```kt\n<com.packt.rrafols.customview.OwnCustomView \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"wrap_content\"/> \n```", "```kt\nD/com.packt.rrafols.customview.OwnCustomView: width : MeasureSpec: EXACTLY 996 D/com.packt.rrafols.customview.OwnCustomView: height: MeasureSpec: AT_MOST 1500\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<ScrollView  \n    android:orientation=\"vertical\" \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\"> \n\n    <LinearLayout \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:orientation=\"vertical\" \n        android:padding=\"@dimen/activity_vertical_margin\"> \n        <com.packt.rrafols.customview.OwnCustomView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n    </LinearLayout> \n</ScrollView> \n```", "```kt\nD/com.packt.rrafols.customview.OwnCustomView: width : MeasureSpec: EXACTLY 996 D/com.packt.rrafols.customview.OwnCustomView: height: MeasureSpec: UNSPECIFIED 1500\n```", "```kt\nprivate static int getMeasurementSize(int measureSpec, int defaultSize) { \n        int mode = MeasureSpec.getMode(measureSpec); \n        int size = MeasureSpec.getSize(measureSpec); \n        switch(mode) { \n            case MeasureSpec.EXACTLY: \n                return size; \n\n            case MeasureSpec.AT_MOST: \n                return Math.min(defaultSize, size); \n\n            case MeasureSpec.UNSPECIFIED: \n            default: \n                return defaultSize; \n        } \n    } \n\n    @Override \n    protected void onMeasure(int widthMeasureSpec, int\n        heightMeasureSpec) { \n        int width = getMeasurementSize(widthMeasureSpec, DEFAULT_SIZE); \n        int height = getMeasurementSize(heightMeasureSpec,\n        DEFAULT_SIZE); \n        setMeasuredDimension(width, height); \n    } \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<resources> \n    <declare-styleable name=\"OwnCustomView\"> \n        <attr name=\"fillColor\" format=\"color\"/> \n    </declare-styleable> \n</resources> \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<ScrollView  \n\n    android:orientation=\"vertical\" \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\"> \n\n    <LinearLayout \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:orientation=\"vertical\" \n        android:padding=\"@dimen/activity_vertical_margin\"> \n\n        <com.packt.rrafols.customview.OwnCustomView \n            android:layout_width=\"match_parent\" \n            android:layout_height=\"wrap_content\"\n            app:fillColor=\"@android:color/holo_blue_dark\"/>          \n    </LinearLayout> \n</ScrollView> \n```", "```kt\nint fillColor;\nTypedArray ta =\n    context.getTheme().obtainStyledAttributes(attributeSet,\n        R.styleable.OwnCustomView, 0, 0);\ntry {\n    fillColor =\n        ta.getColor(R.styleable.OwnCustomView_ocv_fillColor,\n            DEFAULT_FILL_COLOR);\n} finally {\n    ta.recycle();\n}\n```", "```kt\n   public OwnCustomView(Context context) { \n        super(context); \n\n        init(DEFAULT_FILL_COLOR); \n    } \n\n    public OwnCustomView(Context context, AttributeSet attributeSet) { \n        super(context, attributeSet); \n\n        int fillColor; \n\n        TypedArray ta =\n        context.getTheme().obtainStyledAttributes(attributeSet,\n        R.styleable.OwnCustomView, 0, 0); \n        try { \n           fillColor = ta.getColor(R.styleable.OwnCustomView_fillColor,\n           DEFAULT_FILL_COLOR); \n        } finally { \n            ta.recycle(); \n        } \n\n        init(fillColor); \n    } \n\n    private void init(int fillColor) { \n        backgroundPaint = new Paint(); \n        backgroundPaint.setStyle(Paint.Style.FILL); \n\n        setFillColor(fillColor); \n    } \n\n    public void setFillColor(int fillColor) { \n        backgroundPaint.setColor(fillColor); \n    } \n```", "```kt\npublic class MainActivity extends AppCompatActivity { \n    private static final int BRIGHT_GREEN = 0xff00ff00; \n\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n\n        LinearLayout linearLayout = new LinearLayout(this); \n        linearLayout.setLayoutParams( \n                new LinearLayout.LayoutParams(ViewGroup.\n                    LayoutParams.MATCH_PARENT,\n                    ViewGroup.LayoutParams.MATCH_PARENT)); \n\n        OwnCustomView customView = new OwnCustomView(this); \n        customView.setFillColor(BRIGHT_GREEN); \n        linearLayout.addView(customView); \n\n        setContentView(linearLayout); \n    } \n} \n```", "```kt\nprivate int topLeftColor = DEFAULT_FILL_COLOR; \nprivate int bottomLeftColor = DEFAULT_FILL_COLOR; \nprivate int topRightColor = DEFAULT_FILL_COLOR; \nprivate int bottomRightColor = DEFAULT_FILL_COLOR; \nprivate boolean needsUpdate = false;\n\npublic void setTopLeftColor(int topLeftColor) { \n    this.topLeftColor = topLeftColor; \n    needsUpdate = true; \n} \n\npublic void setBottomLeftColor(int bottomLeftColor) { \n    this.bottomLeftColor = bottomLeftColor; \n    needsUpdate = true; \n} \n\npublic void setTopRightColor(int topRightColor) { \n    this.topRightColor = topRightColor; \n    needsUpdate = true; \n} \n\npublic void setBottomRightColor(int bottomRightColor) { \n    this.bottomRightColor = bottomRightColor; \n    needsUpdate = true; \n} \n```", "```kt\n@Override\nprotected void onDraw(Canvas canvas) {\n    if (needsUpdate) {\n        int[] colors = new int[] {topLeftColor, topRightColor,\n        bottomRightColor, bottomLeftColor};\n\n        LinearGradient lg = new LinearGradient(0, 0, getWidth(),\n            getHeight(), colors, null, Shader.TileMode.CLAMP);\n\n        backgroundPaint.setShader(lg);\n        needsUpdate = false;\n    }\n\n    canvas.drawRect(0, 0, getWidth(), getHeight(), backgroundPaint);\n    super.onDraw(canvas);\n}\n```", "```kt\npublic class MainActivity extends AppCompatActivity { \n    private static final int BRIGHT_GREEN = 0xff00ff00; \n    private static final int BRIGHT_RED = 0xffff0000; \n    private static final int BRIGHT_YELLOW = 0xffffff00; \n    private static final int BRIGHT_BLUE = 0xff0000ff; \n\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n\n        LinearLayout linearLayout = new LinearLayout(this); \n        linearLayout.setLayoutParams( \n                new LinearLayout.LayoutParams(ViewGroup.\n                LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT)); \n\n        OwnCustomView customView = new OwnCustomView(this); \n        customView.setTopLeftColor(BRIGHT_RED); \n        customView.setTopRightColor(BRIGHT_GREEN); \n        customView.setBottomLeftColor(BRIGHT_YELLOW); \n        customView.setBottomRightColor(BRIGHT_BLUE); \n        linearLayout.addView(customView); \n        setContentView(linearLayout); \n    } \n} \n```", "```kt\npublic static class Builder { \n    private Context context; \n    private int topLeftColor = DEFAULT_FILL_COLOR; \n    private int topRightColor = DEFAULT_FILL_COLOR; \n    private int bottomLeftColor = DEFAULT_FILL_COLOR; \n    private int bottomRightColor = DEFAULT_FILL_COLOR; \n\n    public Builder(Context context) { \n        this.context = context; \n    } \n\n    public Builder topLeftColor(int topLeftColor) { \n        this.topLeftColor = topLeftColor; \n        return this; \n    } \n\n    public Builder topRightColor(int topRightColor) { \n        this.topRightColor = topRightColor; \n        return this; \n    } \n\n    public Builder bottomLeftColor(int bottomLeftColor) { \n        this.bottomLeftColor = bottomLeftColor; \n        return this; \n    } \n\n    public Builder bottomRightColor(int bottomRightColor) { \n        this.bottomRightColor = bottomRightColor; \n        return this; \n    } \n\n    public OwnCustomView build() { \n        return new OwnCustomView(this); \n    } \n} \n```", "```kt\nprivate OwnCustomView(Builder builder) { \n    super(builder.context); \n\n    backgroundPaint = new Paint(); \n    backgroundPaint.setStyle(Paint.Style.FILL); \n\n    colorArray = new int[] { \n            builder.topLeftColor, \n            builder.topRightColor, \n            builder.bottomRightColor, \n            builder.bottomLeftColor \n    }; \n\n    firstDraw = true; \n } \n```", "```kt\n@Override \n    protected void onDraw(Canvas canvas) { \n        if (firstDraw) { \n            LinearGradient lg = new LinearGradient(0, 0, getWidth(),\n            getHeight(), \n                    colorArray, null, Shader.TileMode.CLAMP); \n\n            backgroundPaint.setShader(lg); \n            firstDraw = false; \n        } \n\n        canvas.drawRect(0, 0, getWidth(), getHeight(),\n        backgroundPaint); \n        super.onDraw(canvas); \n    } \n```", "```kt\npublic class MainActivity extends AppCompatActivity { \n    private static final int BRIGHT_GREEN = 0xff00ff00; \n    private static final int BRIGHT_RED = 0xffff0000; \n    private static final int BRIGHT_YELLOW = 0xffffff00; \n    private static final int BRIGHT_BLUE = 0xff0000ff; \n\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n\n        LinearLayout linearLayout = new LinearLayout(this); \n        linearLayout.setLayoutParams( \n                new LinearLayout.LayoutParams(ViewGroup.\n                LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT)); \n\n        OwnCustomView customView = new OwnCustomView.Builder(this) \n                .topLeftColor(BRIGHT_RED) \n                .topRightColor(BRIGHT_GREEN) \n                .bottomLeftColor(BRIGHT_YELLOW) \n                .bottomRightColor(BRIGHT_BLUE) \n                .build(); \n\n        linearLayout.addView(customView); \n\n        setContentView(linearLayout); \n    } \n} \n```", "```kt\npublic class CustomLayout extends ViewGroup { \n\n    public CustomLayout(Context context, AttributeSet attrs) { \n        super(context, attrs); \n    } \n\n    @Override \n   protected void onLayout(boolean changed, int l, int t, int r, int b) { \n\n   } \n} \n```", "```kt\n@Override \n   protected void onLayout(boolean changed, int l, int t, int r, int b){ \n        int count = getChildCount(); \n        int left = l + getPaddingLeft(); \n        int top = t + getPaddingTop(); \n\n        // keeps track of maximum row height \n        int rowHeight = 0; \n\n        for (int i = 0; i < count; i++) { \n            View child = getChildAt(i); \n\n            int childWidth = child.getMeasuredWidth(); \n            int childHeight = child.getMeasuredHeight(); \n\n            // if child fits in this row put it there \n            if (left + childWidth < r - getPaddingRight()) { \n                child.layout(left, top, left + childWidth, top +\n                childHeight); \n                left += childWidth; \n        } else { \n            // otherwise put it on next row \n                left = l + getPaddingLeft(); \n                top += rowHeight; \n                rowHeight = 0; \n            } \n\n            // update maximum row height \n            if (childHeight > rowHeight) rowHeight = childHeight; \n        } \n    } \n```", "```kt\n@Override \nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { \n\n    int count = getChildCount(); \n\n    int rowHeight = 0; \n    int maxWidth = 0; \n    int maxHeight = 0; \n    int left = 0; \n    int top = 0; \n\n    for (int i = 0; i < count; i++) { \n        View child = getChildAt(i); \n        measureChild(child, widthMeasureSpec, heightMeasureSpec); \n\n        int childWidth = child.getMeasuredWidth(); \n        int childHeight = child.getMeasuredHeight(); \n\n        // if child fits in this row put it there \n        if (left + childWidth < getWidth()) { \n            left += childWidth; \n        } else { \n            // otherwise put it on next row \n            if(left > maxWidth) maxWidth = left; \n            left = 0; \n            top += rowHeight; \n            rowHeight = 0; \n        } \n\n        // update maximum row height \n        if (childHeight > rowHeight) rowHeight = childHeight; \n    } \n\n    if(left > maxWidth) maxWidth = left; \n    maxHeight = top + rowHeight; \n\n    setMeasuredDimension(getMeasure(widthMeasureSpec, maxWidth),\n    getMeasure(heightMeasureSpec, maxHeight)); \n\n} \n```", "```kt\nprivate int getMeasure(int spec, int desired) { \n        switch(MeasureSpec.getMode(spec)) { \n            case MeasureSpec.EXACTLY: \n                return MeasureSpec.getSize(spec); \n\n            case MeasureSpec.AT_MOST: \n                return Math.min(MeasureSpec.getSize(spec), desired); \n\n            case MeasureSpec.UNSPECIFIED: \n            default: \n                return desired; \n        } \n    } \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<RelativeLayout  \n\n    android:id=\"@+id/activity_main\" \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\" \n    android:padding=\"@dimen/activity_vertical_margin\" \n    tools:context=\"com.packt.rrafols.customview.MainActivity\"> \n\n    <com.packt.rrafols.customview.CustomLayout \n        android:id=\"@+id/custom_layout\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\"> \n\n    </com.packt.rrafols.customview.CustomLayout> \n</RelativeLayout> \n```", "```kt\npublic class MainActivity extends AppCompatActivity { \n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.activity_main); \n\n        CustomLayout customLayout = (CustomLayout)\n        findViewById(R.id.custom_layout); \n\n        Random rnd = new Random(); \n        for(int i = 0; i < 50; i++) { \n            OwnCustomView view = new OwnCustomView(this); \n\n            int width = rnd.nextInt(200) + 50; \n            int height = rnd.nextInt(100) + 100; \n            view.setLayoutParams(new ViewGroup.LayoutParams(width,\n            height)); \n            view.setPadding(2, 2, 2, 2); \n\n            customLayout.addView(view); \n        } \n    } \n} \n```", "```kt\npublic class CircularActivityIndicator extends View { \n    private static final int DEFAULT_FG_COLOR = 0xffff0000; \n    private static final int DEFAULT_BG_COLOR = 0xffa0a0a0; \n    private Paint foregroundPaint; \n    private int selectedAngle; \n\n    public CircularActivityIndicator(Context context, AttributeSet\n    attributeSet) { \n        super(context, attributeSet); \n\n        foregroundPaint = new Paint(); \n        foregroundPaint.setColor(DEFAULT_FG_COLOR); \n        foregroundPaint.setStyle(Paint.Style.FILL); \n\n        selectedAngle = 280; \n    } \n\n    @Override \n    protected void onDraw(Canvas canvas) { \n        canvas.drawArc( \n                0, \n                0, \n                getWidth(), \n                getHeight(), \n                0, selectedAngle, true, foregroundPaint); \n    } \n} \n```", "```kt\n@Override \nprotected void onDraw(Canvas canvas) { \n    int circleSize = getWidth(); \n    if (getHeight() < circleSize) circleSize = getHeight(); \n\n    int horMargin = (getWidth() - circleSize) / 2; \n    int verMargin = (getHeight() - circleSize) / 2; \n\n    canvas.drawArc( \n            horMargin, \n            verMargin, \n            horMargin + circleSize, \n            verMargin + circleSize, \n            0, selectedAngle, true, foregroundPaint); \n} \n```", "```kt\nprivate Path clipPath; \n\n@Override \nprotected void onDraw(Canvas canvas) { \n    int circleSize = getWidth(); \n    if (getHeight() < circleSize) circleSize = getHeight(); \n\n    int horMargin = (getWidth() - circleSize) / 2; \n    int verMargin = (getHeight() - circleSize) / 2; \n\n    // create a clipPath the first time \n    if(clipPath == null) { \n        int clipWidth = (int) (circleSize * 0.75); \n\n        int clipX = (getWidth() - clipWidth) / 2; \n        int clipY = (getHeight() - clipWidth) / 2; \n        clipPath = new Path(); \n        clipPath.addArc( \n                clipX, \n                clipY, \n                clipX + clipWidth, \n                clipY + clipWidth, \n                0, 360); \n    } \n\n    canvas.clipRect(0, 0, getWidth(), getHeight()); \n    canvas.clipPath(clipPath, Region.Op.DIFFERENCE); \n\n    canvas.drawArc( \n            horMargin, \n            verMargin, \n            horMargin + circleSize, \n            verMargin + circleSize, \n            0, selectedAngle, true, foregroundPaint); \n} \n```", "```kt\nbackgroundPaint = new Paint(); \nbackgroundPaint.setColor(DEFAULT_BG_COLOR); \nbackgroundPaint.setStyle(Paint.Style.FILL); \n```", "```kt\ncanvas.drawArc( \n        horMargin, \n        verMargin, \n        horMargin + circleSize, \n        verMargin + circleSize, \n        0, 360, true, backgroundPaint); \n```", "```kt\n@Override \nprotected void onDraw(Canvas canvas) { \n    int circleSize = getWidth(); \n    if (getHeight() < circleSize) circleSize = getHeight(); \n\n    int horMargin = (getWidth() - circleSize) / 2; \n    int verMargin = (getHeight() - circleSize) / 2; \n\n    // create a clipPath the first time \n    if(clipPath == null) { \n        int clipWidth = (int) (circleSize * 0.75); \n\n        int clipX = (getWidth() - clipWidth) / 2; \n        int clipY = (getHeight() - clipWidth) / 2; \n        clipPath = new Path(); \n        clipPath.addArc( \n                clipX, \n                clipY, \n                clipX + clipWidth, \n                clipY + clipWidth, \n                0, 360); \n    } \n\n    canvas.clipRect(0, 0, getWidth(), getHeight()); \n    canvas.clipPath(clipPath, Region.Op.DIFFERENCE); \n\n    canvas.save(); \n    canvas.rotate(-90, getWidth() / 2, getHeight() / 2); \n\n    canvas.drawArc( \n            horMargin, \n            verMargin, \n            horMargin + circleSize, \n            verMargin + circleSize, \n            0, 360, true, backgroundPaint); \n\n    canvas.drawArc( \n            horMargin, \n            verMargin, \n            horMargin + circleSize, \n            verMargin + circleSize, \n            0, selectedAngle, true, foregroundPaint); \n\n    canvas.restore(); \n} \n```", "```kt\npublic class CircularActivityIndicator extends View { \n    private static final int DEFAULT_FG_COLOR = 0xffff0000; \n    private static final int DEFAULT_BG_COLOR = 0xffa0a0a0; \n    private Paint backgroundPaint; \n    private Paint foregroundPaint; \n    private int selectedAngle; \n    private Path clipPath; \n\n    public CircularActivityIndicator(Context context, AttributeSet\n        attributeSet) { \n        super(context, attributeSet); \n\n        backgroundPaint = new Paint(); \n        backgroundPaint.setColor(DEFAULT_BG_COLOR); \n        backgroundPaint.setStyle(Paint.Style.FILL); \n\n        foregroundPaint = new Paint(); \n        foregroundPaint.setColor(DEFAULT_FG_COLOR); \n        foregroundPaint.setStyle(Paint.Style.FILL); \n\n        selectedAngle = 280; \n    } \n\n    @Override \n    protected void onDraw(Canvas canvas) { \n        int circleSize = getWidth(); \n        if (getHeight() < circleSize) circleSize = getHeight(); \n\n        int horMargin = (getWidth() - circleSize) / 2; \n        int verMargin = (getHeight() - circleSize) / 2; \n\n        // create a clipPath the first time \n        if(clipPath == null) { \n            int clipWidth = (int) (circleSize * 0.75); \n\n            int clipX = (getWidth() - clipWidth) / 2; \n            int clipY = (getHeight() - clipWidth) / 2; \n            clipPath = new Path(); \n            clipPath.addArc( \n                    clipX, \n                    clipY, \n                    clipX + clipWidth, \n                    clipY + clipWidth, \n                    0, 360); \n        } \n\n        canvas.clipPath(clipPath, Region.Op.DIFFERENCE); \n\n        canvas.save(); \n        canvas.rotate(-90, getWidth() / 2, getHeight() / 2); \n\n        canvas.drawArc( \n                horMargin, \n                verMargin, \n                horMargin + circleSize, \n                verMargin + circleSize, \n                0, 360, true, backgroundPaint); \n\n        canvas.drawArc( \n                horMargin, \n                verMargin, \n                horMargin + circleSize, \n                verMargin + circleSize, \n                0, selectedAngle, true, foregroundPaint); \n\n        canvas.restore(); \n    } \n} \n```"]