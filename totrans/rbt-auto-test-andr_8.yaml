- en: Chapter 8. Robotium with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces the use of the Maven tool to attach an Android project
    for adding to a build process. This chapter also explains different configurations/installations
    you need to use Robotium with Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Automate Android app built with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Automate Android app built with Maven](img/8010OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Maven is basically a software project management tool based on the concept of
    **Project Object Model** (**POM**), which is required at the project root and
    helps to build a project.
  prefs: []
  type: TYPE_NORMAL
- en: It can manage a project's build, reporting, and documentation from a central
    piece of information.
  prefs: []
  type: TYPE_NORMAL
- en: Maven features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven''s primary goal is to allow a developer to comprehend the complete state
    of a development effort in the shortest period of time. To attain this goal, there
    are several areas of concern that Maven attempts to deal with:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Repeatable Builds | You can build the project repeatedly on the build server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Focus on Automation | Maven puts you in the right mindset of automating processes
    in software development. |'
  prefs: []
  type: TYPE_TB
- en: '| Dependency Management | Maven will resolve and manage your dependencies.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Standardization | New developers, who understand Maven, will instantly know
    how to build, release, test, and thus, remove a lot of learning overhead. |'
  prefs: []
  type: TYPE_TB
- en: '| Plugins | There are a lot of plugins available to carry out different tasks.
    These are configured by adding a reference into the `pom.xml` file. |'
  prefs: []
  type: TYPE_TB
- en: '| Testing | This gives you the ability to run tests and integration tests as
    part of your project lifecycle. |'
  prefs: []
  type: TYPE_TB
- en: To get Maven up and running for Android, you must use the **Android Maven Plugin**
    for the existing Eclipse project. You can install Maven from the link mentioned
    in the preceding figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The homepage of the Android Maven Plugin is located at the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://code.google.com/p/maven-android-plugin/](https://code.google.com/p/maven-android-plugin/)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Android SDK and ADT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create/build an Android project using the command-line tool that is
    provided by Android SDK tools. The same functionality is provided by ADT for Eclipse.
    You can also export Android applications manually via the Eclipse export wizard.
    Currently, Apache Ant is mostly used by the tools provided by Android SDK to build
    and deploy an application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Android SDK and ADT](img/8010OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The new Gradle-based build system for Android apps is a huge improvement over
    the older Eclipse-, Ant-, and Maven-based applications. It has a simple declarative
    syntax and makes building different variants of your app (for example, staging
    vs. production) very easy. Gradle is also the default build system for the new
    Android Studio IDE, so there are lots of good reasons to migrate your apps.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio will be based on Gradle. In Android Studio, there won't be ADT
    as it will have built-in Android utilities. Gradle internally uses Maven repositories
    to manage the dependencies, which ultimately help to make the support of Maven
    quite easy.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment PATH for Android Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you want to build an Android project outside Eclipse, you mostly need
    to use a command line or shell. To achieve this, you need to make sure that the
    `tools` and `platform-tools` folders of the Android SDK are part of the PATH environment
    variable. To do this, please follow the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the environment variable `ANDROID_HOME` to the path of your Android SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Windows users:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the desktop, right-click on **My Computer** and click on **Properties**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Advanced System Settings** link in the left column.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **System Properties** window, click on the **Environment Variables**
    button and add new variable with name `ANDROID_HOME`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unix-based system users:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Export `ANDROID_HOME=/path/to/android/sdk`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, add `$ANDROID_HOME/tools` `and $ANDROID_HOME/platform-tools` to `$PATH`
    (for Windows, `%ANDROID_HOME%\tools and %ANDROID_HOME%\platform-tools`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All MacOS users, please note that for the path to work on the command line and
    in IDEs started by `launchd`, you need to set it in `/etc/launchd.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build Android tests using Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create an Android project named `com.android.build.maven`. In this section,
    let us concentrate on creating a build for your Android test application using
    Maven. Add the correct `pom.xml` file, as shown in the following project directory
    and provide commands to Maven to build, install, and run your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code for the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can refer to the full source code of the `pom.xml` file in `chapter8_code1`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding `pom.xml` file is very similar to the `pom.xml` file in the main
    project, but this has several dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The dependency for `apk` is to enable the Android Maven plugin to find `apk`
    that it will run the tests against on the device/emulator. The dependency to the
    JAR file is to enable the compiler to find your Java classes from the main project.
    To achieve this, you use the provided scope so the classes are not actually included
    into your test project.
  prefs: []
  type: TYPE_NORMAL
- en: The Android Maven plugin that is provided under the build section in `pom.xml`
    will now run tests automatically on `mvn install` using instrumentation, just
    like Eclipse does. It uses the same underlying tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have only a single emulator/device connected, the automatic execution
    will work. If you have more than one device/emulator running, you will need to
    specify which device to use with either of these as command-line options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-Dandroid.device=usb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Dandroid.device=emulator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Dandroid.device=specificdeviceid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also disable instrumentation tests with this command-line option:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-Dandroid.enableIntegrationTest=false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default properties can be set in `pom.xml` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Build your app with Maven and deploy it to the device/emulator using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Maven, you can also start and stop an Android virtual device automatically.
    The application can be started via Maven using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have to be in the directory of the project, where `pom.xml` is located.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learnt different methods to use Maven with Android and
    Robotium tests. You also learnt different Maven commands to interact with Android
    applications, that is, the test application.
  prefs: []
  type: TYPE_NORMAL
- en: What do you say? Are you ready to create and automate test cases for your Android
    project? I bet you are! Go ahead, enjoy automated testing for Android using Robotium
    and don't forget to tell the community about it!
  prefs: []
  type: TYPE_NORMAL
- en: Join the forums at [https://groups.google.com/forum/#!forum/robotium-developers](https://groups.google.com/forum/#!forum/robotium-developers)
    and be a part of this amazing Robotium developer's community. We're waiting for
    you!
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading the book and supporting open source technologies. Hope to
    see you around soon!
  prefs: []
  type: TYPE_NORMAL
