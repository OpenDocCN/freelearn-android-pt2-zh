["```kt\n    #include <android/log.h>\n    #include <stdio.h>\n\n    jint NativeAddition(JNIEnv *pEnv, jobject pObj, jint pa, jint pb) {\n      return pa+pb;\n    }\n\n    jint NativeMultiplication(JNIEnv *pEnv, jobject pObj, jint pa, jint pb) {\n      return pa*pb;\n    }\n\n    JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* pVm, void* reserved)\n    {\n        JNIEnv* env;\n        if ((*pVm)->GetEnv(pVm, (void **)&env, JNI_VERSION_1_6)) {\n         return -1;\n      }\n        JNINativeMethod nm[2];\n        nm[0].name = \"NativeAddition\";\n        nm[0].signature = \"(II)I\";\n        nm[0].fnPtr = NativeAddition;\n        nm[1].name = \"NativeMultiplication\";\n        nm[1].signature = \"(II)I\";\n        nm[1].fnPtr = NativeMultiplication;\n        jclass cls = (*env)->FindClass(env, \"cookbook/chapter2/NativeMethodRegisterActivity\");\n        // Register methods with env->RegisterNatives.\n        (*env)->RegisterNatives(env, cls, nm, 2);\n        return JNI_VERSION_1_6;\n    }\n    ```", "```kt\n    public class NativeMethodRegisterActivity extends Activity {\n        … …\n          private void callNativeMethods() {\n            int a = 10, b = 100;\n              int c = NativeAddition(a, b);\n              tv.setText(a + \"+\" + b + \"=\" + c);\n              c = NativeMultiplication(a, b);\n              tv.append(\"\\n\" + a + \"x\" + b + \"=\" + c);\n          }\n          private native int NativeAddition(int a, int b);\n          private native int NativeMultiplication(int a, int b);\n          static {\n            //use either of the two methods below\n    //System.loadLibrary(\"NativeRegister\");\n              System.load(\"/data/data/cookbook.chapter2/lib/libNativeRegister.so\");\n          }\n    }\n    ```", "```kt\n    <TextView\n            android:id=\"@+id/display_res\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_centerHorizontal=\"true\"\n            android:padding=\"@dimen/padding_medium\"\n            android:text=\"@string/hello_world\"\n            tools:context=\".NativeMethodRegisterActivity\" />\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE    := NativeRegister\n    LOCAL_SRC_FILES := nativetest.c\n    LOCAL_LDLIBS := -llog\n    include $(BUILD_SHARED_LIBRARY)\n    ```", "```kt\n    jint RegisterNatives(JNIEnv *env, jclass clazz, const JNINativeMethod *methods, jint nMethods);\n    ```", "```kt\n    typedef struct {\n      char *name;\n      char *signature;\n      void *fnPtr;\n    } JNINativeMethod;\n    ```", "```kt\n    JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* pVm, void* reserved)\n    {\n        JNIEnv* env;\n        if ((*pVm)->GetEnv(pVm, (void **)&env, JNI_VERSION_1_6)) {\n        return -1;\n      }\n\n      // Get jclass with env->FindClass.\n      // Register methods with env->RegisterNatives.\n\n      return JNI_VERSION_1_6;\n    }\n    ```", "```kt\n    #include <jni.h>\n    #include <android/log.h>\n\n    JNIEXPORT jboolean JNICALL Java_cookbook_chapter2_PassingPrimitiveActivity_passBooleanReturnBoolean(JNIEnv *pEnv, jobject pObj, jboolean pBooleanP){\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"%d in %d bytes\", pBooleanP, sizeof(jboolean));\n      return (!pBooleanP);\n    }\n\n    JNIEXPORT jint JNICALL Java_cookbook_chapter2_PassingPrimitiveActivity_passIntReturnInt(JNIEnv *pEnv, jobject pObj, jint pIntP) {\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"%d in %d bytes\", pIntP, sizeof(jint));\n      return pIntP + 1;\n    }\n\n    JNIEXPORT jdouble JNICALL Java_cookbook_chapter2_PassingPrimitiveActivity_passDoubleReturnDouble(JNIEnv *pEnv, jobject pObj, jdouble pDoubleP) {\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"%f in %d bytes\", pDoubleP, sizeof(jdouble));\n      return pDoubleP + 0.5;\n    }\n    ```", "```kt\n    @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_passing_primitive);\n            StringBuilder strBuilder = new StringBuilder();\n            strBuilder.append(\"boolean: \").append(passBooleanReturnBoolean(false)).append(System.getProperty(\"line.separator\"))\n             ......\n\n              .append(\"double: \").append(passDoubleReturnDouble(11.11)).append(System.getProperty(\"line.separator\"));\n            TextView tv = (TextView) findViewById(R.id.display_res);\n            tv.setText(strBuilder.toString());\n        }\n        private native boolean passBooleanReturnBoolean(boolean p);\n        private native byte passByteReturnByte(byte p);\n        private native char passCharReturnChar(char p);\n        private native short passShortReturnShort(short p);\n        ......\n        static {\n            System.loadLibrary(\"PassingPrimitive\");\n        }\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE    := PassingPrimitive\n    LOCAL_SRC_FILES := primitive.c\n    LOCAL_LDLIBS := -llog\n    include $(BUILD_SHARED_LIBRARY)\n    ```", "```kt\n    $adb logcat -v time\n    ```", "```kt\n    __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__);\n    ```", "```kt\n    #include <android/log.h>\n    ```", "```kt\n    LOCAL_LDLIBS := -llog\n    ```", "```kt\n    JNIEXPORT jstring JNICALL Java_cookbook_chapter2_StringManipulationActivity_passStringReturnString(JNIEnv *pEnv, jobject pObj, jstring pStringP){\n\n        __android_log_print(ANDROID_LOG_INFO, \"native\", \"print jstring: %s\", pStringP);\n      const jbyte *str;\n      jboolean *isCopy;\n      str = (*pEnv)->GetStringUTFChars(pEnv, pStringP, isCopy);\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"print UTF-8 string: %s, %d\", str, isCopy);\n\n        jsize length = (*pEnv)->GetStringUTFLength(pEnv, pStringP);\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"UTF-8 string length (number of bytes): %d == %d\", length, strlen(str));\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"UTF-8 string ends with: %d %d\", str[length], str[length+1]);\n      (*pEnv)->ReleaseStringUTFChars(pEnv, pStringP, str);\n\n      char nativeStr[100];\n      (*pEnv)->GetStringUTFRegion(pEnv, pStringP, 0, length, nativeStr);\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"jstring converted to UTF-8 string and copied to native buffer: %s\", nativeStr);\n\n      const char* newStr = \"hello 安卓\";\n      jstring ret = (*pEnv)->NewStringUTF(pEnv, newStr);\n      jsize newStrLen = (*pEnv)->GetStringUTFLength(pEnv, ret);\n      __android_log_print(ANDROID_LOG_INFO, \"native\", \"UTF-8 string with Chinese characters: %s, string length (number of bytes) %d=%d\", newStr, newStrLen, strlen(newStr));\n      return ret;\n    }\n    ```", "```kt\n    const jbyte * GetStringUTFChars(JNIEnv *env, jstring string, jboolean *isCopy);\n    ```", "```kt\n    void ReleaseStringUTFChars(JNIEnv *env, jstring string, const char *utf);\n    ```", "```kt\n    void GetStringUTFRegion(JNIEnv *env, jstring str, jsize start, jsize len, char *buf);\n    ```", "```kt\n    jstring NewStringUTF(JNIEnv *env, const char *bytes);\n    ```", "```kt\n    JNIEXPORT void JNICALL Java_cookbook_chapter2_ManagingReferenceActivity_localReference(JNIEnv *pEnv, jobject pObj, jstring pStringP, jboolean pDelete){\n        jstring stStr;\n      int i;\n      for (i = 0; i < 10000; ++i) {\n        stStr = (*pEnv)->NewLocalRef(pEnv, pStringP);\n        if (pDelete) {\n          (*pEnv)->DeleteLocalRef(pEnv, stStr);\n        }\n      }\n    }\n\n    JNIEXPORT void JNICALL Java_cookbook_chapter2_ManagingReferenceActivity_globalReference(JNIEnv *pEnv, jobject pObj, jstring pStringP, jboolean pDelete){\n      static jstring stStr;\n      const jbyte *str;\n      jboolean *isCopy;\n      if (NULL == stStr) {\n        stStr = (*pEnv)->NewGlobalRef(pEnv, pStringP);\n      }\n      str = (*pEnv)->GetStringUTFChars(pEnv, stStr, isCopy);\n      if (pDelete) {\n        (*pEnv)->DeleteGlobalRef(pEnv, stStr);\n        stStr = NULL;\n      }\n    }\n\n    JNIEXPORT void JNICALL Java_cookbook_chapter2_ManagingReferenceActivity_weakReference(JNIEnv *pEnv, jobject pObj, jstring pStringP, jboolean pDelete){\n      static jstring stStr;\n      const jbyte *str;\n      jboolean *isCopy;\n      if (NULL == stStr) {\n        stStr = (*pEnv)->NewWeakGlobalRef(pEnv, pStringP);\n      }\n      str = (*pEnv)->GetStringUTFChars(pEnv, stStr, isCopy);\n      if (pDelete) {\n        (*pEnv)->DeleteWeakGlobalRef(pEnv, stStr);\n        stStr = NULL;\n      }\n    }\n    ```", "```kt\n    globalReference(\"hello global ref\", false); \n    globalReference(\"hello global ref 2\", true);\n    globalReference(\"hello global ref 3\", true);\n    ```", "```kt\n    jclass FindClass(JNIEnv *env, const char *name);\n    ```", "```kt\n    dalvik.system.NativeStart.run(Native method)\n    ```", "```kt\n    jclass GetSuperclass(JNIEnv *env, jclass clazz);\n    ```", "```kt\n    jboolean IsAssignableFrom(JNIEnv *env, jclass cls1, jclass cls2);\n    ```", "```kt\n    jobject AllocObject(JNIEnv *env, jclass clazz);\n\n    jobject NewObject(JNIEnv *env, jclass clazz,jmethodID methodID, ...);\n\n    jobject NewObjectA(JNIEnv *env, jclass clazz,jmethodID methodID, jvalue *args);\n    jobject NewObjectV(JNIEnv *env, jclass clazz,jmethodID methodID, va_list args);\n    ```", "```kt\n    typedef union jvalue {\n       jboolean z;\n       jbyte    b;\n       jchar    c;\n       jshort   s;\n       jint     i;\n       jlong    j;\n       jfloat   f;\n       jdouble  d;\n       jobject  l;\n    } jvalue;\n    ```", "```kt\n    jclass GetObjectClass(JNIEnv *env, jobject obj);\n    ```", "```kt\n    jboolean IsInstanceOf(JNIEnv *env, jobject obj, jclass clazz);\n    ```", "```kt\n    jarray NewObjectArray(JNIEnv *env, jsize length, jclass elementType, jobject initialElement);\n    <ArrayType> New<Type>Array(JNIEnv *env, jsize length);\n    ```", "```kt\n    jsize GetArrayLength(JNIEnv *env, jarray array);\n    ```", "```kt\n    jobject GetObjectArrayElement(JNIEnv *env,jobjectArray array, jsize index);\n    void SetObjectArrayElement(JNIEnv *env, jobjectArray array, jsize index, jobject value);\n    ```", "```kt\n    void GetIntArrayRegion(JNIEnv *env, jintArray array, jsize start, jsize len, jint* buf);\n    void SetIntArrayRegion(JNIEnv *env, jintArray array, jsize start, jsize len, jint* buf);\n    ```", "```kt\n    jint *GetIntArrayElements(JNIEnv *env, jintArray array, jboolean *isCopy);\n    void ReleaseIntArrayElements(JNIEnv *env, jintArray array, jint *elems, jint mode);\n    ```", "```kt\n    jfieldID GetStaticFieldID(JNIEnv *env, jclass clazz, const char *name, const char *sig);\n    <NativeType> GetStatic<Type>Field(JNIEnv *env,jclass clazz, jfieldID fieldID);\n    void SetStatic<Type>Field(JNIEnv *env, jclass clazz, jfieldID fieldID,<NativeType> value);\n    ```", "```kt\n    jfieldID GetFieldID(JNIEnv *env, jclass clazz, const char *name, const char *sig);\n    <NativeType> Get<Type>Field(JNIEnv *env,jobject obj, jfieldID fieldID);\n    void Set<Type>Field(JNIEnv *env, jobject obj, jfieldID fieldID, <NativeType> value);\n    ```", "```kt\n    jfieldID FromReflectedField(JNIEnv *env, jobject field);\n    jobject ToReflectedField(JNIEnv *env, jclass cls, jfieldID fieldID, jboolean isStatic);\n    ```", "```kt\n    jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz, const char *name, const char *sig);\n\n    <NativeType> CallStatic<Type>Method(JNIEnv *env, jclass clazz, jmethodID methodID, ...);\n\n    <NativeType> CallStatic<Type>MethodA(JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);\n\n    <NativeType> CallStatic<Type>MethodV(JNIEnv *env, jclass clazz,jmethodID methodID, va_list args);\n    ```", "```kt\n    jmethodID GetMethodID(JNIEnv *env, jclass clazz, const char *name, const char *sig);\n\n    <NativeType> Call<Type>Method(JNIEnv *env, jobject obj, jmethodID methodID, ...);\n\n    <NativeType> Call<Type>MethodA(JNIEnv *env,jobject obj, jmethodID methodID, jvalue *args);\n\n    <NativeType> Call<Type>MethodV(JNIEnv *env, jobject obj, jmethodID methodID, va_list args);\n    ```", "```kt\n    <NativeType> CallNonvirtual<Type>Method(JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);\n\n    <NativeType> CallNonvirtual<Type>MethodA(JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args);\n\n    <NativeType> CallNonvirtual<Type>MethodV(JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args);\n    ```", "```kt\n    jmethodID FromReflectedMethod(JNIEnv *env, jobject method);\n\n    jobject ToReflectedMethod(JNIEnv *env, jclass cls, jmethodID methodID, jboolean isStatic);\n    ```", "```kt\n    private native static void InitIDs();\n    static {\n        System.loadLibrary(<native lib>);\n        InitIDs();\n    }\n    ```", "```kt\n    jboolean ExceptionCheck(JNIEnv *env);\n    jthrowable ExceptionOccurred(JNIEnv *env);\n    ```", "```kt\n    void ExceptionDescribe(JNIEnv *env);\n    ```", "```kt\n    void ExceptionClear(JNIEnv *env);\n    ```", "```kt\n    jint Throw(JNIEnv *env, jthrowable obj);\n    jint ThrowNew(JNIEnv *env, jclass clazz, const char *message);\n    ```", "```kt\n    void FatalError(JNIEnv *env, const char *msg);\n    ```", "```kt\n    $ $ANDROID_NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-gcc -S tmp.c -o AssemblyMultiplyDemo.s --sysroot=$ANDROID_NDK/platforms/android-14/arch-arm/\n    ```", "```kt\n    $ $ANDROID_NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-gcc -S <c_file_name>.c -o <output_file_name>.s --sysroot=$ANDROID_NDK/platforms/android-<level>/arch-<arch>/\n    ```", "```kt\n    LOCAL_SRC_FILES := AssemblyMultiplyDemo.s assemblyinjni.c\n    ```"]