- en: Chapter 10. A First Look at OpenGL ES
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the OpenGL ES environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing shapes on GLSurfaceView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying projection and camera view while drawing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving the triangle with rotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating the triangle with user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous chapter, Android offers many tools for handling graphics
    and animations. Though the canvas and drawable objects are designed for custom
    drawing, when you need high performance graphics, especially 3D gaming graphics,
    Android also supports OpenGL ES. **Open Graphics Library for Embedded Systems**
    (**OpenGL ES**), is targeted for embedded system. (Embedded systems include consoles
    and phones.)
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is meant to serve as an introduction to using OpenGL ES on Android.
    As usual, we'll provide the steps and explain how things work, but we aren't going
    to be digging into the math or technical details of OpenGL. If you are already
    familiar with OpenGL ES from other platforms, such as iOS, this chapter should
    get you up and running quickly. If you are new to OpenGL, hopefully, these recipes
    will help you decide whether this is an area you want to pursue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android supports the following versions of OpenGL:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenGL ES 1.0**: Android 1.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenGL ES 2.0**: Introduced in Android 2.2 (API 8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenGL ES 3.0**: Introduced in Android 4.3 (API 18)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenGL ES 3.1**: Introduced in Android 5.0 (API 21)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipes for this chapter are of an introductory nature and target OpenGL
    ES 2.0 and higher. OpenGL ES 2.0 is available for nearly all devices currently
    available. Unlike OpenGL ES 2.0 and lower, OpenGL 3.0 and higher require driver
    implementation from the hardware manufacturer. This means, even if your application
    is running on Android 5.0, OpenGL 3.0 and higher may not be available. Therefore,
    it's a good programming practice to check the available OpenGL versions at runtime.
    Alternatively, if your application requires 3.0 and higher features, you can add
    a `<uses-feature/>` element to your Android manifest. (We'll discuss this in the
    first recipe that follows.)
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the other chapters in this book, this chapter is written more as a tutorial
    with each recipe building on lessons learned from the previous recipe. The *Getting
    ready* section of each recipe will clarify the prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Set up the OpenGL ES environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our first recipe will start by showing the steps to set up an activity to use
    an OpenGL `GLSurfaceView`. Similar to the Canvas, the `GLSurfaceView` is where
    your will perform your OpenGL drawing. As this is the starting point, the other
    recipes will refer to this recipe as the base step when they need a `GLSurfaceView`
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `SetupOpenGL`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by indicating the application''s use of OpenGL in the Android
    Manifest, and then we''ll add the OpenGL classes to the activity. Here are the
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Android Manifest and add the following XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following inner class to the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another inner class to the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you ran the preceding application, you saw the activity created and the
    background set to gray. Since these are the basic steps to setting up OpenGL,
    you''ll be reusing this code for the other recipes in this chapter as well. Here
    is the process explained in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring OpenGL in the Android Manifest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by declaring our requirement to use OpenGL ES version 2.0 in the Android
    Manifest with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were using Version 3.0, we would use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For Version 3.1, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Extending the GLSurfaceView class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a custom OpenGL `SurfaceView` class by extending `GLSurfaceView`, as
    we do in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we instantiate an OpenGL rendered class and pass it to the `GLSurfaceView`
    class with the `setRenderer()` method. The OpenGL `SurfaceView` provides a surface
    for our OpenGL drawing, similar to the `Canvas` and `SurfaceView` objects. The
    actual drawing is done in the `Renderer`, which we''ll create next:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an OpenGL rendered class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last step is to create the `GLSurfaceView.Renderer` class and implement
    the following three callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onSurfaceCreated()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDrawFrame()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onSurfaceChanged()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Right now, all we're doing with this class is setting up the callbacks and clearing
    the screen using the color we specify with `glClearColor()` (gray in this case).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the OpenGL environment set up, we'll continue to the next recipe where
    we'll actually draw on the view.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing shapes on GLSurfaceView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe set up the activity to use OpenGL. This recipe will continue
    by showing how to draw on `OpenGLSurfaceView`.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to define the shape. With OpenGL, it is important to realize
    the order in which the vertices of a shape are defined are very important, as
    they determine the front (face) and back of the shape. It's customary (and the
    default behavior) to define the vertices counter clockwise. (Though this behavior
    can be changed, it requires additional code and is not standard practice.)
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also important to understand the OpenGL screen coordinate system, as
    it differs from the Android canvas. The default coordinate system defines (`0,0,0`)
    as the center of the screen. The four edge points are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Top left**: (-1.0, 1.0, 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Top right**: (1.0, 1.0, 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bottom left**: (-1.0, -1.0, 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bottom right**: (1.0, -1.0, 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Z* axis comes straight out of the screen or straight behind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an illustration showing the *X*, *Y*, and *Z* axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing shapes on GLSurfaceView](img/B05057_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to create a `Triangle` class since it is the base shape. In OpenGL,
    you generally use a collection of triangles to create objects. To draw a shape
    with OpenGL, we need to define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertex shader**: This is to draw the shape'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fragment shader**: This is to color the shape'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**: This is an OpenGL ES object for the preceding shaders'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shaders are defined using **OpenGL Shading Language** (**GLSL**), and then
    compiled and added to the OpenGL program object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are two screenshots showing the triangle in both portrait and landscape
    orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing shapes on GLSurfaceView](img/B05057_10_02.jpg)![Drawing shapes on
    GLSurfaceView](img/B05057_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `ShapesWithOpenGL`. Use
    the default **Phone & Tablet** options and select **Empty Activity** when prompted
    for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the OpenGL environment created in the previous recipe *Set
    up the Open GL environment*. Refer to the previous recipe if you have not already
    completed those steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As indicated previously, we''ll be using the OpenGL environment created in
    the previous recipe. The steps that follow will walk you through creating a class
    for the triangle shape and drawing it on the GLSurfaceView:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Java class called `Triangle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following global declarations to the `Triangle` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `loadShader()` method to the `Triangle` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `Triangle` constructor, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `draw()` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `MainActivity.java` and add a `Triangle` variable to the `GLRenderer`
    class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `Triangle` variable in the `onSurfaceCreated()` callback, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `draw()` method in the `onDrawFrame()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned in the introduction, to draw with OpenGL, we first have to define
    the shaders, which we do with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this is uncompiled **OpenGL Shading Language** (**OpenGLSL**), the next
    step is to compile and attach it to our OpenGL object, which we do with the following
    two OpenGL ES methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`glAttachShader()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`glLinkProgram()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After setting up the shaders, we create `ByteBuffer` to store the triangle vertices,
    which are defined in `triangleCoords`. The `draw()` method is where the actual
    drawing occurs using the GLES20 library calls, which is called from the `onDrawFrame()`
    callback.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed, from the screenshots in the introduction, that the triangles
    in the Portrait and Landscape do look identical. As you can see from the code,
    we make no distinction in the orientation when drawing. We'll explain why this
    is happening and show how to correct this issue in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on the OpenGL Shading Language, refer the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.opengl.org/documentation/glsl/](https://www.opengl.org/documentation/glsl/)'
  prefs: []
  type: TYPE_NORMAL
- en: Applying Projection and Camera View while drawing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous recipe, when we draw our shape to the screen, the
    shape is skewed by the screen orientation. The reason for this is because, by
    default, OpenGL assumes a perfectly square screen. We mentioned before, the default
    screen coordinates for the top right is (1,1,0) and bottom left is (-1,-1,0).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since most device screens are not perfectly square, we need to map the display
    coordinates to match our physical device. In OpenGL, we do this with *Projection*.
    This recipe will show how to use Projection to match the GLSurfaceView coordinates
    with the device coordinates. Along with the Projection, we''ll also show how to
    set the Camera View. Here''s a screenshot showing the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying Projection and Camera View while drawing](img/B05057_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `ProjectionAndCamera`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe builds on the previous recipe *Drawing shapes on the GLSurfaceView*.
    If you have not already typed in the previous recipe, do so before starting these
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As stated previously, this recipe will build on the previous recipe, so complete
    those steps before starting. We will be modifying the previous code to add projection
    and camera view to the drawing calculations. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Triangle` class and add the following global declaration to the existing
    declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a matrix variable to `vertexShaderCode` and use it in the position calculation.
    Here is the final result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `draw()` method to pass in a matrix parameter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use the transformation matrix, add the following code to the `draw()` method
    just before the `GLES20.glDrawArrays()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following class variables to the `GLRenderer`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `onSurfaceChanged()` callback to calculate the position matrix as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `onDrawFrame()` callback to calculate the Camera View as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we modify the `vertexShaderCode` to include a matrix variable. We calculate
    the matrix in the `onSurfaceChanged()` callback using the height and width, which
    are passed in as parameters. We pass the transformation matrix to the `draw()`
    method to use it when calculating the position to draw.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we call the `draw()` method, we calculate the camera view. These two
    lines of code calculate the camera view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Without this code, there would actually be no triangle drawn as the camera perspective
    would not "see" our vertices. (This goes back to our discussion on how the order
    of the vertices dictate the front and back of the image.)
  prefs: []
  type: TYPE_NORMAL
- en: When you run the program now, you'll see the output shown in the *Introduction*.
    Notice we have a uniform triangle now, even when the display is rotated.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next recipe, we will start showing the power of OpenGL by rotating the
    triangle.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the triangle with rotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we've demonstrated so far with OpenGL would probably be easier using the
    traditional canvas or drawable objects. This recipe will show a bit of the power
    of OpenGL by rotating the triangle. Not that we can't create movement with the
    other drawing methods, but how easily we can do this with OpenGL!
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe will demonstrate how to rotate the triangle, as this screenshot
    shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving the triangle with rotation](img/B05057_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `CreatingMovement`. Use
    the default **Phone & Tablet** options and select **Empty Activity** when prompted
    for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe builds on the previous recipe *Applying Projection and Camera View
    While Drawing*. If you have not already typed in the previous recipe, do so before
    continuing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we are continuing from the previous recipe, we have very little work
    to do. Open `MainActivity.java` and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a Matrix to the `GLRendered` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onDrawFrame()` callback, replace the existing `mTriangle.draw(mMVPMatrix);`
    statement with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're using the `Matrix.setRotateM()` method to calculate a new rotation matrix
    based on the angle we pass in. For this example, we're using the system uptime
    to calculate an angle. We can use whatever method we want to derive an angle,
    such as a sensor reading or touch events.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the system clock provides the added benefit of creating continuous movement,
    which certainly looks better for demonstration purposes. The next recipe will
    demonstrate how to use user input to derivate an angle for rotating the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: The render mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'OpenGL offers a `setRenderMode()` option to draw only when the view is dirty.
    This can be enabled by adding the following code to the `CustomGLSurfaceView()`
    constructor just below the `setRenderer()` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will cause the display to update once, then wait until we request an update
    with `requestRender()`.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the triangle with user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous example demonstrated rotating the triangle based on the system
    clock. This created a continuously rotating triangle, depending on the render
    mode we used. But what if you wanted to respond to the input from the user?
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll show how to respond to user input by overriding the `onTouchEvent()`
    callback from `GLSurfaceView`. We'll still rotate the triangle using the `Matrix.setRotateM()`
    method, but instead of deriving an angle from the system time, we'll calculate
    an angle based on the touch location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot showing this recipe running on a physical device (to highlight
    the touch, the **Show touches** developer option is enabled):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rotating the triangle with user input](img/B05057_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `RotateWithUserInput`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates an alternative approach to the previous recipe and
    therefore will be based on *Applying projection and camera view while drawing*
    (the same starting point as the previous recipe.)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As stated previously, we will continue, not from the previous recipe, but from
    the *Applying projection and camera view while drawing* recipe. Open `MainActivity.java`
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following global variables to the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code the `GLRendered` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same class, modify the `onDrawFrame()` method by replacing the existing
    `mTriangle.draw(mMVPMatrix);` statement with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `onSurfaceChanged()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `CustomGLSurfaceView` constructor, which is below
    `setRenderer()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `onTouchEvent()` to the `CustomGLSurfaceView` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The obvious difference between this example and the previous recipe is how we
    derive the angle to pass to the `Matrix.setRotateM()` call. We also changed the
    `GLSurfaceView` render mode using `setRenderMode()` to only draw on request. We
    made the request using `requestRender()` after calculating a new angle in the
    `onTouchEvent()` callback.
  prefs: []
  type: TYPE_NORMAL
- en: We also demonstrated the importance of deriving our own `GLSurfaceView` class.
    Without our `CustomGLSurfaceView` class, we would not have a way to override the
    `onTouchEvent` callback, or any other callbacks from `GLSurfaceView`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This concludes the OpenGL ES recipes but we've only just touched upon the power
    of OpenGL. If you're serious about learning OpenGL, see the links in the next
    section and check out one of the many books written on OpenGL.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also worth checking out one of the many frameworks available, such as
    the Unreal Engine:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unreal Engine 4 is a complete suite of game development tools made by game developers,
    for game developers.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.unrealengine.com/what-is-unreal-engine-4](https://www.unrealengine.com/what-is-unreal-engine-4)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**OpenGL**: The Industry Standard for High Performance Graphics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.opengl.org/](https://www.opengl.org/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**OpenGL ES**: The Standard for Embedded Accelerated 3D Graphics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.khronos.org/opengles/](https://www.khronos.org/opengles/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Unreal Engine**: Android Quick Start'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.unrealengine.com/latest/INT/Platforms/Android/GettingStarted/index.html](https://docs.unrealengine.com/latest/INT/Platforms/Android/GettingStarted/index.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
