- en: Chapter 3. Robotium APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to the `Solo` class and information about the
    APIs present in the framework. Once this is completed, we will consider the Resource
    ID test case, which briefs us on how to achieve internationalization using Robotium.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will get to know most of the APIs in the framework
    and test case evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Solo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Solo` class is a main class provided in the Robotium framework, which consists
    of APIs to write test cases in a project. Robotium can be used in conjunction
    with Android test classes, such as `ActivityInstrumentationTestCase2` and `SingleLaunchActivityTestCase`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Solo` class has the following two constructors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Solo (android.app.Instrumentation instrumentation)`: This constructor takes
    in instrumentation as a parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Solo(android.app.Instrumentation instrumentation, android.app.Activity activity)`:
    This constructor takes in instrumentation, as well as activity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many APIs present inside the Robotium framework and they cover most
    of the features available in Android. The method count increases, based on user
    feedback and suggestions. If any Robotium test case developer working on a test
    project finds that there are some methods (referring to a particular useful functionality)
    that can be added as a part of the Robotium framework, then it can help people
    in their respective projects.
  prefs: []
  type: TYPE_NORMAL
- en: '![API calls](img/8010OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Robotium developer team analyzes these new requirements based on priority.
    Some of them are implemented and get added/deleted as a part of the next release.
    If any API support gets discontinued in the next release version, updating your
    test project Robotium lib could be troublesome.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these methods are available online at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://robotium.googlecode.com/svn/doc/com/jayway/android/robotium/solo/Solo.html](http://robotium.googlecode.com/svn/doc/com/jayway/android/robotium/solo/Solo.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://robotium.googlecode.com/svn/doc/com/jayway/android/robotium/solo/Solo.html](http://robotium.googlecode.com/svn/doc/com/jayway/android/robotium/solo/Solo.html)'
  prefs: []
  type: TYPE_NORMAL
- en: You can either study the Javadoc for the API set, or you can browse through
    the source code available at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jayway/robotium/tree/master/robotium-solo](https://github.com/jayway/robotium/tree/master/robotium-solo)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The brief insight on Robotium, including the total commits, LOC, project model,
    and technology stack is represented in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![API calls](img/8010OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Snapshot from ohloh.net
  prefs: []
  type: TYPE_NORMAL
- en: Resource ID in Robotium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Robotium, you don't need to import the **Application Under Test** (**AUT**)
    resources to the test project in order to use the Resource ID.
  prefs: []
  type: TYPE_NORMAL
- en: '![Resource ID in Robotium](img/8010OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can do it without importing the resource folder. All you need is to get
    the Resource ID by passing the name and type of the view to the `getIdentifier()`
    method and then passing the obtained ID to the `getView()` method to get the respective
    view object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It works with the string parameter as well; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Understanding internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Understanding internationalization](img/8010OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You might be wondering as to what internationalization is. Well, it is the means
    of adapting an application to various languages or regions. This might be confused
    with the concept of localization, but both concepts are slightly different. Localization
    means adapting the application to any region or language, thereby using locale
    components and translating the text.
  prefs: []
  type: TYPE_NORMAL
- en: Consider an application that can have multiple language support. If you want
    to test this application, you can't hardcode any text in any language as a part
    of your test case. To generalize this, it's recommended that you should add strings
    inside the `res/values/strings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how the internationalization test case is implemented using the following
    simple example.
  prefs: []
  type: TYPE_NORMAL
- en: 'An application consists of the **Connect** toggle button, which when clicked
    on, toggles itself to the **Disconnect** button. Below it, there is a TextView
    that displays all the connection logs generated by the application. The UI looks
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding internationalization](img/8010OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the Connect button is clicked on, **Successful** is displayed in the Textview
    below it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of adding any hardcoded values for the text in the toggle button, we
    can internationalize it to use values specified in the `res/values/string.xml`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The values specified in the `string.xml` file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The following is the code of the test project `TestInterApp`, which has a test
    case named `testInterAppBlackBox` that clicks on the **Connect** button and toggles
    it to the **Disconnect** button. It then searches for the **Successful** text
    in the connection-log Textview present below the toggle button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the test case result in the Junit console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding internationalization](img/8010OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Test case and result
  prefs: []
  type: TYPE_NORMAL
- en: As a result of internationalization, if any user wants to change the language
    region-wise, there is no need to modify the Robotium test case. Instead, just
    change the variable value in the region language inside the `string.xml` file
    and the test case will work the same for all the regions and languages.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen most of the Robotium API calls with their descriptions
    and how to use internationalization in Robotium. In the next chapter, you will
    learn how to access different web elements of the web view in an Android application
    using Robotium.
  prefs: []
  type: TYPE_NORMAL
