["```kt\ndefaultConfig { \n    applicationId \"com.example.kyle.factoryexample\" \n    minSdkVersion 16 \n    targetSdkVersion 25 \n    versionCode 1 \n    versionName \"1.0\" \n} \n\n```", "```kt\nminSdkVersion 21 \ntargetSdkVersion 24 \n\n```", "```kt\n<uses-sdk \n    android:minSdkVersion=\"16\" \n    android:targetSdkVersion=\"25\" /> \n\n```", "```kt\n        public interface Bread { \n\n            String name(); \n            String calories(); \n        } \n\n    ```", "```kt\n        public class Baguette implements Bread { \n\n            @Override \n            public String name() { \n                return \"Baguette\"; \n            } \n\n            @Override \n            public String calories() { \n                return \" : 65 kcal\"; \n            } \n          } \n\n          public class Roll implements Bread { \n\n            @Override \n            public String name() { \n                return \"Roll\"; \n            } \n\n            @Override \n            public String calories() { \n                return \" : 75 kcal\"; \n            } \n          } \n\n          public class Brioche implements Bread { \n\n            @Override \n            public String name() { \n                return \"Brioche\"; \n            } \n\n            @Override \n            public String calories() { \n                return \" : 85 kcal\"; \n            } \n        } \n\n    ```", "```kt\n    public class BreadFactory { \n\n        public Bread getBread(String breadType) { \n\n            if (breadType == \"BRI\") { \n                return new Brioche(); \n\n            } else if (breadType == \"BAG\") { \n                return new Baguette(); \n\n            } else if (breadType == \"ROL\") { \n                return new Roll(); \n            } \n\n            return null; \n        } \n    } \n\n    ```", "```kt\n    <TextView \n        android:id=\"@+id/text_view\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" /> \n\n    ```", "```kt\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.activity_main); \n\n        TextView textView = (TextView) findViewById(R.id.text_view); \n\n        BreadFactory breadFactory = new BreadFactory(); \n        Bread bread = breadFactory.getBread(\"BAG\"); \n\n        textView.setText(new StringBuilder() \n                .append(bread.name()) \n                .toString()); \n    } \n\n    ```", "```kt\n    private static final String DEBUG_TAG = \"tag\"; \n\n    ```", "```kt\n    Log.d(DEBUG_TAG, bread); \n\n    ```", "```kt\n05-24 13:25:52.484 17896-17896/? D/tag: Brioche\n05-24 13:36:31.214 17896-17896/? D/tag: Baguette\n05-24 13:42:45.180 17896-17896/? D/tag: Roll\n\n```", "```kt\n    public interface Bread { \n\n        String name(); \n        String calories(); \n    } \n\n    public interface Filling { \n\n        String name(); \n        String calories(); \n    } \n\n    ```", "```kt\n    public class Baguette implements Bread { \n\n        @Override \n        public String name() { \n            return \"Baguette\"; \n        } \n\n        @Override \n        public String calories() { \n            return \" : 65 kcal\"; \n        } \n    } \n\n    ```", "```kt\n    public abstract class AbstractFactory { \n\n        abstract Bread getBread(String bread); \n        abstract Filling getFilling(String filling); \n    } \n\n    ```", "```kt\n    public class BreadFactory extends AbstractFactory { \n\n        @Override \n        Bread getBread(String bread) { \n\n            if (bread == null) { \n                return null; \n            } \n\n            if (bread == \"BAG\") { \n                return new Baguette(); \n            } else if (bread == \"BRI\") { \n                return new Brioche(); \n            } \n\n            return null; \n        } \n\n        @Override \n        Filling getFilling(String filling) { \n            return null; \n        } \n    } \n\n    ```", "```kt\n    public class FillingFactory extends AbstractFactory { \n\n        @Override \n        Filling getFilling(String filling) { \n\n            if (filling == null) { \n                return null; \n            } \n\n            if (filling == \"CHE\") { \n                return new Cheese(); \n            } else if (filling == \"TOM\") { \n                return new Tomato(); \n            } \n\n            return null; \n        } \n\n        @Override \n        Bread getBread(String bread) { \n            return null; \n        } \n    } \n\n    ```", "```kt\n    public class FactoryGenerator { \n\n        public static AbstractFactory getFactory(String factory) { \n\n            if (factory == null) { \n                return null; \n            } \n\n            if (factory == \"BRE\") { \n                return new BreadFactory(); \n            } else if (factory == \"FIL\") { \n                return new FillingFactory(); \n            } \n\n            return null; \n        } \n    } \n\n    ```", "```kt\n    AbstractFactory fillingFactory = FactoryGenerator.getFactory(\"FIL\"); \n    Filling filling = fillingFactory.getFilling(\"CHE\"); \n    Log.d(DEBUG_TAG, filling.name()+\" : \"+filling.calories()); \n\n    AbstractFactory breadFactory = FactoryGenerator.getFactory(\"BRE\"); \n    Bread bread = breadFactory.getBread(\"BRI\"); \n    Log.d(DEBUG_TAG, bread.name()+\" : \"+bread.calories()); \n\n    ```", "```kt\ncom.example.kyle.abstractfactory D/tag: Cheese :  : 155 kcal\ncom.example.kyle.abstractfactory D/tag: Brioche :  : 85 kcal\n\n```", "```kt\npublic class IcedTeaimplements Drink { \n\n    @Override \n    public String name() { \n        return \"Iced tea\"; \n    } \n\n    @Override \n    public String calories() { \n        return \" : 110 kcal\"; \n    } \n} \n\n```", "```kt\nabstract Drink getDrink(String drinkType); \n\n```"]