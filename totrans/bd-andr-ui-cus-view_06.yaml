- en: Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画
- en: So far we've seen how to create and render different types of custom views,
    from very simple 2D canvas drawing to more complex canvas operations, and recently
    how to create a custom view using OpenGL ES and vertex/fragment shaders. In some
    of the examples used to demonstrate how to use these rendering primitives, we've
    already used some animations and, as you could imagine, animations are one of
    the key elements of custom views. If we want to build a highly complex UI using
    a custom view, but we don't animate it at all, it might be better to simply use
    a static image.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了如何创建和渲染不同类型的自定义视图，从非常简单的 2D 画布绘图到更复杂的画布操作，以及最近如何使用 OpenGL ES 和顶点/片段着色器创建自定义视图。在一些用于演示如何使用这些渲染原语的示例中，我们已经使用了一些动画，正如你可以想象的，动画是自定义视图的关键元素之一。如果我们想使用自定义视图构建高度复杂的
    UI，但完全不使用动画，那么使用静态图像可能更好。
- en: 'In this chapter, we''ll cover how to add animations to our custom views. There
    are many ways of doing it, but in more detail, we''ll look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何向自定义视图添加动画。有许多方法可以实现这一点，但我们会更详细地探讨以下主题：
- en: Custom-made animations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义动画
- en: Fixed time step technique
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定时间步长技术
- en: Using the Android Property Animator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Android 属性动画
- en: In addition, we'll also see what are the issues if we implement some of the
    animations the wrong way, as it might seem simpler, and by just good luck, although
    it'll play against us, they'll seem to work perfectly fine on our device.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将探讨如果我们错误地实现一些动画，可能会出现哪些问题，因为这看起来可能更简单，也许仅仅是运气好，尽管这可能会对我们不利，但它们似乎在我们的设备上可以完美运行。
- en: Custom-made animations
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义动画
- en: Let's start by showing how we can animate some values ourselves without relying
    too much on the methods and classes provided by the Android SDK. In this section,
    we'll see how to animate a single property or several properties using different
    mechanisms. By doing so, we could then apply the approach that suits us better
    on our custom views, depending on the type of animation we want to achieve or
    the specificities of the view we're implementing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从如何自己实现一些值的变化开始，而不是过分依赖 Android SDK 提供的方法和类。在本节中，我们将了解如何使用不同的机制对一个或多个属性进行动画处理。这样，我们就可以根据我们想要实现的动画类型或我们正在实现的观点的具体特点，在我们自定义的视图中应用更合适的方法。
- en: Timed frame animations
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时帧动画
- en: We have already used this kind of animation on the 3D example in our previous
    chapter. The main concept consists of assigning a new value to all the animatable
    properties before drawing a new frame based on the amount of time passed. We can
    be tempted with incrementing or computing a new value based on the number of frames
    drawn, but that is highly inadvisable, as the animation will be played at different
    speeds depending on the speed of the device, computation, or drawing complexity
    and other processes executing in the background.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上一章的 3D 示例中，我们已经使用了这种类型的动画。主要概念是在绘制新帧之前，根据经过的时间为所有可动画属性分配一个新值。我们可能会被诱惑根据已绘制的帧数递增或计算一个新值，但这是非常不建议的，因为动画的播放速度将取决于设备速度、计算或绘图复杂性以及其他在后台执行的过程。
- en: To do it right, we have to involve something independent from the rendering
    speed, frames per second, or frames drawn, and a perfect solution is to use time-based
    animations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确实现，我们必须引入与渲染速度、每秒帧数或已绘制的帧数无关的东西，而基于时间的动画是一个完美的解决方案。
- en: Android provides us with several mechanisms to do so. For instance, we could
    use `System.currentTimeMillis()`, `System.nanoTime()`, or even some of the methods
    available in system clock, such as `elapsedRealtime()`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Android 为我们提供了几种机制来实现这一点。例如，我们可以使用 `System.currentTimeMillis()`、`System.nanoTime()`，甚至是一些系统时钟中可用的方法，如
    `elapsedRealtime()`。
- en: 'Let''s build a simple example comparing different methods. First, let''s create
    a simple custom view that draws four rectangles, or `Rect`s, rotated at different
    angles:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单的示例来比较不同的方法。首先，创建一个简单的自定义视图，绘制四个旋转不同角度的矩形，或者说是 `Rect`：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On the class constructor, we initialize the `Paint` object and create an array
    of four floats to hold the angle of rotation of each rectangle. At this point,
    the four of them will be at `0`. Let's now implement the `onDraw()` method.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在类的构造函数中，我们初始化 `Paint` 对象，并创建一个包含四个浮点数的数组来保存每个矩形的旋转角度。此时，这四个角度都将是 `0`。现在，让我们实现
    `onDraw()` 方法。
- en: On the `onDraw()` method, the first thing we've got to do is to clear the canvas
    background with a solid color, to clear our previous frame.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onDraw()`方法中，我们首先要做的是用纯色清除画布背景，以清除我们之前的帧。
- en: 'Once we''ve done so, we calculate the coordinates where we''ll draw the four
    rectangles and proceed with the drawing. To simplify the rotation, in this case,
    we used the `canvas.translate` and `canvas.rotate` with a pivot point to rotate
    by the center of the rectangle. Also, to avoid doing additional calculations and
    keep it as simple as possible, we''re surrounding each rectangle drawing with
    a `canvas.save` and `canvas.restore`, to keep the same state before each drawing
    operation:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们计算将绘制四个矩形的坐标并开始绘制。为了简化旋转，在本例中，我们使用了`canvas.translate`和`canvas.rotate`，以矩形的中心点作为旋转轴点。同时，为了避免进行额外的计算并尽可能保持简单，我们在每个矩形绘制前后分别使用`canvas.save`和`canvas.restore`，以保持每次绘制操作之前的状态：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To see the differences with more clarity, we're drawing a text showing the angle
    each rectangle is being rotated. And, to actually trigger a redraw of our view,
    we're calling an `invalidate`, delayed by 10 milliseconds.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰地看到差异，我们绘制了一个文本，显示每个矩形旋转的角度。并且，为了实际触发视图的重绘，我们调用了延迟10毫秒的`invalidate`。
- en: 'The first rectangle will simply increment its angle each time it is drawn,
    ignoring time methods, and the other three will use respectively: `System.currentTimeMillis()`,
    `System.nanoTime(),` and `SystemClock.elapsedRealtime()`. Let''s initialize some
    variables to hold the initial values of the timers:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个矩形将在每次绘制时简单地增加其角度，忽略时间方法，而其他三个将分别使用：`System.currentTimeMillis()`、`System.nanoTime()`和`SystemClock.elapsedRealtime()`。让我们初始化一些变量来保存定时器的初始值：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add a small calculation at the beginning of the `onDraw()` method:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onDraw()`方法的开头添加一个小计算：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since some time can pass from the initial class creation to when the `onDraw()`
    method is called, we're calculating the initial value of the timers here. If the
    value of `timeStartElapsed` is `-1`, for example, it means it has not been initialized.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于从初始类创建到调用`onDraw()`方法之间可能经过了一段时间，我们在这里计算定时器的初始值。例如，如果`timeStartElapsed`的值是`-1`，这意味着它尚未初始化。
- en: Then, as we've set the initial time, we can compute how much time has passed
    and use that as the base value of our animations. Let's multiply it by a factor
    to control the speed. In this case, we've used `0.02` as an example, and took
    into account that nanoseconds are in another order of magnitude than milliseconds.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们设定了初始时间，然后可以计算出已经过去了多少时间，并将其作为动画的基础值。我们可以乘以一个因子来控制速度。在本例中，我们使用了`0.02`作为示例，并考虑到纳秒和毫秒的量级不同。
- en: 'If we run this example, we''ll have something similar to the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个示例，我们将得到类似于以下截图的结果：
- en: '![](img/6e50b408-0c88-4542-89ab-9015488a3b94.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e50b408-0c88-4542-89ab-9015488a3b94.png)'
- en: 'One of the issues with this approach is that if we put the application in the
    background and after some time we put it back on the foreground, we can see all
    the values depending on time jumping forward, as time will not stop when our app
    is in the background. To control this, we can override the `onVisibilityChanged()`
    callback and check whenever our view is visible or invisible:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个问题是，如果我们把应用放到后台，过一段时间再把它调到前台，我们会看到所有基于时间的值都会向前跳跃，因为当我们的应用在后台时时间并不会停止。为了控制这一点，我们可以重写`onVisibilityChanged()`回调，并检查我们的视图是可见还是不可见：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, we're calculating the time our view is not visible and
    adjusting the `timeStartElapsed` with that time. We've to avoid doing it the very
    first time, as this method will be called the first time the view becomes visible.
    For that reason, we're checking if `timeStartElapsed` is different from `-1`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们计算了视图不可见的时间，并调整`timeStartElapsed`。我们必须避免在第一次执行此操作，因为该方法将在视图第一次可见时被调用。因此，我们检查`timeStartElapsed`是否不等于`-1`。
- en: 'As we have this callback just before our view becomes visible, we can easily
    change our previous code to calculate the initial value of the timers and put
    it here, simplifying our `onDraw()` method as well:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有这个回调正好在视图变为可见之前，我们可以轻松地更改之前的代码来计算定时器的初始值，并将其放在这里，也简化我们的`onDraw()`方法：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this small adjustment, only to the `timeStartElapsed`, we'll see the animation
    is preserved on the bottom right rectangle even when we put the application in
    the background.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个微小的调整，只修改了`timeStartElapsed`，即使我们把应用放到后台，我们也会看到右下方的矩形保留了动画。
- en: You can find the whole example source code in the `Example27-Animations` folder
    in the GitHub repository.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub仓库的`Example27-Animations`文件夹中找到整个示例的源代码。
- en: Fixed timestep
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定时间步长
- en: There are times when calculations can be very complex when dealing with animations.
    One clear example can be in physics simulations and in games in general, but some
    other times, our calculations, even for a simple-ish custom view, can get a bit
    tricky when using time-based animation. Having a fixed timestep will allow us
    to abstract our animation logic from time variables, but still keep our animation
    tied to time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理动画时，有时计算可能会非常复杂。一个明显的例子就是物理模拟和一般游戏中的情况，但在其他一些时候，即使是对于一个简单自定义视图，当使用基于时间的动画时，我们的计算也可能会有点棘手。固定时间步长将允许我们从时间变量中抽象出动画逻辑，但仍然使我们的动画与时间相关联。
- en: The logic behind having a fixed timestep is to assume our animation logic will
    be always executed a fixed rate. For instance, we can assume it will be executed
    at *60* fps regardless of which is the actual rendering frames per second. To
    show how it could be done, we'll create a new custom view that will spawn particles
    at the position we're pressing or dragging on the screen and applying some very
    basic and simple physics.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 设定固定时间步长的逻辑是假设我们的动画逻辑将始终以固定的速率执行。例如，我们可以假设无论实际渲染的每秒帧数是多少，它都将以*60* fps的速率执行。为了展示如何做到这一点，我们将创建一个新的自定义视图，该视图将在我们按或拖动屏幕的位置生成粒子，并应用一些非常基础简单的物理效果。
- en: 'First, let''s create the basic custom view like our previous example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们按照之前的示例创建一个基本的自定义视图：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We''re initializing the basic variables and we''re also creating an array of
    `particles`. Also, as we''ve implemented the `onVisibilityChange` callback on
    our previous example, let''s take advantage of it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化基本变量，并且创建一个`particles`数组。同样，由于我们在上一个示例中实现了`onVisibilityChange`回调，让我们利用它：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s now define the `Particle` class, let''s keep it as simple as possible:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来定义一个`Particle`类，尽量保持其简单：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We've only defined the `x`, `y` coordinates, the `x` and `y` velocity as `vx`
    and `vy` respectively, and the time to live of the particle. When the time to
    live of the particle reaches `0`, we'll not update or draw it anymore.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只定义了`x`、`y`坐标，`x`和`y`的速度分别为`vx`和`vy`，以及粒子的生命周期。当粒子的生命周期达到`0`时，我们将不再更新或绘制它。
- en: 'Now, let''s implement the `onDraw()` method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来实现`onDraw()`方法：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We've delegated all the animation to the `animateParticles()` method and here
    we're just iterating through all the particles, checking if their time to live
    is positive and, in that case, drawing them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有动画委托给`animateParticles()`方法，在这里我们只是遍历所有粒子，检查它们的生命周期是否为正，如果是，就绘制它们。
- en: 'Let''s see now how we can implement the `animateParticles()` method with a
    fixed time step:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用固定时间步长来实现`animateParticles()`方法：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We calculate the time difference from the last time, or delta of time, and we
    accumulate it in the `accTime` variable. Then, as long as `accTime` is higher
    than the threshold we've defined, we execute one logic step. It might happen that
    more than one logic steps are executed between renders or, in some other cases,
    it might not get executed during two different frames.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算自上次以来的时间差，或者说是时间增量，并将其累积在`accTime`变量中。然后，只要`accTime`高于我们定义的阈值，我们就执行一个逻辑步骤。可能会在两次渲染之间执行多个逻辑步骤，或者在有些情况下，可能在两帧之间没有执行。
- en: Finally, we subtract the time threshold we defined to the `accTime` for each
    logic step we've executed and we set the new `timeStart` to the time we used for
    calculating the difference of time from the previous call to `animateParticles()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为每个执行的逻辑步骤从`accTime`中减去我们定义的时间阈值，并将新的`timeStart`设置为用于计算从上一次调用`animateParticles()`以来时间差的时间。
- en: In this example, we've defined the time threshold to be `16`, so every `16`
    milliseconds we'll execute one logic step, independently if we're rendering `10`
    or `60` frames per second.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将时间阈值定义为`16`，所以每`16`毫秒我们将执行一个逻辑步骤，无论我们是渲染`10`帧还是`60`帧每秒。
- en: 'The `logicTick()` method on the `Particle` class completely ignores the current
    value of the timer, as it assumes it''ll be executed on a fixed time step:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Particle`类上的`logicTick()`方法完全忽略了计时器的当前值，因为它假设它将在固定的时间步长上执行：'
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It's an extreme over-simplification of a particle physic simulation. It basically
    applies friction and adds vertical acceleration to the particles, calculates if
    they have to bounce from the screen limits, and calculates the new `x` and `y`
    positions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对粒子物理模拟的极度简化。它基本上对粒子应用摩擦力并添加垂直加速度，计算它们是否需要从屏幕边缘反弹，并计算新的`x`和`y`位置。
- en: 'We''re just missing the code to spawn new particles when we''ve a pressed or
    dragged a `TouchEvent`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是缺少在按或拖动`TouchEvent`时生成新粒子的代码：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we''re calling `spawnParticle()` as long as we''ve got a touch event
    that is a press or a move. The implementation of `spawnParticle()` is also very
    simple:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，只要我们有按下的或移动的触摸事件，我们就会调用`spawnParticle()`。`spawnParticle()`的实现也非常简单：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are using the `particleIndex` variable as a circular index of the `particles`
    array. Whenever it arrives at the end of the array it'll start again at the very
    beginning. This method sets the `x` and `y` coordinates of the touch event and
    it randomizes the velocity and time to live of each spawned particle. We've created
    a `SPAWN_RATE` constant to spawn multiple particles on the same touch event and
    improve the visual effect.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`particleIndex`变量作为`particles`数组的循环索引。每当它到达数组末尾时，它将重新从数组开始处继续。这种方法设置触摸事件的`x`和`y`坐标，并随机化每个生成粒子的速度和生存时间。我们创建了一个`SPAWN_RATE`常量，以在同一个触摸事件上生成多个粒子，从而改善视觉效果。
- en: 'If we run the application, we can see it in action, and it''ll be very similar
    to the following screenshot, but in this case, it''s very hard to capture the
    idea of the animation in a screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行应用程序，我们可以看到它的实际效果，它将与以下截图非常相似，但在这种情况下，很难在截图中捕捉到动画的想法：
- en: '![](img/7dcca15c-8bc9-4b99-bd5c-6b14d70328c7.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7dcca15c-8bc9-4b99-bd5c-6b14d70328c7.png)'
- en: But we're missing something. As we've mentioned before, sometimes we'll execute
    two, or maybe more, logic steps between two rendered frames, but on some other
    times, we'll not execute any logic steps between two consecutive frames. If we
    don't execute any logic steps between those two frames, the result will be the
    same and a waste of CPU and battery life.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们遗漏了一些东西。正如我们之前提到的，有时在两帧渲染之间，我们会执行两个或更多的逻辑步骤，但在其他时候，我们可能在连续的两帧之间不执行任何逻辑步骤。如果我们在这两帧之间不执行任何逻辑步骤，结果将是相同的，并且会浪费CPU和电池寿命。
- en: Even if we're between logic steps, that doesn't mean it hasn't passed any time
    between frames. Actually, we're somewhere between the previous calculated logic
    step and the next one. The good news is that we can actually calculate that, improving
    the smoothness of the animation and solving this issue at the same time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们处于逻辑步骤之间，这并不意味着在帧之间没有经过任何时间。实际上，我们处于上一个计算出的逻辑步骤和下一个步骤之间的某个位置。好消息是，我们实际上可以计算出这一点，从而提高动画的平滑度并同时解决此问题。
- en: 'Let''s include this modification to the `animateParticles()` method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个修改包括到`animateParticles()`方法中：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We''re calculating the factor between which will tell us how close or far it
    is from the next logic step. If the factor is `0`, it means we''re just at the
    exact time of the logic step we''ve just executed. If the factor is `0.5`, it
    means we''re halfway between the current step and the next one and if the factor
    is `0.8`, we''re almost at the next logic step and precisely *80%* of time passed
    since the previous step. The way to smooth the transition between one logic step
    and the next is to interpolate using this factor, but to be able to do so, first
    we need to calculate the values of the next step as well. Let''s change the `logicTick()`
    method to implement this change:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在计算一个因子，该因子将告诉我们距离下一个逻辑步骤有多近或多远。如果因子是`0`，这意味着我们正好处于刚刚执行的逻辑步骤的确切时间。如果因子是`0.5`，这意味着我们处于当前步骤和下一个步骤之间的一半，而如果因子是`0.8`，我们几乎要到达下一个逻辑步骤，并且精确地*80%*的时间已经自上一个步骤过去了。在一步逻辑步骤和下一步之间平滑过渡的方法是使用这个因子进行插值，但要能够这样做，我们首先需要计算下一步的值。让我们改变`logicTick()`方法以实现这个变化：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, at every logic step we're assigning the values of the next logic step to
    the current variables to avoid recalculating them, and calculating the next logic
    step. This way, we've got both values; the current and the new values after the
    next logic step is executed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在每一个逻辑步骤中，我们都在将下一个逻辑步骤的值赋给当前变量以避免重新计算它们，并计算下一个逻辑步骤。这样，我们得到了这两个值；在执行下一个逻辑步骤之后的当前值和新值。
- en: 'As we''ll be using some intermediate values between `x`, `y,` and `nextX`,
    `nextY`, we''ll calculate these values on new variables as well:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用`x`、`y`和`nextX`、`nextY`之间的中间值，我们也会在新变量上计算这些值。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we can see, `drawX` and `drawY` will be an intermediate state between the
    current logic step and the next one. If we apply the previous example values to
    this factor, we'll see how this method works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`drawX`和`drawY`将是当前逻辑步骤和下一个逻辑步骤之间的中间状态。如果我们将前一个示例的值应用到这个因子上，我们就会看到这种方法是如何工作的。
- en: If factor is `0drawX` and `drawY` are exactly `x` and `y`. On the contrary,
    if factor is `1`, `drawX` and `drawY` are exactly `nextX` and `nextY`, although
    this should never happen as another logic step would have been triggered.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果因子是`0`，则`drawX`和`drawY`正好是`x`和`y`。相反，如果因子是`1`，则`drawX`和`drawY`正好是`nextX`和`nextY`，尽管这实际上不会发生，因为另一个逻辑步骤将被触发。
- en: In the case of factor being `0.8`, `drawX` and `drawY` values are a linear interpolation
    weighed at *80%* the values of the next logic step and *20%* of the current one,
    allowing a smooth transition between states.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在因子为`0.8`的情况下，`drawX`和`drawY`的值是对下一个逻辑步骤的值*80%*和当前步骤的值*20%*的线性插值，从而实现状态之间的平滑过渡。
- en: You can find the whole example source code in the `Example28-FixedTimestep`
    folder in the GitHub repository. The fixed timestep is covered with more details
    in the fix your timestep artiche on the Gaffer On Games blog.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub仓库的`Example28-FixedTimestep`文件夹中找到整个示例源代码。固定时间步进在Gaffer On Games博客的“fix
    your timestep”文章中有更详细的介绍。
- en: Using Android SDK Classes
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android SDK类
- en: So far, we've seen how to create our own animations, using time-based animations
    or using a fixed time step mechanism. But Android provides us several ways of
    doing animations using its SDK and the animation framework. In most cases, we
    can simplify our animations by just using the property animator system instead
    of creating our own, but that will depend, always, on the complexity of what we
    want to achieve and how we want to tackle the development.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了如何使用基于时间动画或固定时间步机制来创建我们自己的动画。但Android提供了多种使用其SDK和动画框架进行动画制作的方法。在大多数情况下，我们可以通过仅使用属性动画系统来简化我们的动画，而无需创建自己的系统，但这将取决于我们想要实现的内容的复杂性以及我们想要如何处理开发。
- en: For more information please refer to the property animation framework from the
    Android developer's documentation website.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参考Android开发者文档网站上的属性动画框架。
- en: ValueAnimator
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 值动画
- en: 'As part of the property animator system, we have the `ValueAnimator` class.
    We can use it to simply animate `int`, `float`, or `color` variables or properties.
    It''s quite easy to use, for instance we can animate a float value from `0` to
    `360` during `1500` milliseconds using the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作为属性动画系统的一部分，我们有`ValueAnimator`类。我们可以使用它来简单地动画化`int`、`float`或`color`变量或属性。它非常易于使用，例如，我们可以使用以下代码在`1500`毫秒内将浮点值从`0`动画化到`360`：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is alright, but if we want to get updates of the animation and react to
    them, we''ve got to set an `AnimatorUpdateListener()`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正确的，但如果我们想要获取动画的更新并对其做出反应，我们必须设置一个`AnimatorUpdateListener()`。
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Also, in this example, we can see we're calling `invalidate()`from the `AnimatorUpdateListener()`,
    so we're also telling the UI to redraw the view.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在这个例子中，我们可以看到我们在`AnimatorUpdateListener()`中调用了`invalidate()`，因此我们也在告诉UI重新绘制视图。
- en: 'There are many things we can configure of the way the animation behaves: from
    the animation repeat mode, number of repetitions, and type of interpolator. Let''s
    see it in action using the same example we used at the beginning of this chapter.
    Let''s draw four rectangles on the screen, and rotate them using different settings
    of a `ValueAnimator`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以配置动画行为的许多方面：从动画重复模式、重复次数和插值器类型。让我们使用本章开始时使用的同一个示例来看一下它的实际应用。让我们在屏幕上绘制四个矩形，并使用`ValueAnimator`的不同设置来旋转它们：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Instead of setting the initial time and calculating the time difference, we''re
    now configuring four different `ValueAnimators` and triggering the invalidate
    calls from their `onAnimationUpdate()` callbacks. On these `ValueAnimator`, we''ve
    used different interpolators and different repeat modes: `ValueAnimator.RESTART`
    and `ValueAnimator.REVERSE`. On all of them we''ve set the repeat count to `ValueAnimator.INFINITE`
    so we can observe and compare the details of the interpolator without pressure.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在配置了四个不同的 `ValueAnimators`，并通过它们的 `onAnimationUpdate()` 回调触发失效调用，而不是设置初始时间和计算时间差。在这些
    `ValueAnimator` 上，我们使用了不同的插值器和不同的重复模式：`ValueAnimator.RESTART` 和 `ValueAnimator.REVERSE`。在所有这些中，我们将重复次数设置为
    `ValueAnimator.INFINITE`，这样我们就可以在没有压力的情况下观察和比较插值器的细节。
- en: On the `onDraw()` method we've removed the `postInvalidate` call, as view will
    be invalidated by the animations, but leaving the `drawText()` it's very interesting,
    as we'll be able to see how the `OvershootInterpolator()` behaves and goes beyond
    their maximum value.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onDraw()` 方法中，我们移除了 `postInvalidate` 调用，因为视图将被动画失效，但保留 `drawText()` 非常有趣，因为这样我们可以看到
    `OvershootInterpolator()` 的行为以及它如何超出最大值。
- en: If we run this example, we'll see the four rectangles animating with different
    interpolation mechanisms. Play with the different interpolators, or even implement
    your own interpolator by extending TimeInterpolator and implement the `getInterpolation(float
    input)` method.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个示例，我们将看到四个矩形使用不同的插值机制进行动画处理。尝试使用不同的插值器，甚至可以通过扩展 `TimeInterpolator` 并实现
    `getInterpolation(float input)` 方法来实现自己的插值器。
- en: The input parameter of the `getInterpolation` method will be between `0` and
    `1`, mapping `0` to the beginning of the animation and `1` to its end. The return
    value should be between `0` and `1`, but could be lower or/and higher if we want
    to go beyond the original values like, for example, the `OvershootInterpolator`.
    The `ValueAnimator` will then compute the right value between the initial and
    final values based on this factor.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInterpolation` 方法的输入参数将在 `0` 到 `1` 之间，将 `0` 映射到动画的开始，将 `1` 映射到动画的结束。返回值应在
    `0` 到 `1` 之间，但如果像 `OvershootInterpolator` 那样我们想要超出原始值，它可能更低或更高。然后 `ValueAnimator`
    将根据这个因素计算初始值和最终值之间的正确值。'
- en: This example needs to be seen on an emulator or real device, but adding a bit
    of motion blur to the screenshot slightly shows the rectangles are animating at
    different speeds and accelerations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例需要在模拟器或真实设备上查看，但为屏幕截图添加一点动态模糊可以稍微显示矩形以不同的速度和加速度进行动画处理。
- en: '![](img/c7fb9c2a-db94-400b-b144-bcc709754b08.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7fb9c2a-db94-400b-b144-bcc709754b08.png)'
- en: ObjectAnimator
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ObjectAnimator
- en: If we want to animate objects directly instead of properties, we could use the
    `ObjectAnimator` class. `ObjectAnimator` is a subclass of `ValueAnimator` and
    uses the same functionality and features, but adds the ability to animate objects
    properties by name.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想直接对对象而不是属性进行动画处理，我们可以使用 `ObjectAnimator` 类。`ObjectAnimator` 是 `ValueAnimator`
    的一个子类，并使用相同的功能和特性，但增加了通过名称对对象属性进行动画处理的能力。
- en: 'For instance, to show how it works, we could animate a property of our own
    View this way. Let''s add a small rotation to the whole canvas, controlled by
    the `canvasAngle` variable:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了展示其工作原理，我们可以以这种方式动画化我们 View 的一个属性。让我们为整个画布添加一个小的旋转，由 `canvasAngle` 变量控制：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''ve got to create a setter and a getter with the right name: `set<VariableName>`and
    `get<VariableName>` in camel case, and in our specific case:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建具有正确名称的设置器和获取器：以驼峰命名法命名的 `set<变量名>` 和 `get<变量名>`，在我们的特定案例中：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As these methods will be called by the `ObjectAnimator`, as we''ve already
    created them, we''re ready to set up the `ObjectAnimator` itself:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些方法将被 `ObjectAnimator` 调用，我们已经创建它们，现在可以设置 `ObjectAnimator` 本身了：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It is basically the same approach of the `ValueAnimator`, but in this case,
    we're specifying the property to animate using a String and the reference to the
    object. As we've just mentioned, `ObjectAnimator` will call the getter and setter
    of the property using the `set<VariableName>` and `get<VariableName>` format.
    In addition, in the `onAnimationUpdate` callback there is only a call to `invalidate()`.
    We've removed any value assignation like on the previous examples, as it'll be
    automatically updated by the `ObjectAnimator`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上与 `ValueAnimator` 的方法相同，但在这种情况下，我们指定要使用字符串和对象引用进行动画处理的属性。正如我们刚才提到的，`ObjectAnimator`
    将使用 `set<变量名>` 和 `get<变量名>` 的格式调用属性的获取器和设置器。此外，在 `onAnimationUpdate` 回调中只有一个 `invalidate()`
    调用。我们移除了任何像前一个示例中的值赋值，因为它们将自动由 `ObjectAnimator` 更新。
- en: You can find the whole example source code in the `Example29-PropertyAnimation`
    folder in the GitHub repository.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库的`Example29-PropertyAnimation`文件夹中找到整个示例的源代码。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've seen how to add different types of animation to our custom
    views, from using the `ValueAnimator` and `ObjectAnimator` classes of the property
    animator system of Android, to creating our own animations using time-based animation
    or using a fixed time step mechanism.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何为自定义视图添加不同类型的动画，从使用 Android 属性动画系统中的`ValueAnimator`和`ObjectAnimator`类，到创建基于时间或使用固定时间步进机制的自定义动画。
- en: Android provides us with even more animation classes, such as the `AnimatorSet`
    where we could combine several animations and specify which one plays before or
    after another.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Android 为我们提供了更多的动画类，比如`AnimatorSet`，我们可以组合多个动画，并指定哪个动画在另一个之前或之后播放。
- en: As a recommendation, we shouldn't reinvent the wheel and, if it is enough, try
    to use what Android offers or maybe just extend it with our specific needs, but
    if it doesn't fit don't try to force it, as maybe building your own animation
    might be simple and easier to maintain.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 作为建议，我们不应重复发明轮子，如果 Android 提供的功能足够用，尽量使用它，或者根据我们的特定需求进行扩展，但如果它不适合，不要强求，因为或许构建自己的动画可能会更简单且更容易维护。
- en: As with everything when developing software, use common sense and choose the
    best option available.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与软件开发中的所有事物一样，应使用常识并选择最佳可用选项。
- en: In the next chapter, we'll see how to improve the performance of our custom
    views. In our custom views, we're in full control of the drawing, so optimizing
    the draw method and resource allocation is critical to avoid making our application
    sluggish and save some battery from the user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何提高自定义视图的性能。在自定义视图中，我们完全控制着绘制过程，因此优化绘制方法和资源分配至关重要，以避免使应用程序变得迟缓并节省用户的电量。
