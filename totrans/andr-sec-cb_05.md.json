["```kt\n<[component name] android:exported=\"false\">\n</[component name]>\n```", "```kt\n    <string name=\"custom_permission_label\">Custom Permission</string>.\n    ```", "```kt\n    <permission   android:name=\"android.permission.CUSTOM_PERMISSION\"\n        android:protectionLevel=\"normal\"\n        android:description=\"My custom permission\"\n        android:label=\"@string/custom_permission_label\">\n    ```", "```kt\n    <activity ...\n     android:permission=\"android.permission.CUSTOM_PERMISSION\">\n    </activity>\n    ```", "```kt\n    <provider ...\n     android:permission=\"android.permission.CUSTOM_PERMISSION\">\n    </provider>\n    ```", "```kt\n    <service ...\n     android:permission=\"android.permission.CUSTOM_PERMISSION\">\n    </service>\n    ```", "```kt\n    <receiver ...\n     android:permission=\"android.permission.CUSTOM_PERMISSION\">\n    </receiver>\n    ```", "```kt\n    <uses-permission android:name=\"android.permission.CUSTOM_PERMISSION\"/>\n    ```", "```kt\n    <string name=\"my_permissions_group_label\">Personal Data Access</string>\n    ```", "```kt\n    <permission-group \n      android:name=\"android.permissions.personal_data_access_group\"\n      android:label=\"@string/my_permissions_group_label\"\n      android:description=\"Permissions that allow access to personal data\"\n    />\n    ```", "```kt\n    <permission ...\n      android:permissionGroup=\"android.permission.personal_data_acess_group\"\n    />\n    ```", "```kt\n    <provider  android:enabled=\"true\"\n        android:exported=\"true\"\n        android:authorities=\"com.android.myAuthority\"\n        android:name=\"com.myapp.provider\"\n     android:permission=\"[permission name]\">\n    </provider>\n    ```", "```kt\n    <provider  \n      android:writePermission=\"[write permission name]\"\n      android:readPermission=\"[read permission name]\">\n    </provider>\n    ```", "```kt\n    <provider  android:name=\"com.google.android.apps.chrome.ChromeBrowserProvider\"\n      android:readPermission=\"com.android.browser.permission.READ_HISTORY_BOOKMARKS\"\n      android:writePermission=\"com.android.browser.permission.WRITE_HISTORY_BOOKMARKS\"\n      android:exported=\"true\"\n           ...\n    ```", "```kt\n    <provider ...>\n    <path-permission  android:path=\"/[path name]\"\n     android:permission=\"[read/write permission name]\"\n     android:readPermission=\"[read permission name]\"\n     android:writePermission=\"[write permission name]\">\n    </provider>\n    ```", "```kt\n    <provider ...>\n    <grant-uri-permission android:path=\"[path name]\" />\n    </provider>\n    ```", "```kt\n    <grant-uri-permission android:path=\"[path name]\" \n                     android:pathPrefix=\"unsecured\"/>\n    ```", "```kt\nINSERT VALUES INTO [table name] (?,?,?,?,...)\n```", "```kt\n    public class RssItemDAO {\n\n    private SQLiteDatabase db;\n    private SQLiteStatement insertStatement;\n\n    private static String COL_TITLE = \"title\";\n    private static String TABLE_NAME = \"RSS_ITEMS\";\n\n    private static String INSERT_SQL = \"insert into  \" + TABLE_NAME + \" (content, link, title) values (?,?,?)\";\n\n    public RssItemDAO(SQLiteDatabase db) {\n      this.db = db;\n      insertStatement = db.compileStatement(INSERT_SQL);\n    }\n    ```", "```kt\n    public long save(RssItem item) {\n      insertStatement.bindString(1, item.getContent());\n      insertStatement.bindString(2, item.getLink());\n      insertStatement.bindString(3, item.getTitle());\n      return insertStatement.executeInsert();\n    }\n    ```", "```kt\n    public List<RssItem> fetchRssItemsByTitle(String searchTerm) {\n      Cursor cursor = db.query(TABLE_NAME, null, COL_TITLE + \"LIKE ?\", new String[] { \"%\" + searchTerm + \"%\" }, null, null, null);\n\n      // process cursor into list\n      List<RssItem> rssItems = new ArrayList<RssItemDAO.RssItem>();\n      cursor.moveToFirst();\n      while (!cursor.isAfterLast()) {\n        // maps cursor columns of RssItem properties\n        RssItem item = cursorToRssItem(cursor);\n        rssItems.add(item);\n        cursor.moveToNext();\n      }\n      return rssItems;\n    }\n    ```", "```kt\nkeytool -genkey -v -keystore your_app.keystore\n-alias alias_name -keyalg RSA -keysize 2048 -validity 10000\n\n```", "```kt\n    keytool -list -v -keystore your_app.keystore\n\n    ```", "```kt\n    private static String CERTIFICATE_SHA1 = \"71920AC9486E087DCBCF5C7F6FEC95213585BCC5\";\n    ```", "```kt\n    public static boolean validateAppSignature(Context context) {\n      try {\n          // get the signature form the package manager\n          PackageInfo packageInfo = context.getPackageManager()\n              .getPackageInfo(context.getPackageName(),\n                  PackageManager.GET_SIGNATURES);\n          Signature[] appSignatures = packageInfo.signatures; \n\n      //this sample only checks the first certificate\n        for (Signature signature : appSignatures) {\n\n          byte[] signatureBytes = signature.toByteArray();\n\n          //calc sha1 in hex\n          String currentSignature = calcSHA1(signatureBytes);\n\n          //compare signatures \n          return CERTIFICATE_SHA1.equalsIgnoreCase(currentSignature);\n        }\n\n      } catch (Exception e) {\n      // if error assume failed to validate\n      }\n      return false;\n    }\n    ```", "```kt\n    private static String calcSHA1(byte[] signature)\n          throws NoSuchAlgorithmException {\n      MessageDigest digest = MessageDigest.getInstance(\"SHA1\");\n      digest.update(signature);\n      byte[] signatureHash = digest.digest();\n      return bytesToHex(signatureHash);\n    }\n    public static String bytesToHex(byte[] bytes) {\n      final char[] hexArray = { '0', '1', '2', '3', '4', '5', '6', '7', '8','9', 'A', 'B', 'C', 'D', 'E', 'F' };\n      char[] hexChars = new char[bytes.length * 2];\n      int v;\n      for (int j = 0; j < bytes.length; j++) {\n        v = bytes[j] & 0xFF;\n        hexChars[j * 2] = hexArray[v >>> 4];\n        hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n      }\n      return new String(hexChars);\n    }\n    ```", "```kt\n    CERTIFICATE_SHA1.equalsIgnoreCase(currentSignature);\n    ```", "```kt\n      public static boolean checkGooglePlayStore(Context context) {\n        String installerPackageName = context.getPackageManager()\n            .getInstallerPackageName(context.getPackageName());\n        return installerPackageName != null\n            && installerPackageName.startsWith(\"com.google.android\");\n      }\n    ```", "```kt\n    public static boolean isEmulator() {\n      try {\n\n        Class systemPropertyClazz = Class\n        .forName(\"android.os.SystemProperties\");\n\n        boolean kernelQemu = getProperty(systemPropertyClazz,\n              \"ro.kernel.qemu\").length() > 0;\n          boolean hardwareGoldfish = getProperty(systemPropertyClazz,\n              \"ro.hardware\").equals(\"goldfish\");\n          boolean modelSdk = getProperty(systemPropertyClazz,\n              \"ro.product.model\").equals(\"sdk\");\n\n        if (kernelQemu || hardwareGoldfish || modelSdk) {\n          return true;\n        }\n      } catch (Exception e) {\n        // error assumes emulator\n      }\n      return false;\n    }\n\n    private static String getProperty(Class clazz, String propertyName)\n          throws Exception {\n      return (String) clazz.getMethod(\"get\", new Class[] { String.class })\n          .invoke(clazz, new Object[] { propertyName });\n    }\n    ```", "```kt\n    public static boolean isDebuggable(Context context){\n        return (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;\n      }\n    ```", "```kt\n    proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n    ```", "```kt\n    proguard.config=proguard-android.txt:proguard-project.txt\n    ```", "```kt\n    android {\n    ...\n        buildTypes {\n            release {\n                runProguard true\n                proguardFile file('../proguard-project.txt)\n                proguardFile getDefaultProguardFile('proguard-android.txt')\n            }\n        }\n    }\n    ```", "```kt\n    -keepclassmembers class * extends android.app.Activity {\n       public void *(android.view.View);\n    }\n    ```", "```kt\n    public class LogWrap {\n\n      public static final String TAG = \"MyAppTag\";\n\n      public static void e(final Object obj, final Throwable cause) {\n          Log.e(TAG, String.valueOf(obj));\n          Log.e(TAG, convertThrowableStackToString(cause));\n        }\n\n      public static void e(final Object obj) {\n          Log.e(TAG, String.valueOf(obj));\n        }\n\n      public static void w(final Object obj, final Throwable cause) {\n          Log.w(TAG, String.valueOf(obj));\n          Log.w(TAG, convertThrowableStackToString(cause));\n        }\n\n      public static void w(final Object obj) {\n          Log.w(TAG, String.valueOf(obj));\n        }\n\n      public static void i(final Object obj) {\n          Log.i(TAG, String.valueOf(obj));\n        }\n\n      public static void d(final Object obj) {\n          Log.d(TAG, String.valueOf(obj));\n      }\n\n      public static void v(final Object obj) {\n          Log.v(TAG, String.valueOf(obj));\n      }\n\n      public static String convertThrowableStackToString(final Throwable thr) {\n        StringWriter b = new StringWriter();\n        thr.printStackTrace(new PrintWriter(b));\n        return b.toString();\n      }\n    }\n    ```", "```kt\n    try{\n      â€¦\n     } catch (IOException e) {\n      LogWrap.e(\"Error opening file.\", e);\n    }\n    ```", "```kt\n    -assumenosideeffects class android.util.Log {\n        public static boolean isLoggable(java.lang.String, int);\n        public static int v(...);\n        public static int i(...);\n        public static int w(...);\n        public static int d(...);\n        public static int e(...);\n    }\n    ```", "```kt\n    proguard.config=${sdk.dir}/tools/proguard/proguard-android-optimize.txt:proguard-project.txt\n\n    ```", "```kt\n    dexguard.dir=/Users/user1/dev/lib/DexGuard/\n    ```", "```kt\nbuildscript {\n    repositories {\nflatDir { dirs '/=/Users/user1/dev/lib/DexGuard/lib' }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:0.5.1'\n        classpath ':dexguard:'\n    }\n}\napply plugin: 'dexguard'\n\nandroid {\n    .....\n    buildTypes {\n\n      release {\n            proguardFile plugin.getDefaultDexGuardFile('dexguard-release.pro')\n            proguardFile 'dexguard-project.txt'\n        }\n    }\n}\n```", "```kt\n    -encryptstrings interface com.packt.android.security.Constants {\n    public static final java.lang.String CERTIFICATE_SHA1;\n    }\n    ```", "```kt\n    -encryptstrings class com.packt.android.security.MainActivity\n    ```", "```kt\n    -accessthroughreflection class com.packt.android.security.Tamper {\n        boolean verifyAppSignature (Context);\n    }\n    -accessthroughreflection class android.content.pm.PackageManager {\n        int checkSignatures(int, int);\n        int checkSignatures(java.lang.String, java.lang.String);\n        android.content.pm.PackageInfo getPackageInfo(java.lang.String, int);\n    }\n    -accessthroughreflection class android.content.pm.Signature {\n        byte[]           toByteArray();\n        char[]           toChars();\n        java.lang.String toCharsString();\n    }\n    ```"]