- en: Chapter 9. Handling Multiple Devices and Networking Your Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Allowing your application to integrate with social networks is a great way
    to promote your finished product. Many games enable the player to upload their
    high scores and share them among other users who are playing the same title. Some
    provide challenges that need to be completed successfully in order to unlock achievements.
    Social networks enhance the gaming experience and provide great exposure for the
    developer.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We'll also go into more detail about build configuration since we're getting
    more accustomed to programming. Understanding the importance of configuring your
    device build is vital for cross-platform development. This is a capability that
    Corona SDK can handle with ease across iOS and Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting configuration settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting messages to Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting messages to Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's add in these finishing touches!
  prefs: []
  type: TYPE_NORMAL
- en: Return to configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build settings and runtime configuration were briefly discussed in [Chapter
    2](ch02.html "Chapter 2. Lua Crash Course and the Corona Framework"), *Lua Crash
    Course and the Corona Framework*. Let's get into more specific details on how
    to handle a variety of devices that work on the iOS and Android platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Build configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a variety of ways to handle device orientation to match the settings
    your game design requires.
  prefs: []
  type: TYPE_NORMAL
- en: Orientation support (iOS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are scenarios in which you want the native user interface (UI) elements
    to autorotate or to be oriented in a certain way, but you also need to maintain
    a fixed coordinate system within Corona.
  prefs: []
  type: TYPE_NORMAL
- en: 'To lock Corona''s orientation while allowing the native iPhone UI elements
    to rotate, add a content parameter in `build.settings` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To lock Corona''s internal coordinate system to portrait orientation while
    locking iPhone UI elements to the landscape orientation, you could do the following
    in `build.settings`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Orientation support (Android)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Android platform supports portrait and landscape orientations. The orientation
    *portraitUpsideDown* may not be available on some Android devices. Also, autorotation
    is not currently supported on Android. The default orientation doesn't affect
    Android devices. The orientation is initialized to the actual orientation of the
    device (unless only one orientation is specified).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of an Android-specific `build.settings` file (you might
    also combine Android and iPhone settings in the same file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Version code and version name (Android)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `versionCode` and `versionName` fields can be set within an optional `"android"`
    table in `build.settings`.
  prefs: []
  type: TYPE_NORMAL
- en: The `versionCode` field is defaulted to `"1"`, while the `versionName` field
    is defaulted at `"1.0"` if it's not set in the `build.settings` file. When an
    updated version of an application is submitted to the Google Play Store, the `versionCode`
    and `versionName` fields also have to be updated. All version numbers for `versionCode`
    have to be whole numbers. The `versionCode` field cannot contain any decimal numbers,
    while the `versionName` field can contain decimals.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see *android:versionCode* and *android:versionName* at
    [http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode](http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `versionCode` attribute is an internal number used to distinguish application
    releases for the Google Play Store. It is not the same as the version provided
    by the Corona build dialog. The `versionName` attribute is the version number
    shown to users.
  prefs: []
  type: TYPE_NORMAL
- en: Application permissions (Android)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An optional `"usesPermissions"` table can be used to specify permissions, using
    string values as given in the Android manifest reference: [http://developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Developers should use permissions that match their application requirements.
    For example, if network access is required, the Internet permission needs to be
    set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more useful information on the `android.permission` keys applied in Corona
    SDK, refer to [http://docs.coronalabs.com/guide/distribution/buildSettings/index.html#permissions](http://docs.coronalabs.com/guide/distribution/buildSettings/index.html#permissions).
  prefs: []
  type: TYPE_NORMAL
- en: Content scaling on an easier level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Content scaling throughout multiple devices can be frustrating at times if you've
    never addressed them before in your `config.lua` file. There are many individual
    screen sizes. The size of iPhone 5 is 640 x 1136 px, and that of iPad 2 is 768
    x 1024 px. The size of Droid is 480 x 854 px, and that of the Samsung Galaxy tablet
    is 600 x 1024 px, just to name a few. Memory can run out easily due to image size
    boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: When setting up your `config.lua`, like we've done in the previous chapters,
    we had our content set to `width = 320`, `height = 480`, and `scale = "letterbox"`.
    If building for Android devices, `"zoomStretch"` works best to accommodate varying
    screen sizes on the platform. This creates a common build for iOS and Android
    and presents display images that are large enough to fit on a variety of screen
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to scale for larger screen sizes and then scale down, use the screen
    size of the iPad 2\. Your `config.lua` would look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: While the preceding example is another solution to scale content, it's important
    to remember the limitations in texture memory involved with larger (high resolution)
    images. While devices such as the iPad with Retina display, iPhone 5s, and the
    Samsung Galaxy Tab 4 tablet will handle this just fine, the iPhone 4s and older
    devices will have far less texture memory available to handle large graphics.
  prefs: []
  type: TYPE_NORMAL
- en: A way to resolve this potential problem is to use dynamic image resolution to
    substitute assets that are better suited for low-end devices and high-end devices.
    We will discuss this topic in more detail later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: The best of both worlds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you may have noticed, some of the background images we used in our sample
    apps are scaled at 380 x 570\. This happens to be the size that fills the entire
    screen on all common devices for both iOS and Android. Better yet, it is a middle
    ground to compensate for higher- and lower-resolution images on any device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for your content to be displayed as evenly as possible, the following
    must be set up accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Settings for `config.lua` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In any file that contains any of your display images, a typical background
    would be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Any content with a size of 320 x 480 is considered the focus area. Anything
    outside of the area is cropped, but will fill the screen with content on any device.
  prefs: []
  type: TYPE_NORMAL
- en: The deeper meaning of dynamic image selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We know we can swap base images used for smaller devices (iPhone 4s) and larger
    devices (iPhone 6 and Kindle Fire HD). This occurs when trying to scale multiple
    devices in the same build.
  prefs: []
  type: TYPE_NORMAL
- en: A file-naming scheme is available for use to handle such devices for iOS and
    Android. Knowing how to handle the scaling of assets affected for the device proposed
    is half the battle. We'll have to define what resolution scale needs to be addressed
    for Corona to access the assets they're directed toward.
  prefs: []
  type: TYPE_NORMAL
- en: Using the line `display.newImageRect( [parentGroup,] filename [, baseDirectory]
    w, h )` will call out your dynamic resolution images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, we''ve used `["@2x"] = 2` to call out the higher resolution image
    when available in our project for iOS devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example will only work for iPhone 4s and iPad 2 since it surpasses
    the base size of 320 x 480 on both devices. If we wanted to make it accessible
    to the Droid 2, the scale threshold would be 1.5\. For an Android tablet to work,
    such as the Samsung Galaxy tablet, the scale threshold is 1.875\. So how do we
    figure out these numbers? Simple. Take the width of the higher-end device and
    divide it by 320 (the base size). For example, the Droid 2 dimensions are 480
    x 854\. Divide 480 by 320 and it equals 1.5.
  prefs: []
  type: TYPE_NORMAL
- en: The Samsung Galaxy Tab 4 tablet's dimensions are 800 x 1280\. Divide 800 by
    320 and it equals 2.5.
  prefs: []
  type: TYPE_NORMAL
- en: 'If trying to manage both iOS and Android devices in the same project, you can
    change your `imageSuffix` in `config.lua`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using either of the preceding examples will trigger the proposed Android devices
    to display the higher-resolution image.
  prefs: []
  type: TYPE_NORMAL
- en: The `imageSuffix` string doesn't necessarily have to be `"@2x"`; it can be anything
    like `"@2"`, `"_lrg"`, or even `"-2x"`. As long as your higher-resolution image
    has the intended suffix after the primary image name, it'll work just fine.
  prefs: []
  type: TYPE_NORMAL
- en: High-resolution sprite sheets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: High-resolution sprite sheets are not handled the same way as dynamic image
    selections. While you can continue using the same naming convention to differentiate
    your high-resolution images from your basic images, the image will not be able
    to use `display.newImageRect()` when referring to sprite sheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your current content scale is `width = 320`, `height = 480`, and `scale
    = "letterbox"` in your `config.lua` file, then the scale output for the following
    devices will demonstrate the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iPhone = 1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iPhone 4s = 0.5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Droid 2 = 0.666666668653488`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iPad 2 = 0.46875`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Applying a basic sprite sheet that matches the scale for an iPhone will display
    sharp and clean images. When the same sprite sheet is applied to the iPhone 4,
    the display will match the content scale of the device, but the sprite sheet will
    look slightly pixilated and blurry around the edges. Using `display.contentScaleX`
    and calling some methods will solve that problem for you. Notice that `displayScale
    < 1` will access the high-resolution sprite sheet based on the preceding device
    scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Networking your apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have completed developing your main game framework, it's good to think
    about how to network it if you decide to do this.
  prefs: []
  type: TYPE_NORMAL
- en: At some point in our lives, all of us have used some kind of networking tool,
    such as Twitter or Facebook. You probably use these applications currently, but
    the point is that you read updates from other users about a new game that was
    launched, or someone is spreading the word to download a game and compete with
    them. You can be that developer and develop the game they're talking about!
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating networking mechanisms in your game does not have to be a hassle.
    It only takes several lines of code to get it working.
  prefs: []
  type: TYPE_NORMAL
- en: Posting to Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tweet, tweet, tweet… Twitter is a networking tool that connects you to the latest
    information that appeals to your interests. It is also a great tool to share information
    with others about your business and, of course, your game. Reach out to the game
    development audience by promoting your application.
  prefs: []
  type: TYPE_NORMAL
- en: The user who will be sharing a post to Twitter will need to create an account
    at [http://twitter.com/](http://twitter.com/) and will also need to make sure
    they're logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding Twitter to your apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to implement Twitter in our apps by accessing a web service through
    UI buttons.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Chapter 9` folder, copy the `Twitter Web Pop-Up` project folder to your
    desktop. All the configuration, libraries, and assets needed are already included.
    You can download the project files that accompany this book from the Packt Publishing
    website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `main.lua` file and save it to the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following variables at the beginning of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a local function called `onOpenTouch()` with an event parameter. Add
    an `if` statement so that the event receives a `"release"` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the local variable called `message`, add in the following string statement
    and concatenate `score`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add in `local myString` and apply `string.gsub()` for `message` to replace
    space instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Introduce the `native.showWebPopup()` function that links to the Twitter account.
    Concatenate `myString` to include the preloaded message. Close the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the `openBtn` UI function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a local function called `onCloseTouch()` with an `event` parameter.
    Add an `if` statement with `event.phase == "release"` to activate `native.cancelWebPopup()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the `closeBtn` UI function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and run the project in the simulator. Make sure you're connected
    to the Internet to see the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're currently not logged in to your Twitter account, you'll be asked to
    log in before you see the results of the tweet from our code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – adding Twitter to your apps](img/9343OT_09_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Near the top of the code, we set a variable `local score = 100`. This will be
    used inour Twitter message.
  prefs: []
  type: TYPE_NORMAL
- en: In the `onOpenTouch(event)` function, a web popup will load on the release of
    `openBtn`. The text that will be posted is displayed in a string format under
    the variable, `local message`. You will notice that we concatenate `score` into
    the string so that it displays the value in the message post.
  prefs: []
  type: TYPE_NORMAL
- en: '`local myString` and `string.gsub()` are used to replace all the instances
    indicated in a pattern inside the string. In this case, it takes the string inside
    a message and searches for every empty space between each word and replaces it
    with `%20`. `%20` encodes URL parameters to indicate spaces. The extra `%` acts
    as an escape character.'
  prefs: []
  type: TYPE_NORMAL
- en: The `native.showWebPopup()` function displays at dimensions 320 x 300, which
    is about half the screen size on a device. The URL to display the Twitter message
    dialog is added and concatenates `myString`.
  prefs: []
  type: TYPE_NORMAL
- en: When the web pop up no longer needs to be used and needs to be closed, `onCloseTouch(event)`
    is called by `closeBtn`. This will take the `event` parameter `"release"` and
    call `native.cancelWebPopup()`. This particular function will dismiss the current
    web popup.
  prefs: []
  type: TYPE_NORMAL
- en: Posting to Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another social networking tool that can be used to share information about your
    game is Facebook. You can easily customize a post to link information about your
    game or share messages about high scores and to encourage other users to download
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In order to post messages to Facebook, you need to be logged in to your Facebook
    account or create one at [https://www.facebook.com/](https://www.facebook.com/).
    You will have to obtain an App ID from the Facebook Developer website at [https://developers.facebook.com/](https://developers.facebook.com/).
    The App ID is a unique identifier for your site that determines what the right
    level of security is in place between the user and the app page/website.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created an App ID, you will also need to edit the App information
    and choose how you want it to integrate with Facebook. You are given several choices,
    such as Website, Native iOS App, and Native Android App, just to name a few. The
    website integration must be selected and filled in with a valid URL in order for
    Facebook to redirect to the specified URL for posts that deal with web popups.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding Facebook to your apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to our Twitter example, we''ll be incorporating Facebook posts with
    a web popup as well:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Chapter 9` folder, copy the `Facebook Web Pop-Up` project folder to
    your desktop. All the configuration, libraries, and assets needed are already
    included. You can download the project files that accompany this book from the
    Packt Publishing website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `main.lua` file and save it to the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following variables at the beginning of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a local function called `onOpenTouch()` with an event parameter. Add
    an `if` statement when the event receives a `"release"` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following local variables that include the strings that we''ll be implementing
    in the Facebook post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Introduce the native web popup function that links to the Facebook account.
    Include parameters for the Facebook dialog box that redirects the URL of your
    preferred website, the display with a touch mode that connects to your app URL,
    and an image URL that presents your app icon or company logo. Concatenate all
    variables with string methods to output all messages. Close the function. Add
    in the `openBtn` UI function. You will need to replace all of the following URL
    information with your own:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: More information pertaining to the Facebook Dialog can be found on the Facebook
    Developers website at [http://developers.facebook.com/docs/reference/dialogs/](http://developers.facebook.com/docs/reference/dialogs/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a local function called `onCloseTouch()` with an event parameter. Add
    an `if` statement with `event.phase == "release"` to activate `native.cancelWebPopup()`.
    Set up the `closeBtn` UI function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and run the project in the simulator. Make sure you're connected
    to the Internet and your Facebook account to see the results.![Time for action
    – adding Facebook to your apps](img/9343OT_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the `onOpenTouch(event)` function, several variables are called when
    `openBtn` is pressed and released. Notice that `local appId` indicates a string
    of numbers that you can obtain after creating an app on the Facebook Developers
    website.
  prefs: []
  type: TYPE_NORMAL
- en: '`message1`, `message2`, and `message3` are the strings that display the message
    post. `myString1`, `myString2`, and `myString3` help replace the spaces indicated
    in `message1`, `message2`, and `message3`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `native.showWebPopup()` function displays with a dimension of 320 x 300
    and presents the dialog URL to Facebook. The following parameters display accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app_id`: This is your unique ID created on the Facebook Developer website.
    For example, `"1234567"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redirect_uri`: The URL to redirect to after the user clicks on a button on
    the dialog. This is required in the parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display`: This displays the mode to render the dialog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touch`: This is used on smart phone devices such as iPhone and Android. This
    fits the dialog screen within small dimensions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link`: This is the link attached to the post.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`picture`: This is the URL of a picture to the post.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the name of the link attachment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`caption`: This is the caption of the link (appears beneath the link name).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This is the description of the link (appears beneath the link
    caption).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the web popup is no longer required and needs to be closed, `onCloseTouch(event)`
    is called by `closeBtn`. This will take the event parameter `"release"` and call
    `native.cancelWebPopup()`. This particular function will dismiss the current web
    popup.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This library supplies a number of functions that provide access to [http://www.facebook.com](http://www.facebook.com)
    through the official Facebook Connect interface.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – posting scores using Facebook Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook Connect is another way to post on the wall feed by using the native
    Facebook UI features. We'll be creating a different way to post messages and scores
    to the newsfeed. In order to see how Facebook Connect operates, you need to load
    the build to a device to view the results. It will not run in the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Chapter 9` folder, copy the `Facebook Connect` project folder to your
    desktop. All the configuration, libraries, and assets needed are already included.
    You can download the project files that accompany this book from the Packt Publishing
    website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `main.lua` file and save it to the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the following variables at the beginning of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a local function called `onFBTouch()` with an event parameter. Add an
    `if` statement that contains `event.phase == release`. Also, include your Facebook
    app ID in a string format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another local function within `onFBTouch(event)` called `facebookListener()`
    with an event parameter as well. Include an `if` statement that refers to `"session"
    == event.type`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add in another `if` statement where `"login"` equals to `event.phase`. Include
    a local variable called `theMessage` to display the message you want to share
    with other Facebook users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `facebook.request()` function that will post the following messages
    to the user''s Facebook wall. Close any remaining `if` statements with `end` in
    the `facebookListener(event)` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `link` parameter demonstrates a URL for an iOS application. You can direct
    the URL to an Android application that will look something like `https://play.google.com/store/apps/details?id=com.yourcompany.yourappname`
    or a general website URL of your choosing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call the `facebook.login()` function that includes your App ID, listener, and
    permissions to post on a user''s Facebook wall. Close the remainder of the `onFBTouch(event)`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the `fbBtn` UI function and save your file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new device build for either iOS or Android. Load the build to your
    device and run the application. You will be asked to log in to your Facebook account
    before you can see the results from the application.![Time for action – posting
    scores using Facebook Connect](img/9343OT_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most important things that need to be done is `require "facebook"`
    in order to have the Facebook API to work. We also created a local variable called
    `score` with the value of 100.
  prefs: []
  type: TYPE_NORMAL
- en: The `onFBTouch(event)` function will initiate the event parameter on `"release"`
    of `fbBtn`. Within the function, `fbAppID` is included with characters in a string
    format. This will be a unique set of numbers that you must obtain from the Facebook
    Developers website. The App ID will be created for you when you make an App page
    on the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another function, `facebookListener(event)`, is created, and it will initiate
    all `fbConnect` events. The `if` statement that contains `("login" == event.phase
    )` will request to post a message to your feed through `"me/feed, "POST"`. The
    feed contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message=theMessage`: This refers to the string that belongs to the variable.
    It also concatenates scores, so it displays the value as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is a message that includes your app name or subject matter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`caption`: This is a short persuasive message to catch other users'' attention
    about playing the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link`: This provides the URL to download the game from either the App Store
    or Google Play Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`picture`: This is a URL that contains your image that displays your app icon
    or a visual representation of the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the parameters are set, `facebook.login()` will refer to `fbAppID` and
    `facebookListener()` to see if a valid application ID is being used to post on
    Facebook. On success, the post is published through `"publish_actions"`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – create a dialog box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'See if you can figure out how to display a dialog box using Facebook Connect
    and using the same setup as shown in the preceding example. The following line
    will display this as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now, see where in the code `facebook.showDialog()` can be accessed. This is
    another way of posting messages to Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – handling social networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What is the specific API that scales down high-resolution sprite sheets?
  prefs: []
  type: TYPE_NORMAL
- en: '`object.xScale`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`display.contentScaleX`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`object.xReference`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What are the publishing permissions called that allow posting on a user's
    wall on Facebook?
  prefs: []
  type: TYPE_NORMAL
- en: '`"publish_stream"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`"publish_actions"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`"post"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`"post_listener"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. Which parameter(s) is required for `facebook.login()`?
  prefs: []
  type: TYPE_NORMAL
- en: '`appId`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`listener`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`permissions`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered several more areas on enhancing configuration settings and integrating
    three of the most popular social networks in today's media in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also took an in-depth look into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Build settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic content scaling and dynamic image resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-resolution sprite sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting message feeds to Twitter and Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will go over the process on how to submit our games
    to the App Store and Google Play Store. You don't want to miss this for the world!
  prefs: []
  type: TYPE_NORMAL
