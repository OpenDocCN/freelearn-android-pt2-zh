- en: Chapter 3. Android Security Assessment Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up Santoku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up drozer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a drozer session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating installed packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating content providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating broadcast receivers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining application attack surfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a drozer module – a device enumeration module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an application certificate enumerator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered all the Android development basics and introduced all the Android
    Development Tools. Now it's time to start getting into the Android hacking and
    security assessment tools.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces you to an exploitation and Android security assessment
    framework called **drozer** —formally known as **Mercury** —developed by some
    of the people at MWR Labs. Also covered in the chapter is a Debian-based Linux
    distribution called **Santoku** , which is basically like BackTrack or Kali Linux
    of Mobile security assessment. Here we cover setting it up and getting it running.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin setting up drozer and writing some sample scripts, something
    that's very important for you to understand is a little about how drozer operates
    and how it solves some problems in the Android security assessment game.
  prefs: []
  type: TYPE_NORMAL
- en: 'drozer comes in two parts: one is the "console" that runs on your local machine
    and the other is the "server", which is basically an application installed on
    a target Android device. When you''re using the console to interact with the Android
    device, you are basically injecting Java code into the drozer Agent that gets
    executed on the actual device.'
  prefs: []
  type: TYPE_NORMAL
- en: Why design it this way? Well before drozer came along, writing application-vulnerability-focused
    exploits meant having to compile an Android app, to exploit a given vulnerability,
    deploy it to the target phone, and check if it worked. And then if it didn't,
    you would need to redo the entire process! This practice is very tedious and can
    make Android security assessments feel like a chore. drozer makes it easy to deploy
    and test exploits by passing commands to the device on the fly by proxy of the
    drozer Agent, which means you never need to touch an Android development environment
    or recompile an exploit app multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: drozer is called a framework because it allows you to extend its functionality
    by writing your own modules or plugins and adapting it to your needs. It is essentially
    the closest thing to the Metasploit of mobile security assessment.
  prefs: []
  type: TYPE_NORMAL
- en: Another effect that the standard drozer framework has is that it is essentially
    an Android application—one component of it—with no permissions, which means whatever
    exploits you manage to pull off on an Android device will automatically be quite
    portable and require very low privilege levels to succeed. The aim is to demonstrate
    how effective a "no-permission" application can be at exploiting an Android device
    and the applications hosted on it.
  prefs: []
  type: TYPE_NORMAL
- en: And that's it as far as some basic background into drozer goes. As far as the
    rest of the chapter is concerned, you may require some basic knowledge of the
    Python programming language, since drozer's modules are developed in Python. It
    may also help if you know something about Java Reflection and either know how
    to or have developed some Android apps. If you've never developed anything serious
    or generally never programmed in Python, don't fret—I'll make sure to walk through
    all the Python code and explain it carefully.
  prefs: []
  type: TYPE_NORMAL
- en: So without further ado, let's get going!
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up Santoku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The folks at viaForensics have developed a really cool Ubuntu-based distribution
    packed with mobile security assessment tools, called Santoku. The following recipe
    shows you how to set up your own installation. The reason I'm doing this first
    is because you may want to install and run drozer inside your Santoku operating
    system installation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start off with, we're going to be doing some downloading. Grab a copy of
    the latest Santoku image from [https://santoku-linux.com/download](https://santoku-linux.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve downloaded the latest copy of Santoku, you can begin setting it
    up as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To start off, you can write the Santoku image to a USB memory stick using either
    the Ubuntu start-up disk creator or the Universal USB installer for Windows, available
    at [http://www.pendrivelinux.com/downloads/Universal-USB-Installer/Universal-USB-Installer-1.9.4.7.exe](http://www.pendrivelinux.com/downloads/Universal-USB-Installer/Universal-USB-Installer-1.9.4.7.exe).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the Santoku image you've downloaded to your USB disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the Universal USB installer, perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start up the Universal USB installer and select **Try Unlisted Linux ISO** at
    **Step 1**.![How to do it...](img/00050.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Browse** and select the path to your Santoku ISO as in the previous
    screenshot.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: At **Step 3**, select the USB flash drive you wish to write the image to.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create** and sit back and relax while your install disk image is
    prepared.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart your host machine with the USB device plugged in; open up the Boot Menu
    and select to boot off of the USB disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it boots from the USB start-up disk, you should see the following screen:![How
    to do it...](img/00051.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the boot screen, select **install – start the installer directly**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The installation should begin with the screen shown in the following screenshot:![How
    to do it...](img/00052.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the rest of the install wizard prompts until installation begins. The
    process is very easy to understand and should be familiar to anyone who has installed
    Ubuntu before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the installation is complete, you should be presented with a brand new
    Santoku desktop as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00053.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're going to install this on a VM, you'll need to grab a copy of VirtualBox.
    For Windows and Unix/Linux users, this is available at [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve downloaded and installed VirtualBox, you''ll need to create a
    new VM by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New** button located in the top left of the VirtualBox window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Create Virtual Machine** dialog should pop up. Enter `Santuko` in the
    **Name** field, or alternatively whatever you'd like to name your new VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Linux** in the **Type** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Ubuntu** in the **Version** drop-down menu and click on **Next**.![There's
    more...](img/00054.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Memory size** dialog should show up now; the default setting is **512**.
    This is adequate; however, if you have a beefy RAM on your host machine, you are
    welcome to be a bit more generous. Once you've decided on a memory size, click
    on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Hard Drive setup** dialog will show up; select the **Create virtual hard
    drive now** option and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with the **Hard drive file type** dialog; select the **VDI
    (VirtualBox Disk Image)** option and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Storage on physical hard drive** dialog should show up; select the **Dynamically
    allocated** option; this is because you will likely install and download a whole
    bunch of apps and tools onto this VM's hard disk. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **File location and size** dialog should show up. You can accept the defaults
    here; 8 gigabytes is enough to store all the initial operating system data and
    utilities. If you'd like more, you can configure the VM to take up a little more
    storage space; it's all up to you. Once you've chosen an appropriate size, click
    on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your VM should be all set up now; you will need to configure a live CD for it
    to boot from. To do this, click on **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the **Settings** dialog shows up, click on **Storage** on the left-hand
    side pane of the **Settings** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **Controller: IDE** section, click on the **Add CD/DVD Device** button,
    which is the first button next to the **Controller: IDE** section label.![There''s
    more...](img/00055.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **VirtualBox Question** dialog will pop up; on this dialog, click on **Choose
    disk**. You should be presented with a **File** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to and select the Santoku image you've downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now start your new Santoku Virtual Machine and begin installing it.![There's
    more...](img/00056.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up drozer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and setting up drozer is fairly straightforward; the set up process
    is demonstrated for both Windows 7 and Unix/Linux types of systems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start hacking out some drozer scripts and get to know the exploitation
    and enumeration modules, you will need to grab a copy of the drozer installer
    suited to your system. Here''s how you do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to [https://www.mwrinfosecurity.com/products/drozer/community-edition/](https://www.mwrinfosecurity.com/products/drozer/community-edition/)
    to grab a copy of the drozer framework; of course, here I will be talking about
    the community edition. If you wish to spend some cash on the non-free edition,
    head over to [https://products.mwrinfosecurity.com/drozer/buy](https://products.mwrinfosecurity.com/drozer/buy).![How
    to do it...](img/00057.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows users should click on the **drozer (Windows installer)** option; it
    should start downloading the `drozer-installer-[version].zip` file immediately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00058.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Unix/Linux users would, depending on your distribution or OS flavor, choose
    either the **drozer (Debian/Ubuntu Archive)** file or the **drozer (RPM) package**
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you''ve downloaded the drozer version compatible with your system, you
    will need to do the following, depending on your system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows users:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will need to unzip/unpack the `drozer-installer-[version].zip` file to a
    place/path you can easily remember.![How to do it...](img/00059.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once unzipped, run the file called `setup.exe` included in the ZIP archive.
    An install wizard should start up as shown in the following screenshot:![How to
    do it...](img/00060.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the install wizard is set up, all you need to do is follow the prompts,
    pay attention to the configuration dialogs, and also make sure to take note of
    where drozer will be installed on your system; you will need to visit this path
    often to use drozer. Once installation starts, you should see the following dialog
    appear:![How to do it...](img/00061.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installation is complete, you should have drozer installed to the path
    you've specified. By default, this is configured to be at the root of the `C`
    drive, as shown in the following screenshot:![How to do it...](img/00062.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Unix/Linux users:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The drozer framework is available in a package file format relevant to your
    system, so either a DEB file for Debian users or an RPM file for Red Hat users.
    All you need to do with this file is open it using your package manager, and it
    will handle the rest. Debian users can make use of the following command to get
    drozer installed:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Once drozer is installed, you should try to run it. How you run it will partly
    depend on your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows users:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a command prompt and head over to the path you've installed your drozer
    to. By default—as previously mentioned—this is the `C:\drozer` path.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Invoke drozer by executing the following command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the output similar to the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00063.jpeg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: 'As a diagnostic test, try invoking the drozer console. If there''s anything
    wrong, it should notify you of the errors before telling you that the device—which
    is not attached here—is unavailable or refusing connections. Execute the following
    command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Unless you''ve been clever enough to fix the error, you should see the output
    similar to the one shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00064.jpeg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: This error means drozer cannot locate your Java installation.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Assuming you've already installed Java, you can add drozer to your system `PATH`
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows Augmenting your `PATH` variable is pretty straightforward; you start
    by performing the following steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open **My Computer**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **System properties**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Control Panel** section of the screen, click on **Advanced system
    settings**.![How to do it...](img/00065.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A **User Access Control** prompt should pop up. If you have administrator access,
    simply click on **OK** or enter the administrator password.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **System Properties** dialog, click on the button labeled **Environment
    Variables...**.![How to do it...](img/00066.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the **Environment Variables** dialog pops up, under the section labeled
    **System variables**, scroll down to the variable called **Path** and click on
    **Edit…**.![How to do it...](img/00067.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another dialog should pop up, allowing you to edit the `PATH` variable. Add
    the following string to the end of the value:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For Unix/Linux users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can invoke drozer by executing the following command from your terminal
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all is well, you should see exactly the same output as the Windows drozer
    edition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If Java has not been added to your `PATH` variable, execute the following command
    to get it added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To make this persistent, add the previous command line to the end of your `/home/[user]/.bashrc`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before drozer can get up and running, you will need to install the drozer Agent
    on an Android device. This is pretty simple; here''s how you do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming the device is connected to your host machine via USB, you can install
    the `drozer.apk file` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For this to work, you need to make sure that **Unknown Sources** and **USB Debugging**
    are both enabled for the target Android device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On launching drozer, you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![There''s more…](img/00068.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To make using the drozer console from the command-line interface a little easier,
    you could also add drozer itself to your system `PATH` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows users:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Access the **Environment Variable** dialog as described in the previous recipe.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following string to your `PATH` variable:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are a Unix/Linux user, execute the following command from your terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To make this persistent, add the previous command line to the end of your `/home/[user]/.bashrc`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If the DEB file fails to install, there is another way to get drozer installed
    that is relatively painless. To get drozer installed without the DEB package,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off, grab a copy of the Python development headers and packages by
    executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Grab a copy of the Python setup tools by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the 32-bit support libraries for your Debian system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Python dependencies; the first one is `protobuf`, which you can
    install by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once `protobuf` is installed, you''ll need to install `twisted` for python,
    which you can do by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What you need to do then is grab a copy of the drozer architecture independent
    package available at [https://www.mwrinfosecurity.com/system/assets/571/original/drozer-2.3.2.tar.gz](https://www.mwrinfosecurity.com/system/assets/571/original/drozer-2.3.2.tar.gz).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once downloaded, unpack this into some directory of your choice. Once unpacked,
    it should contain a file called `drozer-[version]-py2.7.egg`. You can then install
    this EGG by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And that's it—drozer should be ready to rock!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Running a drozer session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So you've got drozer all set up and ready to go; you can start running some
    drozer sessions on a sample Android device—preferably one with the drozer Agent
    installed on it.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe takes you through the basics of setting up a drozer session
    and how to fire off some quick and easy modules via the drozer console.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before proceeding with this recipe, you will need to have installed the drozer
    console on your machine and drozer Agent on the target device. If all that''s
    been sorted, you can move on to running your drozer console session by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using ADB, set up some port forwarding, provided you have some kind of device
    connected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll need to make sure the drozer Embedded Server has been started. You will
    need to start it via the application's interface on your device. Simply find the
    drozer Agent on your device; it should have popped up somewhere among the other
    apps on your device, but seeing that you likely just installed it, you would probably
    see a notification about it and will be able to launch it from your notification
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the button labeled **Embedded Server via the drozer Agent User interface**.
    You should be presented with the screen as shown in the following screenshot:![How
    to do it...](img/00069.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the button labeled **Disabled** to the right. It should say **Enabled**
    now and the **Enabled** label under the **Server Details** section of the user
    interface should be engaged, as shown in the following screenshot:![How to do
    it...](img/00070.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can then connect the drozer console by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: drozer should then drop into console mode, allowing you to start firing off
    commands and modules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00071.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Enumerating installed packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The drozer Agent is all set up and you've managed to fire up the drozer console;
    you can start firing off some drozer modules and really engage with your device's
    security.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe details the basic usage of the drozer framework to perform
    novel tasks such as enumerating the installed packages and filtering them based
    on package name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve got your drozer framework up and running, you may want to start
    scratching and messing around on your Android device. One useful thing you may
    want to do is list all the packages installed on your device. You can do this
    by firing off the following command from your drozer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following start appearing on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the drozer source code to find out exactly how it interfaces
    with the package manager API to get all this useful information. I'm going to
    be explaining the code behind most of the modules so you get to see how drozer
    works, and build you up to writing a drozer module of your own later in this chapter!
    After all, that's what frameworks are about—building your own mods and add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: Beware non-Python users/developers! You may need a little Python background
    to be able to read this source code; although, seeing that Python is pretty semantic
    even if you've never written Python code, you should be able to follow pretty
    easily. An added benefit of drozer's design is that they've basically mirrored
    the Android Java API to make module development easy to pick up for Android developers.
    So, in summary, you don't need to run out and get a book on Python just yet. If
    you've written Android apps before, this will be very easy to follow. Anyway,
    enough talk—let's see some code!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following code is available at [https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/package.py](https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/package.py)
    (lines 99-121).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `execute()` method is called whenever you fire off the `app.activity.info`
    module from your console. It's essentially the entry point to the real hard work
    the module does.
  prefs: []
  type: TYPE_NORMAL
- en: We see the call to the package manager, `self.packageManager().getPackages(…)`;
    this returns a list of package objects along with each package's permissions,
    configurations, GID, and shared libraries. The script calls `self.__get_package()`
    on each package object to print it out to the drozer console. The same is done
    for cases where a specific package is supplied via the command-line arguments.
  prefs: []
  type: TYPE_NORMAL
- en: If you'd like to get your own copy of this code, you can grab it from the official
    drozer GitHub repository, which is very easy to find if you Google hard enough.
    But to make your lives easier, I've dropped a URL to the code repository in the
    *See also* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `dz> run app.package.list` command is a wrapper to the Android package
    manager; because of this, one of the cool things you can do is filter through
    applications based on their name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `[application name]` is the name of the application or package you want
    to check for. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Another enumeration-type module in drozer you can use to extract information
    is `app.package.info`, which will fetch the following information about a package:'
  prefs: []
  type: TYPE_NORMAL
- en: Permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use this module by firing off the following command from your drozer
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When used this way, it will extract all the related information about all the
    packages on your Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Naturally, you might want to narrow down this information to a particular package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also use the shorthand for the switch, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more...](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A quick explanation of the output shown in the previous screenshot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application Label**: The displayed name of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process Name**: The name of the process that this application runs in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version**: The version of the application installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Directory**: The full path to the directory that will be used to store
    the user data and application specifically associated to this application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APK Path**: The path to the actual Android application package file on the
    device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UID**: The user ID associated to the application; everything it does on the
    Android system will be done using the access rights associated to this user ID,
    unless it gets other applications and processes to do things on its behalf'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GID**: The system group IDs associated to this application''s user ID; usually,
    these are associated to an application based on a number of special permissions
    that are granted to the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared Libraries**: The full path to the shared libraries used by this application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared User ID**: The shared user ID this application is allowed to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uses Permissions**: A list of the permissions granted to this application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another example, in case you have a Nexus device, would be to run this against
    the Google Services Framework as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should produce the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another cool thing you can do with the `app.package.info` module is find packages
    based on permissions. You can do that by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'An example would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Why is this so cool? Well, you may want to know all the applications with a
    set of dangerous permissions. I mean, do you know how many of your applications
    have the `INTERNET` permission or any other dangerous permission? No? Exactly!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The drozer GitHub repository at [https://github.com/mwrlabs/drozer](https://github.com/mwrlabs/drozer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `package.py` drozer module at [https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/package.py](https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/package.py)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: drozer also offers a useful module for enumerating information about the activity
    components available on a target Android device. The following recipe demonstrates
    the use of this module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may at some point want to find out which activities are installed and exported
    on your device. The drozer framework makes this pretty easy, here''s how to do
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fire off the following command from your drozer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This command will list all the activities that are exported on your device.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may want to get a little more information about the activities on your
    device; for example, listing all applications that have a certain name or a certain
    string in their name, such as "browser" or "facebook", which applications have
    what permissions, or even search for unexported activities. Here''s how to do
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for activities based on name by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This will list all the activities with `[activity name]` in their name. Here''s
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'As with all Unix-style or Linux-style commands, there is a shortcut for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should produce the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can also specify which package you want to inspect for activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for activities in a given package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also use the shortcut for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should produce the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The drozer activity modules source code at [https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/activity.py](https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/activity.py)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating content providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Much like enumerating activities and packages, drozer also provides some modules
    for listing all of the content providers and some information on them. The following
    recipe talks about how to do this using the `app.provider.info` module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get started enumerating content providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command from your drozer terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return the following information about a content provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authorities – the names of the classes implementing their SQLite frontends
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Read permission
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Write permission
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Grant URI permissions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Paths
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the code for the `app.provider.info` module.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following code is available at [https://github.com/mwrlabs/drozer/blob/766329cacde6dbf1ba05ca5dee36b882041f1b01/src/drozer/modules/app/provider.py](https://github.com/mwrlabs/drozer/blob/766329cacde6dbf1ba05ca5dee36b882041f1b01/src/drozer/modules/app/provider.py).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The first notable part of the code is where the script makes a call to the
    package manager. Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The script grabs a list of packages by making a call to the Android package
    manager and throws it some flags that make sure it gets the providers back with
    their grant URI permission patterns. Next we see that once the details about the
    content providers have been collected by the package manager, the script makes
    a call to a function called `__get_provider()`, which extracts information about
    the read and write permissions of the provider, if any. Using some simple string
    matching via the `match_filters()` call, the `__get_provider()` function basically
    looks for some string value in the section that defines the content provider's
    permissions. This string value is marked by either `readPermission` for the permissions
    required to read from the content provider or `writePermission`, which, surprisingly
    enough, is required to write to the content provider. After this, it resets the
    provider object before printing it out to the console.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Much like the other `.info` modules in drozer, you can add filter information
    in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search based on package names:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Search based on permissions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Content Providers* webpage at [http://developer.android.com/guide/topics/providers/content-providers.html](http://developer.android.com/guide/topics/providers/content-providers.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may also want to know about the services that are installed on your device.
    drozer has a module called `app.service.info` that extracts some useful information
    about services.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following command from your drozer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command with no arguments lists all the services installed on
    the target device. It will look something like the following screenshot when run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also use the following filters to narrow down your search:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search based on permissions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Search based on service names:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also choose to list unexported services, such as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And lastly, if you''d like information about the other switches and options,
    you can always run the `–help` option as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The previous command should produce the output as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00078.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `app.service.info` module works like most of the other `.info` and `.list`
    type drozer modules by making calls to the package manager through the API. Here''s
    the call to the package manager from `drozer/master/src/drozer/modules/service.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The script does a check to see whether a specific package was passed as an
    argument, which is the first piece of code in the `execute` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'If no argument or package name was defined, the script grabs a list of packages
    and iterates through them by calling the `self.__get_services()` method, which
    determines some package properties through string-matching the data returned from
    the `self.packageManager().getPackageInfo(arguments.package,common.PackageManager.GET_SERVICES
    | common.PackageManager.GET_PERMISSIONS)` call; for example, when looking for
    services with a specified permission, it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This is to extract a list of services with the required permission.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The drozer *service.py* modules source at [https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/service.py](https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/service.py)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Services – Android Developer* webpage at [http://developer.android.com/guide/components/services.html](http://developer.android.com/guide/components/services.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Bound Services – Android Developer* webpage at [http://developer.android.com/guide/components/bound-services.html](http://developer.android.com/guide/components/bound-services.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Service – Android API Reference* webpage at [http://developer.android.com/reference/android/app/Service.html](http://developer.android.com/reference/android/app/Service.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating broadcast receivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Broadcast receivers often hold useful information about an application's attack
    surface and could offer attackers the opportunity to do many things, from performing
    arbitrary code execution to proliferating information; because of this, they cannot
    be ignored during an application-focused security assessment. The drozer developers
    were well aware of this fact and provided modules to help gain information about
    broadcast receivers.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe demonstrates the `app.broadcast.info` module by detailing
    its different invocation options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The enumeration of broadcast receivers is performed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the previous command should be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This `app.broadcast.info` module has all the cool features the other `.info`
    modules have and some more broadcast-receiver-specific options.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can specify a specific package from which to extract information on receivers;
    the following command is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The command that follows is another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also search and list broadcast receivers based on their names; for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the longer form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Another option is to choose to include the unexported receivers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'And lastly, you can choose whether to include the intent filters in the requested
    information; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *BroadcastReceivers – Android Reference* webpage at [http://developer.android.com/reference/android/content/BroadcastReceiver.html](http://developer.android.com/reference/android/content/BroadcastReceiver.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drozer Source *broadcast.py* module at [https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/broadcast.py](https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/broadcast.py)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining application attack surfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During your application security assessments, you may want to know what the
    attack surface of a given application is. drozer has a really neat module that
    helps you determine just that. In terms of this module, the attack surface for
    an application is simply the number of exported components.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following command from your drozer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This command will list all the exported activities for a given package as determined
    by the package manager API.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, you could try running it against a sample package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the `app.package.attacksurface` module code. I think this
    is probably one of the most interesting modules, and walking through its code
    should spark some ideas on how to write automated testing tools in the form of
    applications. It will most certainly come in handy when you want to do mass automated
    application scanning!
  prefs: []
  type: TYPE_NORMAL
- en: 'The code from `drozer-master/src/mrw/droidhg/modules/package.py` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: A lot of code here, but what's great about this module is that it follows the
    same style as the rest by interfacing the package manager. The module pulls information
    about services, activities, broadcast receivers, and content providers from the
    package manager and simply tries to determine whether they are exported according
    to the package manager. Determining which of the components are exported, it simply
    enumerates them and prints a count of the number of exported components on the
    screen. The thing the module does is it tries to determine whether the app is
    debuggable and whether it uses a shared user ID, which is very valuable information
    with regards to the attack surface. I'll explain why in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The drozer Source *broadcast.py* module at [https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/package.py](https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/package.py)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Activities are the application components that facilitate user interaction.
    It may be useful during an application security assessment to find out which applications
    can be launched without permissions in case any of them provide access to sensitive
    data or cause an application to crash if launched in the wrong context. Besides
    the obvious benefit of engaging with activities via the drozer console, it makes
    for a good responsive introduction to engage with application components because
    you can actually see your Android device respond to your commands from the terminal.
    So, without further ado, let's get cracking with some activities!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to choose an activity to launch, but seeing that you cannot inherently
    know where the launchable activities are or what they're called, I thought I'd
    include the process of finding a launchable activity in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find some activities using the `app.activity.info` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll need to choose a package and an activity to use in the next step. Get
    used to running this command a couple of times; you'll be using it quite a lot
    if you're going to get into Android penetration testing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you''ve found the activity you''re looking for, you can send it some launch
    intents and watch it pop up on your Android device''s screen. Here''s how you
    do that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `[intent action]` is the action attribute of the intent filter set by
    the target activity and `[intent category]` is the category attribute of the intent
    filter set by the target activity, which you can get from the command in Step
    1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here''s an example you can try out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the drozer source code to find out exactly how it manages
    to launch some activities.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following code is available at [https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/activity.py](https://github.com/mwrlabs/drozer/blob/master/src/drozer/modules/app/activity.py)
    (lines 166-174).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: So, what we see here is that drozer simply bundles user-supplied arguments into
    an intent after pulling it through the argument parser; it then sends over this
    intent after checking if the intent is valid. This works the same way an intent
    would from an Android application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can go about finding activities to launch using the `app.activity.forintent`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'This nifty module lets you search for activities based on a given intent action
    and category; here''s how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Intent* filter reference material at [http://developer.android.com/reference/android/content/Intent.html](http://developer.android.com/reference/android/content/Intent.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Intents and Intent Filters – Android Developer* webpage at [http://developer.android.com/guide/components/intents-filters.html](http://developer.android.com/guide/components/intents-filters.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Activites – Android Developer* webpage at [http://developer.android.com/guide/components/activities.html](http://developer.android.com/guide/components/activities.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a drozer module – a device enumeration module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how you can actually develop drozer modules by demonstrating
    the practical steps that make up drozer module development. The following device
    information enumerator grabs information about some of the hardware and the OS
    build.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s get started writing a drozer device enumeration module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a text editor and type in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save that file as `ex.device.info`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory for all your future drozer modules and save the `ex.device.info`
    file in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fire up the drozer console and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'drozer should have installed your new module if there were no syntax errors
    or faults. You can now execute it using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the previous command should be similar to the output in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00081.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The next few recipes are all about writing some useful modules to extend your
    drozer framework; in each, I'll demonstrate some key module development skills
    that you'll find useful later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start off with this explanation, I thought I'd discuss the code you just
    wrote for your new drozer module and how on earth it manages to extract information
    about your device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, first of all, I''d like to talk about the structure of a drozer module.
    Every module you write will start with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The first line is essentially an inclusion of some code from the `modules` library
    and it gives drozer modules access to all the magic methods and attributes they
    need to operate. The second line is called the header of a class declaration and
    marks the beginning of an object definition in Python. You may notice the `(Module)`
    part of the header; this is how the `Info` class manages to adopt the attributes
    of the `Module` class, and semantically this works a lot like inheritance in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next couple of lines are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'These are just variables drozer uses to associate some metadata to the module
    and to make documentation a bit more standardized and easy to perform—nothing
    technical to see here. Moving on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'This particular piece of code is called a function header and marks the beginning
    of the definition of a Python function. What''s special about this function is
    that it''s the method that gets called to do all the hard work for the module,
    analogous to the `Main` method in a Java class. Let''s talk about the arguments
    the `execute` method expects to be passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self`: This is an instance of the class being defined. Its parsed to each
    function in the class so that they have access to the class instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arguments`: This is a dictionary of the arguments parsed to the drozer module
    from the console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And then lastly we have the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Well, besides dereferencing the `self` object and using some magic method called
    `new`, we see a string value of `android.os.Build` being passed as an argument.
    This string is the name of a Java class in the Android Java API, and the new method
    uses something called Java Reflection to instantiate the `Build` class that holds
    all the information we want to print to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the code looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code simply prints out the device information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Build Class reference – Android Developer* webpage at [http://developer.android.com/reference/android/os/Build.html](http://developer.android.com/reference/android/os/Build.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Writing a Module* webpage at [https://github.com/mwrlabs/drozer/wiki/Writing-a-Module](https://github.com/mwrlabs/drozer/wiki/Writing-a-Module)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an application certificate enumerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, I'm going to show you how to write a certificate enumerator,
    which does nothing more than pull application certificates as hexadecimal digests
    and dump them on your screen. The reason I've included this is because, firstly,
    it demonstrates how you interface with the package manager and pull some information
    the other modules in this section don't. Secondly, it may be useful to get your
    hands on an application signature when you're looking for all apps that have been
    signed with the same public key, which is useful because often developers and
    malware authors will use the same key for most of their applications. It will
    also allow you to identify apps that may share resources and autonomously grant
    each other permissions; how this happens will be discussed in detail in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open up your favorite text editor and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save it to your module repo; if you don''t have one, simply create a file somewhere
    on your machine where you''ll save all your modules. You can install the module
    by executing the following command from your drozer console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And when this is all done, you can run the module using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see something like the following screenshot on your screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00082.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
