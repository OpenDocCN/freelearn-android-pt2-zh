["```kt\npublic class GetVideoGames extends HttpServlet {\n// HTTP GET REQUEST SINCE WE'RE REQUESTING FOR DATA\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\nString platform = request.getParameter(\"type\");\n// USE OUR JDO WRAPPER TO QUERY FOR GAMES BY PLATFORM\nList<VideoGame> games = VideoGameJDOWrapper.getGamesByType(platform);\n// WRAP GAMES INTO XML FORMAT\nString ret = GamesToXMLConverter.convertGamesToXML(games);\n// SET THE RESPONSE TYPE TO XML\nresponse.setContentType(\"text/xml\");\nresponse.setHeader(\"Cache-Control\", \"no-cache\");\n// WRITE DATA TO RESPONSE\nresponse.getWriter().write(ret);\n}\n}\n\n```", "```kt\npublic class GamesToXMLConverter {\npublic static String convertGamesToXML(List<VideoGame> games) {\nString content = \"\";\nfor (VideoGame g : games) {\n// WRAP EACH GAME IN ITS OWN TAG\ncontent += convertGameToXml(g);\n}\n// WRAP ALL GAME TAGS TOGETHER INTO ROOT TAG\nString ret = addTag(\"games\", content);\nreturn ret;\n}\n/**\n* METHOD FOR CONVERTING OBJECT TO XML FORMAT\n*\n* @param g\n* a video game object\n* @return\n*/\npublic static String convertGameToXml(VideoGame g) {\nString content = \"\";\n// ADD TAG FOR NAME\ncontent += addTag(\"name\", g.getName().replaceAll(\"&\", \"and\"));\n// ADD TAG FOR ID\ncontent += addTag(\"id\", String.valueOf(g.getId()));\n// ADD TAG FOR IMAGE IF NOT NULL\nif (g.getImgUrl() != null) {\ncontent += addTag(\"imgUrl\", g.getImgUrl().getValue());\n}\n// ADD TAG FOR TYPE\ncontent += addTag(\"type\", VideoGameConsole.convertIntToString(g.getConsoleType()));\n// WRAP ENTIRE GAME IN <game> TAGS\nString ret = addTag(\"game\", content);\nreturn ret;\n}\npublic static String addTag(String tag, String value) {\nreturn (\"<\" + tag + \">\" + value + \"</\" + tag + \">\");\n}\n}\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<servlet>\n<servlet-name>getVideoGames</servlet-name>\n<servlet-class>app.requests.GetVideoGames</servlet-class>\n</servlet>\n<servlet-mapping>\n<servlet-name>getVideoGames</servlet-name>\n<url-pattern>/getVideoGames</url-pattern>\n</servlet-mapping>\n\n```", "```kt\npublic class ConnectionManager {\npublic static DefaultHttpClient getClient() {\nDefaultHttpClient ret = null;\n// SET PARAMETERS\nHttpParams params = new BasicHttpParams();\nHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\nHttpProtocolParams.setContentCharset(params, \"utf-8\");\nparams.setBooleanParameter(\"http.protocol.expect-continue\", false);\n// REGISTER SCHEMES FOR HTTP AND HTTPS REQUESTS\nSchemeRegistry registry = new SchemeRegistry();\nregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\nfinal SSLSocketFactory sslSocketFactory = SSLSocketFactory.getSocketFactory();\nsslSocketFactory.setHostnameVerifier (SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\nregistry.register(new Scheme(\"https\", sslSocketFactory, 443));\nThreadSafeClientConnManager manager = new ThreadSafeClientConnManager(params, registry);\nret = new DefaultHttpClient(manager, params);\nreturn ret;\n}\n}\n\n```", "```kt\npublic class GetMethods {\n/**\n* MAKE AN HTTP GET REQUEST\n*\n* @param mUrl\n* the url of the request you're making\n* @param httpClient\n* a configured http client\n* @return\n*/\npublic static String doGetWithResponse(String mUrl, DefaultHttpClient httpClient) {\nString ret = null;\nHttpResponse response = null;\n// INITIATE THE GET METHOD WITH THE DESIRED URL\nHttpGet getMethod = new HttpGet(mUrl);\ntry {\n// USE YOUR HTTP CLIENT TO EXECUTE THE METHOD\nresponse = httpClient.execute(getMethod);\nSystem.out.println(\"STATUS CODE: \" + String.valueOf(response.getStatusLine(). getStatusCode()));\nif (null != response) {\n// CONVERT HTTP RESPONSE TO STRING\nret = getResponseBody(response);\n}\n} catch (Exception e) {\nSystem.out.println(e.getMessage());\n}\nreturn ret;\n}\npublic static String getResponseBody(HttpResponse response) {\nString response_text = null;\nHttpEntity entity = null;\ntry {\n// GET THE MESSAGE BODY OF THE RESPONSE\nentity = response.getEntity();\nif (entity == null) { throw new IllegalArgumentException(\"HTTP entity may not be null\"); }\n// IF NOT NULL GET CONTENT AS STREAM\nInputStream instream = entity.getContent();\nif (instream == null) { return \"\"; }\n// CHECK FOR LENGTH\nif (entity.getContentLength() > Integer.MAX_VALUE) { throw new IllegalArgumentException(\n\"HTTP entity too large to be buffered in memory\"); }\n// GET THE CHARACTER SET OF THE RESPONSE\nString charset = null;\nif (entity.getContentType() != null) {\nHeaderElement values[] = entity.getContentType(). getElements();\nif (values.length > 0) {\nNameValuePair param = values[0]. getParameterByName(\"charset\");\nif (param != null) {\ncharset = param.getValue();\n}\n}\n}\nif (charset == null) {\ncharset = HTTP.DEFAULT_CONTENT_CHARSET;\n}\n// ONCE CHARSET IS OBTAINED - READ FROM STREAM\nReader reader = new InputStreamReader(instream, charset);\nStringBuilder buffer = new StringBuilder();\ntry {\n// USE A BUFFER TO READ FROM STREAM\nchar[] tmp = new char[2048];\nint l;\nwhile ((l = reader.read(tmp)) != -1) {\nbuffer.append(tmp, 0, l);\n}\n} finally {\nreader.close();\n}\n// CONVERT BUFFER TO STRING\nresponse_text = buffer.toString();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn response_text;\n}\n}\n\n```", "```kt\npublic class GetVideoGamesAndroid {\nprivate static String URL_BASE = \"http://entertainmentapp.appspot.com\";\nprivate static String REQUEST_BASE = \"/getVideoGames?type=\";\n// THIS RETRIEVES THE HTTP CLIENT CONFIGURED ABOVE\nprivate static DefaultHttpClient httpClient = ConnectionManager.getClient();\n// PASS IN THE PLATFORM YOU WANT I.E. XBOX, PS3, ETC\npublic static List<VideoGame> getGamesByType(String type) {\n// CONSTRUCT GET REQUEST URL\nString url = URL_BASE + REQUEST_BASE + type;\n// XML RESPONSE AS A STRING GETS RETURNED\nString response = GetMethods.doGetWithResponse(url, httpClient);\n// RUN THROUGH SIMPLE XML PARSER\nList<VideoGame> games = ObjectParsers.parseGameResponse(response);\nreturn games;\n}\n}\n\n```", "```kt\npublic class VideoGameBaseAdpater extends BaseAdapter {\n// REMEMBER CONTEXT SO THAT CAN BE USED TO INFLATE VIEWS\nprivate LayoutInflater mInflater;\n// LIST OF VIDEO GAMES\nprivate List<VideoGame> mItems = new ArrayList<VideoGame>();\npublic VideoGameBaseAdpater(Context context, List<VideoGame> items) {\n// HERE WE CACHE THE INFLATOR FOR EFFICIENCY\nmInflater = LayoutInflater.from(context);\nmItems = items;\n}\npublic int getCount() {\nreturn mItems.size();\n}\npublic Object getItem(int position) {\nreturn mItems.get(position);\n}\npublic long getItemId(int position) {\nreturn position;\nUIUIdata, binding to}\npublic View getView(int position, View convertView, ViewGroup parent) {\nVideoGameViewHolder holder;\n// IF NULL THEN NEED TO INSTANTIATE IT BY INFLATING IT\nif (convertView == null) {\nconvertView = mInflater.inflate(R.layout.list_entry, null);\nholder = new VideoGameViewHolder();\nholder.name_entry = (TextView) convertView.findViewById (R.id.name_entry);\nholder.type_entry = (TextView) convertView.findViewById (R.id.number_type_entry);\nconvertView.setTag(holder);\n} else {\n// GET VIEW HOLDER BACK FOR FAST ACCESS TO FIELDS\nholder = (VideoGameViewHolder) convertView.getTag();\n}\n// EFFICIENTLY BIND DATA WITH HOLDER\nVideoGame v = mItems.get(position);\nholder.name_entry.setText(v.getName());\nString type = VideoGameConsole.convertIntToString (v.getConsoleType());\nholder.type_entry.setText(type);\nreturn convertView;\n}\nstatic class VideoGameViewHolder {\nTextView name_entry;\nTextView type_entry;\n}\n}\n\n```", "```kt\npublic class VideoGameBaseAdapterActivity extends ListActivity {\nprivate List<VideoGame> games;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.list);\n// MAKE GET REQUEST TO RETRIEVE GAMES\ngames = GetVideoGamesAndroid.getGamesByType (VideoGameConsole.XBOX);\n// USE VIDEO GAME ADAPTER\nVideoGameBaseAdpater vAdapter = new VideoGameBaseAdpater(this, games);\n// SET THIS ADAPTER AS YOUR LIST ACTIVITY'S ADAPTER\nthis.setListAdapter(vAdapter);\n}\n@Override\nprotected void onListItemClick(ListView l, View v, int position, long id) {\nsuper.onListItemClick(l, v, position, id);\nVideoGame vg = games.get(position);\nString name = vg.getName();\nSystem.out.println(\"CLICKED ON \" + name);\n}\n}\n\n```"]