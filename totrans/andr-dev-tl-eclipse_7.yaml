- en: Chapter 7. Adding an External Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Android application cannot achieve everything on its own, it will always
    need the company of external jars/libraries to achieve different goals and serve
    various purposes. Almost every free Android application published on store has
    advertisements embedded in it, which makes use of external components to achieve
    it. Incorporating advertisements in the Android application is a vital aspect
    of today''s application development. In this chapter, we will continue on our
    DistanceConverter application developed from the previous chapters, and make use
    of an external library, `AdMob`, to incorporate advertisements in our application.
    The coverage will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account at the `AdMob` site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Site/Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the Advertisement Meditation Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding `AdMob` in the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making changes in the manifest file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the `AdMob` widget/view in the layout file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an account at the AdMob website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`AdMob` is one way to incorporate advertisements in our Android application.
    To make use of `AdMob`, the first thing we need to do is to register and get an
    account for ourselves. To register, visit the [http://www.admob.com](http://www.admob.com)
    website and register on it. On the right-hand side, click on **Sign up with AdMob**,
    and then fill up the form and register.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the sign up form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an account at the AdMob website](img/1103OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can use our existing Google ID if we have, else the preceding steps will
    create one and link it with the `AdMob` account.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Site/Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we have created our account, we need to add a Site/Application (basically,
    it identifies or acts as unique handle for ads networks for the ads they place).
    To add Site/Application we perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Site/Application](img/1103OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navigate to **Add Site/App** from the **Sites & Apps** menu, as shown in the
    preceding screenshot. The **Add Site/App** screen will appear, as shown in the
    following screenshot:![Adding Site/Application](img/1103OS_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Android App**, as shown in the preceding screenshot and fill in the
    other details. Because our application is not in the market place, use **http://**
    for **Android Package URL**, as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the corresponding category, in this case we used **Tools**, and add some
    description in the **App description** textarea. Also, leave the other fields
    to their default, and enter the captcha and create site. After this the following
    screen will appear:![Adding Site/Application](img/1103OS_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Download AdMob Android SDK** button to download the `AdMob`
    SDK. Once the SDK is downloaded, click on the **Go to Sites/App** button and our
    site should have been added, and will appear in the sites list as shown in the
    following screenshot:![Adding Site/Application](img/1103OS_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Status** appears to be red as it has not received any ad request for this
    site. It will automatically turn green once it starts getting ad requests for
    this site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choosing the Ad Network Mediation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we are done with adding the Site/Application and downloading the SDK lets
    get into adding **Ad Network Mediation** (**AdMob Mediation**). It coordinates
    with the different ad networks to help us maximize fill rate (represents the percentage
    of ad requests that satisfy the ad requests sent by the app) and increase monetization.
    It ensures that a proper network is selected to serve the ads at any time. For
    more information on AdMob Mediation, please refer to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://support.google.com/admob/topic/2403413?hl=en&ref_topic=1307209](https://support.google.com/admob/topic/2403413?hl=en&ref_topic=1307209)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Ad Network Mediation, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Ad Network Mediation** under the **Sites & Apps** menu, and
    follow the steps, as shown in the following screenshot:![Choosing the Ad Network
    Mediation](img/1103OS_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Ad Size** as **Banner - Typical 320x50** for support on most of
    the iPhones and Android phones in portrait, and **Platform** as **Android**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more information on banner sizes and decision, refer to the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://developers.google.com/mobile-ads-sdk/docs/admob/smart-banners](https://developers.google.com/mobile-ads-sdk/docs/admob/     smart-banners)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select **Automatic Refresh**, and then specify the **Refresh rate,** and
    then click on the **Save & Continue** button. The following screen will appear.
    Select **Ad Network** from it, and then click on **Continue** as depicted in the
    following screenshot:![Choosing the Ad Network Mediation](img/1103OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the network you wish from the options in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Publisher credentials are to be provided for the network we select at the bottom
    of the same screen. In this case, we have credentials for `AdMob` as we just signed
    up and we only chose **AdMob Network**, as shown in the preceding screenshot.
    However, we are free to add any number of networks, provided we have credential
    details. Also, we can always add any network at any point of time.
  prefs: []
  type: TYPE_NORMAL
- en: Adding AdMob SDK to the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s extract the previously downloaded `AdMob SDK zip` file, and we should
    get the folder `GoogleAdMobAdsSdkAndroid-6.*.*`. Under that folder there is `GoogleAdMobAdsSdk-6.x.x.jar`
    file. Copy this JAR file in the `libs` folder of the project, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding AdMob SDK to the project](img/1103OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Other Java libraries can be added in the same way for use in our project, and
    to reference Android libraries in the project, information is available at the
    following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/tools/projects/projects-eclipse.html](http://developer.android.com/tools/projects/projects-eclipse.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Making changes in the manifest file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AdMob` needs to make request across the internet to fetch ads. Therefore,
    that permission needs to be added in the `AndroidManifest.xml` file as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In other words, it also helps the AdMob SDK to figure out a currently working
    Internet connection before it places requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, add the `AdView` activity which is responsible for getting and showing
    ads in the file, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information on integration, refer to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/mobile-ads-sdk/docs/](https://developers.google.com/mobile-ads-sdk/docs/)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the AdMob widget/view in the layout file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the `AdMob` view, add the following code in the `layout/activity_main.xml`
    file for the portrait mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, add the same piece of code in the `layout-land/activity_main.xml`
    file for the landscape mode. After this addition, an error will be shown, and
    that is because we have not defined the namespace for `AdView`. We will do that
    next and the error will disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `meta` tag in the namespace at the top of the XML along with other
    namespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some of the important tags and the values of `AdView` that were
    used previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Item | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ads:adSize` | `SMART_BANNER`: the banner adjusts according to the screen
    types and orientation using the width of screen. |'
  prefs: []
  type: TYPE_TB
- en: '| `ads:testDevices` | It is used for testing whether the code is fine. `TEST_EMULATOR`
    is used for Emulator. Devices ID can also be specified if used for testing. It
    should be removed if moving to production from dev. The easiest way to find the
    device ID is from the `AdMob` SDK log output. |'
  prefs: []
  type: TYPE_TB
- en: '| `ads:adUnitId` | Publisher ID. Replace with the corresponding ID. |'
  prefs: []
  type: TYPE_TB
- en: '| `ads:loadAdOnCreate` | To create the view by inflating, and send ad request
    to `AdMob`. |'
  prefs: []
  type: TYPE_TB
- en: 'In the previous case we are loading `Adview` and making request via XML. There
    is another way to achieve this by placing the following code in the `MainActivity.java`
    file in the `onCreate()` method, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure the testing mode is removed before the Android app gets ready to be
    published to the store.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After all the hard work, let''s run the application to check out how it looks.
    In the landscape mode, the advertisement would appear as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/1103OS_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the portrait mode, the ad will appear as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/1103OS_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the first time the `AdMob` ads may take 1 or 2 minutes to show, so have
    patience.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to add an external library by means of incorporating
    `AdMob` mobile advertisements in our DistanceConverter application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about what it takes to sign and get ready
    to publish the application.
  prefs: []
  type: TYPE_NORMAL
