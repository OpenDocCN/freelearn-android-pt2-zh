- en: Handling Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理
- en: Now that we've seen the basics of canvas drawing and we've our custom view adapted
    to its size, it's time to interact with it. Many custom views will only need to
    draw something in a special way; that's the reason we created them as custom views,
    but many others will need to react to user events. For example, how our custom
    view will behave when the user clicks or drags on top of it?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了画布绘图的基础知识，并且我们的自定义视图已经适应了其大小，是时候与它进行交互了。许多自定义视图只需要以特定方式绘制某些内容；这就是我们创建它们为自定义视图的原因，但还有许多其他视图需要响应用户事件。例如，当用户在我们的自定义视图上点击或拖动时，它将如何表现？
- en: 'To answer these questions, we''ll cover with more detail the following points
    in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这些问题，我们将在本章中详细介绍以下内容：
- en: Basic event handling
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本事件处理
- en: Advanced event handling
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级事件处理
- en: Basic event handling
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本事件处理
- en: Let's start by adding some basic event handling to our custom views. We'll go
    through the basics, and we'll add more complex events later on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为我们的自定义视图添加一些基本事件处理开始。我们将介绍基础知识，稍后我们将添加更复杂的事件。
- en: Reacting to touch events
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应触摸事件
- en: In order to make our custom view interactive, one of the first things we will
    implement is to process and react to touch events, or basically, when the user
    touches or drags on top of our custom view.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的自定义视图具有交互性，我们首先要实现的是处理并响应用户的触摸事件，或者基本上，当用户在我们的自定义视图上触摸或拖动时。
- en: 'Android provides us with the `onTouchEvent()` method that we can override in
    our custom view. By overriding this method, we''ll get any touch event happening
    on top of it. To see how it works, let''s add it to the custom view we built in
    the last chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓提供了`onTouchEvent()`方法，我们可以在自定义视图中重写它。通过重写这个方法，我们将获取到发生在其上的任何触摸事件。为了了解它是如何工作的，让我们将它添加到上一章构建的自定义视图中：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Lets also add a log call to see the events we receive. If we run this code
    and touch on top of our view, we''ll get the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同时让我们添加一个日志调用，以查看我们接收的事件。如果我们运行此代码并在视图上触摸，我们将得到以下结果：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see, there is a lot of information on the event, coordinates, action
    type, and time, but even if we perform more actions on it, we'll only get `ACTION_DOWN`
    events. That's because the default implementation of view is not clickable. By
    default, if we don't enable the clickable flag on the view, the default implementation
    of `onTouchEvent()` will return false and ignore further events.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，事件上有许多信息，如坐标、动作类型和时间，但即使我们对它执行更多操作，我们也只会收到`ACTION_DOWN`事件。这是因为视图的默认实现不是可点击的。默认情况下，如果我们不在视图上启用可点击标志，`onTouchEvent()`的默认实现将返回false并忽略进一步的事件。
- en: The `onTouchEvent()` method has to return `true` if the event has been processed
    or false if it hasn't. If we receive an event in our custom view and we don't
    know what to do or we're not interested in such events, we should return `false`,
    so it can be processed by our view's parent or by any other component or the system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`onTouchEvent()`方法必须返回`true`如果事件已经被处理，或者返回`false`如果还没有。如果我们在自定义视图中接收到一个事件，而我们不知道该如何处理或者对此类事件不感兴趣，我们应该返回`false`，这样它就可以由我们视图的父视图或其他组件或系统来处理。'
- en: 'To receive more types of events, we can do two things:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了接收更多类型的事件，我们可以做两件事：
- en: Set the view as clickable using `setClickable(true)`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`setClickable(true)`将视图设置为可点击
- en: Implement our own logic and process the events in our custom class
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们自己的类中实现逻辑并处理事件
- en: Later on, we'll implement more complex events; we'll go for the second option.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将实现更复杂的事件；我们将选择第二个选项。
- en: 'Lets carry out a quick test and change the method to return simply true instead
    of calling the parent method:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一个快速测试，将方法更改为只返回true，而不是调用父方法：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we should receive many other types of events, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够接收许多其他类型的事件，如下所示：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As seen in the preceding example, we can see that in the previous log we not
    only have both `ACTION_DOWN` and `ACTION_UP` but also `ACTION_MOVE` to indicate
    that we're performing an action of drag on top of our view.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个示例所示，我们可以看到在之前的日志中，我们不仅拥有`ACTION_DOWN`和`ACTION_UP`，还有`ACTION_MOVE`来表示我们在视图上执行了拖动操作。
- en: 'We''ll focus on handling the `ACTION_UP` and `ACTION_DOWN` events first. Let''s
    add a `boolean` variable name that will keep track whether we''re currently pressing
    or touching our view or not:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先关注处理`ACTION_UP`和`ACTION_DOWN`事件。让我们添加一个名为`boolean`的变量，该变量将跟踪我们当前是否正在按或触摸我们的视图：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We''ve added the variable and set its default state to `false`, as the view
    will not be pressed when created. Now, lets add the code to handle this on our
    `onTouchEvent()` implementation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了变量，并将其默认状态设置为`false`，因为视图在创建时不会被按压。现在，让我们在我们的`onTouchEvent()`实现中添加代码来处理这个问题：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We're processed the `MotionEvent`. The `ACTION_DOWN` and `MotionEvent.ACTION_UP`
    events; any other action we receive here, we ignore and return `false`, since
    we haven't handled it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们处理了`MotionEvent`。`ACTION_DOWN`和`MotionEvent.ACTION_UP`事件；我们在这里收到的任何其他动作，我们都会忽略并返回`false`，因为我们没有处理它。
- en: 'OK, now we''ve a variable that keeps track if we''re pressing our view or not,
    but we should do something else or otherwise this won''t be of that much use.
    Let''s modify the `onDraw()` method to paint the circle in a different color when
    the view is pressed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们有一个变量来跟踪我们是否正在按压视图，但我们还应该做其他事情，否则这个变量不会很有用。让我们修改`onDraw()`方法，当视图被按压时，以不同的颜色绘制圆形：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we run this example and we touch our view, we''ll see that nothing happens!
    What is the issue? We''re not triggering any repaint or redraw event and the view
    it''s not drawn again. We can see this code is working if we manage to keep pressing
    the view and put the app in the background and return it to the foreground, for
    example. However, to do it properly, we should trigger a repaint event when we
    change something that requires our view to be redrawn, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个例子并触摸我们的视图，我们会发现什么都没有发生！问题是什么？我们没有触发任何重绘事件，视图也没有再次被绘制。如果我们设法持续按压视图，并将应用放到后台然后再返回前台，我们就能看到这段代码是有效的。然而，为了正确地处理，当我们更改需要重新绘制视图的内容时，我们应该触发一个重绘事件，如下所示：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'OK, that should do the trick! Calling the invalidate method will trigger an
    `onDraw()` method call in the future:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这应该能解决问题！调用invalidate方法将在未来触发一个`onDraw()`方法的调用：
- en: '[https://developer.android.com/reference/android/view/View.html#invalidate()](https://developer.android.com/reference/android/view/View.html#invalidate()).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/view/View.html#invalidate()](https://developer.android.com/reference/android/view/View.html#invalidate())。'
- en: 'We can now refactor this code and move it into a method:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以重构这段代码，并将其移动到一个方法中：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to be aware that invalidate has to be called from the UI thread and
    will throw an exception if called from another thread. If we've to call it from
    another thread, for example, we've to update a view after receiving some data
    from a web service, we've to call `postInvalidate()`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道invalidate必须在UI线程中调用，如果从其他线程调用将会抛出异常。如果我们需要从另一个线程调用它，例如，在从网络服务接收到一些数据后更新视图，我们应该调用`postInvalidate()`。
- en: 'Here is the result:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![](img/2dc0bea6-a89d-419d-89a7-25935dad6ba3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dc0bea6-a89d-419d-89a7-25935dad6ba3.png)'
- en: Drag events
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拖动事件
- en: Now that we're already reacting to `ACTION_DOWN` and `ACTION_UP` events, we
    will add a bit more complexity by reacting to `ACTION_MOVE` as well.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对`ACTION_DOWN`和`ACTION_UP`事件做出了反应，我们将通过也对`ACTION_MOVE`事件做出反应来增加一点复杂性。
- en: Let's update the angle, based on the amount of dragging in both directions.
    To do so, we need to store where the user pressed in the first place, so we'll
    store the variables `lastX` and `lastY` with the `X` and `Y` coordinates on the
    `ACTION_DOWN` event.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据在两个方向上拖动的距离来更新角度。为此，我们需要存储用户最初按压的位置，因此我们将用`ACTION_DOWN`事件中的`X`和`Y`坐标来存储变量`lastX`和`lastY`。
- en: 'When we receive an `ACTION_MOVE` event, we calculate the difference between
    the `lastX` and `lastY` coordinates and the current values we received with the
    event. We update `selectedAngle` with the average of the `X` and `Y` difference,
    and we finally update the `lastX` and `lastY` coordinates. We have to remember
    to call invalidate or otherwise our view will not be redrawn:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们收到一个`ACTION_MOVE`事件时，我们计算`lastX`和`lastY`坐标与事件中收到的当前值之间的差。我们用`X`和`Y`差值的平均值来更新`selectedAngle`，并最终更新`lastX`和`lastY`坐标。我们必须记得调用invalidate，否则我们的视图将不会被重绘：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That movement might feel a bit unnatural, so if we want the angle of the circle
    to follow where we actually pressed, we should change from Cartesian coordinates
    to polar coordinates:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种移动可能感觉有点不自然，所以如果我们希望圆的角度跟随我们实际按压的位置，我们应该从笛卡尔坐标转换为极坐标：
- en: '[https://en.wikipedia.org/wiki/List_of_common_coordinate_transformations](https://en.wikipedia.org/wiki/List_of_common_coordinate_transformations).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/List_of_common_coordinate_transformations](https://en.wikipedia.org/wiki/List_of_common_coordinate_transformations)。'
- en: 'With this change, there is no need to track the previous coordinates, so we
    can replace our code with the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 进行此更改后，无需跟踪先前坐标，因此我们可以用以下代码替换我们的代码：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Complex layouts
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂布局
- en: So far, we've seen how to manage `onTouchEvent()` events on our custom view,
    but that was on a view occupying the whole screen size, so it was a bit of a simple
    approach. If we want to include or view inside a `ViewGroup` that also handles
    touch events, for example, a `ScrollView`, what do we've to change?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了如何在自定义视图上管理`onTouchEvent()`事件，但这仅适用于占据整个屏幕大小的视图，因此这是一个相对简单的处理方式。如果我们想在也处理触摸事件的`ViewGroup`中包含我们的视图，例如`ScrollView`，我们需要做哪些更改？
- en: 'Let''s change the layout for this one:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改这个布局：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Basically, we've put our custom view inside `ScrollView`, so both can process
    events. We should be selective in which events have to be processed by our view
    and  have to be processed by which the `ScrollView`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们把自定义视图放在了`ScrollView`中，这样两者都可以处理事件。我们应该选择哪些事件由我们的视图处理，哪些事件由`ScrollView`处理。
- en: 'To do so, the view provides us with the `getParent()` method, to get its parent:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，视图为我们提供了`getParent()`方法，以获取其父视图：
- en: '[https://developer.android.com/reference/android/view/ViewParent.html](https://developer.android.com/reference/android/view/ViewParent.html).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[关于`ViewParent`的Android官方文档](https://developer.android.com/reference/android/view/ViewParent.html)。'
- en: Once we've the parent, we can call `requestDisallowInterceptTouchEvent` to disallow
    the parent and its parents to intercept touch events. In addition, to only consume
    the events we're interested in, we added a check to see if the location where
    the user touched is inside the radius of the circle or outside. If the touch is
    outside, we'll ignore the event and won't process it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了父视图，就可以调用`requestDisallowInterceptTouchEvent`来禁止父视图及其父视图拦截触摸事件。此外，为了只消耗我们感兴趣的事件，我们添加了一个检查，以查看用户触摸的位置是否在圆的半径内或外部。如果触摸在外部，我们将忽略该事件并不处理。
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We compute the radius applying the same Cartesian to the polar transformation
    we used before. We also changed the code, so if the touch is inside the radius
    of the circle, we call `getParent().requestDisallowInterceptTouchEvent(true)`
    on the `ACTION_DOWN` event, telling the `ViewParent` to not intercept the touch
    events. We need to undo this action by calling the opposite `getParent().requestDisallowInterceptTouchEvent(false)`
    on the `ACTION_UP` event.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过应用之前使用的相同笛卡尔极坐标变换来计算半径。我们还更改了代码，所以如果触摸点在圆的半径内，我们会在`ACTION_DOWN`事件上调用`getParent().requestDisallowInterceptTouchEvent(true)`，告诉`ViewParent`不要拦截触摸事件。我们需要在`ACTION_UP`事件上调用相反的`getParent().requestDisallowInterceptTouchEvent(false)`来撤销这个动作。
- en: 'This is the result of this change, and we can see that there is a `TextView`
    view on top and another one at the bottom of our custom view:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是此更改的结果，我们可以看到自定义视图顶部和底部各有一个`TextView`：
- en: '![](img/5031ea4d-f7c8-4a23-91e7-aed43739b00d.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5031ea4d-f7c8-4a23-91e7-aed43739b00d.png)'
- en: Now if we touch on the circle, our custom view will only process the event and
    change the circle angle. On the other hand, touching just outside the circle we'll
    let the `ScrollView` process the events.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们触摸圆圈，我们的自定义视图将只处理事件并改变圆圈的角度。另一方面，如果触摸圆圈外部，我们将让`ScrollView`处理这些事件。
- en: There aren't that many changes, but when building a custom view that can potentially
    be reused in multiple places, we should definitely test it on multiple layout
    configurations to see how it behaves.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 变化并不多，但是当我们构建一个可能会在多个地方重复使用的自定义视图时，我们绝对应该在多种布局配置中测试它，以了解其表现如何。
- en: Find the full source code of this example in the `Example10-Events` folder in
    the GitHub repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub仓库的`Example10-Events`文件夹中找到此示例的完整源代码。
- en: Advanced event handling
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级事件处理
- en: We've seen how to process `onTouchEvent()`, but we can also detect some **gestures**
    or more complex interactions. Android provides us with the `GestureDetector` to
    help us detect some gestures. There is even a `GestureDetectorCompat` on the support
    library to provide this support to older versions of Android.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何处理`onTouchEvent()`，但我们还可以检测一些**手势**或更复杂的交互。Android为我们提供了`GestureDetector`来帮助检测一些手势。支持库中甚至还有一个`GestureDetectorCompat`，用于为旧版本的Android提供支持。
- en: For more information on the `GestureDetector`, please check the Android documentation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`GestureDetector`的更多信息，请查看Android文档。
- en: Detecting gestures
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测手势
- en: 'Let''s change the code we''ve been building to use `GestureDetector`. We''ll
    also use a `Scroller` implementation to scroll smoothly between values. We can
    modify the constructor to create the `Scroller` object and the `GestureDetector`
    with an implementation of a `GestureDetector.OnGestureListener`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变我们一直在构建的代码，以使用`GestureDetector`。我们还将使用`Scroller`实现来在值之间平滑滚动。我们可以修改构造函数以创建`Scroller`对象和实现了`GestureDetector.OnGestureListener`的`GestureDetector`：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are many callbacks in this interface, but first, in order to process the
    gestures, we need to return true on the `onDown()` callback; otherwise, we're
    indicating that we will not process the chain of events further.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口中有许多回调方法，但首先，为了处理手势，我们需要在`onDown()`回调中返回true；否则，我们表明不会进一步处理事件链。
- en: 'We''ve simplified `onTouchEvent()` now, as it just simply forwards the event
    to the `gestureListener`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们简化了`onTouchEvent()`，因为它只需将事件简单地转发给`gestureListener`：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we may have different gestures, long press, flings, scrolls, we created
    a method to end the gesture and restore the status:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们可能有不同的手势，如长按、抛掷、滚动，所以我们创建了一个方法来结束手势并恢复状态：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We''ve modified the `computeAndSetAngle()` method to use `Scroller`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改了`computeAndSetAngle()`方法以使用`Scroller`：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `Scroller` instance will be animating the values; we need to keep checking
    the updated values to perform the animation. One approach to do so will be to
    check on the `onDraw()` method if the animation is finished and trigger an invalidate
    in order to redraw the view if it isn''t:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Scroller`实例将动画化这些值；我们需要不断检查更新的值以执行动画。一种实现方法是，在`onDraw()`方法中检查动画是否完成，并在动画未完成时触发失效以重新绘制视图：'
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `computeScrollOffset()` will return true if the `Scroller` hasn't reached
    the end; also after calling it, we can query the value of the scroll using the
    `getCurrX()` method. In this example, we're animating the value of the circle
    angle, but we're using the `X` coordinate of the `Scroller` to animate it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`computeScrollOffset()`方法会在`Scroller`还未到达终点时返回true；在调用它之后，我们可以使用`getCurrX()`方法查询滚动值。在这个例子中，我们正在动画化圆的角度值，但我们使用`Scroller`的`X`坐标来驱动这个动画。'
- en: Using this `GestureDetector`, we can also detect long presses and flings, for
    example. As flings involve more animations, we'll cover it in the following chapters
    of this book.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个`GestureDetector`，我们还可以检测长按和抛掷等手势。由于抛掷涉及更多动画，我们将在本书的下一章中进行介绍。
- en: 'For more information about how to make views interactive refer to:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使视图具有交互性的更多信息，请参考：
- en: '[https://developer.android.com/training/custom-views/making-interactive.html](https://developer.android.com/training/custom-views/making-interactive.html).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[在Android开发者网站上了解如何使视图具有交互性](https://developer.android.com/training/custom-views/making-interactive.html)。'
- en: The source code of this example can be found in the `Example11-Events` folder,
    in the GitHub repository.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本例的源代码可以在GitHub仓库的`Example11-Events`文件夹中找到。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've seen how to interact with our custom views. A part of
    the power of building custom views is the ability to interact with them and make
    them interactive. We have also seen how to simply react to touch and release events,
    how to drag elements and calculate the delta distance between drag events, and
    finally how to use `GestureDetector`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何与自定义视图进行交互。构建自定义视图的部分强大功能在于能够与它们互动并使它们具有交互性。我们也了解了如何简单地响应触摸和释放事件，如何拖动元素以及计算拖动事件之间的增量距离，最后学习了如何使用`GestureDetector`。
- en: As rendering has been kept quite simple until now, we'll focus on making our
    rendering more complex and using more drawing primitives in the next chapter.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于到目前为止渲染保持相当简单，我们将在下一章重点介绍使我们的渲染更加复杂并使用更多的绘图原语。
