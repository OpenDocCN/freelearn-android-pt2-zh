["```kt\n    public class ThreadActivity extends Activity {\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            MyThread thread = new MyThread();\n            thread.start();\n        }\n\n        private class MyThread extends Thread {\n            @Override\n            public void run() {\n                //code...\n            }\n        }\n    }\n    ```", "```kt\n    public class ThreadActivity extends Activity implements Runnable {\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            Thread thread = new Thread(this);\n            thread.start();\n        }\n\n        @Override\n        public void run() {\n            //code...\n        }\n    }\n    ```", "```kt\nthread.setPriority(Thread.MAX_PRIORITY);\nthread.setPriority(Thread.NORM_PRIORITY);\nthread.setPriority(Thread.MIN_PRIORITY);\n```", "```kt\nsynchronized (object) {\n    //code...\n}\n```", "```kt\npublic synchronized void update() {\n    //code...\n}\n```", "```kt\n<service\n    android:name=\".MyService\"\n    android:process=\".MyProcess\">\n</service>\n```", "```kt\nCalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views\n```", "```kt\npublic class LooperThread extends Thread {\n    public Handler mHandler;\n\n    public void run() {\n        Looper.prepare();\n        mHandler = new Handler() {\n            public void handleMessage(Message msg) {\n                // codeâ€¦\n            }\n        };\n        Looper.loop();\n    }\n}\n```", "```kt\nHandler mHandler = new Handler();\n```", "```kt\njava.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()\n```", "```kt\npublic class HandlerThreadActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        MyHandlerThread handlerThread = new MyHandlerThread(\"HandlerThread\");\n        handlerThread.start();\n    }\n\n    private class MyHandlerThread extends HandlerThread {\n        private Handler handler;\n\n        public MyHandlerThread(String name) {\n            super(name);\n        }\n\n        @Override\n        protected void onLooperPrepared() {\n            handler = new Handler(getLooper()) {\n                @Override\n                public void handleMessage(Message msg) {\n                    //code...\n                }\n            };\n        }\n\n        public void post(Runnable r) {\n            handler.post(r);\n        }\n    }\n}\n```", "```kt\npublic class MyAsyncTask extends AsyncTask<Params, Progress, Result> {\n    @Override\n    protected void onPreExecute() {}\n\n    @Override\n    protected Result doInBackground(Params... p) {return result;}\n\n    @Override\n    protected void onProgressUpdate(Progress... values) {}\n\n    @Override\n    protected void onPostExecute(Result result) {}\n\n    @Override\n    protected void onCancelled() {}\n}\n```", "```kt\npublic class ApplicationExecutor extends Application {\n    private Executor executor;\n\n    public static Executor getExecutor() {\n        if (executor == null)\n            executor = Executors.newCachedThreadPool();\n        return executor;\n    }\n}\n```", "```kt\ngetLoaderManager();\n```", "```kt\npublic class MyAsyncTaskLoader extends AsyncTaskLoader<Result>{\n\n    @Override\n    public Result loadInBackground() {\n        //code...\n        return result;\n    }\n}\n```", "```kt\npublic class CursorLoaderActivity extends ListActivity implements LoaderManager.LoaderCallbacks<Cursor>{\n    private static final int CURSOR_LOADER_ID = 0;\n    private SimpleCursorAdapter simpleCursorAdapter;\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        simpleCursorAdapter = new SimpleCursorAdapter(this,\n                android.R.layout.simple_list_item_1, null,\n                new String[] { \"name\" },\n                new int[] { android.R.id.text1}, 0);\n        setListAdapter(simpleCursorAdapter);\n        getLoaderManager().initLoader(CURSOR_LOADER_ID, null, this);\n    }\n\n    @Override\n    public Loader<Cursor> onCreateLoader(int id, Bundle args) {\n        return new CursorLoader(this, URI, null, null, null, \"name ASC\");\n    }\n\n    @Override\n    public void onLoadFinished(Loader<Cursor> loader, Cursor c) {\n        simpleCursorAdapter.swapCursor(c);\n    }\n\n    @Override\n    public void onLoaderReset(Loader<Cursor> loader) {\n        simpleCursorAdapter.swapCursor(null);\n    }\n}\n```", "```kt\npublic class LocalService extends Service {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public boolean onUnbind(Intent intent) {\n        return super.onUnbind(intent);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n}\n```", "```kt\npublic class MyService extends Service {\n    private Thread thread;\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        switch (intent.getAction()) {\n            case \"action1\":\n                handleAction1();\n                break;\n        }\n        return START_NOT_STICKY;\n    }\n\n    private void handleAction1() {\n        thread = new Thread(new MyRunnable());\n        thread.start();\n    }\n\n    private static class MyRunnable implements Runnable {\n\n        @Override\n        public void run() {\n            //code...\n        }\n    }\n}\n```", "```kt\npublic class MyService extends Service {\n    private final ServiceBinder binder = new ServiceBinder();\n\n    public class ServiceBinder extends Binder {\n\n        public MyService getService() {\n            return MyService.this;\n        }\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return binder;\n    }\n}\n```", "```kt\npublic class ClientActivity extends Activity {\n    private MyService myService;\n    private ServerServiceConnection serverServiceConnection = new ServerServiceConnection();\n    private boolean isBound = false;\n\n    private class ServerServiceConnection implements ServiceConnection {\n\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            myService = ((MyService.ServiceBinder) service).getService();\n            isBound = true;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n            myService = null;\n            isBound = false;\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Intent intent = new Intent(this, MyService.class);\n        bindService(intent, serverServiceConnection, Service.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if (isBound) {\n            unbindService(serverServiceConnection);\n        }\n    }\n}\n```", "```kt\npublic class MyService extends IntentService {\n\n    public MyService() {\n        super(\"MyService\");\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        switch (intent.getAction()) {\n            case \"action1\":\n                handleAction1();\n                break;\n        }\n    }\n\n    private void handleAction1() {\n        //code...\n    }\n}\n```", "```kt\ninterface IRemoteInterface {\n    boolean sendResult(in Result result);\n}\n```", "```kt\npublic class RemoteService extends Service {\n    private final IRemoteInterface.Stub binder = new IRemoteInterface.Stub() {\n        @Override\n        public boolean sendResult(Result result) throws RemoteException {\n            return false;\n        }\n    };\n\n    public RemoteService() {\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return binder;\n    }\n}\n```", "```kt\npublic class AidlActivity extends Activity implements View.OnClickListener{\n    private boolean bound = false;\n    private IRemoteInterface mIRemoteService;\n    private ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            mIRemoteService = IRemoteInterface.Stub.asInterface(service);\n            bound = true;\n        }\n\n        public void onServiceDisconnected(ComponentName className)\n{\n            mIRemoteService = null;\n            bound = false;\n        }\n    };\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        Intent intent = new Intent(AidlActivity.this, RemoteService.class);\n        intent.setAction(IRemoteInterface.class.getName());\n        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    public void onClick(View v) {\n        if (bound) {\n            try {\n                mIRemoteService.sendResult(result);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```", "```kt\npublic class RemoteService extends Service {\n    MyThread thread;\n    Messenger messenger;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        thread.start();\n    }\n\n    private void onThreadPrepared() {\n        messenger = new Messenger(thread.handler);\n    }\n\n    public IBinder onBind(Intent intent) {\n        return messenger.getBinder();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        thread.quit();\n    }\n\n    private class MyThread extends Thread {\n        Handler handler;\n\n        @Override\n        public void run() {\n            Looper.prepare();\n            handler = new Handler() {\n\n                @Override\n                public void handleMessage(Message msg) {\n                    // Implement message processing\n                }\n            };\n            onThreadPrepared();\n            Looper.loop();\n        }\n\n        public void quit() {\n            handler.getLooper().quit();\n        }\n    }\n}\n```", "```kt\npublic class MessengerActivity extends Activity implements View.OnClickListener {\n    private boolean bound = false;\n    private Messenger remoteService = null;\n    private ServiceConnection connection = new ServiceConnection()\n{\n\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            remoteService = new Messenger(service);\n            bound = true;\n        }\n\n        public void onServiceDisconnected(ComponentName className)\n{\n            remoteService = null;\n            bound = false;\n        }\n    };\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Intent intent = new Intent(action);\n        bindService(intent, connection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    public void onClick(View v) {\n        if (bound) {\n            try {\n                remoteService.send(message);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```", "```kt\npublic class MyReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Intent sericeIntent = new Intent();\n        sericeIntent.setClass(context, MyService.class);\n        sericeIntent.setAction(MyService.ACTION);\n        context.startService(sericeIntent);\n    }\n}\n```", "```kt\npublic class AsyncReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        switch (intent.getAction()) {\n            case \"myAction\":\n                final PendingResult pendingResult = goAsync();\n                new Thread() {\n\n                    public void run() {\n                        // Do background work\n                        pendingResult.finish();\n                    }\n                }.start();\n                break;\n        }\n    }\n}\n```", "```kt\npublic class MyAsyncQueryHandler extends AsyncQueryHandler {\n\n    public MyAsyncQueryHandler(ContentResolver cr) {\n        super(cr);\n    }\n\n    @Override\n    protected void onQueryComplete(int token, Object cookie, Cursor cursor) {\n    }\n\n    @Override\n    protected void onInsertComplete(int token, Object cookie, Uri uri) {\n    }\n\n    @Override\n    protected void onUpdateComplete(int token, Object cookie, int result) {\n    }\n\n    @Override\n    protected void onDeleteComplete(int token, Object cookie, int result) {\n    }\n}\n```", "```kt\npublic class MyAsyncQueryHandler extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        AsyncQueryHandler asyncQueryHandler = new AsyncQueryHandler(getContentResolver()) {\n            @Override\n            protected void onDeleteComplete(int token, Object cookie, int result) {\n                //code to handle the delete operation...\n            }\n\n            @Override\n            protected void onUpdateComplete(int token, Object cookie, int result) {\n                //code to handle the update operation...\n            }\n\n            @Override\n            protected void onInsertComplete(int token, Object cookie, Uri uri) {\n                //code to handle the insert operation...\n            }\n\n            @Override\n            protected void onQueryComplete(int token, Object cookie, Cursor cursor) {\n                //code to handle the query operation...\n            }\n        };\n        asyncQueryHandler.startQuery(1, null,\n                contentUri,\n                projection,\n                selectionClause,\n                selectionArgs,\n                sortOrder);\n    }\n}\n```", "```kt\nTimer timer = new Timer();\ntimer.scheduleAtFixedRate(new TimerTask() {\n\n    @Override\n    public void run() {\n        //code...\n    }\n}, delay, period);\n```", "```kt\nScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\nexecutorService.scheduleAtFixedRate(new Runnable() {\n\n    @Override\n    public void run() {\n        //code...\n    }\n}, delay, period, TimeUnit.SECONDS);\n```", "```kt\nAlarmManager alarmManager = (AlarmManager) getSystemService(Activity.ALARM_SERVICE);\nIntent intent = new Intent();\n//intent preparation...\nPendingIntent pendingIntent = PendingIntent.getBroadcast(this, 0, intent, 0);\nalarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME, intervalMillis, pendingIntent);\n```", "```kt\nif (BuildConfig.DEBUG) {\n    StrictMode.VmPolicy policy = new StrictMode.VmPolicy.Builder()\n            .detectAll()\n            .penaltyLog()\n            .build();\n    StrictMode.setVmPolicy(policy);\n}\n```"]