["```kt\n    import flash.display.Sprite;\n    import flash.display.Stage;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.system.Capabilities;\n    import flash.system.TouchscreenType;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Keyboard;\n    import flash.ui.KeyboardType;\n    import flash.ui.Mouse;\n\n    ```", "```kt\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 32;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0x333333;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function checkInputTypes():void {\n    traceField.appendText(\"Touch Screen Type: \" + flash.system.Capabilities.touchscreenType + \"\\n\");\n    traceField.appendText(\"Mouse Cursor: \" + flash.ui.Mouse. supportsCursor + \"\\n\");\n    traceField.appendText(\"Physical Keyboard Type: \" + flash. ui.Keyboard.physicalKeyboardType + \"\\n\");\n    traceField.appendText(\"Virtual Keyboard: \" + flash.ui.Keyboard. hasVirtualKeyboard + \"\\n\");\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Multitouch;\n\n    ```", "```kt\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 44;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0x333333;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function checkMultitouch():void {\n    traceField.appendText(String(\"Gestures: \" + Multitouch.supportsGestureEvents) + \"\\n\");\n    traceField.appendText(String(\"Touch: \" + Multitouch.supportsTouchEvents));\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 44;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0x333333;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    Multitouch.inputMode = MultitouchInputMode.GESTURE;\n\n    ```", "```kt\n    var supportedGestures:Vector.<String> = Multitouch.supportedGestures;\n\n    ```", "```kt\n    for(var i:int=0; i < supportedGestures.length; ++i) {\n    trace(supportedGestures[i]);\n    }\n\n    ```", "```kt\n    protected function checkGestures():void {\n    Multitouch.inputMode = MultitouchInputMode.GESTURE;\n    if(Multitouch.supportedGestures){\n    var supportedGestures:Vector.<String> = Multitouch.supportedGestures;\n    for(var i:int=0; i <supportedGestures.length; ++i) {\n    traceField.appendText(supportedGestures[i] + \"\\n\");\n    }\n    }else{\n    traceField.appendText(\"no gesture support!\");\n    }\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.display.Shape;\n    import flash.events.TransformGestureEvent;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var box:Shape;\n\n    ```", "```kt\n    protected function setupBox():void {\n    box = new Shape();\n    box.graphics.beginFill(0xFFFFFF, 1);\n    box.x = stage.stageWidth/2;\n    box.y = stage.stageHeight/2;\n    box.graphics.drawRect(-150,-150,300,300);\n    box.graphics.endFill();\n    addChild(box);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.GESTURE;\n    stage.addEventListener(TransformGestureEvent. GESTURE_ZOOM, onZoom);\n    }\n\n    ```", "```kt\n    protected function onZoom(e:TransformGestureEvent):void {\n    box.scaleX *= e.scaleX;\n    box.scaleY *= e.scaleY;\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.display.Shape;\n    import flash.events.TransformGestureEvent;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var box:Shape;\n\n    ```", "```kt\n    protected function setupBox():void {\n    box = new Shape();\n    box.graphics.beginFill(0xFFFFFF, 1);\n    box.x = stage.stageWidth/2;\n    box.y = stage.stageHeight/2;\n    box.graphics.drawRect(-150,-150,300,300);\n    box.graphics.endFill();\n    box.graphics.lineStyle(10, 0x440000, 1);\n    box.graphics.moveTo(0, -800);\n    box.graphics.lineTo(0, 800);\n    box.graphics.moveTo(-800, 0);\n    box.graphics.lineTo(800, 0);\n    addChild(box);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.GESTURE;\n    stage.addEventListener(TransformGestureEvent. GESTURE_PAN, onPan);\n    }\n\n    ```", "```kt\n    protected function onPan(e:TransformGestureEvent):void {\n    box.x += e.offsetX;\n    box.y += e.offsetY;\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.display.Shape;\n    import flash.events.TransformGestureEvent;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var box:Shape;\n\n    ```", "```kt\n    protected function setupBox():void {\n    box = new Shape();\n    box.graphics.beginFill(0xFFFFFF, 1);\n    box.x = stage.stageWidth/2;\n    box.y = stage.stageHeight/2;\n    box.graphics.drawRect(-150,-150,300,300);\n    box.graphics.endFill();\n    addChild(box);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.GESTURE;\n    stage.addEventListener(TransformGestureEvent. GESTURE_SWIPE, onSwipe);\n    }\n\n    ```", "```kt\n    protected function onSwipe(e:TransformGestureEvent):void {\n    switch(e.offsetX){\n    case 1:{\n    box.x = stage.stageWidth - (box.width/2);\n    break;\n    }\n    case -1:{\n    box.x = box.width/2;\n    break;\n    }\n    }\n    switch(e.offsetY){\n    case 1:{\n    box.y = stage.stageHeight - (box.height/2);\n    break;\n    }\n    case -1:{\n    box.y = box.height/2;\n    break;\n    }\n    }\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.display.Shape;\n    import flash.events.TransformGestureEvent;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var box:Shape;\n\n    ```", "```kt\n    protected function setupBox():void {\n    box = new Shape();\n    box.graphics.beginFill(0xFFFFFF, 1);\n    box.x = stage.stageWidth/2;\n    box.y = stage.stageHeight/2;\n    box.graphics.drawRect(-150,-150,300,300);\n    box.graphics.endFill();\n    addChild(box);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.GESTURE; stage.addEventListener(TransformGestureEvent.GESTURE_ROTATE, onRotate);\n    }\n\n    ```", "```kt\n    protected function onRotate(e:TransformGestureEvent):void {\n    box.rotation += e.rotation;\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.events.TouchEvent;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 44;\n    traceFormat.align = \"left\";\n    traceFormat.color = 0x333333;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\n    stage.addEventListener(TouchEvent.TOUCH_MOVE, touchMove);\n    stage.addEventListener(TouchEvent.TOUCH_END, touchEnd);\n    }\n\n    ```", "```kt\n    protected function touchEnd(e:TouchEvent):void {\n    traceField.text = \"\";\n    }\n\n    ```", "```kt\n    protected function touchMove(e:TouchEvent):void {\n    traceField.text = \"\";\n    traceField.appendText(\"Primary: \" + e.isPrimaryTouchPoint + \"\\n\");\n    traceField.appendText(\"LocalX: \" + e.localX + \"\\n\");\n    traceField.appendText(\"LocalY: \" + e.localY + \"\\n\");\n    traceField.appendText(\"Pressure: \" + e.pressure + \"\\n\");\n    traceField.appendText(\"SizeX: \" + e.sizeX + \"\\n\");\n    traceField.appendText(\"SizeY: \" + e.sizeY + \"\\n\");\n    traceField.appendText(\"StageX: \" + e.stageX + \"\\n\");\n    traceField.appendText(\"StageY: \" + e.stageY + \"\\n\");\n    traceField.appendText(\"TPID: \" + e.touchPointID + \"\\n\");\n    }\n\n    ```", "```kt\n    import flash.display.Shape;\n    import flash.display.Sprite;\n    import flash.display.Stage;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.TouchEvent;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    private var drawArea:Shape;\n    private var trackBeginObject:Object;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 32;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0x333333;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function setupDrawArea():void {\n    drawArea = new Shape();\n    addChild(drawArea);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\n    trackBeginObject = new Object();\n    stage.addEventListener(TouchEvent.TOUCH_BEGIN, touchBegin);\n    stage.addEventListener(TouchEvent.TOUCH_MOVE, touchMove);\n    stage.addEventListener(TouchEvent.TOUCH_END, touchEnd);\n    }\n\n    ```", "```kt\n    protected function touchBegin(e:TouchEvent):void {\n    if(e.isPrimaryTouchPoint){\n    drawArea.graphics.clear();\n    drawArea.graphics.lineStyle(20, 0xFFFFFF, 0.8);\n    trackBeginObject.x = e.stageX;\n    trackBeginObject.y = e.stageY;\n    drawArea.graphics.moveTo(e.stageX, e.stageY);\n    }\n    }\n\n    ```", "```kt\n    protected function touchMove(e:TouchEvent):void {\n    if(e.isPrimaryTouchPoint){\n    drawArea.graphics.lineTo(e.stageX, e.stageY);\n    }\n    }\n\n    ```", "```kt\n    protected function touchEnd(e:TouchEvent):void {\n    if(e.isPrimaryTouchPoint){\n    if(e.stageX > trackBeginObject.x && e.stageY > trackBeginObject.y){\n    traceField.text = \"Diagonal Gesture: TL -> BR\";\n    }elseif(e.stageX < trackBeginObject.x && e.stageY > trackBeginObject.y){\n    traceField.text = \"Diagonal Gesture: TR -> BL\";\n    }elseif(e.stageX < trackBeginObject.x && e.stageY < trackBeginObject.y){\n    traceField.text = \"Diagonal Gesture: BR -> TL\";\n    }elseif(e.stageX > trackBeginObject.x && e.stageY < trackBeginObject.y){\n    traceField.text = \"Diagonal Gesture: BL -> TR\";\n    }\n    }\n    }\n\n    ```", "```kt\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.Stage;\n    import flash.display.Sprite;\n    import flash.events.TimerEvent;\n    import flash.events.TouchEvent;\n    import flash.geom.Rectangle;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n    import flash.utils.Timer;\n\n    ```", "```kt\n    private var box:Sprite;\n    private var lpTimer:Timer;\n\n    ```", "```kt\n    protected function setupTimer():void {\n    lpTimer = new Timer(1000,1);\n    lpTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timerEnd);\n    }\n\n    ```", "```kt\n    protected function setupBox():void {\n    box = new Sprite();\n    box.graphics.beginFill(0xFFFFFF, 1);\n    box.x = stage.stageWidth/2;\n    box.y = stage.stageHeight/2;\n    box.graphics.drawRect(-100,-100,200,200);\n    box.graphics.endFill();\n    addChild(box);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\n    box.addEventListener(TouchEvent.TOUCH_BEGIN, touchBegin);\n    box.addEventListener(TouchEvent.TOUCH_END, touchEnd);\n    box.addEventListener(TouchEvent.TOUCH_OUT, touchEnd);\n    box.addEventListener(TouchEvent.TOUCH_ROLL_OUT, touchEnd);\n    }\n\n    ```", "```kt\n    protected function touchBegin(e:TouchEvent):void {\n    box.scaleX += 0.1;\n    box.scaleY += 0.1;\n    box.alpha = 0.8;\n    lpTimer.start();\n    }\n\n    ```", "```kt\n    protected function timerEnd(e:TimerEvent):void {\n    var dragBounds:Rectangle = new Rectangle(box.width/2, box.height/2, stage.stageWidth-box.width, stage.stageHeight-box.height);\n    box.startDrag(true, dragBounds);\n    }\n\n    ```", "```kt\n    protected function touchEnd(e:TouchEvent):void {\n    lpTimer.stop();\n    box.stopDrag();\n    box.scaleX = 1;\n    box.scaleY = 1;\n    box.alpha = 1;\n    }\n\n    ```", "```kt\n    import flash.display.Sprite;\n    import flash.display.Stage;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.SoftKeyboardEvent;\n    import flash.events.TouchEvent;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Multitouch;\n    import flash.ui.MultitouchInputMode;\n\n    ```", "```kt\n    private var tapBox:Sprite;\n    private var tapBoxField:TextField;\n    private var tapBoxFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupBox():void {\n    tapBox = new Sprite();\n    tapBox.graphics.beginFill(0xFFFFFF, 1);\n    tapBox.x = stage.stageWidth/2;\n    tapBox.y = stage.stageHeight/2 - 200;\n    tapBox.graphics.drawRect(-200,-100,400,160);\n    tapBox.graphics.endFill();\n    tapBoxFormat = new TextFormat();\n    tapBoxFormat.bold = true;\n    tapBoxFormat.font = \"_sans\";\n    tapBoxFormat.size = 42;\n    tapBoxFormat.align = \"center\";\n    tapBoxFormat.color = 0x333333;\n    tapBoxField = new TextField();\n    tapBoxField.defaultTextFormat = tapBoxFormat;\n    tapBoxField.selectable = false;\n    tapBoxField.mouseEnabled = false;\n    tapBoxField.multiline = true;\n    tapBoxField.wordWrap = true;\n    tapBoxField.width = tapBox.width;\n    tapBoxField.height = tapBox.height;\n    tapBoxField.x = -200;\n    tapBoxField.y = -80;\n    tapBoxField.text = \"Tap to Toggle Virtual Keyboard\";\n    tapBox.addChild(tapBoxField);\n    addChild(tapBox);\n    }\n\n    ```", "```kt\n    protected function setupTouchEvents():void {\n    Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\n    tapBox.needsSoftKeyboard = true;\n    tapBox.addEventListener(TouchEvent.TOUCH_TAP, touchTap);\n    tapBox.addEventListener (SoftKeyboardEvent. SOFT_KEYBOARD_ACTIVATING, vkActivating);\n    tapBox.addEventListener(SoftKeyboardEvent. SOFT_KEYBOARD_ACTIVATE, vkActivate);\n    tapBox.addEventListener(SoftKeyboardEvent. SOFT_KEYBOARD_DEACTIVATE, vkDeactivate);\n    }\n\n    ```", "```kt\n    protected function vkActivating(e:SoftKeyboardEvent):void {\n    trace(\"Virtual Keyboard ACTIVATING\");\n    }\n    protected function vkActivate(e:SoftKeyboardEvent):void {\n    trace(\"Virtual Keyboard ACTIVATED\");\n    }\n    protected function vkDeactivate(e:SoftKeyboardEvent):void {\n    trace(\"Virtual Keyboard DEACTIVATED\");\n    }\n\n    ```", "```kt\n    protected function touchTap(e:TouchEvent):void {\n    if(tapBox.needsSoftKeyboard == true){\n    tapBox.requestSoftKeyboard();\n    tapBoxField.text = \"Virtual Keyboard is Up\";\n    tapBox.needsSoftKeyboard = false;\n    }else{\n    tapBox.needsSoftKeyboard = true;\n    tapBoxField.text = \"Virtual Keyboard is Down\";\n    }\n    }\n\n    ```", "```kt\n    import flash.display.Sprite;\n    import flash.display.Stage;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.KeyboardEvent;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Keyboard;\n\n    ```", "```kt\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 32;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0x333333;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function registerListeners():void {\n    stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);\n    }\n\n    ```", "```kt\n    protected function keyDown(e:KeyboardEvent):void {\n    var key:uint = e.keyCode;\n    traceField.text = key + \" pressed!\\n\";\n    switch(key){\n    case Keyboard.BACK:{\n    e.preventDefault();\n    traceField.appendText(\"Keyboard.BACK\");\n    break;\n    }\n    case Keyboard.MENU:{\n    traceField.appendText(\"Keyboard.MENU\");\n    break;\n    }\n    case Keyboard.SEARCH:{\n    traceField.appendText(\"Keyboard.SEARCH\");\n    break;\n    }\n    }\n    }\n\n    ```", "```kt\n    import flash.display.Shape;\n    import flash.display.Sprite;\n    import flash.display.Stage;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n    import flash.events.KeyboardEvent;\n    import flash.text.TextField;\n    import flash.text.TextFormat;\n    import flash.ui.Keyboard;\n\n    ```", "```kt\n    private var traceField:TextField;\n    private var traceFormat:TextFormat;\n    private var box:Shape;\n\n    ```", "```kt\n    protected function setupTextField():void {\n    traceFormat = new TextFormat();\n    traceFormat.bold = true;\n    traceFormat.font = \"_sans\";\n    traceFormat.size = 32;\n    traceFormat.align = \"center\";\n    traceFormat.color = 0x333333;\n    traceField = new TextField();\n    traceField.defaultTextFormat = traceFormat;\n    traceField.selectable = false;\n    traceField.mouseEnabled = false;\n    traceField.width = stage.stageWidth;\n    traceField.height = stage.stageHeight;\n    addChild(traceField);\n    }\n\n    ```", "```kt\n    protected function setupBox():void {\n    box = new Shape();\n    box.graphics.beginFill(0xFFFFFF, 1);\n    box.x = stage.stageWidth/2;\n    box.y = stage.stageHeight/2;\n    box.graphics.drawRect(-100,-100,200,200);\n    box.graphics.endFill();\n    addChild(box);\n    }\n\n    ```", "```kt\n    protected function registerListeners():void {\n    stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);\n    }\n\n    ```", "```kt\n    protected function keyDown(e:KeyboardEvent):void {\n    var key:uint = e.keyCode;\n    traceField.text = key + \" pressed!\";\n    switch(key){\n    case Keyboard.UP:{\n    box.y -= 20;\n    break;\n    }\n    case Keyboard.DOWN:{\n    box.y += 20;\n    break;\n    }\n    case Keyboard.LEFT:{\n    box.x -= 20;\n    break;\n    }\n    case Keyboard.RIGHT:{\n    box.x += 20;\n    break;\n    }\n    case Keyboard.ENTER:{\n    box.x = stage.stageWidth/2;\n    box.y = stage.stageHeight/2;\n    break;\n    }\n    }\n    }\n\n    ```"]