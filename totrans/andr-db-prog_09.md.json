["```kt\npublic void stockScraper(String ticker) {\nString URL_BASE = \"http://finance.yahoo.com/q?s=\";\nString STOCK_URL = URL_BASE + ticker;\n// CONTINUE SCRAPING STOCK_URL\n}\n\n```", "```kt\npublic class HTMLNavigator {\n// STEP 1 - GET THE URL'S SOURCE CODE\npublic static CharSequence navigateAndGetContents(String url_str) throws IOException {\nURL url = new URL(url_str);\n// ESTABLISH CONNECTION TO URL\nURLConnection conn = url.openConnection();\nconn.setConnectTimeout(30000);\nString encoding = conn.getContentEncoding();\nif (encoding == null) {\nencoding = \"ISO-8859-1\";\n}\n// WRAP BUFFERED READER AROUND INPUT STREAM\nBufferedReader br = new BufferedReader (new InputStreamReader(conn.getInputStream(), encoding));\nStringBuilder sb = new StringBuilder();\ntry {\nString line;\nwhile ((line = br.readLine()) != null) {\nsb.append(line);\nsb.append('\\n');\n}\n} finally {\nbr.close();\n}\nreturn sb;\n}\n}\n\n```", "```kt\nimport org.htmlcleaner.CleanerProperties;\nimport org.htmlcleaner.HtmlCleaner;\nimport org.htmlcleaner.TagNode;\nimport org.htmlcleaner.XPatherException;\nimport app.helpers.HTMLNavigator;\nimport app.types.VideoGame;\npublic class VideoGameScraper {\nprivate static String content;\nprivate static final String BASE_URL = \"http://www.blockbuster.com/\ngames/platforms/gamePlatform\";\n/**\n* QUERY FOR GAMES OF CERTAIN PLATFORM\n*\n* @param type\n* the platform type\n* @return\n* @throws IOException\n* @throws XPatherException\n*/\npublic static List<VideoGame> getVideoGamesByConsole(String type) throws IOException, XPatherException {\n// CONSTRUCT FULL URL\nString query = BASE_URL + type;\n// STEPS 1 + 2 - GET AND CLEAN THE DYNAMIC URL\nTagNode node = getAndCleanHTML(query);\n// STEP 3 - PARSE AND ADD GAMES\nList<VideoGame> games = new ArrayList<VideoGame>();\n. . .\nreturn games;\n}\n/**\n* CLEAN AND STRUCTURE THE PASSED IN HTML\n*\n* @param result\n* the underlying html\n* @return\n* @throws IOException\n*/\nprivate static TagNode getAndCleanHTML(String result) throws IOException {\nString content = HTMLNavigator.navigateAndGetContents(result). toString();\nVideoGameScraper.content = content;\n// USE HTMLCLEANER TO STRUCTURE HTML\nHtmlCleaner cleaner = new HtmlCleaner();\nCleanerProperties props = cleaner.getProperties();\nprops.setOmitDoctypeDeclaration(true);\nreturn cleaner.clean(content);\n}\n.\n.\n.\n}\n\n```", "```kt\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html lang=\"en\" xml:lang=\"en\" >\n<head>\n<body class=\"full\">\n<script type=\"text/javascript\">\n<div class=\"body clearDiv\">\n<div id=\"pageMask\">&nbsp;</div>\n<div id=\"boxPopup\">&nbsp;</div>\n<div id=\"head\" class=\"head\">\n<style type=\"text/css\">\n<div>\n<div id=\"gamesNav\" class=\"secondaryNav\">\n<script type=\"text/javascript\" language=\"javascript\">\n<div class=\"page clearDiv\">\n<div class=\"main contentsMain clearDiv\">\n<div class=\"primary clearDiv\">\n<span class=\"contentsDM\"></span>\n<span class=\"contentsLB\"></span>\n<img align=\"right\" src=\"img/gameXboxOrig.gif\" alt=\"Xbox Games\">\n<h1>Action &amp; Adventure Video Games</h1>\n<div class=\"pagination\">\n<div class=\"gb6 listViewHeader\">\n<div class=\"\">\n<div id=\"4453\" class=\"addToQueueEligible game sizeb gb6 bvr-gamelistitem \">\n<mkt marketingitemid=\"4453\" catalystinfo=\"A\" listname=\"gameActionAdventure\"></mkt>\n<a onmouseover=\"if(DndUtil.windowLoaded){ new GameRollover(this); }\" href=\"http:///games/catalog/gameDetails/4136\" title=\"Superman Returns: The Video Game\">\n<img class=\"box\" height=\"143\" width=\"100\" src=\"img/g25653wauzo. jpg?wid=100&hei=143\">\n</a>\n<div class=\"details\">\n<h4>\n<a onmouseover=\"if(DndUtil.windowLoaded){new GameRollover(this);}\" href=\"http:///games/catalog/gameDetails/4136\" title=\"Superman Returns: The Video Game\">Superman Returns: The Video Game</a>\n</h4>\n<dl class=\"release\">\n<dl class=\"rated\">\n<div class=\"platform\">\n<dl class=\"movieInfo\">\n<div class=\"summary \">\n<p class=\"readMore\">\n<div class=\"rolloverDetailsDiv\" contentsrc=\"img/false\">&nbsp;</div>\n</div>\n<div class=\"movieOptions\">\n<div id=\"movieRating\" class=\"ratingWidget\">\n</div>\n</div>\n...\n\n```", "```kt\n//div[@class='addToQueueEligible game sizeb gb6 brv-gamelistitem']/a[1]\n//div[@class='addToQueueEligible game sizeb gb6 brv-gamelistitem']/a[1]/img\n\n```", "```kt\nimport org.htmlcleaner.CleanerProperties;\nimport org.htmlcleaner.HtmlCleaner;\nimport org.htmlcleaner.TagNode;\nimport org.htmlcleaner.XPatherException;\nimport app.helpers.HTMLNavigator;\nimport app.types.VideoGame;\npublic class VideoGameScraper {\nprivate static String content;\n// XPATH FOR GETTING TITLE NAMES\nprivate static String TITLE_EXPR = \"//div[@class='%s']/a[1]\";\n// XPATH FOR GETTING IMAGE URLS\nprivate static String IMG_EXPR = \"//div[@class='%s']/a[1]/img\";\n// BASE OF BLOCKBUSTER URL\npublic static final String BASE_URL = \"http://www.blockbuster.com/ games/platforms/gamePlatform\";\n/**\n* QUERY FOR GAMES OF CERTAIN PLATFORM\n*\n* @param type\n* the platform type\n* @return\n* @throws IOException\n* @throws XPatherException\n*/\npublic static List<VideoGame> getVideoGamesByConsole(String type) throws IOException, XPatherException {\n// CONSTRUCT FULL URL\nString query = BASE_URL + type;\n// USE HTMLCLEANER TO STRUCTURE HTML\nTagNode node = getAndCleanHTML(query);\n// ADD GAMES\nList<VideoGame> games = new ArrayList<VideoGame>();\ngames.addAll(grabGamesWithTag(node, \"addToQueueEligible game sizeb gb6 bvr-gamelistitem \", type));\nreturn games;\n}\n/**\n* GIVEN THE STRUCTURED HTML, PARSE OUT NODES OF THE PASSED IN TAG\n*\n* @param head\n* the head of the structured html\n* @param tag\n* the tag we are looking for\n* @param type\n* the platform type\n* @return\n* @throws XPatherException\n*/\nprivate static List<VideoGame> grabGamesWithTag(TagNode head, String tag, String type) throws XPatherException {\n// RUN VIDEO GAME TITLE AND IMAGE XPATHS\nObject[] gameTitleNodes = head.evaluateXPath(String.format (TITLE_EXPR, tag));\nObject[] imgUrlNodes = head.evaluateXPath(String.format (IMG_EXPR, tag));\n// ITERATE THROUGH VIDEO GAMES\nList<VideoGame> games = new ArrayList<VideoGame>();\nfor (int i = 0; i < gameTitleNodes.length; i++) {\nTagNode gameTitleNode = (TagNode) gameTitleNodes[i];\nTagNode imgUrlNode = (TagNode) imgUrlNodes[i];\n// BY LOOKING AT THE HTML, WE CAN DETERMINE\n// WHICH ATTRIBUTES OF THE NODE TO PULL\nString title = gameTitleNode.getAttributeByName(\"title\");\nString imgUrl = imgUrlNode.getAttributeByName(\"src\");\n// BUILD OUR VIDEO GAME OBJECT AND ADD TO LIST\nVideoGame v = new VideoGame(title, imgUrl, type);\ngames.add(v);\n}\nreturn games;\n}\n/**\n* CLEAN AND STRUCTURE THE PASSED IN HTML\n*\n* @param result\n* the underlying html\n* @return\n* @throws IOException\n*/\nprivate static TagNode getAndCleanHTML(String result) throws IOException {\n. . .\n}\n}\n\n```", "```kt\nObject[] gameTitleNodes = head.evaluateXPath(String.format (TITLE_EXPR, tag));\n\n```", "```kt\n// ITERATE THROUGH VIDEO GAMES\nList<VideoGame> games = new ArrayList<VideoGame>();\nfor (int i = 0; i < gameTitleNodes.length; i++) {\nTagNode gameTitleNode = (TagNode) gameTitleNodes[i];\nTagNode imgUrlNode = (TagNode) imgUrlNodes[i];\n// BY LOOKING AT THE HTML, WE CAN DETERMINE\n// WHICH ATTRIBUTES OF THE NODE TO PULL\nString title = gameTitleNode.getAttributeByName(\"title\");\nString imgUrl = imgUrlNode.getAttributeByName(\"src\");\n// BUILD OUR VIDEO GAME OBJECT AND ADD TO LIST\nVideoGame v = new VideoGame(title, imgUrl, type);\ngames.add(v);\n}\n\n```", "```kt\nList<VideoGame> games = new ArrayList<VideoGame>();\nfor (int i = 0; i < gameTitleNodes.length; i++) {\nTagNode gameTitleNode = (TagNode) gameTitleNodes[i];\nTagNode imgUrlNode = (TagNode) imgUrlNodes[i];\nString title = gameTitleNode.getText().toString();\nString imgUrl = imgUrlNode.getAttributeByName(\"src\");\n// BUILD OUR VIDEO GAME OBJECT AND ADD TO LIST\nVideoGame v = new VideoGame(title, imgUrl, type);\ngames.add(v);\n}\n\n```", "```kt\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n// EXTEND THE HTTPSERVLET CLASS TO MAKE THIS METHOD AVAILABLE\n// TO EXTERNAL WEB REQUESTS, NAMELY CLIENTS AND CRON JOBS\npublic class VideoGameScrapeServlet extends HttpServlet {\nprivate ArrayList<VideoGame> games;\n/**\n* METHOD THAT IS HIT WHEN HTTP GET REQUEST IS MADE\n*\n* @param request\n* a servlet request object (any params passed can be retrieved\n* with this)\n* @param response\n* a servlet response that you can embed data back to user\n* @throws IOException\n* @throws ServletException\n*/\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\ngames = new ArrayList<VideoGame>();\nString message = \"Success\";\ntry {\n// GRAB GAMES FROM ALL PLATFORMS\ngames.addAll(\nVideoGameScraper.getVideoGamesByConsole(VideoGameConsole.DS));\ngames.addAll(\nVideoGameScraper.getVideoGamesByConsole(VideoGameConsole.PS2));\ngames.addAll(\nVideoGameScraper.getVideoGamesByConsole(VideoGameConsole.PS3));\ngames.addAll(\nVideoGameScraper.getVideoGamesByConsole(VideoGameConsole.PSP));\ngames.addAll(\nVideoGameScraper.getVideoGamesByConsole(VideoGameConsole.WII));\ngames.addAll(\nVideoGameScraper.getVideoGamesByConsole(VideoGameConsole.XBOX));\n} catch (Exception e) {\ne.printStackTrace();\nmessage = \"Failed\";\n}\n// HERE WE ADD ALL GAMES TO OUR VIDEOGAME JDO WRAPPER\nVideoGameJDOWrapper.batchInsertGames(games);\n// WRITE A RESPONSE BACK TO ORIGINAL HTTP REQUESTER\nresponse.setContentType(\"text/html\");\nresponse.setHeader(\"Cache-Control\", \"no-cache\");\nresponse.getWriter().write(message);\n}\n}\n\n```", "```kt\nhttp://{your-GAE-base-url}.appspot.com/videoGameScrapeServlet?type =Xbox\n\n```", "```kt\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\nString type = request.getParameter(\"type\");\ngames = new ArrayList<VideoGame>();\nString message = \"Success\";\ntry {\n// GRAB GAMES FROM SPECIFIC PLATFORM\ngames.addAll(VideoGameScraper.getVideoGamesByConsole(type));\n} catch (Exception e) {\ne.printStackTrace();\nmessage = \"Failed\";\n}\n// ADD GAMES TO JDO DATABASE\nVideoGameJDOWrapper.batchInsertGames(games);\n// WRITE A RESPONSE BACK TO ORIGINAL HTTP REQUESTER\nresponse.setContentType(\"text/html\");\nresponse.setHeader(\"Cache-Control\", \"no-cache\");\nresponse.getWriter().write(message);\n}\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<web-app  version=\"2.5\">\n<servlet>\n<servlet-name>videoGameScrapeServlet</servlet-name>\n<servlet-class>app.httpservlets.VideoGameScrapeServlet</servlet-class>\n</servlet>\n<servlet-mapping>\n<servlet-name>videoGameScrapeServlet</servlet-name>\n<url-pattern>/videoGameScrapeServlet</url-pattern>\n</servlet-mapping>\n</web-app>\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<cronentries>\n<cron>\n<url>/videoGameScrapeServlet</url>\n<description>Scrape video games from Blockbuster</description>\n<schedule>every day 00:50</schedule>\n<timezone>America/Los_Angeles</timezone>\n</cron>\n</cronentries>\n\n```", "```kt\nevery 12 hours\nevery 5 minutes from 10:00 to 14:00\n2nd,third mon,wed,thu of march 17:00\nevery monday 09:00\n1st monday of sep,oct,nov 17:00\nevery day 00:00\n\n```"]