- en: Chapter 8. Optimizing Battery Consumption
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章. 优化电池消耗
- en: Battery consumption and usage are a crucial part of developing high-performance
    applications in a mobile platform. Whereas in a desktop we do not need to particularly
    care about the amount of energy being used, since there is a permanent connection
    to a source of energy, in mobile devices the situation is different and we need
    to keep an eye on this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 电池消耗和使用是开发高性能移动平台应用程序的关键部分。在桌面上，我们不需要特别关心使用的能量量，因为有一个永久的能源连接，但在移动设备上情况不同，我们需要关注这一点。
- en: A battery lasts on average on a mobile device up to 36 hours and this time span
    decreases as the phone starts getting older. This is a particularly reduced amount
    of time, which makes our devices dependent on being close to an electricity source.
    Whereas Moore's law is almost still being accomplished and the processing power/unit
    cost relationship is roughly doubled every 18 months, the improvement speed in
    battery technology is always stepping forward on the order of 5% each year. There
    is some ongoing research with supercapacitors and this is the most promising hope
    for the near future, but we are approaching the theoretical limit of electrochemistry.
    Either way, it seems like battery restrictions are here to stay with us, and learning
    to deal and operate with them seems like the wisest thing to do.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动设备上，电池平均可以使用高达36小时，而这个时间随着手机变旧而减少。这是一个特别短的时间，使得我们的设备依赖于接近电源。尽管摩尔定律几乎仍然在实现中，处理能力/单位成本的关系大约每18个月翻一番，但电池技术的改进速度每年大约提高5%。目前有一些关于超级电容器的持续研究，这是近期最有望的希望，但我们正在接近电化学的理论极限。无论如何，电池限制似乎将与我们同在，学习如何处理和操作它们似乎是最明智的做法。
- en: Battery drains are a frequent cause of user dissatisfaction and generally turn
    into bad reviews of our application on Google Play Store. It is said that "good
    things are written in sand, whereas bad ones are written in stone." If your application
    is continuously draining device resources, it will end up uninstalled and contributing
    to a bad online fingerprint. We do not know if the user will leave you a good
    fingerprint in the sand by using the battery and energy responsibly, but we know
    that the user will be happier and you will contribute to a healthier ecosystem
    of applications by following the indications provided in this chapter about battery
    usage.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 电池耗尽是用户不满的常见原因，通常会导致我们的应用程序在谷歌Play商店得到差评。据说“好事写在沙子上，而坏事刻在石头上。”如果你的应用程序持续耗尽设备资源，最终会被卸载，导致不良的在线印象。我们不知道用户是否会通过负责任地使用电池和能源，在沙子上留下好的印象，但我们知道，通过遵循本章关于电池使用的指示，用户会更快乐，你将为更健康的应用程序生态系统做出贡献。
- en: Analysis
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: 'Before we start to find a solution to a problem, we need to perform an analysis
    step. In your Android device head to **Settings** and then click on **Battery**.
    A screen similar to the following will open:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始寻找问题的解决方案之前，需要进行一步分析。在你的安卓设备上，前往**设置**，然后点击**电池**。会出现一个类似下图的界面：
- en: '![Analysis](img/4666_08_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![分析](img/4666_08_01.jpg)'
- en: 'This is a helpful analysis tool to determine which application(s) is (are)
    making an incorrect or excessive usage of the battery. The first section, **Battery
    mode**, contains three different modes to use with the battery:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有用的分析工具，用于确定哪个应用程序正在错误或过度地使用电池。第一部分，**电池模式**，包含三种不同的电池使用模式：
- en: '**Power safe**: This mode understands that your device does not have a pressing
    need to economize on battery use. Therefore, its usage will not be reduced.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**省电模式**：此模式理解你的设备没有迫切需要节省电池使用。因此，其使用量不会减少。'
- en: '**Balanced**: An intermediate level, activated by default.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平衡**：默认激活的中间级别。'
- en: '**Performance**: This level activates a scarcity mode in your device. The battery
    will last for less time, at the cost of energy performance.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：此级别在你的设备上激活一种稀缺模式。电池的使用时间会更短，以牺牲能源性能为代价。'
- en: 'The next section, battery usage, can help us determine what the status of the
    device was in the last 24 hours. Let''s click on it in order to display the next
    screen:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分，电池使用情况，可以帮助我们确定设备在过去24小时的状态。让我们点击它以显示下一个屏幕：
- en: '![Analysis](img/4666_08_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![分析](img/4666_08_02.jpg)'
- en: 'This screen already contains very useful information. In it, we can see a graph
    with the evolution of the battery level in the previous 24 hours and a prediction
    for the upcoming hours based on the previous performance. More interesting are
    the colored bars at the bottom of the graph: they represent graphically which
    components of the device were at that moment active: the mobile network signal,
    the GPS, the Wi-Fi, if the device was awake or not, if the screen was on or not,
    and whether the device was charging. This is particularly useful to debug third-party
    applications when we do not have access to the source code, and analyze whether
    they often start a component we do not require.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕已经包含了一些非常有用的信息。我们可以看到过去24小时内电池电量的变化图表以及根据之前性能预测的接下来几小时的情况。更有趣的是图表底部的彩色条：它们以图形方式表示设备在那一刻哪些组件是活跃的：移动网络信号、GPS、Wi-Fi、设备是否唤醒、屏幕是否开启以及设备是否在充电。这对于调试我们没有源代码访问权限的第三方应用程序特别有用，分析它们是否经常启动我们不需要的组件。
- en: 'The last section shows a comprehensive list of the applications installed on
    the device. If we click on a concrete application, a new screen with detailed
    information will be displayed:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上一部分展示了设备上安装的应用程序的全面列表。如果我们点击一个具体的应用程序，将会显示一个带有详细信息的新屏幕：
- en: '![Analysis](img/4666_08_03.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![分析](img/4666_08_03.jpg)'
- en: This screen includes all the detailed usage of the application, which, again,
    provides us with useful information for analysis. Is the application consuming
    much data? Is it keeping the device awake for a long period of time? How many
    CPU calculations are being performed? Based on this information, we can proceed
    to determine action points.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕包含了应用程序的所有详细使用情况，这为我们分析提供了有用的信息。应用程序是否消耗大量数据？它是否让设备长时间保持唤醒状态？执行了多少CPU计算？根据这些信息，我们可以确定行动点。
- en: Monitoring battery level and charging status
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监测电池电量和充电状态
- en: 'Our device performs continuous background operations that are battery-consuming:
    updates from the network, GPS requests, or computationally intense data operations.
    Based on the battery status, we might want to avoid costly operations when the
    battery is almost drained. Checking the current battery status is always a good
    place to start.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的设备执行持续的后台操作，这些操作耗电量大：网络更新、GPS请求或计算密集型数据操作。根据电池状态，我们可能想在电池快耗尽时避免昂贵的操作。检查电池当前状态始终是一个好的起点。
- en: 'In order to check the current status of the battery we need to capture an `Intent`
    that is regularly being sent by the `BatteryManager` class:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查电池的当前状态，我们需要捕获由`BatteryManager`类定期发送的`Intent`：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When this intent has been retrieved, we can inquire whether the device is being
    charged or not:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当获取到这个意图后，我们可以查询设备是否正在充电：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And if the device is being charged, it is also possible to determine if the
    charging is being conducted through the USB, or through an AC charger:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备正在充电，还可以确定充电是通过USB还是通过交流充电器进行的：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As a rule of thumb: if the device is being charged we should maximize all the
    operations to be performed, since it will not have a significant negative impact
    on the user experience. If the device has a low battery level and is not being
    charged, we should consider deactivating our computationally costly operations.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一条经验法则：如果设备正在充电，我们应该最大化所有要执行的操作，因为这不会对用户体验产生重大负面影响。如果设备电池电量低且未在充电，我们应考虑停用耗计算资源昂贵的操作。
- en: How to identify changes in the charging status
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何识别充电状态的变化
- en: 'We have seen how we can analyze the current charging status, but how can we
    react to changes? The aforementioned class, `BatteryManager`, is broadcasting
    every time the device is plugged or unplugged from a charging source. In order
    to identify it, we need to register a `BroadcastReceiver` in our manifest:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何分析当前的充电状态，但如何对变化做出反应呢？前面提到的`BatteryManager`类会在设备连接或断开充电源时进行广播。为了识别它，我们需要在清单文件中注册一个`BroadcastReceiver`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the methods that we have created previously, it is now easy to identify
    and react to any change in the charging status:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们之前创建的方法，现在可以轻松识别并响应充电状态的任何变化：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Determining and reacting to changes in the battery level
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定并响应电池电量的变化
- en: Similarly to the previous determination of the charging status, accessing the
    battery level of a device at a particular moment will be useful in order to determine
    actions to be taken on our device.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于之前确定充电状态的方法，访问设备在特定时刻的电池电量将有助于确定要在我们的设备上执行的操作。
- en: 'Accessing the element `intentBatteryStatus` that we have previously collected,
    we can inquire about our battery level with the following lines:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 访问我们之前收集的`intentBatteryStatus`元素，我们可以用以下几行来查询我们的电池电量：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The variable `batteryPercentage` contains the percentage of battery that is
    remaining on the device, as accurate as possible. Please note that there can always
    be small deviations from the real value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`batteryPercentage`包含设备上剩余的电池百分比，尽可能准确。请注意，实际值可能会有小的偏差。
- en: 'Similarly to the previous case, we can notify our application when the battery
    is running out on our device. In order to do so, we need to register the following
    `BroadcastReceiver` in our Android manifest:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的情况类似，我们可以通知我们的应用程序当设备电量不足时。为此，我们需要在Android清单中注册以下`BroadcastReceiver`：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This `BroadcastReceiver` will be triggered every time the device enters low-battery
    mode (or exits from it because it is charging).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`BroadcastReceiver`将在设备每次进入低电量模式（或因为充电而退出）时触发。
- en: The particular strategies to be taken when the battery is critical are to be
    taken by the reader. Generally, the authors of this book recommend deactivating
    non-essential operations when the battery is critical.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当电池电量危急时，具体要采取的策略由读者决定。通常，本书的作者建议在电池电量危急时关闭非必要操作。
- en: Doze feature and App Standby
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Doze模式和App待机
- en: 'Android 6.0 Marshmallow (API Version 23) introduced for the first time two
    kick-ass features to save battery levels on our devices: Doze and App Standby.
    The first one reduces battery consumption when a device has not been used for
    a long time, and the last one does the equivalent for network requests when a
    particular app has not been used for a long time.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓6.0棉花糖（API版本23）首次引入了两项强大的功能，以节省我们设备上的电池电量：Doze模式和App待机。前者在设备长时间未使用时减少电池消耗，后者在特定应用长时间未使用时对网络请求做同样处理。
- en: Understanding Doze
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解Doze模式
- en: 'Doze mode is activated by default in devices with an API bigger than level
    23\. When the device is left unplugged and without activity for a period of time,
    it will then enter into Doze mode. Entering into Doze mode has some significant
    consequences for your device:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Doze模式在API级别高于23的设备上默认激活。当设备在一段时间内未插电且无活动时，它将进入Doze模式。进入Doze模式对你的设备有一些重大影响：
- en: There will be no network operations from your device, with the exception of
    receiving a high priority message from **Google Cloud Messaging** (**GCM**)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的设备将不会有网络操作，除非接收到来自**Google Cloud Messaging（GCM）**的高优先级消息
- en: WakeLocks will be ignored
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WakeLocks将被忽略
- en: Alarm schedules with the class `AlarmManager` will be ignored
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`AlarmManager`类设置的闹钟计划将被忽略
- en: No Wi-Fi scans will be performed from your application
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的应用程序将不会执行Wi-Fi扫描
- en: No Sync Adapters or Job Schedulers will be allowed to run
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许运行Sync适配器或作业调度程序
- en: 'After reading the first point you might have thought "Then nothing prevents
    me from using GCM messages continuously, and achieving an application with high
    priority if everybody else is following this pattern?" Well, bad news: Google
    already thought of that. Dianne Hackborne already stated in her official Google
    Plus profile that all high-priority messages are sent through Google GCM servers,
    and they might be subject to monitorization. If Google realizes that a particular
    platform is abusing the system, GCM high priority messages might be stopped without
    the need to modify any software on the device. Our recommendation is: if you are
    implementing a system with high-priority GCM messages, keep the functionality
    as Google recommends it; only ping and notify important and relevant information.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完第一点后，你可能会想“那么，如果大家都遵循这种模式，没有什么能阻止我持续使用GCM消息，实现一个具有高优先级的应用程序？”坏消息是：谷歌已经考虑到了这一点。Dianne
    Hackborne在她的官方Google Plus个人资料中已经声明，所有高优先级的消息都是通过谷歌GCM服务器发送的，它们可能会受到监控。如果谷歌发现某个特定平台正在滥用系统，可能会停止GCM高优先级消息，而无需修改设备上的任何软件。我们的建议是：如果你正在实现一个带有高优先级GCM消息的系统，请按照谷歌推荐的方式保持功能；只发送和通知重要和相关信息。
- en: 'Doze mode can be deactivated for an application. In order to do so, you need
    to go to the **Settings** menu, **Battery**, and then **Battery Optimization**
    at the top-right corner of the screen. Select whether you want to optimize the
    application or not:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为应用程序关闭休眠模式。为此，你需要进入**设置**菜单，选择**电池**，然后在屏幕右上角选择**电池优化**。选择你是否想要优化应用程序：
- en: '![Understanding Doze](img/4666_08_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![理解休眠模式](img/4666_08_04.jpg)'
- en: 'We have previously mentioned that alarms will not be triggered in Doze mode.
    To help with adapting our application, Android 6.0 provides us with some extra
    functionality: the functions `setAndAllowWhileIdle()` and `setExactAndAllowWhileIdle()`.
    With these methods we can decide if a particular alarm must also be fired in Doze
    mode. We do encourage you, however, to use these methods rarely and mainly for
    debugging purposes. Doze tries to establish a pattern of low battery consumption,
    and it should be our main guide to follow it. Please note too that even using
    this method and alarm it cannot be fired more than once every 15 minutes.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，在休眠模式下闹钟不会被触发。为了帮助我们的应用程序适应，Android 6.0为我们提供了一些额外的功能：`setAndAllowWhileIdle()`和`setExactAndAllowWhileIdle()`函数。使用这些方法，我们可以决定特定的闹钟是否也应在休眠模式下触发。然而，我们鼓励你很少使用这些方法，主要用于调试目的。休眠模式试图建立一种低电池消耗的模式，我们应该以此为主要指导原则。请注意，即使使用这种方法，闹钟也不能每15分钟触发一次以上。
- en: Avoiding useless network requests
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免无用的网络请求
- en: Developers barely check the network status in the real world. Many of the alarms,
    broadcasts, and repetitive tasks we perform have to deal with an Internet connection.
    But if there is no active Internet connection, what is the purpose of performing
    all those operations? It would be more efficient to ignore all those operations
    until the Internet connection is back on track and working.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，开发者几乎不会检查网络状态。我们执行的许多闹钟、广播和重复性任务都与互联网连接有关。但是如果没有活跃的互联网连接，执行所有这些操作的意义何在？在互联网连接恢复正常工作之前，忽略所有这些操作将更为高效。
- en: 'Determining the current Internet connection can be easily done with the following
    code snippet:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码段可以轻松确定当前的互联网连接：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before performing any request, we should enable our application to check whether
    the Internet connection is active or not. This is not only a measure that contributes
    to a low-battery consumption application, but it also makes for good architecture
    and error handling in our application: it is easier to prevent performing an HTTP
    request rather than triggering it and having to deal with a time-out or any exception
    due to the lack of an active Internet connection. Any network requests should
    be deactivated by default when this is the condition on a device.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行任何请求之前，我们应该使应用程序能够检查互联网连接是否活跃。这不仅是一个有助于降低电池消耗的应用措施，而且也有利于我们应用程序的良好架构和错误处理：阻止执行HTTP请求比触发请求后不得不处理因缺乏活跃互联网连接而导致的超时或任何异常要容易得多。在设备上出现这种情况时，任何网络请求应默认被禁用。
- en: 'Another useful technique is to avoid downloading big data chunks when the Internet
    connection is not using Wi-Fi. The following snippet will let us know our current
    connection type:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的技巧是在互联网连接不是使用Wi-Fi时避免下载大量数据。以下代码段将让我们知道当前的连接类型：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can generally assume that a Wi-Fi network will always be faster than a 3G/4G
    connection. This is not an absolute truth, and we can find the opposite scenario
    is true. But as a rule of thumb, it will work in most cases. Additionally, most
    of the network operators in a majority of countries do limit their network connection
    to a certain amount of data per month, incurring additional fees or reduced speed
    if this limit is passed. You will mostly be on the safe side if costly network
    operations are performed only under Wi-Fi.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常可以假设Wi-Fi网络将始终比3G/4G连接快。这不是绝对的真理，我们可能会发现相反的情况是真实的。但作为经验法则，这在大多数情况下是有效的。此外，大多数国家的大多数网络运营商都会限制其网络连接每月使用一定量的数据，超出此限制将产生额外费用或降低速度。如果仅在Wi-Fi下执行昂贵的网络操作，你通常会处于安全的一方。
- en: 'Additionally, a check of the current Wi-Fi speed can be easily performed to
    determine whether the speed is enough to perform a download of a big data chunk:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以轻松执行当前Wi-Fi速度的检查，以确定速度是否足以下载大量数据：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There is unfortunately no direct method to check the 3G/4G speed provided natively
    by Android. Downloading some data from the Internet and then establishing the
    relationship between the time taken and the amount of data being downloaded could
    give you an approximation. This would be, however, rather an indirect method that
    also requires some bandwidth usage.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Android原生没有直接的方法来检查3G/4G的速度。从互联网上下载一些数据，然后建立下载所需时间和下载数据量之间的关系，可以给出一个近似值。然而，这将是一种间接的方法，也需要使用一些带宽。
- en: 'Similarly to our explanation in previous parts of this chapter, we can also
    notify our application if there is a sudden change of connectivity in our device
    by registering `BroadcastReceiver`. The receiver would look as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于本章前面部分所解释的内容，我们也可以通过注册`BroadcastReceiver`来通知应用程序设备连接性的突然变化。接收器如下所示：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our custom `BroadcastReceiver` would operate as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的定制`BroadcastReceiver`将按以下方式操作：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Dealing with BroadcastReceivers on demand
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按需处理BroadcastReceivers
- en: A side effect of using BroadcastReceivers is that each time one of the events
    is actually happening, the device will wake up. This means that a small amount
    of energy is not to be despised if we consider the long term.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BroadcastReceivers的一个副作用是，每次事件实际发生时，设备都会唤醒。这意味着如果我们从长远考虑，那么少量的能源也是不容忽视的。
- en: 'We can use an auxiliary technique here to make our application more efficient:
    activating or deactivating BroadcastReceivers on demand, based on the current
    status of the cell phone. That means: if, for example, the Internet connectivity
    has been lost, we might only want to wait until the Internet connection is active
    and dismiss the other BroadcastReceivers, since they will not be useful anymore.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一种辅助技术来提高应用程序的效率：根据手机当前状态按需激活或停用BroadcastReceivers。这意味着：例如，如果互联网连接已丢失，我们可能只需等待互联网连接激活，并忽略其他BroadcastReceivers，因为它们将不再有用。
- en: 'The following code snippet shows how to activate or deactivate components that
    have been defined in the `PackageManager` class programmatically:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了如何以编程方式激活或停用在`PackageManager`类中定义的组件：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Networking
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络连接
- en: In [Chapter 2](ch02.html "Chapter 2. Efficient Debugging"), *Efficient Debugging*,
    the network tool was introduced, a tool we can use to perform an analysis of the
    network traffic from our device. We explained how the network connection could
    be tagged. This ensures that the analysis can be done easily.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 高效调试")《*高效调试》中，我们引入了网络工具，这是一个可以用来执行设备网络流量的分析的实用工具。我们解释了如何标记网络连接，以确保可以轻松进行数据分析。
- en: 'The question of how to execute an interpretation of the data in the network
    tool does not have a single answer, since this interpretation lies in the different
    requirements an application may have based on its functionality and purpose. However,
    there are a few golden rules that do generally provide value to our own application
    if they are well executed:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如何执行网络工具中数据的解释没有一个单一答案，因为这种解释取决于应用程序根据其功能和目的可能具有的不同要求。但是，如果执行得当，以下几条黄金规则通常会对我们的应用程序产生价值：
- en: '**Prefetch data**: We tend to have a bias towards prefetching information and
    do this only on demand. This might be an easier solution, but in the long-term
    prefetching information can be beneficial. Perform a network analysis, and if
    you identify a situation where the data could be fetched in a previous situation
    while being beneficial for the app (for example, downloading some user-relevant
    information while on Wi-Fi, or when the application is being idle) then do give
    it a try. This also has an impact on the user experience, since information will
    be loaded faster without affecting it.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预取数据**：我们倾向于按需预取信息，这可能是更简单的解决方案。但从长远来看，预取信息可能是有益的。进行网络分析，如果你发现可以在之前的情况中获取数据，而这对于应用程序有益（例如，在Wi-Fi连接时或应用程序空闲时下载一些用户相关信息），那么不妨尝试一下。这对用户体验也有影响，因为信息将更快加载，而不会影响体验。'
- en: '**Reduce the number of connections**: Instead of performing many connections
    downloading small data, it is generally more optimal to perform a single connection
    and download a big chunk of data. Each connection being established pays for additional
    traffic, and handling different connections in a pool can increase the complexity
    of your application exponentially. This is not something that can be performed
    every time, especially if you do not have access to the web services your application
    is working with. But if you have the chance, it''s worth giving it a try and conducting
    network tests before and after.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少连接数**：通常，相比于进行多次连接以下载小块数据，执行单次连接以下载大量数据更为优化。每个建立的连接都会产生额外的流量费用，并且在连接池中处理不同连接可能会使你的应用程序复杂性呈指数级增长。这并不是每次都能执行的操作，特别是如果你无法访问你的应用程序所使用的网络服务时。但如果你有机会，值得一试，并在修改前后进行网络测试。'
- en: '**Batch and schedule**: as mentioned, processing individual requests will drain
    your battery faster. Instead, and using as few connections as possible, you could
    make use of one of the batching/scheduling APIs available for Android. These APIs
    create a schedule with your available requests and perform them all at once, saving
    precious time and energy.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批量处理和计划**：如前所述，单独处理请求会更快耗尽你的电池。相反，尽可能使用最少的连接，你可以利用Android提供的批量处理/计划API之一。这些API会创建一个包含你所有可用请求的计划，并一次性执行，从而节省宝贵的时间和能源。'
- en: Note
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**注意**'
- en: 'There are three available APIs to batch and schedule, formally: GCM Network
    Manager, Job Scheduler, and Sync Adapter. There are a few requirements and implementation
    is complex for each of them. However, Google and the authors of this book advocate
    using the first two over Sync Adapter. Sync Adapter has been available since Android
    2.0, and its implementation belongs to a different era; also, it''s complex to
    implement.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正式来说，有三个可用的批量处理和计划API：GCM网络管理器、作业调度器和同步适配器。它们各有几项要求，且每个的实现都比较复杂。然而，谷歌和本书的作者建议使用前两个而不是同步适配器。同步适配器自Android
    2.0起可用，其实现属于不同的时代；而且，它的实现也较为复杂。
- en: '**Use GCM**: It''s a well-known truism, but it does not happen that often:
    do use a push system such as GCM instead of a polling system for your application.
    Pulling data from a server is a perfect battery drainer and brings no benefits
    to your application. The complexity of implementing a push solution over pulling
    the data will pay off immediately.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用GCM**：这是一个众所周知的真理，但并不经常发生：应为你的应用程序使用如GCM这样的推送系统，而不是轮询系统。从服务器拉取数据是完美的电池杀手，对你的应用程序没有任何好处。实现推送解决方案的复杂性将立即得到回报，远胜于拉取数据。'
- en: '**Use a caching mechanism**: There are several mechanisms and libraries in
    Android to cache HTTP requests. Spice provides a good and comprehensive library,
    and the authors of this book can explicitly recommend it. However, new libraries
    and approaches rise and fall every year. Keep an eye on the latest mechanism to
    cache information, and always apply them when you can.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用缓存机制**：Android中有多项机制和库可以缓存HTTP请求。Spice提供了一个优秀且全面的库，本书的作者可以明确推荐它。然而，每年都有新的库和方法兴起和淘汰。关注最新的缓存信息机制，并且尽可能地应用它们。'
- en: '**Compress information**: Information can be compressed before being sent,
    saving an important amount of bandwidth and energy. The object `HttpUrlConnection`,
    starting from Android Gingerbread, automatically adds compression to the JSONs
    being sent with an `HttpUrlConnection` object. Always keep in mind that compressing
    information on the client, sending it to the server, and then decompressing it
    there to handle it will generally be more efficient than sending the information
    plain, without any compression.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩信息**：在发送前可以压缩信息，这样可以节省大量带宽和能源。从Android Gingerbread版本开始，`HttpUrlConnection`对象会自动为通过`HttpUrlConnection`对象发送的JSON添加压缩。请记住，在客户端压缩信息，发送到服务器后再解压处理，通常比不压缩直接发送信息更为高效。'
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'Battery performance is an exciting field that can provide many improvements
    to our application. It is widely underused, and even the most experienced developers
    dismiss it and do not take it into account. The authors of this book greatly encourage
    any developer to take as many of the actions described in this book as possible,
    and continuously check the improvement in performance and user experience from
    the application. We cannot say it often and loud enough: it pays off.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 电池性能是一个令人兴奋的领域，它可以为我们的应用程序提供许多改进。这个领域被广泛忽视，即使是经验最丰富的开发者也常常忽视它，没有加以重视。本书的作者强烈鼓励任何开发者尽可能采取本书中描述的行动，并持续检查应用程序在性能和用户体验方面的改进。我们不能经常和强烈地强调：这样做是值得的。
- en: Google has promised to put all their efforts into providing a better battery
    and energy experience, and an extended API for developers. It will not be a surprise
    if upcoming Android versions start to provide new techniques to increase battery
    lifespan and improve energy consumption. We advise the reader to keep an eye on
    future Android versions (at the time of writing, 1Q2016, there is still no fixed
    release date for Android N).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌承诺将全力以赴提供更好的电池和能源体验，并为开发者提供扩展的API。如果未来的Android版本开始提供新技术以增加电池寿命和改善能源消耗，这并不会令人惊讶。我们建议读者关注未来Android版本的发展（在撰写本文时，即2016年第一季度，Android
    N还没有固定的发布日期）。
- en: After reading this chapter, the reader should feel comfortable knowing the main
    battery and energy holes in Android development. If any of the advice provided
    here is being applied, we recommend tracking the evolution of the improvements
    over time. This can be eventually used as a good convincing argument for other
    developers on why those measures are important to apply.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章节后，读者应该能够清楚地了解Android开发中主要的电池和能源漏洞。如果这里提供的任何建议被应用，我们建议随着时间的推移跟踪改进的发展情况。这最终可以用来作为向其他开发者解释为什么这些措施重要的有力论据。
