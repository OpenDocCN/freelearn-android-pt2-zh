- en: Chapter 10. Looking into the Future
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have made it to the last chapter, congratulations! So let's have some fun
    in this chapter and try to predict the future.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile is a relatively new domain. It is in the phase of experimentation, where
    some technologies and use cases are successful while others may not get as much
    traction as expected. The focus of this chapter is to look at some technologies
    and use cases that are new to the mobile domain.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter is divided into sections where each section discusses some experimentation
    with that technology or use case in mobile. We will begin with a discussion of
    mobile commerce with a focus on the product discovery, payments, and point of
    sale using mobile devices. Proximity technologies, such as NFC, RFID, and Bluetooth
    are discussed next. The following sections will talk about the use of mobile in
    health care and authentication. In the last section, we will discuss recent advancements
    in hardware from a security perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile commerce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consumer behavior is changing commerce. These days commerce is not just a simple
    act of going to a merchant or a shop, selecting a product and paying for it. As
    illustrated in the following figure, with the emergence of new technologies mobile
    commerce includes product discovery by using geo-fencing, in-store and online
    research, payments by using self-scanning and self-checkout, sharing your purchases
    with your friends and then to managing your account. We also see a blurring line
    between online and offline commerce.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile commerce](img/5603_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next few sections, we will discuss different components of commerce from
    a security perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Product discovery using a mobile device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Product discovery is the process of finding a product. Merchants use different
    mechanisms to either bring customers to their retail stores or to encourage them
    to buy online. Product discovery also includes capabilities such as shopping lists,
    comparison shopping, and information about the product that facilitates a consumer
    to buy a product. A mobile device is ideal for this use case as a consumer can
    access information about a product and check the availability of a product in
    real time.
  prefs: []
  type: TYPE_NORMAL
- en: Some example application in the mobile space include applications for barcode
    scanning, location-based shopping, targeted advertising, points and perks to a
    user as they enter a retail store, ability to create shopping lists and be reminded
    of it when a consumer is close to a store that holds an item from the shopping
    list, and the ability to store loyalty cards in a wallet.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest challenge from a security perspective is that of privacy. Targeted
    advertising and geo-fencing is based on the analysis of user data and their shopping
    patterns. Application developers should be aware of laws and regulations when
    using and collecting user data and preferences, and then using or sharing it.
    In almost all cases user consent is required before collecting information. This
    consent statement should include what is being collected and if it will be shared
    with third parties. Be mindful of updating this user consent as you add new functionality
    or update or extend existing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile payments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Payment is the biggest component of mobile commerce. In any payment use case,
    there are three major entities: the consumer also called the buyer, the seller
    or the merchant and the infrastructure layer that enables payments.'
  prefs: []
  type: TYPE_NORMAL
- en: Configurations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A consumer could be using a mobile device to search and pay for a product,
    a merchant could be using a mobile device, or both consumer and merchant could
    be using a mobile device. Ideally, all three entities are connected during an
    interaction. This is the case of full connectivity and is by far the most secure
    channel for payments. A user buying an item from eBay''s mobile website is an
    example of full connectivity, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configurations](img/5603_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, there are cases where they could be disconnected. A case where the
    consumer and merchant are both connected to the infrastructure but are not connected
    to each other is a case of infrastructure-centric connectivity. An example is
    geo-fencing when a user gets coupons for a store when they are close to it. In
    this case, the store and a user are both talking to the infrastructure (a third
    party or the carrier) but are not talking to each other. Another case is when
    a user a checks out with a device by using a point of sale terminal. In this case,
    a user uses the device as an authentication mechanism but may not be connected
    to the infrastructure layer. This is a case of merchant-centric connectivity in
    which a merchant is connected to both, the consumer and infrastructure but consumer
    is disconnected. Yet another example case is that of a consumer that talks to
    both the infrastructure and merchant but the merchant is disconnected. An example
    is when a user buys soda from a vending machine. The vending machine may sync
    with the backend at certain intervals of time and may be disconnected otherwise.
    The following figure illustrates partial connectivity configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configurations](img/5603_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The basic security challenge in partial connectivity is that of end-to-end
    security. Since at any time there are two of the three connections, any stale
    state on client or server side is hard to detect. Then, there are issues with
    the client-merchant authentication, communication authentication, and privacy,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configurations](img/5603_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, there is the disconnected case where merchant and consumer talk to each
    other but none of them talks to the infrastructure layer. Maintaining the integrity
    of the device is a challenge in this case. Take the example of a consumer trying
    to use a coupon at the point of sale terminal.
  prefs: []
  type: TYPE_NORMAL
- en: The consumer may continue to use the coupon multiple times and the **PoS** (**Point
    of Sale**) terminal that cannot sync to the server to update the state of the
    coupon will not detect a fraud. Similarly, a client certificate may have expired
    or had been revoked but the merchant device will not be aware of it. If your application
    is set to work in such a scenario then there should only be a limited set of functionality
    available offline. Cases where PII or money is involved are best left to full
    connectivity or at least partial connectivity cases.
  prefs: []
  type: TYPE_NORMAL
- en: As an application, a developer should be aware of how your use case works. If
    your application can work with partial or no connectivity, you will need to take
    additional security measures when dealing with payments.
  prefs: []
  type: TYPE_NORMAL
- en: PCI Standard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Payment Card Industry** (**PCI**) is an independent organization and works
    to create awareness about security in the payments use case. They have developed
    a common set of payment standards for ensuring user security is not compromised.
    PCI **PTS** (**Pin Transaction Security**) is for add-on devices that accept payments;
    PCI **P2PE** (**Point to Point Encryption**) is for hardware-based security, and
    PCI **DSS** (**Data Security Standard**) is for security management, policies,
    procedures, network architecture, software design, and other critical protective
    measures. The latest is version 2.0 and it helps organizations protect user data
    effectively. It has six core objectives that are implemented as the twelve core
    requirements. These are enumerated in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PCI Standard](img/5603_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As an application developer working with payments, be aware of DSS. Payments
    are tricky and getting them right in a secure manner is a challenge in itself.
    So, you may like to use the already existing payment providers, such as PayPal.
  prefs: []
  type: TYPE_NORMAL
- en: More information about PCI can be found on their website available at [pcisecuritystandards.org](http://pcisecuritystandards.org).
  prefs: []
  type: TYPE_NORMAL
- en: Point of Sale
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mobile Point of Sale (PoS) is a use that has been made possible with the ubiquity
    of a mobile device and by using proximity technologies as discussed earlier in
    this chapter. Your mobile device essentially acts as a Point of Sale terminal
    and can manage your ledgers and all your transactions for the day. Solutions provided
    by companies such as PayPal and Square use the phone audio jack to plug in a card
    swiping device. This device then reads the credit card details and in an encrypted
    form sends it over to the device. Other solutions include mobile Point of Sale
    terminals.
  prefs: []
  type: TYPE_NORMAL
- en: As an application developer, it is best to integrate with existing solutions
    instead of trying to invent the wheel. But, remember to ask some questions before
    you pick the solution. First, you need to ask if the solution provider is taking
    a proper security measure to encrypt the data. Please be aware of PCI DSS and
    PCI PTN, as we discussed in the previous sections. Retailers that process, store,
    or transmit credit card numbers must be PCI DSS compliant, or they risk losing
    the ability to process the credit card payments. Since there are infrastructural
    differences between credit cards in different countries, different technologies
    have to be employed to read credit/debit cards. In Europe, for example, the chip
    and pin technology is the norm, so your PoS payment provider should have solutions
    in each area. You might like to choose a provider with whom you can manage your
    credit cards and also checks, cash and other form of payments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Point of Sale](img/5603_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous figure shows some examples of mobile Point of Sale solutions. The
    first image is of a PayPal card reader in North America and the application that
    manages all modes of payments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Point of Sale](img/5603_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding figure is PayPal's pin and chip solution in Europe that works
    by using Bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: '![Point of Sale](img/5603_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Above is another example of mobile point of sale. Most commonly used by delivery
    agents and sales representatives.
  prefs: []
  type: TYPE_NORMAL
- en: Proximity technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Proximity technologies work in a radius of inches or centimeters. These include
    technologies such as **Near Field Communication** (**NFC**), Bluetooth, and **Radio
    Frequency Identification** (**RFID**). Most of these technologies have been around
    for some time but the pervasiveness of mobile devices has given them an array
    of new use cases. These technologies are now being used for mobile payments, pairing
    of different devices, identification, and authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Bluetooth is now a standard in most mobile phones. It is a wonderful technology
    to pair devices. With devices such as glasses and watches coming in the market,
    this might be the technology that brings them all together.
  prefs: []
  type: TYPE_NORMAL
- en: Both NFC and RFID work by producing an electromagnetic field that modulates
    at a certain frequency. Since these tags are world readable, when used as tags
    or identification mechanism, these tags pose privacy risk. The first NFC enabled
    Android phone, the Nexus S, came out in the year 2010\. The Android SDK comes
    bundled with the API for using the NFC tags.
  prefs: []
  type: TYPE_NORMAL
- en: Owing to their small range of operation, proximity technologies are mistakenly
    considered to be secure. However, it is not the case. A quick search will reveal
    exploit scenarios for all cases. Data modulation, jamming of data, and privacy
    are some risks associated with these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Social networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An array of social networking applications exist in the App Stores today and
    the new use cases are being tested each day. These applications let friends, acquaintances,
    neighbors, colleagues, and people with special interests share, collaborate, and
    essentially keep in touch with each other. Some successful examples include Facebook,
    Twitter, Pinterest, Google Hangout, and LinkedIn.
  prefs: []
  type: TYPE_NORMAL
- en: 'Social networks work as graphs of networks linking entities together. Any bad
    node in the graph has the potential to spam or infect the other node. In the following
    figure, the message between nodes A and B is intercepted and changed with spam.
    This will result in all nodes connected to B to be infected. This continues and
    as you can imagine will spread across nodes very quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Social networking](img/5603_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The biggest challenge with social networking applications is that of privacy.
    First, users have to be mindful of what they share with their contacts. In most
    cases, users are using their real name and other private information.
  prefs: []
  type: TYPE_NORMAL
- en: Second, users need to be aware of spam and malware. Not everyone is your friend.
    Not all games that your friends played with are written by good guys. There is
    also no need to click on all the links shared by people you are following.
  prefs: []
  type: TYPE_NORMAL
- en: Third, application developers have to be mindful of how they store and process
    users sensitive information. The first line of defense is to specifically ask
    a user what they want to share and with whom. This user consent should save the
    developers from liability issues. Second, they have to define proper access control
    based on user preferences. Third, they have to secure user details and PII both
    at rest and in transit.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue with social networking sites is that of identity theft. It is
    easy for a malicious user to create an account by using other person's identity.
  prefs: []
  type: TYPE_NORMAL
- en: Healthcare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing mobile applications for healthcare is another example of a very security
    sensitive use case. In the healthcare use case a developer is dealing with user
    identification, electronic medical histories, laboratory tests, and prescribed
    medicines. Compromising this information may affect the health of a patient.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices can be put to great use in healthcare as they are very personal
    and we carry them with us always. So, applications those remind us to take our
    pills on time, doctor visit, notes taking applications for both doctors and patients,
    instant notification about laboratory results, and reminders that are prescription
    medication needs to be refilled are all important and useful applications.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices can also be used in emergency situations where other people can
    help an ailing person with the aid of a mobile device. Users can share real time
    video and talk to a doctor in real time to get help.
  prefs: []
  type: TYPE_NORMAL
- en: The other arm of development in healthcare is the use of the Android platform
    in embedded devices, such as scanners, radiology, X-ray machines, robotic surgery,
    and ultrasound devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accurate identification of a person is crucial in healthcare. Also remember
    the important security rule: trust but verify. So, you identify a person but want
    to do it one more time to be sure. Access control and secure storage and transmission
    of PII are important as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Be aware of standards and regulations in the healthcare field such as **Health
    Insurance Portability** **and Accountability Act** (**HIPAA**).
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is the act of identifying an entity. In our case, authentication
    usually relates to identifying a person. The current method of authentication
    is by using a username and password. Since, passwords are complicated and are
    hard to type on a small device, phone number and PIN are used for authenticating
    a user.
  prefs: []
  type: TYPE_NORMAL
- en: Two-factor authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most common approach today is two-factor authentication. This is based
    on the theory that to identify a person uniquely, a person should provide two
    of the following three identifiers:'
  prefs: []
  type: TYPE_NORMAL
- en: Something that a user has; this includes a digital signature, security tokens,
    phone, tag, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Something that a user knows; this includes passwords, secrets, PIN, or an answer
    to a question that only the user is expected to know
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Something that a user is; examples include retina scan, fingerprints, and facial
    recognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of two-factor authentication is logging in by using username/password
    or phone/PIN followed by entering a secret code sent in an SMS to the user device.
    Another example could be entering a username and password and then answering a
    challenge question, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two-factor authentication](img/5603_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing a two-factor authentication is easy in Android. Google authenticator
    implements the two-factor authentication by using SMS or voice call.
  prefs: []
  type: TYPE_NORMAL
- en: Biometrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Biometric authentication is an identification of a user by using biological
    properties that are unique to a user. These include the use of fingerprints, facial
    recognition, retina scan, and iris scan. Based on the iris scan, India has implemented
    the world's largest identification system called Aadhar. This ambitious project
    will provide a unique number to all Indian citizens aged five and above by using
    their demographic and biometric information. Check out the website of **Unique
    Identification Authority of India** (**UIDAI**) available at [www.uidai.gov.in](http://www.uidai.gov.in).
  prefs: []
  type: TYPE_NORMAL
- en: There are some applications on Android which use biometrics as key. The important
    consideration when using such an application is to be sure that the user identification
    specifications are not stored on the device. Second, if this information is stored
    on the server, how is it transmitted and stored there? Third, how do you access
    this information?
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Biometrics is unlike the two-factor authentication where you can easily change
    your password or update your RSA secure ID token. Biometrics is personal, and
    compromising this information comes with huge risks.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two scenarios in which biometrics is used. In the first case, a user
    is verified by using some biological attribute, such as a fingerprint. This is
    compared to the copy stored in the device. Logging into a phone by using your
    face is an example of verification, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Biometrics](img/5603_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second case is that of identification in which a biometric identity is
    compared against stored identities in a database for a match. The biometric identification
    system being implemented in India is such an example. The following figure illustrates
    this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Biometrics](img/5603_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Advances in hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile operating systems have come a long way. When I started working on mobiles,
    we had candy bar phones that did little more than make phone calls and had basic
    utilities such as calculator and a widget to show the time and date. To support
    the advanced use cases for mobile, security has to be built in the hardware itself.
    There are some efforts in this direction that I have discussed in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware security module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hardware security module, also called a secure element, is a piece of hardware
    (chip) embedded in the hardware to store cryptographic keys and other sensitive
    information. The idea is to provide an isolated, tamper resistant environment
    to store PII. In some cases, a secure element can be carried with the device as
    well. Examples of secure elements include an enhanced SIM card controlled by a
    mobile network operator, a chip embedded in the device itself, or a micro SD card
    with a special circuit built-in. Many Android phones come equipped with a secure
    element.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, security modules also work as security accelerators. These accelerators,
    besides storing keys, also perform crypto functions in the hardware, such as encryption,
    decryption, hashing, and random number generation. This offers a huge offload
    from the CPU and results in better performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'For developers to be able to use a secure element, it has to be exposed through
    APIs. Android''s **Secure Element Evaluation Kit** (**SEEK**) for Android is a
    step in this direction. Based on open mobile APIs, the aim of this set of APIs,
    called Smart Card APIs, is to provide a mechanism for the application to communicate
    with embedded secure elements, SIM cards, or other device encryption modules.
    Check out more information available at [code.google.com/p/seek-for-android](http://code.google.com/p/seek-for-android).
    The following image from [code.google.com](http://code.google.com) illustrates
    the concept of SEEK very efficiently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware security module](img/5603_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Based on Android's permission mechanism, Smart Card APIs need a special permission
    called `android.permission.SMARTCARD` for applications accessing these APIs. The
    Smart Card API remote process is registered with a unique UID/GID of the Smart
    Card. Note that this security mechanism ceases to work on rooted devices. `GoogleOtpAuthenticator`
    is implemented over a Smart Card API using two-factor authentication.
  prefs: []
  type: TYPE_NORMAL
- en: TrustZone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developed by ARM, and now with GlobalPlatforms, TrustZone technology is complete
    security solution for devices. It is based on systems-on-chip, TrustZone provides
    a trusted execution environment for applications such as payments, content streaming
    and management, access control, and other PII. The cool feature of TrustZone is
    that each application runs in its own contained environment completely isolated
    from each other.
  prefs: []
  type: TYPE_NORMAL
- en: You may like to check out the website [www.arm.com/products/processors/technologies/trustzone.php](http://www.arm.com/products/processors/technologies/trustzone.php)
    for details. The following figure from the preceding website shows a high-level
    view of this technology. Many mobile processors such as from Texas instruments
    and Nvidia's Tegra core are built upon the TrustZone technology.
  prefs: []
  type: TYPE_NORMAL
- en: '![TrustZone](img/5603_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the previous figure, using virtualization, the processor is divided
    into two virtual domains: one for the normal mode and the other for executing
    sensitive processes called the secure mode. By using a monitor mode, the process
    transitions from one mode to the other. All sensitive code, data, and resources
    are processed away from the normal operating environment, software, and memory
    on the device. This isolation is enforced by SoC architecture so it is highly
    robust against software and probing attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile trusted module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2010, **Trusted Computing Group** (**TCG**) published the 1.0 version of
    **Mobile Trusted Module** (**MTM**). TCG is an international standards body that
    works with its members to develop standards and specifications. MTM's aim is to
    adapt an existing TCG technology for mobile and embedded use.
  prefs: []
  type: TYPE_NORMAL
- en: Trusted computing is based on a hardware root of trust and is called the **Trusted
    Platform Module** (**TPM**). It detects malware and checks the integrity of a
    system. This capability is called the Trusted Platform Module. The security of
    TPM starts with the boot process. A hardware root of trust (usually a key) is
    burned in the processor itself. Boot security is built on this root of trust.
    Progressive stages of the boot software are verified cryptographically to ensure
    that only correct, authorized software is executed in the device.
  prefs: []
  type: TYPE_NORMAL
- en: Check out their website available at [www.trustedcomputinggroup.org](http://www.trustedcomputinggroup.org).
    It is more relevant for kernel developers but it makes for a very interesting
    read for anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Application architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These days there are three ways to write an application: native, mobile web,
    and hybrid.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A native application is specific to a platform and is written in a language
    that is native to the platform. These applications use native tools and SDKs that
    are provided by the operating system manufacturer. These applications have much
    better performance and can use native features and APIs for secure data storage.
    The following figure illustrates how native and hybrid applications work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application architecture](img/5603_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A mobile web application is written with web technologies, such as HTML5, CSS,
    PHP, JavaScript, and ASP.net. These applications are cross-platform and once they
    are written they can be run on any platform that has a browser. They provide the
    ease of centralized updates but inherit all the browser vulnerabilities. Be aware
    of the browser exploits when you write a mobile web application. Browser code
    is easily available for everyone to see. Also, URL exploits are a risk in such
    applications, as the application does not reside on the device and can be accessed
    only by using a valid URL. The following is a figure illustrating how mobile web
    application works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application architecture](img/5603_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The third way to write an application is to develop a hybrid application. This
    application combines the benefits of both, native and mobile web. An application
    is written once by using web technologies. The user needs to install the application
    just like a native application and it runs in a native browser by using the device's
    browser engine. In this way the application can run in the offline mode, can access
    device capabilities, and a developer can target multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The decision to pick which architecture to use rests on your use case. Native
    applications are much more secure than hybrid or mobile web. They also perform
    better in terms of speed and user experience. Hybrid and mobile web application,
    on the other hand, are easier and quicker to develop by using web technologies
    and are cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on the upcoming use cases and technologies and how they
    relate to mobile security in general. We discussed mobile commerce, proximity
    technologies, mobile security in healthcare, and authentication. We closed the
    chapter with a look at the security enhancements in the hardware space. As you
    will have noticed, there is a lot happening in the mobile space and I think it
    will continue this way for a while before things settle down.
  prefs: []
  type: TYPE_NORMAL
- en: With this we have reached the end of this book. I hope you learnt something
    new in this book and enjoyed this journey as much as I did.
  prefs: []
  type: TYPE_NORMAL
