["```kt\n  public void testNotImplementedYet() {\n    fail(\"Not implemented yet\");\n  }\n```", "```kt\npublic void testShouldThrowException() {\n    try {\n      MyFirstProjectActivity.methodThatShouldThrowException();\n      fail(\"Exception was not thrown\");\n    } catch ( Exception ex ) {\n      // do nothing\n    }\n  }\n```", "```kt\npublic void testMax() {\nint a = 10;\nint b = 20;\n\nint actual = Math.max(a, b);\n\nString failMsg = \"Expected: \" + b + \" but was: \" + actual;\nassertEquals(failMsg, b, actual);\n}\n```", "```kt\n  public void testAlignment() {\n int margin = 0;\n   ...\n android.test.ViewAsserts.assertRightAligned(errorMsg, editText, margin);\n  }\n```", "```kt\nimport static android.test.ViewAsserts.assertRightAligned;\n\npublic void testAlignment() {\n   int margin = 0;\n assertRightAligned(errorMsg, editText, margin);\n}\n```", "```kt\n  public void testUserInterfaceLayout() {\n    int margin = 0;\n    View origin = mActivity.getWindow().getDecorView();\n    assertOnScreen(origin, editText);\n    assertOnScreen(origin, button);\n    assertRightAligned(editText, button, margin);\n  }\n```", "```kt\n@UiThreadTest\npublic void testNoErrorInCapitalization() {\nString msg = \"capitalize this text\";\neditText.setText(msg);\n\nbutton.performClick();\n\nString actual = editText.getText().toString();\nString notExpectedRegexp = \"(?i:ERROR)\";\nString errorMsg = \"Capitalization error for \" + actual;\nassertNotContainsRegex(errorMsg, notExpectedRegexp, actual);\n}\n```", "```kt\nINFO/TestRunner(610): ----- begin exception -----\nINFO/TestRunner(610): android.view.ViewRoot$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.\nINFO/TestRunner(610):     at android.view.ViewRoot.checkThread(ViewRoot.java:2932)\n[...]\nINFO/TestRunner(610):     at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1447)\nINFO/TestRunner(610): ----- end exception -----\n```", "```kt\n    public void testListScrolling() {\n        listView.scrollTo(0, 0);\n\n        TouchUtils.dragQuarterScreenUp(this, activity); \n        int actualItemPosition = listView.getFirstVisiblePosition();\n\n        assertTrue(\"Wrong position\", actualItemPosition > 0);\n    }\n```", "```kt\npublic class MyTestCase extends TestCase {\n public MyTestCase() {\n this(\"MyTestCase Default Name\");\n }\n\n   public MyTestCase(String name) {\n      super(name);\n   }\n}\n```", "```kt\npublic void assertActivityRequiresPermission(String packageName, String className, String permission)\n```", "```kt\npublic void testActivityPermission() {\n  String pkg = \"com.blundell.tut\";\n  String activity =  PKG + \".MyContactsActivity\";\n  String permission = android.Manifest.permission.CALL_PHONE;\n  assertActivityRequiresPermission(pkg, activity, permission);\n}\n```", "```kt\npublic void assertReadingContentUriRequiresPermission(Uri uri, String permission)\n```", "```kt\n  public void testReadingContacts() {\n    Uri URI = ContactsContract.AUTHORITY_URI;\n    String PERMISSION = android.Manifest.permission.READ_CONTACTS;\n    assertReadingContentUriRequiresPermission(URI, PERMISSION);\n  }\n```", "```kt\npublic void assertWritingContentUriRequiresPermission (Uri uri, String permission)\n```", "```kt\n  public void testWritingContacts() {\n  Uri uri = ContactsContract.AUTHORITY_URI;\n   String permission = android.Manifest.permission.WRITE_CONTACTS;\n  assertWritingContentUriRequiresPermission(uri, permission);\n}\n```", "```kt\ndefaultConfig {\n  testApplicationId 'com.blundell.tut.tests'\ntestInstrumentationRunner  \"android.test.InstrumentationTestRunner\"\n}\n```", "```kt\n  <TextView \n       android:id=\"@+id/link\n       android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n       android:text=\"@string/home\"\n    android:autoLink=\"web\" \" />\n```", "```kt\n  public void testFollowLink() {\n        IntentFilter intentFilter = new IntentFilter(Intent.ACTION_VIEW);\n        intentFilter.addDataScheme(\"http\");\n        intentFilter.addCategory(Intent.CATEGORY_BROWSABLE);\n\n        Instrumentation inst = getInstrumentation();\n        ActivityMonitor monitor = inst.addMonitor(intentFilter, null, false);\n        TouchUtils.clickView(this, linkTextView);\n        monitor.waitForActivityWithTimeout(3000);\n        int monitorHits = monitor.getHits();\n        inst.removeMonitor(monitor);\n\n        assertEquals(1, monitorHits);\n    } \n```", "```kt\npublic final T launchActivity (String pkg, Class<T> activityCls, Bundle extras)\n```", "```kt\npublic final T launchActivityWithIntent (String pkg, Class<T> activityCls, Intent intent)\n```", "```kt\n    public void testSendKeyInts() {\n        requestMessageInputFocus();\n        sendKeys(\n                KeyEvent.KEYCODE_H,\n                KeyEvent.KEYCODE_E,\n                KeyEvent.KEYCODE_E,\n                KeyEvent.KEYCODE_E,\n                KeyEvent.KEYCODE_Y,\n                KeyEvent.KEYCODE_DPAD_DOWN,\n                KeyEvent.KEYCODE_ENTER);\n        String actual = messageInput.getText().toString();\n\n        assertEquals(\"HEEEY\", actual);\n    }\n```", "```kt\n      public void testSendKeyString() {\n        requestMessageInputFocus();\n\n        sendKeys(\"H 3*E Y DPAD_DOWN ENTER\");\n        String actual = messageInput.getText().toString();\n\n        assertEquals(\"HEEEY\", actual);\n    }\n```", "```kt\npublic void testSendRepeatedKeys() {\n        requestMessageInputFocus();\n\n        sendRepeatedKeys(\n                1, KeyEvent.KEYCODE_H,\n                3, KeyEvent.KEYCODE_E,\n                1, KeyEvent.KEYCODE_Y,\n                1, KeyEvent.KEYCODE_DPAD_DOWN,\n                1, KeyEvent.KEYCODE_ENTER);\n        String actual = messageInput.getText().toString();\n\n        assertEquals(\"HEEEY\", actual);\n    }\n```", "```kt\nprivate void requestMessageInputFocus() {\n        try {\n            runTestOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    messageInput.requestFocus();\n                }\n            });\n        } catch (Throwable throwable) {\n            fail(\"Could not request focus.\");\n        }\n        instrumentation.waitForIdleSync();\n    }\n```", "```kt\nprotected void scrubClass(Class<?> testCaseClass)\n```", "```kt\nActivityInstrumentationTestCase2(Class<T> activityClass)\n```", "```kt\n @Override\n protected void setUp() throws Exception {\n   super.setUp();\n   // this must be called before getActivity()\n   // disabling touch mode allows for sending key events\n   setActivityInitialTouchMode(false);\n\n   activity = getActivity();\n   instrumentation = getInstrumentation();\n   linkTextView = (TextView) activity.findViewById(R.id.main_text_link);\n   messageInput = (EditText) activity.findViewById(R.id.main_input_message);\n   capitalizeButton = (Button) activity.findViewById(R.id.main_button_capitalize);\n } \n```", "```kt\n@Override  \nprotected void tearDown() throws Exception {\n    super.tearDown();\n      myObject.dispose();\n}\n```", "```kt\nProviderTestCase2(Class<T> providerClass, String providerAuthority)\n```", "```kt\npublic void testQuery() {\n    String segment = \"dummySegment\";\n    Uri uri = Uri.withAppendedPath(MyProvider.CONTENT_URI, segment);\n    Cursor c = provider.query(uri, null, null, null, null);\n    try {\n      int actual = c.getCount();\n\n       assertEquals(2, actual);\n    } finally {\n        c.close();\n  }\n}\n```", "```kt\npublic void testDeleteByIdDeletesCorrectNumberOfRows() {\n    String segment = \"dummySegment\";\n    Uri uri = Uri.withAppendedPath(MyProvider.CONTENT_URI, segment);\n\n    int actual = provider.delete(uri, \"_id = ?\", new String[]{\"1\"});\n\n    assertEquals(1, actual);\n}\n```", "```kt\nServiceTestCase(Class<T> serviceClass)\n```", "```kt\nINFO/TestRunner(1): java.lang.RuntimeException: Exception during suite construction\nINFO/TestRunner(1):     at android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests.testSuiteConstructionFailed(TestSuiteBuilder.java:239)\nINFO/TestRunner(1):     at java.lang.reflect.Method.invokeNative(Native Method)\n[...]\nINFO/TestRunner(1):     at android.test.InstrumentationTestRunner.onStart(InstrumentationTestRunner.java:520)\nINFO/TestRunner(1):     at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1447)\n```", "```kt\nimport com.blundell.dummylibrary.Dummy;\n\npublic class MyFirstProjectActivity extends Activity {\n    private Dummy dummy;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        final EditText messageInput = (EditText) findViewById(R.id.main_input_message);\n        Button capitalizeButton = (Button) findViewById(R.id.main_button_capitalize);\n        capitalizeButton.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String input = messageInput.getText().toString();\n                messageInput.setText(input.toUpperCase());\n            }\n        });\n\n        dummy = new Dummy();\n    }\n\n    public Dummy getDummy() {\n        return dummy;\n    }\n\n    public static void methodThatShouldThrowException() throws Exception {\n        throw new Exception(\"This is an exception\");\n    }\n\n}\n```", "```kt\ndependencies {\n    compile project(':dummylibrary')\n}\n```", "```kt\npublic void testDummy() {\n  assertNotNull(activity.getDummy());\n}\n```"]