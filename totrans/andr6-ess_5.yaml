- en: Chapter 5. Audio, Video, and Camera Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Marshmallow gives us good audio, video, and camera capabilities, and
    you can see that improvements have been made to enable and better support new
    or mint condition protocols or even change the behavior of some APIs, such as
    the camera service.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will try and explain these changes with a proper discussion
    on their usage and benefits. Our journey in the upcoming pages will cover the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Audio features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Marshmallow 6.0 adds some enrichments to the audio features that we
    will cover in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Support for the MIDI protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `android.media.midi` package was added in Android 6.0 (API 23).
  prefs: []
  type: TYPE_NORMAL
- en: With the new midi APIs, you can now send and receive **MIDI** (short for **Musical
    Instrument Digital Interface**) events in a much simpler way than earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The package was built to provide us with capabilities to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect and use a MIDI keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect to other MIDI controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use external MIDI synthesizers, external peripherals, lights, show control,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow dynamic music generation from games or music-creation apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow the creation and passing of MIDI messages between apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow Android devices to act as multi-touch controllers when connected to a
    laptop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When dealing with MIDI, you must declare it in the manifest, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Pay attention to the `required` part; in a manner similar to other features,
    setting it to `true` will make your app visible in the play store only if the
    device supports the MIDI API.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check in runtime for MIDI support and then change the required
    part to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: MidiManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A way to properly use the MIDI API is via the `MidiManager` class; obtain it
    via `context` and use it when required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information, you can refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/media/midi/package-summary.html](https://developer.android.com/reference/android/media/midi/package-summary.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Digital audio capture and playback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Two new classes have been added for digital audio capture and playback:'
  prefs: []
  type: TYPE_NORMAL
- en: '`android.media.AudioRecord.Builder` - digital audio capture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.media.AudioTrack.Builder` - digital audio playback'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These will help configure the audio source and sink properties.
  prefs: []
  type: TYPE_NORMAL
- en: Audio and input devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new `hasMicrophone()` method has been added to the `InputDevice` class.
    This will report whether the device has a built-in microphone that developers
    can use. Let's say you want to enable voice search from a controller connected
    to Android TV and you get an `onSearchRequested()` callback for the user's search.
    You can then verify that there's a microphone with the `inputDevice` object you
    get in the callback.
  prefs: []
  type: TYPE_NORMAL
- en: Information on audio devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new `AudioManager.getDevices(int flags)` method allows easy retrieval of
    all the audio devices currently connected to the system. If you want to be notified
    when there are audio device connections/disconnections, you can register your
    app to an `AudioDeviceCallback` callback via the `AudioManager.registerAudioDeviceCallback(AudioDeviceCallback
    callback, Handler handler)` method.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in AudioManager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some changes have been introduced in the `AudioManager` class, and they are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `AudioManager` to set the volume directly is not supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `AudioManager` to mute specific streams is not supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `AudioManager.setStreamSolo(int streamType, boolean state)` method is deprecated.
    If you need exclusive audio playback, use `AudioManager.requestAudioFocus(AudioManager.OnAudioFocusChangeListener
    l, int streamType, int durationHint)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `AudioManager.setStreamMute(int streamType, boolean state)` method is deprecated.
    If you need to use `AudioManager.adjustStreamVolume(int streamType, int direction,
    int flags)` for direction, you can use one of the newly added constants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ADJUST_MUTE` will mute the volume. Note that it has no effect if the stream
    is already muted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ADJUST_UNMUTE` will unmute the volume. Note that it has no effect if the stream
    is not muted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android Marshmallow, the video processing API has been upgraded with new
    capabilities. Some new methods and even a new class has been added just for developers.
  prefs: []
  type: TYPE_NORMAL
- en: android.media.MediaSync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The all new `MediaSync` class has been designed to help us with synchronous
    audio and video streams'' rendering. You can also use it to play audio- or video-only
    streams. You can use the dynamic playback rate and feed the buffers in a nonblocking
    action with a callback return. For more information on the proper usage, read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/reference/android/media/MediaSync.html](https://developer.android.com/reference/android/media/MediaSync.html)'
  prefs: []
  type: TYPE_NORMAL
- en: MediaCodecInfo.CodecCapabilities.getMaxSupportedInstances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we have a `MediaCodecInfo.CodecCapabilities.getMaxSupportedInstances` helper
    method to get the maximum number of supported concurrent codec instances. However,
    we must consider this only an upper bound. The actual number of concurrent instances
    can be lower depending on the device and the amount of available resources at
    the time of usage.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need to know this?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's think of a case where we have a media-playing application and we want
    to add effects between the movies played. We will need to use more than one video
    codec, decode two videos, and encode one video stream back to be displayed on
    screen. Checking with this API will allow you to add more features that rely upon
    multiple instances of codecs.
  prefs: []
  type: TYPE_NORMAL
- en: MediaPlayer.setPlaybackParams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now set the media playback rate for fast or slow motion playback. This
    will give us the chance to create a funny video app where we slow down parts or
    play them fast, creating a new video while playing. Audio playing is synced accordingly,
    so you might hear a person talking slowly or even fast, for that matter.
  prefs: []
  type: TYPE_NORMAL
- en: Camera features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android Lollipop, there was the new `Camera2` API, and now, in Android Marshmallow,
    there are a few more updates to the camera, flashlight, and image reprocessing
    features.
  prefs: []
  type: TYPE_NORMAL
- en: The flashlight API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Almost every device today has a camera, and almost every camera device has a
    flash unit. The `setTorchMode()` method has been added to control the flash torch
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setTorchMode()` method is used in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `cameraId` element is the unique ID for the flash unit camera with which
    you want to change the torch mode. You can use `getCameraIdList()` to get the
    list of cameras and then use `getCameraCharacteristics(String cameraId)` to check
    whether flash is supported in that camera. The `setTorchMode()` method allows
    you to turn it on or off without opening the camera device and without requesting
    permission from the camera. The torch mode will be switched off as soon as the
    camera device becomes unavailable or when other camera resources that have the
    torch on become unavailable. Other apps can use the flash unit as well, so you
    need to check the mode when required or register a callback via the `registerTorchCallback()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the sample app, **Torchi**, to see the entire code at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/MaTriXy/Torchi](https://github.com/MaTriXy/Torchi)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Turning on the torch mode may fail if the camera or other camera resources are
    in use.
  prefs: []
  type: TYPE_NORMAL
- en: The reprocessing API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, the `Camera2` API was given a few boosts to allow added
    support for **YUV** and private opaque format image reprocessing. Before using
    this API, we need to check whether these capabilities are available. This is why
    we use the `getCameraCharacteristics(String cameraId)` method and check for the
    `REPROCESS_MAX_CAPTURE_STALL` key.
  prefs: []
  type: TYPE_NORMAL
- en: android.media.ImageWriter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a new class that's been added to Android 6.0.
  prefs: []
  type: TYPE_NORMAL
- en: It allows us to create an image and feed it into a surface and then back to
    `CameraDevice`. Usually, `ImageWriter` is used along with `ImageReader`.
  prefs: []
  type: TYPE_NORMAL
- en: android.media.ImageReader
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a new class that's been added to Android 6.0.
  prefs: []
  type: TYPE_NORMAL
- en: It allows us direct access to the image data rendered in a surface. `ImageReader`,
    along with `ImageWriter`, allows our app to create an image feed from the camera
    to the surface and back to the camera for reprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in the camera service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android Marshmallow has made a change to the *first come* *, first serve* access
    model; now, the service access model has favorites processes—ones that are marked
    as high-priority. This change results in some more logic-related work for us developers.
    We need to make sure that we take into account a situation where we get bumped
    up (higher priority) or debunked (lower priority due to a change in our application).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try and explain this in a few simple bullets:'
  prefs: []
  type: TYPE_NORMAL
- en: When you want to access camera resources or open and configure a camera device,
    your access is verified according to the *priority* of your application process.
    An application process with foreground activities (visible user) is normally given
    a higher priority, which in turn allows a better chance to get the desired access
    when needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other side of the *priority* scale, you can find low-priority apps that
    can and will be tossed aside (revoked from access) when a high-priority application
    attempts to use the camera. For example, when using the `Camera` API, you will
    get the `onError()` call when evicted, and when using the `Camera2` API, you will
    get the `onDisconnected()` call when evicted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some devices out in the wild can allow separate applications to open and use
    separate camera devices simultaneously. The camera service now detects and disallows
    performance issues that are caused due to multiprocess usage. When the service
    detects such an issue, it will evict low-priority apps even if only one app is
    using that camera device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a multiuser environment, when switching users, all active apps using the
    camera in the previous user profile will be evicted in order to allow proper usage
    and access to apps for the current user. This means that switching users will
    stop the camera-using apps from using the camera for sure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered quite a few changes in and additions to the Android
    APIs. Android Marshmallow is more about helping us, the developers, achieve better
    media support and showcase our ideas when using the audio, video, or camera APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go over some of the Android features to understand
    the features, additions, and changes made.
  prefs: []
  type: TYPE_NORMAL
