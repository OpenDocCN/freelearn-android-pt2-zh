["```kt\n    Theme.AppCompat.Light.NoActionBar \n\n    ```", "```kt\n    <android.support.design.widget.CoordinatorLayout  \n\n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\"> \n\n    </android.support.design.widget.CoordinatorLayout> \n\n    ```", "```kt\n    <android.support.design.widget.AppBarLayout \n        android:id=\"@+id/app_bar\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:fitsSystemWindows=\"true\"> \n\n    </android.support.design.widget.AppBarLayout> \n\n    ```", "```kt\n    <android.support.design.widget.CollapsingToolbarLayout \n        android:id=\"@+id/collapsing_toolbar\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:fitsSystemWindows=\"true\" \n        app:contentScrim=\"?attr/colorPrimary\" \n        app:layout_scrollFlags=\"scroll|exitUntilCollapsed|enterAlwaysCollapsed\"> \n\n    </android.support.design.widget.CollapsingToolbarLayout> \n\n    ```", "```kt\n    <ImageView \n        android:id=\"@+id/toolbar_image\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" \n        android:fitsSystemWindows=\"true\" \n        android:scaleType=\"centerCrop\" \n        android:src=\"img/some_drawable\" \n        app:layout_collapseMode=\"parallax\" /> \n\n    <android.support.v7.widget.Toolbar \n        android:id=\"@+id/toolbar\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"?attr/actionBarSize\" \n        app:layout_collapseMode=\"pin\" /> \n\n    ```", "```kt\n    <android.support.v7.widget.RecyclerView \n        android:id=\"@+id/recycler_view\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" \n        android:scrollbars=\"vertical\" \n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" /> \n\n    ```", "```kt\n    <android.support.design.widget.FloatingActionButton \n        android:id=\"@+id/fab\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:layout_marginEnd=\"@dimen/fab_margin_end\" \n        app:layout_anchor=\"@id/app_bar\" \n        app:layout_anchorGravity=\"bottom|end\" /> \n\n    ```", "```kt\n    <item name=\"android:windowDrawsSystemBarBackgrounds\">true</item> \n    <item name=\"android:statusBarColor\">@android:color/transparent</item> \n\n    ```", "```kt\napp:layout_behavior=\"@string/appbar_scrolling_view_behavior\" \n\n```", "```kt\n<android.support.v4.widget.NestedScrollView \n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\" \n    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"> \n\n    <TextView \n        android:id=\"@+id/nested_text\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:padding=\"@dimen/nested_text_padding\" \n        android:text=\"@string/some_text\" \n        android:textSize=\"@dimen/nested_text_textSize\" /> \n\n</android.support.v4.widget.NestedScrollView> \n\n```", "```kt\n\n    public interface Filling { \n\n        String getName(); \n        int getImage(); \n        int getKcal(); \n        boolean isVeg(); \n        int getPrice(); \n    } \n\n    ```", "```kt\n    public abstract class Cheese implements Filling { \n        private String name; \n        private int image; \n        private String description; \n        private int kcal; \n        private boolean vegetarian; \n        private int price; \n\n        public Cheese() { \n        } \n\n        public abstract String getName(); \n\n        public abstract int getImage(); \n\n        public abstract int getKcal(); \n\n        public abstract boolean getVeg(); \n\n        public abstract int getPrice(); \n    } \n\n    ```", "```kt\n    public class Cheddar extends Cheese implements Filling { \n\n        @Override \n        public String getName() { \n            return \"Cheddar\"; \n        } \n\n        @Override \n        public int getImage() { \n            return R.drawable.cheddar; \n        } \n\n        @Override \n        public int getKcal() { \n            return 130; \n        } \n\n        @Override \n        public boolean getVeg() { \n            return true; \n        } \n\n        @Override \n        public int getPrice() { \n            return 75; \n        } \n    } \n\n    ```", "```kt\n<ImageView \n    android:id=\"@+id/item_image\" \n    android:layout_width=\"@dimen/item_image_size\" \n    android:layout_height=\"@dimen/item_image_size\" \n    android:layout_gravity=\"center_vertical|end\" \n    android:layout_margin=\"@dimen/item_image_margin\" \n    android:scaleType=\"fitXY\" \n    android:src=\"img/placeholder\" /> \n\n```", "```kt\n<TextView \n    android:id=\"@+id/item_name\" \n    android:layout_width=\"0dp\" \n    android:layout_height=\"wrap_content\" \n    android:layout_gravity=\"center_vertical\" \n    android:layout_weight=\"1\" \n    android:paddingBottom=\"@dimen/item_name_paddingBottom\" \n    android:paddingStart=\"@dimen/item_name_paddingStart\" \n    android:text=\"@string/placeholder\" \n    android:textSize=\"@dimen/item_name_textSize\" /> \n\n```", "```kt\n<Button \n    android:id=\"@+id/action_add\" \n    style=\"?attr/borderlessButtonStyle\" \n    android:layout_width=\"wrap_content\" \n    android:layout_height=\"wrap_content\" \n    android:layout_gravity=\"center_vertical|bottom\" \n    android:layout_marginEnd=\"@dimen/action_marginEnd\"\" \n    android:minWidth=\"64dp\" \n    android:padding=\"@dimen/action_padding\" \n    android:paddingEnd=\"@dimen/action_paddingEnd\" \n    android:paddingStart=\"@dimen/action_paddingStart\" \n    android:text=\"@string/action_add_text\" \n    android:textColor=\"@color/colorAccent\" \n    android:textSize=\"@dimen/action_add_textSize\" /> \n\n```", "```kt\n<dimen name=\"item_name_paddingBottom\">12dp</dimen> \n<dimen name=\"item_name_paddingStart\">24dp</dimen> \n<dimen name=\"item_name_textSize\">16sp</dimen> \n\n<dimen name=\"item_image_size\">64dp</dimen> \n<dimen name=\"item_image_margin\">12dp</dimen> \n\n<dimen name=\"action_padding\">12dp</dimen> \n<dimen name=\"action_paddingStart\">16dp</dimen> \n<dimen name=\"action_paddingEnd\">16dp</dimen> \n<dimen name=\"action_marginEnd\">12dp</dimen> \n<dimen name=\"action_textSize\">16sp</dimen> \n\n<dimen name=\"fab_marginEnd\">16dp</dimen> \n\n```", "```kt\n    public class DataAdapter extends RecyclerView.Adapter<DataAdapter.ViewHolder> { \n\n    ```", "```kt\n    private List<Cheese> cheeses; \n\n    public DataAdapter(List<Cheese> cheeses) { \n        this.cheeses = cheeses; \n    } \n\n    ```", "```kt\n    public static class ViewHolder extends RecyclerView.ViewHolder { \n        public ImageView imageView; \n        public TextView nameView; \n\n        public ViewHolder(View itemView) { \n            super(itemView); \n\n            imageView = (ImageView) itemView.findViewById(R.id.item_image); \n            nameView = (TextView) itemView.findViewById(R.id.item_name); \n        } \n    } \n\n    ```", "```kt\n    @Override \n    public DataAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { \n        Context context = parent.getContext(); \n        LayoutInflater inflater = LayoutInflater.from(context); \n\n        View cheeseView = inflater.inflate(R.layout.item_view, parent, false); \n\n        return new ViewHolder(cheeseView); \n    } \n\n    ```", "```kt\n    @Override \n    public void onBindViewHolder(DataAdapter.ViewHolder viewHolder, int position) { \n        Cheese cheese = cheeses.get(position); \n\n        ImageView imageView = viewHolder.imageView; \n        imageView.setImageResource(cheese.getImage()); \n\n        TextView nameView = viewHolder.nameView; \n        nameView.setText(cheese.getName()); \n    } \n\n    ```", "```kt\n    @Override \n    public int getItemCount() { \n        return cheeses.size(); \n    } \n\n    ```", "```kt\nprivate ArrayList<Cheese> buildList() { \n    ArrayList<Cheese> cheeses = new ArrayList<>(); \n\n    cheeses.add(new Brie()); \n    cheeses.add(new Camembert()); \n    cheeses.add(new Cheddar()); \n    cheeses.add(new Emmental()); \n    cheeses.add(new Gouda()); \n    cheeses.add(new Manchego()); \n    cheeses.add(new Roquefort()); \n\n    return cheeses; \n}\n```", "```kt\nRecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view); \n\nArrayList<Cheese> cheeses = buildList(); \nDataAdapter adapter = new DataAdapter(cheeses); \n\nrecyclerView.setLayoutManager(new LinearLayoutManager(this)); \nrecyclerView.setAdapter(adapter); \n\nrecyclerView.setHasFixedSize(true); \n\n```", "```kt\ncheeses.add(new Cheese(\"Emmental\", R.drawable.emmental), 120, true, 65); \n\n```", "```kt\nrecyclerView.setLayoutManager(new StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL)); \n\nrecyclerView.setLayoutManager(new GridLayoutManager(this, 2)); \n\n```", "```kt\n    public class ItemDivider extends RecyclerView.ItemDecoration \n\n    ```", "```kt\n    Private Drawable divider; \n\n    ```", "```kt\n        public ItemDivider(Context context) { \n            final TypedArray styledAttributes = context.obtainStyledAttributes(ATTRS); \n            divider = styledAttributes.getDrawable(0); \n            styledAttributes.recycle(); \n        } \n\n    ```", "```kt\n    @Override \n    public void onDraw(Canvas canvas, RecyclerView parent, RecyclerView.State state) { \n        int left = parent.getPaddingLeft(); \n        int right = parent.getWidth() - parent.getPaddingRight(); \n\n        int count = parent.getChildCount(); \n        for (int i = 0; i < count; i++) { \n            View child = parent.getChildAt(i); \n\n            RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams(); \n\n            int top = child.getBottom() + params.bottomMargin; \n            int bottom = top + divider.getIntrinsicHeight(); \n\n            divider.setBounds(left, top, right, bottom); \n            divider.draw(canvas); \n        } \n    } \n\n    ```", "```kt\n    recyclerView.addItemDecoration(new ItemDivider(this)); \n\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n    <shape  \n        android:shape=\"rectangle\"> \n\n        <size android:height=\"1dp\" /> \n        <solid android:color=\"@color/colorPrimaryDark\" /> \n\n    </shape> \n\n    ```", "```kt\n    public ItemDivider(Context context, int resId) { \n        divider = ContextCompat.getDrawable(context, resId); \n    } \n\n    ```", "```kt\n    recyclerView.addItemDecoration(new ItemDivider(this, R.drawable.item_divider)); \n\n    ```", "```kt\nandroid:src=\"img/ic_cart\" \n\n```", "```kt\n<color name=\"text_primary_dark\">#DE000000</color> \n<color name=\"text_secondary_dark\">#8A000000</color> \n\n<color name=\"text_primary_light\">#FFFFFFFF</color> \n<color name=\"text_secondary_light\">#B3FFFFFF</color> \n\n```", "```kt\n\n<item name=\"android:textColorPrimary\">@color/text_primary_light</item> \n<item name=\"android:textColorSecondary\">@color/text_secondary_light</item> \n\n```", "```kt\n    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); \n    setSupportActionBar(toolbar); \n\n    ```", "```kt\n    FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab); \n    fab.setOnClickListener(new View.OnClickListener() { \n\n        @Override \n        public void onClick(View view) { \n            // SYSTEM DISMISSES DIALOG \n        } \n    }); \n\n    ```", "```kt\n    fab = (FloatingActionButton) findViewById(id.fab); \n    buildDialog(fab); \n\n    ```", "```kt\n    private void buildDialog(FloatingActionButton fab) { \n        fab.setOnClickListener(new View.OnClickListener() { \n\n            @Override \n            public void onClick(View view) { \n                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this); \n\n                LayoutInflater inflater = MainActivity.this.getLayoutInflater(); \n\n            builder.setTitle(R.string.checkout_dialog_title) \n\n                    .setMessage(R.string.checkout_dialog_message) \n\n                    .setIcon(R.drawable.ic_sandwich_primary) \n\n                    .setPositiveButton(R.string.action_ok_text, new DialogInterface.OnClickListener() { \n\n                        public void onClick(DialogInterface dialog, int id) { \n                            Intent intent = new Intent(MainActivity.this, CheckoutActivity.class); \n                            startActivity(intent); \n                        } \n                    }) \n\n                    .setNegativeButton(R.string.action_cancel_text, new DialogInterface.OnClickListener() { \n\n                        public void onClick(DialogInterface dialog, int id) { \n                            // SYSTEM DISMISSES DIALOG \n                        } \n                    }); \n\n                AlertDialog dialog = builder.create(); \n                dialog.show(); \n            } \n        }); \n    } \n\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n    <LinearLayout  \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"match_parent\" \n        android:orientation=\"vertical\" \n        android:theme=\"@style/AppTheme\"> \n\n        <ImageView \n            android:id=\"@+id/dialog_title\" \n            android:layout_width=\"match_parent\" \n            android:layout_height=\"@dimen/dialog_title_height\" \n            android:src=\"img/dialog_title\" /> \n\n        <TextView \n        android:id=\"@+id/dialog_content\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:paddingStart=\"@dimen/dialog_message_padding\" \n        android:text=\"@string/checkout_dialog_message\" \n        android:textAppearance=\"?android:attr/textAppearanceSmall\" \n        android:textColor=\"@color/text_secondary_dark\" /> \n\n    </LinearLayout> \n\n    ```", "```kt\n    private void buildDialog(FloatingActionButton fab) { \n        fab.setOnClickListener(new View.OnClickListener() { \n\n            @Override \n            public void onClick(View view) { \n                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this); \n\n                LayoutInflater inflater = MainActivity.this.getLayoutInflater(); \n\n                builder.setView(inflater.inflate(layout.checkout_dialog, null)) \n\n                        .setPositiveButton(string.action_ok_text, new DialogInterface.OnClickListener() { \n                            public void onClick(DialogInterface dialog, int id) { \n                                Intent intent = new Intent(MainActivity.this, CheckoutActivity.class); \n                                startActivity(intent); \n                            } \n                        }) \n\n                        .setNegativeButton(string.action_cancel_text, new DialogInterface.OnClickListener() { \n                            public void onClick(DialogInterface dialog, int id) { \n                                // System dismisses dialog \n                            } \n                        }); \n\n                AlertDialog dialog = builder.create(); \n                dialog.show(); \n\n                Button cancelButton = dialog.getButton(DialogInterface.BUTTON_NEGATIVE); \n                cancelButton.setTextColor(getResources().getColor(color.colorAccent)); \n\n                Button okButton = dialog.getButton(DialogInterface.BUTTON_POSITIVE); \n                okButton.setTextColor(getResources().getColor(color.colorAccent)); \n            } \n        }); \n    } \n\n    ```", "```kt\n<string name=\"action_ok_text\">Eat now</string> \n<string name=\"action_cancel_text\">Continue</string> \n\n```", "```kt\n    private void initItemTouchHelper() { \n        ItemTouchHelper.SimpleCallback callback = new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) { \n\n            @Override \n            public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder viewHolder1) { \n                return false; \n            } \n\n            @Override \n            public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) { \n                int position = viewHolder.getAdapterPosition(); \n                adapter.removeItem(position); \n            } \n        }; \n\n        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(callback); \n        itemTouchHelper.attachToRecyclerView(recyclerView); \n    } \n\n    ```", "```kt\n    InitItemTouchHelper(); \n\n    ```", "```kt\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(layout.activity_main); \n\n        Toolbar toolbar = (Toolbar) findViewById(id.toolbar); \n        setSupportActionBar(toolbar); \n\n        final ArrayList<Cheese> cheeses = buildList(); \n        adapter = new DataAdapter(cheeses); \n\n        recyclerView = (RecyclerView) findViewById(id.recycler_view); \n        recyclerView.setLayoutManager(new LinearLayoutManager(this)); \n        recyclerView.addItemDecoration(new ItemDivider(this)); \n        recyclerView.setAdapter(adapter); \n\n        initItemTouchHelper(); \n\n        fab = (FloatingActionButton) findViewById(id.fab); \n        buildDialog(fab); \n    } \n\n    ```", "```kt\npublic void removeItem(int position) { \n    cheeses.remove(position); \n    notifyItemRemoved(position); \n    notifyItemRangeChanged(position, cheeses.size()); \n\n```", "```kt\nif (direction == ItemTouchHelper.LEFT) { \n    Log.d(DEBUG_TAG, \"Swiped LEFT\"); \n} else { \n    Log.d(DEBUG_TAG, \"Swiped RIGHT\"); \n} \n\n```", "```kt\n    public interface LayoutView { \n\n        ViewGroup.LayoutParams layoutParams(); \n        int textSize(); \n        int content(); \n        Shading shading(); \n        int[] padding(); \n    } \n\n    ```", "```kt\n    public interface Shading { \n\n        int shade(); \n        int background(); \n    } \n\n    ```", "```kt\n    public class HeaderShading implements Shading{ \n\n        @Override \n        public int shade() { \n            return R.color.text_primary_dark; \n        } \n\n        @Override \n        public int background() { \n            return R.color.title_background; \n        } \n    } \n\n    public class ContentShading implements Shading{ \n\n        ... \n            return R.color.text_secondary_dark; \n        ... \n\n        ... \n            return R.color.content_background; \n        ... \n    } \n\n    ```", "```kt\n    public abstract class Header implements LayoutView { \n\n        @Override \n        public Shading shading() { \n            return new HeaderShading(); \n        } \n    } \n\n    public abstract class Content implements LayoutView { \n\n        ... \n            return new ContentShading(); \n        ... \n    } \n\n    ```", "```kt\n    public class Headline extends Header { \n\n        @Override \n        public ViewGroup.LayoutParams layoutParams() { \n            final int width = ViewGroup.LayoutParams.MATCH_PARENT; \n            final int height = ViewGroup.LayoutParams.WRAP_CONTENT; \n\n            return new ViewGroup.LayoutParams(width,height); \n        } \n\n        @Override \n        public int textSize() { \n            return 24; \n        } \n\n        @Override \n        public int content() { \n            return R.string.headline; \n        } \n\n        @Override \n        public int[] padding() { \n            return new int[]{24, 16, 16, 0}; \n        } \n    } \n\n    public class SubHeadline extends Header { \n\n        ... \n\n        @Override \n        public int textSize() { \n            return 18; \n        } \n\n        @Override \n        public int content() { \n            return R.string.sub_head; \n        } \n\n        @Override \n        public int[] padding() { \n            return new int[]{32, 0, 16, 8}; \n        } \n        ... \n\n    ```", "```kt\n    public class SimpleContent extends Content { \n\n        @Override \n        public ViewGroup.LayoutParams layoutParams() { \n            final int width = ViewGroup.LayoutParams.MATCH_PARENT; \n            final int height = ViewGroup.LayoutParams.MATCH_PARENT; \n\n            return new ViewGroup.LayoutParams(width, height); \n        } \n\n        @Override \n        public int textSize() { \n            return 14; \n        } \n\n        @Override \n        public int content() { \n            return R.string.short_text; \n        } \n\n        @Override \n        public int[] padding() { \n            return new int[]{16, 18, 16, 16}; \n        } \n    } \n\n    public class DetailedContent extends Content { \n\n        ... \n            final int height = ViewGroup.LayoutParams.WRAP_CONTENT; \n        ... \n\n        @Override \n        public int textSize() { \n            return 12; \n        } \n\n        @Override \n        public int content() { \n            return R.string.long_text; \n        } \n\n        ... \n\n    ```", "```kt\npublic class LayoutBuilder { \n\n    public List<LayoutView> displayDetailed() { \n        List<LayoutView> views = new ArrayList<LayoutView>(); \n        views.add(new Headline()); \n        views.add(new SubHeadline()); \n        views.add(new DetailedContent()); \n        return views; \n    } \n\n    public List<LayoutView> displaySimple() { \n        List<LayoutView> views = new ArrayList<LayoutView>(); \n        views.add(new Headline()); \n        views.add(new SimpleContent()); \n        return views; \n    } \n} \n\n```", "```kt\npublic class MainActivity extends AppCompatActivity { \n    TextView textView; \n    LinearLayout layout; \n\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        final int width = ViewGroup.LayoutParams.MATCH_PARENT; \n        final int height = ViewGroup.LayoutParams.WRAP_CONTENT; \n\n        super.onCreate(savedInstanceState); \n\n        layout = new LinearLayout(this); \n        layout.setOrientation(LinearLayout.VERTICAL); \n        layout.setLayoutParams(new ViewGroup.LayoutParams(width, height)); \n\n        setContentView(layout); \n\n        // COULD USE layoutBuilder.displaySimple() INSTEAD         \n        LayoutBuilder layoutBuilder = new LayoutBuilder(); \n        List<LayoutView> layoutViews = layoutBuilder.displayDetailed(); \n\n                for (LayoutView layoutView : layoutViews) { \n            ViewGroup.LayoutParams params = layoutView.layoutParams(); \n            textView = new TextView(this); \n\n            textView.setLayoutParams(params); \n            textView.setText(layoutView.content()); \n            textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, layoutView.textSize()); \n            textView.setTextColor(layoutView.shading().shade()); \n            textView.setBackgroundResource(layoutView.shading().background()); \n\n            int[] pad = layoutView.padding(); \n            textView.setPadding(dp(pad[0]), dp(pad[1]), dp(pad[2]), dp(pad[3])); \n\n            layout.addView(textView); \n        } \n    } \n} \n\n```", "```kt\npublic int dp(int px) { \n    final float scale = getResources().getDisplayMetrics().density; \n    return (int) (px * scale + 0.5f); \n} \n\n```"]