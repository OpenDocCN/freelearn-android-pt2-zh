- en: Chapter 12. Social Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have covered many of the aspects of mobile app development.
    However, even the best designed and most useful application can benefit enormously
    from employing social media and other web content.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The sandwich builder app we covered in earlier chapters is a good example of
    an app that could have its circulation boosted by generating Facebook likes and
    tweets, and these and other social media all provide technologies to incorporate
    such features directly into our app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: As well as incorporating existing social media platforms into our apps, we can
    embed any web content we like right into an activity with the **WebView** class.
    This extension of the view class can be used to add a single web page to an app
    or even build a complete web application. The WebView class is extremely useful
    when we have products or data that need regular updating, as this can be achieved
    without having to recode and release updates.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: We will start this chapter by taking a look at the WebView class and see how
    we can incorporate JavaScript to give pages functionality; and then we'll explore
    some of the social media SDKs that allow us to incorporate many of their features,
    such as sharing and posting and liking.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Open a web page in a WebView
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open a web page in a browser
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable and use JavaScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a JavaScriptInterface to bind script with native code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write efficient HTML for web apps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Facebook app
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a LikeView button
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Facebook sharing interface
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Twitter
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending tweets
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding web pages
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Including a single web page in an activity or fragment using the WebView class
    is almost as simple as adding any other kind of view. There are three easy steps,
    as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission to the manifest:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `WebView` itself looks like this:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, the Java for adding page is as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That's all there is to it, although you would probably want remove or reduce
    the default 16dp margins for most pages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding web pages](img/image_12_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: This system is ideal for when dealing with pages that have been specifically
    designed for our app. If want to send our user to any other web page, then it
    is considered better practice to use a link, so that the user can open it with
    their chosen browser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Including a link
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To do this, any clickable view can act as the link, and the click listener
    can then respond like so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that the correct use of web views is to use pages that are specifically
    designed to be an integral part of our app. Although the user needs to know that
    they are online (as charges may apply) our web views should look and behave like
    the rest of the app. It is perfectly possible to have more than one web view on
    a screen and to mix them with other widgets and views, and if we are working on
    an app that stores user details, this is often more easily managed using web tools
    rather than the Android APIs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The WebView class comes with a comprehensive array of settings that can be used
    to control a lot of properties, such as zoom functionality, image loading, and
    display settings.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Configuring WebSettings and JavaScript
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we can design our web views to look like other app components, they
    do of course posses a large number of web-specific properties and can, as web
    elements, be navigated as one would in a browser. These and other settings are
    managed elegantly by the **WebSettings** class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'This class consists largely of a long series of setters and getters. The entire
    collection can be initialized like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can now use this object to query the sate of our web views and to configure
    them to our wishes. For example, JavaScript is disabled by default but can be
    changed easily:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is a large number of such methods, all of which are listed in the documentation:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These settings are not the only way we can take control over our web view,
    and it has some very useful methods of its own, most of which are listed here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '`getUrl()` - Returns the web view''s current URL'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getTitle()` - Returns the page''s title if specified in the HTML'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAllAsync(String)` - Simple search function, highlighting occurrences of
    the given string'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clearHistory()` - Empties the current history cache'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`destroy()` - Closes and empties the web view'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canGoForward()` and `canGoBack()` - Enables the local history stack'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These methods, along with web settings, allow us to do a lot more with a web
    view than simply access changeable data. We can, with a little effort, provide
    much of the functionality of a web browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Whether we choose to present our web views as a seamless part of our app or
    provide the user with a fuller internet based experience, we will most likely
    want to include some JavaScript in our pages. We saw earlier how to enable JavaScript,
    but this only allows us to run standalone script; what would be far better would
    be if we could call an Android method from JavaScript, and this is exactly what
    the `JavaScriptInterface` does.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of an interface like this, to manage the natural incompatibilities
    between the two languages, and is of course a classic example of the **adapter
    design pattern**. To see how this can be achieved, follow these steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following fields to whichever activity you are using for the task:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit the `onCreate()` method like so:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the adapter class (this can also be an inner class). The `newActivity()`
    method could be anything we chose. Here, just by way of example, it starts a new
    activity:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All that remains is to write the JavaScript to call our native method. Any
    clickable HTML object will do here. Create the following button on your page:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, just define the function in your script, like so:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This process is wonderfully easy to implement and makes the web view a very
    powerful component, and the ability to call our Java methods from our web pages
    means we can combine web functionality to any app without having to compromise
    mobile functionality.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Although you will require no assistance in building web pages, there are one
    or two points that need making regarding best practice.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Writing HTML for WebViews
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is tempting to think that the design of a mobile web app would follows similar
    conventions to the design of mobile web pages, and in many ways it does, but there
    are one or two subtle differences that the following list points out:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you are using the correct `DOCTYPE`, which in our case is this:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating separate CSS and script files can cause a slow connection. Keep this
    code inline, ideally inside the head or at the very end of the body. Sadly, this
    means that we have to avoid CSS and web frameworks, and features such as material
    design have to be coded manually.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid horizontal scrolling where possible. If your app absolutely requires this
    then use tabs, or better still, a sliding navigation drawer.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have seen, the WebView is a powerful component and makes sophisticated
    mobile/web hybrid apps very easy to develop. The subject is a large one and one
    could realistically devote an entire book to the subject. For now, though, it
    is enough just to understand the scope and power of this tool.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Using built-in web tools is just one way that we can harness the power of the
    Internet. Being able to connect to social media is probably the most efficient
    and cheapest methods of promoting a product. One of the most useful and simplest
    to set up is Facebook.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with Facebook
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not only is Facebook one of the largest social networks, it is also very nicely
    set up to assist those wishing to promote their products. The ways that this can
    work varies from providing automatic logins, customizable advertising, and the
    ability for users to share products they *like* with others.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'To incorporate Facebook features into our Android applications, we will need
    the **Facebook SDK for Android**, and to make the most of this we will also need
    a Facebook App ID, which will require creating a simple app on Facebook:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting with Facebook](img/image_12_002.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Adding the Facebook SDK
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step in adding Facebook functionality to our apps is to download
    the Facebook SDK. This can be found here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The SDK is a powerful suite of tools, including views, classes, and interfaces
    that Android developers will be very familiar with. The Facebook SDK can be thought
    of as a useful extension of our native SDK.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'A handy quick start guide can be found on the Facebook developer pages, but
    as is always the case in such situations, it is far more instructive to follow
    the process manually, as the following steps demonstrate:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio project with a minimum API level of 15 or higher.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the modular `build.gradle` file and make the changes highlighted here:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following permission to the manifest file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then import the following libraries to your main activity or application class:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, initialize the SDK from the `onCreate()` method of your launch activity,
    like so:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is not all that we need to progress, but before we can go any further,
    we will need a Facebook App ID, which we can only acquire by creating an app on
    Facebook.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining a Facebook App ID
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you will have seen, Facebook apps can be very sophisticated, and their functions
    are limited only by their creator's imagination and coding prowess. They can,
    and often are, nothing more than a simple page, and when our emphasis is on an
    Android app, we need only the simplest of Facebook apps.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, use the Facebook quick start process, which can be found here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Obtaining a Facebook App ID](img/image_12_003.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on **Create App ID**, you will be taken to your developer dashboard.
    The App ID can be found in the top-left of the window. The following two steps
    demonstrate how to complete the process we started earlier:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `res/values/strings.xml` file and add the following value:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now add the following meta-data to the application tag of the manifest:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This completes the process of connecting our Android app to its Facebook counterpart,
    but we need to compliment this connection by providing information about our mobile
    app to our Facebook app.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will need to return to our Facebook developer dashboard and select
    **Developer Settings** from your profile (top right) drop-down and then the **Sample
    App** tab. This will request you enter your package name, launching activity,
    and **hash key**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are developing an app you intend to publish or use the same hash key
    for all your projects, you will know it, or have it to hand. Otherwise, the following
    code will find it for you:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you enter this code directly, Studio will offer you a selection of which
    libraries to import via the quick-fix facility. The correct choices are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There is more to it than one might imagine, but our app is now connected to
    Facebook, and we can take advantage of all the promotional opportunities. One
    of the most important of these is the Facebook Like button.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Adding a LikeView
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you would imagine, the Facebook SDK comes equipped with the traditional
    *like* button. This is provided as a view and can be added like any other view:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Adding a LikeView](img/image_12_004.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'As with other views and widgets, we can then modify this view from within a
    Java activity. There are quite a lot of things we can do with this and other Facebook
    views, and Facebook documents these thoroughly. The LikeView documentation, for
    example, can be found here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For now, we can just consider what it is the user is liking. This achieved
    with the `setObjectId()` method, which takes a string argument that can be either
    your app ID or a URL, like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are one or two differences between in-app Like views and those found on
    the Web. Unlike web likes, the Android like view will not inform the user how
    many other users have also clicked like and on a device that does not have Facebook
    installed, our like view will not work at all. These limitations of the Android
    LikeView are easily countered by using a WebView to contain the like view, which
    will then act like it would on the web.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: The LikeView gives us and users the opportunity to see how popular a particular
    item is, but to really harness the power of this social platform, we want users
    to promote us by the modern version of word-of-mouth, that is, by *sharing* our
    products with their friends.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Content builders
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a large number of likes is a great way to drive traffic your way, but
    there is an economy of scale at work here that favors apps with very large numbers
    of downloads. Apps do not have to be huge to be successful, especially if they
    are providing a personal or local service, such as delivering custom-made sandwiches.
    In these cases, a label stating that only 12 people *like* something is not much
    of a recommendation. However, if those same people share how great their sandwich
    is with their friends, then we have a very powerful advertising tool at our disposal.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the main things that has made Facebook such a successful platform is
    its understanding that human beings are more interested and influenced by their
    friends than nameless strangers, and for small to medium enterprises, this can
    be invaluable. At its simplest we can simply add a share button, just as we did
    the like button, and this will open the share dialog. The **ShareButton** is as
    easy to add as the LikeView, as can be seen here:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will also need to set up a content provider in our manifest. The following
    code should be inserted into the root node:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Unlike the like view, with sharing we have more choice over the content type
    that we share and we can choose between sharing links, images, videos, and even
    multimedia.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The Facebook SDK provides a class for each content type and a builder for combining
    more than one item into a single shareable object.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'When sharing photos or images, the `SharePhotoContent` class uses the Bitmap
    object, which is a more sophisticated and parcelable image format than the drawables
    we have been using so far. Although there are many ways to create a bitmap, including
    dynamically from code, it is also relatively simple to convert any of our drawables
    into a bitmap, as demonstrated in this snippet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This can then be defined as shareable content in these two simple steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `ShareVideo` and `ShareVideoContent` classes work in an almost identical
    fashion and use the file''s URI as its source. If you have not worked with video
    files and URIs before, the simplest way to include them is explained in these
    short steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: If you have not done so already, create a folder called `raw` directly inside
    your `res` directory.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place your video(s) in this folder.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the filename contains no spaces or capital letters and is an accepted
    format, such as `mp4`, `wmv`, or `3gp`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code can then be used to extract the video''s URI:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This URI can now be used to define our shared video content, like so:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'These techniques are very handy for sharing single items, and even several
    items of the same kind, but there are of course times when we would like to mix
    content, and this can be achieved with the more generic Facebook SDK `ShareContent`
    class. The following code demonstrates how this can be done:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: These simple classes provide a flexible way to allow users to share content
    with their friends. There is also a send button that allows users to share our
    content privately with individuals or groups, and although useful to the user,
    this function serves little commercial purpose.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'A valuable tool when testing shared content is provided by the Facebook Sharing
    Debugger, which can be found here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is particularly useful, as there is no other simple way to see how our
    shared content is actually viewed by others.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Content builders](img/image_12_005.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: Facebook is not only one of the most popular social networks; it is also has
    a very well-thought-out SDK and is probably the most developer-friendly social
    network. This, of course, is no reason to ignore the others, chief among which
    is Twitter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Twitter
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twitter provides a very different social platform to Facebook, and people use
    it very differently as well. It is, however, another powerful tool in our arsenal,
    and like Facebook, it offers unparalleled promotional opportunities.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Twitter employs a powerful framework integration tool called **Fabric** that
    allows developers to integrate Twitter functionality into our applications. Fabric
    can be downloaded directly into Android Studio as a plugin. Before downloading
    the plugin, it is necessary to register with Fabric. This is free and can be found
    at fabric.io.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Once registered, open Android Studio and then select **Browse Repositories...**
    from **Settings > Plugins**:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating Twitter](img/image_12_006.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Once installed, Fabric has walk-through tutorial system and requires no further
    instruction. However it is not necessary to use this framework at all if all your
    app needs to do is post single tweets as this can be achieved with the vanilla
    SDK.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Sending tweets
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fabric is a sophisticated tool and, thanks to its inbuilt tuition, has a fast
    learning curve, but it still takes time to master and provides a lot of functionality
    that most apps won''t need. If all you want to do is have your app post a single
    tweet, it can be done without Fabric, like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Even if all we ever do with Twitter is send tweets, this is still a very useful
    social function, and if we choose to take advantage of Fabric, we can build apps
    that rely heavily on Twitter, posting live streams and performing complex traffic
    analysis. As with Facebook, it is also always a good idea to think about what
    can be achieved with a web view, and building partial web apps into our mobile
    one is often the simplest solution.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们对Twitter的所有操作仅限于发送推文，这仍然是一个非常实用的社交功能。如果我们选择利用Fabric，我们可以构建严重依赖Twitter的应用程序，发布实时流并进行复杂的流量分析。与Facebook一样，考虑使用WebView可以实现的功能总是一个好主意，将部分网页应用嵌入我们的移动应用通常是最简单的解决方案。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Integrating social media into our mobile apps is a powerful tool and can make
    all the difference to the success of an app. In this chapter, we have seen how
    Facebook and Twitter provide software tools to facilitate this, and of course,
    other social media, such as Instagram and WhatsApp, provide similar developer
    tools.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将社交媒体集成到我们的移动应用中是一项强大的工具，它可以使应用程序的成功与否产生巨大差异。在本章中，我们看到了Facebook和Twitter提供了哪些软件开发工具来促进这一点，当然，其他社交媒体，如Instagram和WhatsApp，也提供了类似的开发工具。
- en: 'Social media is an ever-changing world, and new platforms as well as development
    tools are appearing all the time, and there is no reason to believe that Twitter
    and even Facebook might one day go the way of MySpace. This is yet another reason
    to consider using WebViews where possible: creating simple web apps within our
    main apps allows us a higher degree of flexibility.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体是一个不断变化的世界，新的平台和开发工具层出不穷，没有理由相信Twitter甚至Facebook有一天不会步MySpace的后尘。这也是我们尽可能考虑使用WebView的另一个原因：在主应用内创建简单的网页应用可以让我们拥有更高的灵活性。
- en: This brings us almost to the end of our journey, and in the next chapter we
    will look at what is generally the final stage of development, publication. However,
    this is also the point where we have to consider potential income, particularly
    advertising and in-app purchasing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎是我们旅程的终点，在下一章我们将要了解通常开发过程的最后阶段——发布。然而，这也是我们必须考虑潜在收入的时候，尤其是广告和应用程序内购买。
