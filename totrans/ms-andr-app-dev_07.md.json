["```kt\n@Override\npublic void onClick(View view) {\n  Intent intent = new Intent(view.getContext(), OfferDetailActivity.class);\n  JobOffer offer = mOfferList.get(getPosition());\n  intent.putExtra(\"job_title\", offer.getTitle());\n  intent.putExtra(\"job_description\",offer.getDescription());\n  intent.putExtra(\"job_image\",offer.getImageLink());\n  view.getContext().startActivity(intent);\n}\n```", "```kt\npublic static Bitmap getImage(String urlString) {\n\n  URL url = null;\n\n  try {\n    url = new URL(urlString);\n  } catch (MalformedURLException e) {\n    return null;\n  }\n\n  HttpURLConnection connection = null;\n  try {\n    connection = (HttpURLConnection) url.openConnection();\n    connection.connect();\n    int responseCode = connection.getResponseCode();\n    if (responseCode == 200) {\n      return BitmapFactory.decodeStream(connection.getInputStream());\n    } else\n      return null;\n  } catch (Exception e) {\n    return null;\n  } finally {\n    if (connection != null) {\n      connection.disconnect();\n    }\n  }\n}\n```", "```kt\nString imageLink = getIntent().getStringExtra(\"job_image\");\nImageView imageViewLogo = (ImageView) findViewById(R.id.logo);\n\ndisplayImageFromUrl(imageViewLogo,imageLink);\n```", "```kt\nString imageLink = getIntent().getStringExtra(\"job_image\");\nImageView imageViewLogo = (ImageView) findViewById(R.id.logo);\n\ndisplayImageFromUrl(imageViewLogo,imageLink);\n\npublic void displayImageFromUrl(ImageView imageView, String link){\n\n  new AsyncTask<Object,Void,Bitmap>(){\n\n    ImageView imageView;\n    String link;\n\n    @Override\n    protected Bitmap doInBackground(Object... params) {\n      imageView = (ImageView) params[0];\n      link = (String) params[1];\n\n      return ImageUtils.getImage(link);\n    }\n\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n      super.onPostExecute(bitmap);\n      imageView.setImageBitmap(bitmap);\n    }\n\n  }.execute(imageView, link);\n}\n```", "```kt\npublic ImageRequest(String url, Response.Listener<Bitmap> listener, int maxWidth, int maxHeight, Config decodeConfig, Response.ErrorListener errorListener) { â€¦ }\n```", "```kt\npublic void displayImageWithVolley(final ImageView imageView, String url){\n\n  ImageRequest request = new ImageRequest(url,\n  new Response.Listener<Bitmap>() {\n    @Override\n    public void onResponse(Bitmap bitmap) {\n      imageView.setImageBitmap(bitmap);\n    }\n  }, 0, 0, null,\n  new Response.ErrorListener() {\n    public void onErrorResponse(VolleyError error) {\n\n    }\n  });\n\n  MAApplication.getInstance().getRequestQueue().add(request);\n}\n```", "```kt\nmyNetworkImageView.setImage(urlString, imageloader);\n```", "```kt\nmyNetworkImageView.sesetDefaultImageResId(R.id.default_image);\nmyNetworkImageView.setErroImageResId(R.id.image_not_found);\n```", "```kt\n@Override\npublic void onCreate() {\n  super.onCreate();\n\n  sInstance = this;\n\n  mRequestQueue = Volley.newRequestQueue(this);\n\n  mImageLoader = new ImageLoader(mRequestQueue, new myImageCache());\n```", "```kt\npublic class LruBitmapCache extends LruCache<String, Bitmap>\nimplements ImageCache {\n\n  public LruBitmapCache(int maxSize) {\n    super(maxSize);\n  }\n\n  public LruBitmapCache(Context ctx) {\n    this(getCacheSize(ctx));\n  }\n\n  @Override\n  protected int sizeOf(String key, Bitmap value) {\n    return value.getRowBytes() * value.getHeight();\n  }\n\n  @Override\n  public Bitmap getBitmap(String url) {\n    return get(url);\n  }\n\n  @Override\n  public void putBitmap(String url, Bitmap bitmap) {\n    put(url, bitmap);\n  }\n\n  // Returns a cache size equal to approximately three screens worth of images.\n  public static int getCacheSize(Context ctx) {\n    final DisplayMetrics displayMetrics = ctx.getResources().\n    getDisplayMetrics();\n    final int screenWidth = displayMetrics.widthPixels;\n    final int screenHeight = displayMetrics.heightPixels;\n    // 4 bytes per pixel\n    final int screenBytes = screenWidth * screenHeight * 4;\n\n    return screenBytes * 3;\n  }\n}\n```", "```kt\n<vector  android:height=\"64dp\" android:width=\"64dp\" android:viewportHeight=\"600\" android:viewportWidth=\"600\">\n  <group>\n    <path android:fillColor=\"@color/black_primary\" android:pathData=\"M12 36l17-12-17-12v24zm20-24v24h4V12h-4z\" />\n  </group>\n</vector>\n```", "```kt\n<svg  width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\n  <path d=\"M12 36l17-12-17-12v24zm20-24v24h4V12h-4z\"/>\n</svg>\n```", "```kt\n<objectAnimator\n\n  android:duration=\"6000\"\n  android:propertyName=\"rotation\"\n  android:valueFrom=\"0\"\n  android:valueTo=\"360\" />\n```", "```kt\n<set\n  >\n  <objectAnimator\n    android:duration=\"3000\"\n    android:propertyName=\"pathData\"\n    android:valueFrom=\"M300,70 l 0,-70 70,70 0,0   -70,70z\"\n      android:valueTo=\"M300,70 l 0,-70 70,0  0,140 -70,0 z\"\n    android:valueType=\"pathType\"/>\n</set>\n```", "```kt\n<animated-vector\n\n  android:drawable=\"@drawable/vectordrawable\" >\n  <target\n    android:name=\"rotationGroup\"\n    android:animation=\"@anim/rotation\" />\n  <target\n    android:name=\"v\"\n    android:animation=\"@anim/path_morph\" />\n</animated-vector>\n```", "```kt\nprivate final WeakReference<View> mAnchorViewRef;\n```"]