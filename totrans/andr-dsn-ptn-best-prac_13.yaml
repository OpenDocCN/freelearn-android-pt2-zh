- en: Chapter 13. Distribution Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With most of the important aspects of Android development covered, we are left
    with just the processes of deploying and publishing. Simply getting an app published
    on the Google Play store is not a complex process, but there are a few tips and
    tricks that we can apply to maximize an app's potential reach, and of course,
    there is a growing number of ways to make money from our apps.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at how to increase backwards compatibility beyond
    that provided by the support libraries, and then move on to see how the registration
    and distribution processes work, and then we will explore the various ways to
    make our application pay.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare an app for distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate a digital certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register as a Google Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare promotional material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish an app on Google Play store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporate in-app billing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include advertisements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending platform scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The support libraries we have been working with throughout the book do a marvelous
    job of making our apps available on older devices, but they do not work for all
    situations, and many new innovations simply cannot be realized on some older machines.
    Taking a look at the following device dashboard, it is obvious that we would like
    to extend our apps back to API level 16:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending platform scope](img/B05685_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have seen how the AppCompat library enables our apps to run on platforms
    even older than this, but we have to avoid using some features. For example, the
    `view.setElevation()` method (along with other material features) will not work
    below API level 21 and will cause the machine to crash if it is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be tempting to think that we could simply sacrifice such features
    for the benefit of reaching a wider audience, but fortunately, this is not necessary
    as it is possible to detect dynamically which platform our app is running on with
    the following conditional clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is always down to the individual developer, but this slight drop in quality
    is often well worth the large increase in potential user adoption.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is a simple one, however, and adding this kind of dynamic
    backwards compatibility can often require a lot of extra coding. A good example
    might be the camera2 API, which is far more sophisticated than its predecessor
    but only available on devices carrying API 21 and higher. In such a case, we can
    apply exactly the same principle but would need to set up a more sophisticated
    system. The clause might cause different methods to be called or even different
    activities to be launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we choose to implement this, we can of course, employ design patterns.
    There are several that could be used here, but the most suitable would probably
    be the strategy pattern along the lines of the one seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending platform scope](img/image_13_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This approach may often require a considerable amount of extra coding, but the
    expanded potential market often makes that well worth the extra work. Once we
    have set the scope of our app like this, it is then ready to publish.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It goes without saying that you will have exhaustively tested your app on a
    wide variety of handsets and emulators and probably prepared your promotional
    material and checked out Google Play Policies and Agreements. There are many things
    to consider before publication, such as content rating and country distribution.
    From a programming point of view, there are just three things that we need to
    check before we proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove all logging from the project such as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure you have an application `label` and `icon` declared in your manifest.
    Here''s an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure you have declared all the necessary permissions in the manifest. Here''s
    an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We are now just three steps from seeing our app on the Google Play store. All
    we need to do is generate a Signed Release APK, register as a Google Play Developer
    and, finally upload our app to the store or publish it on our own site. There
    are also one or two other ways of publishing an app and we will see how they are
    done at the end of the section. First, though, we will begin by generating an
    APK that is ready for uploading onto the Google Play store.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a signed APK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All published Android apps require a digitally signed certificate. This is
    used to prove the authenticity of an app. Unlike many other digital certificates,
    there is no authority and you hold the signed key, which clearly has to be securely
    protected. To do this, we need to generate a private key and then use it to generate
    a signed APK. There are some very handy tools on GitHub for facilitating this
    process, but here, to aid our understanding, we will follow the traditional route.
    This can all be done in the Android Studio with the Generate Signed APK Wizard.
    These steps will take you through it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the app you want to publish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Generate Signed APK Wizard from the **Build | Generate Signed APK...**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create new...** on the first screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, provide a path and name for your key store along with a
    strong password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for the Alias.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a Validity of greater than 27 years, like so:![Generating a signed APK](img/image_13_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in at least one of the Certificate fields. Click on **OK**, and you will
    be taken back to the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **release** as the Build Variant and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have a signed APK ready for publication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key store (a `.jks` file) can be used to store any number of keys (aliases).
    It is perfectly fine to use the same key for all your apps, and you must use the
    same key when producing updates of an app. Google require certificates to be valid
    until at least 22 October 2033, and any number that surpasses this date will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**IMPORTANT ** Keep at least one secure backup of your keys. If you lose them,
    you will not be able to develop future versions of those apps.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have our digital signature, we are ready to register as a developer
    with Google.
  prefs: []
  type: TYPE_NORMAL
- en: Registering as a developer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with signing an APK, registering as a developer is similarly straightforward.
    Note that Google charge a one-off fee of USD 25 and 30% of any revenue your app
    may generate. The following directions assume that you have already have a Google
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Review **Supported Locations** at the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1](http://support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the Developer Play Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Sign in with your Google account and enter the following information:![Registering
    as a developer](img/image_13_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read and accept the **Google Play Developer Distribution Agreement**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pay the USD 25 with Google Checkout, creating an account if necessary, and that's
    it, you are now a registered Google Developer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you intend to make your apps available worldwide, then it is always worth
    checking the Supported Locations page, as it changes regularly. The only thing
    left to do is upload our app, which we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an app on the Google Play store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Uploading and publishing our apps to the Play store is done through the **Developer
    Console**. As you will see, there is a lot of information and promotional material
    that we could provide about our app during this process. Providing you have followed
    the previous steps in this chapter and have a release-ready signed `.apk` file,
    then complete the following instructions to publish it. Alternatively, you may
    just want to have a look at what is involved at this point and what form the promotional
    material will take. In this case, ensure you have the following four images and
    a signed APK and select **Save Draft** at the end rather than **Publish app**:'
  prefs: []
  type: TYPE_NORMAL
- en: At least two screenshots of your app. These must not have any side that is shorter
    than 320 px or longer than 3840 px.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want your app to be visible on the Play store to users searching for
    apps designed for tablets, then you should prepare at least one 7 '' and one 10
    '' screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Hi-res icon image of 512 x 512 px.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Feature Graphic of 1024 x 500 px.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With these images prepared, and a signed .`apk`, we have all we need to start.
    Decide how much, if anything, you wish to charge for the app and then follow these
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Developer Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supply a **Title** and click on the **Upload APK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Upload your first APK to Production**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate your signed `app-release.apk` file. It will be in `AndroidStudioProjects\YourApp\app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop this into the space suggested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When this is completed, you will be taken to the application page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Work your way through the top four sections:![Publishing an app on the Google
    Play store](img/image_13_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete all required fields until the Publish app button becomes clickable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need help, the **Why can't I publish?** link above the button will list
    uncompleted compulsory fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all the required fields are completed, click on the P**ublish app** ( or
    **Save draft**) button at the top of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You are now a published Android developer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now know how to publish our apps on the Play store. There are, of course,
    many other app markets, and they all have their own uploading procedures. Google
    Play, however, provides the widest possible audience and is the obvious choice
    for publication.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the Play store makes the ideal market place, it is still well worth
    looking at two alternative methods of distributing.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing by e-mail and on websites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first of these two methods is as simple as it sounds. If you attach the
    APK to an e-mail and it's opened on an Android device, the user will be invited
    to install the app when the attachment is opened. On more recent devices, they
    will be able to tap an install button directly in the e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For both these methods, your users will have to allow the installation of unknown
    sources in the security settings of their devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Distributing your app from your website is almost as simple as e-mailing it.
    All you need to do is host the APK file on your site somewhere and provide a download
    link along the lines of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When browsing your site from and Android device, a tap on your link will install
    your app on their device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Distribution by e-mail provides no protection against piracy and should only
    be used with this in mind. The other methods are as secure as we could hope, but
    if you would like to take extra measures, then Google offer a **Licensing Service**
    which can be found at developer.android.com/google/play/licensing.
  prefs: []
  type: TYPE_NORMAL
- en: Whether we have released a paid app or a free one, we want to be able to reach
    as many users as possible. Google provide several tools to help us with this,
    as well as ways to monetize our apps, as we shall see next.
  prefs: []
  type: TYPE_NORMAL
- en: Promoting and monetizing apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very few apps become successful without first being well promoted. There are
    countless ways to do this and you will, no doubt, be well ahead of the curve on
    how to promote your products. To help you reach a wider audience, Google provides
    some handy tools to assist with promotion.
  prefs: []
  type: TYPE_NORMAL
- en: 'After looking at promotion tools, we will explore two ways to make money from
    our app: in-app payments and advertising.'
  prefs: []
  type: TYPE_NORMAL
- en: Promoting an app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two very simple methods, provided by Google, to help steer people
    towards our products on the Play store: links from both websites and our apps,
    and the **Google Play Badge**, which provides official branding to our links.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add links to both individual apps and our publisher page, where all
    our apps can be browsed, and we can include these links in our apps as well as
    our websites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To include a link to a specific app''s page in the Play store, use the full
    package name, as found in the Manifest, in the following format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To Include this within an Android app, use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want a link to your publisher page and a list of all your products,
    use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the same changes as before when linking from an app:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To link to a specific search result, use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To use an official Google Badge as your link, replace one of the preceding
    elements with the highlighted HTML here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The Badge comes in two sizes, `60.png` and `45.png`, and two styles, Android
    app on Google Play and Get it on Google Play. Simply change the relevant code
    to select the Badge that best suits your purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Promoting an app](img/image_13_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With our app published and with well-placed links to our Play store page, it
    is now time to consider how we can profit from the inevitable downloads, and so
    we come to how to monetize and Android app.
  prefs: []
  type: TYPE_NORMAL
- en: Monetizing an app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways to make money from an app, but two of the most popular and
    effective are **in-app billing** and **advertising**. In-app billing can become
    quite involved and perhaps deserves an entire chapter to itself. Here, we will
    see how to build an effective template that you can use as a foundation for an
    in-app product you might develop. It will include all the libraries and packages
    needed, along with some very useful helper classes.
  prefs: []
  type: TYPE_NORMAL
- en: Including Google AdMob advertisements in our apps is, in contrast, a very familiar
    process to us by now. An ad is in effect just another View and can be identified
    and referenced just like any other Android widget. The final exercise of this
    chapter, and indeed the book, will be constructing a simple working AdMob demo.
    First, though, let's take a look at in-app billing.
  prefs: []
  type: TYPE_NORMAL
- en: In-app billing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a large number of products that users can purchase from within an app,
    from upgrades and unlockables to in-game objects and currencies, and it would
    certainly provide a payment option for the sandwich builder app we developed earlier
    in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever the user is buying, the Google checkout process ensures they will
    pay in the same way as they pay for other Play store products. From the developer''s
    point of view, each purchase will boil down to responding to the click of a button.
    We will need to install the Google Play Billing Library, and add an AIDL file
    and some helper classes to our project. Here is how:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android project or open one you want to add in-app billing to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the SDK Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Extras, make sure you have the Google Play Billing Library installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the manifest and apply this permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the Project pane, right-click on app and select **New | Folder | AIDL Folder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From this AIDL folder, create a **New | Package**, and call it com.android.vending.billing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate and copy the `IinAppBillingService.aidl` file in the `sdk\extras\google\play_billing`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the file into the `com.android.vending.billing` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **New | Package** in the Java folder called `com.`**your.package.name**`.util`
    and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `play_billing` directory, locate and open the `TrivialDrive\src\com\example\android\trivialdrivesample\util`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the nine Java files into the util package you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You now have a working template for any app you wish to include in-app purchasing
    in. Alternatively, you can complete the preceding steps on a project where you
    have already developed your in-app products. Either way, you will no doubt be
    taking advantage of the `IabHelper class`, which vastly simplifies coding, providing
    listeners for every step of the purchasing process. Documentation can be found
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/google/play/billing/index.html](https://developer.android.com/google/play/billing/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you can start to implement in-app purchases, you will need to secure
    a **License Key** for your app. This can be found in the app's details in your
    developer console.
  prefs: []
  type: TYPE_NORMAL
- en: Paid apps and in-app products are just two ways to make money from an app, and
    many people choose another, and often lucrative, route for monetizing their work
    through advertising. **Google AdMob** allows for a great deal of flexibility and
    a familiar programming interface, as we shall see next.
  prefs: []
  type: TYPE_NORMAL
- en: Including an advertisement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways that we can earn money from advertising, but AdMob provides
    one of the easiest. Not only does the service allow you to select what types of
    product you wish to advertise, but it also provides great analytical tools and
    seamless payment into your Checkout account.
  prefs: []
  type: TYPE_NORMAL
- en: On top of this, an **AdView** can be treated programmatically in a way that
    is almost identical to the methods we are used to and familiar with, as we shall
    see in this final exercise, where we will develop a simple app with a demo banner
    AdMob ad.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you start this exercise, you will need to have signed up for an AdMob
    account at google.com/admob:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a project you want to test ads on or start a new Android project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you have the Google Repository installed with the SDK Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `build.gradle` file, add this dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rebuild the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the manifest, set these two permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the application node, add this `meta-data` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include this second Activity in the manifest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following string to the `res/values/strings.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `main_activity.xml` layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this second namespace to the root layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this `AdView` under the `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onCreate()` method of `MainActivity`, insert these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now test the app on a device.![Including an advertisement](img/image_13_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More or less everything we did here resembles the way that we would program
    any other element, with one or two exceptions. The use of the `ACCESS_NETWORK_STATE`
    permission is not strictly necessary; it is used here to check for a connection
    prior to requesting an ad.
  prefs: []
  type: TYPE_NORMAL
- en: Any Activity that displays an ad will require a separate ID and be declared
    in the manifest. The ID supplied here is for testing purposes only as it is not
    allowed to use live IDs for testing purposes. There are only six classes in the
    `android.gms.ads` package, and documentation for all of them can be found at [developer.android.com/reference/com/google/android/gms/ads/package-summary](http://developer.android.com/reference/com/google/android/gms/ads/package-summary).
  prefs: []
  type: TYPE_NORMAL
- en: AdMob ads come in two flavors, the banner that we saw here and the interstitial,
    or full screen. We only dealt with banner ads here, but interstitial ads are handled
    in a very similar manner. With knowledge of how to implement paid apps, in-app
    billing, and AdMob, we are now armed to reap the rewards of our hard work and
    make the very most of our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has outlined the final stages of app development, and although
    these stages only make up a small proportion of the workload, they are essentially
    important and can make all the difference when it comes to the success of an application.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we have relied heavily on support libraries to increase
    the number of devices our apps can run on, but here we saw how we can extend that
    range even further by dynamically determining the platform and running appropriate
    code accordingly. This process provided a lovely example of how design patterns
    can pervade all aspects of programming.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have used these tools to extend our reach, we can further enhance our
    app's chances of success with prudent promotion and hopefully make our work pay,
    either directly by charging our users for the app or its features, or indirectly
    through hosting advertisements.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we have looked at how design patterns can assist us in
    many aspects of development, but it is a way of thinking that makes patterns so
    useful rather than any individual pattern itself. Design patterns provide an approach
    to problem solving and a clear path to solutions. It is an approach designed to
    guide us to new creative solutions, and design patterns should not be seen as
    written in stone but more as a guide, and any pattern can be modified and altered
    to better suit its purpose.
  prefs: []
  type: TYPE_NORMAL
- en: The pattern and samples in this book are not designed to be cut and pasted into
    other project, but rather as a methodology to help us find the most elegant solutions
    to our own original situations. If this book has done its job, then the patterns
    you go on to design will not be the ones outlined here but entirely new and original
    creations of your own.
  prefs: []
  type: TYPE_NORMAL
