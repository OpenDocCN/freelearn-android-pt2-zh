- en: Chapter 5. Respect Your Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a clear understanding of the Android platform and application
    security framework and components, let''s dive into the most challenging aspect
    of security: data protection. As I stated before, your credibility as an application
    developer depends on how securely you handle your users'' data. Thus the name
    of this chapter: *Respect Your Users*!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: This chapter forms the basis for understanding the importance and significance
    of securing user data. The chapter starts off with a discussion of benchmarks
    for assessing the security of the data and the CIA triad. Next, we take an example
    of our bookstore application and run it through the asset, threat, and attack
    scenarios. We talk about the mobile ecosystem and how different components of
    this ecosystem affect the security of user data. We will close with a review of
    the **Digital Rights Management** (**DRM**) framework for Android.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Principles of data security
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section discusses the three principles of data security, namely confidentiality,
    integrity, and availability, usually called the **CIA**. Any piece of data stored
    on the device or server should meet these three attributes for security. Understanding
    these benchmarks will help us evaluate how secure our data storage solution is.
    All these three principles are usually expressed as a CIA triad.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '![Principles of data security](img/5603OT_05_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
- en: Confidentiality
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Confidentiality is the first pillar of security and it focuses on privacy of
    data. This principle ensures that private data stays away from prying eyes and
    is only available to users with appropriate access rights. For example, the private
    data of an Android application should only be accessible to that application's
    components or other components with appropriate permission (in case the data is
    protected using permissions). The Linux operating system sandbox and permissions
    enforces this confidentiality. In another case, an encrypted file containing sensitive
    data may exist on the SD card. Even if the device or SD card has been compromised,
    this information will not be leaked out. This kind of confidentiality is enforced
    using cryptography. Another example of confidentiality is when a device locks
    itself after a certain period of inactivity and needs user credentials to be unlocked.
    Note that the Linux kernel does not support filesystem encryption by default,
    thus encrypting sensitive data before you store it is vital for security.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Integrity
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data integrity ensures that data is not altered or modified in transit or at
    rest either deliberately or by accident. As an example, inappropriate writing
    into a database table can cause accidental integrity issues. Therefore, it is
    always recommended to use built-in synchronization methods to enforce data integrity,
    unless you know your stuff really well. An example of intentional data integrity
    breach can be caused during transit where an application is communicating with
    the server. A man in the middle can listen to the data and alter it as it travels.
    To mitigate this kind of fraud, it is always recommended to encrypt data and use
    the **Secure Socket Layer** (**SSL**) protocol when communicating with the server.
    For additional security, a checksum can be used. SSL also requires CA's chain
    of certificate validation that is rarely used in Android applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Availability
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data availability ensures that data is available when it is needed. I'd like
    to add to it and say that data is available when needed by users who have proper
    rights to access it. This is really important as in the name of availability an
    application should not let unauthorized users access sensitive information.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Identifying assets, threats, and attacks
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is nothing like absolute security. When we talk about data security,
    we need to identify what is it that we are protecting and from whom. The following
    three questions can help us map our approach:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '*What are we trying to protect?* From an Android application perspective, are
    we trying to protect the username and password of the user, or the coupon code
    and credit card number that a user might enter to make a purchase through your
    application, or rights protected song or picture that the user purchased using
    your app? By answering this question we can nail down our assets.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Who are we trying to protect the asset from?* In other words, what is our
    threat? Are we trying to protect user data from other applications on the system,
    or are we trying to protect this information from other apps that you have developed?
    Do we want to protect our asset even if the device is stolen?'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What is the attack?* Answering this question helps identify vulnerabilities
    in our application. We get in the mind of the hacker and think how to exploit
    holes in our application.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answering the preceding three questions will help us to determine the value
    of our asset and how much time and energy we are willing to spend on protecting
    these assets. Let us try to answer the preceding questions with an example application.
    We go back to our bookstore application where a user can browse through books
    from the catalog, add books to a wish list, and order books to be shipped to the
    user. Our application remembers basic information about the user such as the last
    author and category that the user browsed and the language and username, so that
    when the user logs in, the app makes certain suggestions and the user feels at
    home. Our application also provides the user with the store credit card number,
    mailing address, and name for easy checkout when the user is ready to pay for
    the book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try to answer the first question: what are we trying to protect? In
    the preceding example, our assets are:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Name
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credit card number
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mailing address
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last author searched
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last language searched
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last category searched
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Username
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wish list of books
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure illustrates different sensitive data artifacts in our
    example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Note that not all of these assets are equally important to protect. A storage
    mechanism has to be decided upon based on how sensitive a piece of information
    is. For example, credit card numbers and passwords (if they are being stored on
    the device) need to be protected ferociously. You can encrypt such information
    and also store a hash of such information instead of storing this information
    in raw form. You will encrypt the information in transit and also use SSL protocol
    for secure communication. Loss of user preferences such as language, author, and
    category do not possess significant risk. Even if this information is lost, a
    user can set it up again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The preceding analysis also triggers the debate about thick and thin clients
    with respect to PII. Thick clients store a lot of information on the device itself.
    So an application will end up storing PII on the device as well. Thin clients
    rely on the backend servers for all the heavy lifting. They store minimal information
    on the device. This is a good approach as a device can be lost or stolen and then
    the risk is compromised user data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Next, we figure out the attack scenarios. Some example scenarios are discussed
    as follows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Let us imagine that the user installs a malicious app. This app now tries to
    steal user information in different ways. In the first case, it tries to access
    different database tables and extract user information. This is a case of stealing
    private information. If the database table is protected by permission, we are
    in a safe position. If the Content Provider checks the identity of the component,
    we are in an even safer situation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: In another scenario, a rogue application might send broadcast messages with
    bad data that the receiving application might try to act upon, or the malicious
    app might try to launch other application's components, with ill-formed data that
    might cause the other application to crash. It is thus important to check the
    identity of the calling application and vet the input data before acting upon
    it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'The important lessons from this attack scenario are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Never expose a component unless it is absolutely required. Keeping a component
    private is our first line of defense.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we expose a component, we make sure that we protect it with permissions.
    This is a good place to decide whether we want to expose it to the entire system
    or just other applications created by you. If the use case is to share components
    among applications written by the same author, we can define custom permissions.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the attack surface by specifying some Intent Filters.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always remember to check for input data before acting upon it. If the data is
    not in the desired format or form, there should be a plan to exit the situation
    gracefully. Displaying an error message to the user can be an option in this case.![Identifying
    assets, threats, and attacks](img/5603OT_05_04.jpg)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other scenarios could include a malicious application that listens to data exchange
    from a device connected to a rogue Wi-Fi. This application can intercept the information,
    modify it, pretend to be the server that the user is connecting to, or completely
    block the flow of data. All these scenarios are security risks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: Yet another example is when the malicious application changes the data stored
    on the device. The user may not even be aware of the fact that this information
    has been altered. Let us assume that our application was localized in different
    languages and the user sets the preferred language. In the following scenario,
    the user's preferred language is changed from English to, say, Japanese. The next
    time the user logs in, the application opens up in Japanese. In our case, the
    security risk is not big and it is an annoyance to the user but this example proves
    the point that information modification is another security risk.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_06.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: Finally, we need to access the loss in case a security breach happens and our
    plan of action. If private information such as credit card information, passwords,
    and social security numbers are stolen, it is a serious security risk. A plan
    to inform the users in case of a security breech has to be thought through. The
    user preferences and wish lists are inappropriately accessed; it might cause the
    user annoyance, but might not be such a privacy risk.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: What and where to store
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous analysis leads us to two important decisions that an application
    developer has to think upon.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: First, an application developer has to decide the pieces of information he/she
    wants to collect from users. Just as there is a principle of least privilege so
    there is the principle of least storage. The principle of least storage results
    in minimizing risk and liability. An application developer should always try to
    offload the storage of **Personally Identifiable Information** (**PII**). In our
    previous example, the application might not like to store credit card details,
    billing addresses, and other information related to payments. Payments are a tricky
    domain and companies such as PayPal can assist the user with the checkout process.
    Also any application that processes credit card numbers is recommended to follow
    the **PCI** (**Payment Card Industry**) standard. This standard lists requirements
    that such an application and server must comply with. My suggestion is to off-load
    such action to services that know these things best.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The second important decision to ponder upon is where to store the user data.
    In the distributed data storage environment of today, a developer has many options
    of storage such as on device, on a server, on the cloud, or a third party application.
    A mobile device should never be considered as a secure storage location, partly
    because it can be easily stolen or lost and also since most devices do not possess
    the sophisticated security mechanisms such as secure element and dual boot that
    desktops and laptops possess. Passwords, cryptographic keys, large content files,
    PII, and other sensitive data should be stored on the backend servers. Again,
    it is important to firewall these servers.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: We will come back to this example in [Chapter 7](ch07.html "Chapter 7. Securing
    Application Data"), *Security Application Data*, where based on the preceding
    analysis we decide the appropriate storage options and protection mechanisms.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end security
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About a decade ago, we stored our music on tapes and disks; our pictures resided
    in albums, and we used a phone for emergency purposes only. Fast forward to today;
    more and more of our lives are going digital. Our friends, families, likes, dislikes,
    pictures, contact lists, and even our purchase histories and credit card numbers
    are going digital. Imagine the scenario where a user loses their phone. Besides
    the monetary value of the device and emotional value associated with content stored
    on it, the biggest risk is the compromise of the user's personal information that
    is stored on the device. This information could include PII, which can identify
    an individual such as name, social security number, date of birth, and mother's
    maiden name. It could also include access to passwords, contact list, and SMS
    data. This risk lurks even if the user who is in possession of the device and
    the device is compromised due to malware.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The mobile ecosystem
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As illustrated in the following figure, there are different artifacts in the
    mobile ecosystem such as device, networks, applications that a user installs on
    devices, OEMs (Original Equipment Manufacturers), and other services that a consumer's
    device interacts with.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![The mobile ecosystem](img/5603OT_05_07.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: Let us look at these components a little deeper.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**Consumers**: The entire ecosystem revolves around the consumers and how the
    consumers interact with different pieces of ecosystem.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device manufacturers**: Also called OEMs, these are companies that produce
    the hardware for the device. Companies such as HTC, Motorola, Samsung, and LG
    all design and manufacture Android devices. Besides the size and style of the
    device, each device manufacturer puts in their **systems on chip** (**SOC**),
    device drivers, and firmware that affect how applications work on different devices.
    If you have tested your application on different devices, you can easily notice
    these differences. Any security flaw at the hardware level affects all devices
    that use this hardware. Hardware flaws are also difficult to patch.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system vendors**: Android is an open source operating system and
    manufacturers are at liberty to modify it or use their own pieces of software.
    For example, a device manufacturer may decide to use a different WebKit engine,
    music player, or screen instead of the one that comes bundled with the Android
    stack. This will cause applications to behave and look different on different
    devices. A security flaw in these such proprietary packages may cause your application
    to be compromised. All devices running a particular version of the operating system
    are affected by a defect. Defects at the software level can usually be patched
    and users are recommended to keep their software updated at all times.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carriers**: AT&T, Sprint, Verizon, Orange, and Vodafone are all carriers
    that provide the infrastructure that makes mobile devices truly mobile. They provide
    the data and voice plans for our devices. They also work with device manufacturers
    (who are in most cases the operating system vendors as well) to bundle their custom
    applications in system image. They might also work with OEMs to adapt security
    rules to suit their needs. For example, they may request an OEM to directly load
    and install applications without asking the user for consent or showing permission
    requests.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: These are services that a device interacts with such as cloud
    services for backup. In most cases, the user installs a client that interacts
    with the backend. Other services could be payment services such as PayPal, mailing
    services such as Gmail, and social networking services such as Facebook and Twitter.
    Most of these services are provided to the user as third party applications.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application developers**: This is the category of individual application
    developers or small groups of developers that put their applications on the app
    stores such as Google Play and Amazon appstore. Examples of such applications
    include utility applications, games, content consumption applications. Most of
    the audience of this book belongs to this category.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure**: These are the technologies and protocols that are the backbone
    of mobile infrastructure. These include **CDMA** (**Code Division Multiple Access**),
    **GSM** (**Global System for Mobile**), **WiMAX** (**Worldwide Interoperability
    for Microwave Access**), **WAP** (**Wireless Application Protocol**), and proximity
    technologies such as NFC, RFID, and Bluetooth. Security flaws in these technologies
    can render our applications susceptible to attacks.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standards and security**: These are two pieces of the mobile ecosystem that
    are still being evolved as we write this book.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you will have noticed, there are many actors in the mobile ecosystem, thus
    increasing the risks and threat surface. Moreover, not all major players in the
    mobile world work together and in some cases work against each other resulting
    in complex attack models. Also, manufacturers produce devices for a targeted market.
    It is thus a complex landscape with moving and evolving parts. Looking at security
    from an end-to-end perspective, it is not hard to realize that the only power
    application developers have is on the applications that they create. Any other
    flaw in the device or operating system can cause a security breach as well. For
    example, a flaw in the operating system can cause escalation of privileges and
    let an app act as root. In this case, this root application can access all information
    on the device. All applications will be compromised but if the developer used
    good security standards, their liability is minimal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only power that application developers have is on their own application.
    Any malicious user can exploit a weakness in device hardware, operating system,
    or carrier application and gain access to user data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: For example, our bookstore app talks to the database, sends information to the
    server and caches some data as well. All these cases need to be protected. If
    the device is using some kind of proximity technology such as **Near Field Communication**
    (**NFC**), Bluetooth, or **Radio Frequency Identification** (**RFID**), to exchange
    data, it is important to understand the security risks and new attached scenarios
    associated with these technologies.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Your Tools – Crypto APIs"), *Your Tools –
    Crypto APIs*, discusses cryptographic algorithms that can be used to secure data
    in transit.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Three states of data
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us look at the information flow in a typical mobile application. Consider
    the bookstore application once again. In our bookstore application, a user can
    browse through books from the catalog, add books to a wish list, and order books
    to be shipped to the user. Our applications remember basic information about the
    users such as the last author and category that the user browsed, and the language
    and username. The user's credit card number, mailing address, and name are also
    stored for easy checkout.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows one possible scenario. The bookstore application
    uses a SQLite database and flat files on the Android device as the cache. The
    application stores account details, book catalogues, and the wish list on the
    external server and connects to backend servers using Wi-Fi.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Three states of data](img/5603OT_05_08.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'At any given point, data can be either resting at a location, be in transit
    from one node to the other, or is in the process of being worked upon. We call
    these three states of data data at rest, data in transit, and data in use. Let''s
    look at these three more closely:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**Data at rest**: This is data that is stored on some kind of storage media
    such as SD cards, device memory, backend servers, and databases. This data is
    in an inactive state. In the preceding example, data residing in flat files, SQLite
    database tables, and on the backend server, is all considered as data at rest.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data in use**: Data that is currently being processed is called data in use.
    Examples of this kind of data includes data that is being accessed from database
    tables, data sent to application components with intents, and a file that is currently
    being written to or read from.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data in transit**: When data is being transferred from one node to another
    it is termed as data in transit. Data being transferred to the application from
    the database in response to a query is an example of data in transit.![Three states
    of data](img/5603OT_05_09.jpg)'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When dealing with data and thinking about end-to-end security, it is important
    to protect data in all three states.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Digital rights management
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Digital rights management** (**DRM**) is access control technology for digital
    content such as music, ebooks, applications, video, and movies. Access control
    is based on a rights object associated with content. This rights object contains
    rules that limit the use, distribution, and duplication of content. DRM schemes
    such as OMA DRM v1 and OMA DRM v2 are developed by **Open Mobile Alliance** (**OMA**)
    but many device manufacturers have their proprietary DRM schemes as well.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'A DRM system contains the following components:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '**Content server**: This is the server from where the device pulls the media
    content.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rights server**: The server from where the device pulls in the rights object.
    The rights object is usually an XML file with permissions and constraints associated
    with the content.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DRM agent**: The agent lives within the device and is the trusted body that
    associates content and rights and enforcement of rights and permissions on content.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage device**: This is the device where the content and the rights objects
    are stored. It could be a phone or a tablet, or external storage such as an SD
    card or even cloud storage.![Digital rights management](img/5603OT_05_10.jpg)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read the complete specifications about OMA DRM at [www.openmobilealliance.org](http://www.openmobilealliance.org).
    OMA DRM 1.0 supports models such as forward locking of content (content cannot
    be forwarded to another device), combined delivery (content and rights objects
    are delivered together), and separate delivery (content and rights objects are
    pulled separately from different servers). Security of OMA DRM v2.0 is based on
    PKI, which is significantly more secure. Manufacturers can pick and choose the
    DRM scheme they want to support on their device. They can also implement or modify
    the DRM scheme accordingly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Android started supporting DRM in API 11\. Support for DRM in Android is open
    so that manufacturers can choose their own DRM agents. This is achieved by implementing
    the DRM framework in two architectural layers. The Android developer website ([developer.android.com](http://developer.android.com))
    shows it diagrammatically as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital rights management](img/5603OT_05_11.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: The DRM manager implements the DRM framework and is of interest to device manufacturers
    who integrate their DRM agents of choice with this framework as plugins. The framework
    layer abstracts all the complexity of the DRM manager and exposes to the developers
    a unified set of APIs to work with. These APIs run in the Dalvik VM with the rest
    of the application code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: All DRM APIs are present in the `android.drm` package. This package has classes
    and interfaces to get rights information, associating content with rights, querying
    for DRM plugin and MIME types. The `DrmManager` class provides each `DrmManagerClient`
    with a unique ID to operate with it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The application first needs to *find out the DRM plugins* available on the device.
    This can be accomplished using the `DrmManagerClient` class.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next step is to *register with the DRM server* and download the rights object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The third step is to *extract license information* from the rights object. This
    is done using the `getConstraints` method of `DrmManager`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we need to *associate content with the rights object*. This is done by
    specifying the content path and the rights path in the `saveRights` method of
    `DrmManager`. Once this association is done, the DRM agent will continue to enforce
    permissions on content without user interference.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `android.drm` package provides some other utility functions as well. Check
    this package ([https://developer.android.com/reference/android/drm/package-summary.html](https://developer.android.com/reference/android/drm/package-summary.html))
    for all the functions available there.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.drm` 包还提供了一些其他实用功能。查看此包以了解所有可用的功能（[https://developer.android.com/reference/android/drm/package-summary.html](https://developer.android.com/reference/android/drm/package-summary.html)）。'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章总结
- en: This chapter covered the basics of data security. We discussed the three core
    principles of data security, namely confidentiality, integrity, and availability.
    We walked through a sample application scenario and tried to chart out our assets,
    threats, and attack scenarios. We tried to assess the cost associated with a security
    breach. Our data storage options and the amount of time, effort, and money that
    we plan to spend on securing the data will depend on this analysis. We also reflected
    on the mobile ecosystem as a whole and what end-to-end security means in a mobile
    context. It is not hard to realize that we only control the applications that
    we write. We closed this chapter with the review of Android's DRM framework and
    available capability. With all this knowledge about data security, let's march
    to the next chapter and learn the different tools that an application developer
    can use to protect their users' data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节介绍了数据安全的基础知识。我们讨论了数据安全的三个核心原则，即保密性、完整性和可用性。我们通过一个示例应用场景进行了演练，并尝试绘制我们的资产、威胁和攻击场景。我们试图评估安全漏洞相关的成本。我们的数据存储选项以及我们计划在保护数据上投入的时间、精力和资金将取决于这一分析。我们还反思了整个移动生态系统，以及在移动环境中端到端安全的意义。不难意识到，我们仅控制我们所编写的应用程序。我们以回顾
    Android 的 DRM 框架和可用功能结束了这一章节。凭借所有这些关于数据安全的知识，让我们迈向下一章，学习应用程序开发人员可以使用的不同工具来保护用户数据。
