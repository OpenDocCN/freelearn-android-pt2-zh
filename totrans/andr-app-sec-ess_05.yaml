- en: Chapter 5. Respect Your Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 尊重你的用户
- en: 'Now that we have a clear understanding of the Android platform and application
    security framework and components, let''s dive into the most challenging aspect
    of security: data protection. As I stated before, your credibility as an application
    developer depends on how securely you handle your users'' data. Thus the name
    of this chapter: *Respect Your Users*!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经清楚地理解了Android平台和应用程序安全框架及组件，让我们深入到安全最具挑战性的方面：数据保护。正如我之前所述，作为应用程序开发人员，你的信誉取决于你处理用户数据的安全程度。因此，本章的名称是：*尊重你的用户*！
- en: This chapter forms the basis for understanding the importance and significance
    of securing user data. The chapter starts off with a discussion of benchmarks
    for assessing the security of the data and the CIA triad. Next, we take an example
    of our bookstore application and run it through the asset, threat, and attack
    scenarios. We talk about the mobile ecosystem and how different components of
    this ecosystem affect the security of user data. We will close with a review of
    the **Digital Rights Management** (**DRM**) framework for Android.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章构成了理解保护用户数据的重要性和意义的基础。本章从讨论评估数据安全性的基准和CIA三原则开始。接下来，我们以我们的书店应用程序为例，通过资产、威胁和攻击场景进行分析。我们讨论移动生态系统以及生态系统的不同组件如何影响用户数据的安全性。最后，我们将回顾Android的**数字版权管理**（**DRM**）框架。
- en: Principles of data security
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据安全原则
- en: This section discusses the three principles of data security, namely confidentiality,
    integrity, and availability, usually called the **CIA**. Any piece of data stored
    on the device or server should meet these three attributes for security. Understanding
    these benchmarks will help us evaluate how secure our data storage solution is.
    All these three principles are usually expressed as a CIA triad.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论数据安全的三个原则，即保密性、完整性和可用性，通常称为**CIA三原则**。存储在设备或服务器上的任何数据都应满足这三个属性以确保安全。理解这些基准可以帮助我们评估我们的数据存储解决方案的安全性。这三个原则通常以CIA三合体的形式表达。
- en: '![Principles of data security](img/5603OT_05_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![数据安全原则](img/5603OT_05_01.jpg)'
- en: Confidentiality
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保密性
- en: Confidentiality is the first pillar of security and it focuses on privacy of
    data. This principle ensures that private data stays away from prying eyes and
    is only available to users with appropriate access rights. For example, the private
    data of an Android application should only be accessible to that application's
    components or other components with appropriate permission (in case the data is
    protected using permissions). The Linux operating system sandbox and permissions
    enforces this confidentiality. In another case, an encrypted file containing sensitive
    data may exist on the SD card. Even if the device or SD card has been compromised,
    this information will not be leaked out. This kind of confidentiality is enforced
    using cryptography. Another example of confidentiality is when a device locks
    itself after a certain period of inactivity and needs user credentials to be unlocked.
    Note that the Linux kernel does not support filesystem encryption by default,
    thus encrypting sensitive data before you store it is vital for security.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 保密性是安全的第一支柱，它关注数据的隐私。这一原则确保私人数据远离窥探的目光，只对具有适当访问权限的用户可用。例如，Android应用程序的私人数据应只对该应用程序的组件或其他具有适当权限的组件（如果数据受到权限保护）可访问。Linux操作系统的沙盒和权限强制执行此保密性。在另一种情况下，可能存在包含敏感数据的加密文件在SD卡上。即使设备或SD卡遭到破坏，这些信息也不会泄露。这种保密性是通过密码学强制执行的。另一个保密性的例子是设备在一段时间不活动后自动锁定，需要用户凭据才能解锁。请注意，Linux内核默认不支持文件系统加密，因此在存储之前对敏感数据进行加密对于安全至关重要。
- en: Integrity
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整性
- en: Data integrity ensures that data is not altered or modified in transit or at
    rest either deliberately or by accident. As an example, inappropriate writing
    into a database table can cause accidental integrity issues. Therefore, it is
    always recommended to use built-in synchronization methods to enforce data integrity,
    unless you know your stuff really well. An example of intentional data integrity
    breach can be caused during transit where an application is communicating with
    the server. A man in the middle can listen to the data and alter it as it travels.
    To mitigate this kind of fraud, it is always recommended to encrypt data and use
    the **Secure Socket Layer** (**SSL**) protocol when communicating with the server.
    For additional security, a checksum can be used. SSL also requires CA's chain
    of certificate validation that is rarely used in Android applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数据完整性确保数据在传输过程中或静态存储时不会被故意或意外地更改或修改。例如，不恰当地写入数据库表可能会导致意外的完整性问题。因此，除非你对自己的技术非常了解，否则建议使用内置的同步方法来强制执行数据完整性。故意破坏数据完整性的一个例子可能是在应用程序与服务器通信的传输过程中发生。中间人可以监听数据并在其传输过程中进行修改。为了减轻这种欺诈行为，建议在通信时对数据进行加密，并使用**安全套接字层**（**SSL**）协议。为了额外的安全，可以使用校验和。SSL还需要证书颁发机构（CA）的证书验证链，这在Android应用程序中很少使用。
- en: Availability
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用性
- en: Data availability ensures that data is available when it is needed. I'd like
    to add to it and say that data is available when needed by users who have proper
    rights to access it. This is really important as in the name of availability an
    application should not let unauthorized users access sensitive information.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可用性确保在需要时数据能够获得。我想补充一点，即数据应当在有适当权限的用户需要时可用。这非常重要，因为应用程序不应让未授权用户访问敏感信息，以可用性为名。
- en: Identifying assets, threats, and attacks
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别资产、威胁和攻击
- en: 'There is nothing like absolute security. When we talk about data security,
    we need to identify what is it that we are protecting and from whom. The following
    three questions can help us map our approach:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 没有绝对的安全。当我们谈论数据安全时，我们需要确定我们正在保护什么以及保护的对象是谁。以下三个问题可以帮助我们规划方法：
- en: '*What are we trying to protect?* From an Android application perspective, are
    we trying to protect the username and password of the user, or the coupon code
    and credit card number that a user might enter to make a purchase through your
    application, or rights protected song or picture that the user purchased using
    your app? By answering this question we can nail down our assets.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*我们试图保护什么？* 从Android应用程序的角度来看，我们是试图保护用户的用户名和密码，还是用户可能通过你的应用程序进行购买时输入的优惠码和信用卡号码，或者是用户使用你的应用程序购买的保护版权的歌曲或图片？通过回答这个问题，我们可以确定我们的资产。'
- en: '*Who are we trying to protect the asset from?* In other words, what is our
    threat? Are we trying to protect user data from other applications on the system,
    or are we trying to protect this information from other apps that you have developed?
    Do we want to protect our asset even if the device is stolen?'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*我们试图保护资产免受谁的侵害？* 换句话说，我们的威胁是什么？我们是否试图保护用户数据不受系统上其他应用程序的侵害，还是试图保护这些信息不受你开发的其他应用程序的侵害？即使设备被盗，我们也想要保护我们的资产吗？'
- en: '*What is the attack?* Answering this question helps identify vulnerabilities
    in our application. We get in the mind of the hacker and think how to exploit
    holes in our application.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*什么是攻击？* 回答这个问题有助于识别我们应用程序中的漏洞。我们要站在黑客的角度思考如何利用应用程序中的漏洞。'
- en: Answering the preceding three questions will help us to determine the value
    of our asset and how much time and energy we are willing to spend on protecting
    these assets. Let us try to answer the preceding questions with an example application.
    We go back to our bookstore application where a user can browse through books
    from the catalog, add books to a wish list, and order books to be shipped to the
    user. Our application remembers basic information about the user such as the last
    author and category that the user browsed and the language and username, so that
    when the user logs in, the app makes certain suggestions and the user feels at
    home. Our application also provides the user with the store credit card number,
    mailing address, and name for easy checkout when the user is ready to pay for
    the book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 回答前面的三个问题将有助于我们确定资产的价值以及我们愿意在保护这些资产上投入的时间和精力。让我们尝试用一个示例应用程序来回答前面的问题。回到我们的书店应用程序，用户可以浏览目录中的书籍，将书籍添加到愿望清单中，并订购书籍以便寄送给用户。我们的应用程序会记住用户的基本信息，例如用户最后浏览的作者和类别以及语言和用户名，这样当用户登录时，应用程序会提供建议，让用户感到宾至如归。我们的应用程序还向用户提供商店的信用卡号、邮寄地址和姓名，以便用户准备好支付书籍费用时可以轻松结账。
- en: 'Let us try to answer the first question: what are we trying to protect? In
    the preceding example, our assets are:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试回答第一个问题：我们试图保护什么？在前面示例中，我们的资产是：
- en: Name
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 姓名
- en: Credit card number
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信用卡号码
- en: Mailing address
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邮寄地址
- en: Last author searched
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后搜索的作者
- en: Last language searched
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后搜索的语言
- en: Last category searched
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后搜索的类别
- en: Username
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名
- en: Password
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Wish list of books
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书籍愿望清单
- en: 'The following figure illustrates different sensitive data artifacts in our
    example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了我们示例中不同的敏感数据工件：
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![识别资产、威胁和攻击](img/5603OT_05_02.jpg)'
- en: Note that not all of these assets are equally important to protect. A storage
    mechanism has to be decided upon based on how sensitive a piece of information
    is. For example, credit card numbers and passwords (if they are being stored on
    the device) need to be protected ferociously. You can encrypt such information
    and also store a hash of such information instead of storing this information
    in raw form. You will encrypt the information in transit and also use SSL protocol
    for secure communication. Loss of user preferences such as language, author, and
    category do not possess significant risk. Even if this information is lost, a
    user can set it up again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有这些资产都需要同等程度地保护。存储机制应根据信息的敏感程度来决定。例如，信用卡号码和密码（如果存储在设备上）需要被强烈保护。您可以加密此类信息，并存储信息的哈希值，而不是以原始形式存储此信息。您将在传输过程中加密信息，并使用SSL协议进行安全通信。用户偏好（如语言、作者和类别）的丢失不会带来重大风险。即使这些信息丢失，用户也可以重新设置。
- en: The preceding analysis also triggers the debate about thick and thin clients
    with respect to PII. Thick clients store a lot of information on the device itself.
    So an application will end up storing PII on the device as well. Thin clients
    rely on the backend servers for all the heavy lifting. They store minimal information
    on the device. This is a good approach as a device can be lost or stolen and then
    the risk is compromised user data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的分析还引发了关于PII的厚客户端和薄客户端的争论。厚客户端在设备本身上存储大量信息。因此，应用程序最终会在设备上存储PII。薄客户端依赖后端服务器进行所有繁重的工作。它们在设备上存储最少的信息。这是一个好的方法，因为设备可能会丢失或被盗，然后用户数据的风险就会受到威胁。
- en: Next, we figure out the attack scenarios. Some example scenarios are discussed
    as follows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要确定攻击场景。以下是一些示例场景的讨论。
- en: Let us imagine that the user installs a malicious app. This app now tries to
    steal user information in different ways. In the first case, it tries to access
    different database tables and extract user information. This is a case of stealing
    private information. If the database table is protected by permission, we are
    in a safe position. If the Content Provider checks the identity of the component,
    we are in an even safer situation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户安装了一个恶意应用程序。现在这个应用程序试图以不同的方式窃取用户信息。在第一种情况下，它试图访问不同的数据库表并提取用户信息。这是窃取私人信息的情况。如果数据库表受到权限保护，我们处于安全的位置。如果内容提供者检查组件的身份，我们将会处于更安全的情况。
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![识别资产、威胁和攻击](img/5603OT_05_03.jpg)'
- en: In another scenario, a rogue application might send broadcast messages with
    bad data that the receiving application might try to act upon, or the malicious
    app might try to launch other application's components, with ill-formed data that
    might cause the other application to crash. It is thus important to check the
    identity of the calling application and vet the input data before acting upon
    it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一种情况下，恶意应用程序可能会发送带有不良数据的广播消息，接收应用程序可能会尝试对此采取行动，或者恶意应用程序可能会尝试启动其他应用程序的组件，并带有格式不良的数据，可能导致其他应用程序崩溃。因此，在采取行动之前，检查调用应用程序的身份并审查输入数据是非常重要的。
- en: 'The important lessons from this attack scenario are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从这种攻击场景中我们可以得到的重要教训如下：
- en: Never expose a component unless it is absolutely required. Keeping a component
    private is our first line of defense.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非绝对必要，否则不要暴露组件。保持组件私有是我们的第一道防线。
- en: If we expose a component, we make sure that we protect it with permissions.
    This is a good place to decide whether we want to expose it to the entire system
    or just other applications created by you. If the use case is to share components
    among applications written by the same author, we can define custom permissions.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们暴露了一个组件，我们会确保我们用权限来保护它。这是决定是否希望将其暴露给整个系统还是仅暴露给由您创建的其他应用程序的好地方。如果用例是在同一作者编写的应用程序之间共享组件，我们可以定义自定义权限。
- en: Reduce the attack surface by specifying some Intent Filters.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过指定一些意图过滤器来减少攻击面。
- en: Always remember to check for input data before acting upon it. If the data is
    not in the desired format or form, there should be a plan to exit the situation
    gracefully. Displaying an error message to the user can be an option in this case.![Identifying
    assets, threats, and attacks](img/5603OT_05_04.jpg)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在采取行动之前，请务必检查输入数据。如果数据不是所需的格式或形式，应该有一个优雅退出当前情况的计划。在这种情况下，向用户显示错误消息可以作为一个选项。![识别资产、威胁和攻击](img/5603OT_05_04.jpg)
- en: Other scenarios could include a malicious application that listens to data exchange
    from a device connected to a rogue Wi-Fi. This application can intercept the information,
    modify it, pretend to be the server that the user is connecting to, or completely
    block the flow of data. All these scenarios are security risks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 其他场景可能包括一个恶意应用程序监听通过流氓Wi-Fi连接的设备之间的数据交换。这个应用程序可以拦截信息，修改它，假装成用户正在连接的服务器，或者完全阻止数据流。所有这些场景都是安全风险。
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![识别资产、威胁和攻击](img/5603OT_05_05.jpg)'
- en: Yet another example is when the malicious application changes the data stored
    on the device. The user may not even be aware of the fact that this information
    has been altered. Let us assume that our application was localized in different
    languages and the user sets the preferred language. In the following scenario,
    the user's preferred language is changed from English to, say, Japanese. The next
    time the user logs in, the application opens up in Japanese. In our case, the
    security risk is not big and it is an annoyance to the user but this example proves
    the point that information modification is another security risk.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是，当恶意应用程序更改设备上存储的数据时。用户甚至可能没有意识到这些信息已经被更改。假设我们的应用程序在不同语言环境中本地化，并且用户设置了首选语言。在以下场景中，用户的首选语言从英语更改为例如日语。下次用户登录时，应用程序会以日语打开。在我们的案例中，安全风险并不大，这对用户来说是个烦恼，但这个例子证明了信息修改是另一种安全风险。
- en: '![Identifying assets, threats, and attacks](img/5603OT_05_06.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![识别资产、威胁和攻击](img/5603OT_05_06.jpg)'
- en: Finally, we need to access the loss in case a security breach happens and our
    plan of action. If private information such as credit card information, passwords,
    and social security numbers are stolen, it is a serious security risk. A plan
    to inform the users in case of a security breech has to be thought through. The
    user preferences and wish lists are inappropriately accessed; it might cause the
    user annoyance, but might not be such a privacy risk.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要考虑在发生安全漏洞时如何获取损失和我们的行动计划。如果信用卡信息、密码和社会安全号码等私人信息被窃取，这将是一个严重的安全风险。在发生安全漏洞时通知用户的计划必须仔细考虑。如果用户的偏好和愿望清单被不适当地访问，可能会引起用户的不满，但可能不会造成太大的隐私风险。
- en: What and where to store
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么数据应该存储以及存储在哪里
- en: The previous analysis leads us to two important decisions that an application
    developer has to think upon.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的分析使我们意识到应用程序开发人员必须考虑的两个重要决策。
- en: First, an application developer has to decide the pieces of information he/she
    wants to collect from users. Just as there is a principle of least privilege so
    there is the principle of least storage. The principle of least storage results
    in minimizing risk and liability. An application developer should always try to
    offload the storage of **Personally Identifiable Information** (**PII**). In our
    previous example, the application might not like to store credit card details,
    billing addresses, and other information related to payments. Payments are a tricky
    domain and companies such as PayPal can assist the user with the checkout process.
    Also any application that processes credit card numbers is recommended to follow
    the **PCI** (**Payment Card Industry**) standard. This standard lists requirements
    that such an application and server must comply with. My suggestion is to off-load
    such action to services that know these things best.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，应用程序开发者必须决定他/她想要从用户那里收集哪些信息。正如有最小权限原则一样，也有最少存储原则。最少存储原则导致风险和责任的最小化。应用程序开发者应始终尝试减轻**个人识别信息**（**PII**）的存储负担。在我们之前的例子中，应用程序可能不想存储信用卡详情、账单地址以及与支付相关的其他信息。支付是一个棘手的领域，而像PayPal这样的公司可以帮助用户处理结账过程。此外，任何处理信用卡号码的应用程序都建议遵循**支付卡行业**（**PCI**）标准。该标准列出了此类应用程序和服务器必须遵守的要求。我的建议是将此类操作交给最擅长这些事情的服务。
- en: The second important decision to ponder upon is where to store the user data.
    In the distributed data storage environment of today, a developer has many options
    of storage such as on device, on a server, on the cloud, or a third party application.
    A mobile device should never be considered as a secure storage location, partly
    because it can be easily stolen or lost and also since most devices do not possess
    the sophisticated security mechanisms such as secure element and dual boot that
    desktops and laptops possess. Passwords, cryptographic keys, large content files,
    PII, and other sensitive data should be stored on the backend servers. Again,
    it is important to firewall these servers.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个需要深思的重要决定是用户数据存储在哪里。在当今分布式的数据存储环境中，开发者有许多存储选项，例如设备上、服务器上、云上或第三方应用程序。移动设备不应被视为安全的存储位置，部分原因是它可能容易被盗或丢失，而且大多数设备没有像台式机和笔记本电脑那样的高级安全机制，如安全元件和双启动。密码、加密密钥、大内容文件、个人识别信息（PII）和其他敏感数据应存储在后端服务器上。同样，重要的是要为这些服务器设置防火墙。
- en: We will come back to this example in [Chapter 7](ch07.html "Chapter 7. Securing
    Application Data"), *Security Application Data*, where based on the preceding
    analysis we decide the appropriate storage options and protection mechanisms.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第7章](ch07.html "第7章. 保护应用数据")《*保护应用数据*》中回到这个例子，根据前面的分析，我们将决定适当的存储选项和保护机制。
- en: End-to-end security
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端到端的安全
- en: About a decade ago, we stored our music on tapes and disks; our pictures resided
    in albums, and we used a phone for emergency purposes only. Fast forward to today;
    more and more of our lives are going digital. Our friends, families, likes, dislikes,
    pictures, contact lists, and even our purchase histories and credit card numbers
    are going digital. Imagine the scenario where a user loses their phone. Besides
    the monetary value of the device and emotional value associated with content stored
    on it, the biggest risk is the compromise of the user's personal information that
    is stored on the device. This information could include PII, which can identify
    an individual such as name, social security number, date of birth, and mother's
    maiden name. It could also include access to passwords, contact list, and SMS
    data. This risk lurks even if the user who is in possession of the device and
    the device is compromised due to malware.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大约十年前，我们把音乐存储在磁带和磁盘上；我们的照片放在相册里，我们只把电话用于紧急情况。快进到今天；我们的生活越来越多地走向数字化。我们的朋友、家人、喜好、不喜欢、照片、联系人列表，甚至我们的购买历史和信用卡号码都在数字化。想象一下用户丢失手机的场景。除了设备的价值和存储在其中的内容的情感价值，最大的风险是存储在设备上的用户个人信息的安全。这些信息可能包括可以识别个人的PII，如姓名、社会安全号码、出生日期和母亲的婚前姓名。它还可能包括对密码、联系人列表和短信数据的访问。即使设备所有者拥有设备并且设备因恶意软件而受到威胁，这种风险仍然存在。
- en: The mobile ecosystem
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动生态系统
- en: As illustrated in the following figure, there are different artifacts in the
    mobile ecosystem such as device, networks, applications that a user installs on
    devices, OEMs (Original Equipment Manufacturers), and other services that a consumer's
    device interacts with.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，移动生态系统中有不同的构件，如设备、网络、用户在设备上安装的应用程序、OEM（原始设备制造商）以及消费者的设备与之交互的其他服务。
- en: '![The mobile ecosystem](img/5603OT_05_07.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![移动生态系统](img/5603OT_05_07.jpg)'
- en: Let us look at these components a little deeper.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解这些组件。
- en: '**Consumers**: The entire ecosystem revolves around the consumers and how the
    consumers interact with different pieces of ecosystem.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**：整个生态系统都围绕着消费者以及消费者如何与生态系统的不同部分互动。'
- en: '**Device manufacturers**: Also called OEMs, these are companies that produce
    the hardware for the device. Companies such as HTC, Motorola, Samsung, and LG
    all design and manufacture Android devices. Besides the size and style of the
    device, each device manufacturer puts in their **systems on chip** (**SOC**),
    device drivers, and firmware that affect how applications work on different devices.
    If you have tested your application on different devices, you can easily notice
    these differences. Any security flaw at the hardware level affects all devices
    that use this hardware. Hardware flaws are also difficult to patch.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备制造商**：也称为OEM，这些公司生产设备的硬件。像HTC、摩托罗拉、三星和LG这样的公司都设计和制造Android设备。除了设备的大小和样式，每个设备制造商都会加入他们自己的**系统芯片**（**SOC**）、设备驱动和固件，这些都会影响应用程序在不同设备上的工作方式。如果你在不同的设备上测试过你的应用程序，你可以轻易地注意到这些差异。硬件层面的任何安全缺陷都会影响使用该硬件的所有设备。硬件缺陷也很难修补。'
- en: '**Operating system vendors**: Android is an open source operating system and
    manufacturers are at liberty to modify it or use their own pieces of software.
    For example, a device manufacturer may decide to use a different WebKit engine,
    music player, or screen instead of the one that comes bundled with the Android
    stack. This will cause applications to behave and look different on different
    devices. A security flaw in these such proprietary packages may cause your application
    to be compromised. All devices running a particular version of the operating system
    are affected by a defect. Defects at the software level can usually be patched
    and users are recommended to keep their software updated at all times.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统供应商**：Android是一个开源操作系统，制造商可以自由修改它或使用自己的软件。例如，设备制造商可能会决定使用不同的WebKit引擎、音乐播放器或屏幕，而不是Android堆栈中捆绑的那个。这将导致应用程序在不同设备上的行为和外观有所不同。这些专有软件包中的安全缺陷可能导致你的应用程序受到威胁。运行特定版本操作系统的所有设备都会受到缺陷的影响。软件层面的缺陷通常可以修补，建议用户始终保持软件更新。'
- en: '**Carriers**: AT&T, Sprint, Verizon, Orange, and Vodafone are all carriers
    that provide the infrastructure that makes mobile devices truly mobile. They provide
    the data and voice plans for our devices. They also work with device manufacturers
    (who are in most cases the operating system vendors as well) to bundle their custom
    applications in system image. They might also work with OEMs to adapt security
    rules to suit their needs. For example, they may request an OEM to directly load
    and install applications without asking the user for consent or showing permission
    requests.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营商**：AT&T、Sprint、Verizon、Orange和Vodafone等运营商提供了使移动设备真正移动的基础设施。他们为我们的设备提供数据和语音计划。他们还与设备制造商（在大多数情况下也是操作系统供应商）合作，将他们的定制应用程序捆绑在系统映像中。他们也可能与OEM合作，调整安全规则以满足他们的需求。例如，他们可能要求OEM直接加载和安装应用程序，而无需征得用户的同意或显示权限请求。'
- en: '**Services**: These are services that a device interacts with such as cloud
    services for backup. In most cases, the user installs a client that interacts
    with the backend. Other services could be payment services such as PayPal, mailing
    services such as Gmail, and social networking services such as Facebook and Twitter.
    Most of these services are provided to the user as third party applications.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：这些是设备交互的服务，例如用于备份的云服务。在大多数情况下，用户会安装一个与后端交互的客户端。其他服务可能包括像PayPal这样的支付服务，像Gmail这样的邮件服务，以及像Facebook和Twitter这样的社交网络服务。这些服务大多数以第三方应用程序的形式提供给用户。'
- en: '**Application developers**: This is the category of individual application
    developers or small groups of developers that put their applications on the app
    stores such as Google Play and Amazon appstore. Examples of such applications
    include utility applications, games, content consumption applications. Most of
    the audience of this book belongs to this category.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用开发者**：这是指个人应用开发者或小型开发者团队，他们将应用发布到如Google Play和亚马逊应用商店等应用商店。这类应用包括实用程序、游戏、内容消费应用等。本书的大部分读者属于这一类。'
- en: '**Infrastructure**: These are the technologies and protocols that are the backbone
    of mobile infrastructure. These include **CDMA** (**Code Division Multiple Access**),
    **GSM** (**Global System for Mobile**), **WiMAX** (**Worldwide Interoperability
    for Microwave Access**), **WAP** (**Wireless Application Protocol**), and proximity
    technologies such as NFC, RFID, and Bluetooth. Security flaws in these technologies
    can render our applications susceptible to attacks.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施**：这些技术和协议是移动基础设施的支柱。这包括**CDMA**（**码分多址**）、**GSM**（**全球移动通信系统**）、**WiMAX**（**微波全球互操作性接入**）、**WAP**（**无线应用协议**）以及如NFC、RFID和蓝牙等近场通信技术。这些技术中的安全漏洞可能导致我们的应用易受攻击。'
- en: '**Standards and security**: These are two pieces of the mobile ecosystem that
    are still being evolved as we write this book.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准和安全**：在我们撰写这本书时，这两个移动生态系统的重要组成部分仍在不断发展中。'
- en: As you will have noticed, there are many actors in the mobile ecosystem, thus
    increasing the risks and threat surface. Moreover, not all major players in the
    mobile world work together and in some cases work against each other resulting
    in complex attack models. Also, manufacturers produce devices for a targeted market.
    It is thus a complex landscape with moving and evolving parts. Looking at security
    from an end-to-end perspective, it is not hard to realize that the only power
    application developers have is on the applications that they create. Any other
    flaw in the device or operating system can cause a security breach as well. For
    example, a flaw in the operating system can cause escalation of privileges and
    let an app act as root. In this case, this root application can access all information
    on the device. All applications will be compromised but if the developer used
    good security standards, their liability is minimal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，移动生态系统中有许多参与者，从而增加了风险和威胁表面。此外，移动领域的一些主要玩家并不总是合作，有时甚至相互对抗，导致攻击模型复杂化。同时，制造商为特定市场生产设备。因此，这是一个复杂且不断变化的局面。从端到端的角度来看待安全问题，不难意识到应用开发者唯一能控制的也就是他们创建的应用。设备或操作系统中的任何其他缺陷也可能导致安全漏洞。例如，操作系统中的一个缺陷可能导致权限提升，让应用以root权限运行。在这种情况下，这个root应用可以访问设备上的所有信息。所有应用都会受到威胁，但如果开发者采用了良好的安全标准，他们的责任将最小化。
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The only power that application developers have is on their own application.
    Any malicious user can exploit a weakness in device hardware, operating system,
    or carrier application and gain access to user data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 应用开发者唯一能掌控的就是他们自己的应用。任何恶意用户都可以利用设备硬件、操作系统或运营商应用中的弱点，获取用户数据。
- en: For example, our bookstore app talks to the database, sends information to the
    server and caches some data as well. All these cases need to be protected. If
    the device is using some kind of proximity technology such as **Near Field Communication**
    (**NFC**), Bluetooth, or **Radio Frequency Identification** (**RFID**), to exchange
    data, it is important to understand the security risks and new attached scenarios
    associated with these technologies.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的书店应用与数据库通信，向服务器发送信息并缓存一些数据。所有这些情况都需要得到保护。如果设备使用某种近场通信技术，如**近场通信**（**NFC**）、蓝牙或**射频识别**（**RFID**）来交换数据，了解这些技术相关的安全风险和新的附加场景是非常重要的。
- en: '[Chapter 6](ch06.html "Chapter 6. Your Tools – Crypto APIs"), *Your Tools –
    Crypto APIs*, discusses cryptographic algorithms that can be used to secure data
    in transit.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章. 你的工具 – 加密APIs")，*你的工具 – 加密APIs*，讨论了可以用来保护传输中数据的加密算法。'
- en: Three states of data
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据的三个状态
- en: Let us look at the information flow in a typical mobile application. Consider
    the bookstore application once again. In our bookstore application, a user can
    browse through books from the catalog, add books to a wish list, and order books
    to be shipped to the user. Our applications remember basic information about the
    users such as the last author and category that the user browsed, and the language
    and username. The user's credit card number, mailing address, and name are also
    stored for easy checkout.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看典型移动应用程序中的信息流。再次考虑书店应用程序。在我们的书店应用程序中，用户可以浏览目录中的书籍，将书籍添加到愿望清单中，并订购书籍以便邮寄给用户。我们的应用程序会记住用户的基本信息，例如用户最后浏览的作者和类别、用户的语言和用户名。用户的信用卡号、邮寄地址和姓名也会被存储以方便结账。
- en: The following figure shows one possible scenario. The bookstore application
    uses a SQLite database and flat files on the Android device as the cache. The
    application stores account details, book catalogues, and the wish list on the
    external server and connects to backend servers using Wi-Fi.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了一个可能的情况。书店应用程序在Android设备上使用SQLite数据库和平面文件作为缓存。应用程序在外部服务器上存储账户详情、书籍目录和愿望清单，并通过Wi-Fi连接到后端服务器。
- en: '![Three states of data](img/5603OT_05_08.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![数据的三个状态](img/5603OT_05_08.jpg)'
- en: 'At any given point, data can be either resting at a location, be in transit
    from one node to the other, or is in the process of being worked upon. We call
    these three states of data data at rest, data in transit, and data in use. Let''s
    look at these three more closely:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定时刻，数据可以处于以下三种状态之一：在某个位置静止、从一个节点传输到另一个节点中、或在处理过程中。我们将这三种数据状态称为静止数据、传输中的数据和使用中的数据。让我们更详细地了解这三种状态：
- en: '**Data at rest**: This is data that is stored on some kind of storage media
    such as SD cards, device memory, backend servers, and databases. This data is
    in an inactive state. In the preceding example, data residing in flat files, SQLite
    database tables, and on the backend server, is all considered as data at rest.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**静止数据**：这是存储在某些存储介质上的数据，如SD卡、设备内存、后端服务器和数据库。此数据处于非活动状态。在上一个示例中，位于平面文件、SQLite数据库表和后端服务器上的数据都被认为是静止数据。'
- en: '**Data in use**: Data that is currently being processed is called data in use.
    Examples of this kind of data includes data that is being accessed from database
    tables, data sent to application components with intents, and a file that is currently
    being written to or read from.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用中的数据**：当前正在处理的数据称为使用中的数据。这类数据的例子包括从数据库表中访问的数据、通过意图发送到应用程序组件的数据，以及当前正在写入或从中读取的文件。'
- en: '**Data in transit**: When data is being transferred from one node to another
    it is termed as data in transit. Data being transferred to the application from
    the database in response to a query is an example of data in transit.![Three states
    of data](img/5603OT_05_09.jpg)'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**传输中的数据**：当数据正在从一个节点传输到另一个节点时，称为传输中的数据。响应查询，将数据从数据库传输到应用程序是传输中数据的例子。![数据的三个状态](img/5603OT_05_09.jpg)'
- en: When dealing with data and thinking about end-to-end security, it is important
    to protect data in all three states.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数据和考虑端到端安全时，保护三种状态下的数据都是重要的。
- en: Digital rights management
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字版权管理
- en: '**Digital rights management** (**DRM**) is access control technology for digital
    content such as music, ebooks, applications, video, and movies. Access control
    is based on a rights object associated with content. This rights object contains
    rules that limit the use, distribution, and duplication of content. DRM schemes
    such as OMA DRM v1 and OMA DRM v2 are developed by **Open Mobile Alliance** (**OMA**)
    but many device manufacturers have their proprietary DRM schemes as well.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字版权管理**（**DRM**）是针对数字内容如音乐、电子书、应用程序、视频和电影等的访问控制技术。访问控制基于与内容相关联的权利对象。这个权利对象包含限制内容的使用、分发和复制的规则。**开放移动联盟**（**OMA**）开发了如OMA
    DRM v1和OMA DRM v2等DRM方案，但许多设备制造商也有自己的专有DRM方案。'
- en: 'A DRM system contains the following components:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: DRM系统包含以下组件：
- en: '**Content server**: This is the server from where the device pulls the media
    content.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容服务器**：这是设备从中获取媒体内容的服务器。'
- en: '**Rights server**: The server from where the device pulls in the rights object.
    The rights object is usually an XML file with permissions and constraints associated
    with the content.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权利服务器**：设备从中获取权利对象的的服务器。权利对象通常是一个带有与内容相关联的权限和约束的XML文件。'
- en: '**DRM agent**: The agent lives within the device and is the trusted body that
    associates content and rights and enforcement of rights and permissions on content.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DRM代理**：该代理内置于设备中，是将内容和权限相关联并执行内容权限管理的可信实体。'
- en: '**Storage device**: This is the device where the content and the rights objects
    are stored. It could be a phone or a tablet, or external storage such as an SD
    card or even cloud storage.![Digital rights management](img/5603OT_05_10.jpg)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储设备**：这是存储内容和权利对象的设备。它可以是手机或平板电脑，或者是外部存储，如SD卡，甚至是云存储。[数字版权管理](img/5603OT_05_10.jpg)'
- en: You can read the complete specifications about OMA DRM at [www.openmobilealliance.org](http://www.openmobilealliance.org).
    OMA DRM 1.0 supports models such as forward locking of content (content cannot
    be forwarded to another device), combined delivery (content and rights objects
    are delivered together), and separate delivery (content and rights objects are
    pulled separately from different servers). Security of OMA DRM v2.0 is based on
    PKI, which is significantly more secure. Manufacturers can pick and choose the
    DRM scheme they want to support on their device. They can also implement or modify
    the DRM scheme accordingly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[www.openmobilealliance.org](http://www.openmobilealliance.org)阅读关于OMA DRM的完整规范。OMA
    DRM 1.0支持诸如内容锁定（内容不能转发到另一设备）、联合交付（内容和权利对象一起交付）以及分离交付（内容和权利对象从不同的服务器分别拉取）等模型。OMA
    DRM v2.0的安全性基于PKI，安全性显著提高。制造商可以选择支持其设备上的DRM方案。他们还可以根据需要实现或修改DRM方案。
- en: 'Android started supporting DRM in API 11\. Support for DRM in Android is open
    so that manufacturers can choose their own DRM agents. This is achieved by implementing
    the DRM framework in two architectural layers. The Android developer website ([developer.android.com](http://developer.android.com))
    shows it diagrammatically as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓从API 11开始支持DRM。安卓对DRM的支持是开放的，这样制造商可以选择自己的DRM代理。这是通过在两个架构层实现DRM框架来实现的。Android开发者网站（[developer.android.com](http://developer.android.com)）以下图解地展示了这一点：
- en: '![Digital rights management](img/5603OT_05_11.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![数字版权管理](img/5603OT_05_11.jpg)'
- en: The DRM manager implements the DRM framework and is of interest to device manufacturers
    who integrate their DRM agents of choice with this framework as plugins. The framework
    layer abstracts all the complexity of the DRM manager and exposes to the developers
    a unified set of APIs to work with. These APIs run in the Dalvik VM with the rest
    of the application code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: DRM管理器实现了DRM框架，对那些将他们选择的DRM代理与此框架集成作为插件的设备制造商来说很有兴趣。框架层抽象了DRM管理器的所有复杂性，并向开发者展示了一组统一的API以供使用。这些API在Dalvik
    VM中运行，与应用程序的其他代码一起。
- en: All DRM APIs are present in the `android.drm` package. This package has classes
    and interfaces to get rights information, associating content with rights, querying
    for DRM plugin and MIME types. The `DrmManager` class provides each `DrmManagerClient`
    with a unique ID to operate with it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所有DRM API都在`android.drm`包中。这个包有类和接口来获取权利信息，关联内容与权利，查询DRM插件和MIME类型。`DrmManager`类为每个`DrmManagerClient`提供一个唯一的ID以便操作。
- en: The application first needs to *find out the DRM plugins* available on the device.
    This can be accomplished using the `DrmManagerClient` class.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序首先需要*找出设备上可用的DRM插件*。这可以通过使用`DrmManagerClient`类来完成。
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next step is to *register with the DRM server* and download the rights object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是*向DRM服务器注册*并下载权利对象。
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The third step is to *extract license information* from the rights object. This
    is done using the `getConstraints` method of `DrmManager`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步是*从权利对象中提取许可信息*。这是通过使用`DrmManager`的`getConstraints`方法完成的。
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we need to *associate content with the rights object*. This is done by
    specifying the content path and the rights path in the `saveRights` method of
    `DrmManager`. Once this association is done, the DRM agent will continue to enforce
    permissions on content without user interference.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要*将内容与权利对象关联*。这是通过在`DrmManager`的`saveRights`方法中指定内容路径和权利路径来完成的。一旦完成这种关联，DRM代理将继续执行内容的权限管理，无需用户干预。
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `android.drm` package provides some other utility functions as well. Check
    this package ([https://developer.android.com/reference/android/drm/package-summary.html](https://developer.android.com/reference/android/drm/package-summary.html))
    for all the functions available there.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.drm` 包还提供了一些其他实用功能。查看此包以了解所有可用的功能（[https://developer.android.com/reference/android/drm/package-summary.html](https://developer.android.com/reference/android/drm/package-summary.html)）。'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章总结
- en: This chapter covered the basics of data security. We discussed the three core
    principles of data security, namely confidentiality, integrity, and availability.
    We walked through a sample application scenario and tried to chart out our assets,
    threats, and attack scenarios. We tried to assess the cost associated with a security
    breach. Our data storage options and the amount of time, effort, and money that
    we plan to spend on securing the data will depend on this analysis. We also reflected
    on the mobile ecosystem as a whole and what end-to-end security means in a mobile
    context. It is not hard to realize that we only control the applications that
    we write. We closed this chapter with the review of Android's DRM framework and
    available capability. With all this knowledge about data security, let's march
    to the next chapter and learn the different tools that an application developer
    can use to protect their users' data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节介绍了数据安全的基础知识。我们讨论了数据安全的三个核心原则，即保密性、完整性和可用性。我们通过一个示例应用场景进行了演练，并尝试绘制我们的资产、威胁和攻击场景。我们试图评估安全漏洞相关的成本。我们的数据存储选项以及我们计划在保护数据上投入的时间、精力和资金将取决于这一分析。我们还反思了整个移动生态系统，以及在移动环境中端到端安全的意义。不难意识到，我们仅控制我们所编写的应用程序。我们以回顾
    Android 的 DRM 框架和可用功能结束了这一章节。凭借所有这些关于数据安全的知识，让我们迈向下一章，学习应用程序开发人员可以使用的不同工具来保护用户数据。
