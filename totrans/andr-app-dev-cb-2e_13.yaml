- en: Chapter 13. Getting Location and Using Geofencing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to get the last location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving problems reported with the GoogleApiClient OnConnectionFailedListener
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to receive location updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and monitor a Geofence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Location awareness offers many benefits to an app, so many in fact that even
    desktop apps now attempt to get the user's location. Location uses ranges from
    turn-by-turn directions, "find the nearest" applications, alerts based on location,
    and there are now even location-based games that get you out exploring with your
    device.
  prefs: []
  type: TYPE_NORMAL
- en: The Google APIs offer many rich features for creating location-aware applications
    and mapping features. Our first recipe *How to get the last location* will look
    at obtaining the last known location as stored on the device. If your app is not
    location intensive, this may provide an ideal way to get the user's location without
    a large resource overhead. If you need constant updates, then turn to the *How
    to receive location updates* recipe. Though constant location updates requires
    more resources, users are likely to understand when you're giving them turn-by-turn
    directions. If you are requesting location updates for a proximity location, take
    a look at using the Geofence option instead, in the *Create and monitor a Geofence*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: All the recipes in this chapter use the Google Libraries. If you have not already
    downloaded the SDK Packages, follow the instructions from Google.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add SDK Packages from [http://developer.android.com/sdk/installing/adding-packages.html](http://developer.android.com/sdk/installing/adding-packages.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the location, there''s a good chance you''ll want to map
    it as well. This is another area where Google makes this very easy on Android
    using the Google Maps API. To get started with Google Maps, take a look at the
    **Google Maps Activity** option when creating a new project in Android Studio.
    Instead of selecting **Blank Activity**, as we normally do for these recipes,
    choose **Google Maps Activity**, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/B05057_13_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to get the last location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll start this chapter with a simple recipe that is commonly needed: how
    to get the last known location. This is an easy way to use APIs with very little
    overhead resource drain. (This means, your app won''t be responsible for killing
    the battery.)'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also provides a good introduction to setting up the Google Location
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `GetLastLocation`. Use
    the default **Phone & Tablet** options, and select **Empty Activity** when prompted
    for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll add the necessary permissions to the Android Manifest, then we''ll
    create a layout with a `Button` and a `TextView` element. Finally, we''ll create
    a `GoogleAPIClient` API to access the last location. Open the Android Manifest
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Under the **Gradle Scripts** section, open the **build.gradle (Module: app)**
    file, as shown in this screenshot:![How to do it...](img/B05057_13_2.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following statement to the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the class for `ConnectionCallbacks`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the class to handle the `OnConnectionFailedListener` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the method to set up `GoogleAPIClient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method for the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can call the `getLastLocation()` method, we need to set up `GoogleApiClient`.
    We call the `GoogleApiClient.Builder` method in our `setupGoogleApiClient()` method,
    then connect to the library. When the library is ready, it calls our `ConnectionCallbacks.onConnected()`
    method. For demonstration purposes, this is where we enable the button. (We'll
    use this callback in later recipes to start additional features.)
  prefs: []
  type: TYPE_NORMAL
- en: We used a button to show we can call `getLastLocation()` on demand; it's not
    a one-time call. The system is responsible for updating the location and may return
    the same last location on repeated calls. (This can be seen in the timestamp—it's
    the location timestamp, not the timestamp when the button is pressed.)
  prefs: []
  type: TYPE_NORMAL
- en: This approach of calling the location on demand can be useful in situations
    where you only need the location when something happens in your app (such as geocoding
    an object). Since the system is responsible for the location updates, your app
    will not be responsible for a battery drain from location updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The accuracy of the location object we receive is based on our permission setting.
    We used `ACCESS_COARSE_LOCATION`, but if we want higher accuracy, we can request
    `ACCESS_FINE_LOCATION` instead, with the following permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, to keep the code focused on `GoogleApiClient`, we just wrap the `getLastLocation()`
    with `SecurityException`. In a production application, you should check and request
    the permission as shown in the previous chapter. (See *The new run-time permission
    model*.)
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If a problem occurs when connecting to the `GoogleApiClient`, the `OnConnectionFailedListener`
    is called. In this example, we display a Toast. The next recipe, *Resolving problems
    reported with the GoogleApiClient OnConnectionFailedListener*, will show a more
    robust way to handle this situation.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the location can be a challenge since it's difficult to actually move
    the device when testing and debugging. Fortunately, we have the ability to simulate
    GPS data with the emulator. (It is possible to create mock locations on a physical
    device as well, but it's not as easy.)
  prefs: []
  type: TYPE_NORMAL
- en: Mock locations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three ways to simulate locations with the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DDMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Geo` command through Telnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To set a mock location in Android Studio, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Tools** | **Android** | **Android Device Monitor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Emulator Control** tab in the device window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter GPS coordinates under **Location Controls**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s a screenshot showing the **Location** **Controls**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mock locations](img/B05057_13_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not that simulating the location works by sending GPS data. Therefore, for your
    app to receive the mock location, it will need to be receiving GPS data. Testing
    `lastLocation()` may not send the mock GPS data since it doesn't rely solely on
    the GPS for determining the device location. Try the mock location with the recipe
    *How to receive Location Updates* where we can request the priority. (We can't
    force the system to use any specific location sensor, we can only make a request.
    The system will choose the optimum solution to deliver the results.)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *The new Android 6.0 run-time permission model* recipe in [Chapter 14](ch14.html
    "Chapter 14. Getting your app ready for the Play Store"), *Getting Your App Ready
    for the Play Store*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Setting up Google Play Services: [https://developers.google.com/android/guides/setup](https://developers.google.com/android/guides/setup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **FusedLocationProviderApi** interface: [https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi](https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving problems reported with the GoogleApiClient OnConnectionFailedListener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the constantly changing nature of Google APIs, your users are likely to
    attempt to use your application, but not be able to because their files are out
    of date. In the previous example, we just show a Toast, but we can do better.
    We can use the `GoogleApiAvailability` library to display a dialog to help the
    user resolve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: We'll continue with the previous recipe and add code to the `onConnectionFailed()`
    callback. We'll use the error result to display additional information to the
    user to resolve their problem.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will continue from the previous recipe, *How to get the last location*.
    If you are loading the project from the downloaded source files, it is called
    `HandleGoogleAPIError`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we are continuing from the previous recipe, we''ll only cover the steps
    necessary to update the previous code. Open `ActivityMain.java` and follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to the global class variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to show the Google API error dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to override `onActivityResult()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `onConnectionFailed()`, replace the existing line of code calling Toast,
    using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of displaying the error message with a Toast as we did before, we now
    check `connectionResult` to see what we can do. The `GoogleAPIClient` uses the
    `connectionResult` to indicate possible courses of action. We can call the `hasResolution()`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If the response is `true`, then it's something the user can resolve, such as
    enabling the location service. If the response is `false`, we get an instance
    of the `GoogleApiAvailability` and call the `getErrorDialog()` method. When finished,
    our `onActivityResult()` callback is called, where we reset `mResolvingError`
    and, if successful, attempt to reconnect.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not have a device with an older Google API for testing, you can try
    testing on an emulator with an older Google API version.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your application is using fragments, you can get a dialog fragment instead,
    using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Accessing Google APIs: [https://developers.google.com/android/guides/api-client](https://developers.google.com/android/guides/api-client)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to receive location updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your application needs frequent location updates, your application can request
    periodic updates. This recipe will demonstrate this using the `requestLocationUpdates()`
    method from `GoogleApiClient`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `LocationUpdates`. Use
    the default **Phone & Tablet** options and select **Empty Activity** when prompted
    for **Activity Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we are receiving updates from the system, we won''t need a button for
    this recipe. Our layout will consist of just the `TextView` to see the location
    data. Open the Android Manifest and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the file `build.gradle (Module: app)` and add the following statement
    to the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `LocationListener` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `ConnectionCallbacks` class to receive the location updates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `OnConnectionFailedListener` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `setupLocationRequest()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is similar to the *How to get the last location* recipe, as we need
    to set up the `GoogleApiClient` as we did before. But, instead of calling the
    `lastLocation()` method on demand, we call the `requestLocationUpdates()` method
    to receive periodic location updates through the `LocationListener` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `requestLocationUpdates()` method requires three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GoogleApiClient`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocationRequest`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocationListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We create the `GoogleApiClient` as we did before. This is the code to create
    our `LocationRequest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When calling `setInterval()`, it's generally best to use the slowest delay that
    works for your purposes, as it requires less device resources. The same idea applies
    when calling `setPriority()`. The third parameter, the `LocationListener`, is
    where we define the callback method `onLocationChanged()`. Here we just display
    the location data along with the location timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the previous Android APIs, the `GoogleApiClient` API does not allow the
    selection of specific sensors for the location updates. As mentioned in the *Mock
    Locations* section of *How to get the last Location*, using `LocationRequest.PRIORITY_HIGH_ACCURACY`
    along with the `ACCESS_FINE_LOCATION` permission should use the GPS sensor. Refer
    to the *Mock Locations* section for instructions on simulating your location.
  prefs: []
  type: TYPE_NORMAL
- en: Stop receiving location updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When your application no longer needs location updates, call the `removeLocationUpdates()`
    method, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Generally, you would want to disable updates when your application is no longer
    in the foreground, but this depends on your specific application requirements.
    If your application needs constant updates, it may be more desirable to create
    a background service to handle the callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: onLocationChanged** at [https://developer.android.com/reference/com/google/android/gms/location/LocationRequest.html](https://developer.android.com/reference/com/google/android/gms/location/LocationRequest.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and monitor a Geofence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your application needs to know when the user enters a certain location,
    there''s an alternative to having to continuously check the user location: Geofencing.
    A Geofence is a location (latitude and longitude) along with a radius. You can
    create a Geofence and let the system notify you when the user enters the location
    proximity you specified. (Android currently allows up to 100 Geofences per user.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Geofence properties include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Location**: The longitude and latitude'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radius**: The size of the circle (in meters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loitering delay** : How long the user may remain within the radius before
    sending notifications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expiration**: How long until the Geofence automatically expires'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition** **type**: These are listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GEOFENCE_TRANSITION_ENTER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GEOFENCE_TRANSITION_EXIT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INITIAL_TRIGGER_DWELL`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe will show you how to create a Geofence object and use it to create
    an instance of `GeofencingRequest`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it: `Geofence`. Use the default
    **Phone & Tablet** options and select **Empty Activity** when prompted for **Activity
    Type**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We won''t need a layout for this recipe as we''ll use Toasts and Notifications
    for the user interaction. We will need to create an additional Java class for
    `IntentService`, which handles the Geofence alerts. Open the Android Manifest
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the file `build.gradle (Module: app)` and add the following statement
    to the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new Java class called `GeofenceIntentService` and extend the `IntentService`
    class. The declaration will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `onHandleIntent()` to receive the Geofence alert:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `sendNotification()` method to display the message to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the Android manifest and add the following within the `<application>`
    element, at the same level as the `<activity>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `ResultCallback` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `ConnectionCallbacks` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `OnConnectionFailedListener` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the method to setup the `GoogleAPIClient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `setupGoogleApiClient()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a pending intent with the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `geofence` object and add it to a list for the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `createGeofencingRequest()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we add the `ACCESS_FINE_LOCATION` permission as this is required for
    Geofencing. We set up the `GoogleApiClient` as we've done in previous recipes
    and wait until `onConnected()` is called to set up the `GeofencingApi`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can call the `GeofencingApi.addGeofences()` method, we have to prepare
    three objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GoogleApiClient`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geofence Request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pending Intent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We already created the `GoogleApiClient`, which we saved in the `mGoogleApiClient`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the Geofence Request, we use the `GeofencingRequest.Builder`. The
    builder requires the list of Geofence objects, which are created in the `createGeofenceList()`
    method. (Even though we are only creating a single Geofence object, the builder
    requires a list, so we just add our single Geofence to an `ArrayList`.) Here is
    where we set the Geofence properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Only the Loitering delay is optional, but we need it since we are using the
    `DWELL` transition. When calling `setTransitionTypes()`, we can combine multiple
    transition types using the `OR` operator, shown with the pipe. Here''s an example
    using `ENTER` and `EXIT` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: For this example, we used the same default latitude and longitude as the emulator.
    Change these values as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Our call to `Geofence.Builder()` creates the Geofence object. With the Geofence
    list ready, we call the `GeofencingRequest.Builder` and set our initial trigger
    to `INITIAL_TRIGGER_DWELL`. (If you change the preceding transition types, you
    may want to change the initial trigger as well.)
  prefs: []
  type: TYPE_NORMAL
- en: The last object we need is a Pending Intent, which is how the system will notify
    our app when the Geofence criteria are met. We created the `GeofenceIntentService`
    to handle the Geofence intent by sending a notification to the user. (For more
    information on notifications, refer to the *Lights, Action, and Sound Redux using
    Notifications* recipe in [Chapter 7](ch07.html "Chapter 7. Alerts and Notifications"),
    *Alerts and Notifications*.)
  prefs: []
  type: TYPE_NORMAL
- en: With all three objects created, we just call `LocationServices.GeofencingApi.addGeofences()`
    and wait for the notification to arrive.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stop receiving Geofence notifications, you can call the `removeGeofences()`
    method with either the `RequestID` parameter or `PendingIntent`. The following
    example uses the same `PendingIntent` method we used for the notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Geofence.Builder` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html](https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `GeofencingRequest.Builder` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder](https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
