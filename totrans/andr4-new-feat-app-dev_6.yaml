- en: Chapter 6. Supporting Different Screen Sizes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. 支持不同的屏幕尺寸
- en: Android 3.0 is only for large screen devices. However, Android Ice Cream Sandwich
    is for all small and large screen devices. Developers should create applications
    that support both large and small screen sizes. This chapter will show the ways
    of designing user interfaces that support different screen sizes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓3.0仅适用于大屏幕设备。然而，安卓冰淇淋三明治系统适用于所有小屏幕和大屏幕设备。开发者应该创建支持大屏幕和小屏幕尺寸的应用程序。本章将展示支持不同屏幕尺寸的设计用户界面的方法。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Using `match_parent` and `wrap_content`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`match_parent`和`wrap_content`
- en: Using nine-patch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用九宫格图（nine-patch）
- en: Using `dip` instead of `px`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`dip`而不是`px`
- en: Android 4.0 supports different screen sizes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓4.0支持不同的屏幕尺寸
- en: There is a vast variety of Android devices and hence there are many different
    screen sizes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备种类繁多，因此也有许多不同的屏幕尺寸。
- en: 'The following graph (source [opensignalmaps.com](http://opensignalmaps.com))
    shows the Android device fragmentation:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表（来源[opensignalmaps.com](http://opensignalmaps.com)）展示了安卓设备碎片化情况：
- en: '![Android 4.0 supports different screen sizes](img/9526_06_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![安卓4.0支持不同的屏幕尺寸](img/9526_06_01.jpg)'
- en: As you see in the graph, there is a vast variety of devices (nearly 4000 distinct
    devices). This means many different screen sizes and densities. Android scales
    and resizes the user interface of your Android applications. However, this is
    not enough all the time. For instance, a user interface designed for a small screen
    will be magnified for a large screen by the Android. This doesn't look good on
    large screens. The space on large screens should be used efficiently and the user
    interfaces of large screens should be different than the user interfaces for small
    screens. Android provides some APIs for designing the user interfaces that fit
    the different screen sizes and densities. You should use these APIs to make your
    application look good on different screen sizes and densities. In this way, user
    experience of Android applications could be increased.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如同图中所示，有各种各样的设备（近4000种独特的设备）。这意味着有许多不同的屏幕尺寸和密度。安卓会缩放和调整你的应用程序的用户界面。然而，这并不总是足够。例如，为小屏幕设计的用户界面在大型屏幕上会被放大。这在大型屏幕上看起来并不美观。大型屏幕上的空间应该被有效利用，大型屏幕的用户界面应该与小屏幕的用户界面不同。安卓提供了一些API，用于设计适合不同屏幕尺寸和密度的用户界面。你应该使用这些API，使你的应用程序在不同的屏幕尺寸和密度上看起来都很好。这样，可以提高安卓应用程序的用户体验。
- en: 'The things to be considered in designing user interfaces for Android applications
    are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 设计安卓应用程序用户界面时需要考虑的事项如下：
- en: '**Screen Sizes**: This is the physical screen size of the devices. Screen sizes
    may range from 2.5" to 10.1" for smart phones and tablets.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕尺寸**：这是设备的物理屏幕尺寸。屏幕尺寸可能从2.5"到10.1"不等，适用于智能手机和平板电脑。'
- en: '**Resolution**: This is the number of pixels that a device has in each dimension.
    It is usually defined as width x height such as 640 x 480.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分辨率**：这是设备在每个维度上的像素数量。它通常以宽度和高度的乘积来定义，例如640 x 480。'
- en: '**Screen Density**: This is the maximum number of pixels in a physical area.
    High density screens have more pixels than low density screens in an area.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕密度**：这是物理区域内的最大像素数。高密度屏幕在相同区域内比低密度屏幕拥有更多的像素。'
- en: '**Screen Orientation**: A device could be in landscape or portrait mode. When
    in landscape mode its width increases.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕方向**：设备可以是横向或纵向模式。在横向模式下，其宽度会增加。'
- en: Using match_parent and wrap_content
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`match_parent`和`wrap_content`
- en: '`match_parent` and `wrap_content` could be used to set the `layout_height`
    and `layout_width` properties of a view. When `match_parent` is used, Android
    expands the view to make its size the same as its parent. When `wrap_content`
    is used, Android expands the view according to its content''s size. It is also
    possible to set the width and height using pixel values. However, it is not a
    good practice to use pixel values, because the number of pixels change according
    to the screen properties and a given pixel value is not of the same size in every
    screen. In the following example, we use the pixel value in order to set the width
    and height of the view. The layout XML code is shown in the following code block:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`match_parent`和`wrap_content`可用于设置视图的`layout_height`和`layout_width`属性。当使用`match_parent`时，Android会扩展视图以使其大小与其父级相同。使用`wrap_content`时，Android会根据内容大小扩展视图。也可以使用像素值设置宽度和高度。然而，使用像素值不是一个好的实践，因为像素数量会根据屏幕属性而变化，且给定的像素值在每个屏幕上不是相同的大小。在以下示例中，我们使用像素值来设置视图的宽度和高度。布局XML代码如下代码块所示：'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some of the definitions such as `@dimen` used in the preceding layout XML files
    will be available in the source code files of this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的布局XML文件中使用的一些定义，如`@dimen`，将在本书的源代码文件中提供。
- en: 'As you can see in the code, we set `layout_width` to `240px` and `layout_height`
    to `30px`. We will execute this application in three different emulators with
    different screen properties. The emulator properties are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '如您在代码中所见，我们将`layout_width`设置为`240px`，将`layout_height`设置为`30px`。我们将在三个具有不同屏幕属性的模拟器中执行此应用程序。模拟器属性如下： '
- en: '**Small Screen Properties:** This configuration is for small screens. These
    properties can be configured as shown in the following screenshot:![Using match_parent
    and wrap_content](img/9526_06_02.jpg)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小屏幕属性：**此配置适用于小屏幕。这些属性可以像以下截图所示进行配置：![使用 match_parent 和 wrap_content](img/9526_06_02.jpg)'
- en: '**Normal Screen Properties:** This configuration is for normal screens. These
    properties can be configured as shown in the following screenshot:![Using match_parent
    and wrap_content](img/9526_06_03.jpg)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常屏幕属性：**此配置适用于正常屏幕。这些属性可以像以下截图所示进行配置：![使用 match_parent 和 wrap_content](img/9526_06_03.jpg)'
- en: '**Large Screen Properties:** This configuration is for large screens. These
    properties can be configured as shown in the following screenshot:![Using match_parent
    and wrap_content](img/9526_06_04.jpg)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大屏幕属性：**此配置适用于大屏幕。这些属性可以像以下截图所示进行配置：![使用 match_parent 和 wrap_content](img/9526_06_04.jpg)'
- en: 'When this application is executed in the previous emulator configurations,
    the screens will look like the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当此应用程序在前面的模拟器配置中执行时，屏幕将如下所示：
- en: '![Using match_parent and wrap_content](img/9526_06_05.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用 match_parent 和 wrap_content](img/9526_06_05.jpg)'
- en: As you can see in the screenshot, it looks fine on the small screen. However,
    on the normal screen, the text is cropped and not all the content of the `TextView`
    component is visible. On the large screen, nothing is visible. This sample shows
    that using pixel as a width and height value is not a good practice.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如截图中所示，在小屏幕上看起来是好的。然而，在正常屏幕上，文本被裁剪，不是`TextView`组件的所有内容都可见。在大屏幕上，则什么也看不见。这个示例说明使用像素作为宽度和高度值不是一个好的做法。
- en: 'Now, we will use `wrap_content` and `match_parent` to set the height and width
    lengths. The layout XML code will look like the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`wrap_content`和`match_parent`来设置高度和宽度长度。布局XML代码将如下所示：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the application is executed with same emulator configurations, the screen
    will look like the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用相同的模拟器配置执行应用程序时，屏幕将如下所示：
- en: '![Using match_parent and wrap_content](img/9526_06_06.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用 match_parent 和 wrap_content](img/9526_06_06.jpg)'
- en: As you can see in this screenshot, the application looks the same in each emulator
    and screen configurations, and all the content of the `TextView` component is
    displayed. Thus, using `wrap_content` and `match_parent` is a best practice in
    designing user interfaces.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在截图中所见，应用程序在每个模拟器和屏幕配置中看起来都相同，且`TextView`组件的所有内容都得到显示。因此，在设计用户界面时使用`wrap_content`和`match_parent`是最佳实践。
- en: Using dip instead of px
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用dip代替px
- en: 'Another option for the previous sample is to use the `dip` (density independent
    pixels) value instead of the `px` value. In this way, the `TextView` component
    will look nearly the same in different screen sizes. The code will look like the
    following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面的示例，另一个选项是使用 `dip`（与密度无关的像素）值替代 `px` 值。这样，`TextView` 组件在不同屏幕尺寸下看起来几乎相同。代码如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in this code, we used the `dip` value for the width and height.
    If you execute this application in the emulators defined in the previous section,
    it would look like the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在这个代码中，我们为宽度和高度使用了 `dip` 值。如果你在前一节定义的模拟器中运行这个应用，它将看起来如下所示：
- en: '![Using dip instead of px](img/9526_06_07.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用 dip 而不是 px](img/9526_06_07.jpg)'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For the font sizes, the sp (scale independent pixel) unit could be used instead
    of px.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字体大小，可以使用 sp（与缩放无关的像素）单位替代 px。
- en: Omit using AbsoluteLayout
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用 AbsoluteLayout
- en: '**AbsoluteLayout** is a deprecated layout which uses fixed positions for the
    views in it. `AbsoluteLayout` is not a good practice in designing user interfaces
    because it will not look same in different screen sizes. We will see this with
    the following example layout:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**AbsoluteLayout** 是一个已弃用的布局，它为其中的视图使用固定位置。`AbsoluteLayout` 在设计用户界面中不是一个好的实践，因为它在不同屏幕尺寸下看起来不会相同。我们将通过以下示例布局看到这一点：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see in this XML code, fixed positions are used for the views in
    `AbsoluteLayout`. When this application is executed in the emulators defined in
    previous section, it will look like the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在这个 XML 代码中，`AbsoluteLayout` 中的视图使用了固定位置。当这个应用在前一节定义的模拟器中运行时，它将看起来如下所示：
- en: '![Omit using AbsoluteLayout](img/9526_06_08.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![避免使用 AbsoluteLayout](img/9526_06_08.jpg)'
- en: As you can see in the screen shots, the text at the bottom is not visible on
    the small screen, but it is visible on the other screens. AbsoluteLayout is not
    a good practice in user interface design.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在截图上，小屏幕底部文本是不可见的，但在其他屏幕上可见。`AbsoluteLayout` 在用户界面设计中不是一个好的实践。
- en: Providing different bitmap drawables for different screen densities
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为不同的屏幕密度提供不同的位图资源
- en: Android scales bitmaps according to screen density. However, images will not
    look good if only one bitmap is provided. The image would look blurry or corrupted.
    Providing different bitmap drawables for different screen densities is a good
    practice. In the following screenshot, two image buttons are used. Different bitmap
    drawables are provided for the first image button and a low density bitmap drawable
    is provided for the second image button. As you can see in the screenshot, the
    bitmap in the second image button looks blurry; however, the bitmap in the first
    image button looks fine.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓根据屏幕密度缩放位图。然而，如果只提供一个位图，图像看起来不会很好。图像可能会模糊或损坏。为不同的屏幕密度提供不同的位图资源是一个好习惯。在下面的截图中，使用了两个图像按钮。为第一个图像按钮提供了不同的位图资源，为第二个图像按钮提供了一个低密度的位图资源。如你所见，在截图中，第二个图像按钮的位图看起来模糊；然而，第一个图像按钮的位图看起来很好。
- en: '![Providing different bitmap drawables for different screen densities](img/9526_06_09.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![为不同的屏幕密度提供不同的位图资源](img/9526_06_09.jpg)'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If the images are put in the `drawable-nodpi` folder they won't be scaled.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将图像放在 `drawable-nodpi` 文件夹中，它们不会被缩放。
- en: Providing different layouts for different screen sizes
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为不同的屏幕尺寸提供不同的布局
- en: Android scales the layouts to make them fit to device screens. However, this
    is not enough in some cases. In [Chapter 5](ch05.html "Chapter 5. Fragments"),
    *Fragments*, we developed an application that lists the books and when a book
    is clicked, the author of the book is displayed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓会缩放布局以适应设备屏幕。然而，在某些情况下这还不够。在[第5章](ch05.html "第5章. 片段")，*片段*中，我们开发了一个列出书籍的应用，当点击书籍时，会显示书籍的作者。
- en: 'The following is the screenshot that is displayed on small screens:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是显示在小屏幕上的截图：
- en: '![Providing different layouts for different screen sizes](img/9526_06_10.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![为不同的屏幕尺寸提供不同的布局](img/9526_06_10.jpg)'
- en: 'For larger screens, this design is not a good alternative. The user interface
    will look bad. We should use the space in larger screens efficiently. We can use
    a different layout for larger screens that combines the two screens displayed
    on smaller screens. The user interface should look like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大屏幕来说，这个设计并不是一个好的选择。用户界面看起来会很糟糕。我们应该在大屏幕上高效地利用空间。我们可以为更大的屏幕使用不同的布局，将两个在小屏幕上显示的屏幕结合起来。用户界面应该看起来如下所示：
- en: '![Providing different layouts for different screen sizes](img/9526_06_11.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![为不同的屏幕尺寸提供不同的布局](img/9526_06_11.jpg)'
- en: The layout files should be put in appropriate folders. For instance, the layout
    files for large screens should be put in the `res/layout-large` folder and for
    small screens should be put in the `res/layout-small` folder.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 布局文件应放置在适当的文件夹中。例如，大屏幕的布局文件应放在`res/layout-large`文件夹中，小屏幕的应放在`res/layout-small`文件夹中。
- en: 'New screen size qualifiers are introduced with Android 3.2 in addition to existing
    ones. The new qualifiers are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了现有的限定符外，Android 3.2引入了新的屏幕尺寸限定符。新的限定符如下：
- en: '`sw<N>dp`: This qualifier defines the smallest width. For example, `res/layout-sw600dp/`.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sw<N>dp`：此限定符定义了最小的宽度。例如，`res/layout-sw600dp/`。'
- en: When the screen width is at least `N` dp, regardless of the screen orientation,
    the layout file in this folder is used.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当屏幕宽度至少为`N` dp时，无论屏幕方向如何，都将使用此文件夹中的布局文件。
- en: '`w<N>dp`: This qualifier defines the exact available width. For example, `res/layout-w600dp/`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w<N>dp`：此限定符定义了确切可用的宽度。例如，`res/layout-w600dp/`。'
- en: '`h<N>dp`: This qualifier defines the exact available height. For example, `res/layout-h600dp/`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h<N>dp`：此限定符定义了确切可用的高度。例如，`res/layout-h600dp/`。'
- en: Nine-patch
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 九宫格
- en: 'The **nine-patch** feature allows the using of stretchable bitmaps as resources.
    Bitmaps are stretched according to defined stretchable areas. Stretchable areas
    are defined by a 1-pixel width black line. The following is a sample nine-patch
    drawable:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**九宫格**特性允许使用可拉伸的位图作为资源。位图根据定义的可拉伸区域进行拉伸。可拉伸区域由1像素宽的黑线定义。以下是一个示例九宫格可绘制资源：'
- en: '![Nine-patch](img/9526_06_12.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Nine-patch](img/9526_06_12.jpg)'
- en: The image file should be put into the drawable folder with an extension of *.*
    `9.png` *.* The top and the left black lines define the stretchable area and the
    bottom and the right black lines define the stretchable area to fit content.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图像文件应放置在带有扩展名*.* `9.png` *.* 的drawable文件夹中。顶边和左边黑线定义了可拉伸区域，底边和右边黑线定义了适应内容的可拉伸区域。
- en: There is a tool called **Draw 9-patch** that is bundled with Android SDK. You
    can easily create nine-patch images with this editor.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为**Draw 9-patch**的工具与Android SDK捆绑在一起。你可以使用这个编辑器轻松创建九宫格图片。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we learned some design guidelines in order to support different
    screen sizes and densities. We shouldn't use hardcoded pixel values to define
    layout width and height. Instead, we should use `wrap_content` and `match_parent`
    properties, or use `dip` values instead of `px` values. We should use different
    layouts for different screen sizes to make applications look good in all screen
    sizes. We also learned about using nine-patch rule to create stretchable bitmaps.
    After developing an application, we should test the application in various screen
    sizes and densities in an Android emulator to see how it looks. In this way we
    could detect user interface problems and bugs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一些设计规范，以便支持不同的屏幕尺寸和密度。我们不应该使用硬编码的像素值来定义布局的宽度和高度。相反，我们应该使用`wrap_content`和`match_parent`属性，或者使用`dip`值代替`px`值。我们应该为不同的屏幕尺寸使用不同的布局，以使应用程序在所有屏幕尺寸上看起来都很好。我们还了解了使用九宫格规则创建可拉伸位图的方法。开发应用程序后，我们应在Android模拟器中测试各种屏幕尺寸和密度下的应用程序，以查看其外观。这样我们可以检测用户界面问题和错误。
- en: In the next chapter, we are going to learn about the Android Compatibility Package
    and we will see how to use it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于Android兼容性包的内容，并了解如何使用它。
