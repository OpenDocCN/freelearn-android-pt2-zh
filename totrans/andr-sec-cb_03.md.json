["```kt\n        dpkg –I drozer-[version].deb\n\n        ```", "```kt\n         C:\\drozer\\drozer\n\n        ```", "```kt\n         C:\\drozer\\drozer console\n\n        ```", "```kt\n               ;C:\\Program Files\\Java\\jre7\n        ```", "```kt\n    drozer\n\n    ```", "```kt\n    PATH=$PATH:`which java\n\n    ```", "```kt\n    adb install drozer.apk\n\n    ```", "```kt\n               ;C:\\drozer\\drozer\n\n        ```", "```kt\n    PATH=$PATH:`which drozer`\n\n    ```", "```kt\n    apt-get install python-dev\n\n    ```", "```kt\n    apt-get install python-setuptools\n\n    ```", "```kt\n    apt-get install ia32-libs-i386\n\n    ```", "```kt\n    easy_install –allow-hosts pypi.python.org protobuf==2.4.1\n\n    ```", "```kt\n    easy_install twisted==10.2.0\n\n    ```", "```kt\n    easy_install drozer-[version]-py2.7.egg\n\n    ```", "```kt\n    adb forward tcp:31415 tcp:31415\n\n    ```", "```kt\n    drozer console connect\n\n    ```", "```kt\ndz> run app.package.list\n\n```", "```kt\ndef add_arguments(self, parser):\n  parser.add_argument(\"-a\", \"--package\", default=None, help=\"the identifier of the package to inspect\")\n  parser.add_argument(\"-d\", \"--defines-permission\", default=None, help=\"filter by the permissions a package defines\")\n  parser.add_argument(\"-f\", \"--filter\", default=None, help=\"keyword filter conditions\")\n  parser.add_argument(\"-g\", \"--gid\", default=None, help=\"filter packages by GID\")\n  parser.add_argument(\"-p\", \"--permission\", default=None, help=\"permission filter conditions\")\n  parser.add_argument(\"-u\", \"--uid\", default=None, help=\"filter packages by UID\")\n\ndef execute(self, arguments):\n  if arguments.package == None:\n    for package in self.packageManager().getPackages(common.PackageManager.GET_PERMISSIONS | common.PackageManager.GET_CONFIGURATIONS | common.PackageManager.GET_GIDS | common.PackageManager.GET_SHARED_LIBRARY_FILES):\n      self.__get_package(arguments, package)\n  else:\n    package = self.packageManager().getPackageInfo(arguments.package, common.PackageManager.GET_PERMISSIONS | common.PackageManager.GET_CONFIGURATIONS | common.PackageManager.GET_GIDS | \n            common.PackageManager.GET_SHARED_LIBRARY_FILES)\n\n      self.__get_package(arguments, package)\n\ndef get_completion_suggestions(self, action, text, **kwargs):\n  if action.dest == \"permission\":\n    return android.permissions\n\ndef __get_package(self, arguments, package):\n  application = package.applicationInfo\n```", "```kt\ndz> run app.package.list –f [application name]\n\n```", "```kt\ndz> run app.package.list –f facebook\n\n```", "```kt\ndz> run app.package.info --help\n\n```", "```kt\ndz> run app.package.info –-package [package name]\n\n```", "```kt\ndz> run app.package.info –a [package name]\n\n```", "```kt\ndz> run app.package.info –a com.android.browser\n\n```", "```kt\ndz> run app.package.info –a com.google.android.gsf\n\n```", "```kt\ndz> run app.package.info –p [permission label]\n\n```", "```kt\ndz> run app.package.info –p android.permission.INTERNET\n\n```", "```kt\ndz> run app.activity.info\n\n```", "```kt\ndz> run app.activity.info –-filter [activity name]\n\n```", "```kt\ndz> run app.activity.info –-filter facebook\n\n```", "```kt\ndz> run app.activity.info –f facebook\n\n```", "```kt\ndz> run app.activity.info –-package [package name]\n\n```", "```kt\ndz> run app.activity.info –a [package name]\n\n```", "```kt\ndz> run app.activity.info –a com.android.phone\n\n```", "```kt\n    dz> run app.provider.info\n\n    ```", "```kt\ndef execute(self, arguments):\n  if arguments.package == None:\n    for package in self.packageManager().getPackages      (common.PackageManager.GET_PROVIDERS |         common.PackageManager.GET_URI_PERMISSION_PATTERNS):\n      self.__get_providers(arguments, package)\n  else:\n    package = self.packageManager().getPackageInfo(arguments.package, common.PackageManager.GET_PROVIDERS | common.PackageManager.GET_URI_PERMISSION_PATTERNS)\n\n    self.__get_providers(arguments, package)\n\ndef get_completion_suggestions(self, action, text, **kwargs):\n  if action.dest == \"permission\":\n    return [\"null\"] + android.permissions\n\ndef __get_providers(self, arguments, package):\n  providers = self.match_filter(package.providers, 'authority', arguments.filter)\n\n  if arguments.permission != None:\n    r_providers = self.match_filter(providers, 'readPermission',       arguments.permission)\n    w_providers = self.match_filter(providers, 'writePermission',       arguments.permission)\n\n```", "```kt\nself.packageManager().getPackages(common.PackageManager.GET_PROVIDERS | common.PackageManager.GET_URI_PERMISSION_PATTERNS)\n```", "```kt\n    dz> run app.provider.info –a [package name]\n\n    ```", "```kt\n    dz> run app.provider.info –-package [package name]\n\n    ```", "```kt\n    dz> run app.provider.info –p [Permission label]\n\n    ```", "```kt\n    dz> run app.provider.info –-permission [permission label]\n\n    ```", "```kt\ndz> run app.service.info –-package [package name]\n\n```", "```kt\n    dz> run app.service.info –p [permission label]\n    dz> run app.service.info –-permission [permission label]\n\n    ```", "```kt\n    dz> run app.service.info –f [Filter string]\n    dz> run app.service.info. –filter [filter string]\n\n    ```", "```kt\n    dz> run app.service.info –u\n    dz> run app.service.info –-unexported\n\n    ```", "```kt\n    dz> run app.service.info –-help\n\n    ```", "```kt\ndef execute(self,arguments):\n  if arguments.package == None:\n    for package in self.packageManager().getPackageInfo      (common.PackageManager.GET_SERVICES |         common.PackageManager.GET_PERMISSIONS):\n      self.__get_servcies(arguments, package)\n  else:\n    package = self.packageManager().getPackageInfo(arguments.package, common.PackageManager.GET_SERVICES | common.PackageManager.GET_PERMISSIONS)\n    self.__get_services(arguments,package)\n```", "```kt\nif arguments.package == None:\n```", "```kt\nservices = self.match_filter(services, \"permission\", arguments.permission)\n```", "```kt\ndz> run app.broadcast.info\n\n```", "```kt\ndz> run app.broadcast.info –a [package]\n\n```", "```kt\ndz> run app.broadcast.info –-package [package]\n\n```", "```kt\ndz> run app.broadcast.info –f [filter]\n\n```", "```kt\ndz> run app.broadcast.info –-filter [filter]\n\n```", "```kt\ndz> run app.broadcast.info –u\ndz> run app.broadcast.info –-unexported\n\n```", "```kt\ndz> run app.broadcast.info –i\n\n```", "```kt\ndz> run app.broadcast.info –-show-intent-filters\n\n```", "```kt\ndz> app.package.attacksurface [package name]\n\n```", "```kt\nfrom drozer import android\nfrom drozer.modules import common, Module\nclass AttackSurface(Module,common.Filters, common.PackageManager):\n\ndef execute(self,arguments):\n  If arguments.package != None:\n    Package = self.packageManger().getPackageInfo(arguments.package, common.PackageManager.GET_ACTIVITIES | common.PackageManager.GET_RECEIVERS | common.PackageManager.GET_PROVIDERS | common.PackageManager.GET_SERVICES)\n    application = package.applicationInfo\n    activities = self.match_filter(package.activities, 'exported',True)\n    receivers = self.match_filter(package.receivers, 'exported', True)\n    providers = self.match_filter(package.proviers, 'exported', True)\n    services = self.match_filter(package.services, 'exported', True)\n    self.stdout.write(\"Attack Surface:\\n\")\n    self.stdout.write(\" %d activities exported\\n\" % len(activities))\n    self.stdout.write(\" %d broadcast receivers exported\\n\" % len(receivers))\n    self.stdout.write(\" %d content providers exported\\n\" % len(providers))\n    self.stdout.write(\" %d services exported\\n\" % len(services))\n    if (application.flags & application.FLAG_DEBUGGABLE) != 0:\n      self.stdout.write(\"is debuggable\\n\")\n    if package.sharedUserId != None:\n      self.stdout.write(\"Shared UID (%s)\\n\" % package.sharedUserId)\n  else:\n  self.stdout.write(\"Package Not Found\\n\")\n```", "```kt\n    dz> run app.activity.info –-package [package name]\n\n    ```", "```kt\n    dz> run app.activity.start –-action [intent action] –-category [intent category] –-component [package name] [component name]\n\n    ```", "```kt\ndz> run app.activity.start –-action android.intent.action.MAIN –-category android.intent.category.LAUNCHER –-component com.android.browser com.android.browser.BrowserActivity\n\n```", "```kt\n.... #some code has been omitted for brevity\ndef execute(self,arguments)\n  intent = android.Intent.fromParser(arguments)\n\n  if len(intent.flags) == 0:\n    intent.flags.append('ACTIVITY_NEW_TASK')\n\n  if intent.isValid():\n    self.getContext().startActivity(intent.buildIn(self))\n  else:\n    self.stderr.write('invlaid intent: one of action or component must be set')\n...#some code has been omitted for brevity\n```", "```kt\ndz> run app.activity.forintent –-action [intent action] –category [intent category]\n\n```", "```kt\ndz> run app.activity.forintent –-action android.intent.action.VIEW –-category android.intent.category.DEFAULT\n\n```", "```kt\n    from drozer.modules import Module\n    class Info(Module):\n      name = \"Get Device info\"\n      description = \"A module that returns information about the device and hardware features\"\n      examples = \"run ex.device.info\"\n      date = \"10-11-13\"\n      author = \"Keith Makan\"\n      license = \"GNU GPL\"\n      path = [\"ex\",\"device\"]\n      def execute(self,arguments):\n        build = self.new(\"android.os.Build\")\n        self.stdout.write(\"Getting device info...\\n\")\n        self.stdout.write(\"[*] BOARD : %s\\n\" % (build.BOARD))\n        self.stdout.write(\"[*] BOOTLOADER : %s\\n\" % (build.BOOTLOADER))\n        self.stdout.write(\"[*] BRAND : %s\\n\" % (build.BRAND))\n        self.stdout.write(\"[*] CPU_ABI : %s\\n\" % (build.CPU_ABI))\n        self.stdout.write(\"[*] CPU_ABI2 : %s\\n\" % (build.CPU_ABI2))\n        self.stdout.write(\"[*] DEVICE : %s\\n\" % (build.DEVICE))\n        self.stdout.write(\"[*] DISPLAY : %s\\n\" % (build.DISPLAY))\n        self.stdout.write(\"[*] FINGERPRINT : %s\\n\" % (build.FINGERPRINT))\n        self.stdout.write(\"[*] HARDWARE : %s\\n\" % (build.HARDWARE))\n        self.stdout.write(\"[*] MANUFACTURER : %s\\n\" % (build.MANUFACTURER))\n        self.stdout.write(\"[*] MODEL : %s\\n\" % (build.MODEL))\n        self.stdout.write(\"[*] TAGS : %s\\n\" % (build.TAGS))\n    ```", "```kt\n    dz> module repository create [path-to-your-module-dir]/repo\n\n    ```", "```kt\n    dz> module install [path-to-your-module-dir]/ex.device.info\n\n    ```", "```kt\n    dz> run ex.device.info\n\n    ```", "```kt\nimport drozer.modules import Module\nclass Info(Module)\n```", "```kt\nname = \"\"\ndescription = \"\"\n\nlicense = \"\"\n```", "```kt\ndef execute(self, arguments):\n```", "```kt\nbuild = self.new(\"android.os.Build\")\n```", "```kt\nself.stdout.write(\"[*] BOARD : %s\\n\" % (build.BOARD))\n```", "```kt\n    from drozer.modules import Module, common\n    from drozer import android\n    import M2Crypto\n    import subprocess\n    from OpenSSL import crypto\n    class Info(Module,common.Filters,common.PackageManager):\n      name = \"Print the Signer certificate for an application\"\n      description = \"this module allows you to print the signer x509 certificate for a given applicaiton\"\n      examples = \"run ex.cert.info -p com.android.browser\"\n      author = \"Keith Makan\"\n      date = \"11-11-2013\"\n      license = \"GNU GPL\"\n      path = [\"ex\",\"cert\"]\n      def add_arguments(self, parse):\n        parse.add_argument(\"-p\",\"--package\",default=None,help=\"The Package Name\")\n      def execute(self,arguments):\n        pm = self.packageManager()\n        if arguments.package == None:\n          for info in pm.getPackages(common.PackageManager.GET_SIGNATURES):\n            self.stdout.write(\"[*] certificate info for {%s}\\n\" % (info.packageName))\n            self.__print_certs(info)\n        elif arguments.package != None:\n          self.stdout.write(\"[*] certificate info for {%s}\\n\" % (arguments.package))\n          info = pm.getPackageInfo(arguments.package,common.PackageManager.GET_SIGNATURES)\n          self.__print_certs(info)\n        else:\n          self.stdout.write(\"[!] cannot process arguments : '%s'\\n\" % (repr(arguments)))\n      def __print_certs(self,info):\n        sigs = info.signatures[0].toCharsString()\n        sigs = sigs + '\\n'\n        temp_cert = open(\"/tmp/cert.crt\",\"w\")\n        end = 2\n        #converting to DER file\n        for start in range(0,len(sigs)-2,2):\n          temp_cert.write(chr(int(sigs[start:end],16)))\n          end +=2\n        temp_cert.flush()\n        temp_pem = open(\"/tmp/cert.pem\",\"w\")\n        temp_pem.flush()\n        temp_pem.close()\n        certtext = subprocess.check_output([\"openssl\",\"x509\",\"-inform\",\"DER\",\"-in\",\"/tmp/cert.crt\",\"-outform\",\"PEM\",\"-out\",\"/tmp/cert.pem\",\"-text\"])\n        temp_pem = open(\"/tmp/cert.pem\",\"r\")\n        pem_cert_string = temp_pem.read()\n        temp_pem.close()\n        x509cert = crypto.load_certificate(crypto.FILETYPE_PEM,pem_cert_string)\n        m2crypto_crt = M2Crypto.X509.load_cert_string(pem_cert_string,1)\n        self.stdout.write(\"[*] Version : %s\\n\" % (x509cert.get_version()))\n        self.stdout.write(\"[*] Issuer : %s\\n\" % (self._print_x509Name(x509cert.get_issuer())))\n        self.stdout.write(\"[*] Subject : %s\\n\" % (self._print_x509Name(x509cert.get_subject())))\n        self.stdout.write(\"[*] Algorithm : %s\\n\" % \n          (x509cert.get_signature_algorithm()))\n        self.stdout.write(\"[*] NotBefore : %s\\n\" % (x509cert.get_notBefore()))\n        self.stdout.write(\"[*] NotAfter : %s\\n\" % (x509cert.get_notAfter()))\n        self.stdout.write(\"[*] Key Length : %s\\n\" % (x509cert.get_pubkey().bits()))\n        self.stdout.write(\"[*] Public Key : \\n%s\\n\" % (self._print_key(m2crypto_crt)))\n        self.stdout.write(\"\\n\")\n        #self.stdout.write(\"\\n%s\\n\" % (certtext))\n      def _print_x509Name(self,xname):\n        return ''.join([\"%s=%s \" % (i[0],i[1]) for i in xname.get_components()])\n      def _print_key(self,m2cert):\n        return m2cert.get_pubkey().get_rsa().as_pem()\n    ```", "```kt\n    dz> module install [path to your module code]\n\n    ```", "```kt\n    run external.cert.info –p com.google.android.gsf\n\n    ```"]