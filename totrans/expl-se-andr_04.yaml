- en: Chapter 4. Installation on the UDOO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to continue our exploration, we will need to get a tangible system
    in place to work with. In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Build Android 4.3 for the UDOO from source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash an SD card with our boot images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the UDOO running while capturing logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish an `adb` connection to the UDOO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuild the kernel with SELinux support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify our SELinux UDOO image works as expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with the publicly available UDOO Android 4.3 Jelly Bean source
    code, which can be downloaded from [http://www.udoo.org/downloads/](http://www.udoo.org/downloads/).
    It is assumed you have a UDOO and have verified that it is functional. It is recommended
    you follow the instructions on the UDOO website for getting started with the Android
    4.3 prebuilt image as an initial test (for more information, refer to [http://www.udoo.org/getting-started/](http://www.udoo.org/getting-started/)).
  prefs: []
  type: TYPE_NORMAL
- en: You will also need an appropriate development system for working with Android
    and a UDOO, but the details of this are beyond the scope of this chapter. An appendix
    has been provided detailing the setup of a standard Ubuntu Linux 12.04 system
    to ensure you have the highest probability of success duplicating the work in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start this exercise by downloading the Android 4.3 Jellybean source
    code from the download links given in the preceding section, and extract the download
    into a workspace using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, you should review the UDOO documentation and the Android
    source code building instructions at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.elinux.org/UDOO_compile_android_4-2-2_from_sources](http://www.elinux.org/UDOO_compile_android_4-2-2_from_sources)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://source.android.com/source/initializing.html](http://source.android.com/source/initializing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The instructions provided by the preceding URL discuss how to build Android
    with Open JDK 7\. However, these instructions are for the current release of Android
    (L preview) and are not 100 percent relevant. For Android 4.3, you must build
    with Oracle Java 6, which is archived by Oracle and found at [http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html).
  prefs: []
  type: TYPE_NORMAL
- en: It is assumed that you have a duplicate of the system detailed in the [Appendix](apa.html
    "Appendix A. The Development Environment"), *The Development Environment*. That
    appendix, among other things, walks you through the setup of Oracle Java 6 as
    your only Java instance. However, for those who prefer to work from their existing
    systems, particularly those with multiple Java SDKs, please keep in mind you will
    need to ensure your system is using the Oracle Java 6 tools when working through
    the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finish setting up your environment by changing to the root of your UDOO source
    tree and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the environment is configured, we need to build the `bootloader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A graphical menu will appear. Ensure the settings are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DDR Size**: Select 1 Giga, bus size 64, and active CS \ 1 (256Mx4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Board Type**: Select UDOO'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU type**: Select quad-core or dual-core option, dependent on which system
    you have. We happen to be using the quad-core system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS type**: Select **Android**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment device**: Must select **SD/MMC**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra options**: **CLEAN** should be selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compiler options**: Paths to tool chains can be selected here; just take
    the defaults'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the graphical menu displayed by the preceding
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the source](img/0594OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you exit, be sure to save. Then start the compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Just to be safe, verify your build was successful by using `ls u-boot.bin`
    to ensure the `bootloader` image now exists. Now, build Android using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first command is something that was sourced in the setup scripts for Android
    and takes us back to the root of our project tree. The second command, `make`,
    builds the system. You should set the option for `j` to twice your CPU/core count
    in most cases. Because many of you might have a dual-core machine, we'll use `–j4`.
    One of the authors of this book uses 8 CPU cores, for example, and uses the flag
    `-j16`. The file redirection and `tee` commands capture the build output to a
    file. This is important to help and debug any build issues. This build, depending
    on your system can take a long, long time. On the previously mentioned 8-core
    system with 16GB RAM, this took a little over 35 minutes. On other systems, we've
    experienced build times over 3 hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, capturing the logs proved very useful. The build terminated with
    an error, and by searching the logs for `error`, we found the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'By evaluating those errors, we discover we are missing headers for `uuid` and
    `lzo1x`. We can also open the Android makefile, `external/mtd-utils/mkfs.ubifs/Android.mk`,
    and determine the likely libraries involved from the line `LOCAL_LDLIBS:= -lz
    -llzo2 -lm -luuid -m64`. Searching reveals the specific Ubuntu package we''re
    missing; we will install them and build again. The `$` character at the end of
    the search string ensures we only get results ending in `uuid/uuid.h`. Without
    it, we might match files ending in `.html` or `.hpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo apt-file search -x "uuid/uuid.h$"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A successful build should produce some final output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Flashing image on an SD card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the `bootloader`, Android userspace, and Linux kernel built, it''s time
    to insert an SD card and flash the images. Insert an SD card into your host computer,
    and ensure it''s unmounted. In Ubuntu, removable media are mounted automatically,
    so you''ll need to find the `/dev/sd*` device that is your flash drive, and `umount`
    it. For the remainder of the text, we will use `/dev/sdd` as the flash drive,
    but it is important to use the correct device for your system. If you have used
    this SD card for installing UDOO before, the card will contain multiple partitions,
    so you might see `/dev/sdd<num>` mounted numerous times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the SD card is properly unmounted, we can flash our image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must use the `-E` parameter on `sudo` to preserve all the exported variables
    from the Android build. You must be in the same terminal session you built Android
    in. Otherwise you will see the error `No OUT export variable found! Setup not
    called in advance…`.
  prefs: []
  type: TYPE_NORMAL
- en: Once this completes (it will take a while), it's important to flush the block
    device caches back to the disk with the command, `sudo sync`. Then, you can remove
    the SD card, insert it into the UDOO, and boot!
  prefs: []
  type: TYPE_NORMAL
- en: UDOO serial and Android Debug Bridge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the UDOO is booting into Android, we want to make sure we can access
    it using the serial port as well as the **Android Debug Bridge** (**adb**). You'll
    need the UDOO serial drivers appropriate for your system. The details of this
    for Mac, Linux, and Windows can be found at
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.udoo.org/ProjectsAndTutorials/connecting-via-serial-cable/](http://www.udoo.org/ProjectsAndTutorials/connecting-via-serial-cable/).'
  prefs: []
  type: TYPE_NORMAL
- en: The serial port is the first form of communication that will come from the system,
    and it is initialized by the `bootloader`. It is a critical link for debugging
    any kernel or system issues that you encounter later on. It's also required in
    order to configure the USB port to allow `adb` connections across CN3 (the USB
    OTG port on the UDOO). To configure the port, we need to configure and use minicom
    to connect a shell to the device. Start by plugging a micro USB cable from CN6
    (the micro USB port closest to the power button) to the host machine. Next, let's
    find the serial connection by looking through `dmesg` for the connection message
    of a TTY over USB.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Our TTY terminal is on the last line. Let''s connect through it with `minicom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Select **Serial Port Setup**, type `a`, change **Serial Device** to `/dev/ttyUSB0`,
    and type `f` to toggle the hardware flow control off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To exit, hit *Enter*, select **Save Setup and DFL**, then select **Exit from
    Minicom**, and press *Enter*. Now run `minicom` to connect to your UDOO, and watch
    it boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If the device is booted and running, you''ll get a friendly root shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If it''s booting, you''ll see the logs. Just wait for the root shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to flip some GPIO pins to move the CN3 micro USB into debug mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, reset the SAM3X8E processor that was using that bus, by removing and
    replacing the J16 jumper. Now plug in a micro USB cable from the host to CN3\.
    You should now see a USB device as well as `adb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You need to select **Allow USB debugging** when the prompt appears on the UDOO
    Android side. When you do this, the device should go from offline to online; this
    way you can use `adb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now test the connection and grab the screenshot over `adb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, we have a working development system. We have early boot logs
    and a rescue shell through the serial console. We also have an `adb` bridge with
    which we can use the standard Android debugging tools! There's nothing left to
    do but get this system secured with SELinux!
  prefs: []
  type: TYPE_NORMAL
- en: Flipping the switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are enabling SELinux on the UDOO, we need to verify it isn''t turned
    on. The way to do this is to check the known `filesystem` types in the `/proc`
    filesystem. SELinux has its own psuedo-filesystem, so if it''s enabled, we should
    see it in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no evidence of SELinux here, so let''s find the kernel configuration
    and turn it on. Execute this command from the `~/udoo/kernel_imx` directory, and
    eventually you will be greeted with a graphical editing screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'First, you will need to enable **Auditing support**, as this is a dependency
    of SELinux. Under **General setup** | **Auditing Support**, enable **Audit Support**
    and **Enable system-call auditing**. Use the up and down arrow keys to highlight
    an entry, and press the spacebar to enable it. When an item is enabled, you will
    see an asterisk (*****) next to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flipping the switch](img/0594OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to the main menu by selecting **Exit**... it''s not very intuitive.
    Enter the **File systems** menu, and for each of the three filesystems, **Ext2**,
    **Ext3**, and **Ext4**, ensure that **Extended attributes** and **Security Labels**
    are enabled. Then, go back to the main menu by selecting **Exit**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flipping the switch](img/0594OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From that screen, exit back to the main menu and go to **Security Options**.
    Once in the **Security Options** submenu, enable the **Enable different security
    models** and **Socket and Networking Security Hooks** options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flipping the switch](img/0594OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once these are enabled, more options will appear. Enable **NSA SELinux Support**
    and ensure the other selections and values from the following screenshot are duplicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flipping the switch](img/0594OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, set **Default security module** to SELinux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flipping the switch](img/0594OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you select **Default security module**, a new window will appear from
    which you can select **SELinux**. Exit the configuration menus by selecting **Exit**
    until you are asked to save your new configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flipping the switch](img/0594OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the new configuration and write these changes to the originating kernel
    configuration file. Otherwise, it will be overwritten on subsequent builds. To
    do this, we''ll need to discover which configuration file was used in the default
    build, which we built earlier before we made our own configuration with `make
    menuconfig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that `imx6_udoo_android_defconfig` was used as the default configuration.
    Copy your custom configuration and build again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A quick sanity check of the log file is always a good idea to verify SELinux
    was actually built into the kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with a built kernel supporting SELinux, insert the SD card into the host
    and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to umount any automounted partitions from the SD card as we did
    before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plug the SD card into the UDOO, and fire it up. You should see logs over the
    serial console as we did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flipping the switch](img/0594OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Eventually, the serial connection should take us to a root shell.
  prefs: []
  type: TYPE_NORMAL
- en: It's alive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How do we know that we have successfully enabled SELinux in the kernel? Earlier
    in this chapter, you ran the command, `adb shell cat /proc/filesystems`. We''re
    going to do the same thing and look for a new filesystem called `selinuxfs`. If
    that is present, it indicates we have enabled SELinux successfully. Run the following
    command in the serial terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that `selinuxfs` is present! Another common practice is to check
    `dmesg` for any SELinux output. To do this, execute the following command via
    the serial terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was a very exciting chapter. You learned how to enable SELinux in the kernel
    configuration, boot the "secured" system, and how to verify its presence. We also
    learned how to flash and build images for the UDOO in general and how to connect
    to it via serial and `adb` connections. In the next chapters, we will focus on
    how to make the UDOO usable with SE for Android capabilities.
  prefs: []
  type: TYPE_NORMAL
