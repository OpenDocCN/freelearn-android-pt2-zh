- en: Chapter 6. Grammars for Dialog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. 对话语法
- en: You will have noticed that the inputs in the form-filling dialogs studied in
    the previous chapter were restricted to single words and phrases. This chapter
    introduces the use of grammars to interpret more complex inputs and also to extract
    their meaning. Two types of grammars in common use for commercial applications
    are hand-crafted grammars for input that is predictable and well-defined, and
    statistical grammars for more robust performance with the less well-formed input
    typical of conversational speech.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在前一章中研究的表单填充对话中的输入被限制为单个单词和短语。本章介绍使用语法来解释更复杂的输入，并提取它们的意义。在商业应用中常用的两种语法是：对于可预测和定义良好的输入，使用手工制作语法；对于典型的对话语音中不太规则的输入，使用统计语法以获得更稳健的性能。
- en: By the end of this chapter, you should be able to develop apps that support
    more extended user input, making use of hand-crafted as well as statistical grammars.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你应该能够开发支持更广泛用户输入的应用程序，利用手工制作以及统计语法。
- en: Grammars for speech recognition and natural language understanding
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于语音识别和自然语言理解的语法
- en: 'Grammars can be used for two different purposes in speech-based apps that are
    as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 语法在基于语音的应用程序中可以用于两个不同的目的，如下所示：
- en: '**Speech recognition**: In this case, grammars (also known as language models)
    specify the words and phrases that the recognizer can expect. For example, if
    the system is dealing with cities, it should not try to recognize numbers. Speech
    recognition grammars, as defined by W3C available at [http://www.w3.org/TR/speech-grammar/](http://www.w3.org/TR/speech-grammar/),
    can either be specified explicitly by the developer (hand-crafted grammars) or
    can be computed from language data (statistical grammars). Speech recognition
    grammars help to make speech recognition more accurate.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音识别**：在这种情况下，语法（也称为语言模型）指定识别器可以预期的单词和短语。例如，如果系统处理的是城市，它就不应该尝试识别数字。根据W3C定义的语音识别语法，可参考[http://www.w3.org/TR/speech-grammar/](http://www.w3.org/TR/speech-grammar/)，可以由开发者明确指定（手工制作语法），也可以从语言数据计算得出（统计语法）。语音识别语法有助于提高语音识别的准确性。'
- en: '**Natural language understanding**: The idea is to take the output of the recognizer
    and assign a semantic interpretation (or meaning) to the words. This can be done
    in several ways. One method involves determining the structure of the sentence
    (syntactic analysis) and then assigning a semantic interpretation (or meaning)
    to this structure. Alternatively, the semantic interpretation may be extracted
    directly from the sentence without going through the syntactic analysis stage.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言理解**：这个想法是获取识别器的输出，并为单词分配语义解释（或意义）。这可以通过几种方式完成。一种方法是确定句子的结构（句法分析），然后为这个结构分配语义解释（或意义）。或者，也可以不经过句法分析阶段，直接从句子中提取语义解释。'
- en: Currently, the Google speech recognition API does not support the use of grammars
    specified by the developer for speech recognition and the only possible language
    models are `LANGUAGE_MODEL_FREE_FORM` and `LANGUAGE_MODEL_WEB_SEARCH`, which are
    built into the API. In the applications to be presented in this chapter, we will
    carry out speech recognition as in the previous chapters and then filter the recognition
    results and keep only those results that conform to the grammar and use them to
    obtain a semantic interpretation of the user's input.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，谷歌语音识别API不支持开发者指定的语法用于语音识别，唯一可用的语言模型是内置的`LANGUAGE_MODEL_FREE_FORM`和`LANGUAGE_MODEL_WEB_SEARCH`。在本章将要介绍的应用程序中，我们将像前几章一样进行语音识别，然后过滤识别结果，只保留符合语法的那些结果，并使用它们来获取用户输入的语义解释。
- en: Tip
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**You may also try…**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**你也可以尝试…**'
- en: Although it is currently not possible to use grammars within Android's `RecognizerIntent`,
    it is possible to use third-party options. Visit our web page for further details.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管目前在Android的`RecognizerIntent`中还不能使用语法，但可以使用第三方选项。访问我们的网页以获取更多详细信息。
- en: NLU with hand-crafted grammars
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用手工制作语法的NLU
- en: Designing a grammar involves predicting the different things the user might
    say and creating rules to cover them. Grammar design is an iterative process of
    creating an initial grammar, collecting data to test the grammar against actual
    user input, adding some phrases and removing others, and so on until the coverage
    of the grammar is as complete as possible. There are various tools to help with
    the design of grammars. For example, Nuance provides the Nuance Grammar Builder
    which can be used to test the coverage of a grammar, to check that the test phrases
    receive the correct semantic interpretation, and to test for over-generation that
    is, detect any unnecessary or unexpected phrases in the input ([http://evolution.voxeo.com/library/grammar/grammar-gsl.pdf](http://evolution.voxeo.com/library/grammar/grammar-gsl.pdf)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 设计语法需要预测用户可能说的不同内容，并创建规则来涵盖这些内容。语法设计是一个迭代过程，包括创建初始语法、收集数据以测试语法对实际用户输入的适应性、添加一些短语和删除其他短语，等等，直到语法的覆盖面尽可能完整。有许多工具可以帮助设计语法。例如，Nuance提供了Nuance语法构建器，可以用来测试语法的覆盖范围，检查测试短语是否得到正确的语义解释，以及测试过度生成，即检测输入中不必要的或意外的短语（[http://evolution.voxeo.com/library/grammar/grammar-gsl.pdf](http://evolution.voxeo.com/library/grammar/grammar-gsl.pdf)）。
- en: There are different languages for specifying speech grammars, the most popular
    are XML and **Augmented BNF** (**ABNF**), defined by W3C available at [http://www.w3.org/TR/speech-grammar/](http://www.w3.org/TR/speech-grammar/),
    **Java Script Grammar Format** (**JSGF**) which is used by the Java Speech API,
    and **Grammar Specification Language** (**GSL**), a format that is proprietary
    to Nuance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的语言用于指定语音语法，最流行的是由W3C定义的XML和**增强BNF**（**ABNF**），可在[http://www.w3.org/TR/speech-grammar/](http://www.w3.org/TR/speech-grammar/)获取，**Java
    Script语法格式**（**JSGF**），被Java语音API使用，以及**语法规范语言**（**GSL**），这是Nuance专有的格式。
- en: In this chapter, we will use the XML format and present a library that is able
    to parse simple XML grammars for their use in form-filling dialog like the ones
    studied in the previous chapter. Developing a full XML grammar processor is beyond
    the scope of this book, but additional information about the functionalities that
    it should have can be found in the W3C Speech Recognition Grammar Specification
    available at [http://www.w3.org/TR/speech-grammar/#S5](http://www.w3.org/TR/speech-grammar/#S5).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用XML格式，并介绍一个能够解析简单XML语法以用于类似于前一章研究的表单填充对话的库。开发完整的XML语法处理器超出了本书的范围，但关于它应该具有的功能的更多信息可以在W3C语音识别语法规范中找到，该规范可在[http://www.w3.org/TR/speech-grammar/#S5](http://www.w3.org/TR/speech-grammar/#S5)获取。
- en: 'The following is a simple grammar using some of the tags from the XML grammar
    format. This grammar can recognize the sentence *show flights to London*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的简单语法使用了一些来自XML语法格式的标签。这个语法可以识别句子*show flights to London*：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As can be seen, the grammar is structured in terms of rules. The `<grammar>`
    tag indicates the starting element (or root) of the grammar which is labeled as
    `flight_query`. The first rule after the `<grammar>` tag must have the same name
    as the root element. This rule consists of two items: the word `show` and the
    word `flights`, which cover the first two words of the string to be processed.
    The third part is a reference `<ruleref>` to another rule called `destination`.
    This rule contains the words `to London`. Thus by applying all the rules staring
    at the root, we can process the string *show flights to London*.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如所见，语法是按规则组织的。`<grammar>`标签指明了语法的起始元素（或根），标记为`flight_query`。`<grammar>`标签后的第一个规则必须与根元素同名。这个规则包含两项：单词`show`和单词`flights`，涵盖了要处理字符串的前两个词。第三部分是对另一个名为`destination`的规则的引用`<ruleref>`。这个规则包含了词组`to
    London`。因此，通过应用从根开始的规则，我们可以处理字符串*show flights to London*。
- en: 'The rule reference is useful when there might be several alternatives; in this
    case, several alternative destinations. The `<one-of>` tag allows the specification
    of alternative items. So, for example, we could expand the destination rule as
    follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 规则引用在存在多个选择时很有用；在这种情况下，有多个可选的目的地。`<one-of>`标签允许指定可选项目。因此，例如，我们可以如下扩展目的地规则：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Indeed, as the word *to* is common to all the phrases in this rule, we could
    create a further rule reference to city words, as shown in the following more
    extensive grammar. In this way, a complex hierarchy of rules can be created to
    specify a wide range of possible input.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，由于单词 *to* 在此规则的所有短语中都是通用的，我们可以创建一个进一步的城市词汇规则引用，如下面更广泛的语法所示。通过这种方式，可以创建复杂的规则层次结构，以指定广泛可能的输入。
- en: 'Sometimes, words or phrases may be optional or they may be repeated more than
    once. The `repeat` attribute allows the use of repetitions using the following
    specifications, in which `n` and `m` are natural numbers:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，单词或短语可能是可选的，或者可能重复多次。`repeat` 属性允许使用以下规格进行重复，其中 `n` 和 `m` 是自然数：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For example, for a five digit postal code, the item should be as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于一个五位数的邮政编码，项目应该如下所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`<item repeat="0-1">` indicates that a certain item is optional. In the following
    grammar, the `flight_query`, `flights`, and `time` rules specify optional elements.
    This means that a valid input requires only `origin`, `destination`, and `depart_day`
    and the other information is optional.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`<item repeat="0-1">` 指示某个项目是可选的。在以下语法中，`flight_query`、`flights` 和 `time` 规则指定了可选元素。这意味着有效的输入只需要
    `origin`、`destination` 和 `depart_day`，其他信息是可选的。'
- en: 'Given a combination of the various tags and attributes, we can create a grammar
    to allow inputs such as the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 给定各种标签和属性的组合，我们可以创建一个语法，允许如下输入：
- en: I would like a flight from Paris to New York on Monday morning
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想要周一早上从巴黎飞往纽约的航班
- en: Show me flights from London to Paris on Tuesday
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我看看周二从伦敦飞往巴黎的航班
- en: From New York to London on Monday afternoon
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周一下午从纽约飞往伦敦
- en: From Paris to London on Wednesday
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周三从巴黎飞往伦敦
- en: 'The following is a grammar that can be used to process these and a wide range
    of other alternative inputs:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用于处理这些及其他广泛替代输入的语法：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`<tag>` is used to return a value for an item that is different from the words
    recognized in the input. This is useful for dealing with synonyms where words
    with the same meaning should return a single value instead of the literal words
    recognized, or to return a value that is more useful in other components of the
    app. The following is a simple example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`<tag>` 用于返回与输入中识别的单词不同的项目的值。这对于处理同义词很有用，在这种情况下，具有相同意义的单词应该返回一个单一的值，而不是返回识别的文本字面值，或者返回在应用程序其他组件中更有用的值。以下是一个简单的例子：'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, if the word `Monday` is processed, the value `M` is returned.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果处理单词 `Monday`，则返回值 `M`。
- en: More generally, an app may not need a complete transcription of the input to
    be able to carry out further processing of what the user said, as it could be
    enough and even more efficient to use some intermediate (semantic) representation
    using the `<tag>` tag. Usually, semantic interpretation tags follow the W3C format
    presented in [www.w3.org/TR/semantic-interpretation/](http://www.w3.org/TR/semantic-interpretation/),
    which is parsed and processed as ECMAScript objects. This means that it is possible
    to include small excerpts of code within semantic tags.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，应用程序可能不需要对输入的完整转录就能进行进一步的处理，因为使用 `<tag>` 标签的某些中间（语义）表示可能就足够了，甚至可能更有效。通常，语义解释标签遵循
    W3C 在 [www.w3.org/TR/semantic-interpretation/](http://www.w3.org/TR/semantic-interpretation/)
    提出的格式，它被解析和处理为 ECMAScript 对象。这意味着可以在语义标签中包含小段代码。
- en: In this chapter, we will carry out a very simple treatment of semantics by specifying
    plain text tags. For example, in the previous grammar we have included tags that
    specify the code for the main airport of each city so that the semantic interpretation
    for `destination` is *CDG* (the code for Charles de Gaulle airport) when the sentence
    contains *to Paris*, and that for `departure_time` is *p.m* if the user says *in
    the afternoon*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过指定纯文本标签来进行非常简单的语义处理。例如，在上述语法中，我们包含了指定每个城市主要机场代码的标签，以便当句子包含 *to Paris*
    时，`destination` 的语义解释是 *CDG*（查尔斯·戴高乐机场的代码），而 `departure_time` 的语义解释是 *p.m* 如果用户说
    *in the afternoon*。
- en: Statistical NLU
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计自然语言理解
- en: Hand-crafted grammars are time consuming to develop and prone to errors. Considerable
    linguistic and engineering expertise is required to develop a grammar with good
    coverage and optimized performance. Moreover, the rules of a hand-crafted grammar
    cannot easily cope with the irregular input that is characteristic of spontaneous
    spoken language. For example, given the recognized words *I would like a um flight
    from Paris to New York on Monday no Tuesday afternoon*, our grammar would fail
    since *um* and *no* are not specified in the rules.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 手工制作的语法耗时长，容易出错。开发具有良好覆盖范围和优化性能的语法需要相当的语言学和工程专业知识。此外，手工制作语法的规则不能轻松应对自然口语中不规则输入的特点。例如，对于识别出的单词*I
    would like a um flight from Paris to New York on Monday no Tuesday afternoon*，由于*um*和*no*在规则中没有指定，我们的语法将失败。
- en: A statistical grammar is an alternative to a hand-crafted grammar. Statistical
    grammars are learned from data and involve collecting and annotating large amounts
    of relevant language data. Statistical grammars can cope with irregular input
    as they do not have to match the input exactly but rather assign probabilities
    indicating the extent to which a structure or a semantic interpretation matches
    the input. There are different types of statistical grammar. For the purposes
    of this chapter, we are interested in a grammar that returns a semantic interpretation
    as its result given either the input of a text string or the results from the
    speech recognition component.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 统计语法是手工制作语法的替代品。统计语法是从数据中学习得到的，涉及收集和注释大量相关的语言数据。统计语法能够处理不规则输入，因为它们不需要与输入完全匹配，而是分配概率，表明结构或语义解释与输入的匹配程度。统计语法有不同类型。出于本章的目的，我们感兴趣的是一种语法，它可以根据文本字符串的输入或语音识别组件的结果返回语义解释。
- en: One of the disadvantages of statistical grammars is that they require a large
    amount of training data. While corpora of language data have been collected for
    a wide variety of real-world applications, these are not publicly available and
    the costs of purchasing them would be prohibitive for individual developers. Even
    if the data were available, considerable effort would be required to annotate
    and train the grammar. Currently there are few APIs available for statistical
    semantic grammars but one possibility is a web service provided by **Maluuba**
    ([www.maluuba.com](http://www.maluuba.com)), a company that has developed a personal
    assistant of the same name for Android devices as well as an API for its statistical
    semantic grammars.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 统计语法的缺点之一是它们需要大量的训练数据。尽管已经为各种现实世界应用收集了语言数据语料库，但这些数据并不公开可用，而且对于个别开发者来说，购买它们的成本是难以承受的。即使数据可用，也需要付出相当大的努力来注释和训练语法。目前，针对统计语义语法的API很少，但一种可能性是由**Maluuba**公司提供的网络服务（[www.maluuba.com](http://www.maluuba.com)），该公司为Android设备开发了一个同名的个人助手以及用于其统计语义语法的API。
- en: 'The Maluuba API (known as `nAPI`) extracts three types of information from
    an input that are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Maluuba API（称为`nAPI`）从输入中提取三种类型的信息，如下所示：
- en: '**Category**: It signifies the main topic of the sentence, for example, weather,
    travel, entertainment, and navigation. Currently, there are 22 categories covered
    under it.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**：它表示句子的主题，例如天气、旅行、娱乐和导航。目前，它涵盖了22个类别。'
- en: '**Action**: It explains a specific action or intent to be accomplished within
    the category, for example, weather has actions such as `WEATHER_STATUS` for checking
    the weather and `WEATHER_DETAILS` for detailed weather information such as wind
    speed and humidity.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：它解释了在类别中要完成的特定动作或意图，例如，天气有诸如`WEATHER_STATUS`检查天气和`WEATHER_DETAILS`获取风速和湿度等详细天气信息的动作。'
- en: '**Entities**: It gives a key piece of information that has to be extracted,
    for example, location, dateRange, and time.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体**：它提供了必须提取的关键信息，例如位置、日期范围和时间。'
- en: 'The result is returned as a structured object. The following is an example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果以结构化对象的形式返回。以下是示例：
- en: '**User input**: what''s the weather in Belfast for tomorrow'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户输入**：明天贝尔法斯特的天气如何'
- en: '**Maluuba**: {"entities":{"dateRange":[{"start":"2013-05-09","end":"2013-05-10"}],"location":["belfast"]},"action":"WEATHER_STATUS","category":"WEATHER"}'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Maluuba**：`{"entities":{"dateRange":[{"start":"2013-05-09","end":"2013-05-10"}],"location":["belfast"]},"action":"WEATHER_STATUS","category":"WEATHER"}`'
- en: Note that in addition to identifying categories, actions, and entities, the
    grammar also resolves relative references such as *tomorrow* (this example was
    submitted on 8 May, 2013). Also, the input does not have to be fully grammatical
    as long as entities can be identified from the input. So, a sentence such as *Weather
    Belfast tomorrow* would return the same result.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了识别类别、动作和实体外，语法还解决相对引用，如 *tomorrow*（此示例于2013年5月8日提交）。此外，只要能从输入中识别实体，输入不必完全符合语法规则。因此，像
    *Weather Belfast tomorrow* 这样的句子将返回相同的结果。
- en: NLULib
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NLULib
- en: We have implemented a library for natural language understanding that contains
    classes and methods to process hand-crafted and statistical grammars. We have
    created the NLU class (`NLU.java`) to encapsulate both, but they could be processed
    in isolation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个自然语言理解库，其中包含处理手工艺和统计语法的类和方法。我们创建了NLU类 (`NLU.java`) 来封装这两者，但它们也可以单独处理。
- en: Processing XML grammars
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理XML语法
- en: '`HandCraftedGrammar.java` contains the methods for parsing an XML speech grammar,
    checking whether a phrase is valid in the grammar, and obtaining its semantic
    representation. We consider a subset of the tags in the XML format, concretely:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`HandCraftedGrammar.java` 包含了用于解析XML语音语法的方法，检查一个短语在语法中是否有效，以及获取其语义表示。我们考虑了XML格式中标签的一个子集，具体如下：'
- en: '| Tag | Description | Possible subtags | Possible attributes (attributes marked
    with * are mandatory) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 描述 | 可可能的子标签 | 可能的属性（带*的属性为必填项） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| <grammar> | Specifies the highest level container | <rule> | root* |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `<grammar>` | 指定最高级别的容器 | `<rule>` | root* |'
- en: '| <rule> | Specifies valid sequences and structures of words and phrases |
    <one-of><item><ruleref> | id* |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `<rule>` | 指定单词和短语的有效序列和结构 | `<one-of><item><ruleref>` | id* |'
- en: '| <one-of> | Specifies a set of alternatives | <one-of><item><ruleref> |  
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `<one-of>` | 指定一组替代项 | `<one-of><item><ruleref>` |  |'
- en: '| <item> | Specifies valid sequencesContains the literals and semantic tags
    | <tag><one-of><item><ruleref> | repeat |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `<item>` | 指定有效的序列，包含字面量和语义标签 | `<tag><one-of><item><ruleref>` | repeat |'
- en: '| <tag> | Specifies semantic information in the form of a literal |   |   |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `<tag>` | 以字面形式指定语义信息 |  |  |'
- en: '| <ruleref> | Specifies a reference to another rule |   | uri* |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `<ruleref>` | 指定对另一条规则的引用 |  | uri* |'
- en: The constructor parses the XML into java objects (see the `parse` method in
    the code bundle in `sandra.libs.nlu.nlulib.HandCraftedGrammar`) and translates
    the grammar into a regular java expression (see `computeRegularExpression` in
    `sandra.libs.nlu.nlulib.HandCraftedGrammar` in the code bundle).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数将XML解析为Java对象（请参阅代码包中 `sandra.libs.nlu.nlulib.HandCraftedGrammar` 的 `parse`
    方法），并将语法转换为正则Java表达式（请参阅代码包中 `sandra.libs.nlu.nlulib.HandCraftedGrammar` 的 `computeRegularExpression`）。
- en: The `parse` method uses `XmlPullParser` to read the XML code into objects, in
    a similar fashion to the VXML parser developed in the previous chapter, but using
    arrays to keep track of the nested items, as in this case we can have identical
    tags nested (for example, see the previously mentioned example of `flights` wherein
    several `<item>` tags are included within another `<item>` tag).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`parse` 方法使用 `XmlPullParser` 将XML代码读取到对象中，类似于前一章开发的VXML解析器，但使用数组来跟踪嵌套项，因为在这种情况下，我们可以有相同的标签嵌套（例如，请参阅前面提到的
    `flights` 示例，其中几个 `<item>` 标签包含在另一个 `<item>` 标签内）。'
- en: In this case, we have created the classes `Alternative`, `Item`, `Rule`, `Repeat`,
    and `RuleReference` to save the results of parsing `one-of`, `item without a repeat
    argument`, `rule`, `item with repeat argument`, and `rule-ref` tags respectively.
    The `GrammarElement` class has been defined as a superclass for the rest, so that
    when a certain class has a collection of any of the other elements, it can use
    the `GrammarElement` class as a wildcard. For example, the `Alternative` class
    contains a collection of `GrammarElement` that represents the different alternatives
    available.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，我们创建了类 `Alternative`、`Item`、`Rule`、`Repeat` 和 `RuleReference`，分别用于保存解析
    `one-of`、`不带重复参数的item`、`rule`、`带重复参数的item` 和 `rule-ref` 标签的结果。`GrammarElement`
    类被定义为一个超类，以便当某个类拥有其他元素的集合时，可以使用 `GrammarElement` 类作为通配符。例如，`Alternative` 类包含一个表示不同可用选择的
    `GrammarElement` 集合。
- en: 'The result of the parsing is a collection of `Rule` objects, which is saved
    as an attribute of the `HandCraftedGrammar` class. The rules are saved in a `HashMap`
    in which the keys are their IDs. For example, the structure resulting from parsing
    the flights rule in the example grammar is represented in the following figure.
    Note that in order to simplify the generation of regular expressions that facilitate
    semantic parsing, we do not process the grammar on the fly during recognition
    but instead parse it into Java objects before the recognition starts:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 解析的结果是一组 `Rule` 对象的集合，作为 `HandCraftedGrammar` 类的属性保存。规则保存在一个 `HashMap` 中，其键是它们的
    ID。例如，解析示例语法中的 flights 规则得到的结构在下图中表示。注意，为了简化生成便于语义解析的正则表达式，我们在识别过程中不是实时处理语法，而是在识别开始前将其解析为
    Java 对象：
- en: '![Processing XML grammars](img/5297_06_01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![处理 XML 语法](img/5297_06_01.jpg)'
- en: At this point, the `HandCraftedGrammar` constructor has parsed the XML grammar
    into Java objects with the `parse` method. Then, it uses the objects to compute
    a regular expression that represents the grammar using the `computeRegularExpression`
    method. Regular expressions are another way of representing the same information,
    but they have the advantage that we can directly match the sentences introduced
    by the user with the grammar using the `Pattern` and `Matcher` classes from the
    `java.util.regex` API (a tutorial of this API can be found at [http://docs.oracle.com/javase/tutorial/essential/regex/](http://docs.oracle.com/javase/tutorial/essential/regex/)).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，`HandCraftedGrammar` 构造函数通过 `parse` 方法将 XML 语法解析为 Java 对象。然后，它使用这些对象通过
    `computeRegularExpression` 方法计算代表语法的正则表达式。正则表达式是表示同样信息的另一种方式，但它们的优势在于我们可以直接使用
    `java.util.regex` API 中的 `Pattern` 和 `Matcher` 类将用户输入的句子与语法进行匹配（该 API 的教程可以在 [http://docs.oracle.com/javase/tutorial/essential/regex/](http://docs.oracle.com/javase/tutorial/essential/regex/)
    找到）。
- en: The use of Java objects as a middle step between the XML and the regular expression
    makes it easier to process the high amount of nested elements and rule references,
    and allows to generate the regular expression in a bottom-up procedure, starting
    from the simplest items to the most complex rules.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Java 对象作为 XML 与正则表达式之间的中间步骤，使得处理大量的嵌套元素和规则引用变得更加容易，并允许从最简单的项开始，以自底向上的过程生成正则表达式，直至最复杂的规则。
- en: The `computeRegularExpression` method (see the code bundle) obtains the regular
    expression corresponding to the root rule and all the rules to which it makes
    reference using the `getRegExpr()` method for each element. This method transforms
    the information contained in `GrammarElement` into the regular expression syntax.
    For example, the translation of the structure in the previous figure is `( (a
    flight) | (flights) ) {0, 1}`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`computeRegularExpression` 方法（见代码包）通过为每个元素调用 `getRegExpr()` 方法获取与根规则及其所有引用规则相对应的正则表达式。这个方法将
    `GrammarElement` 中包含的信息转换为正则表达式语法。例如，前一个图结构的转换结果是 `( (a flight) | (flights) )
    {0, 1}`。'
- en: The case of `RuleReference` objects is special because they are translated using
    the wildcard "`xxREFurixx`", where `uri` is the name of the rule being referred
    to. For example, the `depart_day` rule is translated as `xxREFtimexx`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`RuleReference` 对象的情况比较特殊，因为它们是使用通配符 "`xxREFurixx`" 进行转换的，其中 `uri` 是被引用的规则名称。例如，`depart_day`
    规则被转换为 `xxREFtimexx`。'
- en: 'The `solveReferences` method in the `HandCraftedGrammar` class is used to resolve
    all the references. To do so, the regular expression for the whole grammar is
    obtained by gradually resolving the references starting from the root. The result
    for the complete grammar is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`HandCraftedGrammar` 类中的 `solveReferences` 方法用于解决所有引用。为此，从根开始逐步解析引用，获取整个语法的正则表达式。完整语法的解析结果如下：'
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method also keeps track of the semantic tags. Initially, they are assigned
    to their corresponding items, for example, the semantic representation `JFK` is
    assigned to its item. However, they must be assigned to their corresponding rule
    in order to be interpretable (that is, to `city` and then to `destination`). In
    order to do so, we use the `SemanticParsing` class that allows linking tags to
    rules.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法还跟踪语义标签。最初，它们被分配到对应的项，例如，语义表示 `JFK` 被分配到其对应的项目。然而，为了能够解释（即分配给 `city` 然后是
    `destination`），它们必须分配给对应的规则。为此，我们使用了 `SemanticParsing` 类，它允许将标签与规则关联。
- en: As the regular expression will be the only mechanism used to check the validity
    of the incoming phrases and loses the structure of the rules, the `SemanticParsing`
    class has a position attribute that allows us to determine the group of the regular
    expression that should match the text that triggers a tag.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于正则表达式将是用于检查传入短语有效性的唯一机制，并且会失去规则的结构，`SemanticParsing`类具有一个位置属性，该属性允许我们确定应该与触发标签的文本匹配的正则表达式的组。
- en: Java regular expressions enable the different subclasses of `GrammarElement`
    to obtain partial matching results of elements grouped by parentheses, for example,
    in the previous regular expression the whole matched sentence is in position 0,
    `(((Show me)|(I would like)|(Are there any)){0,1})` is in position 1, `((Show
    me)|(I would like)|(Are there any))` is in position 2, `(Show me)` is in position
    3, `(Are there any)` is in position 5, and `(on ((Monday)|(Tuesday)|(Wednesday)))`
    is in position 20.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Java正则表达式使得`GrammarElement`的不同子类能够获取由括号分组元素的局部匹配结果，例如，在之前的正则表达式中，整个匹配的句子位于位置0，`(((Show
    me)|(I would like)|(Are there any)){0,1})`位于位置1，`((Show me)|(I would like)|(Are
    there any))`位于位置2，`(Show me)`位于位置3，`(Are there any)`位于位置5，而`(on ((Monday)|(Tuesday)|(Wednesday)))`位于位置20。
- en: What we do with the `SemanticParsing` objects is to match the semantic tags
    with each of these groups. This way, the `SemanticParsing` object for the `depart_time`
    rule indicates that the matching group is in position 20, and that the semantic
    is `M` if the expression is `on Monday`, similarly `T` for `on Tuesday`, and `W`
    for `on Wednesday`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`SemanticParsing`对象来匹配每个这些组中的语义标签。这样，`depart_time`规则的`SemanticParsing`对象表示匹配组位于第20位，如果表达式是`on
    Monday`，则语义为`M`；同理，`T`代表`on Tuesday`，`W`代表`on Wednesday`。
- en: 'Thus, the semantic representation for the sentence *Show me flights from Paris
    to New York on Tuesday morning* is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于句子*Show me flights from Paris to New York on Tuesday morning*的语义表示如下：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `obtainSemantics` method (see `HandCraftedGrammar.java` in the code bundle)
    is used to check whether an input matches the grammar, and if it does, what its
    semantic representation is. This method raises an exception if the grammar is
    not initialized, that is, if the regular expression of the grammar has not been
    computed yet (for example, if there was any problem in the constructor with the
    format of the grammar).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`obtainSemantics`方法（参见代码包中的`HandCraftedGrammar.java`）用于检查输入是否与语法匹配，如果匹配，它的语义表示是什么。如果语法尚未初始化，即尚未计算语法的正则表达式（例如，在构造函数中语法的格式存在问题），此方法将引发异常。'
- en: 'To validate an incoming phrase, we use a Java matcher that automatically checks
    whether the phrase is compatible with the regular expression. To do so, we ignore
    whitespaces and use lowercases, as observed in the following piece of code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证传入的短语，我们使用Java匹配器自动检查该短语是否与正则表达式兼容。为此，我们忽略空白并使用小写，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, we use the `groupCount` and `group` attribute of the `Matcher` Java class
    in order to get the phrases that match each of the groups in the regular expression,
    where a group is each of the patterns between parentheses. This information is
    then compared with the semantic information and the expected positions saved in
    the `SemanticParsing` objects, and the semantic representation is saved in a string
    that is the output of the `obtainSemantics` method.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用Java类`Matcher`的`groupCount`和`group`属性来获取与正则表达式中每个组匹配的短语，其中每个组是括号之间的模式。此信息随后与`SemanticParsing`对象中保存的语义信息和预期位置进行比较，并将语义表示保存在`obtainSemantics`方法的输出字符串中。
- en: Processing statistical grammars
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理统计语法
- en: 'To use Maluuba, you need to sign up for a developer''s account. Go to Maluuba''s
    developer''s website ([http://dev.maluuba.com/](http://dev.maluuba.com/)), and
    click on the tab **Sign up now and receive API access immediately**. Sign up is
    associated with a Google, Facebook, or GitHub account. Complete the form and then
    you will be directed to a page where you can create an app. Click on **Create
    an app** and you will be asked for an **App name** and **App description**. For
    current purposes, enter something simple, for example, `flights` for **App name**
    and some text for the description, and you will be given an API key. You can now
    use this key to send natural language queries to Maluuba, either through your
    browser or from an Android app. Test the access to the API through your browser
    as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Maluuba，您需要注册一个开发者账户。访问Maluuba的开发者网站（[http://dev.maluuba.com/](http://dev.maluuba.com/)），点击**立即注册并获得API访问权限**的标签。注册与Google、Facebook或GitHub账户关联。填写表格后，您将被引导至一个可以创建应用程序的页面。点击**创建应用程序**，系统会要求您输入**应用程序名称**和**应用程序描述**。出于当前目的，可以输入一些简单的内容，例如，将**应用程序名称**设为`flights`，并输入一些文本作为描述，然后您将获得一个API密钥。现在您可以使用这个密钥向Maluuba发送自然语言查询，可以通过浏览器或Android应用程序发送。按照以下步骤通过浏览器测试API的访问：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`NLU.java` sends a string to Maluuba to obtain a semantic interpretation. You
    can change the `KEY` attribute to use your developer key. To access the grammar,
    it uses `XMLLib` described in the previous chapter, so that the URL is accessed
    safely by means of an asynchronous task.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`NLU.java`向Maluuba发送一个字符串以获得语义解释。您可以更改`KEY`属性以使用您的开发者密钥。为了访问语法，它使用了前一章描述的`XMLLib`，因此可以通过异步任务安全地访问URL。'
- en: 'The result is passed to the invoking method as a string. For example, for the
    phrase *I would like to go to London*, it returns the following values:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 结果作为字符串传递给调用方法。例如，对于短语*I would like to go to London*，它会返回以下值：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The GrammarTest app
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GrammarTest 应用程序
- en: The `GrammarTest` app (`sandra.examples.nlu.grammartest`) illustrates how to
    use `NLULib`. It has a simple GUI in which the user selects the type of grammar
    to be used (hand-crafted or statistical), and can also select the **Check text**
    or **Check ASR** button to obtain a semantic representation of the input.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`GrammarTest`应用程序（`sandra.examples.nlu.grammartest`）展示了如何使用`NLULib`。它有一个简单的图形用户界面，用户可以选择要使用的语法类型（手工制作或统计），还可以选择**检查文本**或**检查语音识别**按钮，以获得输入内容的语义表示。'
- en: In the case of **Check text**, the input is typed into a `TextView` box using
    the keyboard. In the case of **Check ASR**, the app recognizes an oral input and
    produces the result for a 10-best list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在**检查文本**的情况下，输入是通过键盘在`TextView`框中输入的。在**检查语音识别**的情况下，应用程序识别口语输入并为10个最佳列表生成结果。
- en: In the case of handcrafted grammar, an XML grammar is read from the specified
    location. The default grammar used is the one presented previously. If the input
    (either the input text or each of the N-best results) is in the grammar, it shows
    a valid message and the semantic representation, if not, it shows an invalid message
    (these messages are not hard-coded, but retrieved from the `Strings` file).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在手工制作语法的情况下，将从指定位置读取XML语法。默认使用的语法是之前展示的那个。如果输入（输入文本或N个最佳结果中的每一个）在语法中，它会显示有效消息和语义表示；如果不是，它会显示无效消息（这些消息不是硬编码的，而是从`Strings`文件中获取的）。
- en: In the case of statistical grammar, the Maluuba service is used. In this case,
    we do not pose any restrictions on the inputs, so all phrases are considered valid,
    and a semantic interpretation is shown for each of them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在统计语法的情况下，使用Maluuba服务。在这种情况下，我们不限制输入，因此所有短语都被视为有效，并为它们中的每一个显示语义解释。
- en: 'This app is useful for developers who wish to become familiar with the grammar
    design process. The following figure shows two screenshots of the app using a
    handcrafted (left) and a statistical (right) grammar:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序对于希望熟悉语法设计过程的开发者非常有用。下图展示了使用手工制作（左）和统计（右）语法的应用程序的两个屏幕截图：
- en: '![The GrammarTest app](img/5297_06_02.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![GrammarTest 应用程序](img/5297_06_02.jpg)'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'This chapter has shown how to create and use grammars to check whether the
    user''s input conforms to the words and phrases required by the app. Grammars
    are also used to extract a semantic representation from the user''s input in terms
    of concepts relevant for the app. Two types of grammar were presented: a hand-crafted
    grammar designed by the developer to match the requirements of the app, and a
    statistical grammar learned from a large corpus of relevant data. Hand-crafted
    grammars are useful for input that is predictable and well-defined, whereas statistical
    grammars provide more robust performance and can handle a wider range of input
    that may be less well-formed.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何创建并使用语法来检查用户的输入是否符合应用程序所需的词汇和短语。语法还用于从用户输入中提取对应用程序相关的概念的语义表示。介绍了两种类型的语法：一种是开发者手工设计的语法，以匹配应用程序的需求；另一种是从大量相关数据中学习得到的统计语法。手工设计的语法适用于可预测和定义良好的输入，而统计语法能提供更健壮的性能，并能处理可能不太规范的一广泛输入范围。
- en: In the chapters so far, the examples have assumed that the language used is
    English and that the interface is speech-only. [Chapter 7](ch07.html "Chapter 7. Multilingual
    and Multimodal Dialogs"), *Multilingual and Multimodal Dialogs*, will look at
    how to build apps that make use of languages other than English and other modalities
    in addition to speech.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止的章节中，示例都假设使用的语言是英语，界面仅为语音。在[第7章](ch07.html "第7章. 多语言和多模态对话")，*多语言和多模态对话*中，我们将探讨如何构建除了英语之外使用其他语言，并且在语音之外使用其他模态的应用程序。
