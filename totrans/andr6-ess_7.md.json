["```kt\ncompile 'com.android.support:customtabs:23.1.0'\n```", "```kt\nCustomTabsIntent.EXTRA_SESSION\n```", "```kt\nCustomTabsIntent.Builder intentBuilder = new CustomTabsIntent.Builder(); //init our Builder\n\n//Setting Toolbar Color\nint color = getResources().getColor(R.color.primary);\n\n//we use primary color for our toolbar as well - you can define any color you want and use it.\nintentBuilder.setToolbarColor(color);\n\n//Enabling Title showing\nintentBuilder.setShowTitle(true);\n\n//this will show the title in the custom tab along the url showing at the bottom part of the tab toolbar.\n\n//This part is adding custom actions to the over flow menu\nString menuItemTitle = getString(R.string.menu_title_share);\nPendingIntent menuItemPendingIntent = createPendingShareIntent();\nintentBuilder.addMenuItem(menuItemTitle, menuItemPendingIntent);\nString menuItemEmailTitle = getString(R.string.menu_title_email);\nPendingIntent menuItemPendingIntentTwo = createPendingEmailIntent();\nintentBuilder.addMenuItem(menuItemEmailTitle, menuItemPendingIntentTwo);\n\n//Setting custom Close Icon.\nintentBuilder.setCloseButtonIcon(mCloseButtonBitmap);\n\n//Adding custom icon with custom action for the share action.\nintentBuilder.setActionButton(mActionButtonBitmap, getString(R.string.menu_title_share), createPendingShareIntent());\n\n//Setting start and exit animation for the custom tab.\nintentBuilder.setStartAnimations(this, R.anim.slide_in_right, R.anim.slide_out_left);\nintentBuilder.setExitAnimations(this, android.R.anim.slide_in_left, android.R.anim.slide_out_right);\nCustomTabActivityHelper.openCustomTab(this, intentBuilder.build(), Uri.parse(URL), new WebviewFallback(), useCustom);\n```", "```kt\n//Adding custom icon with custom action for the share action\nintentBuilder.setActionButton(mActionButtonBitmap, getString(R.string.menu_title_share), createPendingShareIntent());\n```", "```kt\n//This part is adding custom buttons to the over flow menu\nString menuItemTitle = getString(R.string.menu_title_share);\nPendingIntent menuItemPendingIntent = createPendingShareIntent();\nintentBuilder.addMenuItem(menuItemTitle, menuItemPendingIntent);\nString menuItemEmailTitle = getString(R.string.menu_title_email);\nPendingIntent menuItemPendingIntentTwo = createPendingEmailIntent();\nintentBuilder.addMenuItem(menuItemEmailTitle, menuItemPendingIntentTwo);\n```", "```kt\n//Setting start and exit animation for the custom tab.\nintentBuilder.setStartAnimations(this,R.anim.slide_in_right, R.anim.slide_out_left);\nintentBuilder.setExitAnimations(this, android.R.anim.slide_in_left, android.R.anim.slide_out_right);\n```", "```kt\nCustomTabsClient.bindCustomTabsService()\n```", "```kt\npkgName - This is one of several options checking to see if we have a version of Chrome installed can be one of the following\nstatic final String STABLE_PACKAGE = \"com.android.chrome\";\nstatic final String BETA_PACKAGE = \"com.chrome.beta\";\nstatic final String DEV_PACKAGE = \"com.chrome.dev\";\nstatic final String LOCAL_PACKAGE = \"com.google.android.apps.chrome\";\n\nprivate CustomTabsClient mClient;\n\n// Binds to the service.\nCustomTabsClient.bindCustomTabsService(myContext, pkgName, new CustomTabsServiceConnection() {\n  @Override\n  public void onCustomTabsServiceConnected(ComponentName name, CustomTabsClient client) {\n    // CustomTabsClient should now be valid to use\n    mClient = client;\n  }\n\n  @Override\n  public void onServiceDisconnected(ComponentName name) {\n  // CustomTabsClient is no longer valid which also invalidates sessions.\n    mClient = null;\n  }\n});\n```", "```kt\nboolean CustomTabsClient.warmup(long flags)\n\n//With our valid client earlier we call the warmup method.\nmClient.warmup(0);\n```", "```kt\nboolean CustomTabsClient.newSession(ICustomTabsCallback callback)\n```", "```kt\nboolean CustomTabsSession.mayLaunchUrl (Uri url, Bundle extras, List<Bundle> otherLikelyBundles)\n```", "```kt\nvoid CustomTabsCallback.onNavigationEvent (int navigationEvent, Bundle extras)\n```", "```kt\n//Sent when the tab has started loading a page.\npublic static final int NAVIGATION_STARTED = 1;\n//Sent when the tab has finished loading a page.\npublic static final int NAVIGATION_FINISHED = 2;\n//Sent when the tab couldn't finish loading due to a failure.\npublic static final int NAVIGATION_FAILED = 3;\n//Sent when loading was aborted by a user action.\npublic static final int NAVIGATION_ABORTED = 4;\n//Sent when the tab becomes visible.\npublic static final int TAB_SHOWN = 5;\n//Sent when the tab becomes hidden.\npublic static final int TAB_HIDDEN = 6;\nprivate static class NavigationCallback extends CustomTabsCallback {\n  @Override\n  public void onNavigationEvent(int navigationEvent, Bundle extras) {\n    Log.i(TAG, \"onNavigationEvent: Code = \" + navigationEvent);\n  }\n}\n```"]