- en: Chapter 10. Location Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 位置服务
- en: In this chapter, we will learn how to add a map view to our application using
    Google's Map Fragment. We will add markers onto the map, which will be used to
    point out locations of interest.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Google的地图片段向我们的应用程序添加地图视图。我们将在地图上添加标记，用于指出感兴趣的位置。
- en: In order to do this, we will also discuss how to create a project in Google
    Developer Console and set up our application to use the Google Play Services SDK,
    which is required in order to use Google services in any Android application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们还将讨论如何在Google开发者控制台创建项目，并设置我们的应用程序以使用Google Play Services SDK，这是在任何Android应用程序中使用Google服务的必要条件。
- en: Every job offer has a location field in Parse; based on this, we will display
    markers on the map.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Parse中的每个工作机会都有一个位置字段；基于此，我们将在地图上显示标记。
- en: Configuring the project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置项目
- en: Getting the Google Maps API key
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取Google Maps API密钥
- en: Configuring `AndroidManifest.xml`
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`AndroidManifest.xml`
- en: Adding the map
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加地图
- en: Creating the fragment for ViewPager
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为ViewPager创建片段
- en: Implementing Map Fragment
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现地图片段
- en: Adding a marker
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加标记
- en: Retrieving data from Parse
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Parse检索数据
- en: Displaying a marker for each location
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个位置显示一个标记
- en: Adding a title
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加标题
- en: Configuring the project
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置项目
- en: In order for us to use the Google Play Service APIs, we need to set up our project
    with the Google Play Services SDK. If you have not already installed this, go
    to Android SDK Manager and get the Google Play Service SDK.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们能够使用Google Play Service API，我们需要使用Google Play Services SDK配置我们的项目。如果你还没有安装，请进入Android
    SDK管理器并获取Google Play Service SDK。
- en: 'Now that our app uses Google Play services, to test the app, you must ensure
    that you run the app on either of the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的应用使用了Google Play服务，为了测试应用，你必须确保在以下设备之一上运行应用：
- en: An Android device with Android 2.3 or higher that has Google Play Store (Recommended).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带有Google Play商店的Android 2.3或更高版本的Android设备（推荐）。
- en: An emulator that has Google Play Services set up. If you use Genymotion, **Google
    Play services** will not be installed by default:![Configuring the project](img/4887_10_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已设置Google Play服务的模拟器。如果你使用Genymotion，**Google Play服务**默认不会安装：![配置项目](img/4887_10_01.jpg)
- en: We need to make Google Play services APIs available to our app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要让Google Play服务API对应用可用。
- en: 'Open the app''s `build.gradle` file and add the `play-services` library under
    dependencies. The line to add the `build.gradle` file should be similar to this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 打开应用的`build.gradle`文件，并在依赖项下添加`play-services`库。添加到`build.gradle`文件的行应该类似于这样：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ensure that you change this to the latest version of `play-services` and update
    it when a new version is released.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你将其更改为最新版本的`play-services`，并在发布新版本时更新。
- en: Save the file and click on **Sync Project with Gradle Files**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并点击**与Gradle文件同步项目**。
- en: Getting the API key
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取API密钥
- en: For us to use the Google Maps API, we need to register our project with Google
    Developer Console and receive an API key, which we will then add to our app.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Google Maps API，我们需要在Google开发者控制台注册我们的项目，并获得一个API密钥，然后将其添加到我们的应用中。
- en: Firstly, we will need to get the SHA-1 fingerprint of our unique application.
    We can receive this from either the **debug certificate** or the **release certificate**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取我们唯一应用程序的SHA-1指纹。我们可以从**调试证书**或**发布证书**中获得。
- en: The **debug** **certificate** is created automatically when a debug build is
    done. This certificate must only be used for apps that are currently being tested.
    Do not publish an application using the debug certificate.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试** **证书**在完成调试构建时会自动创建。此证书仅应用于目前正在测试的应用。不要使用调试证书发布应用程序。'
- en: The **release** **certificate** is made when a release build is done. The certificate
    can also be created using the **keytool** program. This certificate must be used
    when the app is ready to be released to Play Store.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布** **证书**是在完成发布构建时生成的。也可以使用**keytool**程序创建证书。当应用准备发布到Play商店时，必须使用此证书。'
- en: Displaying the debug certificate fingerprint
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示调试证书指纹
- en: 'Find your debug keystore file with the name `debug.keystore`. This file is
    usually in the same directory as the Android Virtual Device files:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到名为`debug.keystore`的调试密钥库文件。这个文件通常位于Android虚拟设备文件所在的目录中：
- en: '**OS X and Linux**: `~/.android/`'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OS X和Linux**：`~/.android/`'
- en: '**Windows Vista and Windows 7**: `C:\Users\your_user_name\.android\`'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Vista和Windows 7**：`C:\Users\your_user_name\.android\`'
- en: 'To show the SHA-1 fingerprint, open a terminal or command prompt window and
    enter the following:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要显示SHA-1指纹，请打开终端或命令提示符窗口，并输入以下内容：
- en: '**OS X and Linux**: We use the `keytool -list -v -keystore ~/.android/debug.keystore
    -alias androiddebugkey -storepass android -keypass android` command.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OS X和Linux**：我们使用命令 `keytool -list -v -keystore ~/.android/debug.keystore
    -alias androiddebugkey -storepass android -keypass android`。'
- en: '**Windows Vista and Windows 7**: We use the `keytool -list -v -keystore "%USERPROFILE%\.android\debug.keystore"
    -alias androiddebugkey -storepass android -keypass android` command.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Vista和Windows 7**：我们使用命令 `keytool -list -v -keystore "%USERPROFILE%\.android\debug.keystore"
    -alias androiddebugkey -storepass android -keypass android`。'
- en: 'After you enter the command, and press the *Enter* key, you will see an output
    similar to this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输入命令并按下*回车*键后，您将看到类似这样的输出：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a Google Developer Console project
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Google开发者控制台项目
- en: 'Go to [https://console.developers.google.com/project](https://console.developers.google.com/project)
    and create an account if you haven''t already done so. First, create a new project
    with your desired name. Once the project has been created, perform the following
    steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://console.developers.google.com/project](https://console.developers.google.com/project)，如果您还没有账户，请创建一个账户。首先，使用您想要的名字创建一个新项目。项目创建后，执行以下步骤：
- en: In the left sidebar, click on **APIs & auth** and then select the **APIs** option:![Creating
    a Google Developer Console project](img/4887_10_02.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏中，点击**APIs & auth**，然后选择**APIs**选项：![创建Google开发者控制台项目](img/4887_10_02.jpg)
- en: Select the **Google Maps Android API** and enable it.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Google Maps Android API**并启用它。
- en: Open **Credentials**, and click on **[Create new key]**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**凭据**，然后点击**[创建新密钥]**。
- en: 'Select **Android key** and enter your **SHA-1** fingerprint followed by your
    project''s package name separated by a semicolon, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Android密钥**，输入您的**SHA-1**指纹，然后是您的项目包名称，两者之间用分号分隔，如下所示：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once you complete this, you will be able to view the credentials as in the following
    screenshot:![Creating a Google Developer Console project](img/4887_10_03.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，您将能够像以下截图一样查看凭据：![创建Google开发者控制台项目](img/4887_10_03.jpg)
- en: Configuring AndroidManifest.xml
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置AndroidManifest.xml
- en: Now that we have the API key for our Android application, we need to add it
    to our `AndroidManifest.xml` file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经获得了Android应用的API密钥，我们需要将其添加到`AndroidManifest.xml`文件中。
- en: 'Open your `AndroidManifest.xml` file and add the following code in the `<application>`
    element as a child:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的`AndroidManifest.xml`文件，并在`<application>`元素下添加以下代码作为子元素：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Replace `API_KEY` in the `value` attribute with the API key given on Google
    Developer Console.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将`value`属性中的`API_KEY`替换为Google开发者控制台给出的API密钥。
- en: 'We also need to add a few other settings to our `AndroidManifest`. Set the
    Google Play services version as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`AndroidManifest`中添加其他几个设置。如下设置Google Play服务的版本：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set required permissions as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如下设置必要的权限：
- en: '`INTERNET`: This permission is used to download map data from the Google Maps
    server.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INTERNET`：此权限用于从Google Maps服务器下载地图数据。'
- en: '`ACCESS_NETWORK_STATE`: This will allow the API to check the status of the
    connection to determine whether or not it will be able to download the data.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACCESS_NETWORK_STATE`：这将允许API检查连接状态，以确定是否能够下载数据。'
- en: '`WRITE_EXTERNAL_STORAGE`: This will allow the API to cache the map data.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WRITE_EXTERNAL_STORAGE`：这将允许API缓存地图数据。'
- en: '`ACCESS_COARSE_LOCATION`: This lets the API retrieve the device''s location
    using Wi-Fi or mobile data.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACCESS_COARSE_LOCATION`：这允许API使用Wi-Fi或移动数据获取设备的位置。'
- en: '`ACCESS_FINE_LOCATION`: This will give a more precise location than the `ACCESS_COARSE_LOCATION`,
    and it will also use GPS as well as Wi-Fi or mobile data. Take a look at the following
    code:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACCESS_FINE_LOCATION`：这将比`ACCESS_COARSE_LOCATION`提供更精确的位置，并且还将使用GPS以及Wi-Fi或移动数据。看看以下代码：'
- en: '[PRE5]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You also need to set up your OpenGL ES. The Maps API uses OpenGL ES to render
    the map, so it needs to be installed in order for the map to be displayed. To
    notify other services of the requirement and prevent devices that don''t support
    OpenGL from showing your app on Google Play Store, add the following as a child
    of `<manifest>` in your `AndroidManifest.xml` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要设置OpenGL ES。地图API使用OpenGL ES来渲染地图，因此需要安装它才能显示地图。为了通知其他服务这一需求，并防止不支持OpenGL的设备在Google
    Play商店显示您的应用，请在您的`AndroidManifest.xml`文件中的`<manifest>`标签下添加以下内容：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your current `AndroidManifest.xml` file should be similar to the following
    code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您当前的`AndroidManifest.xml`文件应类似于以下代码：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding the map
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加地图
- en: Now that our application is configured for us to use map services, we can begin
    discussing how to add a visual map to our application. For the map, we will create
    another Fragment, which will be loaded on the second page of `ViewPager`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的应用程序已经配置好了可以使用地图服务，那么我们可以开始讨论如何在应用程序中添加一个可视化的地图。对于地图，我们将创建另一个Fragment，它将被加载到`ViewPager`的第二个页面。
- en: There are two methods to display Google Map; either a `MapFragment` or a `MapView`
    object can represent it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以显示谷歌地图；一个`MapFragment`或`MapView`对象可以表示它。
- en: Adding the fragment
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Fragment
- en: 'Create a new Java class within our `fragments` directory with the name `MyMapFragment`.
    The class should extend the `Fragment` type. Then, override the `OnCreateView`
    method and let it return the inflated view of `fragment_my_map`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`fragments`目录中创建一个名为`MyMapFragment`的新Java类。这个类应该继承`Fragment`类型。然后，重写`OnCreateView`方法，并让它返回`fragment_my_map`的填充视图：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, create the layout file for the fragment, and name it `fragment_my_map`.
    Set the root element of the layout to `FrameLayout`. We will temporarily add `TextView`
    to our layout just to verify that it works. The code for the `fragment_my_map.xml`
    file should be similar to this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为Fragment创建布局文件，并将其命名为`fragment_my_map`。将布局的根元素设置为`FrameLayout`。我们将在布局中暂时添加`TextView`以验证其是否有效。`fragment_my_map.xml`文件的代码应类似于以下这样：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The last step to add our fragment to the app will be editing the `MyPagerAdapter.java`
    file to display it as the second page. To do this, change the second case in the
    `getItem` method to return an instance of `MyMapFragment` as well as the page
    title in the second case of the `getPageTitle` method to return `MAP`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的Fragment添加到应用程序的最后一步将是编辑`MyPagerAdapter.java`文件，将其作为第二个页面显示。为此，将`getItem`方法中的第二个case更改为返回`MyMapFragment`的实例，并将`getPageTitle`方法中第二个case的页面标题更改为返回`MAP`：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, when you run the app, the second page of the `ViewPager` should be replaced
    with our new fragment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行应用程序时，`ViewPager`的第二个页面应该被我们新的Fragment替换。
- en: '![Adding the fragment](img/4887_10_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![添加Fragment](img/4887_10_04.jpg)'
- en: Implementing MapFragment
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现MapFragment
- en: 'We will now use `MapFragment` to display a map on our app. We can do this by
    adding a `<fragment>` layout with `android:name` of `com.google.android.gms.maps.MapFragment`.
    Doing this will automatically add `MapFragment` to `activity`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用`MapFragment`在我们的应用程序上显示地图。我们可以通过添加一个带有`android:name`为`com.google.android.gms.maps.MapFragment`的`<fragment>`布局来实现这一点。这样做将自动将`MapFragment`添加到`activity`中：
- en: 'The following is the code for `fragment_my_map.xml`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`fragment_my_map.xml`的代码：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, to be able to handle `MapFragment` that we added to our layout, we need
    to use `FragmentManager`, which we get from `getChildFragmentManager` to `findFragmentById`.
    This will be done in the `OnCreateView` method:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了能够处理我们添加到布局中的`MapFragment`，我们需要使用`FragmentManager`，我们从`getChildFragmentManager`获取它，通过`findFragmentById`来找到。这将在`OnCreateView`方法中完成：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will allocate our fragment to `SupportMapFragment` instead of just `MapFragment`
    so that the application can support Android API levels lower than **12**. Use
    the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的Fragment分配给`SupportMapFragment`，而不是仅仅`MapFragment`，这样应用程序就可以支持低于**12**的Android
    API级别。使用以下代码：
- en: 'The following is the code for `MyMapFragment.java`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`MyMapFragment.java`的代码：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, when we run the app, the map will be displayed on the screen.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行应用程序时，地图将在屏幕上显示。
- en: '![Implementing MapFragment](img/4887_10_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![实现MapFragment](img/4887_10_05.jpg)'
- en: Adding a marker
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标记
- en: The Google map is now visible, but it does not show any useful data for the
    user yet. To achieve this, we will add **map markers** to indicate points of interest
    for the user. These will be the locations of different job offers, which we will
    download from our Parse database.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在谷歌地图已经可见，但它还没有为用户显示任何有用的数据。为了实现这一点，我们将添加**地图标记**来指示用户感兴趣的点。这些将是不同职位提供的位置，我们将从Parse数据库下载这些位置。
- en: We will also learn how to change the icon used to mark a point on the map to
    a custom image as well as have a title on the marker. This will make our app look
    more interesting and informative.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习如何将用于在地图上标记点的图标更改为自定义图像，并在标记上加上标题。这将使我们的应用程序看起来更有趣、更具有信息性。
- en: Retrieving data from Parse
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Parse检索数据
- en: Before we can display all our markers, we need to download all the necessary
    data from Parse.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够显示所有标记之前，我们需要从Parse下载所有必要的数据。
- en: 'In `MyMapFragment.java`, we will use `ParseQuery` to retrieve a list of the
    locations and use this to get the relevant information for each job offer before
    it is displayed. Perform the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MyMapFragment.java` 中，我们将使用 `ParseQuery` 获取位置列表，并使用它来获取每个职位在显示之前的相关信息。执行以下步骤：
- en: Create a private member variable named `googleMap` of the `GoogleMap` type and
    override the `onResume()` method.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为 `googleMap` 的私有成员变量，其类型为 `GoogleMap`，并重写 `onResume()` 方法。
- en: 'In `onResume()`, check whether or not `googleMap` is empty; if it is, this
    means that we have not yet added markers to the current instance of the map. If
    `googleMap` is empty, allocate the map from `MapFragment`, which we have already
    created. This is done using `getMap()`:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `onResume()` 中，检查 `googleMap` 是否为空；如果是，这意味着我们还没有向当前地图实例添加标记。如果 `googleMap`
    为空，从我们已经创建的 `MapFragment` 分配地图。这是使用 `getMap()` 实现的：
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `ParseQuery`, which will retrieve all the data for the `JobOffer`
    table of our Parse database. Use the `findInBackground()` function with `FindCallback`
    so that we may begin processing the data only once it has all been downloaded.
    Use the following code:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `ParseQuery`，它将检索我们 Parse 数据库中 `JobOffer` 表的所有数据。使用 `findInBackground()`
    函数和 `FindCallback`，这样我们就可以在数据下载完成后开始处理数据。使用以下代码：
- en: '[PRE15]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Displaying a marker for each location
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为每个位置显示标记
- en: 'Now, we will loop through the list of job offers received from Parse and use
    `addMarker()` to add a marker to `googleMap`. Perform the following steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将遍历从 Parse 收到的职位列表，并使用 `addMarker()` 向 `googleMap` 添加标记。执行以下步骤：
- en: 'When the `findInBackground` is done, create a `ParseGeoPoint` variable and
    a loop that will iterate each item on the list. We will use the `ParseGeoPoint`
    variable to store the coordinates from our Parse database:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 `findInBackground` 执行完毕后，创建一个 `ParseGeoPoint` 变量和一个循环，该循环将遍历列表中的每个项目。我们将使用
    `ParseGeoPoint` 变量来存储来自 Parse 数据库的坐标：
- en: '[PRE16]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Within the loop, get the `GeoPoint` data from the list and save it to our `ParseGeoPoint`
    variable:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环内，从列表中获取 `GeoPoint` 数据并将其保存到我们的 `ParseGeoPoint` 变量中：
- en: '[PRE17]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, add a marker to `googleMap` on each iteration with `addMarker()`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在每次迭代中使用 `addMarker()` 向 `googleMap` 添加标记：
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Your `MyMapFragment.java` file should be similar to the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '你的 `MyMapFragment.java` 文件应类似于以下内容： '
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'These markers should now be visible on the app:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标记现在应该在应用中可见：
- en: '![Displaying a marker for each location](img/4887_10_06.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![为每个位置显示标记](img/4887_10_06.jpg)'
- en: Adding a title to a marker
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向标记添加标题
- en: What is useful about having a marker on the map isn't just showing a point,
    but also giving the user an easy and accessible way to get information about this
    location. We will do this by displaying a title on the marker when it is clicked
    on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 地图上标记的实用性不仅仅在于显示一个点，而且还在于为用户提供一种简单且易于访问的方式来获取此位置的信息。我们将通过在点击标记时显示标题来实现这一点。
- en: 'This can be achieved by simply adding `.title(string)` to our `addMarker()`
    method:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过简单地在我们的 `addMarker()` 方法中添加 `.title(string)` 来实现：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We now have a fully functioning display of a map that will show a title above
    the marker when a user clicks on it, as shown in the following image:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个完全功能的地图显示，当用户点击标记时，它会在标记上方显示一个标题，如下面的图片所示：
- en: '![Adding a title to a marker](img/4887_10_07.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![向标记添加标题](img/4887_10_07.jpg)'
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to add a map to our app. This required us to
    create a project on Google Developer Console and configure our app to access the
    API necessary. Once our app was completely configured, we moved on to adding the
    map to the view of our choice. We discussed handling a fragment within a fragment
    (`MapFragment` with our `MyMapFragment`). Although the single `MapFragment` could
    have been added individually by code, placing it within another fragment with
    a layout gives us the possibility of adding other UI widgets, such as `FloatingActionButton`,
    to the page if we need to. Finally, we made the map useful by displaying markers
    and information for locations, which we downloaded from Parse.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何向我们的应用添加地图。这需要我们在 Google Developer Console 上创建一个项目，并配置我们的应用以访问必要的
    API。一旦我们的应用完全配置好，我们就继续将地图添加到我们选择的视图中。我们讨论了在另一个片段（`MyMapFragment` 中的 `MapFragment`）中处理片段。尽管单个
    `MapFragment` 可以通过代码单独添加，但将其放在带有布局的另一个片段中，如果我们需要，可以让我们有可能向页面添加其他 UI 控件，例如 `FloatingActionButton`。最后，我们通过显示从
    Parse 下载的位置的标记和信息，使地图变得有用。
- en: In the next chapter, you will learn how to debug and test our application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何调试和测试我们的应用程序。
