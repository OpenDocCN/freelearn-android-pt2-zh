- en: Chapter 10. Location Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to add a map view to our application using
    Google's Map Fragment. We will add markers onto the map, which will be used to
    point out locations of interest.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we will also discuss how to create a project in Google
    Developer Console and set up our application to use the Google Play Services SDK,
    which is required in order to use Google services in any Android application.
  prefs: []
  type: TYPE_NORMAL
- en: Every job offer has a location field in Parse; based on this, we will display
    markers on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the Google Maps API key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring `AndroidManifest.xml`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the fragment for ViewPager
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Map Fragment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data from Parse
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a marker for each location
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for us to use the Google Play Service APIs, we need to set up our project
    with the Google Play Services SDK. If you have not already installed this, go
    to Android SDK Manager and get the Google Play Service SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our app uses Google Play services, to test the app, you must ensure
    that you run the app on either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Android device with Android 2.3 or higher that has Google Play Store (Recommended).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An emulator that has Google Play Services set up. If you use Genymotion, **Google
    Play services** will not be installed by default:![Configuring the project](img/4887_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to make Google Play services APIs available to our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the app''s `build.gradle` file and add the `play-services` library under
    dependencies. The line to add the `build.gradle` file should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you change this to the latest version of `play-services` and update
    it when a new version is released.
  prefs: []
  type: TYPE_NORMAL
- en: Save the file and click on **Sync Project with Gradle Files**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the API key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For us to use the Google Maps API, we need to register our project with Google
    Developer Console and receive an API key, which we will then add to our app.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we will need to get the SHA-1 fingerprint of our unique application.
    We can receive this from either the **debug certificate** or the **release certificate**.
  prefs: []
  type: TYPE_NORMAL
- en: The **debug** **certificate** is created automatically when a debug build is
    done. This certificate must only be used for apps that are currently being tested.
    Do not publish an application using the debug certificate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **release** **certificate** is made when a release build is done. The certificate
    can also be created using the **keytool** program. This certificate must be used
    when the app is ready to be released to Play Store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the debug certificate fingerprint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Find your debug keystore file with the name `debug.keystore`. This file is
    usually in the same directory as the Android Virtual Device files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS X and Linux**: `~/.android/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Vista and Windows 7**: `C:\Users\your_user_name\.android\`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To show the SHA-1 fingerprint, open a terminal or command prompt window and
    enter the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS X and Linux**: We use the `keytool -list -v -keystore ~/.android/debug.keystore
    -alias androiddebugkey -storepass android -keypass android` command.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Vista and Windows 7**: We use the `keytool -list -v -keystore "%USERPROFILE%\.android\debug.keystore"
    -alias androiddebugkey -storepass android -keypass android` command.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you enter the command, and press the *Enter* key, you will see an output
    similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Google Developer Console project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go to [https://console.developers.google.com/project](https://console.developers.google.com/project)
    and create an account if you haven''t already done so. First, create a new project
    with your desired name. Once the project has been created, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the left sidebar, click on **APIs & auth** and then select the **APIs** option:![Creating
    a Google Developer Console project](img/4887_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Google Maps Android API** and enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Credentials**, and click on **[Create new key]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Android key** and enter your **SHA-1** fingerprint followed by your
    project''s package name separated by a semicolon, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you complete this, you will be able to view the credentials as in the following
    screenshot:![Creating a Google Developer Console project](img/4887_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring AndroidManifest.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the API key for our Android application, we need to add it
    to our `AndroidManifest.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `AndroidManifest.xml` file and add the following code in the `<application>`
    element as a child:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Replace `API_KEY` in the `value` attribute with the API key given on Google
    Developer Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to add a few other settings to our `AndroidManifest`. Set the
    Google Play services version as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Set required permissions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`INTERNET`: This permission is used to download map data from the Google Maps
    server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACCESS_NETWORK_STATE`: This will allow the API to check the status of the
    connection to determine whether or not it will be able to download the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WRITE_EXTERNAL_STORAGE`: This will allow the API to cache the map data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACCESS_COARSE_LOCATION`: This lets the API retrieve the device''s location
    using Wi-Fi or mobile data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACCESS_FINE_LOCATION`: This will give a more precise location than the `ACCESS_COARSE_LOCATION`,
    and it will also use GPS as well as Wi-Fi or mobile data. Take a look at the following
    code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You also need to set up your OpenGL ES. The Maps API uses OpenGL ES to render
    the map, so it needs to be installed in order for the map to be displayed. To
    notify other services of the requirement and prevent devices that don''t support
    OpenGL from showing your app on Google Play Store, add the following as a child
    of `<manifest>` in your `AndroidManifest.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Your current `AndroidManifest.xml` file should be similar to the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Adding the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our application is configured for us to use map services, we can begin
    discussing how to add a visual map to our application. For the map, we will create
    another Fragment, which will be loaded on the second page of `ViewPager`.
  prefs: []
  type: TYPE_NORMAL
- en: There are two methods to display Google Map; either a `MapFragment` or a `MapView`
    object can represent it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the fragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new Java class within our `fragments` directory with the name `MyMapFragment`.
    The class should extend the `Fragment` type. Then, override the `OnCreateView`
    method and let it return the inflated view of `fragment_my_map`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create the layout file for the fragment, and name it `fragment_my_map`.
    Set the root element of the layout to `FrameLayout`. We will temporarily add `TextView`
    to our layout just to verify that it works. The code for the `fragment_my_map.xml`
    file should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step to add our fragment to the app will be editing the `MyPagerAdapter.java`
    file to display it as the second page. To do this, change the second case in the
    `getItem` method to return an instance of `MyMapFragment` as well as the page
    title in the second case of the `getPageTitle` method to return `MAP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you run the app, the second page of the `ViewPager` should be replaced
    with our new fragment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the fragment](img/4887_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing MapFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now use `MapFragment` to display a map on our app. We can do this by
    adding a `<fragment>` layout with `android:name` of `com.google.android.gms.maps.MapFragment`.
    Doing this will automatically add `MapFragment` to `activity`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code for `fragment_my_map.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, to be able to handle `MapFragment` that we added to our layout, we need
    to use `FragmentManager`, which we get from `getChildFragmentManager` to `findFragmentById`.
    This will be done in the `OnCreateView` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will allocate our fragment to `SupportMapFragment` instead of just `MapFragment`
    so that the application can support Android API levels lower than **12**. Use
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code for `MyMapFragment.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we run the app, the map will be displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing MapFragment](img/4887_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a marker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google map is now visible, but it does not show any useful data for the
    user yet. To achieve this, we will add **map markers** to indicate points of interest
    for the user. These will be the locations of different job offers, which we will
    download from our Parse database.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn how to change the icon used to mark a point on the map to
    a custom image as well as have a title on the marker. This will make our app look
    more interesting and informative.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data from Parse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can display all our markers, we need to download all the necessary
    data from Parse.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `MyMapFragment.java`, we will use `ParseQuery` to retrieve a list of the
    locations and use this to get the relevant information for each job offer before
    it is displayed. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a private member variable named `googleMap` of the `GoogleMap` type and
    override the `onResume()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `onResume()`, check whether or not `googleMap` is empty; if it is, this
    means that we have not yet added markers to the current instance of the map. If
    `googleMap` is empty, allocate the map from `MapFragment`, which we have already
    created. This is done using `getMap()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `ParseQuery`, which will retrieve all the data for the `JobOffer`
    table of our Parse database. Use the `findInBackground()` function with `FindCallback`
    so that we may begin processing the data only once it has all been downloaded.
    Use the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Displaying a marker for each location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will loop through the list of job offers received from Parse and use
    `addMarker()` to add a marker to `googleMap`. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the `findInBackground` is done, create a `ParseGeoPoint` variable and
    a loop that will iterate each item on the list. We will use the `ParseGeoPoint`
    variable to store the coordinates from our Parse database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the loop, get the `GeoPoint` data from the list and save it to our `ParseGeoPoint`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a marker to `googleMap` on each iteration with `addMarker()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your `MyMapFragment.java` file should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'These markers should now be visible on the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a marker for each location](img/4887_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a title to a marker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is useful about having a marker on the map isn't just showing a point,
    but also giving the user an easy and accessible way to get information about this
    location. We will do this by displaying a title on the marker when it is clicked
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be achieved by simply adding `.title(string)` to our `addMarker()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a fully functioning display of a map that will show a title above
    the marker when a user clicks on it, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a title to a marker](img/4887_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to add a map to our app. This required us to
    create a project on Google Developer Console and configure our app to access the
    API necessary. Once our app was completely configured, we moved on to adding the
    map to the view of our choice. We discussed handling a fragment within a fragment
    (`MapFragment` with our `MyMapFragment`). Although the single `MapFragment` could
    have been added individually by code, placing it within another fragment with
    a layout gives us the possibility of adding other UI widgets, such as `FloatingActionButton`,
    to the page if we need to. Finally, we made the map useful by displaying markers
    and information for locations, which we downloaded from Parse.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to debug and test our application.
  prefs: []
  type: TYPE_NORMAL
