["```kt\nCursor rawQuery(String sql, String[] selectionArgs)\n\n```", "```kt\nCursor query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy)\n\n```", "```kt\nString buildQuery(String[] projectionIn, String selection, String groupBy, String having, String sortOrder, String limit)\n\n```", "```kt\nString buildUnionQuery(String[] subQueries, String sortOrder, String limit)\n\n```", "```kt\nString buildQueryString(boolean distinct, String tables, String[] columns, String where, String groupBy, String having, String orderBy, String limit)\n\n```", "```kt\nVoid setDistinct(boolean distinct)\n\n```", "```kt\nVoid setTables(String inTables)\n\n```", "```kt\npublic class BasicQueryActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n/*\n* SELECT Query\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nCursor c = sqdb.rawQuery(\"SELECT * from \" + StudentTable.TABLE_NAME, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nString name = c.getString(colid);\nSystem.out.println(\"GOT STUDENT \" + name);\n}\nSELECT statementsaboutSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\nc = sqdb.query(StudentTable.TABLE_NAME, null, null, null, null, null, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nString name = c.getString(colid);\nSystem.out.println(\"GOT STUDENT \" + name);\n}\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nString query = SQLiteQueryBuilder.buildQueryString (false, StudentTable.TABLE_NAME, null, null, null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nString name = c.getString(colid);\nSystem.out.println(\"GOT STUDENT \" + name);\n}\n}\n}\n\n```", "```kt\n/*\n* SELECT COLUMNS Query\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nc = sqdb.rawQuery(\n\"SELECT \" + StudentTable.NAME + \",\" + StudentTable.STATE + \" from \" + StudentTable.TABLE_NAME, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n}\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\nString[] cols = new String[] { StudentTable.NAME, StudentTable.STATE };\nc = sqdb.query(StudentTable.TABLE_NAME, cols, null, null, null, null, null);\nSELECT statementsresults, validatingwhile (c.moveToNext()) {\nSELECT statementsaboutint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n}\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, cols, null, null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n}\n\n```", "```kt\n/*\n* WHERE Filter - Filter by State\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nc = sqdb.rawQuery(\"SELECT * from \" + StudentTable.TABLE_NAME + \" WHERE \" + StudentTable.STATE + \"= ? \", new String[] { \"IL\" });\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n}\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\nc = sqdb.query(StudentTable.TABLE_NAME, null, StudentTable.STATE + \"= ? \", new String[] { \"IL\" }, null, null, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n}\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, null, StudentTable.STATE + \"='IL'\", null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n}\n\n```", "```kt\n/*\n* AND/OR Clauses\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nc = sqdb.rawQuery(\"SELECT * from \" + StudentTable.TABLE_NAME + \" WHERE \" + StudentTable.STATE + \"= ? OR \" + StudentTable.STATE + \"= ?\", new String[] { \"IL\", \"AR\" });\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\nc = sqdb.query(StudentTable.TABLE_NAME, null, StudentTable.STATE + \"= ? OR \" + StudentTable.STATE + \"= ?\", new String[] { \"IL\", \"AR\" }, null, null, null);\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, null, StudentTable.STATE + \"='IL' OR \" + StudentTable.STATE + \"='AR'\", null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\n\n```", "```kt\n/*\n* DISTINCT Clause\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nc = sqdb.rawQuery(\"SELECT DISTINCT \" + StudentTable.STATE + \" from \" + StudentTable.TABLE_NAME, null);\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\n// SWITCH TO MORE GENERAL QUERY() METHOD\nc = sqdb.query(true, StudentTable.TABLE_NAME, new String[] { StudentTable.STATE }, null, null, null, null, null, null);\n...\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nquery = SQLiteQueryBuilder.buildQueryString(true, StudentTable.TABLE_NAME, new String[] { StudentTable.STATE },null, null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\n\n```", "```kt\n/*\n* LIMIT Clause\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nc = sqdb.rawQuery(\"SELECT * from \" + StudentTable.TABLE_NAME + \" LIMIT 0,3\", null);\n...\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\n// SWITCH TO MORE GENERAL QUERY() METHOD\nc = sqdb.query(false, StudentTable.TABLE_NAME, null, null, null, null, null, null, \"3\");\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, null, null, null, null, null, \"3\");\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\n\n```", "```kt\npublic class AdvancedQueryActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nSchemaHelper sch = new SchemaHelper(this);\nSQLiteDatabase sqdb = sch.getWritableDatabase();\n/*\n* ORDER BY Clause\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nCursor c = sqdb.rawQuery(\"SELECT * from \" + StudentTable. TABLE_NAME + \" ORDER BY \" + StudentTable.STATE + \" ASC\", null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\nString name = c.getString(colid);\nString state = c.getString(colid2);\nSystem.out.println(\"GOT STUDENT \" + name + \" FROM \" + state);\n}\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\nc = sqdb.query(StudentTable.TABLE_NAME, null, null, null, null, null, StudentTable.STATE + \" ASC\");\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n...\n}\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nString query = SQLiteQueryBuilder.buildQueryString (false, StudentTable.TABLE_NAME, null, null, null, null, StudentTable.STATE + \" ASC\", null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.NAME);\nint colid2 = c.getColumnIndex(StudentTable.STATE);\n...\n}\n}\n}\n\n```", "```kt\nORDER BY your_column ASC|DESC\n\n```", "```kt\n/*\n* GROUP BY Clause\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nString colName = \"COUNT(\" + StudentTable.STATE + \")\";\nc = sqdb.rawQuery(\"SELECT \" + StudentTable.STATE + \",\" + colName + \" from \" + StudentTable.TABLE_NAME + \" GROUP BY \" + StudentTable.STATE, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.STATE);\nint colid2 = c.getColumnIndex(colName);\nString state = c.getString(colid);\nint count = c.getInt(colid2);\nSystem.out.println(\"STATE \" + state + \" HAS COUNT \" + count);\n}\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\nc = sqdb.query(StudentTable.TABLE_NAME, new String[] { StudentTable.STATE, colName }, null, null, StudentTable.STATE, null, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.STATE);\nint colid2 = c.getColumnIndex(colName);\n}\nSQLGROUPBY clausesSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, new String[] { StudentTable.STATE, colName }, null, StudentTable.STATE, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.STATE);\nint colid2 = c.getColumnIndex(colName);\n}\n\n```", "```kt\nSELECT your_column, aggregate_function(your_column) FROM your_table GROUP BY your_column\n\n```", "```kt\n/*\n* HAVING Filter\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nString colName = \"COUNT(\" + StudentTable.STATE + \")\";\nc = sqdb.rawQuery(\"SELECT \" + StudentTable.STATE + \",\" + colName + \" from \" + StudentTable.TABLE_NAME + \" GROUP BY \" + StudentTable.STATE + \" HAVING \" + colName + \" > 1\", null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.STATE);\nint colid2 = c.getColumnIndex(colName);\n}\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\nc = sqdb.query(StudentTable.TABLE_NAME, new String[] { StudentTable.STATE, colName }, null, null, StudentTable.STATE, colName + \" > 1\", null);\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, new String[] { StudentTable.STATE, colName }, null, StudentTable.STATE, colName + \" > 1\", null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\n\n```", "```kt\n/*\n* SQL Functions - MIN/MAX/AVG\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nString colName = \"MIN(\" + StudentTable.GRADE + \")\";\nc = sqdb.rawQuery(\"SELECT \" + colName + \" from \" + StudentTable.TABLE_NAME, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(colName);\nint minGrade = c.getInt(colid);\nSystem.out.println(\"MIN GRADE \" + minGrade);\n}\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\ncolName = \"MAX(\" + StudentTable.GRADE + \")\";\nc = sqdb.query(StudentTable.TABLE_NAME, new String[] { colName }, null, null, null, null, null);\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\ncolName = \"AVG(\" + StudentTable.GRADE + \")\";\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, new String[] { colName }, null,\nnull, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(colName);\ndouble avgGrade = c.getDouble(colid);\nSystem.out.println(\"AVG GRADE \" + avgGrade);\n}\n\n```", "```kt\n/*\n* SQL Functions - UPPER/LOWER/SUBSTR\n*/\nSystem.out.println(\"METHOD 1\");\n// METHOD #1 - SQLITEDATABASE RAWQUERY()\nString colName = \"UPPER(\" + StudentTable.NAME + \")\";\nc = sqdb.rawQuery(\"SELECT \" + colName + \" from \" + StudentTable.TABLE_NAME, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(colName);\nString upperName = c.getString(colid);\nSystem.out.println(\"GOT STUDENT \" + upperName);\n}\nSystem.out.println(\"METHOD 2\");\n// METHOD #2 - SQLITEDATABASE QUERY()\ncolName = \"LOWER(\" + StudentTable.NAME + \")\";\nc = sqdb.query(StudentTable.TABLE_NAME, new String[] { colName }, null, null, null, null, null);\nSystem.out.println(\"METHOD 3\");\n// METHOD #3 - SQLITEQUERYBUILDER\ncolName = \"SUBSTR(\" + StudentTable.NAME + \",1,4)\";\nquery = SQLiteQueryBuilder.buildQueryString(false, StudentTable.TABLE_NAME, new String[] { colName }, null,\nnull, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\n\n```", "```kt\n/*\n* SQL JOINS\n*/\nSQLiteQueryBuilder sqb = new SQLiteQueryBuilder();\n// NOTICE THE SYNTAX FOR COLUMNS IN JOIN QUERIES\nString courseIdCol = CourseTable.TABLE_NAME + \".\" + CourseTable.ID;\nString classCourseIdCol = ClassTable.TABLE_NAME + \".\" + ClassTable.COURSE_ID;\nString classIdCol = ClassTable.TABLE_NAME + \".\" + ClassTable.ID;\nsqb.setTables(ClassTable.TABLE_NAME + \" INNER JOIN \" + CourseTable.TABLE_NAME + \" ON (\" + classCourseIdCol + \" = \" + courseIdCol + \")\");\nString[] cols = new String[] { classIdCol, ClassTable.COURSE_ID, CourseTable.NAME };\nquery = sqb.buildQuery(cols, null, null, null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(0);\nint colid2 = c.getColumnIndex(cols[1]);\nint colid3 = c.getColumnIndex(cols[2]);\nint rowId = c.getInt(colid);\nint courseId = c.getInt(colid2);\nString courseName = c.getString(colid3);\nSystem.out.println(rowId + \" || COURSE ID \" + courseId + \" || \" + courseName);\n}\n\n```", "```kt\ntable_name.column_name\n\n```", "```kt\npublic class PerformanceActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nTestSchemaHelper sch = new TestSchemaHelper(this);\nSQLiteDatabase sqdb = sch.getWritableDatabase();\n// TEST WHERE FILTER PERFORMANCE //\n// SQL OPTIMIZED\nlong start = System.nanoTime();\nString query = SQLiteQueryBuilder.buildQueryString(false, TestTable.TABLE_NAME, new String[] { TestTable.NAME }, TestTable.INCOME + \" > 500000\", null, null, null, null);\nSystem.out.println(query);\nCursor c = sqdb.rawQuery(query, null);\nint numRows = 0;\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(TestTable.NAME);\nString name = c.getString(colid);\nnumRows++;\n}\nSystem.out.println(\"RETRIEVED \" + numRows);\nSystem.out.println((System.nanoTime() - start) / 1000000 + \" MILLISECONDS\");\nc.close();\n// JAVA OPTIMIZED\nstart = System.nanoTime();\nquery = SQLiteQueryBuilder.buildQueryString(false, TestTable.TABLE_NAME, new String[] { TestTable.NAME,\nTestTable.INCOME }, null, null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nnumRows = 0;\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(TestTable.NAME);\nint colid2 = c.getColumnIndex(TestTable.INCOME);\nString name = c.getString(colid);\nint income = c.getInt(colid2);\nif (income > 500000) {\nnumRows++;\n}\n}\nSystem.out.println(\"RETRIEVED \" + numRows);\nSystem.out.println((System.nanoTime() - start) / 1000000 + \" MILLISECONDS\");\nc.close();\n}\n}\n\n```", "```kt\n// TEST GROUP BY PERFORMANCE //\n// SQL OPTIMIZED\nstart = System.nanoTime();\nString colName = \"COUNT(\" + TestTable.STATE + \")\";\nquery = SQLiteQueryBuilder.buildQueryString(false, TestTable. TABLE_NAME, new String[] { TestTable.STATE,\ncolName }, null, TestTable.STATE, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(StudentTable.STATE);\nint colid2 = c.getColumnIndex(colName);\nString state = c.getString(colid);\nint count = c.getInt(colid2);\nSystem.out.println(\"STATE \" + state + \" HAS COUNT \" + count);\n}\nSystem.out.println((System.nanoTime() - start) / 1000000 + \" MILLISECONDS\");\nc.close();\n// JAVA OPTIMIZED\nstart = System.nanoTime();\nquery = SQLiteQueryBuilder.buildQueryString(false, TestTable. TABLE_NAME, new String[] { TestTable.STATE },\nnull, null, null, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nMap<String, Integer> map = new HashMap<String, Integer>();\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(TestTable.STATE);\nString state = c.getString(colid);\nif (map.containsKey(state)) {\nint curValue = map.get(state);\nmap.put(state, curValue + 1);\n} else {\nmap.put(state, 1);\n}\n}\nfor (String key : map.keySet()) {\nSystem.out.println(\"STATE \" + key + \" HAS COUNT \" + map. get(key));\n}\nSystem.out.println((System.nanoTime() - start) / 1000000 + \" MILLISECONDS\");\nc.close();\n\n```", "```kt\n// TEST AVERAGE PERFORMANCE //\n// SQL OPTIMIZED\nstart = System.nanoTime();\ncolName = \"AVG(\" + TestTable.INCOME + \")\";\nquery = SQLiteQueryBuilder.buildQueryString(false, TestTable.TABLE_NAME, new String[] { colName }, null, null,\nnull, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(colName);\ndouble avgGrade = c.getDouble(colid);\nSystem.out.println(\"AVG INCOME \" + avgGrade);\n}\nSystem.out.println((System.nanoTime() - start) / 1000000 + \" MILLISECONDS\");\nc.close();\n// JAVA OPTIMIZED\nstart = System.nanoTime();\ncolName = TestTable.INCOME;\nquery = SQLiteQueryBuilder.buildQueryString(false, TestTable.TABLE_NAME, new String[] { colName }, null, null,\nnull, null, null);\nSystem.out.println(query);\nc = sqdb.rawQuery(query, null);\nSQL language performancecheckingdouble sumIncomes = 0.0;\ndouble numIncomes = 0.0;\nwhile (c.moveToNext()) {\nint colid = c.getColumnIndex(colName);\nint income = c.getInt(colid);\nsumIncomes += income;\nnumIncomes++;\n}\nSystem.out.println(\"AVG INCOME \" + sumIncomes / numIncomes);\nSystem.out.println((System.nanoTime() - start) / 1000000 + \" MILLISECONDS\");\nc.close();\n\n```"]