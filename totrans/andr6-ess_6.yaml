- en: Chapter 6. Android for Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of you know that Android devices have a huge market share percentage worldwide,
    and more and more businesses are following the **BYOD** (short for **Bring Your
    Own Device**) policy. This is done with the help of **Android for Work**, a special
    program for companies where several added features in the Android platform allow
    better mobile device management, administration, and integration within the company.
  prefs: []
  type: TYPE_NORMAL
- en: 'When dealing with enterprises or even small-sized and medium-sized businesses,
    you need to follow specific guidelines and harness the Android API to your benefit.
    You can read more about Android for Work at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/training/enterprise/index.html](http://developer.android.com/training/enterprise/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Android Marshmallow has made a few changes to the Android for Work program,
    where a lot of the changes were made for better and easier usage for developers
    as well as work users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the Android Marshmallow changes that reflect
    or are related directly to Android for Work:'
  prefs: []
  type: TYPE_NORMAL
- en: Behavioral changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-use device improvements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Silently installing/uninstalling apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved certificate access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic system updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party certificate installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data usage statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing runtime permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPN access and display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work profile status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavioral changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Marshmallow has introduced a few behavioral changes related to Android
    for Work.
  prefs: []
  type: TYPE_NORMAL
- en: The work profile contacts display option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the following setting, you can now display your work profile contacts
    in the dialer call log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also display the work contacts over Bluetooth with the new option.
    Setting this to `false` will allow the display; the default value is `true` (disabling
    the contact-sharing option):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Wi-Fi configuration options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When adding a Wi-Fi network via a work profile, usually, added configurations
    stay persistent even after the profile is deleted. Now, all configurations added
    by a profile owner are removed if the work profile is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The Wi-Fi configuration lock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A new `Settings.Global` setting has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This setting is an integer value setting, which means that a zero value or absence
    will lead to all Wi-Fi configurations being modified or deleted by the user. Setting
    the integer value to a nonzero value will initiate the lock, which means that
    the user can't modify or delete Wi-Fi configurations created by a device owner—user-created
    configurations will still be modifiable. Note that an active device owner has
    complete privileges in any Wi-Fi configurations, even those not created by them.
  prefs: []
  type: TYPE_NORMAL
- en: Work Policy Controller addition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can continue to add Google accounts to the device, but now, when adding
    an account that is managed by **Work Policy Controller**, the flow is changed
    to include the Work Policy Controller addition. An added account prompts the user
    to install the appropriate Work Policy Controller. This is also true when adding
    an account through settings or via the start up device''s setup wizard. For more
    information on how to build a Work Policy Controller, read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/training/enterprise/work-policy-ctrl.html](http://developer.android.com/training/enterprise/work-policy-ctrl.html)'
  prefs: []
  type: TYPE_NORMAL
- en: DevicePolicyManager changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `DevicePolicyManager`, you may encounter quite a few changes in behavior;
    these are listed in the following bullets with a short explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setCameraDisabled()` affects the camera just for the calling user; if the
    profile is a managed profile, then the call doesn''t affect the camera apps running
    on the primary user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setKeyguardDisabledFeatures()` was made available for profile owners and device
    owners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Profile owners can set keyguard restrictions via the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KEYGUARD_DISABLE_TRUST_AGENTS`: This will ignore the trust agent state on
    the keyguard on secure screens (the PIN code, pattern, or the password screen)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KEYGUARD_DISABLE_FINGERPRINT`: This will disable the fingerprint sensor on
    the keyguard on secure screens (PIN code, pattern, or the password screen)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS`: This will allow only redacted
    notifications on secure keyguard screens and only notifications generated by applications
    in the managed profile'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createAndInitializeUser()` is deprecated now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createUser()` is deprecated now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `setScreenCaptureDisabled()` method, the `Assist` feature is blocked,
    but this happens only when an app of the given user is in the foreground.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM` is SHA-256 now. Legacy support
    for SHA-1 still exists, but it will be removed in future versions according to
    the documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM` is SHA-256 only now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXTRA_PROVISIONING_RESET_PROTECTION_PARAMETERS` was removed so that NFC bump
    provisioning would not unlock a factory-reset-protected device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data to the device owner during NFC provisioning can be done with `EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New `DevicePolicyManager` API for permissions under Android Marshmallow's new
    permission model. You can read more about `DevicePolicyManager` at [https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESULT_CANCELED` is now returned if users cancel the setup flow initiated
    through an `ACTION_PROVISION_MANAGED_PROFILE` or `ACTION_PROVISION_MANAGED_DEVICE`
    intent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to `Settings.Global`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disabled the following set of settings via `setGlobalSettings()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BLUETOOTH_ON`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEVELOPMENT_SETTINGS_ENABLED`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MODE_RINGER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NETWORK_PREFERENCE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WIFI_ON`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabled the `WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN` setting via `setGlobalSettings()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-use device improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You as the device owner can now control added settings, thus improving device
    management using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setKeyguardDisabled()` can be used to disable or re-enable the keyguard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setStatusBarDisabled()` can be used to disable or re-enable the status bar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserManager.DISALLOW_SAFE_BOOT` is a new constant that states whether the
    user can boot a device to safe boot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Settings.Global.STAY_ON_WHILE_PLUGGED_IN` will prevent the screen from turning
    off while plugged in to power'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Silently installing/uninstalling apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you can silently install and uninstall applications using `PackageInstaller`
    APIs. This means installing apps without user interaction or even removing apps
    as part of the company policy. This feature enables you to use devices without
    actually activating a Google account. **Google Play for Work** is not required,
    allowing you to use devices as **kiosks**, showcasing specific apps not released
    yet, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Improved certificate access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Allowing users to grant managed apps'' access to certificates without user
    interaction was not possible prior to Android Marshmallow, so now, a new callback
    has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This callback will allow the device owner to provide the alias silently to the
    requesting application.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic system updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following option has been added in Android 6.0 and its main purpose is
    to allow device owners to auto-accept a system update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`SystemUpdatePolicy` has been added as well, and you can choose from three
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TYPE_INSTALL_AUTOMATIC`: update as soon as you get an update'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_INSTALL_WINDOWED`: update should be done within a timed system maintenance
    and only then, just for 30 days and then return to normal behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_POSTPONE`: postpone updates for up to 30 days and then return to normal
    behavior afterwards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can come in handy if you have devices such as showcase tablets or kiosk
    mode devices, where the update should not mess with the devices' work.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party certificate installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Third-party apps now have the ability to call `DevicePolicyManager` APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getInstalledCaCerts()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hasCaCertInstalled()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`installCaCert()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uninstallCaCert()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uninstallAllUserCaCerts()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`installKeyPair()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These API calls can only be done if the permission has been granted by the device
    owner or profile owner.
  prefs: []
  type: TYPE_NORMAL
- en: Data usage statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A new class has been added in Android 6.0: `NetworkStatsManager`. This helps
    you query for data usage statistics that can be seen in **Settings** | **Data
    usage**.'
  prefs: []
  type: TYPE_NORMAL
- en: Access for profile owners is automatically granted in order for them to query
    data on their profile. Device owners get access to the data usage of the managed
    primary user.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `android.app.usage.NetworkUsageStats` class has been renamed to `NetworkStats`.
  prefs: []
  type: TYPE_NORMAL
- en: Managing runtime permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Marshmallow introduced the runtime permissions model, and Android for
    Work had to deal with managing policies for devices. You as device owner can now
    set a policy for all runtime requests of all applications using `setPermissionPolicy()`.
  prefs: []
  type: TYPE_NORMAL
- en: You can choose to prompt users to grant permissions or automatically grant or
    deny the permissions silently. The automatic policy means that the user cannot
    modify the app's permissions screen in **Settings**.
  prefs: []
  type: TYPE_NORMAL
- en: VPN access and display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When heading to **Settings** | **More** | **VPN**, you can now view the VPN
    apps. When using VPN, the notifications shown are now specific to how that VPN
    is configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The profile owner**: Notifications are shown according to the VPN configuration
    and based on the profile (personal, work, or both)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The device owner**: Notifications are shown when the VPN is configured for
    the entire device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work profile status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two new additions were introduced for the users to know that they are under
    a different profile:'
  prefs: []
  type: TYPE_NORMAL
- en: When using an app from a work profile, the status bar will display a briefcase
    icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When unlocking a device straight from a work profile app, a popup is displayed,
    alerting the user that this app runs on the work profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in this chapter, Android Marshmallow has brought in quite a few changes
    to the Android for Work world. As developers, we need to always maintain a viable
    connection to the needs of an organization. We need to make sure we go over and
    understand the Android for Work world; the changes in Marshmallow help us build
    and target enterprise workflows with the benefit of a simpler API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the Chrome custom tabs API's usage
    and flow.
  prefs: []
  type: TYPE_NORMAL
