- en: Chapter 5. Touch Events and Drawing on Canvas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 触摸事件和画布上的绘图
- en: In this chapter, we will learn about how we can interact with our application,
    capturing the touch events and rendering the graphics on the canvas in response
    to those touch events. To achieve this goal, we will develop a very simple Android
    application with an image displayed on the screen. The core functionality of the
    application will be that, when we click or touch the image and drag it along the
    screen, the image is dragged from its current location with our finger. The moment
    we release the touch and lift our finger from the screen, the image stops moving.
    In other words, we will touch the image and, by keeping it pressed, will drag-and-drop
    the image on the screen from point A to point B.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何与应用程序进行交互，捕捉触摸事件并在画布上对这些触摸事件做出图形渲染。为了实现这个目标，我们将开发一个非常简单的Android应用程序，在屏幕上显示一个图像。应用程序的核心功能是，当我们点击或触摸图像并在屏幕上拖动它时，图像会随着我们的手指从当前位置被拖动。当我们释放触摸并抬起手指时，图像停止移动。换句话说，我们将触摸图像并保持按下状态，将图像从屏幕上的点A拖放到点B。
- en: Some background knowledge
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些背景知识
- en: We first need to understand that the screen is filled with points called pixels.
    Horizontal points are `x` and vertical points are `y`. Whenever we put an object
    on the screen, it's at a certain `x, y` location. Let's say if the object is at
    the top-left corner of the screen, then its position will be `x = 0` and `y =
    0`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要明白屏幕充满了被称为像素的点。水平点是`x`，垂直点是`y`。每当我们把一个对象放在屏幕上，它就在一个特定的`x, y`位置。比如说，如果对象在屏幕的左上角，那么它的位置就是`x
    = 0`和`y = 0`。
- en: During our code, we will set a default location for our image when the application
    first runs. The default location will be at the top-left corner of the screen.
    So we will set `x = 0` and `y = 0` for our image location. The most important
    point here will be when we start dragging the image; at every change of `x, y`
    of our touch, we will update the image location to the current location of the
    touch. Thus, it will appear as if we are dragging the image from location A to
    B. We will do this by first listening to the touch events, then we will capture
    those touch events.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时，我们将设置应用程序首次运行时图像的默认位置。默认位置将在屏幕的左上角。因此，我们将为图像位置设置`x = 0`和`y = 0`。这里最重要的时刻将是我们开始拖动图像时；每次触摸的`x,
    y`发生变化，我们都会将图像位置更新到触摸的当前位置。这样，它看起来就像我们从位置A拖动图像到位置B。我们将首先监听触摸事件，然后捕获这些触摸事件来实现这一点。
- en: After that, we will capture actions of the touch. Is the action down or up?
    And if the action is down, is there any movement? Because if there is movement
    and the action is down, we have to do the dragging.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将捕获触摸的动作。动作是按下还是抬起？如果动作是按下，是否有移动？因为如果有移动且动作是按下，我们就需要进行拖动。
- en: Some more details will come along as we develop our simple application and do
    the coding.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们开发简单的应用程序并进行编码，将会有更多细节出现。
- en: Application development
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序开发
- en: 'We will start by creating a new project in Eclipse by the name of `Touch App`.
    The following screenshot shows the first screen of the new Android application
    wizard:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Eclipse中创建一个名为`Touch App`的新项目。下面的截图显示了新Android应用程序向导的第一步：
- en: '![Application development](img/5396OS_05_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序开发](img/5396OS_05_01.jpg)'
- en: 'The following screenshot shows that we have selected our custom-created drawing
    PNG file as the icon for our application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示我们已经选择了一个自定义创建的PNG绘图文件作为我们应用程序的图标：
- en: '![Application development](img/5396OS_05_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序开发](img/5396OS_05_02.jpg)'
- en: 'The following screenshot shows that we have to start our project with a blank
    screen as we want it to be our playground:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示我们需要从一个空白屏幕开始我们的项目，因为这是我们想要的游戏场所：
- en: '![Application development](img/5396OS_05_03.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序开发](img/5396OS_05_03.jpg)'
- en: 'The following screenshot is the last screen in the wizard that shows we have
    created a default main activity by the name of `TouchAppMainActivity` and its
    layout filename is automatically populated:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图是向导的最后一步，显示了我们已经创建了一个名为`TouchAppMainActivity`的默认主活动，并且其布局文件名已自动填充：
- en: '![Application development](img/5396OS_05_04.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序开发](img/5396OS_05_04.jpg)'
- en: 'The following screenshot shows that our wizard is finished and now we have
    a working skeleton application:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示我们的向导已经完成，现在我们有一个可工作的应用程序框架：
- en: '![Application development](img/5396OS_05_05.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序开发](img/5396OS_05_05.jpg)'
- en: From this point onward, first what we will do is delete the **Hello world!**
    text from the screen as we want our screen to be completely blank and just display
    the image that we will drag.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，我们首先会从屏幕上删除**Hello world!**文本，因为我们要让屏幕完全空白，只显示我们将要拖动的图像。
- en: Next, we will browse to the `res` folder of this project on our hard drive and
    will create a new folder named `drawable`, if it's not already created or any
    of the available folders in the `res` folder can be used, for example, `drawable-hdpi`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在硬盘上浏览到项目的`res`文件夹，并创建一个名为`drawable`的新文件夹，如果它尚未创建或`res`文件夹中的任何可用文件夹都可以使用，例如`drawable-hdpi`。
- en: 'Then, we will copy our `drawing.png` file to that folder and will come to Eclipse
    again. We will refresh the project files in the package explorer. The following
    screenshot shows the final state of the `res` folder:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`drawing.png`文件复制到那个文件夹中，并再次回到 Eclipse。我们将在包资源管理器中刷新项目文件。以下屏幕截图显示了`res`文件夹的最终状态：
- en: '![Application development](img/5396OS_05_06.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序开发](img/5396OS_05_06.jpg)'
- en: Our custom-view class
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的自定义视图类
- en: 'We will open the `TouchAppMainActivity` Java file that extends the `Activity`
    class. Inside this class, we will create another class that will contain all our
    core functionality and will extend the `View` class:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将打开扩展了`Activity`类的`TouchAppMainActivity` Java文件。在这个类中，我们将创建另一个类，其中包含我们所有的核心功能，并扩展`View`类：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Defining class properties and objects
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义类属性和对象
- en: 'Inside this class, we will define some global objects and variables so that
    they are visible to all the methods in the class. First we will define a `Paint`
    object:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们将定义一些全局对象和变量，以便它们对所有类中的方法可见。首先，我们将定义一个`Paint`对象：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then variables for `x, y` points on the screen:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接着是屏幕上`x, y`点的变量：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Following is a Boolean variable to check if a touch event is occurring or not:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个布尔变量，用于检查是否正在发生触摸事件：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After this, we will define a `Bitmap` object and provide our custom `drawing.png`
    file as its source that we have copied in the `drawable` folder in our project
    resources:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，我们将定义一个`Bitmap`对象，并提供我们自定义的`drawing.png`文件作为其源，该文件我们已复制到项目资源的`drawable`文件夹中：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next comes the variables that we will use to set the default position of our
    image on the screen. The initialized values will be `0, 0` for the `x, y` position
    and the image will be displayed at the top-left corner of the screen. Later, when
    we change the position of the image, the values of these variables will be updated
    accordingly.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们将用来设置屏幕上图像默认位置的变量。初始化值为`x, y`位置的`0, 0`，图像将显示在屏幕的左上角。稍后，当我们改变图像的位置时，这些变量的值将相应更新。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next we capture the width and height of the image that is displayed:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们捕获显示图像的宽度和高度：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then we will define the offset variables. The offset variables define the relative
    position of an object in reference to some other object or position.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义偏移变量。偏移变量定义了一个对象相对于另一个对象或位置的相关位置。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Following is just another Boolean variable to check the touch action. By default
    it's set to `false`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面只是一个布尔变量，用于检查触摸动作。默认设置为`false`。
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first Boolean variable checks if the screen is touched and the second Boolean
    variable checks whether, while the screen is touched, it is actually the image
    that is touched or whether it is some other point away from the image.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个布尔变量检查屏幕是否被触摸，第二个布尔变量检查在屏幕被触摸时，实际上触摸的是图像还是图像以外的其他点。
- en: Methods in our custom-view class
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们自定义视图类中的方法
- en: 'Now we will add the following four methods to our class:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将以下四种方法添加到我们的类中：
- en: The constructor
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数
- en: The drawing method
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图方法
- en: The measurement method
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量方法
- en: The touch event
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触摸事件
- en: The constructor
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造函数
- en: We will define the constructor but the body will not put any functionality in
    there for the time being. For now, we will only call the context of the parent.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义构造函数，但暂时不会在其中放置任何功能。现在，我们只调用父级的上下文。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The drawing method
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图方法
- en: This is the method that will draw the bitmap image for us every time we change
    its location. As we want that, the old image is removed and the same image is
    drawn in the new location.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们每次改变图像位置时为我们绘制位图图像的方法。我们希望旧的图像被移除，并在新的位置绘制相同的图像。
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This method actually draws the bitmap on the canvas by using `drawingPic` as
    a source image. `drawingPic` is the object that has our `drawing.png` image. It
    gets the `x` and `y` points from the initialized variables, where `x` is the position
    on the left-hand side of the bitmap to be drawn and `Y` is the position of the
    top of the bitmap to be drawn. At the end, the `paint` object will draw the bitmap
    but, if we are using a source bitmap, the value of this object can be null.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个方法通过使用`drawingPic`作为源图像在画布上绘制位图。`drawingPic`是包含我们`drawing.png`图像的对象。它从初始化的变量中获取`x`和`y`点，其中`x`是要绘制的位图的左侧位置，`Y`是要绘制的位图的顶部位置。最后，`paint`对象将绘制位图，但如果我们使用源位图，此对象的值可以为null。
- en: The measurement method
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测量方法
- en: 'This is a method that will tell the system how much space is required vertically
    and horizontally by the view and its contents. We can complete this application
    without this method; however, mentioning it here is necessary as this method can
    provide us valuable information when working with more complex graphic application.
    The code is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个方法，它将告诉系统视图及其内容在垂直和水平方向上需要多少空间。我们可以不使用这个方法来完成这个应用程序；然而，提到它是必要的，因为当我们在更复杂的图形应用程序中工作时，这个方法可以提供有价值的信息。代码如下：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The touch event
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触摸事件
- en: 'We will define an `onTouchEvent()` method that will receive an action as an
    argument. Now actions can be of three types: a movement, a down motion or pressing
    a button type of action, and an up motion or releasing of a button type of action.
    We will define cases and functionality for the three cases and will integrate
    our logic of what we want to do in which type of action.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义一个`onTouchEvent()`方法，该方法将接收一个动作作为参数。现在，动作可以是三种类型：移动、按下动作或按下按钮类型的动作，以及抬起动作或释放按钮类型的动作。我们将为这三种情况定义案例和功能，并将我们想要执行的操作逻辑整合到每种类型的动作中。
- en: 'We define the `onTouchEvent()` method:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`onTouchEvent()`方法：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We define a variable that will store the action value:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个变量来存储动作值：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For all the available properties and methods, the following link can be visited:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有关所有可用的属性和方法，可以访问以下链接：
- en: '[http://developer.Android.com/reference/android/view/MotionEvent.html](http://developer.Android.com/reference/android/view/MotionEvent.html)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.Android.com/reference/android/view/MotionEvent.html](http://developer.Android.com/reference/android/view/MotionEvent.html)（链接内容不需要翻译，保留英文）'
- en: 'A switch case start that will take the action and will check it with different
    scenarios and will perform actions according to each action is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个开关案例开始，它将获取动作并针对不同的场景进行检查，并根据每个动作执行操作，如下所示：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the action is down, set the `x, y` values to the current events `x, y` positions
    and turn the touching variable to `true`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果动作是按下，将`x, y`值设置为当前事件的`x, y`位置，并将触摸变量设为`true`。
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now check if the action is down and if the image touched, as we don't want the
    image to be dragged by touching somewhere else on the screen. In the following
    code, we will check the vertical and horizontal positions of our image with the
    initial values and the width and height of our image with the initial values.
    If it's exactly the same and everything returns `true`, we will turn the `dm_touched`
    variable to `true`. This will mean that the image is touched.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查动作是否为按下，并且触摸的是图像，因为我们不希望图像因为触摸屏幕其他地方而被拖动。在以下代码中，我们将通过初始值检查我们图像的垂直和水平位置以及图像的宽度和高度。如果完全相同且一切返回`true`，我们将`dm_touched`变量设为`true`。这意味着图像被触摸了。
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we know that the image is touched, we will update the `x, y` position
    of the image according to the new `x, y` position, that is, the position that
    we get from the event occurring in the current location.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道图像被触摸了，我们将根据新的`x, y`位置更新图像的`x, y`位置，即从当前地点发生的事件中获得的位置。
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After the preceding code is executed once, execute the case code mentioned in
    the second case. The `if` statement will execute because now we have confirmed
    that a touch event is performed and the touched area is actually our image. Now
    check whether the `dm_touched` variable is `true` and then update the `x, y` position
    of the image. At the start, the code in the first case will not be executed because
    the `dm_touched` variable is `false`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的代码一次后，执行第二个案例中提到的案例代码。`if`语句将执行，因为现在我们已经确认执行了一个触摸事件，并且触摸的区域实际上是我们的图像。现在检查`dm_touched`变量是否为`true`，然后更新图像的`x,
    y`位置。起初，第一个案例中的代码将不会执行，因为`dm_touched`变量为`false`。
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the action is `MOVE`, then set the values for the earlier defined `x, y`
    variables to the current event `x, y` values and the touching Boolean variable
    to `true`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果动作是`MOVE`，则将之前定义的`x, y`变量值设置为当前事件的`x, y`值，并将触摸布尔变量设为`true`。
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If the case is `ACTION_UP`, it means we are lifting our finger. Releasing the
    touch will simply make both `touching` and `dm_touched` Boolean variables `false`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果情况是`ACTION_UP`，这意味着我们正在抬起手指。释放触摸将简单地将`touching`和`dm_touched`布尔变量设为`false`。
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Lastly, we will call the `invalidate()` method so that the previous drawing
    is removed and a fresh new bitmap is drawn according to the new parameters.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将调用`invalidate()`方法，以便移除之前的绘图并在新参数下绘制全新的位图。
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Our main activity class and final output
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的主活动类和最终输出
- en: 'We will come to the `onCreate()` method of our main class, that is `TouchAppMainActivity`.
    In the `OnCreate` method, we will add the following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进入主类`TouchAppMainActivity`的`onCreate()`方法。在`OnCreate`方法中，我们将添加以下代码：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method provides us with the facility to use our user interface for the
    activity on which we are working. If we define a custom view but don't set it
    to our custom-view class, our custom view will not appear. So everything will
    be alright and no errors will be generated, but our application will not function
    as planned. The importance of `setContentView()` is that it is the method responsible
    for displaying our XML-based layouts or even our dynamic layouts. By calling this
    method and supplying our custom-view class, that is, `TouchAppView` as an argument,
    we are enabling our application to execute whatever we have coded in the `TouchAppView`
    class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法为我们提供了使用当前活动界面的用户界面的功能。如果我们定义了一个自定义视图，但没有将其设置为我们的自定义视图类，那么我们的自定义视图将不会出现。所以一切看起来都正常且不会生成错误，但应用程序将无法按计划运行。`setContentView()`的重要性在于，它是负责显示基于XML的布局甚至动态布局的方法。通过调用这个方法并将我们的自定义视图类，即`TouchAppView`作为参数传入，我们使应用程序能够执行在`TouchAppView`类中编写的任何代码。
- en: 'The following screenshot shows the final output of the application when tested
    in an emulator:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了应用程序在模拟器中测试时的最终输出：
- en: '![Our main activity class and final output](img/5396OS_05_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![我们的主活动类和最终输出](img/5396OS_05_07.jpg)'
- en: Now we will click and keep the screen pressed as we try to drag the image with
    the mouse. This will imitate the touching of a screen; keep the finger pressed
    and drag the image on the screen from point A to B.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将点击屏幕并保持按下状态，尝试用鼠标拖动图像。这将模拟触摸屏幕的操作；保持手指按下并在屏幕上从点A拖动图像到点B。
- en: 'The following screenshot shows that we have dragged the image to another location
    from its default location:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示我们已经将图像从默认位置拖动到另一个位置：
- en: '![Our main activity class and final output](img/5396OS_05_08.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![我们的主活动类和最终输出](img/5396OS_05_08.jpg)'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter we have learned the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们学到了以下内容：
- en: Creating a custom-view class for our graphic application
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的图形应用程序创建一个自定义视图类
- en: Capturing the on-touch event
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获触摸事件
- en: Identifying the action that is performed and the types of actions that can be
    performed while touching the screen
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别在触摸屏幕时执行的操作以及可以执行的操作类型
- en: Our functionality in response to the actions done by the touch event
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们对触摸事件执行的操作的响应功能
- en: Lastly, how we can implement this custom-view class in our main activity class
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将讨论如何在主活动类中实现这个自定义视图类
- en: In the next chapter, we will gather all the learned experience from the previous
    chapters and will create a complete application in which we will have different
    colors. We will select from them and will draw on the canvas our own drawing.
    It will be a very simple paint-like application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将汇总之前章节中学到的所有经验，并创建一个完整的程序，我们将在其中选择不同的颜色，并在画布上绘制我们自己的图形。这将是一个非常简单的类似画图的应用程序。
