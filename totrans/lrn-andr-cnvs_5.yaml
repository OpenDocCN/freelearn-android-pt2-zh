- en: Chapter 5. Touch Events and Drawing on Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about how we can interact with our application,
    capturing the touch events and rendering the graphics on the canvas in response
    to those touch events. To achieve this goal, we will develop a very simple Android
    application with an image displayed on the screen. The core functionality of the
    application will be that, when we click or touch the image and drag it along the
    screen, the image is dragged from its current location with our finger. The moment
    we release the touch and lift our finger from the screen, the image stops moving.
    In other words, we will touch the image and, by keeping it pressed, will drag-and-drop
    the image on the screen from point A to point B.
  prefs: []
  type: TYPE_NORMAL
- en: Some background knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We first need to understand that the screen is filled with points called pixels.
    Horizontal points are `x` and vertical points are `y`. Whenever we put an object
    on the screen, it's at a certain `x, y` location. Let's say if the object is at
    the top-left corner of the screen, then its position will be `x = 0` and `y =
    0`.
  prefs: []
  type: TYPE_NORMAL
- en: During our code, we will set a default location for our image when the application
    first runs. The default location will be at the top-left corner of the screen.
    So we will set `x = 0` and `y = 0` for our image location. The most important
    point here will be when we start dragging the image; at every change of `x, y`
    of our touch, we will update the image location to the current location of the
    touch. Thus, it will appear as if we are dragging the image from location A to
    B. We will do this by first listening to the touch events, then we will capture
    those touch events.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we will capture actions of the touch. Is the action down or up?
    And if the action is down, is there any movement? Because if there is movement
    and the action is down, we have to do the dragging.
  prefs: []
  type: TYPE_NORMAL
- en: Some more details will come along as we develop our simple application and do
    the coding.
  prefs: []
  type: TYPE_NORMAL
- en: Application development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by creating a new project in Eclipse by the name of `Touch App`.
    The following screenshot shows the first screen of the new Android application
    wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application development](img/5396OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that we have selected our custom-created drawing
    PNG file as the icon for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application development](img/5396OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that we have to start our project with a blank
    screen as we want it to be our playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application development](img/5396OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot is the last screen in the wizard that shows we have
    created a default main activity by the name of `TouchAppMainActivity` and its
    layout filename is automatically populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application development](img/5396OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that our wizard is finished and now we have
    a working skeleton application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application development](img/5396OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From this point onward, first what we will do is delete the **Hello world!**
    text from the screen as we want our screen to be completely blank and just display
    the image that we will drag.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will browse to the `res` folder of this project on our hard drive and
    will create a new folder named `drawable`, if it's not already created or any
    of the available folders in the `res` folder can be used, for example, `drawable-hdpi`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we will copy our `drawing.png` file to that folder and will come to Eclipse
    again. We will refresh the project files in the package explorer. The following
    screenshot shows the final state of the `res` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application development](img/5396OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our custom-view class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will open the `TouchAppMainActivity` Java file that extends the `Activity`
    class. Inside this class, we will create another class that will contain all our
    core functionality and will extend the `View` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Defining class properties and objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inside this class, we will define some global objects and variables so that
    they are visible to all the methods in the class. First we will define a `Paint`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then variables for `x, y` points on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is a Boolean variable to check if a touch event is occurring or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will define a `Bitmap` object and provide our custom `drawing.png`
    file as its source that we have copied in the `drawable` folder in our project
    resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next comes the variables that we will use to set the default position of our
    image on the screen. The initialized values will be `0, 0` for the `x, y` position
    and the image will be displayed at the top-left corner of the screen. Later, when
    we change the position of the image, the values of these variables will be updated
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we capture the width and height of the image that is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then we will define the offset variables. The offset variables define the relative
    position of an object in reference to some other object or position.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Following is just another Boolean variable to check the touch action. By default
    it's set to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The first Boolean variable checks if the screen is touched and the second Boolean
    variable checks whether, while the screen is touched, it is actually the image
    that is touched or whether it is some other point away from the image.
  prefs: []
  type: TYPE_NORMAL
- en: Methods in our custom-view class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will add the following four methods to our class:'
  prefs: []
  type: TYPE_NORMAL
- en: The constructor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drawing method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The measurement method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The touch event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The constructor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will define the constructor but the body will not put any functionality in
    there for the time being. For now, we will only call the context of the parent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The drawing method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the method that will draw the bitmap image for us every time we change
    its location. As we want that, the old image is removed and the same image is
    drawn in the new location.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This method actually draws the bitmap on the canvas by using `drawingPic` as
    a source image. `drawingPic` is the object that has our `drawing.png` image. It
    gets the `x` and `y` points from the initialized variables, where `x` is the position
    on the left-hand side of the bitmap to be drawn and `Y` is the position of the
    top of the bitmap to be drawn. At the end, the `paint` object will draw the bitmap
    but, if we are using a source bitmap, the value of this object can be null.
  prefs: []
  type: TYPE_NORMAL
- en: The measurement method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a method that will tell the system how much space is required vertically
    and horizontally by the view and its contents. We can complete this application
    without this method; however, mentioning it here is necessary as this method can
    provide us valuable information when working with more complex graphic application.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The touch event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will define an `onTouchEvent()` method that will receive an action as an
    argument. Now actions can be of three types: a movement, a down motion or pressing
    a button type of action, and an up motion or releasing of a button type of action.
    We will define cases and functionality for the three cases and will integrate
    our logic of what we want to do in which type of action.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the `onTouchEvent()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We define a variable that will store the action value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For all the available properties and methods, the following link can be visited:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.Android.com/reference/android/view/MotionEvent.html](http://developer.Android.com/reference/android/view/MotionEvent.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A switch case start that will take the action and will check it with different
    scenarios and will perform actions according to each action is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If the action is down, set the `x, y` values to the current events `x, y` positions
    and turn the touching variable to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now check if the action is down and if the image touched, as we don't want the
    image to be dragged by touching somewhere else on the screen. In the following
    code, we will check the vertical and horizontal positions of our image with the
    initial values and the width and height of our image with the initial values.
    If it's exactly the same and everything returns `true`, we will turn the `dm_touched`
    variable to `true`. This will mean that the image is touched.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know that the image is touched, we will update the `x, y` position
    of the image according to the new `x, y` position, that is, the position that
    we get from the event occurring in the current location.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: After the preceding code is executed once, execute the case code mentioned in
    the second case. The `if` statement will execute because now we have confirmed
    that a touch event is performed and the touched area is actually our image. Now
    check whether the `dm_touched` variable is `true` and then update the `x, y` position
    of the image. At the start, the code in the first case will not be executed because
    the `dm_touched` variable is `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If the action is `MOVE`, then set the values for the earlier defined `x, y`
    variables to the current event `x, y` values and the touching Boolean variable
    to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If the case is `ACTION_UP`, it means we are lifting our finger. Releasing the
    touch will simply make both `touching` and `dm_touched` Boolean variables `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we will call the `invalidate()` method so that the previous drawing
    is removed and a fresh new bitmap is drawn according to the new parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Our main activity class and final output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will come to the `onCreate()` method of our main class, that is `TouchAppMainActivity`.
    In the `OnCreate` method, we will add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This method provides us with the facility to use our user interface for the
    activity on which we are working. If we define a custom view but don't set it
    to our custom-view class, our custom view will not appear. So everything will
    be alright and no errors will be generated, but our application will not function
    as planned. The importance of `setContentView()` is that it is the method responsible
    for displaying our XML-based layouts or even our dynamic layouts. By calling this
    method and supplying our custom-view class, that is, `TouchAppView` as an argument,
    we are enabling our application to execute whatever we have coded in the `TouchAppView`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the final output of the application when tested
    in an emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our main activity class and final output](img/5396OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we will click and keep the screen pressed as we try to drag the image with
    the mouse. This will imitate the touching of a screen; keep the finger pressed
    and drag the image on the screen from point A to B.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows that we have dragged the image to another location
    from its default location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our main activity class and final output](img/5396OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we have learned the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom-view class for our graphic application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing the on-touch event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying the action that is performed and the types of actions that can be
    performed while touching the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our functionality in response to the actions done by the touch event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, how we can implement this custom-view class in our main activity class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will gather all the learned experience from the previous
    chapters and will create a complete application in which we will have different
    colors. We will select from them and will draw on the canvas our own drawing.
    It will be a very simple paint-like application.
  prefs: []
  type: TYPE_NORMAL
