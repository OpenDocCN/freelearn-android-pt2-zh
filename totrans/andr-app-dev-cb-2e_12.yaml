- en: Chapter 12. Telephony, Networks, and the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十二章. 电信、网络与互联网
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: How to make a phone call
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何拨打电话
- en: Monitoring phone call events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控电话通话事件
- en: How to send SMS (text) messages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何发送短信（文本消息）
- en: Receiving SMS messages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收短信
- en: Displaying a web page in your application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用中显示网页
- en: Checking online status and connection type
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查在线状态和连接类型
- en: Getting started with Volley for Internet requests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Volley网络请求入门
- en: Canceling a Volley request
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消Volley请求
- en: Using Volley to request a JSON response
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Volley请求JSON响应
- en: Using Volley to request an image
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Volley请求图像
- en: Using Volley's NetworkImageView and ImageLoader
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Volley的NetworkImageView和ImageLoader
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: We'll start this chapter by looking at Telephony functionality with *How to
    make a phone call*. After exploring how to make a call, we'll look at how to monitor
    a phone call with *Monitoring phone call events*. We'll then move on to SMS messaging
    with *How to send SMS Messages*, and then we'll cover receiving SMS Messages with
    *Receiving SMS Messages.*
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过《*如何拨打电话*》一节开始本章，了解电话功能。探索了如何拨打电话之后，我们将通过《*监控电话通话事件*》了解如何监控电话通话。然后，我们将通过《*如何发送短信*》转到短信通讯，接着通过《*接收短信*》介绍接收短信。
- en: We'll then explore the `WebView` for adding browser functionality to your app.
    At its basic level, the `WebView` is a basic HTML viewer. We'll show how you can
    extend a `WebViewClient` class and modify the settings through `WebSettings` to
    create full browser functionality, including JavaScript and Zoom features.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索`WebView`以向应用添加浏览器功能。在基本层面上，`WebView`是一个基本的HTML查看器。我们将展示如何扩展`WebViewClient`类并通过`WebSettings`修改设置以创建完整的浏览器功能，包括JavaScript和缩放功能。
- en: The remaining chapter will cover Volley, a new library made available through
    AOSP. The *Getting started with Volley for Internet requests* introduction will
    give some background information on the online libraries available on Android
    and talk about why Volley was created. It also offers a complete walk-through
    of adding Volley to your Android Studio project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章剩余部分将介绍Volley，这是通过AOSP提供的一个新库。《*Volley网络请求入门*》一节将提供一些关于Android上可用的在线库的背景信息，并讨论为何创建Volley。它还提供了将Volley添加到你的Android
    Studio项目的完整演练。
- en: How to make a phone call
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何拨打电话
- en: 'As we''ve seen in previous recipes, we can call the default applications simply
    by using an Intent. To make a phone call, use `Intent.ACTION_DIAL` when creating
    an Intent. You can include a phone number with the `setData()` method. Here is
    sample code that will call up the Dialer app with the phone number specified:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在之前的食谱中所见，只需使用Intent即可调用默认应用。为了拨打电话，创建Intent时使用`Intent.ACTION_DIAL`。你可以使用`setData()`方法包含一个电话号码。以下是调用拨号应用并指定电话号码的示例代码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since your application is not doing the dialing and the user must press the
    **Dial** button, you do not need any dialing permissions in your app. The following
    recipe will show you how to place a call directly, bypassing the `Dial` activity.
    (For this, you will need to add a permission.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的应用不执行拨号操作，且用户必须按下**拨号**按钮，因此你的应用无需任何拨号权限。以下步骤将向你展示如何直接拨打电话，绕过`Dial`活动。（为此，你需要添加一个权限。）
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a new project in Android Studio and call it `DialPhone`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，将其命名为`DialPhone`。选择默认的**电话 & 平板**选项，并在提示**活动类型**时选择**空活动**。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we need to add the appropriate permission to make the call. Then, we
    need to add a button to call our `Dial` method. Start by opening the Android Manifest
    and follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加适当的权限来拨打电话。然后，我们需要添加一个按钮来调用我们的`Dial`方法。从打开Android Manifest开始，按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    button:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，用以下按钮替换现有的`TextView`：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add this method that will check whether your app has been granted the `CALL_PHONE`
    permission:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此方法，检查你的应用是否被授予了`CALL_PHONE`权限：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the code to dial the number:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加拨号的代码：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Before running this on your device, be sure to replace `0123456789` with a valid
    number.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的设备上运行此操作之前，请确保将`0123456789`替换为有效的电话号码。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As we saw from the code in the introduction, we don't need any permissions when
    calling the default Dialer application. But if we want to dial a number directly,
    we need to add the `CALL_PHONE` permission. Starting with Android 6.0 Marshmallow
    (API 23), permissions are no longer granted during installation, therefore, we
    check whether the application has permission before attempting to dial.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在引言中的代码所看到的，当调用默认拨号应用时，我们不需要任何权限。但如果我们想直接拨号，我们需要添加`CALL_PHONE`权限。从Android
    6.0 Marshmallow（API 23）开始，权限不再在安装时授予，因此，在尝试拨号之前，我们会检查应用是否拥有权限。
- en: See also
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information, refer to the *The new Runtime permission model* recipe
    in [Chapter 14](ch14.html "Chapter 14. Getting your app ready for the Play Store"),
    *Your App Ready for the Play Store*.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想获取更多信息，请参阅[第14章](ch14.html "第14章. 让应用准备好上架Play商店")中的*新的运行时权限模型*食谱，*准备应用上架Play商店*。
- en: Monitoring phone call events
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控电话呼叫事件
- en: In the previous recipe, we demonstrated how to make a phone call, both with
    an Intent to call the default application as well as by directly dialing the number
    with no UI.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个食谱中，我们演示了如何拨打电话，既通过意图调用默认应用程序，也可以直接拨号，无需UI。
- en: What if you want to be notified when the calls ends? This is where it gets a
    bit more complicated as you'll need to monitor the Telephony events and track
    the phone state. In this recipe, we'll demonstrate how to create a `PhoneStateListener`
    to read the phone state events.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在通话结束时得到通知，这就有点复杂了，因为你需要监听电话事件并跟踪电话状态。在本食谱中，我们将演示如何创建一个`PhoneStateListener`来读取电话状态事件。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a new project in Android Studio and call it `PhoneStateListener`. Use
    the default **Phone & Tablet** option and select **Empty Activity** when prompted
    for **Activity Type**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为`PhoneStateListener`。选择默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: Although it's not required, you can use the previous recipe to initiate a phone
    call to view the events. Otherwise, use the default dialer and/or watch the events
    from an incoming call. (The example code provided in the download files includes
    the previous recipe to make it easier to view the events.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这不是必须的，但你可以使用上一个食谱来发起电话呼叫以查看事件。否则，使用默认拨号盘和/或观察来电事件。（下载文件中提供的示例代码包括上一个食谱，以便更容易查看事件。）
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We only need a single `TextView` on the layout to display the event information.
    If you are continuing from the previous recipe or starting a new recipe, open
    the `activity_main.xml` file and follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在布局中添加一个`TextView`来显示事件信息。无论你是接着上一个食谱继续操作，还是开始一个新食谱，打开`activity_main.xml`文件，并按照以下步骤操作：
- en: 'Add or modify the `TextView` as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式添加或修改`TextView`：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following permission to the Android Manifest:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向Android Manifest中添加以下权限：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open `MainActivity.java` and add the following `PhoneStateListener` class to
    the `MainActivity` class:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`，并在`MainActivity`类中添加以下`PhoneStateListener`类：
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Modify `onCreate()` to set up the listener:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`onCreate()`以设置监听器：
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the application on a device and initiate and/or receive phone calls to view
    the events.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上运行应用程序，并发起和/或接收电话以查看事件。
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'To demonstrate using the listener, we create the Telephony listener in the
    `onCreate()` with these two lines of code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何使用监听器，我们在`onCreate()`中创建Telephony监听器，用这两行代码：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When a `PhoneState` event occurs, it is sent to our `PhoneStateListener` class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当`PhoneState`事件发生时，它会被发送到我们的`PhoneStateListener`类。
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this recipe, we are monitoring the Call State events, as indicated with
    this constant: `LISTEN_CALL_STATE`. The other interesting options include the
    following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们监听通话状态事件，用这个常量表示：`LISTEN_CALL_STATE`。其他有趣的选项包括以下内容：
- en: '`LISTEN_CALL_FORWARDING_INDICATOR`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LISTEN_CALL_FORWARDING_INDICATOR`'
- en: '`LISTEN_DATA_CONNECTION_STATE`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LISTEN_DATA_CONNECTION_STATE`'
- en: '`LISTEN_SIGNAL_STRENGTHS`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LISTEN_SIGNAL_STRENGTHS`'
- en: Take a look at the following `PhoneStateListener` link for a complete list.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下`PhoneStateListener`链接以获取完整列表。
- en: 'When we''re done listening for events, call the `listen()` method and pass
    `LISTEN_NONE`, as shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成事件监听时，调用`listen()`方法，并传递`LISTEN_NONE`，如下所示：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '**Developer Docs: PhoneStateListener** at [https://developer.android.com/reference/android/telephony/PhoneStateListener.html](https://developer.android.com/reference/android/telephony/PhoneStateListener.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：PhoneStateListener**在[https://developer.android.com/reference/android/telephony/PhoneStateListener.html](https://developer.android.com/reference/android/telephony/PhoneStateListener.html)'
- en: How to send SMS (text) messages
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何发送短信（文本消息）
- en: Since you're probably already familiar with SMS (or text) messages, we won't
    spend time explaining what they are or why they are important. (If you're not
    familiar with SMS or want more information, see the link provided in the *See
    also* section of this recipe.) This recipe will demonstrate how to send an SMS
    Message. (The next recipe will demonstrate how to receive notifications of new
    messages and how to read existing messages.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你可能已经熟悉短信（或文本消息），我们不会花时间解释它们是什么或为什么重要。（如果你不熟悉短信或想了解更多信息，请查看本示例中*另请参阅*部分提供的链接。）本示例将演示如何发送短信。（下一个示例将演示如何接收新消息的通知以及如何读取现有消息。）
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a new project in Android Studio and call it `SendSMS`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为`SendSMS`。选择默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we''ll add the necessary permissions for sending an SMS. Then, we''ll
    create a layout with a **Phone Number** and **Message** fields and a **Send**
    button. When the Send button is clicked on, we''ll create and send the SMS. Here
    are the steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加发送短信所需的权限。然后，我们将创建一个带有**Phone Number**和**Message**字段以及**Send**按钮的布局。点击发送按钮时，我们将创建并发送短信。以下是步骤：
- en: 'Open the Android Manifest and add the following permission:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android Manifest并添加以下权限：
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，用以下XML替换现有的`TextView`：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open `MainActivity.java` and add the following global variables:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并添加以下全局变量：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的`onCreate()`回调中添加以下代码：
- en: '[PRE14]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following method to check the permission:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以检查权限：
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Override `onRequestPermissionsResult()` to handle the permission request response:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onRequestPermissionsResult()`以处理权限请求响应：
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And finally, add the method to actually send the SMS:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加实际发送短信的方法：
- en: '[PRE17]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You're ready to run the application on a device or emulator. (Use the emulator
    device number, such as 5556, when sending to another emulator.)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在设备或模拟器上运行应用程序了。（向另一个模拟器发送时，使用模拟器设备号，如5556。）
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The code for sending an SMS is only two lines, as shown here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 发送短信的代码只有两行，如下所示：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `sendTextMessage()` method does the actual sending. Most of the code for
    this recipe is to set up the permissions since the permission model was changed
    in Android 6.0 Marshmallow (API 23).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendTextMessage()`方法负责实际发送操作。本示例的大部分代码是为了设置权限，因为从Android 6.0 Marshmallow（API
    23）开始权限模型发生了变化。'
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As simple as it is to send SMS messages, we still have a few more options.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管发送短信很简单，但我们仍然有更多的选项。
- en: Multipart messages
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多部分消息
- en: 'Though it can vary depending on the carrier, 160 is typically the maximum characters
    allowed per text message. You could modify the preceding code to check whether
    the message exceeds 160 characters and if so, you can call the SMSManager `divideMessage()`
    method. The method returns an `ArrayList`, which you can send to `sendMultipartTextMessage()`.
    Here''s an example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然根据运营商可能有所不同，但通常每条短信允许的最大字符数是160。你可以修改前面的代码，检查消息是否超过160个字符，如果是，可以调用SMSManager的`divideMessage()`方法。该方法返回一个`ArrayList`，你可以将其发送给`sendMultipartTextMessage()`。以下是示例代码：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that messages sent with `sendMultipartTextMessage()` may not work correctly
    when using an emulator, so be sure to test on a real device.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用模拟器时，通过`sendMultipartTextMessage()`发送的消息可能无法正常工作，因此请务必在真实设备上进行测试。
- en: Delivery status notification
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发送状态通知
- en: 'If you''d like to be notified of the status of the messages, there are two
    optional fields you can use. Here''s the `sendTextMessage()` method as defined
    in the **SMSManager** documentation:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望收到消息状态的通知，有两个可选字段可以使用。以下是**SMSManager**文档中定义的`sendTextMessage()`方法：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can include a pending Intent to be notified of the send status and/or delivery
    status. Upon receipt of your pending Intent, it will include a result code with
    either `Activity.RESULT_OK`, if it sent successfully, or an error code as defined
    in the **SMSManager** documentation (link mentioned in the following *See also*
    section):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以包含一个待定意图，以便在发送状态和/或投递状态时得到通知。收到你的待定意图后，它将包含一个结果代码，如果发送成功，则为 `Activity.RESULT_OK`，或者如
    **SMSManager** 文档（在以下*另请参阅*部分提到的链接）中定义的错误代码：
- en: '`RESULT_ERROR_GENERIC_FAILURE`: Generic failure cause'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_GENERIC_FAILURE`：一般失败原因'
- en: '`RESULT_ERROR_NO_SERVICE`: Failed because service is currently unavailable'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_NO_SERVICE`：由于服务当前不可用而失败'
- en: '`RESULT_ERROR_NULL_PDU`: Failed because no PDU was provided'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_NULL_PDU`：由于没有提供 PDU 而失败'
- en: '`RESULT_ERROR_RADIO_OFF`: Failed because radio was explicitly turned off'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_RADIO_OFF`：由于无线电被明确关闭而失败'
- en: See also
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Short Message Service on Wikipedia at [https://en.wikipedia.org/wiki/Short_Message_Service](https://en.wikipedia.org/wiki/Short_Message_Service)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的短信服务 [https://en.wikipedia.org/wiki/Short_Message_Service](https://en.wikipedia.org/wiki/Short_Message_Service)
- en: '**Developer Docs: SMSManager** at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：SMSManager** 在 [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
- en: Receiving SMS messages
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收短信消息
- en: This recipe will demonstrate how to set up a Broadcast Receiver to notify you
    of new SMS messages. It's useful to note that your app does not need to be running
    to receive the SMS Intent. Android will start your service to process the SMS.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将演示如何设置一个广播接收器，以便在接收到新短信时通知你。值得注意的是，你的应用无需运行即可接收短信意图。Android 会启动你的服务来处理短信。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `ReceiveSMS`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新项目，并将其命名为 `ReceiveSMS`。使用默认的 **Phone & Tablet** 选项，并在提示
    **Activity Type** 时选择 **Empty Activity**。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We won''t be using a layout in this demonstration as all the work will be in
    the Broadcast Receiver. We''ll use Toasts to display incoming SMS messages. Open
    the Android Manifest and follow these steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本演示中，我们将不使用布局，因为所有工作都将在广播接收器中进行。我们将使用 Toast 来显示传入的短信。打开 Android 清单文件并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE21]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following declaration for the broadcast receiver to the `<application>`
    element:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `<application>` 元素添加以下广播接收器的声明：
- en: '[PRE22]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open `MainActivity.java` and add the following method:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并添加以下方法：
- en: '[PRE23]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Modify the existing `onCreate()` callback to check the permission:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改现有的 `onCreate()` 回调以检查权限：
- en: '[PRE24]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add a new Java class to the project called `SMSBroadcastReceiver` using the
    following code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码向项目中添加一个名为 `SMSBroadcastReceiver` 的新 Java 类：
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Just like in the previous recipe on sending SMS messages, we first need to check
    whether the app has permission. (On pre-Android 6.0 devices, the manifest declaration
    will automatically provide the permission, but for Marshmallow and later, we'll
    need to prompt the user as we do here.)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在前一个关于发送短信的教程中一样，我们首先需要检查应用是否有权限。（在 Android 6.0 之前的设备上，清单声明将自动提供权限，但对于棉花糖及以后的版本，我们需要像这里一样提示用户。）
- en: 'As you can see, Broadcast receiver receives the notification of new SMS messages.
    We tell the system we want to receive the new SMS Received Broadcasts using this
    code in the Android Manifest:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，广播接收器接收新短信的通知。我们使用此代码在 Android 清单文件中告诉系统我们希望接收新的短信接收广播：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The notification comes in through the standard `onRecieve()` callback so we
    check the action using this code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通知通过标准的 `onRecieve()` 回调传入，因此我们使用此代码检查动作：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This is probably the most complicated line of code in this demonstration:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是本演示中最复杂的代码行：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Basically, it calls the `SmsMessage` library to create an SMSMessage object
    from the PDU. (The PDU, short for Protocol Data Unit, is the binary data format
    for SMS messages.) If you're not familiar with the PDU formation, you don't need
    to be. The `SmsMessage` library will take care of it for you and return an SMSMessage
    object.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，它调用 `SmsMessage` 库从PDU创建一个SMSMessage对象。（PDU，即协议数据单元，是短信的二进制数据格式。）如果你不熟悉PDU格式，你不需要了解。`SmsMessage`
    库会为你处理并返回一个SMSMessage对象。
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If your app is not receiving SMS broadcast messages, an existing application
    may be blocking your app. You can try increasing the priority value in `intent-filter`
    as shown here, or disabling/uninstalling the other app(s):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用没有收到短信广播消息，可能是其他应用阻止了你的应用。你可以尝试像这样增加 `intent-filter` 中的优先级值，或者禁用/卸载其他应用：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: There's more...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe demonstrates displaying SMS messages as they are received, but what
    about reading existing messages?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南演示了接收到短信时如何显示短信，但如何读取现有消息呢？
- en: Reading existing SMS messages
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读现有短信
- en: 'First, to read the existing messages, you''ll need the following permission:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要读取现有消息，你需要以下权限：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here''s an example of getting a cursor using the SMS content provider:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用短信内容提供者获取游标的示例：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'At the time of writing, the SMS content provider has over 30 columns. Here
    are the first 12, which are the most useful (remember, the column count starts
    at zero):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，短信内容提供者有超过30列。以下是前12列，最有用（记住，列计数从零开始）：
- en: 0\. `_id`
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 0\. `_id`
- en: 1\. `thread_id`
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. `thread_id`
- en: 2\. `address`
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. `address`
- en: 3\. `person`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. `person`
- en: 4\. `date`
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. `date`
- en: 5\. `protocol`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. `protocol`
- en: 6\. `read`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. `read`
- en: 7\. `status`
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. `status`
- en: 8\. `type`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. `type`
- en: 9\. `reply_path_present`
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. `reply_path_present`
- en: 10\. `subject`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. `subject`
- en: 11\. `body`
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. `body`
- en: Keep in mind, the content provider is not part of the public API and can change
    without notification.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，内容提供者不是公共API的一部分，可能会在未经通知的情况下更改。
- en: See also
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Developer Docs: SmsManager** at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：SmsManager** 在 [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
- en: '**PDU (Protocol Data Unit)** at [https://en.wikipedia.org/wiki/Protocol_data_unit](https://en.wikipedia.org/wiki/Protocol_data_unit)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PDU (协议数据单元)** 在 [https://en.wikipedia.org/wiki/Protocol_data_unit](https://en.wikipedia.org/wiki/Protocol_data_unit)'
- en: '**Developer Docs: Telephony.Sms.Intents** at [https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html](https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：Telephony.Sms.Intents** 在 [https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html](https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html)'
- en: Displaying a web page in your application
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用中显示网页
- en: 'When you want to display HTML content on a web page, you have two choices:
    call the default browser or display them within your app. If you just want to
    call the default browser, use an Intent as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要在网页上显示HTML内容时，你有两个选择：调用默认浏览器或在你的应用内显示。如果你只想调用默认浏览器，可以使用如下Intent：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you need to display the content within your own application, you can use
    the `WebView`. This recipe will show how to display a web page in your application,
    as can be seen in this screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在自己的应用内显示内容，可以使用 `WebView`。本指南将展示如何在你的应用中显示网页，如图所示：
- en: '![Displaying a web page in your application](img/B05057_12_1.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![在应用中显示网页](img/B05057_12_1.jpg)'
- en: Getting ready
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `WebView`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为 `WebView`。选择默认的**手机和平板**选项，并在提示**活动类型**时选择**空活动**。
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the `WebView` through code so we won''t be modifying
    the layout. We''ll start by opening the Android Manifest and following these steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过代码创建 `WebView`，因此不会修改布局。我们将从打开Android Manifest开始，并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE33]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Modify the existing `onCreate()` to include the following code:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改现有的 `onCreate()` 以包含以下代码：
- en: '[PRE34]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We create a `WebView` to use as our layout and load our webpage with `loadUrl()`.
    The preceding code works, but at this level, it is very basic and only displays
    the first page. If you click on any links, the default browser will handle the
    request.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 `WebView` 作为我们的布局，并使用 `loadUrl()` 加载我们的网页。前面的代码可以工作，但在这一级别上，它非常基础，仅显示第一页。如果你点击任何链接，默认浏览器将处理请求。
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'What if you want full web browsing functionality so any link they click on
    still loads in your `WebView`? Create a `WebViewClient` as shown in this code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望拥有完整的网页浏览功能，以便他们点击的任何链接仍在你的 `WebView` 中加载？按照此代码所示创建一个 `WebViewClient`：
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Controlling page navigation
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制页面导航
- en: 'If you want more control over the page navigation, such as only allowing links
    within your own website, you can create your own `WebViewClient` class and override
    the `shouldOverrideUrlLoading()` callback, as shown here:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更多控制页面导航，例如只允许在你自己的网站内链接，你可以创建自己的 `WebViewClient` 类并覆盖 `shouldOverrideUrlLoading()`
    回调，如下所示：
- en: '[PRE36]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to enable JavaScript
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何启用 JavaScript
- en: 'There are many other changes we can customize through `WebSettings` of `WebView`.
    If you want to enable JavaScript, get `WebSettings` of `WebView` and call `setJavaScriptEnabled()`,
    as shown:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 `WebView` 的 `WebSettings` 进行许多其他自定义设置。如果你想启用 JavaScript，获取 `WebView`
    的 `WebSettings` 并调用 `setJavaScriptEnabled()`，如下所示：
- en: '[PRE37]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Enable built-in zoom
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用内置缩放
- en: 'Another `webSetting` option is `setBuiltInZoomControls()`. Continuing from
    the preceding code, just add:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 `webSetting` 选项是 `setBuiltInZoomControls()`。从前面的代码继续，只需添加：
- en: '[PRE38]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Check the `webSetting` link in the next section for a large list of additional
    options.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中查看 `webSetting` 链接，以获取大量附加选项。
- en: See also
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Developer Docs: WebView** at [https://developer.android.com/reference/android/webkit/WebView.html](https://developer.android.com/reference/android/webkit/WebView.html)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：WebView** 在 [https://developer.android.com/reference/android/webkit/WebView.html](https://developer.android.com/reference/android/webkit/WebView.html)'
- en: '**Developer Docs: WebSettings** at [https://developer.android.com/reference/android/webkit/WebSettings.html](https://developer.android.com/reference/android/webkit/WebSettings.html)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：WebSettings** 在 [https://developer.android.com/reference/android/webkit/WebSettings.html](https://developer.android.com/reference/android/webkit/WebSettings.html)'
- en: '**Developer Docs: android.webkit** at [https://developer.android.com/reference/android/webkit/package-summary.html](https://developer.android.com/reference/android/webkit/package-summary.html)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：android.webkit** 在 [https://developer.android.com/reference/android/webkit/package-summary.html](https://developer.android.com/reference/android/webkit/package-summary.html)'
- en: Checking online status and connection type
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查在线状态和连接类型
- en: 'This is a simple recipe, but one that is very common and will probably be included
    in every Internet application you build: checking online status. While checking
    online status, we can also check the connection type: WIFI or MOBILE.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的食谱，但非常常见，可能会包含在你构建的每个互联网应用程序中：检查在线状态。在检查在线状态时，我们还可以检查连接类型：WIFI 或 MOBILE。
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a new project in Android Studio and call it `isOnline`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新项目，并将其命名为 `isOnline`。在选择 **Activity Type** 时，使用默认的 **Phone
    & Tablet** 选项，并选择 **Empty Activity**。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we need to add the necessary permissions to access the network. Then,
    we''ll create a simple layout with a `Button` and `TextView`. To get started,
    open the Android Manifest and follow these steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加必要的权限来访问网络。然后，我们将创建一个带有 `Button` 和 `TextView` 的简单布局。要开始，请打开 Android
    Manifest 文件，并按照以下步骤操作：
- en: 'Add the following permissions:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE39]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Open the `activity_main.xml` file and replace the existing `TextView` with
    the following views:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 文件，并用以下视图替换现有的 `TextView`：
- en: '[PRE40]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add this method to report if connected:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来报告连接状态：
- en: '[PRE41]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the following method to handle the button click:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来处理按钮点击：
- en: '[PRE42]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We created the `isOnline()` method to make it easy to reuse this code.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 `isOnline()` 方法，以方便重用此代码。
- en: 'To check the status, we get an instance of `ConnectivityManager` to read the
    `NetworkInfo` state. If it reports we are connected, we get the name of the active
    network by calling `getType()`, which returns one of the following constants:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查状态，我们获取 `ConnectivityManager` 的实例来读取 `NetworkInfo` 的状态。如果它报告我们已连接，我们可以通过调用
    `getType()` 来获取活动网络的名字，这将返回以下常量之一：
- en: '`TYPE_MOBILE`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_MOBILE`'
- en: '`TYPE_WIFI`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_WIFI`'
- en: '`TYPE_WIMAX`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_WIMAX`'
- en: '`TYPE_ETHERNET`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_ETHERNET`'
- en: '`TYPE_BLUETOOTH`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_BLUETOOTH`'
- en: Also, see the `ConnectivityManager` link later for additional constants. For
    display purposes, we call `getTypeName()`. We could call `getType()` to get a
    numeric constant instead.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请参阅后面的`ConnectivityManager`链接，了解其他常量。为了显示目的，我们调用`getTypeName()`。我们也可以调用`getType()`来获取数值常量。
- en: There's more...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's look at some additional constants of `ConnectivityManager`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`ConnectivityManager`的一些其他常量。
- en: Monitoring network state changes
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控网络状态变化
- en: 'If your application needs to respond to changes in the network status, take
    a look at the `CONNECTIVITY_ACTION` in `ConnectivityManager`. You need to create
    a broadcast receiver, and then register for the event. Here''s an example of how
    to include the action in the receiver''s intent filter through the Android Manifest:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用需要响应网络状态的变化，请查看`ConnectivityManager`中的`CONNECTIVITY_ACTION`。你需要创建一个广播接收器，然后注册该事件。以下是如何通过Android清单在接收器的意图过滤器中包含动作的示例：
- en: '[PRE43]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Be careful using the Android manifest as it will notify your app every time
    the network state changes, even if your app isn't being used. This can cause unnecessary
    drain on the battery. If your app only needs to respond to network changes while
    the user is actually using your app, create the listeners in the code instead.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Android清单时要小心，因为它会在每次网络状态变化时通知你的应用，即使你的应用没有被使用。这可能会导致不必要的电池消耗。如果你的应用只需要在用户实际使用你的应用时响应网络变化，请在代码中创建监听器。
- en: See also
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Developer Docs: ConnectivityManager** at [https://developer.android.com/reference/android/net/ConnectivityManager.html](https://developer.android.com/reference/android/net/ConnectivityManager.html)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：ConnectivityManager** 在 [https://developer.android.com/reference/android/net/ConnectivityManager.html](https://developer.android.com/reference/android/net/ConnectivityManager.html)'
- en: '**Developer Docs: NetworkInfo** at [https://developer.android.com/reference/android/net/NetworkInfo.html](https://developer.android.com/reference/android/net/NetworkInfo.html)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：NetworkInfo** 在 [https://developer.android.com/reference/android/net/NetworkInfo.html](https://developer.android.com/reference/android/net/NetworkInfo.html)'
- en: Getting started with Volley for Internet requests
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Volley进行网络请求
- en: Android includes multiple libraries for Internet queries, including the Apache
    `HttpClient` and `HttpURLConnection`. The Apache `HttpClient` was the recommended
    library before Android 2.3 Gingerbread (API 9). Android 2.3 Gingerbread (API 9)
    saw many improvements to the `HttpURLConnection` library and it became the recommended
    library, and still remains so today. With the release of Android 6.0, the Apache
    `HttpClient` has been removed completely from the SDK, leaving the `HttpURLConnection`
    library as the recommended replacement.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了多个用于互联网查询的库，包括Apache的`HttpClient`和`HttpURLConnection`。在Android 2.3
    Gingerbread（API 9）之前，Apache `HttpClient`是推荐的库。在Android 2.3 Gingerbread（API 9）中，对`HttpURLConnection`库进行了许多改进，使其成为了推荐的库，至今仍然如此。随着Android
    6.0的发布，Apache `HttpClient`已完全从SDK中移除，`HttpURLConnection`库成为了推荐的替代品。
- en: 'Though the `HttpURLConnection` library still works and has its uses, there
    are drawbacks: it''s not the easiest library to use if you are new to writing
    web requests and it requires a lot of repetitive overhead code. Fortunately, we
    have a new option from *Ficus Kirkpatrick*, a Google Developer from the Google
    Play group. He released a library called Volley, which provides a simplified wrapper.
    (It uses the `HttpURLConnection` library, by default, and can also be used with
    other libraries.)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`HttpURLConnection`库仍然可用并有其用途，但也有其缺点：如果你是初次编写网络请求，它不是最易于使用的库，并且需要编写很多重复的样板代码。幸运的是，来自Google
    Play团队的谷歌开发者*Ficus Kirkpatrick*提供了一个新选择。他发布了一个名为Volley的库，该库提供了一个简化的封装器。（默认使用`HttpURLConnection`库，也可以与其他库一起使用。）
- en: Note
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can see his Google I/O presentation here:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里观看他的Google I/O演讲：
- en: '[https://www.youtube.com/watch?v=yhv8l9F44qo](https://www.youtube.com/watch?v=yhv8l9F44qo)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[观看此视频](https://www.youtube.com/watch?v=yhv8l9F44qo)'
- en: 'Several reasons to use Volley over `HttpURLConnection` include the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Volley而不是`HttpURLConnection`的几个原因包括以下：
- en: Thread pool (defaults to four threads)
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程池（默认为四个线程）
- en: Transparent disk cache
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明磁盘缓存
- en: Queue priority settings
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 队列优先级设置
- en: There are additional benefits, but these three alone make it worth learning
    about Volley. A fourth benefit, which if you've ever used `HttpURLConnection`
    will become apparent, is the lack of boilerplate code. Instead of having to write
    a bunch of standard `try`/`catch` code around many of your calls, the library
    will handle the checks internally, allowing you to focus more on the specific
    task at hand.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他的好处，但这三点就足以让你想要了解Volley。第四个好处，如果你曾经使用过`HttpURLConnection`，就会很明显，那就是它减少了模板代码。你不需要围绕许多调用编写一堆标准的`try`/`catch`代码，库将在内部处理检查，让你更专注于手头的具体任务。
- en: 'Volley has built-in support for the following request types:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Volley内置支持以下请求类型：
- en: String
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: JSON
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: Image
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像
- en: Custom
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义
- en: While Volley excels at multiple small request calls (such as when scrolling
    through a `ListView`), it is not good at large file downloads as the returned
    objects are parsed in memory. For larger file downloads, take a look at the `DownloadManager`
    (see the link at the end of the recipe). Also, for the same reason, it's not a
    solution for streaming content; for that, refer to `HttpURLConnection`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Volley擅长处理多个小型请求调用（例如在`ListView`中滚动时），但不适合大文件下载，因为返回的对象是在内存中解析的。对于大文件下载，请查看`DownloadManager`（请参考食谱末尾的链接）。同样，由于这个原因，它也不适合流式内容；对于流式内容，请参考`HttpURLConnection`。
- en: Since Volley is currently not in the Android SDK, we need to download the code
    and add it to our project. This recipe will walk you through the steps of adding
    Volley to your application project and making a simple request.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Volley目前不在Android SDK中，我们需要下载代码并将其添加到我们的项目中。这个食谱将指导你完成将Volley添加到你的应用程序项目并发出一个简单请求的步骤。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Before creating your new project, download the Volley project files hosted
    on the **Android Open Source Project** (**AOSP**) website using the following
    Git command:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建你的新项目之前，使用以下Git命令从**Android Open Source Project**（**AOSP**）网站下载Volley项目文件：
- en: '[PRE44]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: If you are unfamiliar with Git, see the Git (software) link at the end of this
    recipe for additional information and help finding a Git client for your platform.
    Git is a **Version Control Software** (**VCS**) used on many platforms. (Once
    installed, you can also integrate Git VCS in Android Studio.)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉Git，请查看本食谱末尾的Git（软件）链接，获取更多信息以及帮助你找到适合你平台的Git客户端。Git是一种在许多平台上使用的**版本控制软件**（**VCS**）。(安装后，你还可以在Android
    Studio中集成Git VCS。)
- en: Create a new project in Android Studio and call it `SetupVolley`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，并将其命名为`SetupVolley`。使用默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: How to do it...
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Before starting these steps, make sure you''ve downloaded the Volley project
    as described previously. We''ll start the steps below by adding Volley to our
    project to make a simple Internet call. We''ll use a single button in our layout
    to initiate the request and a `TextView` to display the results. Here are the
    steps:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始以下步骤之前，请确保你已经按照先前的描述下载了Volley项目。下面我们将从将Volley添加到我们的项目开始，进行一个简单的互联网调用。我们将在布局中使用一个按钮来发起请求，并使用`TextView`来显示结果。以下是步骤：
- en: 'Open the Android Manifest and add the following permission:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android Manifest并添加以下权限：
- en: '[PRE45]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Import the `Volley` module by going to **File** | **New** | **Import Module**
    (see the following screenshot) and follow the wizard.![How to do it...](img/B05057_12_2.jpg)
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**File** | **New** | **Import Module**导入`Volley`模块（请参考以下截图），并按照向导操作。![如何操作...](img/B05057_12_2.jpg)
- en: On the second page of the **New Module** Import Wizard (see the following screenshot),
    you need to specify the location of the Volley files and assign the **Module name**.
    This is the name we'll need in the next step:![How to do it...](img/B05057_12_3.jpg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**New Module**导入向导的第二页（请参考以下截图），你需要指定Volley文件的位置并分配**Module name**。这是下一步我们需要用到的名称：![如何操作...](img/B05057_12_3.jpg)
- en: 'Under the `Gradle Scripts` section, open the `build.gradle (Module: app)` file.
    See the following screenshot:![How to do it...](img/B05057_12_4.jpg)'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`Gradle Scripts`部分，打开`build.gradle (Module: app)`文件。请参考以下截图：![如何操作...](img/B05057_12_4.jpg)'
- en: 'Add/verify the following statement in the `dependencies` section:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dependencies`部分添加/验证以下声明：
- en: '[PRE46]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The value in parenthesis needs to match the Module name you specified in the
    previous step.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 括号内的值需要与你上一步指定的模块名称相匹配。
- en: 'Under `Gradle Scripts`, open the `settings.gradle` file and verify the contents
    as follows:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Gradle Scripts`下，打开`settings.gradle`文件，并按以下内容验证：
- en: '[PRE47]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Open the `activity_main.xml` file and replace the existing `TextView` with
    the following `TextView` and `Button` elements:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件，用以下`TextView`和`Button`元素替换现有的`TextView`：
- en: '[PRE48]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the `sendRequest()` method called by the button click:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加由按钮点击调用的`sendRequest()`方法：
- en: '[PRE49]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经准备好在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: It's probably helpful to understand that in Volley, Internet transactions are
    called *requests*. To execute a request, add it to the queue. To make this happen,
    we first create an instance of a Volley `RequestQueue`, and then create a `StringRequest`
    and add it to the queue. A `StringRequest` is just what it sounds like; we are
    requesting a string response.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 了解在Volley中，网络事务被称为*请求*可能很有帮助。要执行请求，请将其添加到队列中。为此，我们首先创建一个Volley `RequestQueue`的实例，然后创建一个`StringRequest`并将其添加到队列中。`StringRequest`顾名思义；我们请求的是字符串响应。
- en: For this recipe, we just call the Packt Publishing website and get the page
    as a string response. Since this is just for illustration, we only display the
    first 500 characters.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们只需调用Packt Publishing网站，并将页面作为字符串响应获取。由于这只是为了说明，我们只显示前500个字符。
- en: There's more...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Now that you have Volley properly set up and making Internet requests, this
    recipe will be the building block for the Volley recipes that follow.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经正确设置了Volley并进行了网络请求，这个食谱将是后续Volley食谱的基础。
- en: See also
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Volley**: Git at Google at [https://android.googlesource.com/platform/frameworks/volley](https://android.googlesource.com/platform/frameworks/volley)'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Volley**: 在Google的Git存储库中位于[https://android.googlesource.com/platform/frameworks/volley](https://android.googlesource.com/platform/frameworks/volley)'
- en: '**Git** (software): Wikipedia, the free encyclopedia at [https://en.wikipedia.org/wiki/Git_(software)](https://en.wikipedia.org/wiki/Git_(software))'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**（软件）: 维基百科，自由的百科全书，位于[https://en.wikipedia.org/wiki/Git_(software)](https://en.wikipedia.org/wiki/Git_(software))'
- en: '**Developer Docs: DownloadManager** at [http://developer.android.com/reference/android/app/DownloadManager.html](http://developer.android.com/reference/android/app/DownloadManager.html)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：DownloadManager**位于[http://developer.android.com/reference/android/app/DownloadManager.html](http://developer.android.com/reference/android/app/DownloadManager.html)'
- en: '**Developer Docs: HttpURLConnection** at [https://developer.android.com/reference/java/net/HttpURLConnection.html](https://developer.android.com/reference/java/net/HttpURLConnection.html)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：HttpURLConnection**位于[https://developer.android.com/reference/java/net/HttpURLConnection.html](https://developer.android.com/reference/java/net/HttpURLConnection.html)'
- en: Canceling a Volley request
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消Volley请求
- en: In the previous recipe, we demonstrated how to add a request to the Volley queue.
    What happens if you no longer need the response? This could happen if the user
    is scrolling through a `ListView` and you're updating the `ListItems` by fetching
    information from the Web. It would be wasteful of bandwidth, power, and CPU cycles
    to allow the requests to complete knowing you are just going to discard the response.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个食谱中，我们演示了如何将请求添加到Volley队列中。如果您不再需要响应会怎样？这可能发生在用户通过`ListView`滚动时，您通过从网上获取信息来更新`ListItems`。如果允许请求完成，知道您将丢弃响应，这将是带宽、电力和CPU周期的浪费。
- en: If you were using the `HTTPURLConnection` library, you would need to track all
    requests and cancel them manually. This recipe will show you how easy it is to
    cancel the request in Volley.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前使用的是`HTTPURLConnection`库，您需要手动跟踪并取消所有请求。这个食谱将向您展示如何在Volley中轻松取消请求。
- en: Getting ready
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you have not already completed the previous recipe, *Getting started with
    Volley for Internet requests*, you will need to follow steps 1-5 to add the Volley
    module to your application.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有完成之前的食谱，即*开始使用Volley进行网络请求*，您需要按照步骤1-5将Volley模块添加到您的应用程序中。
- en: Create a new project in Android Studio and call it `CancelVolleyRequest`. Use
    the default **Phone & Tablet** option and select **Empty Activity** when prompted
    for **Activity Type**.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，并将其命名为`CancelVolleyRequest`。选择默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: How to do it...
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'If you have not already added the Volley module to your application, review
    the previous section. With Volley added to your project, follow these steps:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有将Volley模块添加到您的应用程序中，请回顾之前的章节。在您的项目中添加了Volley之后，请按照以下步骤操作：
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，用以下XML替换现有的`TextView`：
- en: '[PRE50]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Open `MainActivity.java` and add the following global variable:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并添加以下全局变量：
- en: '[PRE51]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Edit the existing `onCreate()` to initialize the `RequestQueue`:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑现有的`onCreate()`以初始化`RequestQueue`：
- en: '[PRE52]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the following `sendRequest()` method (note that this is similar to the
    `sendRequest()` method from the previous recipe with several changes):'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`sendRequest()`方法（注意，这与前一个食谱中的`sendRequest()`方法相似，但有几个变化）：
- en: '[PRE53]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add the **Close** button''s `onClick` method:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加**关闭**按钮的`onClick`方法：
- en: '[PRE54]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create the following override for the `onStop()` callback:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`onStop()`回调创建以下覆盖方法：
- en: '[PRE55]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To cancel the requests, we can call the `RequestQueue` `cancelAll()` method
    and pass in our tag. In this example, we used the activity, `this`, as our tag,
    but we could use any object as our tag. This allows you to create whatever grouping
    you might need for your requests.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消请求，我们可以调用`RequestQueue`的`cancelAll()`方法，并传入我们的标签。在这个例子中，我们使用活动`this`作为我们的标签，但我们可以使用任何对象作为标签。这允许你为请求创建所需的任何分组。
- en: There's more...
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We're not just demonstrating how easy it is to cancel requests, we're also demonstrating
    a defensive programming tactic. By ensuring all our requests are canceled, we
    won't have to add code to check for a null activity in our responses, since Volley
    guarantees that we will not receive *any* responses from a request after it has
    been canceled.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅仅是在展示如何轻松取消请求，同时也在演示一种防御性编程策略。通过确保取消所有请求，我们无需在响应中添加检查null活动的代码，因为Volley保证在请求被取消后，我们将不会收到*任何*响应。
- en: Using Volley to request a JSON response
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Volley请求JSON响应。
- en: Since JavaScript Object Notation (JSON) is probably the most common data-interchange
    format, you'll likely find yourself needing to call a JSON web service. (If you
    are unfamiliar with JSON, review the link at the end of this recipe.) This recipe
    will demonstrate how to make a JSON Request using Volley.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript Object Notation（JSON）可能是最常见的数据交换格式，你可能需要调用一个JSON网络服务。（如果你不熟悉JSON，请查看本食谱末尾的链接。）本食谱将演示如何使用Volley进行JSON请求。
- en: Getting ready
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作。
- en: Create a new project in Android Studio and call it `JSONRequest`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，名为`JSONRequest`。选择默认的**Phone & Tablet**选项，并在提示**Activity
    Type**时选择**Empty Activity**。
- en: This recipe will be using the Volley setup as described in *Getting started
    with Volley for Internet requests*. Follow steps 1-5 to add Volley to your new
    project.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将使用如*Volley入门进行网络请求*中所述的Volley设置。按照步骤1-5将Volley添加到你的新项目中。
- en: How to do it...
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With Volley added to your project as described previously, follow these steps:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前面的描述将Volley添加到你的项目中，然后执行以下步骤：
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，用以下XML替换现有的`TextView`：
- en: '[PRE56]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add the following `sendRequest()` method:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`sendRequest()`方法：
- en: '[PRE57]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Replace the `url` string in the code before you run this application.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行此应用程序之前，请替换代码中的`url`字符串。
- en: How it works...
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Requesting a JSON response using `JsonObjectRequest()` basically works the same
    as the `StringRequest()`. The difference is the response, which is returned as
    a `JSONObject`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`JsonObjectRequest()`请求JSON响应基本上与`StringRequest()`相同。不同之处在于响应，它返回一个`JSONObject`。
- en: To run this code, you will need to replace the `url` parameter with your web
    service URL. If you don't have a web service to test against, you can try a link
    from the JSON Test website ([http://www.jsontest.com/](http://www.jsontest.com/)).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此代码，你需要将`url`参数替换为你的网络服务URL。如果你没有可测试的网络服务，你可以尝试来自JSON Test网站([http://www.jsontest.com/](http://www.jsontest.com/))的链接。
- en: There's more...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the preceding example, we requested a `JSONObject` with `JsonObjectRequest`.
    We can also request a `JSONARray` with `JsonArrayRequest`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`JsonObjectRequest`请求了`JSONObject`。我们还可以使用`JsonArrayRequest`请求`JSONARray`。
- en: See also
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅。
- en: Visit the JSON web page at [http://json.org/](http://json.org/)
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问[http://json.org/](http://json.org/)的JSON网页。
- en: '**Developer Docs: org.json (JSON Libraries)** at [http://developer.android.com/reference/org/json/package-summary.html](http://developer.android.com/reference/org/json/package-summary.html)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看[开发者文档：org.json（JSON库）](http://developer.android.com/reference/org/json/package-summary.html)。
- en: Using Volley to request an image
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Volley请求图像。
- en: Once you make your JSON Requests as demonstrated in the previous recipe, the
    next most likely call you'll be making is to get an image. This recipe will demonstrate
    how to request an image to update an `ImageView`.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你按照前一个菜谱中的演示进行了 JSON 请求，接下来最可能进行的调用就是获取一个图片。本示例将演示如何请求一个图片来更新一个 `ImageView`。
- en: Getting ready
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `ImageRequest`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新项目，并将其命名为 `ImageRequest`。使用默认的 **手机 & 平板** 选项，并在提示选择
    **活动类型** 时选择 **空活动**。
- en: This recipe will be using the setup described in the *Getting started with Volley
    for Internet requests* recipe. Follow steps 1-5 to add Volley to your new project.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将使用在 *Volley 网络请求入门* 示例中描述的设置。按照步骤 1-5 在你的新项目中添加 Volley。
- en: How to do it...
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With Volley added to your project, as described previously, follow these steps:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前的描述将 Volley 添加到你的项目中，然后遵循以下步骤：
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并用以下 XML 替换现有的 `TextView`：
- en: '[PRE58]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add the following `sendRequest()` method:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `sendRequest()` 方法：
- en: '[PRE59]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Run the application on a device or emulator.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe, basically, works in the same way as the previous two Volley requests.
    In this recipe, we pass a URL to an image and load the `ImageView` in the response.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例基本上与前两个 Volley 请求的方式相同。在这个示例中，我们传递一个图片的 URL 并在响应中加载 `ImageView`。
- en: 'We''ve now covered the three basic request types: String, JSON, and Image.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经涵盖了三种基本请求类型：String，JSON 和 Image。
- en: There's more...
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Though the basic types will probably cover most of your needs, Volley is extensible
    and you can also implement a custom response by extending `Request<T>`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管基本类型可能覆盖了你的大部分需求，但 Volley 是可扩展的，你也可以通过扩展 `Request<T>` 来实现自定义响应。
- en: This recipe demonstrates a problem with our example code. If you change the
    orientation of the device, you'll see the image flicker as the activity is recreated.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例演示了我们的示例代码中存在的问题。如果你改变设备的方向，你会看到活动重新创建时图像闪烁。
- en: Creating a Volley singleton
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个 Volley 单例
- en: It's recommended to instantiate Volley as a singleton. (An alternative approach
    would be to create the queue in the application class.) To create a singleton
    class in Android Studio, go to **New** | **File** | **Singleton** and give it
    a class name, such as `VolleySingleton`.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将 Volley 实例化为单例。（另一种方法是在应用类中创建队列。）要在 Android Studio 中创建单例类，请转到 **新建** | **文件**
    | **单例** 并为其提供一个类名，例如 `VolleySingleton`。
- en: 'Move the code to create the request queue to the singleton class. If you create
    a method as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建请求队列的代码移动到单例类中。如果你按照如下方式创建一个方法：
- en: '[PRE60]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then, you can add to your queue from anywhere using the following code:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用以下代码从任何地方向你的队列中添加请求：
- en: '[PRE61]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The key to making this work properly is to always use the Application Context
    (not an Activity or Broadcast Receiver Context) by calling `getApplicationContext()`
    on the context passed in.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 正确实现这一点的关键在于始终通过在传入的上下文中调用 `getApplicationContext()` 来使用应用上下文（而不是活动或广播接收器的上下文）。
- en: See also
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Developer Docs: Application (class)** at [https://developer.android.com/reference/android/app/Application.html](https://developer.android.com/reference/android/app/Application.html)'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：应用（类）** 在 [https://developer.android.com/reference/android/app/Application.html](https://developer.android.com/reference/android/app/Application.html)'
- en: Using Volley's NetworkImageView and ImageLoader
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Volley 的 NetworkImageView 和 ImageLoader
- en: Our last recipe on Volley will not be a request per se, but a replacement for
    the `ImageView`. Requesting an image to populate an `ImageView` is such a common
    task; Volley combines the functionality to a new view called `NetworkImageView`.
    This recipe will demonstrate how to use a `NetworkImageView`.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 我们关于 Volley 的最后一个菜谱不是一个请求本身，而是对 `ImageView` 的替换。请求图片来填充 `ImageView` 是如此常见的任务；Volley
    将这一功能组合到一个名为 `NetworkImageView` 的新视图中。本示例将演示如何使用 `NetworkImageView`。
- en: Getting ready
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `NetworkImageView`. Use the
    default **Phone & Tablet** option and select **Empty Activity** when prompted
    for **Activity Type**.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新项目，并将其命名为 `NetworkImageView`。使用默认的 **手机 & 平板** 选项，并在提示选择
    **活动类型** 时选择 **空活动**。
- en: This recipe will be using the setup described in the *Getting started with Volley
    for Internet requests* recipe. Follow Steps 1-5 to add Volley to your new project.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将使用在 *Volley 网络请求入门* 示例中描述的设置。按照步骤 1-5 在你的新项目中添加 Volley。
- en: How to do it...
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With Volley added to your project as described previously, follow these steps:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前描述的方式将 Volley 添加到你的项目中，然后执行以下步骤：
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 文件，将现有的 `TextView` 替换为以下 XML 代码：
- en: '[PRE62]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `onCreate()` 回调中：
- en: '[PRE63]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This example is very different from the previous Volley examples. Instead of
    creating a request object, we create an `ImageLoader`. The `ImageLoader` class
    allows us to override the default caching behavior, such as the number of bitmaps
    or how the size is calculated. (We could change the cache to be based on total
    memory instead of image count.) See the `LruCache` link later for more information.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例与之前的 Volley 示例非常不同。我们没有创建请求对象，而是创建了一个 `ImageLoader`。`ImageLoader` 类允许我们覆盖默认的缓存行为，比如位图的数量或大小计算方式（我们可以将缓存改为基于总内存而不是图片数量）。有关更多信息，请参阅后面的
    `LruCache` 链接。
- en: With the `ImageLoader` created, you can assign the image URL to the `NetworkImageView`
    and pass the `ImageLoader` as the second parameter.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了 `ImageLoader` 之后，你可以将图片 URL 分配给 `NetworkImageView`，并将 `ImageLoader` 作为第二个参数传递。
- en: There's more...
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As we mentioned in the previous recipe, the problem with our Volley example
    is that we create the queue in the activity. This is most noticeable with images,
    but regardless, it's recommended to create a Volley singleton. See the *Create
    a Volley singleton* section in the previous recipe for more information.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在上一个食谱中提到的，我们 Volley 示例的问题在于我们在活动中创建了队列。这在处理图片时最为明显，但不管怎样，建议创建一个 Volley 单例。有关更多信息，请参阅上一个食谱中的
    *创建 Volley 单例* 部分。
- en: 'If you create a singleton as described in the previous recipe, you can also
    move the `ImageLoader` code to the singleton and expose the `ImageLoader` like
    this:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照前一个食谱创建了一个单例，你还可以将 `ImageLoader` 代码移动到单例中，并像这样公开 `ImageLoader`：
- en: '[PRE64]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'With the singleton created, this recipe could be coded as follows:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了单例后，这个食谱可以按照以下方式编写代码：
- en: '[PRE65]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: See also
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Developer Docs: LruCache** at [https://developer.android.com/reference/android/util/LruCache.html](https://developer.android.com/reference/android/util/LruCache.html)'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：LruCache** 在 [https://developer.android.com/reference/android/util/LruCache.html](https://developer.android.com/reference/android/util/LruCache.html)'
