- en: Chapter 12. Telephony, Networks, and the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to make a phone call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring phone call events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send SMS (text) messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving SMS messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a web page in your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking online status and connection type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Volley for Internet requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canceling a Volley request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Volley to request a JSON response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Volley to request an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Volley's NetworkImageView and ImageLoader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll start this chapter by looking at Telephony functionality with *How to
    make a phone call*. After exploring how to make a call, we'll look at how to monitor
    a phone call with *Monitoring phone call events*. We'll then move on to SMS messaging
    with *How to send SMS Messages*, and then we'll cover receiving SMS Messages with
    *Receiving SMS Messages.*
  prefs: []
  type: TYPE_NORMAL
- en: We'll then explore the `WebView` for adding browser functionality to your app.
    At its basic level, the `WebView` is a basic HTML viewer. We'll show how you can
    extend a `WebViewClient` class and modify the settings through `WebSettings` to
    create full browser functionality, including JavaScript and Zoom features.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining chapter will cover Volley, a new library made available through
    AOSP. The *Getting started with Volley for Internet requests* introduction will
    give some background information on the online libraries available on Android
    and talk about why Volley was created. It also offers a complete walk-through
    of adding Volley to your Android Studio project.
  prefs: []
  type: TYPE_NORMAL
- en: How to make a phone call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve seen in previous recipes, we can call the default applications simply
    by using an Intent. To make a phone call, use `Intent.ACTION_DIAL` when creating
    an Intent. You can include a phone number with the `setData()` method. Here is
    sample code that will call up the Dialer app with the phone number specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Since your application is not doing the dialing and the user must press the
    **Dial** button, you do not need any dialing permissions in your app. The following
    recipe will show you how to place a call directly, bypassing the `Dial` activity.
    (For this, you will need to add a permission.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `DialPhone`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to add the appropriate permission to make the call. Then, we
    need to add a button to call our `Dial` method. Start by opening the Android Manifest
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this method that will check whether your app has been granted the `CALL_PHONE`
    permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the code to dial the number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before running this on your device, be sure to replace `0123456789` with a valid
    number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw from the code in the introduction, we don't need any permissions when
    calling the default Dialer application. But if we want to dial a number directly,
    we need to add the `CALL_PHONE` permission. Starting with Android 6.0 Marshmallow
    (API 23), permissions are no longer granted during installation, therefore, we
    check whether the application has permission before attempting to dial.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information, refer to the *The new Runtime permission model* recipe
    in [Chapter 14](ch14.html "Chapter 14. Getting your app ready for the Play Store"),
    *Your App Ready for the Play Store*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring phone call events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we demonstrated how to make a phone call, both with
    an Intent to call the default application as well as by directly dialing the number
    with no UI.
  prefs: []
  type: TYPE_NORMAL
- en: What if you want to be notified when the calls ends? This is where it gets a
    bit more complicated as you'll need to monitor the Telephony events and track
    the phone state. In this recipe, we'll demonstrate how to create a `PhoneStateListener`
    to read the phone state events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `PhoneStateListener`. Use
    the default **Phone & Tablet** option and select **Empty Activity** when prompted
    for **Activity Type**.
  prefs: []
  type: TYPE_NORMAL
- en: Although it's not required, you can use the previous recipe to initiate a phone
    call to view the events. Otherwise, use the default dialer and/or watch the events
    from an incoming call. (The example code provided in the download files includes
    the previous recipe to make it easier to view the events.)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We only need a single `TextView` on the layout to display the event information.
    If you are continuing from the previous recipe or starting a new recipe, open
    the `activity_main.xml` file and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add or modify the `TextView` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following permission to the Android Manifest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following `PhoneStateListener` class to
    the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `onCreate()` to set up the listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application on a device and initiate and/or receive phone calls to view
    the events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To demonstrate using the listener, we create the Telephony listener in the
    `onCreate()` with these two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When a `PhoneState` event occurs, it is sent to our `PhoneStateListener` class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we are monitoring the Call State events, as indicated with
    this constant: `LISTEN_CALL_STATE`. The other interesting options include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LISTEN_CALL_FORWARDING_INDICATOR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LISTEN_DATA_CONNECTION_STATE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LISTEN_SIGNAL_STRENGTHS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at the following `PhoneStateListener` link for a complete list.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we''re done listening for events, call the `listen()` method and pass
    `LISTEN_NONE`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: PhoneStateListener** at [https://developer.android.com/reference/android/telephony/PhoneStateListener.html](https://developer.android.com/reference/android/telephony/PhoneStateListener.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send SMS (text) messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you're probably already familiar with SMS (or text) messages, we won't
    spend time explaining what they are or why they are important. (If you're not
    familiar with SMS or want more information, see the link provided in the *See
    also* section of this recipe.) This recipe will demonstrate how to send an SMS
    Message. (The next recipe will demonstrate how to receive notifications of new
    messages and how to read existing messages.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `SendSMS`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll add the necessary permissions for sending an SMS. Then, we''ll
    create a layout with a **Phone Number** and **Message** fields and a **Send**
    button. When the Send button is clicked on, we''ll create and send the SMS. Here
    are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Android Manifest and add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to check the permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override `onRequestPermissionsResult()` to handle the permission request response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, add the method to actually send the SMS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator. (Use the emulator
    device number, such as 5556, when sending to another emulator.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code for sending an SMS is only two lines, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `sendTextMessage()` method does the actual sending. Most of the code for
    this recipe is to set up the permissions since the permission model was changed
    in Android 6.0 Marshmallow (API 23).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As simple as it is to send SMS messages, we still have a few more options.
  prefs: []
  type: TYPE_NORMAL
- en: Multipart messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Though it can vary depending on the carrier, 160 is typically the maximum characters
    allowed per text message. You could modify the preceding code to check whether
    the message exceeds 160 characters and if so, you can call the SMSManager `divideMessage()`
    method. The method returns an `ArrayList`, which you can send to `sendMultipartTextMessage()`.
    Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that messages sent with `sendMultipartTextMessage()` may not work correctly
    when using an emulator, so be sure to test on a real device.
  prefs: []
  type: TYPE_NORMAL
- en: Delivery status notification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''d like to be notified of the status of the messages, there are two
    optional fields you can use. Here''s the `sendTextMessage()` method as defined
    in the **SMSManager** documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can include a pending Intent to be notified of the send status and/or delivery
    status. Upon receipt of your pending Intent, it will include a result code with
    either `Activity.RESULT_OK`, if it sent successfully, or an error code as defined
    in the **SMSManager** documentation (link mentioned in the following *See also*
    section):'
  prefs: []
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_GENERIC_FAILURE`: Generic failure cause'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_NO_SERVICE`: Failed because service is currently unavailable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_NULL_PDU`: Failed because no PDU was provided'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_RADIO_OFF`: Failed because radio was explicitly turned off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Short Message Service on Wikipedia at [https://en.wikipedia.org/wiki/Short_Message_Service](https://en.wikipedia.org/wiki/Short_Message_Service)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: SMSManager** at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving SMS messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up a Broadcast Receiver to notify you
    of new SMS messages. It's useful to note that your app does not need to be running
    to receive the SMS Intent. Android will start your service to process the SMS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `ReceiveSMS`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We won''t be using a layout in this demonstration as all the work will be in
    the Broadcast Receiver. We''ll use Toasts to display incoming SMS messages. Open
    the Android Manifest and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following declaration for the broadcast receiver to the `<application>`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the existing `onCreate()` callback to check the permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new Java class to the project called `SMSBroadcastReceiver` using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like in the previous recipe on sending SMS messages, we first need to check
    whether the app has permission. (On pre-Android 6.0 devices, the manifest declaration
    will automatically provide the permission, but for Marshmallow and later, we'll
    need to prompt the user as we do here.)
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, Broadcast receiver receives the notification of new SMS messages.
    We tell the system we want to receive the new SMS Received Broadcasts using this
    code in the Android Manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The notification comes in through the standard `onRecieve()` callback so we
    check the action using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is probably the most complicated line of code in this demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Basically, it calls the `SmsMessage` library to create an SMSMessage object
    from the PDU. (The PDU, short for Protocol Data Unit, is the binary data format
    for SMS messages.) If you're not familiar with the PDU formation, you don't need
    to be. The `SmsMessage` library will take care of it for you and return an SMSMessage
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If your app is not receiving SMS broadcast messages, an existing application
    may be blocking your app. You can try increasing the priority value in `intent-filter`
    as shown here, or disabling/uninstalling the other app(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe demonstrates displaying SMS messages as they are received, but what
    about reading existing messages?
  prefs: []
  type: TYPE_NORMAL
- en: Reading existing SMS messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, to read the existing messages, you''ll need the following permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of getting a cursor using the SMS content provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'At the time of writing, the SMS content provider has over 30 columns. Here
    are the first 12, which are the most useful (remember, the column count starts
    at zero):'
  prefs: []
  type: TYPE_NORMAL
- en: 0\. `_id`
  prefs: []
  type: TYPE_NORMAL
- en: 1\. `thread_id`
  prefs: []
  type: TYPE_NORMAL
- en: 2\. `address`
  prefs: []
  type: TYPE_NORMAL
- en: 3\. `person`
  prefs: []
  type: TYPE_NORMAL
- en: 4\. `date`
  prefs: []
  type: TYPE_NORMAL
- en: 5\. `protocol`
  prefs: []
  type: TYPE_NORMAL
- en: 6\. `read`
  prefs: []
  type: TYPE_NORMAL
- en: 7\. `status`
  prefs: []
  type: TYPE_NORMAL
- en: 8\. `type`
  prefs: []
  type: TYPE_NORMAL
- en: 9\. `reply_path_present`
  prefs: []
  type: TYPE_NORMAL
- en: 10\. `subject`
  prefs: []
  type: TYPE_NORMAL
- en: 11\. `body`
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind, the content provider is not part of the public API and can change
    without notification.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: SmsManager** at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PDU (Protocol Data Unit)** at [https://en.wikipedia.org/wiki/Protocol_data_unit](https://en.wikipedia.org/wiki/Protocol_data_unit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: Telephony.Sms.Intents** at [https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html](https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a web page in your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you want to display HTML content on a web page, you have two choices:
    call the default browser or display them within your app. If you just want to
    call the default browser, use an Intent as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to display the content within your own application, you can use
    the `WebView`. This recipe will show how to display a web page in your application,
    as can be seen in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a web page in your application](img/B05057_12_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `WebView`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the `WebView` through code so we won''t be modifying
    the layout. We''ll start by opening the Android Manifest and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the existing `onCreate()` to include the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We create a `WebView` to use as our layout and load our webpage with `loadUrl()`.
    The preceding code works, but at this level, it is very basic and only displays
    the first page. If you click on any links, the default browser will handle the
    request.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if you want full web browsing functionality so any link they click on
    still loads in your `WebView`? Create a `WebViewClient` as shown in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Controlling page navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want more control over the page navigation, such as only allowing links
    within your own website, you can create your own `WebViewClient` class and override
    the `shouldOverrideUrlLoading()` callback, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How to enable JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many other changes we can customize through `WebSettings` of `WebView`.
    If you want to enable JavaScript, get `WebSettings` of `WebView` and call `setJavaScriptEnabled()`,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Enable built-in zoom
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another `webSetting` option is `setBuiltInZoomControls()`. Continuing from
    the preceding code, just add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Check the `webSetting` link in the next section for a large list of additional
    options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: WebView** at [https://developer.android.com/reference/android/webkit/WebView.html](https://developer.android.com/reference/android/webkit/WebView.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: WebSettings** at [https://developer.android.com/reference/android/webkit/WebSettings.html](https://developer.android.com/reference/android/webkit/WebSettings.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: android.webkit** at [https://developer.android.com/reference/android/webkit/package-summary.html](https://developer.android.com/reference/android/webkit/package-summary.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking online status and connection type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a simple recipe, but one that is very common and will probably be included
    in every Internet application you build: checking online status. While checking
    online status, we can also check the connection type: WIFI or MOBILE.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `isOnline`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to add the necessary permissions to access the network. Then,
    we''ll create a simple layout with a `Button` and `TextView`. To get started,
    open the Android Manifest and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `activity_main.xml` file and replace the existing `TextView` with
    the following views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this method to report if connected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created the `isOnline()` method to make it easy to reuse this code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the status, we get an instance of `ConnectivityManager` to read the
    `NetworkInfo` state. If it reports we are connected, we get the name of the active
    network by calling `getType()`, which returns one of the following constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TYPE_MOBILE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_WIFI`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_WIMAX`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_ETHERNET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_BLUETOOTH`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, see the `ConnectivityManager` link later for additional constants. For
    display purposes, we call `getTypeName()`. We could call `getType()` to get a
    numeric constant instead.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at some additional constants of `ConnectivityManager`.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring network state changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If your application needs to respond to changes in the network status, take
    a look at the `CONNECTIVITY_ACTION` in `ConnectivityManager`. You need to create
    a broadcast receiver, and then register for the event. Here''s an example of how
    to include the action in the receiver''s intent filter through the Android Manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Be careful using the Android manifest as it will notify your app every time
    the network state changes, even if your app isn't being used. This can cause unnecessary
    drain on the battery. If your app only needs to respond to network changes while
    the user is actually using your app, create the listeners in the code instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: ConnectivityManager** at [https://developer.android.com/reference/android/net/ConnectivityManager.html](https://developer.android.com/reference/android/net/ConnectivityManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: NetworkInfo** at [https://developer.android.com/reference/android/net/NetworkInfo.html](https://developer.android.com/reference/android/net/NetworkInfo.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Volley for Internet requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android includes multiple libraries for Internet queries, including the Apache
    `HttpClient` and `HttpURLConnection`. The Apache `HttpClient` was the recommended
    library before Android 2.3 Gingerbread (API 9). Android 2.3 Gingerbread (API 9)
    saw many improvements to the `HttpURLConnection` library and it became the recommended
    library, and still remains so today. With the release of Android 6.0, the Apache
    `HttpClient` has been removed completely from the SDK, leaving the `HttpURLConnection`
    library as the recommended replacement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though the `HttpURLConnection` library still works and has its uses, there
    are drawbacks: it''s not the easiest library to use if you are new to writing
    web requests and it requires a lot of repetitive overhead code. Fortunately, we
    have a new option from *Ficus Kirkpatrick*, a Google Developer from the Google
    Play group. He released a library called Volley, which provides a simplified wrapper.
    (It uses the `HttpURLConnection` library, by default, and can also be used with
    other libraries.)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can see his Google I/O presentation here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=yhv8l9F44qo](https://www.youtube.com/watch?v=yhv8l9F44qo)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Several reasons to use Volley over `HttpURLConnection` include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Thread pool (defaults to four threads)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparent disk cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queue priority settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are additional benefits, but these three alone make it worth learning
    about Volley. A fourth benefit, which if you've ever used `HttpURLConnection`
    will become apparent, is the lack of boilerplate code. Instead of having to write
    a bunch of standard `try`/`catch` code around many of your calls, the library
    will handle the checks internally, allowing you to focus more on the specific
    task at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Volley has built-in support for the following request types:'
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While Volley excels at multiple small request calls (such as when scrolling
    through a `ListView`), it is not good at large file downloads as the returned
    objects are parsed in memory. For larger file downloads, take a look at the `DownloadManager`
    (see the link at the end of the recipe). Also, for the same reason, it's not a
    solution for streaming content; for that, refer to `HttpURLConnection`.
  prefs: []
  type: TYPE_NORMAL
- en: Since Volley is currently not in the Android SDK, we need to download the code
    and add it to our project. This recipe will walk you through the steps of adding
    Volley to your application project and making a simple request.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before creating your new project, download the Volley project files hosted
    on the **Android Open Source Project** (**AOSP**) website using the following
    Git command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you are unfamiliar with Git, see the Git (software) link at the end of this
    recipe for additional information and help finding a Git client for your platform.
    Git is a **Version Control Software** (**VCS**) used on many platforms. (Once
    installed, you can also integrate Git VCS in Android Studio.)
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `SetupVolley`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting these steps, make sure you''ve downloaded the Volley project
    as described previously. We''ll start the steps below by adding Volley to our
    project to make a simple Internet call. We''ll use a single button in our layout
    to initiate the request and a `TextView` to display the results. Here are the
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Android Manifest and add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Import the `Volley` module by going to **File** | **New** | **Import Module**
    (see the following screenshot) and follow the wizard.![How to do it...](img/B05057_12_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the second page of the **New Module** Import Wizard (see the following screenshot),
    you need to specify the location of the Volley files and assign the **Module name**.
    This is the name we'll need in the next step:![How to do it...](img/B05057_12_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the `Gradle Scripts` section, open the `build.gradle (Module: app)` file.
    See the following screenshot:![How to do it...](img/B05057_12_4.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add/verify the following statement in the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The value in parenthesis needs to match the Module name you specified in the
    previous step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under `Gradle Scripts`, open the `settings.gradle` file and verify the contents
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `activity_main.xml` file and replace the existing `TextView` with
    the following `TextView` and `Button` elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `sendRequest()` method called by the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's probably helpful to understand that in Volley, Internet transactions are
    called *requests*. To execute a request, add it to the queue. To make this happen,
    we first create an instance of a Volley `RequestQueue`, and then create a `StringRequest`
    and add it to the queue. A `StringRequest` is just what it sounds like; we are
    requesting a string response.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we just call the Packt Publishing website and get the page
    as a string response. Since this is just for illustration, we only display the
    first 500 characters.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have Volley properly set up and making Internet requests, this
    recipe will be the building block for the Volley recipes that follow.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Volley**: Git at Google at [https://android.googlesource.com/platform/frameworks/volley](https://android.googlesource.com/platform/frameworks/volley)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git** (software): Wikipedia, the free encyclopedia at [https://en.wikipedia.org/wiki/Git_(software)](https://en.wikipedia.org/wiki/Git_(software))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: DownloadManager** at [http://developer.android.com/reference/android/app/DownloadManager.html](http://developer.android.com/reference/android/app/DownloadManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: HttpURLConnection** at [https://developer.android.com/reference/java/net/HttpURLConnection.html](https://developer.android.com/reference/java/net/HttpURLConnection.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canceling a Volley request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we demonstrated how to add a request to the Volley queue.
    What happens if you no longer need the response? This could happen if the user
    is scrolling through a `ListView` and you're updating the `ListItems` by fetching
    information from the Web. It would be wasteful of bandwidth, power, and CPU cycles
    to allow the requests to complete knowing you are just going to discard the response.
  prefs: []
  type: TYPE_NORMAL
- en: If you were using the `HTTPURLConnection` library, you would need to track all
    requests and cancel them manually. This recipe will show you how easy it is to
    cancel the request in Volley.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have not already completed the previous recipe, *Getting started with
    Volley for Internet requests*, you will need to follow steps 1-5 to add the Volley
    module to your application.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `CancelVolleyRequest`. Use
    the default **Phone & Tablet** option and select **Empty Activity** when prompted
    for **Activity Type**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have not already added the Volley module to your application, review
    the previous section. With Volley added to your project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the existing `onCreate()` to initialize the `RequestQueue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `sendRequest()` method (note that this is similar to the
    `sendRequest()` method from the previous recipe with several changes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the **Close** button''s `onClick` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following override for the `onStop()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To cancel the requests, we can call the `RequestQueue` `cancelAll()` method
    and pass in our tag. In this example, we used the activity, `this`, as our tag,
    but we could use any object as our tag. This allows you to create whatever grouping
    you might need for your requests.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're not just demonstrating how easy it is to cancel requests, we're also demonstrating
    a defensive programming tactic. By ensuring all our requests are canceled, we
    won't have to add code to check for a null activity in our responses, since Volley
    guarantees that we will not receive *any* responses from a request after it has
    been canceled.
  prefs: []
  type: TYPE_NORMAL
- en: Using Volley to request a JSON response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since JavaScript Object Notation (JSON) is probably the most common data-interchange
    format, you'll likely find yourself needing to call a JSON web service. (If you
    are unfamiliar with JSON, review the link at the end of this recipe.) This recipe
    will demonstrate how to make a JSON Request using Volley.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `JSONRequest`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will be using the Volley setup as described in *Getting started
    with Volley for Internet requests*. Follow steps 1-5 to add Volley to your new
    project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Volley added to your project as described previously, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `sendRequest()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace the `url` string in the code before you run this application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Requesting a JSON response using `JsonObjectRequest()` basically works the same
    as the `StringRequest()`. The difference is the response, which is returned as
    a `JSONObject`.
  prefs: []
  type: TYPE_NORMAL
- en: To run this code, you will need to replace the `url` parameter with your web
    service URL. If you don't have a web service to test against, you can try a link
    from the JSON Test website ([http://www.jsontest.com/](http://www.jsontest.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding example, we requested a `JSONObject` with `JsonObjectRequest`.
    We can also request a `JSONARray` with `JsonArrayRequest`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit the JSON web page at [http://json.org/](http://json.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Docs: org.json (JSON Libraries)** at [http://developer.android.com/reference/org/json/package-summary.html](http://developer.android.com/reference/org/json/package-summary.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Volley to request an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you make your JSON Requests as demonstrated in the previous recipe, the
    next most likely call you'll be making is to get an image. This recipe will demonstrate
    how to request an image to update an `ImageView`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `ImageRequest`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted for **Activity
    Type**.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will be using the setup described in the *Getting started with Volley
    for Internet requests* recipe. Follow steps 1-5 to add Volley to your new project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Volley added to your project, as described previously, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `sendRequest()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe, basically, works in the same way as the previous two Volley requests.
    In this recipe, we pass a URL to an image and load the `ImageView` in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve now covered the three basic request types: String, JSON, and Image.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Though the basic types will probably cover most of your needs, Volley is extensible
    and you can also implement a custom response by extending `Request<T>`.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates a problem with our example code. If you change the
    orientation of the device, you'll see the image flicker as the activity is recreated.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Volley singleton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's recommended to instantiate Volley as a singleton. (An alternative approach
    would be to create the queue in the application class.) To create a singleton
    class in Android Studio, go to **New** | **File** | **Singleton** and give it
    a class name, such as `VolleySingleton`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the code to create the request queue to the singleton class. If you create
    a method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can add to your queue from anywhere using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The key to making this work properly is to always use the Application Context
    (not an Activity or Broadcast Receiver Context) by calling `getApplicationContext()`
    on the context passed in.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: Application (class)** at [https://developer.android.com/reference/android/app/Application.html](https://developer.android.com/reference/android/app/Application.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Volley's NetworkImageView and ImageLoader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our last recipe on Volley will not be a request per se, but a replacement for
    the `ImageView`. Requesting an image to populate an `ImageView` is such a common
    task; Volley combines the functionality to a new view called `NetworkImageView`.
    This recipe will demonstrate how to use a `NetworkImageView`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `NetworkImageView`. Use the
    default **Phone & Tablet** option and select **Empty Activity** when prompted
    for **Activity Type**.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will be using the setup described in the *Getting started with Volley
    for Internet requests* recipe. Follow Steps 1-5 to add Volley to your new project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Volley added to your project as described previously, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example is very different from the previous Volley examples. Instead of
    creating a request object, we create an `ImageLoader`. The `ImageLoader` class
    allows us to override the default caching behavior, such as the number of bitmaps
    or how the size is calculated. (We could change the cache to be based on total
    memory instead of image count.) See the `LruCache` link later for more information.
  prefs: []
  type: TYPE_NORMAL
- en: With the `ImageLoader` created, you can assign the image URL to the `NetworkImageView`
    and pass the `ImageLoader` as the second parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned in the previous recipe, the problem with our Volley example
    is that we create the queue in the activity. This is most noticeable with images,
    but regardless, it's recommended to create a Volley singleton. See the *Create
    a Volley singleton* section in the previous recipe for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you create a singleton as described in the previous recipe, you can also
    move the `ImageLoader` code to the singleton and expose the `ImageLoader` like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'With the singleton created, this recipe could be coded as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Developer Docs: LruCache** at [https://developer.android.com/reference/android/util/LruCache.html](https://developer.android.com/reference/android/util/LruCache.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
