- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You might be wondering what a custom view is; that''s alright, we''ll cover
    that and way more in this book. If you''ve been developing **Android** applications
    for a while, you''ve most probably used the standard Android views or widgets
    tons of times. These are, for example: **TextView**, **ImageView**, **Button**,
    **ListView**, and so on. A custom view is slightly different. To summarize it
    quickly, a custom view is a view or a **widget** where we''ve implemented its
    behavior ourselves. In this chapter, we''ll cover the very basics steps we''ll
    need to get ourselves started building Android custom views and understand where
    we should use them and where we should simply rely on the Android standard widgets.
    More specifically, we will talk about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What's a custom view and why do we need them?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up and configure our environment to develop custom views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our very own first custom view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's a custom view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have just mentioned, a custom view is a view where we've implemented its
    behavior ourselves. That was an oversimplification, but it was a good way to start.
    We don't really have to implement its complete behavior ourselves. Sometimes,
    it can just be a simple detail, or a more complex feature or even the whole functionality
    and behavior such as interaction, drawing, resizing, and so on. For example, tweaking
    the background color of a button as a custom view implementation, it's a simple
    change, but creating a bitmap-based menu that rotates in 3D is a complete different
    story in development time and complexity. We'll show how to build both of them
    in this book but, in this chapter, we'll only focus on the very simple example
    and we'll add more features in the chapters to come.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we'll be referring both to custom view and to custom layouts.
    The same definition of custom view can also be applied to layouts, but with the
    main difference that a custom layout will help us to lay out the items it contains
    with the logic we create and position them the precise way we would like. Stay
    tuned, as later on we'll learn how to do so as well!
  prefs: []
  type: TYPE_NORMAL
- en: 'The layouts are usually known as **ViewGroup**. The most typical examples and
    those you probably have heard of and most probably in your applications are: **LinearLayout**,
    **RelativeLayout**, and **ConstraintLayout**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get more information about Android views and Android layouts, we can always
    refer to the official Android developer documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/develop/index.html](https://developer.android.com/develop/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The need for custom views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are lovely Android applications on Google Play and in other markets:
    *Amazon*, built only using the standard **Android UI widgets** and layouts. There
    are also many other applications that have that small additional feature that
    makes our interaction with them easier or simply more pleasing. There is no magic
    formula, but maybe by just adding something different, something that the user
    feels like "hey it''s not just another app for..." might increase our user retention.
    It might not be the deal breaker, but it can definitely make the difference sometimes.'
  prefs: []
  type: TYPE_NORMAL
- en: Some custom views can cause so much impact that can cause other applications
    wanting to imitate it or to build something similar. This effect produces a viral
    marketing of the application and it also gets the developer community involved
    as many similar components might appear in the form of tutorials or open source
    libraries. Obviously, this effect only lasts a limited period of time, but if
    that happens it's definitely worth it for your application as it'll get more popular
    and well-known between developers because it'll be something special, not just
    another Android application.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main reasons to create our own custom views for our mobile application
    is, precisely, to have something special. It might be a menu, a component, a screen,
    something that might be really needed or even the main functionality for our application
    or just as an additional feature.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, by creating our custom view we can actually optimize the performance
    of our application. We can create a specific way of laying out widgets that otherwise
    will need many hierarchy layers by just using standard Android layouts or a custom
    view that simplifies rendering or user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, we can easily fall in the error of trying to custom build
    everything. Android provides an awesome list of widget and layout components that
    manages a lot of things for ourselves. If we ignore the basic Android framework
    and try to build everything by ourselves it would be a lot of work. We would potentially
    struggle with a lot of issues and errors that the Android OS developers already
    faced or, at least, very similar ones and, to put it up in one sentence, we would
    be reinventing the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Examples on the market
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all probably use great apps that are built only using the standard Android
    UI widgets and layouts, but there are many others that have some custom views
    that we don't know or we haven't really noticed. The custom views or layouts can
    sometimes be very subtle and hard to spot.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''d not be the first ones to have a custom view or layout in our application.
    In fact, many popular apps have some custom elements in them. Let''s show some
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: The first example will be the *Etsy* application. The *Etsy* application had
    a custom layout called **StaggeredGridView**. It was even published as open source
    in GitHub. It has been deprecated since 2015 in favor of Google's own `StaggeredGridLayoutManager`
    used together with **RecyclerView**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check it yourself by downloading the *Etsy* application from Google
    Play, but just to have a quick preview, the following screenshot is actually from
    the *Etsy* application showing the StaggeredGrid layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a66193d6-124e-4a87-aa25-828921766c4b.png)'
  prefs: []
  type: TYPE_IMG
- en: There are many other potential examples, but a second good example might be
    the electronic programming guide of *Ziggo*, one of the largest cable operators
    in the Netherlands. The electronic programming guide is a custom view rendering
    different boxes for the TV shows and changing color for what's ahead and behind
    current time.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be downloaded from the Dutch Google Play only, but anyway, the following
    screenshot shows how the application is rendering the electronic programming guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79cf4f75-2f65-44a6-b133-677c310ba086.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, a third example and a more recently published application is *Lottie*
    from Airbnb. *Lottie* is a sample application that renders **Adobe After Effects**
    animations in real time.
  prefs: []
  type: TYPE_NORMAL
- en: '*Lottie* can be downloaded directly from Google Play, but the following screenshot
    shows a quick preview of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae3903a7-490c-4eaa-9459-5c17626d3d98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The rendering view and the custom font are examples of custom rendering. For
    more information about *Lottie* refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://airbnb.design/introducing-lottie/](http://airbnb.design/introducing-lottie/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve just seen some examples, but there are many more available. A good site
    to discover them or to see what is available is Android Arsenal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://android-arsenal.com/](https://android-arsenal.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have had a brief introduction to custom views, why we need them,
    and some examples on the market, let's get ourselves started building our own.
    Our first natural step, if we haven't already done so, is to install Android development
    tools. If you've got Android Studio already installed, you can skip this section
    and go directly to the action. Most examples in this book will work perfectlyÂ with
    Android Studio 2.3.3, but later chapters will require Android Studio 3.0\. At
    the time of writing, Android Studio 3.0 is still in beta, but it is highly recommended
    for testing all the examples provided.
  prefs: []
  type: TYPE_NORMAL
- en: Installing development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get started creating your own custom views, you only need what you'll
    normally need to develop Android mobile applications. In this book, we will be
    using Android Studio, as it's the tool recommended by Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get the latest version of Android Studio from its official site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve downloaded the package for our computer, we can proceed with the
    installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6714aeb-1b24-41b8-906c-c396ce7c8c93.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can create a new project that we'll use to take our first baby steps
    on custom views.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dead148f-7aa0-47a8-8d91-613bdfc5ae95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the Application name, the Company Domain, which will be reversed
    into the application Package name and the Project location, Android Studio will
    ask us what type of project we want to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38d73812-0b86-41f1-adf8-ea9c63be3429.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For this example, we don''t need anything too fancy, just phone and tablet
    and API 21 support is more than enough. Once we''ve done that, we can add an Empty
    Activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72eb2f0a-359a-4c21-8ca0-ea41dd8bc876.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the case you need help installing Android Studio, there is a step by step
    guide on the *Learning Android Application Development*, *Packt Publishing* or
    there is always plenty of information on the Android developer documentation site.
    For more information, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/learning-android-application-development](https://www.packtpub.com/application-development/learning-android-application-development)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to run this app on a device emulator or on a real device.
  prefs: []
  type: TYPE_NORMAL
- en: How to set up an emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To set up an emulator we need to run the **Android Virtual Device Manager**
    (**AVD Manager**). We can find its icon on the top bar, just next to the play/stop
    application icons.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59188fcf-dd12-45b7-87bf-cc47d1a57707.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we''ve executed the **Android Device Manager**, we can add or manage our
    virtual devices from there, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a1a73ab-1b69-4a27-9a42-acb9e16cabc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on Create Virtual Device will give us the opportunity to use one of
    the Android device definitions or even create our own hardware profile, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96ceda49-fc4b-4787-b95a-ae6252f97738.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we''ve selected the hardware, we''ve got to choose the software, or the
    system image, that will run on it. Later on, we can add all the combinations we
    need for testing: multiple different devices, or the same device with different
    Android version images, or even a combination of both.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5753dd3b-7ff9-4f7b-bcc6-d59ad186dfab.png)'
  prefs: []
  type: TYPE_IMG
- en: The last step is to name our AVD, review our hardware and software selection,
    and we're set!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f322220a-56e9-42b8-b3cb-ce5c2c8c8a3b.png)'
  prefs: []
  type: TYPE_IMG
- en: How to set up a real device for developing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is fine to use an emulator for testing and debugging, but sometimes we really
    want to test or put the application on a real device. There are a few steps we
    have to do in order to enable development on our device. First, we need to enable
    our device for development. We can easily do that by just clicking seven times
    on the Settings -> About menu -> Build Number since Android 4.2\. Once we've done
    this, there will be a new menu option called Developer options. We have multiple
    options there that we can explore, but what we need right now is to enable USB
    debugging.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68517d92-821f-4c59-93e8-347122c6b254.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If USB debugging is enabled, we''ll see our device and running emulators on
    the device selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a38c7e8c-afb3-41b3-bef0-6ebbc8521edb.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating our own first custom view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have set up our environment and we can run and debug Android applications
    on both an emulator and a real device, we can start creating our own first custom
    view. To keep it simple, we will first easily modify an existing view and we will
    proceed, later on, to create our own view from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Extending a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the example from the previous section, or just creating a new project
    with an Empty Activity if you've skipped it, we will change the `TextView` with
    our own implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the default layout XML file, usually called `activity_main.xml`
    if you haven''t changed it during project creation, we can see there is `TextView`
    inside a `RelativeLayout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change that `TextView` to a custom class that we will implement just
    after this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We've used the `com.packt.rrafols.customview` package, but please change it
    accordingly to the package name of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this class, we will first create our class that extends `TextView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This class, or custom view, will behave like a standard `TextView`. Take into
    consideration the constructor we've used. There are other constructors, but we'll
    focus only on this one for now. It is important to create it as it'll receive
    the context and the parameters we defined on the XML layout file.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point we''re only passing through the parameters and not doing anything
    fancy with them, but let''s prepare our custom view to handle new functionality
    by overriding the `onDraw()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By overriding the `onDraw()` method we're now in control of the drawing cycle
    of the custom view. If we run the application, we'll not notice any difference
    from the original example as we haven't added any new behavior or functionality
    yet. In order to fix this, let's do a very simple change that will prove to us
    that it is actually working.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `onDraw()` method, we''ll draw a red rectangle covering the whole area
    of the view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the `getWidth()` and `getHeight()` methods to get the width and
    height respectively of the view. To define the color and style we''ll initialize
    a new `Paint` object, but we''ll do it on the constructor, as it is a bad practice
    to do it during the `onDraw()` method. We''ll cover more about performance later
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've initialized the `Paint` object to a red color using integer hexadecimal
    encoding and set the style to `Style.FILL` so it will fill the whole area. By
    default, `Paint` style is set to `FILL`, but it doesn't hurt to specifically set
    it for extra clarity.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the application now, we''ll see the `TextView`, which is our own
    class right now, with a red background as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81a9a33d-cc7b-4066-9646-fa28fefa7e70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code snippet is the whole implementation of the `OwnTextView`
    class. For more details, check the `Example01` folder in the GitHub repository
    for the full project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This example is only to show how we can extend a standard view and implement
    our own behaviors; there are multiple other ways in Android to set a background
    color or to draw a background color to a widget.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple view from scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve seen how to modify an already existing `View,` we''ll see a
    more complex example: how to create our own custom view from scratch!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating an empty class that extends from `View`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now add the same code as the previous example to draw a red background:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If we run the application, as we can see in the following screenshot, we'll
    have a slightly different result from the previous example. This is because in
    our previous example the `TextView` widget was resizing to the size of the text.
    If we remember correctly, we had `android:layout_width="wrap_content"` and `android:layout_height="wrap_content"`
    in our layout XML file. This new custom view we've just created doesn't know how
    to calculate its size.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e962b44c-55c0-4b50-bffa-38096c7de345.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the `Example02` folder in the GitHub repository for the full implementation
    of this simple example.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen the reasoning behind why we might want to build
    custom views and layouts, but also, that we have to apply common sense. Android
    provides a great basic framework for creating UIs and not using it would be a
    mistake. Not every component, button, or widget has to be completely custom developed,
    but by doing it so in the right spot, we can add an extra feature that might make
    our application remembered. Also, we've shown some examples of applications that
    are already in the market and they're using custom views, so we know we are not
    alone out there! Finally, we've seen how to set up the environment to get ourselves
    started and we began taking our own first baby steps on custom views.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll keep adding features; we'll see how to calculate
    the right size of our custom view and learn more about custom rendering.
  prefs: []
  type: TYPE_NORMAL
