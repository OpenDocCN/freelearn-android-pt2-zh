- en: Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: 'You might be wondering what a custom view is; that''s alright, we''ll cover
    that and way more in this book. If you''ve been developing **Android** applications
    for a while, you''ve most probably used the standard Android views or widgets
    tons of times. These are, for example: **TextView**, **ImageView**, **Button**,
    **ListView**, and so on. A custom view is slightly different. To summarize it
    quickly, a custom view is a view or a **widget** where we''ve implemented its
    behavior ourselves. In this chapter, we''ll cover the very basics steps we''ll
    need to get ourselves started building Android custom views and understand where
    we should use them and where we should simply rely on the Android standard widgets.
    More specifically, we will talk about the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道自定义视图是什么；没问题，我们将在本书中介绍这个以及其他更多内容。如果你已经开发了一段时间的**Android**应用程序，你很可能已经多次使用过标准的Android视图或小部件。例如：**TextView**、**ImageView**、**Button**、**ListView**等等。自定义视图略有不同。简单来说，自定义视图是一个我们自行实现其行为的视图或**小部件**。在本章中，我们将介绍开始构建Android自定义视图所需的基本步骤，以及我们应该使用自定义视图的场景和应该依赖Android标准小部件的场景。更具体地说，我们将讨论以下主题：
- en: What's a custom view and why do we need them?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义视图是什么，为什么我们需要它们？
- en: How to set up and configure our environment to develop custom views
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置和配置我们的开发环境以开发自定义视图
- en: Creating our very own first custom view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们自己的第一个自定义视图
- en: What's a custom view
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义视图是什么
- en: As we have just mentioned, a custom view is a view where we've implemented its
    behavior ourselves. That was an oversimplification, but it was a good way to start.
    We don't really have to implement its complete behavior ourselves. Sometimes,
    it can just be a simple detail, or a more complex feature or even the whole functionality
    and behavior such as interaction, drawing, resizing, and so on. For example, tweaking
    the background color of a button as a custom view implementation, it's a simple
    change, but creating a bitmap-based menu that rotates in 3D is a complete different
    story in development time and complexity. We'll show how to build both of them
    in this book but, in this chapter, we'll only focus on the very simple example
    and we'll add more features in the chapters to come.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚刚提到的，自定义视图是我们自行实现其行为的视图。这有点过于简化了，但这是一个不错的起点。我们实际上并不需要自行实现其全部行为。有时，它可能只是一个简单的细节，或者是一个更复杂的功能，甚至是整个功能和行为，如交互、绘图、调整大小等等。例如，将按钮的背景颜色作为一个自定义视图的实现进行微调，这是一个简单的改变，但创建一个基于位图的3D旋转菜单在开发时间和复杂性上则完全不同。我们将在本书中展示如何构建这两种视图，但本章将仅关注一个非常简单的示例，在接下来的章节中，我们将添加更多功能。
- en: Throughout the book, we'll be referring both to custom view and to custom layouts.
    The same definition of custom view can also be applied to layouts, but with the
    main difference that a custom layout will help us to lay out the items it contains
    with the logic we create and position them the precise way we would like. Stay
    tuned, as later on we'll learn how to do so as well!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将同时提到自定义视图和自定义布局。关于自定义视图的定义同样适用于布局，但主要区别在于，自定义布局可以帮助我们用我们创建的逻辑布置其包含的项目，并以我们希望的方式精确定位它们。稍后我们会学习如何做到这一点，敬请期待！
- en: 'The layouts are usually known as **ViewGroup**. The most typical examples and
    those you probably have heard of and most probably in your applications are: **LinearLayout**,
    **RelativeLayout**, and **ConstraintLayout**.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 布局通常被称为**ViewGroup**。最典型的例子，也是你可能听说过的，在你的应用中很可能使用过的有：**LinearLayout**、**RelativeLayout**和**ConstraintLayout**。
- en: 'To get more information about Android views and Android layouts, we can always
    refer to the official Android developer documentation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要了解更多关于Android视图和布局的信息，我们可以随时查阅官方的Android开发者文档：
- en: '[https://developer.android.com/develop/index.html](https://developer.android.com/develop/index.html).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Android开发者官网](https://developer.android.com/develop/index.html)。'
- en: The need for custom views
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么需要自定义视图
- en: 'There are lovely Android applications on Google Play and in other markets:
    *Amazon*, built only using the standard **Android UI widgets** and layouts. There
    are also many other applications that have that small additional feature that
    makes our interaction with them easier or simply more pleasing. There is no magic
    formula, but maybe by just adding something different, something that the user
    feels like "hey it''s not just another app for..." might increase our user retention.
    It might not be the deal breaker, but it can definitely make the difference sometimes.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play和其他市场上有很多可爱的Android应用程序：仅使用标准**Android UI组件**和布局的*亚马逊*。还有许多其他应用程序拥有让我们的互动更容易或仅仅更愉悦的小功能。虽然没有神奇的公式，但也许只是添加一些不同的东西，让用户觉得“这不仅仅是另一个用于...的应用程序”可能会提高我们的用户留存率。它可能不是决定性的因素，但有时确实可以产生差异。
- en: Some custom views can cause so much impact that can cause other applications
    wanting to imitate it or to build something similar. This effect produces a viral
    marketing of the application and it also gets the developer community involved
    as many similar components might appear in the form of tutorials or open source
    libraries. Obviously, this effect only lasts a limited period of time, but if
    that happens it's definitely worth it for your application as it'll get more popular
    and well-known between developers because it'll be something special, not just
    another Android application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些自定义视图的影响力如此之大，以至于其他应用程序也希望效仿或构建类似的东西。这种效果为应用程序带来了病毒式营销，也吸引了开发者社区，因为可能会有许多类似的组件以教程或开源库的形式出现。显然，这种效果只会持续一段时间，但如果发生了，对你的应用程序来说绝对是值得的，因为它会在开发者中变得更加流行和知名，因为它不仅仅是另一个Android应用程序，而是有特色的东西。
- en: One of the main reasons to create our own custom views for our mobile application
    is, precisely, to have something special. It might be a menu, a component, a screen,
    something that might be really needed or even the main functionality for our application
    or just as an additional feature.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为移动应用程序创建自定义视图的一个主要原因，正是为了拥有一些特别的东西。它可能是一个菜单、一个组件、一个屏幕，或者是我们应用程序真正需要的主要功能，或者只是一个附加功能。
- en: In addition, by creating our custom view we can actually optimize the performance
    of our application. We can create a specific way of laying out widgets that otherwise
    will need many hierarchy layers by just using standard Android layouts or a custom
    view that simplifies rendering or user interaction.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过创建我们自己的自定义视图，我们实际上可以优化应用程序的性能。我们可以创建一种特定的布局方式，否则仅使用标准Android布局或自定义视图将需要许多层次结构，从而简化渲染或用户交互。
- en: On the other hand, we can easily fall in the error of trying to custom build
    everything. Android provides an awesome list of widget and layout components that
    manages a lot of things for ourselves. If we ignore the basic Android framework
    and try to build everything by ourselves it would be a lot of work. We would potentially
    struggle with a lot of issues and errors that the Android OS developers already
    faced or, at least, very similar ones and, to put it up in one sentence, we would
    be reinventing the wheel.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们很容易犯试图自定义构建一切的错误。Android 提供了一个出色的组件和布局列表，为我们处理了很多事情。如果我们忽略基本的Android框架，试图自己构建一切，那将是非常多的工作。我们可能会遇到许多Android操作系统开发者已经面对过的问题，至少也是非常相似的问题。一句话，我们就是在重新发明轮子。
- en: Examples on the market
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 市场上的例子
- en: We all probably use great apps that are built only using the standard Android
    UI widgets and layouts, but there are many others that have some custom views
    that we don't know or we haven't really noticed. The custom views or layouts can
    sometimes be very subtle and hard to spot.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能都使用过仅使用标准Android UI组件和布局构建的优秀应用程序，但也有许多其他应用程序有一些我们不知道或没有真正注意到的自定义视图。自定义视图或布局有时可能非常微妙，难以察觉。
- en: 'We''d not be the first ones to have a custom view or layout in our application.
    In fact, many popular apps have some custom elements in them. Let''s show some
    examples:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不一定是第一个在应用程序中拥有自定义视图或布局的人。实际上，许多受欢迎的应用程序都有一些自定义元素。让我们来看一些例子：
- en: The first example will be the *Etsy* application. The *Etsy* application had
    a custom layout called **StaggeredGridView**. It was even published as open source
    in GitHub. It has been deprecated since 2015 in favor of Google's own `StaggeredGridLayoutManager`
    used together with **RecyclerView**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子将是*Etsy*应用程序。*Etsy*应用程序有一个名为**StaggeredGridView**的自定义布局。它甚至在 GitHub 上作为开源发布。自2015年以来，它已被废弃，取而代之的是与**RecyclerView**一起使用的谷歌自己的`StaggeredGridLayoutManager`。
- en: 'You can check it yourself by downloading the *Etsy* application from Google
    Play, but just to have a quick preview, the following screenshot is actually from
    the *Etsy* application showing the StaggeredGrid layout:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从 Google Play 下载*Etsy*应用程序来亲自查看，但为了快速预览，以下截图实际上展示了*Etsy*应用程序中的 StaggeredGrid
    布局：
- en: '![](img/a66193d6-124e-4a87-aa25-828921766c4b.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a66193d6-124e-4a87-aa25-828921766c4b.png)'
- en: There are many other potential examples, but a second good example might be
    the electronic programming guide of *Ziggo*, one of the largest cable operators
    in the Netherlands. The electronic programming guide is a custom view rendering
    different boxes for the TV shows and changing color for what's ahead and behind
    current time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他潜在的例子，但第二个好的例子可能是荷兰最大的有线电视运营商之一*Ziggo*的电子编程指南。电子编程指南是一个自定义视图，为电视节目呈现不同的盒子，并改变当前时间前后内容的颜色。
- en: 'It can be downloaded from the Dutch Google Play only, but anyway, the following
    screenshot shows how the application is rendering the electronic programming guide:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用只能在荷兰的 Google Play 下载，不过，以下截图展示了应用程序如何呈现电子编程指南：
- en: '![](img/79cf4f75-2f65-44a6-b133-677c310ba086.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79cf4f75-2f65-44a6-b133-677c310ba086.png)'
- en: Finally, a third example and a more recently published application is *Lottie*
    from Airbnb. *Lottie* is a sample application that renders **Adobe After Effects**
    animations in real time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三个例子，也是最近发布的应用程序是来自 Airbnb 的*Lottie*。*Lottie*是一个示例应用程序，它实时呈现**Adobe After
    Effects**动画。
- en: '*Lottie* can be downloaded directly from Google Play, but the following screenshot
    shows a quick preview of the application:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*Lottie*可以直接从 Google Play 下载，但以下截图展示了应用程序的快速预览：'
- en: '![](img/ae3903a7-490c-4eaa-9459-5c17626d3d98.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae3903a7-490c-4eaa-9459-5c17626d3d98.png)'
- en: 'The rendering view and the custom font are examples of custom rendering. For
    more information about *Lottie* refer to:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染视图和自定义字体是自定义渲染的例子。有关*Lottie*的更多信息，请参考：
- en: '[http://airbnb.design/introducing-lottie/](http://airbnb.design/introducing-lottie/).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://airbnb.design/introducing-lottie/](http://airbnb.design/introducing-lottie/)。'
- en: 'We''ve just seen some examples, but there are many more available. A good site
    to discover them or to see what is available is Android Arsenal:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了一些例子，但还有更多可用。一个发现它们或查看可用内容的好网站是 Android Arsenal：
- en: '[https://android-arsenal.com/](https://android-arsenal.com/).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://android-arsenal.com/](https://android-arsenal.com/)。'
- en: Setting up the environment
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: Now that we have had a brief introduction to custom views, why we need them,
    and some examples on the market, let's get ourselves started building our own.
    Our first natural step, if we haven't already done so, is to install Android development
    tools. If you've got Android Studio already installed, you can skip this section
    and go directly to the action. Most examples in this book will work perfectly with
    Android Studio 2.3.3, but later chapters will require Android Studio 3.0\. At
    the time of writing, Android Studio 3.0 is still in beta, but it is highly recommended
    for testing all the examples provided.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对自定义视图、为什么需要它们以及市场上的一些例子有了简要介绍，那么让我们开始构建自己的视图吧。如果我们还没有这样做，那么我们的第一步自然就是安装
    Android 开发工具。如果你已经安装了 Android Studio，可以跳过这一部分，直接进入正题。本书中的大多数例子都可以完美地与 Android
    Studio 2.3.3 配合使用，但后面的章节将需要 Android Studio 3.0。在撰写本文时，Android Studio 3.0 仍处于测试阶段，但强烈建议使用它来测试提供的所有示例。
- en: Installing development tools
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装开发工具
- en: In order to get started creating your own custom views, you only need what you'll
    normally need to develop Android mobile applications. In this book, we will be
    using Android Studio, as it's the tool recommended by Google.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建自己的自定义视图，你只需要正常开发 Android 移动应用程序所需的工具。在本书中，我们将使用 Android Studio，因为这是谷歌推荐的工具。
- en: 'We can get the latest version of Android Studio from its official site:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 Android Studio 的官方网站获取最新版本：
- en: '[https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html)。'
- en: 'Once we''ve downloaded the package for our computer, we can proceed with the
    installation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们为电脑下载了软件包，就可以开始安装了：
- en: '![](img/b6714aeb-1b24-41b8-906c-c396ce7c8c93.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6714aeb-1b24-41b8-906c-c396ce7c8c93.png)'
- en: Now, we can create a new project that we'll use to take our first baby steps
    on custom views.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个新项目，这个项目将用于我们自定义视图的初步尝试。
- en: '![](img/dead148f-7aa0-47a8-8d91-613bdfc5ae95.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dead148f-7aa0-47a8-8d91-613bdfc5ae95.png)'
- en: 'After selecting the Application name, the Company Domain, which will be reversed
    into the application Package name and the Project location, Android Studio will
    ask us what type of project we want to create:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 选择应用程序名称、公司域名（这将反转成应用程序包名）和项目位置后，Android Studio 会询问我们想要创建哪种类型的项目：
- en: '![](img/38d73812-0b86-41f1-adf8-ea9c63be3429.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38d73812-0b86-41f1-adf8-ea9c63be3429.png)'
- en: 'For this example, we don''t need anything too fancy, just phone and tablet
    and API 21 support is more than enough. Once we''ve done that, we can add an Empty
    Activity:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们不需要太花哨的东西，只要有手机和平板支持，API 21 的支持就足够了。完成这些设置后，我们可以添加一个空的活动（Empty Activity）：
- en: '![](img/72eb2f0a-359a-4c21-8ca0-ea41dd8bc876.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72eb2f0a-359a-4c21-8ca0-ea41dd8bc876.png)'
- en: 'In the case you need help installing Android Studio, there is a step by step
    guide on the *Learning Android Application Development*, *Packt Publishing* or
    there is always plenty of information on the Android developer documentation site.
    For more information, refer to:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要安装 Android Studio 的帮助，可以在《*Learning Android Application Development*, *Packt
    Publishing*》中找到一份分步指南，或者在 Android 开发者文档网站上总有很多信息。更多信息，请参考：
- en: '[https://www.packtpub.com/application-development/learning-android-application-development](https://www.packtpub.com/application-development/learning-android-application-development)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[学习 Android 应用开发](https://www.packtpub.com/application-development/learning-android-application-development)'
- en: Now, we are ready to run this app on a device emulator or on a real device.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在设备模拟器或真实设备上运行这个应用程序了。
- en: How to set up an emulator
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设置模拟器
- en: To set up an emulator we need to run the **Android Virtual Device Manager**
    (**AVD Manager**). We can find its icon on the top bar, just next to the play/stop
    application icons.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置模拟器，我们需要运行**Android 虚拟设备管理器**（**AVD Manager**）。我们可以在顶部栏找到它的图标，就在播放/停止应用程序图标旁边。
- en: '![](img/59188fcf-dd12-45b7-87bf-cc47d1a57707.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59188fcf-dd12-45b7-87bf-cc47d1a57707.png)'
- en: 'Once we''ve executed the **Android Device Manager**, we can add or manage our
    virtual devices from there, as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们执行了**Android 设备管理器**，就可以从那里添加或管理我们的虚拟设备，如下面的截图所示：
- en: '![](img/1a1a73ab-1b69-4a27-9a42-acb9e16cabc7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a1a73ab-1b69-4a27-9a42-acb9e16cabc7.png)'
- en: 'Clicking on Create Virtual Device will give us the opportunity to use one of
    the Android device definitions or even create our own hardware profile, as shown
    in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建虚拟设备”将给我们一个使用 Android 设备定义之一的机会，甚至可以创建我们自己的硬件配置文件，如下面的截图所示：
- en: '![](img/96ceda49-fc4b-4787-b95a-ae6252f97738.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96ceda49-fc4b-4787-b95a-ae6252f97738.png)'
- en: 'Once we''ve selected the hardware, we''ve got to choose the software, or the
    system image, that will run on it. Later on, we can add all the combinations we
    need for testing: multiple different devices, or the same device with different
    Android version images, or even a combination of both.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 选择硬件后，我们需要选择在其上运行的软件，或者说是系统镜像。稍后，我们可以添加所有需要的测试组合：多种不同的设备，或者带有不同 Android 版本镜像的同一设备，甚至是两者的组合。
- en: '![](img/5753dd3b-7ff9-4f7b-bcc6-d59ad186dfab.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5753dd3b-7ff9-4f7b-bcc6-d59ad186dfab.png)'
- en: The last step is to name our AVD, review our hardware and software selection,
    and we're set!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是给我们的 AVD 命名，检查我们的硬件和软件选择，然后就可以开始了！
- en: '![](img/f322220a-56e9-42b8-b3cb-ce5c2c8c8a3b.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f322220a-56e9-42b8-b3cb-ce5c2c8c8a3b.png)'
- en: How to set up a real device for developing
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何为开发设置真实设备
- en: It is fine to use an emulator for testing and debugging, but sometimes we really
    want to test or put the application on a real device. There are a few steps we
    have to do in order to enable development on our device. First, we need to enable
    our device for development. We can easily do that by just clicking seven times
    on the Settings -> About menu -> Build Number since Android 4.2\. Once we've done
    this, there will be a new menu option called Developer options. We have multiple
    options there that we can explore, but what we need right now is to enable USB
    debugging.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟器进行测试和调试是可以的，但有时我们确实想要在真实设备上测试或安装应用程序。为了在我们的设备上启用开发，我们需要执行几个步骤。首先，我们需要为开发启用我们的设备。我们可以轻松地通过在设置中点击七次“关于”菜单
    -> “构建号”（自Android 4.2起）。完成这一步后，将出现一个新的菜单选项，称为“开发者选项”。那里有多种选项供我们探索，但现在我们需要的是启用USB调试。
- en: '![](img/68517d92-821f-4c59-93e8-347122c6b254.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68517d92-821f-4c59-93e8-347122c6b254.png)'
- en: 'If USB debugging is enabled, we''ll see our device and running emulators on
    the device selection:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了USB调试，我们将在设备选择中看到我们的设备和正在运行的模拟器：
- en: '![](img/a38c7e8c-afb3-41b3-bef0-6ebbc8521edb.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a38c7e8c-afb3-41b3-bef0-6ebbc8521edb.png)'
- en: Creating our own first custom view
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们自己的第一个自定义视图
- en: Now that we have set up our environment and we can run and debug Android applications
    on both an emulator and a real device, we can start creating our own first custom
    view. To keep it simple, we will first easily modify an existing view and we will
    proceed, later on, to create our own view from scratch.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了开发环境，可以在模拟器和真实设备上运行和调试Android应用程序，我们可以开始创建我们自己的第一个自定义视图了。为了简化，我们首先会轻松地修改一个现有的视图，稍后我们将从头开始创建我们自己的视图。
- en: Extending a view
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展一个视图
- en: Using the example from the previous section, or just creating a new project
    with an Empty Activity if you've skipped it, we will change the `TextView` with
    our own implementation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一节的示例，或者如果你跳过了它，只需创建一个带有空活动的新项目，我们将用我们自己的实现来替换 `TextView`。
- en: 'If we take a look at the default layout XML file, usually called `activity_main.xml`
    if you haven''t changed it during project creation, we can see there is `TextView`
    inside a `RelativeLayout`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看默认的布局XML文件，通常称为 `activity_main.xml`（除非在项目创建期间你更改了它），我们可以看到 `RelativeLayout`
    中有一个 `TextView`：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s change that `TextView` to a custom class that we will implement just
    after this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改那个 `TextView`，将其变为我们接下来将实现的定制类。
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We've used the `com.packt.rrafols.customview` package, but please change it
    accordingly to the package name of your application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `com.packt.rrafols.customview` 包，但请根据你的应用程序的包名相应地更改它。
- en: 'To implement this class, we will first create our class that extends `TextView`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这个类，我们首先会创建一个继承自 `TextView` 的类：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This class, or custom view, will behave like a standard `TextView`. Take into
    consideration the constructor we've used. There are other constructors, but we'll
    focus only on this one for now. It is important to create it as it'll receive
    the context and the parameters we defined on the XML layout file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类或自定义视图将表现得像一个标准的 `TextView`。考虑到我们使用的构造函数。还有其他的构造函数，但现在我们只关注这一个。创建它是很重要的，因为它将接收上下文和我们定义在XML布局文件中的参数。
- en: 'At this point we''re only passing through the parameters and not doing anything
    fancy with them, but let''s prepare our custom view to handle new functionality
    by overriding the `onDraw()` method:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们只是传递参数，并没有对它们进行任何花哨的操作，但让我们通过重写 `onDraw()` 方法来准备我们的自定义视图以处理新功能：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By overriding the `onDraw()` method we're now in control of the drawing cycle
    of the custom view. If we run the application, we'll not notice any difference
    from the original example as we haven't added any new behavior or functionality
    yet. In order to fix this, let's do a very simple change that will prove to us
    that it is actually working.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重写 `onDraw()` 方法，我们现在可以控制自定义视图的绘制周期。如果我们运行应用程序，由于还没有添加任何新的行为或功能，我们不会注意到与原始示例有任何区别。为了解决这个问题，让我们做一个非常简单的更改，这将证明它实际上是在工作的。
- en: 'On the `onDraw()` method, we''ll draw a red rectangle covering the whole area
    of the view as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onDraw()` 方法中，我们将绘制一个红色矩形，覆盖视图的全部区域，如下所示：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can use the `getWidth()` and `getHeight()` methods to get the width and
    height respectively of the view. To define the color and style we''ll initialize
    a new `Paint` object, but we''ll do it on the constructor, as it is a bad practice
    to do it during the `onDraw()` method. We''ll cover more about performance later
    in this book:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`getWidth()`和`getHeight()`方法分别获取视图的宽度和高度。为了定义颜色和样式，我们将初始化一个新的`Paint`对象，但我们要在构造函数中执行这一操作，因为在`onDraw()`方法中执行是错误的做法。我们将在本书后面更多地讨论性能问题：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we've initialized the `Paint` object to a red color using integer hexadecimal
    encoding and set the style to `Style.FILL` so it will fill the whole area. By
    default, `Paint` style is set to `FILL`, but it doesn't hurt to specifically set
    it for extra clarity.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用整数十六进制编码将`Paint`对象初始化为红色，并将样式设置为`Style.FILL`，以便填充整个区域。默认情况下，`Paint`样式设置为`FILL`，但明确设置可以增加清晰度。
- en: 'If we run the application now, we''ll see the `TextView`, which is our own
    class right now, with a red background as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行应用程序，我们将看到`TextView`，这是我们现在的类，背景为红色，如下所示：
- en: '![](img/81a9a33d-cc7b-4066-9646-fa28fefa7e70.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81a9a33d-cc7b-4066-9646-fa28fefa7e70.png)'
- en: 'The following code snippet is the whole implementation of the `OwnTextView`
    class. For more details, check the `Example01` folder in the GitHub repository
    for the full project:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段是`OwnTextView`类的整个实现。更多详情，请查看GitHub仓库中`Example01`文件夹的完整项目：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This example is only to show how we can extend a standard view and implement
    our own behaviors; there are multiple other ways in Android to set a background
    color or to draw a background color to a widget.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例只是为了展示我们如何扩展标准视图并实现我们自己的行为；在Android中还有多种其他方法可以为小部件设置背景颜色或绘制背景颜色。
- en: Creating a simple view from scratch
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始创建一个简单的视图
- en: 'Now that we''ve seen how to modify an already existing `View,` we''ll see a
    more complex example: how to create our own custom view from scratch!'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何修改已经存在的`View`，我们将看到一个更复杂的示例：如何从零开始创建我们自己的自定义视图！
- en: 'Let''s start by creating an empty class that extends from `View`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个继承自`View`的空类开始：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will now add the same code as the previous example to draw a red background:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将添加与上一个示例相同的代码以绘制红色背景：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we run the application, as we can see in the following screenshot, we'll
    have a slightly different result from the previous example. This is because in
    our previous example the `TextView` widget was resizing to the size of the text.
    If we remember correctly, we had `android:layout_width="wrap_content"` and `android:layout_height="wrap_content"`
    in our layout XML file. This new custom view we've just created doesn't know how
    to calculate its size.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行应用程序，从下面的截图中可以看出，我们将得到与上一个示例略有不同的结果。这是因为在上一个示例中，`TextView`小部件调整大小以适应文本的大小。如果我们记得正确，我们在布局XML文件中有`android:layout_width="wrap_content"`和`android:layout_height="wrap_content"`。我们刚才创建的这个新的自定义视图不知道如何计算其大小。
- en: '![](img/e962b44c-55c0-4b50-bffa-38096c7de345.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e962b44c-55c0-4b50-bffa-38096c7de345.png)'
- en: Check the `Example02` folder in the GitHub repository for the full implementation
    of this simple example.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub仓库的`Example02`文件夹中查看这个简单例子的完整实现。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen the reasoning behind why we might want to build
    custom views and layouts, but also, that we have to apply common sense. Android
    provides a great basic framework for creating UIs and not using it would be a
    mistake. Not every component, button, or widget has to be completely custom developed,
    but by doing it so in the right spot, we can add an extra feature that might make
    our application remembered. Also, we've shown some examples of applications that
    are already in the market and they're using custom views, so we know we are not
    alone out there! Finally, we've seen how to set up the environment to get ourselves
    started and we began taking our own first baby steps on custom views.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了为什么要构建自定义视图和布局的原因，同时也必须应用常识。Android提供了一个用于创建UI的优秀基本框架，不使用它将是一个错误。并非每个组件、按钮或小部件都必须完全自定义开发，但通过在正确的位置执行此操作，我们可以添加一个可能会让我们的应用程序被记住的额外功能。此外，我们已经展示了一些已经在市场上使用自定义视图的应用程序示例，所以我们知道我们并不孤单！最后，我们已经看到了如何设置环境以开始工作，并且我们已经开始了自定义视图的初步尝试。
- en: In the next chapter, we'll keep adding features; we'll see how to calculate
    the right size of our custom view and learn more about custom rendering.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续添加功能；我们将了解如何计算自定义视图的正确大小并学习更多关于自定义渲染的内容。
