- en: Implementing Your Own EPG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现你自己的电子节目指南（EPG）
- en: So far, we have been building very basic examples to show some of the functionalities
    and methods that Android provides us with to implement and draw our custom views.
    In this chapter, we will see a more complex example of a custom view. We'll be
    building an **Electronic Programming Guide** (**EPG**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在构建一些非常基础的示例，以展示Android为我们提供的实现和绘制自定义视图的功能和方法。在本章中，我们将看到一个更复杂的自定义视图示例。我们将构建一个**电子节目指南**（**EPG**）。
- en: An EPG is a fairly complex component to build, and if done wrong, can have an
    impact on the user experience. For example, if it doesn't perform well, it'll
    feel sluggish and tedious to use.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: EPG是一个相当复杂的组件，如果构建不当，可能会影响用户体验。例如，如果它性能不佳，使用起来会感觉迟缓和繁琐。
- en: 'We''ll be using several things we have covered in previous chapters. All together
    it can be a bit too much, but we will be building it step by step, and, in more
    detail, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在前面章节中已经介绍过的几件事情。所有这些可能会有些多，但我们会一步一步地构建它，并且会更详细地介绍：
- en: How to build a basic EPG custom view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建一个基本的EPG自定义视图
- en: How to add basic animations and interactions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何添加基本的动画和交互
- en: How to allow zooming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何允许缩放
- en: Making it configurable
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使其可配置
- en: Building an EPG
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建EPG
- en: If we want to make our EPG useful, it should show several channels, and both
    current and future TV programs at the same time. Also, it'd be nice to clearly
    see what's currently playing, and have clear indicators of when other TV programs
    start and end.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想让我们的EPG更有用，它应该能同时显示多个频道，以及当前和未来的电视节目。同时，清晰地看到当前正在播放的内容，并有明确的指示其他电视节目的开始和结束时间会很好。
- en: In this specific component, we will opt for one method of rendering that covers
    these points. You can use it as an example, but there are many other ways to render
    the same kind of information. Also, it won't be connected to a backend service
    providing the EPG data. All EPG data will be mocked up, but it can be easily connected
    to any service, although some changes might need to be done.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的组件中，我们将选择一种涵盖这些点的渲染方法。你可以把它作为一个例子，但还有许多其他方式来渲染同类的信息。同时，它不会连接到一个提供EPG数据的后端服务。所有的EPG数据都将被模拟，但可以轻松连接到任何服务，尽管可能需要进行一些更改。
- en: EPG basics and animation setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EPG基础和动画设置
- en: 'We''ll start by creating a class-extending view. On its `onDraw()` method we
    will draw the following parts:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个扩展视图的类开始。在其`onDraw()`方法中，我们将绘制以下部分：
- en: The view background
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图背景
- en: The EPG body with all the channels and TV programs
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含所有频道和电视节目的EPG主体
- en: A top time bar hinting at the time
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个顶部的时间条提示时间
- en: A vertical line indicating the current time
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条垂直线表示当前时间
- en: We'll also need to trigger a redraw cycle if we are animating some variables.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一些变量动画，我们还需要触发重绘周期。
- en: 'So, let''s start with this implementation of the `onDraw()` method, and let''s
    proceed method by method:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始实现这个`onDraw()`方法，并且一步一步地按照方法进行：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The easiest method to implement will be `drawBackground()`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最容易实现的方法将是`drawBackground()`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, we have defined a background color as `0xFF333333`, which is some
    kind of dark gray, and we are just filling the whole screen with the `drawARGB()`
    call, masking and shifting the color components.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了一个背景颜色为`0xFF333333`，这是一种深灰色，我们只是用`drawARGB()`调用填充整个屏幕，遮罩和移动颜色组件。
- en: 'Now, let''s go for the `drawTimeBar()` method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看`drawTimeBar()`方法：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s explain what this method is doing:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下这个方法的作用：
- en: 'First, we got the initial time at which we''d like to start drawing the time
    marks:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们得到了我们想要开始绘制时间标记的初始时间：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We defined the `initialTimeValue` in our class constructor as half an hour
    to the current time. We also removed the minutes, seconds, and milliseconds as
    we''d like to indicate the exact hours and the exact half hour past each hour,
    for instance: 9.00, 9.30, 10.00, 10.30, and so on in this example.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的类构造函数中定义了`initialTimeValue`，设置为当前时间后半小时。我们还移除了分钟、秒和毫秒，因为我们要指示每个小时的整点和半小时，例如：9.00,
    9.30, 10.00, 10.30，等等。
- en: 'Then we created a helper method to get the screen position based on a timestamp
    that will be used in many other places in the code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个辅助方法，根据时间戳获取屏幕位置，这将在代码中的许多其他地方使用：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In addition, we need to calculate a timescale based on the device screen density.
    To calculate it, we defined a default timescale:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们需要根据设备屏幕密度计算一个时间刻度。为了计算它，我们定义了一个默认的时间刻度：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the class constructor, we adjusted the timescale depending on the screen
    density:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类构造函数中，我们根据屏幕密度调整了时间刻度：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We know there are many Android devices with different screen sizes and densities.
    Doing it this way, instead of hardcoding the pixel dimensions, makes the rendering
    as close as possible on all devices.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道有许多不同屏幕大小和密度的 Android 设备。这种方式，而不是硬编码像素尺寸，使得渲染在所有设备上尽可能接近。
- en: 'With the help of this method, we can easily loop on blocks of half an hour
    until we reach the end of the screen:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法的帮助下，我们可以轻松地循环处理半小时的块，直到达到屏幕末端。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By adding `30` minutes, converted to milliseconds, to the time variable we increment
    the horizontal marks in blocks of `30` minutes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `30` 分钟（转换为毫秒）加到时间变量上，我们可以以 `30` 分钟的块来递增水平标记。
- en: We've taken into consideration the `frScrollX` position as well. This variable
    will be updated when we add interactions that allow us to scroll, but we will
    see that later in this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也考虑了 `frScrollX` 的位置。当我们添加允许滚动的交互时，这个变量将被更新，但我们在本章后面会看到这一点。
- en: 'The rendering is quite straightforward: we draw a vertical line as long as
    the `x` coordinate is inside the screen:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染非常直接：只要 `x` 坐标在屏幕内，我们就绘制一条垂直线：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'we draw the time in `HH:mm` format, just next to it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以 `HH:mm` 格式绘制时间，就在旁边：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'One small performance improvement we can do is to store the strings so we don''t
    have to call the format method again and again, and avoid costly object creation.
    We can do so by creating a **HashMap** that takes a long variable as a key and
    returns a string:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的性能改进之一是存储字符串，这样我们就无需一次又一次地调用格式化方法，避免昂贵的对象创建。我们可以通过创建一个以长整型变量作为键并返回字符串的
    **HashMap** 来实现这一点：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We use the formatted date if we already have it, or format it first and store
    it on the HashMap if it's the first time.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经有了格式化的日期，我们就使用它；如果这是第一次，我们先格式化并将其存储在 HashMap 中。
- en: 'We can now go on to draw the current time indicator. It is quite easy; it''s
    just a vertical box that is slightly wider than a single line, so we use `drawRect()`
    instead of `drawLine()`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续绘制当前时间指示器。这非常简单；它只是一个比单条线稍宽的垂直框，因此我们使用 `drawRect()` 而不是 `drawLine()`：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we already have the `getTimeHorizontalPosition` method, we can easily pinpoint
    where to draw the current time indicator. As we will be scrolling through the
    TV programs, we split the drawing into two parts: one that draws a line over the
    time bar, without any clipping; and another line from the end of the time bar
    to the bottom of the screen. In the latter we apply a clipping to only draw it
    on top of the TV programs.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经有了 `getTimeHorizontalPosition` 方法，我们可以轻松地确定绘制当前时间指示器的位置。由于我们将滚动浏览电视节目，因此我们将绘制分为两部分：一部分在时间条上绘制线条，不进行任何剪辑；另一部分从时间条末端到屏幕底部绘制线条。在后者中，我们应用剪辑，使其只绘制在电视节目上方。
- en: 'To understand this more clearly, let''s take a look at a screenshot of the
    result:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地理解这一点，让我们看一下结果的截图：
- en: '![](img/34906304-fb28-4b26-8542-22944465d9ae.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34906304-fb28-4b26-8542-22944465d9ae.png)'
- en: At the left side, we have got the icons representing the channels, on the top
    side is the time bar, and the rest is the body of the EPG with different TV programs.
    We'd like to avoid the current timeline, in red, going over the channel icons,
    so we apply the clipping we have just mentioned.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们有表示频道的图标，顶部是时间条，其余部分是包含不同电视节目的电子节目指南（EPG）主体。我们希望避免当前时间线（红色）覆盖频道图标，因此我们应用了刚才提到的剪辑。
- en: 'Finally, we can implement the drawing of the whole EPG body. It''s a bit more
    complex than the other methods, so let''s go through it step by step. First, we
    need to calculate the number of channels we have to draw to avoid doing unnecessary
    calculations and trying to draw outside the screen:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以实现整个 EPG 主体绘制。这比其他方法要复杂一些，因此让我们一步一步来。首先，我们需要计算要绘制的频道数量，以避免进行不必要的计算和试图在屏幕外绘制：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Like we did with the timescale, we also define a default channel height and
    compute it based on the screen density:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与时间刻度一样，我们也定义了一个默认的频道高度，并根据屏幕密度来计算它：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now that we know the initial channel and the end channel we need to draw, we
    can outline the drawing loop:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了需要绘制的初始频道和结束频道，我们可以概述绘制循环：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We'll be modifying the `canvas` clipping several times, so let's save it at
    the beginning of the method and restore it at the end. This way we won't impact
    any other drawing method completed after this. Inside the loop, for each channel,
    we also calculate the `channelTop` and `channelBottom` values as they'll be handy
    later when drawing it. These values indicate the vertical coordinates for the
    top and the bottom of the channel we are drawing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将多次修改`canvas`的剪辑区域，因此让我们在方法开始时保存它，在结束时恢复它。这样我们就不会影响在此之后完成的任何其他绘图方法。在循环内，对于每个频道，我们还需要计算`channelTop`和`channelBottom`值，因为稍后在绘制时会很有用。这些值表示我们正在绘制的频道的顶部和底部的垂直坐标。
- en: 'Let''s now draw the icon for each channel, requesting it first from the internet
    if we don''t have it. We''ll be using `Picasso` to manage the Internet requests,
    but we can use any other library:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为每个频道绘制图标，如果我们没有图标，首先从互联网上请求。我们将使用`Picasso`来管理互联网请求，但我们也可以使用任何其他库：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There is information about Picasso at:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于毕加索的信息可以在以下链接找到：
- en: '[http://square.github.io/picasso/](http://square.github.io/picasso/).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://square.github.io/picasso/](http://square.github.io/picasso/)。'
- en: 'Also, for each channel, we need to draw the TV programs that are inside the
    screen. Once again, let''s use the method we previously created to convert a timestamp
    into a screen coordinate:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，对于每个频道，我们需要绘制屏幕内的电视节目。再次，让我们使用之前创建的方法将时间戳转换为屏幕坐标：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we are getting the program start and end positions from the program start
    and end times. If the start position is beyond the width of the screen, we can
    stop checking more TV programs as they'll all be outside the screen, assuming
    the TV programs are sorted by time in ascending order. Also, if the end position
    is less than 0, we can skip this specific TV program as it'll also be drawn outside
    the screen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从程序的开始和结束时间获取程序的开始和结束位置。如果开始位置超出了屏幕宽度，我们可以停止检查更多的电视节目，因为它们都将位于屏幕外，假设电视节目是按时间升序排序的。同样，如果结束位置小于0，我们可以跳过这个特定的电视节目，因为它也将被绘制在屏幕外。
- en: 'The actual drawing is quite simple; we are using a `drawRoundRect` for the
    TV program background and we are drawing the program name centered on it. We''re
    also clipping the area just in case the name is longer than the TV program box:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的绘制相当简单；我们使用`drawRoundRect`来绘制电视节目的背景，并在其上居中绘制节目名称。我们还剪辑了该区域，以防名称比电视节目框长：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We've also added a small check to see if a TV program is currently playing.
    If the current time is greater than or equal to the program start time and smaller
    than its end time, we can conclude that the TV program is currently playing and
    render it with the highlighted color.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还增加了一个小检查，以确定电视节目是否正在播放。如果当前时间大于或等于节目开始时间，并且小于结束时间，我们可以得出结论，电视节目目前正在播放，并用高亮颜色渲染它。
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s now add the animation cycle. For this example, we have chosen the fixed
    time-step mechanism. We''ll only animate the scroll variables, both horizontal
    and vertical, and the movement of the channel part of the screen:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加动画周期。在这个例子中，我们选择了固定时间步长机制。我们只对滚动变量进行动画处理，包括水平和垂直的滚动以及屏幕中频道部分的运动：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In our renderings and calculations later, we will use the `frScrollX`, `frScrollY`,
    and `frChNameWidth` variables, which contain the fractional parts between the
    current logic tick and the following one.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们后面的渲染和计算中，我们将使用`frScrollX`、`frScrollY`和`frChNameWidth`变量，它们包含了当前逻辑刻度与下一个逻辑刻度之间的分数部分。
- en: We'll see how to scroll in the next section when talking about adding interaction
    to the EPG, but we have just introduced the movement of the channel part. Right
    now, we are only rendering each channel as an icon, but, to have more information,
    we have added a toggle that makes the channel box, where we currently have the
    icon, become larger and draw the channel title next to the icon.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节讨论向电子节目指南添加交互时看到如何滚动，但我们刚刚引入了频道部分的移动。现在，我们只是将每个频道渲染为一个图标，但是为了获取更多信息，我们添加了一个切换功能，使当前有图标的频道框变得更大，并在图标旁边绘制频道标题。
- en: 'We''ve created a Boolean switch to track which state we are rendering and to
    draw the channel name if required:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个布尔开关来跟踪我们正在渲染的状态，并在需要时绘制频道名称：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The toggle is quite simple, as it just changes the channel box width target
    to `channelHeight`, so it''ll have square dimensions, or two times the `channelHeight`
    when drawing the text. The animation cycle will take care of animating the variable:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 切换非常简单，因为它只是将频道框宽度目标更改为`channelHeight`，这样它就会有正方形的尺寸，或者在绘制文本时是`channelHeight`的两倍。动画周期将负责动画化这个变量：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Interaction
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互
- en: So far, it's not really useful as we can't interact with it. To add interaction,
    we need to override the `onTouchEvent()` method from the View, as we have seen
    in previous chapters.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这并不是很有用，因为我们不能与它互动。要添加交互，我们需要从View中重写`onTouchEvent()`方法，正如我们在前面的章节中看到的。
- en: 'In our own implementation of onTouchEvent, we are mainly interested in the
    `ACTION_DOWN`, `ACTION_UP`, and `ACTION_MOVE` events. Let''s see the implementation
    we have done:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们自己的`onTouchEvent`实现中，我们主要对`ACTION_DOWN`、`ACTION_UP`和`ACTION_MOVE`事件感兴趣。让我们看看我们已经完成的实现：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method doesn't contain that much logic; it's just checking if we are dragging
    on the screen, calling `scrollScreen` with the drag amount delta from the last
    event, and, in the case where we haven't dragged and just pressed on the channel
    box, triggering the toggle to make the channel box bigger or smaller.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法并没有太多逻辑；它只是在检查我们是否在屏幕上拖动，用上一次事件的拖动量差值来调用`scrollScreen`方法，并且，在只是点击频道框而没有拖动的情况下，触发切换以使频道框变大或变小。
- en: 'The `scrollScreen` method simply updates the `scrollXTarget` and `scrollYTarget` and
    checks its boundaries:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollScreen`方法简单地更新`scrollXTarget`和`scrollYTarget`并检查其边界：'
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Also, it''s highly important to call `invalidate` to trigger a redraw event.
    On the `onDraw()` event itself, we check if all animations are finished and trigger
    more redraw events if needed:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，调用`invalidate`以触发重绘事件非常重要。在`onDraw()`事件本身中，我们检查所有动画是否完成，如果需要，则触发更多的重绘事件：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The actual implementation of `missingAnimations` is quite straightforward:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`missingAnimations`的实际实现非常直接：'
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We're just checking all properties that can be animated if their difference
    from their target value is smaller than a predefined threshold. If only one is
    bigger than this threshold, we need to trigger more redraw events and animation
    cycles.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是检查所有可以动画的属性，如果它们与目标值的差小于预定义的阈值。如果只有一个大于这个阈值，我们需要触发更多的重绘事件和动画周期。
- en: Zooming
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩放
- en: As we are rendering a box for each TV program and its size is directly determined
    by the TV program duration, it might happen that TV program titles will be larger
    than its rendered box. In those cases, we might want to read some more parts of
    the title, or, at other times, we may like to compress things a bit so we can
    have an overall picture of what will be on TV later that day.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们为每个电视节目渲染一个盒子，其大小直接由电视节目持续时间决定，可能会出现电视节目标题比其渲染的盒子大的情况。在这些情况下，我们可能想要阅读标题的更多部分，或者在其它时候，我们可能想要稍微压缩一下，以便我们可以了解那天稍后电视上会有什么节目。
- en: 'To solve this, we can implement a zooming mechanism by pinching on our device
    screen on top of our EPG widget. We can apply this zooming directly to the `timeScale`
    variable, and, as we have used it everywhere for all calculations, it''ll keep
    everything synchronized:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以在我们的EPG小部件上通过在设备屏幕上捏合来实现缩放机制。我们可以将这种缩放直接应用到`timeScale`变量上，并且由于我们在所有计算中都使用了它，它将保持一切同步：
- en: '[PRE26]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To simplify it, let's use the `SimpleOnScaleGestureListener`, which allows us
    to override only the methods we'd like to use.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们使用`SimpleOnScaleGestureListener`，它允许我们只重写我们想要使用的方法。
- en: 'Now, we need to modify the `onTouchEvent` to let the `scaleDetector` instance
    process the event as well:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要修改`onTouchEvent`，让`scaleDetector`实例也处理这个事件：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We've also added a check to see if we are zooming. We'll update this variable
    in the `ScaleDetector` implementation, but the concept is to avoid scrolling the
    view, or processing drag events, if we are already zooming.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个检查，看看我们是否正在缩放。我们将在`ScaleDetector`实现中更新这个变量，但概念是避免在正在缩放时滚动视图或处理拖动事件。
- en: 'Let''s now implement the `ScaleDetector`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现`ScaleDetector`：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We''re basically doing two different things. First, we adjust the `timeScale`
    variable from half the default value to four times the default value:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上在做两件事情。首先，我们将`timeScale`变量从默认值的一半调整到默认值的四倍：
- en: '[PRE29]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Also, we adjust the scroll position to avoid an unpleasant effect when scaling.
    By adjusting the scroll position, we are trying to keep the focus of the pinch
    at the same position, even after zooming in or out.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们调整滚动位置以避免缩放时的不良效果。通过调整滚动位置，我们试图保持捏合焦点的位置不变，即使放大或缩小后也是如此。
- en: '[PRE30]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For more information about the `ScaleDetector` and gestures, check out the official
    Android documentation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ScaleDetector`和手势的更多信息，请查看官方Android文档。
- en: Configurations and Extensions
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和扩展
- en: If want to create a custom view that is usable by many people, it needs to be
    customizable. The EPG is no exception. In our initial implementation, we hardcoded
    some colors and values, but let's see how we can extend these functionalities
    and make our EPG customizable.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想创建一个可供多人使用的自定义视图，它需要是可定制的。电子节目指南（EPG）也不例外。在我们的初步实现中，我们硬编码了一些颜色和值，但让我们看看如何扩展这些功能，使我们的EPG可自定义。
- en: Making it configurable
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使其可配置
- en: 'In the initial chapters of this book, we introduced how to add parameters and,
    that way, easily customize our custom view. Following the same principles, we
    have created an `attrs.xml` file with all the customizable parameters:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的初始章节中，我们介绍了如何添加参数，这样就可以轻松自定义我们的自定义视图。遵循同样的原则，我们创建了一个`attrs.xml`文件，其中包含了所有可自定义的参数：
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There are many other variables that could be added as parameters, but these
    are the main customizations from the point of view of the custom view look and
    feel.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加许多其他变量作为参数，但从自定义视图的外观和感觉角度来看，这些是主要的自定义功能。
- en: Also, in our class constructor, we have added the code to read and parse these
    parameters. In a case where they're not present, we'd default to the previous
    values we hardcoded.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的类构造函数中，我们还添加了读取和解析这些参数的代码。在它们不存在的情况下，我们会默认使用我们之前硬编码的值。
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To make it simpler and clearer for anyone trying to customize it, we can do
    a small change. Let''s redefine the parameters that map directly to pixel sizes
    as dimensions instead of floats:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让任何尝试自定义它的人更简单、更清晰，我们可以进行一个小改动。让我们将直接映射到像素大小的参数重新定义为尺寸，而不是浮点数：
- en: '[PRE33]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Update the parsing code to the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将解析代码更新为以下内容：
- en: '[PRE34]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: By using `getDimension` instead of `getFloat`, it'll automatically convert dimensions
    set as density pixels to actual pixels. It'll not do that transformation to the
    default value, so we still need to do the multiplication by the `screenDensity`
    ourselves.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getDimension`而不是`getFloat`，它会自动将设置为密度像素的尺寸转换为实际像素。它不会对默认值进行这种转换，因此我们仍然需要自己乘以`screenDensity`。
- en: 'Finally, we need to add these configurations in the `activity_main.xml` layout
    file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要在`activity_main.xml`布局文件中添加这些配置：
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can see the result of these changes in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下屏幕截图中看到这些更改的结果：
- en: '![](img/522de8ec-8446-4814-a103-40d84612f4ba.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/522de8ec-8446-4814-a103-40d84612f4ba.png)'
- en: Implementing callbacks
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现回调
- en: Another critical functionality from our EPG that we haven't covered yet is the
    ability to actually do something when clicking on a TV program. If we want to
    do something useful with our EPG, rather than just showing the titles of what
    is coming, we must implement this functionality.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有介绍EPG的另一个关键功能，即点击电视节目时实际执行某些操作的能力。如果我们想用我们的EPG做一些有用的事情，而不仅仅是展示即将到来的标题，我们必须实现这个功能。
- en: This implementation is quite straightforward and will handle the logic to an
    external listener or callback. It would also be quite easy to modify the source
    code to implement some custom behavior on the EPG itself.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现相当直接，将处理逻辑传递给外部监听器或回调。修改源代码以在EPG本身上实现一些自定义行为也相对容易。
- en: 'To begin, we create a new interface inside the EPG class with one single method:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在EPG类中创建一个新的接口，带有一个单一的方法：
- en: '[PRE36]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This method will be called whenever we click on a TV program, and whoever is
    implementing this callback will get both the `Channel` and the TV `Program`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们点击电视节目时，都会调用这个方法，实现这个回调的任何人都会同时获得`Channel`和电视`Program`。
- en: 'Now, let''s modify the `onTouchEvent()` method to handle this new functionality:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改`onTouchEvent()`方法以处理这个新功能：
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In our previous code, we were checking only if we clicked on the channel area
    of the screen. Now we can use the other area to detect if we have clicked inside
    a TV program.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的代码中，我们只检查是否点击了屏幕的频道区域。现在我们可以使用另一个区域来检测我们是否点击了电视节目内部。
- en: 'Let''s now implement the `clickProgram()` method:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现`clickProgram()`方法：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We first convert the horizontal position where the user clicks into a timestamp,
    and, with the vertical position of the touch event, we can determine the channel.
    With the channel and the timestamp, we could check which program the user has
    clicked inside and call the callback with that information.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将用户点击的水平位置转换成时间戳，结合触摸事件的垂直位置，我们可以确定频道。有了频道和时间戳，我们就可以检查用户点击了哪个节目，并带着这些信息调用回调函数。
- en: 'In the GitHub example, we added a dummy listener that will only log the channel
    and program clicked:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub示例中，我们添加了一个虚拟的监听器，它只记录被点击的频道和节目：
- en: '[PRE39]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: There is also a `populateDummyChannelList()` method in this Activity `onCreate`.
    This method will only populate random channel and TV program data and should be
    removed if connecting with a real EPG data provider.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Activity的`onCreate`中还有一个`populateDummyChannelList()`方法。这个方法只会填充随机的频道和电视节目数据，如果与真实的电子节目指南（EPG）数据提供者连接，应该移除这个方法。
- en: The whole example can be found in the `Example33-EPG` folder on the GitHub repository.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 整个示例可以在GitHub仓库的`Example33-EPG`文件夹中找到。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to build a simple EPG with many functionalities,
    but we have probably left many others without an implementation. For instance,
    our TV program rendering is rather simple, and we could add way more information
    inside the TV program box, such as the duration, start time, and end time, or
    even show the TV program description directly there.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何构建一个具有许多功能的简单EPG，但我们可能还留下许多其他功能没有实现。例如，我们的电视节目渲染相当简单，我们可以在电视节目框中添加更多信息，比如持续时间、开始时间和结束时间，甚至可以直接显示电视节目描述。
- en: Feel free to take what's in the GitHub repository and play with it, add new
    customizations or functionalities, and adapt it to your needs.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请随意使用GitHub仓库中的内容，进行操作、添加新的自定义或功能，并根据您的需要进行调整。
- en: We haven't specifically talked about performance that much, but we have tried
    to minimize the amount of allocations inside our `onDraw` method and the methods
    called by it as much as possible, and we have reduced what we are drawing on the
    screen as much as possible and don't even process elements that will fall outside
    the screen boundaries.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并没有特别讨论性能问题，但我们尽可能减少了`onDraw`方法及其调用方法中的内存分配数量，并尽可能减少了屏幕上的绘制内容，甚至不处理那些将落在屏幕边界之外的元素。
- en: Taking into account these details is critical if we want our custom view, or
    the EPG in this case, to be snappy, responsive, and scale with more channels and
    TV programs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望自定义视图（在这个案例中是EPG）能够快速响应、伸缩以适应更多频道和电视节目，那么考虑这些细节是至关重要的。
- en: In the next chapter we will be building another complex custom view that we
    can use to draw graphs on our Android applications.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建另一个复杂的自定义视图，可以用它在我们的Android应用程序上绘制图表。
