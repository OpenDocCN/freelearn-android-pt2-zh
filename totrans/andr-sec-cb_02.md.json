["```kt\n    sudo apt-get install unzip\n\n    ```", "```kt\n    [path-to-your-sdk-install]/android create avd –n [your avd name]  –t [system image target]\n\n    ```", "```kt\n    C:\\[path-to-your-sdk-install]\\android create avd –n [your avd name] –t [system image target]\n\n    ```", "```kt\n    [path-to-your-sdk-install]/emulator –avd [your avd name] –no-boot-anim\n\n    ```", "```kt\n    adb pull /system/app/Contacts.apk\n\n    ```", "```kt\n    cp Contacts.apk Contacts.zip\n\n    ```", "```kt\n    unzip Contacts.zip\n\n    ```", "```kt\n    keytool –printcert –file META-INF/CERT.RSA\n\n    ```", "```kt\n    cat [path-to-unzipped-apk]/META-INF/CERT.SF\n\n    ```", "```kt\n    apt-get install openssl\n\n    ```", "```kt\n    openssl pcks7 –inform DER –in META-INF/CERT.RSA –noout –print_certs –text\n\n    ```", "```kt\n    rm –r [path-to-unzipped-apk]/META-INF\n\n    ```", "```kt\n    keytool –genkey –v -keystore [nameofkeystore] –alias [your_keyalias] –keyalg RSA –keysize 2048 –validity [numberofdays]\n\n    ```", "```kt\n    jarsigner –verbose –sigalg MD5withRSA –digestalg SHA1 –keystore [name of your keystore] [your .apk file] [your key alias]\n\n    ```", "```kt\njarsigner –verbose –sigalg MD5withRSA –digestalg SHA1 –keystore [nameof your keystore] [your .apk file] [your key alias]\n\n```", "```kt\n    jarsigner –verify –verbose [path-to-your-apk]\n\n    ```", "```kt\n    C:\\\\[path to your sdk]\\sdk\\platform-tools\\\n\n    ```", "```kt\n    /[path to your sdk]/sdk/platform-tools/\n\n    ```", "```kt\n    C:\\[path-to-apktool]\\apktool -help\n\n    ```", "```kt\n    /[path-to-apk-too]/apktool -help\n\n    ```", "```kt\n    /[path-to-apktool]/apktool d -f –s [apk file] decoded-data/\n\n    ```", "```kt\n    C:\\[path-to-apktool]/apktool d –f –s [apk file] decoded-data/\n\n    ```", "```kt\n    ~/adt-bundle-linux-x86_64/sdk/platform-tools/apktool d –f –s Contacts.apk decoded\n\n    ```", "```kt\n    vi [path-to-your-decoded-data]/AndroidManifest.xml\n\n    ```", "```kt\n    cat [path-to-your-decoded-data]/AndroidManifest.xml\n\n    ```", "```kt\n    C:\\Windows\\System32\\notepad.exe [path-to-decoded-data]\\AndroidManifest.xml\n\n    ```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<manifest>\n\n  <uses-permission /> <permission /> <permission-tree /> <permission-group /> <instrumentation /> <uses-sdk /> <uses-configuration /> <uses-feature /> <supports-screens /> <compatible-screens /> <supports-gl-texture />\n  <application>\n    <activity>\n      <intent-filter>\n        <action />\n        <category />\n        <data />\n      </intent-filter>\n      <meta-data />\n    </activity>\n    <activity-alias>\n      <intent-filter> . . . </intent-filter>\n      <meta-data />\n    </activity-alias>\n    <service>\n      <intent-filter> . . . </intent-filter>\n      <meta-data/>\n    </service>\n    <receiver>\n      <intent-filter> . . . </intent-filter>\n      <meta-data />\n    </receiver>\n\n    <provider>\n      <grant-uri-permission />\n      <meta-data />\n      <path-permission />\n    </provider>\n    <uses-library />\n  </application>\n</manifest>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n```", "```kt\n<manifest>\n```", "```kt\n<uses-permission android:name=\"string\"/>\n```", "```kt\n<uses-permission android:name=\"android.permission.CAMERA\">\n```", "```kt\n<permission android:description=\"string resource\" android:icon=\"drawable resource\" android:label=\"string resource\" android:name=\"string\" android:permissionGroup=\"string\" android:protectionLevel=[\"normal\" | \"dangerous\" | \"signature\" | \"signatureOrSystem\"] />\n```", "```kt\n<application>\n```", "```kt\n<activity\n  android:exported=[\"true\" | \"false\"]\n  android:name=\"string\"\n  android:permission=\"string\"\n  android:enabled=[\"true\" | \"false\"]\n  android:permission=\"string\"\n...other attributes have been omitted\n>\n```", "```kt\n`android:exported`: This attribute is used to decide whether the components of other applications will be able to interact with this element. All application components—services, broadcast receivers, and content providers—have this attribute in common.\n\nWhat's interesting here is the default behavior of this attribute, if it is not explicitly set for this element. Whether or not it will be \"`exported`\" partly depends on whether intent filters are defined for the activity or not. If intent filters are defined and the value is not set, the Android system assumes that the component intends to respond to interaction from external application components and will allow them to interact with it, given that the initiator of the interaction has the necessary permissions to do so. If no intent filters are defined and the attribute value is not set, the Android application framework will only allow explicit intents to be resolved against the component.\n\nThere is another caveat. Because of the way in which older Android API levels work, there are attributes that can override the default value; for applications that set either `android:minSdkVersion` or `android:targetSdkVersion` to 16 or lower, the default value is `true`. For applications that set `android:minSdkVersion` or `android:targetSdkVersion` as equal to or higher than 17, the default value is `false`.\n\nThis is very valuable information because it will help us determine an application's attack surface—it determines how potentially malicious applications will interact with its components—and quite literally determine the difference between a good security assessment and an ineffective one.\n\n`android:name`: This attribute specifies the class file that contains the Java code for the component; I've added it here because you will need to know this value should you want to launch explicit intents aimed at a given component. All component types have this attribute in common.`android:permission`: This attribute is used to specify the permission required to interact with the component.`android:enabled`: This attribute is used to indicate whether the system is allowed to start/instantiate the component:\n\n```", "```kt\n\nIt is used to define the attributes of a service; some XML attributes are unique to services, namely:\n\n*   `android:isolatedProcess`: This attribute indicates if the service will run in an isolated process with no permissions.\n\n    ```", "```kt\n\n    This element declares the broadcast receiver component:\n\n    ```", "```kt\n\n    It defines the components of the content provider type. Seeing that the content providers are basically database-like components, they would need to be able to define the controls for accessing their data structures and content. The following attributes help them to do just that:\n\n*   `android:writePermission`: This attribute specifies the name of the permission components from other applications that this content provider is in charge of. It is a must-have in order to change or augment data structures.\n*   `android:readPermission`: This attribute specifies the name of the permission components from other applications that this content provider is in charge of. It is a must-have in order to read from or query the data structures.\n*   `android:authorities`: This attribute specifies a list of names identifying the URI authorities. Usually, these are the Java classes that implement the provider: \n\n    ```", "```kt\n\n```", "```kt\n    adb shell\n\n    ```", "```kt\n    pm list packages\n\n    ```", "```kt\n    am start [package name]\n\n    ```", "```kt\nam start <INTENT> < --user UID | current >\n\n```", "```kt\nam start –n com.android.MyPackage/com.android.MyPackageLaunchMeActivity –e MyInput HelloWorld –a android.intent.MyPackageIntentAction –c android.intent.category.MyPackageIntentCategory\n\n```", "```kt\nam startservice <package name>/<component name> <INTENT>\n\n```", "```kt\nam startservice com.android.app/com.android.app.service.ServiceComponent\nyou can also specify\n\n```", "```kt\nkill < --user UID | current > <package>\n\n```", "```kt\n    adb shell [options]\n\n    ```", "```kt\n    cd /data/data/\n\n    ```", "```kt\n    ls –alR */\n\n    ```", "```kt\n    ls –alR */databases/\n\n    ```", "```kt\n    ls –alR */files/\n\n    ```", "```kt\n    ls –al */*/*.xml\n    ls –al */*/*.png\n    ls –al */*/*.mp3\n\n    ```", "```kt\n    adb pull /data/data/[package-name]/[filepath] \n\n    ```", "```kt\n    adb pull /data/data/[package-name]/databases/[database-filename] \n\n    ```", "```kt\n    sqlite3 [database-filename]\n\n    ```"]