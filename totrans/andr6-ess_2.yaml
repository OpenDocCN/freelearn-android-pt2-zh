- en: Chapter 2. App Links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the major improvements to the new Android Marshmallow version is powerful
    **app linking**. It allows the association of your app with your owned web domain.
    With this association, you as a developer allow the system to determine the default
    app that should handle a particular web link and skip prompting users to select
    an app. Saving clicks means less friction, which means that you reach the content
    faster; this leads to users and developers being happy. In this chapter, we will
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Android Intent system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a website association
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering app link verification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App link settings and management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing app links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android Intent system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Almost every developer knows what an **Android Intent** system is, but we will
    explain it a bit and lay out the basic principles required to understand the app
    links feature. The Android Intent system can be found in the Android platform;
    this allows the passing of data in a small, simple package. Intent means that
    we want to perform an action. You may already know about the basic intents:'
  prefs: []
  type: TYPE_NORMAL
- en: '`startActivity()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startActivityForResult()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startService()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sendBroadcast()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows an Android Intent system for the `startActivity()`
    and `onCreate()` intents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android Intent system](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: http://developer.android.com/guide/components/intents-filters.html'
  prefs: []
  type: TYPE_NORMAL
- en: The Android Intent system is a flexible mechanism that is used to enable apps
    to handle content and requests. Multiple apps may declare matching **URI** (short
    for **Uniform Resource Identifier**) patterns in their **intent filters**. When
    a user clicks on a web link that does not have a default **launch handler**, the
    platform may display a dialog for the user to select from a list of apps that
    have declared matching intent filters.
  prefs: []
  type: TYPE_NORMAL
- en: Intents are also used to trigger actions across the system, and some of these
    actions are system-defined, such as `ACTION_SEND` (referred to as the *share*
    action), where you as an app developer can share/send specific information to
    another application in order to complete an action required by a user.
  prefs: []
  type: TYPE_NORMAL
- en: Until Android Marshmallow, browsers handled each link clicked on the Web, and
    the system checked whether a **custom URI scheme** was available. Your application
    could handle specific custom actions via the custom URI scheme. This was tricky
    at times and didn't allow the handling of links under an entire web domain. Now,
    it's possible. Android Marshmallow's added support for app links allows you, as
    an app developer, to associate an app with a web domain. Automatically, this will
    allow you to determine the default app that will handle a particular web link
    instead of showing the selected application to handle the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you wish to read more about intents, you can go to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/components/intents-filters.html](http://developer.android.com/guide/components/intents-filters.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a website association
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You as an app developer as well as a website owner need to declare a website
    association with an app. The declaration is done by hosting a JSON file, which
    is specifically named `assetlinks.json`. The file must reside in a specific location
    on the domain in question, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://<domain>:<optional port>/.well-known/assetlinks.json`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This file is accessed and verified over the HTTPS protocol and not HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Why this file?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The JSON file holds information about the Android application that will be
    the default handler for the URLs under this domain. In the JSON file, you must
    have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some elements of the preceding structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`package_name`: This is the package name from your app''s **manifest**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sha256_cert_fingerprints`: This is the SHA-256 fingerprint of your app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the following command if you don''t have this **SHA** (short for **Secure
    Hash Algorithm**):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Triggering app link verification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can request automatic verification for any app links declared in the `assetlinks.json`
    file. Requesting a verification is done by adding the `android:autoVerify` attribute
    to each intent filter in the manifest and setting it to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we own a WhatsApp application and domain. We want to autoverify an
    intent filter that has the `android.intent.action.VIEW` action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample activity from WhatsApp that handles app links and
    the autoverification attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `android:autoVerify` attribute alerts the platform to verify app links when
    the app is installed. If the app link's verification fails, your app will not
    be set as the preferred app to handle these links. If there is no preferred app
    to handle these links whenever a user opens one of them, a dialog to choose an
    app is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: If a user has used the system settings and set an app as the preferred app,
    then the link will go directly to the app but not because the verification was
    successful.
  prefs: []
  type: TYPE_NORMAL
- en: App link settings and management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For easy management, you can enter the system settings and tweak the URL handling
    by navigating to **Settings** | **Apps** | **App info** | **Open by default**.
  prefs: []
  type: TYPE_NORMAL
- en: '![App link settings and management](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Testing app links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with every new feature we add, we must test the app links feature that we
    will add to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Checking manifest and listing domains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first step is to go over the manifest and make sure all the domains are
    registered correctly and all intent filters are well defined. Only the links/domains
    under all the criteria mentioned in the following bullets are the ones we need
    to test:'
  prefs: []
  type: TYPE_NORMAL
- en: The `android:scheme` attribute with a value of HTTP or HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `android:host` attribute with a domain URI pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `category` element, which can be one of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.intent.action.VIEW`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.intent.category.BROWSABLE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Digital Asset Links API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the **Digital Asset Links API** to confirm that our link''s JSON
    file is properly hosted and defined using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Testing our intent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have confirmed that the hosted JSON file is valid, we will install
    the app on our device and wait for at least 20-30 seconds for the verification
    process to complete. After this, we can check whether the system has verified
    our app and set the correct link-handling policies using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`adb shell am start -a android.intent.action.VIEW \ -c android.intent.category.BROWSABLE
    \ -d "http://<DOMAIN>:<port>"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we take YouTube videos, we can trigger the YouTube app to open
    the video directly using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Checking policies using adb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Android Debug Bridge** (**adb**) can help us check existing link-handling
    policies for all applications in our device using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is the result of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking policies using adb](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another option is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is the result of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking policies using adb](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We must wait at least 20-30 seconds after the installation for the system to
    complete the verification process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listing indicates apps'' association with domains per user:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Package**: This refers to the app''s package name, as declared in its manifest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domains**: This refers to the list of hosts whose web links are handled by
    this app; blank spaces are used as delimiters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: This refers to the current link-handling setting for this app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing the verification and `android:autoVerify="true"` will show a status
    of `always`.
  prefs: []
  type: TYPE_NORMAL
- en: The hexadecimal number after the status (as shown in the preceding screenshot)
    is the Android system's record of the user's app linkage preferences. It does
    not indicate that the verification has succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The user can change the app link settings before the end of the verification
    process, which means that we may see a false positive for a successful verification.
    User preferences take precedence over programmatic verification, so we will see
    that the link goes directly to our app without displaying a dialog, as if verification
    had succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw, app linking has become powerful in Android Marshmallow. This allows
    you, the app developers, help the system better decide how to act. Handling web
    URLs will give you wider exposure, a bigger funnel for your apps, and better experience,
    which you can provide to your users (which in turn leads to better ratings, more
    downloads, and vice versa).
  prefs: []
  type: TYPE_NORMAL
- en: App linking is simple to implement, easy to understand, and is a must-have feature
    in the mobile/web world today. While app linking enables better action handling
    for those using your applications, users can have multiple devices, expecting
    the same behavior on each device, and would be more engaged if their data and
    action handling happens smoothly. This brings us to our next chapter, which will
    teach you how to back up user settings and more.
  prefs: []
  type: TYPE_NORMAL
