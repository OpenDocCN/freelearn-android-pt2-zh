- en: Chapter 2. Creating a Test Project Using Robotium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will guide you in creating your first test project for Android
    using the Robotium Framework. First, let's implement a simple calculator android
    application. Then, using this **Application Under Test** (**AUT**), we will look
    into the process of creating a Robotium test project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AUT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create a simple calculator application that allows
    the entry of two numbers. The user can perform the following two operations on
    these numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: Addition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These operations are selectable via Spinner control. Spinner is similar to a
    combo box present in other coding languages such as HTML, and C#. The **Get Result**
    button is present to get the operational result in the bottom-aligned TextView.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the ZCalculator app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the AUT](img/8010OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create the AUT, follow the listed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an **Android Application Project** by navigating to **File** | **New**
    | **Android Application Project** in Eclipse IDE.![Creating the AUT](img/8010OS_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the application details, as in the following screenshot, and click on
    the **Next** button:![Creating the AUT](img/8010OS_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the default options, as they are in the following screenshot, and click
    on the **Next** button:![Creating the AUT](img/8010OS_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this Android application project, we will configure the launcher icon with
    the default value set, as in the following screenshot, and click on the **Next**
    button:![Creating the AUT](img/8010OS_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create Activity** checkbox if it is not checked and select **Blank
    Activity**, as in the following screenshot, to create a default blank activity
    class in the project:![Creating the AUT](img/8010OS_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Main` in the **Activity Name** field, as in the following screenshot,
    and click on the **Finish** button to create the Android application project:![Creating
    the AUT](img/8010OS_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Android project is now set up. You can refer to the ZCalculator project
    code base, given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following code in your `Main.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following code in the `main.xml` layout file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `String.xml` file with the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `array.xml` file with the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, update the `AndroidManifest.xml` file with the following activity action
    and launcher entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a test project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's proceed and create a test project to test the ZCalculator application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Eclipse, go to **New** and from the **Select** wizard, select **Android
    Test Project**. Enter a proper project name and click on the **Next** button.
    It is recommended that the test project name follow a naming convention such as
    "Test + AUT name." That''s why this test app is named `TestZCalculator`, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a test project](img/8010OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, select the AUT or the target project (in our case, ZCalculator), as in
    the following screenshot, and click on the **Finish** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a test project](img/8010OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a build target, as shown in the following screenshot, (SDK to target)
    and click on the **Finish** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a test project](img/8010OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your test project is successfully created. Let's create a test case class to
    test ZCalculator's main class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a test case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a test case, follow the listed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a test case, right-click on the `com.calculator.test` package in the
    **Package Explorer** window and navigate to **New** | **JUnit Test Case**, as
    shown in the following screenshot. If this package is not present, create it under
    the **src** branch:![Creating a test case](img/8010OS_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **New JUnit Test Case** window, most of the fields are already filled.
    Just assign the name of the test case as `MainTest`, as we are going to test the
    `Main` class in ZCalculator. Keep the **setUp()**, **tearDown()**, and the **constructor**
    option checkboxes checked in the method stubs section and click on the **Finish**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `setUp()` and `tearDown()` methods are part of the `junit.framework.TestCase`
    class. The `setUp()` method is used to initialize the data needed to run the tests
    and reset environment variables. The `tearDown()` method is used to call the garbage
    collection to force the recovery of memory. It is called after each `@Test` method,
    as shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating a test case](img/8010OS_02_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once it is completed, a test case `MainTest.java` will be created under the
    `com.calculator.test` package, as shown in the following screenshot. Also, the
    three stub methods will be generated automatically in the `MainTest` class:![Creating
    a test case](img/8010OS_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the Robotium library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All versions of the Robotium JAR file can be downloaded from [https://code.google.com/p/robotium/downloads/list](https://code.google.com/p/robotium/downloads/list).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Robotium library can be added by following the listed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to add the Robotium JAR as a reference library to the test project.
    To reference this, right-click on your project and navigate to **Build Path**
    | **Configure Build Path**, as shown in the following screenshot:![Adding the
    Robotium library](img/8010OS_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Java Build Path** panel, go to the **Libraries** tab and click on the
    **Add External JARs…** button, as shown in the following screenshot. Then, provide
    a correct Robotium library (preferably the latest version) and add it to the list.
    The alternative way to achieve this is to copy the JAR file to the `lib` directory
    of the test:![Adding the Robotium library](img/8010OS_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is mostly observed in the latest SDK versions (mostly API 17 and above)
    that the **java.lang.NoClassDefFoundError: com.jayway.android.robotium.solo.Solo**
    error occurs when the Robotium JAR file is not exported. So, to export it, go
    to the **Order and Export** tab in the **Java Build Path** section and check the
    Robotium JAR file in the list, as shown in the following screenshot, and click
    on the **OK** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to have Android Private Libraries checked; otherwise the test
    won't start.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Adding the Robotium library](img/8010OS_02_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Adding the package name in AndroidManifest.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you provide the reference of the Robotium library to the test project,
    open the `AndroidManifest.xml` file and change the target package name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the preceding change in the `AndroidManifest.xml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the package name in AndroidManifest.xml](img/8010OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Robotium's test case code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going into the actual code, there are some classes and methods of the
    Robotium framework you should be familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: '`Solo` is the class of Robotium that is used for testing. It is initialized
    with the instrumentation of the test case and the first activity to test. This
    is performed in the `setUp()` method. The `Solo` class provides APIs with easy
    calling of Android UI components, for example, the `enterText()` API puts the
    text in an EditText view. We will see most of these APIs in the following section.'
  prefs: []
  type: TYPE_NORMAL
- en: The test case method name in the JUnit should always start with the word "test."
    Since Robotium is built on JUnit, we have the `testZCalculatorBlackBox()` method
    for the test case. You can add any number of test case methods in a test case
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following test case, we will access the UI components of ZCalculator
    and carry out the following operations in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the **Edit Text** field for inputs (first and second numbers).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter any value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access and click on **Spinner** to select the operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access and click on the **Get Result** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put the following code into the `MainTest.java` file and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Running the test case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now done with creating a test project with a valid test case for ZCalculator.
    It's time to run our test case.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the test project or test case file, `MainTest.java`, and select
    **Run as Android JUnit test**. Select **Android Emulator** from the select device
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to run a particular test case, right-click on the file and then
    select **run as Android JUnit Test**. To run all the test cases available in the
    test project, right-click on the project itself and select **run as Android JUnit
    Test**, it will run all the test cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Robotium''s test case for ZCalculator will work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ZCalculator application will be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first and the second numbers will be automatically entered in the first
    and second **Edit Text** fields, and then the spinner will be clicked on for selecting
    the operation (it will take Addition first).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Get Result** button will be clicked on and the result will be displayed
    in the result text view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The assert statement will check for the valid operation result. This process
    will continue for Subtraction and if every assert is true, the test case is passed,
    indicated by a green bar in the JUnit tab, as depicted in the following screenshot:![Running
    the test case](img/8010OS_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The application and instrumentation must be installed beforehand, if you want
    to run the test project via the Command Line. If they are already installed, then
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Before running the preceding command, note that you run it from the location
    where `adb.exe` is present, or add the `adb.exe` path to the environment path's
    variable list to access it from anywhere in the system.
  prefs: []
  type: TYPE_NORMAL
- en: You can find `adb` in the `platform-tools` folder inside the Android SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to create a test project using the Robotium
    Framework. Until now, you have learnt the basic flow required to create a simple
    test app using Robotium. It is time to go deeper into the framework and understand
    different Robotium API calls with their usage. In the next chapter, you will be
    introduced to the `Solo` class and information about APIs present in it.
  prefs: []
  type: TYPE_NORMAL
