- en: Chapter 1. The Android Security Model – the Big Picture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 安卓安全模型 – 大局观
- en: Welcome to the first chapter of *Android Application Security Essentials*!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读《安卓应用安全基础》的第1章！
- en: The Android stack is different in many ways. It is open; more advanced than
    some of the other platforms, and imbibes the learning from attempts to develop
    a mobile platform in the past. In this first chapter, we introduce the basics
    of the Android security model from the kernel all the way to the application level.
    Each security artifact introduced in this chapter is discussed in greater detail
    in the following chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓系统在许多方面与众不同。它是开放的，比其他一些平台更先进，并汲取了之前开发移动平台的经验教训。在本章中，我们将从内核到应用层，介绍安卓安全模型的基础知识。本章中引入的每个安全工件事后都会在后续章节中进行更详细的讨论。
- en: We kick off the chapter with explaining why install time application permission
    evaluation is integral to the security of the Android platform and user data.
    Android has a layered architecture and a security evaluation of each architectural
    layer is discussed in this chapter. We end the chapter with a discussion of core
    security artifacts such as application signing, secure data storage on the device,
    crypto APIs, and administration of an Android device.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从解释为什么安装时应用程序权限评估对安卓平台和用户数据的安全至关重要开始本章。安卓具有分层架构，本章将讨论每个架构层的安全评估。我们以讨论核心安全工件事物作为本章的结束，如应用程序签名、设备上的安全数据存储、加密API以及安卓设备的管理等。
- en: Installing with care
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谨慎安装
- en: One of the differentiating factors of Android from other mobile operating systems
    is the install time review of an application's permissions. All permissions that
    an application requires have to be declared in the application's manifest file.
    These permissions are capabilities that an application requires for functioning
    properly. Examples include accessing the user's contact list, sending SMSs from
    the phone, making a phone call, and accessing the Internet. Refer [Chapter 3](ch03.html
    "Chapter 3. Permissions"), *Permissions*, for a detailed description of the permissions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓与其他移动操作系统不同的一个特点是应用安装时的权限审查。应用程序所需的所有权限都必须在其清单文件中声明。这些权限是应用程序正常运行所需的权限，例如访问用户的联系人列表、从手机发送短信、拨打电话以及访问互联网等。详细描述这些权限的内容请参考[第3章](ch03.html
    "第3章. 权限")，*权限*。
- en: When a user installs an application, all permissions declared in the manifest
    file are presented to the user. A user then has the option to review the permissions
    and make an informed decision to install or not to install an application. Users
    should review these permissions very carefully as this is the only time that a
    user is asked for permissions. After this step, the user has no control on the
    application. The best a user can do is to uninstall the application. Refer to
    the following screenshot for reference. In this example, the application will
    track or access the user location, it will use the network, read the user's contact
    list, read the phone state, and will use some development capabilities. When screening
    this application for security, the user must evaluate if granting a certain power
    to this application is required or not. If this is a gaming application, it might
    not need development tool capabilities. If this is an educational application
    for kids, it should not need access to the contact list or need to access the
    user location. Also be mindful of the fact that a developer can add their own
    permissions especially if they want to communicate with other applications that
    they have developed as well and may be installed on the device. It is the onus
    of the developer to provide a clear description of such permissions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户安装应用程序时，清单文件中声明的所有权限都会呈现给用户。用户可以审查这些权限，并做出是否安装应用的明智决定。用户应仔细审查这些权限，因为这是唯一一次要求用户授权。这一步骤之后，用户对应用程序的控制就极为有限，最多只能卸载应用。有关参考，请查看以下屏幕截图。在这个例子中，应用程序将追踪或访问用户位置，使用网络，读取用户联系人列表，读取手机状态，并使用某些开发能力。在安全审查此应用程序时，用户必须评估授予该应用程序某些权限是否必要。如果这是一个游戏应用，可能不需要开发工具能力。如果这是一个面向儿童的教育应用，它不应该需要访问联系人列表或用户位置。还要注意，开发者可以添加自己的权限，特别是如果他们想要与可能在设备上安装的其他自己开发的应用程序进行通信时。开发者有责任为这类权限提供清晰的描述。
- en: At install time, the framework ensures that all permissions used in the application
    are declared in the manifest file. The OS at runtime then enforces these permissions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装时，框架会确保应用程序中使用的所有权限都在清单文件中声明。操作系统在运行时会强制执行这些权限。
- en: '![Installing with care](img/5603OT_01_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![谨慎安装](img/5603OT_01_01.jpg)'
- en: Android platform architecture
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android平台架构
- en: Android is a modern operating system with a layered software stack. The following
    figure illustrates the layers in Android's software stack. This software stack
    runs on top of the device hardware. Android's software stack can run on many different
    hardware configurations such as smartphones, tablets, televisions, and even embedded
    devices such as microwaves, refrigerators, watches, and pens. Security is provided
    at every layer, creating a secure environment for mobile applications to live
    and execute. In this section, we will discuss the security provided by each layer
    of the Android stack.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android是一个具有分层软件堆栈的现代操作系统。下图说明了Android软件堆栈中的层。此软件堆栈运行在设备硬件之上。Android的软件堆栈可以运行在许多不同的硬件配置上，如智能手机、平板电脑、电视，甚至嵌入式设备如微波炉、冰箱、手表和笔。每一层都提供了安全性，为移动应用程序提供了一个安全运行和执行的环境。在本节中，我们将讨论Android堆栈每一层提供的安全保障。
- en: '![Android platform architecture](img/5603OT_01_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Android平台架构](img/5603OT_01_02.jpg)'
- en: Linux kernel
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux内核
- en: On top of the device hardware sits the **Linux kernel**. The Linux kernel has
    been in use for decades as a secure multi-user operating system, isolating one
    user from the other. Android uses this property of Linux as the basis of Android
    security. Imagine Android as a multi-user platform where each user is an application
    and each application is isolated from each other. The Linux kernel hosts the device
    drivers such as drivers for bluetooth, camera, Wi-Fi, and flash memory. The kernel
    also provides a mechanism for secure **Remote Procedure Calls** (**RPC**).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设备硬件之上是**Linux内核**。Linux内核已经被用作一个安全的多用户操作系统数十年，将一个用户与另一个用户隔离开来。Android使用Linux的此属性作为Android安全的基础。将Android想象成一个多用户平台，每个用户都是一个应用程序，每个应用程序都与其他应用程序隔离。Linux内核托管设备驱动程序，如蓝牙、摄像头、Wi-Fi和闪存驱动程序。内核还提供了一种安全的**远程过程调用**（**RPC**）机制。
- en: As each application is installed on the device, it is given a unique **User
    Identification** (**UID**) and **Group Identification** (**GID**). This UID is
    the identity of the application for as long as it is installed on the device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序在设备上安装时，都会被赋予唯一的**用户识别码**（**UID**）和**组识别码**（**GID**）。只要应用程序在设备上安装，这个UID就是应用程序的身份标识。
- en: Refer to the following screenshot. In the first column are all the application
    UIDs. Notice the highlighted application. Application `com.paypal.com` has the
    UID `app_8` and `com.skype.com` has the UID `app_64`. In the Linux kernel, both
    these applications run in their own processes with this ID.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下屏幕截图。第一列列出了所有应用程序的UID。请注意突出的应用程序。应用程序`com.paypal.com`具有UID `app_8`，而`com.skype.com`具有UID
    `app_64`。在Linux内核中，这两个应用程序都以其自己的进程运行，并使用这个ID。
- en: '![Linux kernel](img/5603OT_01_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Linux内核](img/5603OT_01_03.jpg)'
- en: Refer to the next screenshot. When we give the `id` command in the shell, the
    kernel displays the UID, GID, and the groups the shell is associated with. This
    is the process sandbox model that Android uses to isolate one process from the
    other. Two processes can share data with each other. The proper mechanics to do
    so are discussed in [Chapter 4](ch04.html "Chapter 4. Defining the Application's
    Policy File"), *Defining the Application's Policy File*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考下一张屏幕截图。当我们在壳层中输入`id`命令时，内核会显示UID、GID以及与壳层关联的组。这是Android用来将一个进程与另一个进程隔离的进程沙箱模型。两个进程可以相互共享数据。如何正确进行数据共享的机制将在[第4章](ch04.html
    "第4章. 定义应用程序的策略文件")，*定义应用程序的策略文件*中进行讨论。
- en: '![Linux kernel](img/5603OT_01_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Linux内核](img/5603OT_01_04.jpg)'
- en: Although most Android applications are written in Java, it is sometimes required
    to write native applications. Native applications are more complex as developers
    need to manage memory and device-specific issues. Developers can use the Android
    NDK toolset to develop parts of their application in C/C++. All native applications
    conform to Linux process sandboxing; there is no difference in the security of
    a native application and Java application. Bear in mind that just as with any
    Java application, proper security artifacts such as encryption, hashing, and secure
    communication are required.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数Android应用程序是用Java编写的，但有时需要编写本地应用程序。本地应用程序更为复杂，因为开发者需要管理内存和特定于设备的问题。开发者可以使用Android
    NDK工具集来用C/C++开发应用程序的部分。所有本地应用程序都符合Linux进程沙箱化；本地应用程序和Java应用程序的安全性没有区别。请记住，与任何Java应用程序一样，需要适当的加密、散列和安全的通信等安全构件。
- en: Middleware
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间件
- en: On top of the Linux kernel sits the middleware that provides libraries for code
    execution. Examples of such libraries are `libSSL`, `libc`, `OpenGL`. This layer
    also provides the runtime environment for Java applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux内核之上是提供代码执行库的中间件。这类库的例子有`libSSL`、`libc`、`OpenGL`。这一层还提供了Java应用程序的运行时环境。
- en: 'Since most users write their apps on Android in Java, the obvious question
    is: does Android provide a **Java virtual machine**? The answer to this question
    is no, Android does not provide a Java virtual machine. So a **Java Archive**
    (**JAR**) file will not execute on Android, as Android does not execute byte code.
    What Android does provide is a **Dalvik virtual machine**. Android uses a tool
    called `dx` to convert byte codes to **Dalvik Executable** (**DEX**).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数用户在Android上用Java编写应用程序，一个显而易见的问题是：Android是否提供了一个**Java虚拟机**？这个问题的答案是：不，Android没有提供Java虚拟机。因此，**Java归档文件**（**JAR**）在Android上无法执行，因为Android不执行字节码。Android提供的是**Dalvik虚拟机**。Android使用一个名为`dx`的工具将字节码转换为**Dalvik可执行文件**（**DEX**）。
- en: Dalvik virtual machine
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dalvik虚拟机
- en: Originally developed by Dan Bornstein, who named it after the fishing village
    of Dalvik in Iceland where some of his ancestors lived, Dalvik is a register-based,
    highly optimized, open-sourced virtual machine. Dalvik does not align with Java
    SE or Java ME and its library is based on **Apache Harmony**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Dalvik虚拟机最初由Dan Bornstein开发，他以冰岛的一个渔村Dalvik命名，那里住着他的部分祖先。Dalvik是一个基于寄存器、高度优化、开源的虚拟机。它与Java
    SE或Java ME并不一致，其库基于**Apache Harmony**。
- en: Each Java application runs in its own VM. When the device boots up, a nascent
    process called **Zygote** spawns a VM process. This Zygote then forks to create
    new VMs for processes on request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Java应用程序都在其自己的虚拟机中运行。当设备启动时，一个名为**Zygote**的原始进程会生成一个虚拟机进程。这个Zygote进程随后根据请求分叉以创建新的虚拟机进程。
- en: The main motivation behind Dalvik is to reduce memory footprint by increased
    sharing. The constant pool in Dalvik is thus a shared pool. It also shares core,
    read only libraries between different VM processes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Dalvik背后的主要动机是通过增加共享来减少内存占用。因此，Dalvik中的常量池是一个共享池。它还在不同的虚拟机进程之间共享核心的只读库。
- en: Dalvik relies on the Linux platform for all underlying functionality such as
    threading and memory management. Dalvik does have separate garbage collectors
    for each VM but takes care of processes that share resources.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Dalvik依赖Linux平台提供所有底层功能，如线程和内存管理。Dalvik为每个虚拟机设置了独立的垃圾收集器，但会处理共享资源的进程。
- en: Dan Bornstein made a great presentation about Dalvik at Google IO 2008\. You
    can find it at [http://www.youtube.com/watch?v=ptjedOZEXPM](http://www.youtube.com/watch?v=ptjedOZEXPM).
    Check it out!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Dan Bornstein在2008年的Google IO上关于Dalvik做了精彩的演讲。你可以在[http://www.youtube.com/watch?v=ptjedOZEXPM](http://www.youtube.com/watch?v=ptjedOZEXPM)找到它。去看看吧！
- en: Application layer
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用层
- en: Application developers developing Java-based applications interact with the
    application layer of the Android stack. Unless you are creating a native application,
    this layer will provide you with all the resources to create your application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 开发基于Java的应用程序的应用程序开发者与Android堆栈的应用层交互。除非你正在创建一个本地应用程序，否则这一层将为你提供创建应用程序所需的所有资源。
- en: We can further divide this application layer into the application framework
    layer and the application layer. The application framework layer provides the
    classes that are exposed by the Android stack for use by an application. Examples
    include the Activity manager that manages the life-cycle of an Activity, the package
    manager that manages the installing and uninstalling of an application, and the
    notification manager to send out notifications to the user.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将应用层进一步划分为应用框架层和应用层。应用框架层提供了由Android堆栈公开供应用程序使用的类。例如，活动管理器管理活动的生命周期，包管理器管理应用程序的安装和卸载，通知管理器向用户发送通知。
- en: The application layer is the layer where applications reside. These could be
    system applications or user applications. System applications are the ones that
    come bundled with the device such as mail, calendar, contacts, and browser. Users
    cannot uninstall these applications. User applications are the third party applications
    that users install on their device. Users can install and uninstall these applications
    at their free will.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 应用层是应用程序所在的层次。这些可以是系统应用程序或用户应用程序。系统应用程序是设备预装的应用程序，如邮件、日历、联系人和浏览器。用户无法卸载这些应用程序。用户应用程序是用户在设备上安装的第三方应用程序。用户可以根据自己的意愿自由安装和卸载这些应用程序。
- en: Android application structure
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android应用程序结构
- en: 'To understand the security at the application layer, it is important to understand
    the Android application structure. Each Android application is created as a stack
    of components. The beauty of this application structure is that each component
    is a self-contained entity in itself and can be called exclusively even by other
    applications. This kind of application structure encourages the sharing of components.
    The following figure shows the anatomy of an Android application that consists
    of activities, services, broadcast receivers, and content providers:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解应用层的安全性，重要的是要了解Android应用程序的结构。每个Android应用程序都被创建为一堆组件的栈。这种应用程序结构的美妙之处在于，每个组件都是自包含的实体，甚至可以被其他应用程序独立调用。这种应用程序结构鼓励组件共享。下图展示了Android应用程序的组成，包括活动、服务、广播接收器和内容提供者：
- en: '![Android application structure](img/5603OT_01_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Android应用程序结构](img/5603OT_01_05.jpg)'
- en: 'Android supports four kinds of components:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Android支持四种类型的组件：
- en: '**Activity**: This component is usually the UI part of your application. This
    is the component that interacts with the user. An example of the Activity component
    is the login page where the user enters the username and password to authenticate
    against the server.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动**：这个组件通常是应用程序的用户界面部分。这是与用户交互的组件。活动组件的一个例子是登录页面，用户在该页面输入用户名和密码以对服务器进行身份验证。'
- en: '**Service**: This component takes care of the processes that run in the background.
    The Service component does not have a UI. An example could be a component that
    synchronizes with the music player and plays songs that the user has pre-selected.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：这个组件负责在后台运行的过程。服务组件没有UI。一个例子是，一个与音乐播放器同步并在用户预先选择的情况下播放歌曲的组件。'
- en: '**Broadcast Receiver**: This component is the mailbox for receiving messages
    from the Android system or other applications. As an example, the Android system
    fires an Intent called `BOOT_COMPLETED` after it boots up. Application components
    can register to listen to this broadcast in the manifest file.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广播接收器**：这个组件是接收来自Android系统或其他应用程序消息的邮箱。例如，Android系统在启动后会触发一个名为`BOOT_COMPLETED`的Intent。应用程序组件可以在清单文件中注册，以便监听此广播。'
- en: '**Content Provider**: This component is the data store for the application.
    The application can also share this data with other components of the Android
    system. An example use case of the Content Provider component is an app that stores
    a list of items that the user has saved in their wish list for shopping.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容提供者**：这个组件是应用程序的数据存储。应用程序还可以将此数据与其他Android系统的组件共享。内容提供者组件的一个示例用例是，一个应用程序存储了用户为购物保存的物品列表。'
- en: All the preceding components are declared in the `AndroidManifest.xml` (manifest)
    file. In addition to the components, the manifest file also lists other application
    requirements such as the minimum API level of Android required, user permissions
    required by the application such as access to the Internet and reading of the
    contact list, permission to use hardware by the application such as Bluetooth
    and the camera, and libraries that the application links to, such as the Google
    Maps API. [Chapter 4](ch04.html "Chapter 4. Defining the Application's Policy
    File"), *Defining the Application's Policy File*, discusses the manifest file
    in greater detail.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述组件都在`AndroidManifest.xml`（清单）文件中声明。除了组件，清单文件还列出了应用的其他需求，如Android所需的最低API级别，应用所需的用户权限，例如访问互联网和读取联系人列表，应用使用硬件的权限，如蓝牙和相机，以及应用链接到的库，如Google
    Maps API。[第4章](ch04.html "第4章. 定义应用策略文件")，*定义应用的策略文件*，将更详细地讨论清单文件。
- en: Activities, services, content providers, and broadcast receivers all talk to
    each other using Intents. Intent is Android's mechanism for asynchronous **inter-process
    communication** (**IPC**). Components fire off Intent to do an action and the
    receiving component acts upon it. There are separate mechanisms for delivering
    Intents to each type of components so the Activity Intents are only delivered
    to activities and the broadcast Intents are only delivered to broadcast receivers.
    Intent also includes a bundle of information called the `Intent` object that the
    receiving component uses to take appropriate action. It is important to understand
    that Intents are not secure. Any snooping application can sniff the Intent, so
    don't put any sensitive information in there! And imagine the scenario where the
    Intent is not only sniffed but also altered by the malicious application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 活动、服务、内容提供者和广播接收器都通过意图（Intents）相互通信。意图是Android的异步**进程间通信**（**IPC**）机制。组件通过发射意图来执行一个动作，接收组件根据意图采取行动。有单独的机制用于将意图传递给每种类型的组件，因此活动意图只传递给活动，广播意图只传递给广播接收器。意图还包括一个名为`Intent`对象的信息包，接收组件使用它来采取适当的行动。重要的是要了解意图并不安全。任何监听应用都可以嗅探意图，因此不要在其中放置任何敏感信息！并且想象一下，如果意图不仅被嗅探，还被恶意应用篡改的场景。
- en: As an example, the following figure shows two applications, **Application A**
    and **Application B**, both with their own stack of components. These components
    can communicate with each other as long as they have permissions to do so. An
    **Activity** component in **Application A** can start an **Activity** component
    in **Application B** using `startActivity()` and it can also start its own **Service**
    using `startService()`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下图展示了两个应用，**应用A**和**应用B**，它们各自有一组组件。只要它们有权限，这些组件就可以相互通信。**应用A**中的**活动**组件可以使用`startActivity()`启动**应用B**中的**活动**组件，也可以使用`startService()`启动自己的**服务**。
- en: '![Android application structure](img/5603OT_01_06.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Android应用结构](img/5603OT_01_06.jpg)'
- en: At the application level, Android components follow the permission-based model.
    This means that a component has to have appropriate permission to call the other
    components. Although Android provides most of the permissions that an application
    might need, developers have the ability to extend this model. But this case should
    be rarely used.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用级别，Android组件遵循基于权限的模型。这意味着组件必须拥有适当的权限才能调用其他组件。尽管Android提供了应用可能需要的绝大多数权限，但开发者仍有能力扩展此模型。但这种情形应很少使用。
- en: Additional resources such as bitmaps, UI layouts, strings, and so on, are maintained
    independently in a different directory. For the best user experience, these resources
    should be localized for different locales, and customized for different device
    configurations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的资源，如位图、UI布局、字符串等，在另一个不同的目录中独立维护。为了提供最佳的用户体验，这些资源应当针对不同的地区进行本地化处理，并针对不同的设备配置进行定制。
- en: The next three chapters talk about the application structure, the manifest file,
    and the permission model in detail.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三章将详细讨论应用结构、清单文件和权限模型。
- en: Application signing
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用签名
- en: One of the differentiating factors of Android is the way Android applications
    are signed. All applications in Android are self-signed. There is no requirement
    to sign the applications using a certificate authority. This is different from
    traditional application signing where a signature identifies the author and bases
    trust upon the signature.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Android的一个区别因素是Android应用程序的签名方式。Android中的所有应用程序都是自签名的。不需要使用证书颁发机构对应用程序进行签名。这与传统的应用程序签名不同，后者通过签名识别作者，并基于签名建立信任。
- en: The signature of the application associates the app with the author. If a user
    installs multiple applications written by the same author and these applications
    want to share each other's data, they need to be associated with the same signature
    and should have a `SHARED_ID` flag set in the manifest file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的签名将应用程序与作者关联起来。如果用户安装了同一作者编写的多个应用程序，且这些应用程序想要共享彼此的数据，它们需要具有相同的签名，并且在清单文件中设置了`SHARED_ID`标志。
- en: The application signature is also used during the application upgrade. An application
    upgrade requires that both applications have the same signature and that there
    is no permission escalation. This is another mechanism in Android that ensures
    the security of applications.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序签名在应用程序升级时也会被使用。应用程序升级要求两个应用程序具有相同的签名，且没有权限提升。这是Android中确保应用程序安全的另一机制。
- en: As an application developer, it is important to keep the private key used to
    sign the application secure. As an application author, your reputation depends
    on it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序开发者，保持用于签名应用程序的私钥安全是非常重要的。作为应用程序作者，你的声誉取决于它。
- en: Data storage on the device
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备上的数据存储
- en: Android provides different solutions for secure data storage on devices. Based
    on the data type and application use case, developers can choose the solution
    that fits best.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了不同的解决方案，用于设备上的安全数据存储。基于数据类型和应用程序用例，开发者可以选择最适合的解决方案。
- en: For primitive data types such as ints, booleans, longs, floats, and strings,
    which need to persist across user sessions, it is best to use shared data types.
    Data in shared preferences is stored as a key-value pair that allows developers
    to `save`, `retrieve`, and `persist` data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要在用户会话之间持久化的基本数据类型，如整数（ints）、布尔值（booleans）、长整数（longs）、浮点数（floats）和字符串（strings），最好使用共享数据类型。共享偏好设置中的数据以键值对的形式存储，允许开发者`保存`、`检索`和`持久化`数据。
- en: All application data is stored along with the application in the sandbox. This
    means that this data can be accessed only by that application or other applications
    with the same signature that have been granted the right to share data. It is
    best to store private data files in this memory. These files will be deleted when
    the application is uninstalled.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用程序数据都与应用程序一起存储在沙盒中。这意味着这些数据只能由该应用程序或具有相同签名且被授权共享数据的其他应用程序访问。最好将私有数据文件存储在此内存中。这些文件将在应用程序被卸载时被删除。
- en: For large datasets, developers have an option to use the SQLite database that
    comes bundled with the Android software stack.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型数据集，开发者可以选择使用Android软件堆中捆绑的SQLite数据库。
- en: All Android devices allow users to mount external storage devices such as SD
    cards. Developers can write their application such that large files can be stored
    on these external devices. Most of these external storage devices have a VFAT
    filesystem, and Linux access control does not work here. Sensitive data should
    be encrypted before storing on these external devices.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android设备允许用户挂载外部存储设备，如SD卡。开发者可以编写应用程序，以便将这些大文件存储在这些外部设备上。这些外部存储设备大多数采用VFAT文件系统，Linux访问控制在这里不起作用。敏感数据在存储在这些外部设备上之前应进行加密。
- en: Starting with Android 2.2 (API 8), APKs can be stored on external devices. Using
    a randomly generated key, the APK is stored within an encrypted container called
    the `asec` file. This key is stored on the device. The external devices on Android
    are mounted with `noexec`. All DEX files, private data, and native shared libraries
    still reside in the internal memory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android 2.2（API 8）开始，APK可以存储在外部设备上。使用随机生成的密钥，APK被存储在一个名为`asec`文件的加密容器中。这个密钥存储在设备上。Android上的外部设备是以`noexec`方式挂载的。所有的DEX文件、私有数据和本地共享库仍然存放在内部存储中。
- en: Wherever network connection is possible, developers can store data on their
    own web servers as well. It is advisable to store data that can compromise the
    user's privacy on your own servers. An example of such an application is banking
    applications where user account information and transaction details should be
    stored on a server rather than user's devices.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何可以连接网络的地方，开发者可以将数据存储在自己的网络服务器上。建议将可能泄露用户隐私的数据存储在自家服务器上。例如，银行应用程序应将用户账户信息和交易细节存储在服务器上，而不是用户设备上。
- en: '[Chapter 7](ch07.html "Chapter 7. Securing Application Data"), *Securing Application
    Data*, discusses the data storage options on Android devices in great detail.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章. 保护应用程序数据")，*保护应用程序数据*，详细讨论了Android设备上的数据存储选项。'
- en: Rights protected content such as video, e-books, and music, can be protected
    on Android using the DRM framework API. Application developers can use this DRM
    framework API to register the device with a DRM scheme, acquire licenses associated
    with content, extract constraints, and associate relevant content with its license.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如视频、电子书和音乐等权利受保护的内容，可以使用DRM框架API在Android上得到保护。应用程序开发者可以使用此DRM框架API将设备注册到DRM方案，获取与内容相关的许可证，提取约束，并将相关内容与其许可证关联。
- en: Crypto APIs
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密API
- en: Android boasts of a comprehensive crypto API suite that application developers
    can use to secure data, both at rest and in transit.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Android拥有一套全面的加密API套件，应用开发者可以使用它来保护数据，无论是在静止状态还是在传输过程中。
- en: Android provides APIs for symmetric and asymmetric encryption of data, random
    number generation, hashing, message authentication codes, and different cipher
    modes. Algorithms supported include DH, DES, Triple DES, RC2, and RC5.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了用于数据对称和不对称加密、随机数生成、散列、消息认证码和不同密码模式的API。支持的算法包括DH、DES、三重DES、RC2和RC5。
- en: Secure communication protocols such as SSL and TLS, in conjunction with the
    encryption APIs, can be used to secure data in transit. Key management APIs including
    the management of X.509 certificates are provided as well.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安全通信协议如SSL和TLS，结合加密API，可用于保护传输中的数据。还提供了包括X.509证书管理的密钥管理API。
- en: A system key store has been in use since Android 1.6 for use by VPN. With Android
    4.0, a new API called `KeyChain` provides applications with access to credentials
    stored there. This API also enables the installation of credentials from X.509
    certificates and PKCS#12 key stores. Once the application is given access to a
    certificate, it can access the private key associated with the certificate.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 自Android 1.6以来，系统密钥存储已被用于VPN。Android 4.0引入了一个名为`KeyChain`的新API，允许应用程序访问存储在那里的凭据。此API还支持从X.509证书和PKCS#12密钥存储中安装凭据。一旦应用程序被授予访问证书的权限，它就可以访问与证书关联的私钥。
- en: Crypto APIs are discussed in detail in [Chapter 6](ch06.html "Chapter 6. Your
    Tools – Crypto APIs"), *Your Tools – Crypto APIs*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 加密API在[第6章](ch06.html "第6章. 你的工具 - 加密API")，*你的工具 – 加密API*中进行了详细讨论。
- en: Device Administration
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备管理
- en: With the increased proliferation of mobile devices in the workplace, Android
    2.2 introduced the **Device Administration API** that lets users and IT professionals
    manage devices that access enterprise data. Using this API, IT professionals can
    impose system level security policies on devices such as remote wipe, password
    enablement, and password specifics. Android 3.0 and Android 4.0 further enhanced
    this API with polices for password expiration, password restrictions, device encryption
    requirement, and to disable the camera. If you have an email client and you use
    it to access company email on your Android phone, you are most probably using
    the Device Administration API.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 随着移动设备在工作场所的普及，Android 2.2引入了**设备管理API**，允许用户和IT专业人士管理访问企业数据的设备。使用此API，IT专业人士可以在设备上实施系统级安全策略，如远程擦除，密码启用及具体设置。Android
    3.0和Android 4.0进一步增强了此API，增加了密码过期、密码限制、设备加密要求和禁用摄像头等策略。如果你有邮件客户端并在Android手机上用它来访问公司邮件，那么你很可能正在使用设备管理API。
- en: The Device Administration API works by enforcing security policies. The `DevicePolicyManager`
    lists out all the policies that a Device Administrator can enforce on the device.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 设备管理API通过强制执行安全策略来工作。`DevicePolicyManager`列出了设备管理员可以在设备上执行的所有策略。
- en: A Device Administrator writes an application that users install on their device.
    Once installed, users need to activate the policy in order to enforce the security
    policy on the device. If the user does not install the app, the security policy
    does not apply but the user cannot access any of the features provided by the
    app. If there are multiple Device Administration applications on the device, the
    strictest policy prevails. If the user uninstalls the app, the policy is deactivated.
    The application may decide to reset the phone to factory settings or delete data
    based on the permissions it has as it uninstalls.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 设备管理员编写一个应用程序，用户在其设备上安装该程序。安装后，用户需要激活策略以在设备上实施安全策略。如果用户未安装该应用，则不适用安全策略，但用户也无法访问该应用提供的任何功能。如果设备上有多个设备管理应用程序，则最严格的策略优先。如果用户卸载该应用，则策略会被停用。在卸载时，根据其拥有的权限，应用程序可能会决定将手机重置为出厂设置或删除数据。
- en: We will discuss Device Administration in greater detail in [Chapter 8](ch08.html
    "Chapter 8. Android in the Enterprise"), *Android in the Enterprise*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第8章](ch08.html "第8章. 企业中的Android")，*企业中的Android*中更详细地讨论设备管理。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Android is a modern operating system where security is built in the platform.
    As we learned in this chapter, the Linux kernel, with its process isolation, provides
    the basis of Android's security model. Each application, along with its application
    data, is isolated from other processes. At the application level, components talk
    to each other using Intents and need to have appropriate privileges to call other
    components. These permissions are enforced in the Linux kernel that has stood
    the test of time as a secure multiuser operating system. Developers have a comprehensive
    set of crypto APIs that secure user data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓是一个现代操作系统，安全性已经内置于平台中。正如我们在本章中学到的，具有进程隔离特性的Linux内核构成了安卓安全模型的基础。每个应用程序及其应用数据都与其它进程隔离。在应用程序层面，组件通过意图相互交流，并且需要具备适当的权限才能调用其他组件。这些权限在久经考验的安全多用户操作系统Linux内核中得到执行。开发者拥有一套全面的加密API，用以保护用户数据。
- en: With this basic knowledge of the Android platform, let's march to the next chapter
    and understand application components and inter-component communication from a
    security standpoint. Good luck!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有了对安卓平台的基本了解，让我们迈向下一章，从安全角度理解应用程序组件和组件间通信。祝您好运！
