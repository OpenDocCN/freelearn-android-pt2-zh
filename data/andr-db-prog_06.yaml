- en: Chapter 6. Binding to the UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：绑定到用户界面
- en: We've covered a lot of ground over the previous five chapters – looking at lightweight
    forms of data storage (such as `SharedPreferences)` to more heavy-weight forms
    of data storage (such as SQLite databases). But for each data storage method and
    in each example that we've looked at – in order to actually see the results of
    our queries and our backend data manipulations, we had to rely on very simple
    system IO print commands.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的五章中，我们已经涵盖了大量的内容——从轻量级数据存储形式（如`SharedPreferences`）到更重量级的数据存储形式（如SQLite数据库）。但是，对于每种数据存储方法和我们查看的每个示例——为了实际查看查询结果和后端数据操作的结果，我们不得不依赖非常简单的系统IO打印命令。
- en: More often than not though, as mobile developers, our applications will need
    to both aesthetically display the results of such data queries, as well as give
    users an intuitive interface to store and insert data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，作为移动开发者，我们的应用程序通常需要美观地显示这些数据查询的结果，同时也需要为用户提供直观的界面来存储和插入数据。
- en: In this chapter, we will focus on the former – on binding data to the user interface
    (UI) and will look specifically at various classes that will allow us to bind
    our data in the form of lists (the most common and intuitive way to display rows
    of data).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注前者——将数据绑定到用户界面（UI），并特别关注各种允许我们以列表形式绑定数据的类（这是显示数据行最常见和直观的方式）。
- en: SimpleCursorAdapters and ListViews
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`SimpleCursorAdapters`和`ListViews`'
- en: There are two major ways of retrieving data on Android, and each has its own
    class of `ListAdapters`, which will then know how to handle and bind the passed-in
    data. The first way of retrieving data is one that we're very familiar with already
    – through making queries and obtaining `Cursor` objects. The subclass of `ListAdapters`
    that wrap around `Cursors` is called `CursorAdapter`, and in the next section
    we'll focus on the `SimpleCursorAdapter`, which is the most straightforward instance
    of `CursorAdapter`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上有两种主要的数据检索方式，每种方式都有自己的`ListAdapters`类，这些类将知道如何处理和绑定传入的数据。我们熟悉的第一个数据检索方式是通过查询并获得`Cursor`对象。围绕`Cursor`的`ListAdapters`的子类被称为`CursorAdapter`，在下一节中，我们将关注`SimpleCursorAdapter`，这是`CursorAdapter`最直接的实例。
- en: As we already know, the `Cursor` points to a subtable of rows containing the
    results of our query. By iterating through this cursor, we are able to examine
    the fields of each row, and in previous chapters we've printed out the values
    of these fields in order to inspect the subtable that was returned. Now we would
    like to convert each row of the subtable into a corresponding row in our list.
    The first step in doing this is to set up a `ListActivity` (a variant of the more
    common `Activity` class).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，`Cursor`指向包含我们查询结果的行子表。通过遍历这个游标，我们能够检查每一行的字段，在之前的章节中，我们打印出了这些字段的值以检查返回的子表。现在，我们希望将子表的每一行转换为我们列表中对应的行。实现这一目标的第一步是设置一个`ListActivity`（更常见的`Activity`类的一个变体）。
- en: 'As its name suggests, a `ListActivity` is simply a subclass of the `Activity`
    class which comes with methods that allow you to attach `ListAdapters`. The `ListActivity`
    class also allows you to inflate XML layouts, which contain list tags. In our
    example, we will use a very bare-bones XML layout (named `list.xml)` that only
    contains a `ListView` tag as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，`ListActivity`只是`Activity`类的一个子类，它带有允许你附加`ListAdapters`的方法。`ListActivity`类还允许你膨胀XML布局，这些布局包含列表标签。在我们的示例中，我们将使用一个非常基础的XML布局（名为`list.xml`），它只包含一个`ListView`标签，如下所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the first step in setting up what's called a `ListView` in Android.
    Similar to how defining a `TextView` allows you to see a block of text in your
    `Activity`, defining a `ListView` will allow you to interact with a scrollable
    list of row objects in your `Activity`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设置Android中所谓的`ListView`的第一步。类似于定义`TextView`允许你在`Activity`中看到一个文本块，定义`ListView`将允许你与`Activity`中的可滚动行对象列表进行交互。
- en: 'Intuitively, the next question in your mind should be: Where do I define how
    each row actually looks? Not only do you need to define the actual list object
    somewhere, but each row should have its own layout as well. So, to do this we
    create a separate `list_entry.xml` file in our layouts directory.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 直观地，你脑海中接下来应该的问题是：我在哪里定义每一行实际的样子？你不仅需要在某个地方定义实际的列表对象，而且每一行都应该有自己的布局。因此，为此我们在布局目录中创建了一个单独的`list_entry.xml`文件。
- en: 'The example I''m about to use is the one that queries the `Contacts` content
    provider and returns a list containing each contact''s name, phone number, and
    phone number type. Thus, each row of my list should contain three TextViews, one
    for each data field. Subsequently, my `list_entry.xml` file looks like the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我即将使用的示例是查询`Contacts`内容提供者并返回一个列表，其中包含每个联系人的姓名、电话号码和电话号码类型。因此，我的列表中的每一行都应该包含三个`TextView`，每个数据字段一个。随后，我的`list_entry.xml`文件如下所示：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So we have a vertical `LinearLayout` which contains three TextViews, each with
    its own properly defined ID as well as its own aesthetic properties (that is,
    text size and text color).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有一个垂直的`LinearLayout`，包含三个`TextView`，每个都有自己的正确定义的ID以及自己的审美属性（即文本大小和文本颜色）。
- en: 'In terms of set up – this is all we need! Now we just need to create the `ListActivity`
    itself, inflate the `list.xml` layout, and specify the adapter. To see how all
    this is done, let''s take a look at the code before breaking it apart piece by
    piece:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置方面——这就是我们所需要的全部！现在我们只需要创建`ListActivity`本身，加载`list.xml`布局，并指定适配器。为了了解如何完成所有这些操作，让我们先看一下代码，然后逐块分解：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So what's going on here? Well, the first part of the code you should recognize
    by now – we're simply making a query over the phone's contact list (specifically
    over the Contact content provider's `Phone` table) and asking for the contact's
    name, number, and number type.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这里发生了什么？嗯，代码的第一部分你现在应该已经熟悉了——我们只是在手机的联系人列表上执行查询（特别是针对联系人内容提供者的`Phone`表），并请求联系人的姓名、号码和号码类型。
- en: 'Next, the `SimpleCursorAdapter` takes as two of its parameters, a string array
    and an integer array which represent a mapping between `Cursor` columns and XML
    layout views. In our case, this is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`SimpleCursorAdapter`有两个参数，一个是字符串数组，一个是整数数组，它们代表`Cursor`列与XML布局视图之间的映射关系。在我们的例子中，如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is so that the data in the `DISPLAY_NAME` column will get bound to the
    `TextView` with ID `name_entry`, and so on. Once we have these mappings defined,
    the next part is to just instantiate the `SimpleCursorAdapter`, which can be seen
    in this line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`DISPLAY_NAME`列中的数据就会被绑定到ID为`name_entry`的`TextView`上，依此类推。定义好这些映射关系后，下一步就是实例化`SimpleCursorAdapter`，这在以下这行代码中可以看到：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, the `SimpleCursorAdapter` takes five parameters - the first is the `Context`,
    which essentially tells the `CursorAdapter` which parent `Activity` it needs to
    inflate and bind the rows to. The next parameter is the ID of the R layout that
    you defined earlier, which will tell the `CursorAdapter` what each row should
    look like and, furthermore, where it can inflate the corresponding Views. Next,
    we pass in the `Cursor`, which tells the adapter what the underlying data actually
    is, and lastly, we pass in the mappings.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`SimpleCursorAdapter`接受五个参数——第一个是`Context`，它基本上告诉`CursorAdapter`需要绑定行的父`Activity`。下一个参数是之前定义的R布局的ID，这将告诉`CursorAdapter`每一行应该是什么样子，以及它可以在哪里加载相应的视图。接下来，我们传递`Cursor`，它告诉适配器底层数据实际是什么，最后，我们传递映射关系。
- en: 'Hopefully, the previous code makes sense, and the parameters of `SimpleCursorAdapter`
    make sense as well. The result of this previous `Activity` can be seen in the
    following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 希望之前的代码是有意义的，`SimpleCursorAdapter`的参数也应该是有意义的。上一个`Activity`的结果可以在以下屏幕截图中看到：
- en: '![SimpleCursorAdapters and ListViews](img/Image4884.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![SimpleCursorAdapters和ListViews](img/Image4884.jpg)'
- en: Everything looks good, except for these random integers floating around under
    the phone number. Why are there a bunch of 1s, 2s, and 3s at the bottom of each
    row where the types should be? Well, recall from the previous chapter that the
    phone number types are not returned as Strings but are instead returned as integers.
    From there through a simple `switch` statement, we can easily convert these integers
    into more descriptive Strings.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所有内容看起来都很好，除了电话号码下面漂浮的这些随机整数。为什么在每一行类型应该出现的地方有一堆1、2、3呢？回想一下前一章，电话号码类型不是作为字符串返回的，而是作为整数返回的。从那里通过一个简单的`switch`语句，我们可以很容易地将这些整数转换成更具描述性的字符串。
- en: However, you'll quickly see that with our very simple, straightforward use of
    the built-in `SimpleCursorAdapter` class, there was nowhere for us to implement
    any "special" logic that would allow us to convert such returned integers to Strings.
    This is when overriding the `SimpleCursorAdapter` class becomes necessary, because
    only then can we have full control over how the Cursor's data is to be displayed
    in each row. And so, we move onwards to the next section where we see just that.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你会很快发现，在我们非常简单直接地使用内置的`SimpleCursorAdapter`类时，我们没有任何地方可以实施任何允许我们将返回的整数转换为字符串的“特殊”逻辑。这正是重写`SimpleCursorAdapter`类变得必要的时候，因为只有这样我们才能完全控制如何在每一行中显示游标的数据。因此，我们继续下一部分，那里我们会看到这一点。
- en: Custom CursorAdapters
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义`CursorAdapter`
- en: In this section, we will expand upon the `SimpleCursorAdapter` and try to write
    our own `CursorAdapter` class, which will give us greater flexibility in terms
    of how the underlying data is to be displayed. The goal of our custom class will
    be simple - instead of having the phone number types being displayed as integers,
    let's find a way to display them as readable Strings.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将扩展`SimpleCursorAdapter`并尝试编写我们自己的`CursorAdapter`类，这将让我们在如何显示底层数据方面有更大的灵活性。我们自定义类的目标很简单——不是将电话号码类型显示为整数，而是找到一种方法将它们显示为可读的字符串。
- en: Upon extending the `SimpleCursorAdapter` class, we'll need to override and implement
    the `newView()` method, and most importantly the `bindView()` method. Optionally,
    we can also customize our constructor, which depending on your implementation
    can be useful for caching and performance-enhancing reasons (we'll see an example
    of this later on).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展`SimpleCursorAdapter`类之后，我们将需要重写并实现`newView()`方法，最重要的是`bindView()`方法。可选地，我们还可以自定义我们的构造函数，根据你的实现，这对于缓存和提高性能可能很有用（我们稍后会看到一个例子）。
- en: Conceptually, what's happening here is that each time a new row is actually
    displayed on the Android device's screen, the `newView()` method gets called.
    This means that as the user scrolls through the Activity's list and new rows appear
    on the device's screen (for the first time), this `newView()` method will get
    called. And so, the functionality of this `newView()` should be kept relatively
    straightforward. In my implementation, this means that given the context, I make
    a request for the associated `LayoutInflater` class and use it to inflate the
    new row's layout (as defined in `list_entry.xml)`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的概念是，每当一个新的行在Android设备的屏幕上实际显示时，`newView()`方法就会被调用。这意味着当用户在Activity的列表中滚动，并且新的行首次出现在设备的屏幕上时，这个`newView()`方法将被触发。因此，这个`newView()`的功能应该保持相对简单。在我的实现中，这意味着在给定上下文的情况下，我会请求相关的`LayoutInflater`类，并使用它来填充新行的布局（如在`list_entry.xml`中定义的）。
- en: 'The meat of the logic then occurs in the `bindView()` method. Once the `newView()`
    method is called and the actual layout of the row is initialized, the next method
    that gets called is the `bindView()` method. This method takes as parameters the
    new View object that was previously instantiated, as well as the `Cursor` that
    belongs to this adapter class. It''s important to note that the `Cursor` that''s
    passed in has already been moved to the correct index. In other words, the adapter
    is smart enough to pass you a `Cursor` that is pointing to the row of data corresponding
    to the row of your layout that you''re creating! Now of course, it''s hard to
    see and understand these methods without actually seeing the code side by side
    and so, before I go any further, let''s take a quick look:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑的核心随后在`bindView()`方法中发生。一旦调用了`newView()`方法并且行的实际布局初始化后，接下来被调用的方法就是`bindView()`。这个方法接收之前实例化的新View对象以及属于这个适配器类的`Cursor`作为参数。需要注意的是，传递进来的`Cursor`已经移动到了正确的索引位置。换句话说，适配器足够智能，能够传递给你一个指向与你正在创建的布局行相对应的数据行的`Cursor`！当然，没有看到代码并排比较，很难理解和看到这些方法。因此，在我继续之前，让我们快速地看一下：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, you'll notice that the `newView()` method's implementation is pretty
    straightforward. You'll also notice that the Context being passed in is the same
    Context for each new row that is added - and so each time this method gets called,
    I'm actually requesting the same `LayoutInflater` object. Though it didn't make
    a noticeable difference in this case, little nuances like this (that is, not requesting
    the same resource continuously) are small ways in which you can optimize the performance
    of your lists. Here, by instantiating the `LayoutInflater` a single time in the
    constructor and reusing it each time, we can potentially save hundreds of unnecessary
    requests. Though this may seem like a very minor optimization, keep in mind that
    when it comes to lists, especially on mobile devices, users expect them to be
    extremely snappy and responsive. A list that lags is often a huge nuisance to
    users over time, and is frequently indicative of a poorly written application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你会注意到 `newView()` 方法的实现非常直接。你还会发现传递进来的 Context 对于每新增的一行是相同的——这意味着每次调用此方法时，实际上我请求的是同一个
    `LayoutInflater` 对象。尽管在这个案例中没有明显差异，但像这样的小细节（即，不是持续请求相同的资源）是你可以优化列表性能的小方法。在这里，通过在构造函数中实例化一次
    `LayoutInflater` 并每次重用它，我们可能节省了数百次不必要的请求。虽然这可能看起来是一个非常小的优化，但请记住，当涉及到列表时，尤其是在移动设备上，用户期望它们能够非常快速和响应迅速。随着时间的推移，一个卡顿的列表常常会成为用户的巨大烦恼，并且通常表示应用程序编写得不好。
- en: Now for the `bindView()` method. Again, the flow is that first `newView()` gets
    called and a new row is instantiated, and then `bindView()` gets called with this
    new row's layout view passed in. Here we have also passed a `Cursor` object, but
    it's important to note that the `Cursor` is actually pointing to the next row
    of data. In other words, the `Cursor` is not pointing to the first row of the
    queried subtable but instead is pointing to a single row and is being incremented
    accordingly behind the scenes. This is what I mean by the `CursorAdapter` class
    being a nice class to use because of how it handles the underlying `Cursor` for
    you as the list scrolls up and down.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看 `bindView()` 方法。同样，流程是首先调用 `newView()` 并实例化新的一行，然后调用 `bindView()` 并传递这个新行的布局视图。这里我们也传递了一个
    `Cursor` 对象，但重要的是要注意 `Cursor` 实际上指向的是下一行数据。换句话说，`Cursor` 并没有指向查询子表的第一行，而是指向单一行，并在幕后相应地递增。这就是我所说的
    `CursorAdapter` 类是一个很好的类来使用，因为它如何为你处理底层的 `Cursor`，当列表上下滚动时。
- en: As for the logic in our binding – it's pretty simple. Given the `Cursor`, we
    ask for the corresponding fields and their respective values, and since we're
    also passed the View object of that row, we just need to set the correct String
    value for each `TextView`. However, notice that here we have the flexibility to
    insert additional logic which allows us to handle the fact that the phone number's
    type is returned as an integer. So, naturally we include the switch statement
    here, and instead of setting the integer into the `type_text TextView`, we set
    the readable String value there!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 至于我们绑定逻辑——非常简单。给定一个 `Cursor`，我们请求相应的字段及其各自值，由于我们也传递了那一行的 View 对象，我们只需要为每个 `TextView`
    设置正确的字符串值。但是，请注意，这里我们有灵活性插入额外的逻辑，这允许我们处理电话号码类型作为整数返回的事实。因此，我们自然在这里包含了一个 switch
    语句，而不是将整数设置到 `type_text TextView` 中，我们设置了一个可读的字符串值！
- en: Now, even though this is a pretty simple example, the goal of this exercise
    is to see how by extending the `SimpleCursorAdapter` class and implementing our
    own `CursorAdapter`, we can override the `bindView()` method and use the passed
    in View and `Cursor` objects to customize our row's display in any way that we
    want!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尽管这个例子非常简单，但这个练习的目标是了解通过扩展 `SimpleCursorAdapter` 类并实现我们自己的 `CursorAdapter`，我们可以覆盖
    `bindView()` 方法，并使用传递进来的 View 和 `Cursor` 对象以我们希望的任何方式自定义行的显示！
- en: 'As for how you actually use your custom `CursorAdapter` in the previous `SimpleCursorAdapter`
    example, simply swap out the following line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 至于如何在实际中使用你自定义的 `CursorAdapter` 替换前面的 `SimpleCursorAdapter` 示例，只需替换以下这行代码：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'with the line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以及这一行：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And how does this all look in the end? Let''s take a quick look:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 那么最后这一切看起来如何呢？让我们快速看一下：
- en: '![Custom CursorAdapters](img/Image4891.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![自定义 CursorAdapter](img/Image4891.jpg)'
- en: Here we see that in each row, instead of simply showing the integer type of
    the phone number, we can see the actual readable String type as desired! Much
    nicer now.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到在每一行中，我们不是简单地显示电话号码的整数类型，而是可以按需看到实际的易读字符串类型！现在看起来好多了。
- en: BaseAdapters and Custom BaseAdapters
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础适配器（BaseAdapters）和自定义基础适配器（Custom BaseAdapters）
- en: Earlier we mentioned that there were typically two ways to retrieve data – the
    first being in the form of a `Cursor` object and the second being in the form
    of a list of objects. In this section, we'll focus on this latter method of retrieving
    and handling data, and subsequently how to convert lists of objects into viewable
    rows of data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们提到，通常有两种方式来检索数据——第一种是`Cursor`对象的形式，第二种是对象列表的形式。在本节中，我们将关注后一种检索和处理数据的方法，以及如何将对象列表转换为可查看的数据行。
- en: So in what situations would we actually have a list of objects instead of a
    `Cursor?` Up until now, all of our focus has been on building up SQLite databases
    and content providers and in all cases we've been returned a `Cursor`. But, as
    we'll see in future chapters, oftentimes data storage isn't actually done on the
    mobile device side, but instead on external databases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在什么情况下我们实际上会有一个对象列表，而不是`Cursor`呢？到目前为止，我们的所有关注点都集中在构建SQLite数据库和内容提供者上，在所有情况下我们都返回了一个`Cursor`。但是，正如我们将在后续章节中看到的，数据存储实际上并不总是在移动设备端完成，而是在外部数据库完成。
- en: In these cases, retrieving data isn't as easy as just making SQLite queries,
    but instead needs to be done over the network through HTTP requests. Furthermore,
    once the data is obtained, it will likely be in some kind of String format (typically
    either XML or JSON – but more on this later), and instead of parsing this String
    for data and then inserting it into a SQLite database, typically you will simply
    convert each String into an object and store them in a standard list. To handle
    lists of objects, Android has a kind of `ListAdapter` known as the `BaseAdapter`,
    which we will override and dissect in this section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，获取数据并不像简单地执行SQLite查询那么容易，而是需要通过网络通过HTTP请求来完成。此外，一旦获取到数据，它很可能是某种字符串格式（通常是XML或JSON——关于这一点稍后会详细介绍），而不是解析这个字符串以获取数据，然后将其插入到SQLite数据库中，通常你会将每个字符串简单地转换为一个对象，并将其存储在标准列表中。为了处理对象列表，Android有一种名为`BaseAdapter`的`ListAdapter`，我们将在本节中重写并剖析它。
- en: 'Let''s take a simple example where we have a list of contact objects (for simplicity,
    let''s just call the class `ContactEntry)`, which, like the previous examples,
    contain a name, phone number, and phone number type field. The code for this would
    simply be as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个简单的例子，这里有一个联系人对象列表（为了简化，我们称这个类为`ContactEntry`），与之前的例子一样，它包含姓名、电话号码和电话号码类型字段。这段代码如下所示：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here you'll notice that in the constructor of the `ContactEntry`, I convert
    the integer type directly into the readable String type. As for the implementation,
    we create our own `ContactBaseAdapter` class and extend the `BaseAdapter` class,
    allowing us to override the `getView()` method.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你会注意到在`ContactEntry`的构造函数中，我将整数类型直接转换为了可读的字符串类型。至于实现，我们创建了自己的`ContactBaseAdapter`类并扩展了`BaseAdapter`类，使我们能够覆盖`getView()`方法。
- en: Conceptually, the `BaseAdapter` is very similar to the `CursorAdapter` except
    that instead of passing in and holding onto a `Cursor`, we pass in and hold onto
    a list of objects. This is simply done in the constructor of the `BaseAdapter`,
    at which point we store a private pointer to that list of objects and can optionally
    write a bunch of wrapper methods around that list (that is, `getCount(), getItem()`,
    and so on). And again, just as how the `CursorAdapter` class knows how to manage
    and iterate through the `Cursor`, the `BaseAdapter` class will know how to manage
    and iterate through the list of objects given.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，`BaseAdapter`与`CursorAdapter`非常相似，区别在于我们传递并保持的是一个对象列表，而不是`Cursor`。这仅仅是在`BaseAdapter`的构造函数中完成，此时我们保存了对该对象列表的私有指针，并可以选择围绕该列表编写一系列包装方法（即`getCount(),
    getItem()`等）。同样，正如`CursorAdapter`类知道如何管理和遍历`Cursor`一样，`BaseAdapter`类也将知道如何给定的对象列表进行管理和遍历。
- en: 'The meat then is in the `getView()` method of the `BaseAdapter`. Notice how
    in the `CursorAdapter` class we had both a `newView()` method as well as a `bindView()`
    method. Here, our `getView()` method is designed to play the role of both - instantiating
    new views where the row was previously null, and binding data to old rows where
    the rows had previously been inflated. Let''s take a quick look at the code and
    try to connect all these pieces again:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 重点在于`BaseAdapter`的`getView()`方法。注意在`CursorAdapter`类中，我们既有`newView()`方法，也有`bindView()`方法。在这里，我们的`getView()`方法被设计来扮演这两个角色——实例化新的视图，在行之前为空的情况下，以及将数据绑定到旧的行，在行之前已经被填充的情况下。让我们快速查看代码，并尝试再次连接所有这些片段：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First off, let's take a look at the constructor. Notice that I utilized the
    optimization mentioned earlier - namely, I instantiate the `LayoutInflater` just
    once in the constructor, because I know that the Context will remain the same
    throughout the Activity. This will give us a slight boost in performance when
    we actually run our Activity.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下构造函数。注意我使用了之前提到的优化——即在构造函数中只实例化一次`LayoutInflater`，因为我知道在整个Activity中Context将保持不变。这样在实际运行Activity时，性能会有所提升。
- en: Now, let's see what's going on in this `getView()` method. The parameters for
    this method are the position (of the row), the row's view, and the parent view.
    The first thing we need to check is if the current row's view is null - this will
    be the case when the current row has not previously been instantiated, which in
    turn happens when the current row appears on the user's screen for the first time.
    If that's the case, then we instantiate and inflate this row's view. Otherwise,
    we know that we've already previously inflated this row's view, and simply need
    to update its fields.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看这个`getView()`方法中发生了什么。这个方法的参数是行的位置、行的视图和父视图。我们首先需要检查的是当前行的视图是否为空——这将是在当前行之前没有被实例化时的情况，这种情况发生在当前行第一次出现在用户的屏幕上。如果是这样，那么我们就实例化和膨胀这个行的视图。否则，我们知道我们已经预先膨胀了这行的视图，只需要更新它的字段。
- en: 'Here, we also make use of a static `ContactViewHolder` class which acts as
    a cache. This method is recommended by the Android team over at Google (see [http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/view/List14.html](http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/view/List14.html)
    for details) and is meant to enhance the list''s performance. The inflating of
    the view looks like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还利用了一个静态的`ContactViewHolder`类作为缓存。这种方法是由谷歌的Android团队推荐的（详情请见[http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/view/List14.html](http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/view/List14.html)），旨在提高列表的性能。视图的膨胀如下所示：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that when the view is null, the inflation of the view is pretty standard
    use the `LayoutInflater` class and tell it which R layout to inflate. However,
    once the view has been inflated, we create an instance of the `ContactViewHolder`
    class and create pointers to each newly inflated view's `TextView` fields (in
    this case - though they could just as easily be `ImageViews`, and so on). Once
    the new `ContactViewHolder` class has been fully initiated, we associate it by
    setting it as the current row's tag (think of this as a view to holder mapping
    where the view is the key and the holder is the value).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当视图为空时，视图的膨胀过程相当标准——使用`LayoutInflater`类并告诉它膨胀哪个R布局。然而，一旦视图被膨胀，我们会创建一个`ContactViewHolder`类的实例，并为每个新膨胀的视图的`TextView`字段创建指针（在这种情况下——它们同样可以是`ImageViews`等）。一旦新的`ContactViewHolder`类完全初始化，我们通过将其设置为当前行的标签来关联它（可以将这个过程视为视图到持有者的映射，其中视图是键，持有者是值）。
- en: If the view is not null, then we simply need to ask for the previously instantiated
    view's tag (again, you can think of this as requesting a key's value).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果视图不为空，那么我们只需要获取之前实例化视图的标签（再次，你可以将其视为请求一个键的值）。
- en: Once we have the corresponding `ContactViewHolder`, we can use the passed-in
    position to get the corresponding `ContactEntry` object in our list. From there,
    we know what contact the current row is referencing, and so we can dig out the
    name, number, and phone type, and then set them accordingly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了相应的`ContactViewHolder`，我们可以使用传入的位置获取列表中对应的`ContactEntry`对象。从那里，我们知道当前行引用的是哪个联系人，因此我们可以挖掘出姓名、号码和电话类型，然后相应地设置它们。
- en: That's it! Let's take a look at how we would implement our `ContactBaseAdpater:`
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！让我们看看如何实现我们的`ContactBaseAdapter`：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For our purposes, you can ignore the first part, as we are literally querying
    the Contact content provider, taking the resulting `Cursor`, iterating through
    it, and creating a list of `ContactEntry` objects. Obviously this is silly, so
    assume that in your implementation you will directly be returned a list of objects.
    Once we have our list though, the call is simply:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的来说，你可以忽略第一部分，因为我们实际上是在查询联系人内容提供者，获取结果`Cursor`，遍历它，并创建一个`ContactEntry`对象列表。显然这是愚蠢的，所以在你的实现中，假设你将直接获得一个对象列表。一旦我们有了这个列表，调用就很简单了：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And the results of running this code look exactly like that of the second screenshot
    in our earlier example (as expected).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码的结果与之前示例中的第二个截图完全一样（如预期）。
- en: Now that we've taken a look at both `CursorAdapters` and `BaseAdapters` and
    how to implement each in code, let's take a step back and think about potential
    use cases for the two classes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了`CursorAdapters`和`BaseAdapters`以及如何用代码实现每一个，让我们后退一步，考虑这两个类的潜在用例。
- en: Handling list interactions
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理列表交互
- en: Now, one common feature of every `ListView` in Android is that the user should
    often be able to select a row in the list and expect some sort of added functionality.
    For instance, maybe you have a list of restaurants, and selecting a specific restaurant
    within the list brings you to a more detailed description page. This is again
    where the `ListActivity` class comes in handy, as one method we can override is
    the `onListItemClick()` method. This method takes several parameters, but one
    of the most important is the position parameter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，每个`ListView`的一个常见特性是用户应该经常能够选择列表中的一行，并期待某种附加功能。例如，你可能有一个餐厅列表，选择列表中的特定餐厅会带你到一个更详细的描述页面。这正是`ListActivity`类派上用场的地方，因为我们可以重写的一个方法是`onListItemClick()`。这个方法有几个参数，但最重要的是位置参数。
- en: 'The full declaration of the method is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的完整声明如下：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And once we have the position index, regardless of whether or not our underlying
    data is a `Cursor` or a list of objects, we can use this position index to retrieve
    the desired row/object. The code for the previous `CursorAdapter` example would
    look like the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了位置索引，无论底层数据是`Cursor`还是对象列表，我们都可以使用这个位置索引来检索所需的行/对象。之前`CursorAdapter`的代码示例如下所示：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Similarly, the code for the `BaseAdapter` example would be as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`BaseAdapter`示例的代码如下：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Both are pretty similar and pretty self-explanatory. We simply retrieve the
    desired row/object using the position index, and then output the desired fields.
    Oftentimes, the developer might have a separate Activity where they would give
    the user more details on the object in the row they clicked (that is, the restaurant,
    the contact, and so on). This may require passing the ID (or some other identifier)
    of the row/object from the `ListActivity` to the new details Activity, and this
    is done through embedding fields into Intent objects – but more on this in the
    next chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 两者非常相似且不言自明。我们只需使用位置索引检索所需的行/对象，然后输出所需的字段。通常，开发者可能有一个单独的Activity，在这里他们向用户提供了他们点击的行中的对象（即餐厅、联系人等）的更多详细信息。这可能需要从`ListActivity`传递行的ID（或其他标识符）到新的详细信息Activity，这是通过将字段嵌入到Intent对象中完成的——但这更多内容将在下一章介绍。
- en: Comparing CursorAdapters and BaseAdapters
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较`CursorAdapter`和`BaseAdapter`
- en: So under what typical scenarios would you find yourself using a `BaseAdapter`
    instead of a `CursorAdapter` and vice versa? We've already thought of a few instances
    previously, but let's take a little more time to brainstorm some use cases, just
    to get you even more comfortable with the two `ListAdapters` and when to switch
    between the two.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在什么典型场景下，你会发现自己使用`BaseAdapter`而不是`CursorAdapter`，反之亦然？我们之前已经考虑了一些情况，但让我们花更多的时间来头脑风暴一些用例，以使你更加熟悉这两个`ListAdapters`以及何时在两者之间切换。
- en: The general rule of thumb should be whenever your underlying data is returned
    as a `Cursor`, use a `CursorAdapter`, and whenever your data is returned or can
    be manipulated into a list of objects, use a `BaseAdapter`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的规则是，当你的底层数据以`Cursor`的形式返回时，使用`CursorAdapter`；当你的数据可以以对象列表的形式返回或操作时，使用`BaseAdapter`。
- en: This means that for most network requests when the data is returned as one long
    String (again, getting a little ahead of myself but this String will typically
    be in either an XML or JSON format), it's best to simply parse the String and
    convert it into objects. These can then be stored in a list and passed into a
    custom `BaseAdapter`. This will often also be the case if you are calling an external
    API, in which case the data will typically come back as either XML or JSON. The
    exception then is when you want to cache the results.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着对于大多数网络请求，当数据以长字符串的形式返回时（再次，有点提前说，但这个字符串通常会是XML或JSON格式），最好解析这个字符串并将其转换为对象。然后，这些对象可以存储在列表中，并传递给自定义的`BaseAdapter`。如果你调用外部API，通常数据也会以XML或JSON格式返回，这也是通常的情况。如果想要缓存结果，则是例外情况。
- en: Caching typically involves temporarily storing some data in a more local (or
    faster) area of memory (with CPU systems, this means storing data in RAM instead
    of on disk, and for mobile applications this means storing data locally instead
    of continuously requesting external data through a network). If you want to cache
    some of your network calls – whether it's for performance reasons or for offline
    access reasons – then the suggested flow is to make your network request, retrieve
    the formatted data String, parse the data String, and insert the data into a SQLite
    database (meant to mimic the external database). Then, since your data is already
    housed in a SQLite database, it's best (and easiest) to just make a quick query
    and get back a `Cursor`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存通常涉及在内存中更本地（或更快）的区域临时存储一些数据（对于CPU系统，这意味着将数据存储在RAM中而不是磁盘上，对于移动应用，这意味着将数据本地存储而不是通过网络持续请求外部数据）。如果你想缓存一些网络调用——无论是出于性能原因还是离线访问原因——那么建议的流程是进行你的网络请求，获取格式化的数据字符串，解析数据字符串，并将数据插入SQLite数据库（旨在模仿外部数据库）。然后，由于你的数据已经存储在SQLite数据库中，最好（也是最简单）的方法是快速查询并获取一个`Cursor`。
- en: Now, what about a scenario where you have a static list of primitive objects,
    for instance Strings? This would often be the case if you had some kind of fixed
    table of contents where the user has to select from a pre-defined list of options.
    In that case, both a `BaseAdapter` and a `CursorAdapter` would be overkill, and
    instead you should opt to use a much simpler kind of Adapter known as the `ArrayAdapter`.
    I tried not to spend any time on this kind of `ListAdapter`, as it's extremely
    simple to use and conceptually it's extremely simple as well - if you have a static
    Array of Strings and you want to make a list out of them, just pass that Array
    into an `ArrayAdapter` and you're good to go.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果你有一个静态的基本对象列表，比如字符串，该怎么办呢？如果你有一个预定义选项列表的固定目录，这通常就是这种情况。在这种情况下，`BaseAdapter`和`CursorAdapter`都显得过于复杂，你应该选择使用一种更简单的适配器，即`ArrayAdapter`。我尽量不花时间在这种`ListAdapter`上，因为它的使用非常简单，概念上也非常简单——如果你有一个静态的字符串数组，并且你想从中创建一个列表，只需将这个数组传递给`ArrayAdapter`即可。
- en: 'However, this is all I will say on the `ArrayAdapter` and I invite you to read
    through the example found on the following site:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，关于`ArrayAdapter`我就说这么多，我邀请你阅读以下网站的示例：
- en: '[http://developer.android.com/resources/tutorials/views/hello-listview.html](http://developer.android.com/resources/tutorials/views/hello-listview.html)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/resources/tutorials/views/hello-listview.html](http://developer.android.com/resources/tutorials/views/hello-listview.html)'
- en: Otherwise, just remember that for lightweight static data, use the `ArrayAdapter`,
    for dynamic object-oriented data, use the `BaseAdapter` and for locally stored
    subtable based data, use the `CursorAdapter`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，请记住，对于轻量级的静态数据，使用`ArrayAdapter`；对于动态的面向对象数据，使用`BaseAdapter`；对于基于本地存储的子表数据，使用`CursorAdapter`。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we finally shifted our focus away from the backend and towards
    the frontend – getting an in-depth look at ways we can bind our data to the user
    interface. Of course, users can interact with data in numerous ways, but by far
    the most common is through a `ListView`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们最终将焦点从后端转移到了前端——深入了解了我们可以将数据绑定到用户界面的方法。当然，用户可以通过多种方式与数据交互，但迄今为止最常见的方式是通过`ListView`。
- en: '`ListViews` and `ListActivities` are convenient classes which allow us to bind
    `ListAdapters` to the Activity and subsequently to the list layouts, handling
    events such as when a user touches a row in the list. `ListAdapters` are then
    classes which take in the underlying data and handle the binding process for you
    – namely, that as your list scrolls up and down you don''t need to keep track
    of the position in the list; all that is done for you behind the scenes. Instead,
    all you need to do is choose which `ListAdapter` to use depending on the type
    of underlying data you have, and specify how you want the binding to occur.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListViews`和`ListActivities`是非常方便的类，它们允许我们将`ListAdapters`绑定到Activity，进而绑定到列表布局，处理诸如用户触摸列表中某行的事件。`ListAdapters`是那些接收底层数据并为你处理绑定过程的类——也就是说，当你的列表上下滚动时，你无需跟踪列表中的位置；所有这些工作都在幕后完成。相反，你需要做的就是根据你拥有的底层数据类型选择合适的`ListAdapter`，并指定你希望如何进行绑定。'
- en: Equipped with these `ListAdapters`, we were able to recreate a stripped-down
    version of our contact list and, more importantly, were given a taste for all
    of the ways we could take our data and display it in interactive, beautiful ways.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 配备了这些`ListAdapters`，我们能够重新创建一个简化版的联系人列表，更重要的是，我们得以初步了解所有将数据以交互式、美观的方式展现出来的方法。
- en: We finished off the chapter thinking about the use cases between each subclass
    of `ListAdapters` (seeing in total three different subclasses, the `CursorAdapter`,
    the `BaseAdapter`, and lastly the `ArrayAdapter)` and again, the hope is to build
    intuition into both the backend and frontend application design process.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们思考了`ListAdapters`每个子类的使用场景（总共看到了三个不同的子类，分别是`CursorAdapter`、`BaseAdapter`以及最后的`ArrayAdapter`），同样地，希望这能够帮助我们在后端和前端应用程序设计过程中建立直觉。
- en: In the next chapter, we'll continue our brainstorming and try to pull together
    everything that we've seen – walking through a handful of practical examples and
    discussing ways we could design our backend and frontend to implement those examples.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续进行头脑风暴，尝试将我们所学到的知识整合在一起——通过一些实际例子来走查，并讨论我们如何设计后端和前端来实现这些例子。
