- en: Chapter 7. Multilingual and Multimodal Dialogs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 多语言和多模态对话
- en: In all of the examples so far, the language used has been English and the mode
    of interaction has been mainly speech. This chapter shows how to incorporate other
    languages into apps. The chapter also looks at how to build apps that make use
    of several modalities, for example, combining speech with visual displays.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有示例中使用的语言都是英语，交互方式主要是语音。本章展示了如何将其他语言整合到应用程序中。该章节还探讨了如何构建利用多种模态的应用程序，例如，将语音与视觉显示结合使用。
- en: Multilinguality
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多语言性
- en: In [Chapter 2](ch02.html "Chapter 2. Text-to-Speech Synthesis"), *Text-to-Speech
    Synthesis* and [Chapter 3](ch03.html "Chapter 3. Speech Recognition"), *Speech
    Recognition*, we have provided the groundwork to enable you to develop multilingual
    applications easily. With the `TTSLib` library ([Chapter 2](ch02.html "Chapter 2. Text-to-Speech
    Synthesis"), *Text-to-Speech Synthesis*) you can specify the language used for
    speech synthesis. Now we only need to make some small improvements to the `ASRLib`
    ([Chapter 3](ch03.html "Chapter 3. Speech Recognition"), *Speech Recognition*)
    to make it accept different languages for speech recognition (as it was set originally
    to the device's default). To do this, we have created the `ASRMultilingualLib`
    (in `sandra.libs.asr.asrmultilinguallib`) in the code bundle).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 文本到语音合成")，*文本到语音合成*和[第3章](ch03.html "第3章. 语音识别")，*语音识别*中，我们已经提供了基础工作，使你能够轻松地开发多语言应用程序。使用`TTSLib`库（[第2章](ch02.html
    "第2章. 文本到语音合成")，*文本到语音合成*）你可以指定用于语音合成的语言。现在我们只需要对`ASRLib`（[第3章](ch03.html "第3章.
    语音识别")，*语音识别*）进行一些小改进，使其接受不同的语言进行语音识别（最初设置为设备的默认语言）。为此，我们在代码包中创建了`ASRMultilingualLib`（在`sandra.libs.asr.asrmultilinguallib`中）。
- en: We cannot expect that all languages will be available in the user's implementation
    of voice recognition. Thus, before setting a language it is necessary to check
    whether it is one of the supported languages, and if not, to set the currently
    preferred language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能期望用户实现的语音识别中所有语言都可用。因此，在设置语言之前，有必要检查它是否是支持的语言之一，如果不是，则设置当前的首选语言。
- en: To do this, a `RecognizerIntent.ACTION_GET_LANGUAGE_DETAILS` ordered broadcast
    is sent that returns a Bundle from which the information about the preferred language
    (`RecognizerIntent.EXTRA_LANGUAGE_PREFERENCE`) and the list of supported languages
    (`RecognizerIntent.EXTRA_SUPPORTED_LANGUAGES`) can be extracted. This involves
    modifying the `ASR.java` file a little in the `ASRMultilingualLib` library.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，发送一个`RecognizerIntent.ACTION_GET_LANGUAGE_DETAILS`有序广播，它返回一个Bundle，从中可以提取有关首选语言（`RecognizerIntent.EXTRA_LANGUAGE_PREFERENCE`）和支持的语言列表（`RecognizerIntent.EXTRA_SUPPORTED_LANGUAGES`）的信息。这需要对`ASR.java`文件进行一些修改，在`ASRMultilingualLib`库中。
- en: Now in the `listen` method, there is a check to make sure the language selected
    is available in the speech recognizer, and then the new `startASR` method is invoked.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`listen`方法中，会检查以确保所选语言在语音识别器中可用，然后调用新的`startASR`方法。
- en: 'The `startASR` method contains basically the same code as in the `listen` method
    of the previous version of the library, where the `RecognizerIntent` was created
    to start listening. However, it introduces a new parameter for the intent in which
    the language used for recognition is specified, as shown in the following code
    line which is invoked from the `startASR` method:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`startASR`方法基本上包含了与库的前一个版本中的`listen`方法相同的代码，在那里创建了`RecognizerIntent`以开始监听。然而，它引入了一个新的参数，用于指定识别所使用的语言，如下面的代码行所示，该代码行从`startASR`方法中调用：'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To check the languages available on your device, you can click on **Google Voice
    Search/Voice Search Settings**, and click on **Language** to see the full list.
    The corresponding codes are two-letter lowercase ISO 639-1 language codes as specified
    in [http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查设备上可用的语言，你可以点击**谷歌语音搜索/语音搜索设置**，然后点击**语言**查看完整列表。相应的代码是两个字母的小写ISO 639-1语言代码，如[http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)所示。
- en: 'The `listen` method has been changed to check the availability of the language.
    In order to do so, it uses an intent `RecognizerIntent.ACTION_GET_LANGUAGE_DETAILS`,
    which is broadcast. To deal with the broadcast, two new classes to the `ASRMultilingualLib`
    have been introduced: `LanguageDetailsChecker`, which is the `BroadCastReceiver`,
    and `OnLanguageDetailsListener`, an interface used to specify the method that
    processes the results of the broadcast. These classes, which handle the details
    of retrieving language-related information, are from the `gast-lib` project ([https://github.com/gast-lib](https://github.com/gast-lib))
    and are described in the book *Professional Android™ Sensor Programming* by *Greg
    Milette* and *Adam Stroud*, *Wrox*, *2012*. In the `listen` method, the broadcast
    intent is created and sent, and the `OnLanguageDetailsListener` interface is used
    to specify what to do when the broadcast has been processed. In our case there
    is a check to see whether the language matches any of the available ones and then
    the recognition is started.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`listen`方法已经进行了更改，以检查语言的可用性。为此，它使用了广播的意图`RecognizerIntent.ACTION_GET_LANGUAGE_DETAILS`。为了处理广播，`ASRMultilingualLib`引入了两个新类：`LanguageDetailsChecker`，它是`BroadCastReceiver`，以及`OnLanguageDetailsListener`，这是一个接口，用于指定处理广播结果的方法。这些类来自`gast-lib`项目（[https://github.com/gast-lib](https://github.com/gast-lib)），并在*Greg
    Milette*和*Adam Stroud*所著的《Professional Android™ Sensor Programming》一书中进行了描述，*Wrox*,
    *2012*。在`listen`方法中，创建并发送了广播意图，并使用`OnLanguageDetailsListener`接口指定在处理广播后应执行的操作。在我们的例子中，会检查语言是否与任何可用的语言匹配，然后开始识别。'
- en: After we have made the described changes in the `ASRLib`, we are ready to develop
    apps in which the user specifies a language in which speech is recognized and
    synthesized. As an example, we have developed the `SillyParrot` app, as shown
    in the following figure. It asks for a language and on recognizing what the user
    wants, plays back the best match in the language selected.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在对`ASRLib`进行了上述描述的更改之后，我们就可以开发用户指定语音识别和合成语言的应用程序了。作为一个示例，我们开发了`SillyParrot`应用，如下所示。它要求选择一种语言，并在识别用户需求后，用所选语言播放最佳匹配的内容。
- en: '![Multilinguality](img/5297_07_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![多语言](img/5297_07_01.jpg)'
- en: After trying the `SillyParrot` app, you might have noticed that it is a bit
    strange that the GUI remains in English after you have selected another language.
    We will go further into the synchronization of the visual and oral parts of the
    app in the section about multimodality, but we will start now by making sure they
    are both in the same language. In order to do that, we will take advantage of
    the `res` folder, which holds `xml` files that contain information that can be
    referenced from the activities.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试了`SillyParrot`应用后，你可能已经注意到在选择其他语言后，GUI仍然显示英文，这有些奇怪。我们将在多模态部分进一步讨论应用程序视觉和口语部分的同步，但现在我们将先确保它们使用同一种语言。为了做到这一点，我们将利用`res`文件夹，其中包含`xml`文件，这些文件包含可以从活动引用的信息。
- en: 'The process of implementing an app which is responsive to different languages
    is usually described as localization of an application. One of the main issues
    in localization is to provide text messages in different languages, but images,
    layouts and other resources can also be localized (take a look at the tutorial
    in this web page to see an example with localized images: [http://www.icanlocalize.com/site/tutorials/android-application-localization-tutorial/](http://www.icanlocalize.com/site/tutorials/android-application-localization-tutorial/)).
    To do this it is necessary to include the files in specific directories that indicate
    the language code.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实现对不同语言响应的应用程序的过程通常被称为应用程序的本地化。本地化中的一个主要问题是提供不同语言的文本信息，但图片、布局和其他资源也可以进行本地化（请查看本网页上的教程，了解一个包含本地化图片的示例：[http://www.icanlocalize.com/site/tutorials/android-application-localization-tutorial/](http://www.icanlocalize.com/site/tutorials/android-application-localization-tutorial/)）。为此，需要将文件包含在指定语言代码的特定目录中。
- en: 'If the locale of a device is `es-ES` and the code makes reference to the string
    `R.string.mymessage`, Android will look for it in the following directories, in
    the specified order:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备的地区设置为`es-ES`，并且代码引用了字符串`R.string.mymessage`，Android将按照以下顺序在以下目录中查找它：
- en: '`res/values-es-rES/strings.xml`'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`res/values-es-rES/strings.xml`'
- en: '`res/values-es/strings.xml`'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`res/values-es/strings.xml`'
- en: '`res/values/strings.xml`'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`res/values/strings.xml`'
- en: Thus, if you are in Mexico and the default locale of your device is `es-MX`,
    then it will not match the default Spanish from Spain (option 1), but it will
    match the generic Spanish (option 2). If you are in Chicago and the locale of
    your device is `en-US`, then it will try to find the string in the default directory
    (option 3).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你在墨西哥，而设备的默认地区设置为`es-MX`，那么它不会匹配来自西班牙的默认西班牙语（选项1），但会匹配通用西班牙语（选项2）。如果你在芝加哥，设备的地区设置为`en-US`，那么它会尝试在默认目录（选项3）中找到字符串。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Don''t forget default resources!**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要忘记默认资源！**'
- en: We cannot expect that all locales are available in our user's devices (see an
    explanation here [http://developer.android.com/reference/java/util/Locale.html](http://developer.android.com/reference/java/util/Locale.html)),
    thus it is very important not to forget the default resources, as Android will
    load them from `res/values/` whenever there is no xml file available for the desired
    locale.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能期望所有地区设置都能在用户的设备上使用（具体解释请见[http://developer.android.com/reference/java/util/Locale.html](http://developer.android.com/reference/java/util/Locale.html)），因此，不要忘记默认资源非常重要，因为当没有为所需地区设置提供xml文件时，Android将从`res/values/`加载它们。
- en: A good design practice is to include all messages in the target language in
    the default folder, where it is the one that we expect most users will employ,
    and then try to create as few resource files as possible for the other languages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的设计实践是将所有目标语言的的消息包含在默认文件夹中，这是我们预计大多数用户会使用的语言，然后尽量为其他语言创建尽可能少的资源文件。
- en: 'Say, for example, we have identified that our app must support the following
    languages: English as spoken in US and Canada, Spanish as spoken in US, and French
    as spoken in Canada, with US English being the main language. In this case, the
    strings in US English should be in the default folder (`res/values/strings.xml`).
    Then, only specific messages that are different in Canadian English would be included
    in a `res/values/en-rCA/strings.xml` folder, so there is no need to replicate
    all the strings for both locales. A similar process happens with Spanish and French,
    which can be included in `res/values-ES/` and `res/values-fr/` folders, and later
    be localized to `res/values-es-rUS` or `res/values-fr-rCA/` if other varieties
    need to be considered. Android provides a checklist to plan how to localize your
    apps, which you can find at: [http://developer.android.com/distribute/googleplay/publish/localizing.html](http://developer.android.com/distribute/googleplay/publish/localizing.html).
    Pay attention to include the `r` before the country code as well as using `-`
    instead of `_` when creating the directories.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们确定应用必须支持以下语言：美国和加拿大使用的英语，美国使用的西班牙语，以及加拿大使用的法语，以美国英语为主要语言。在这种情况下，美国英语的字符串应该放在默认文件夹（`res/values/strings.xml`）中。然后，只有在加拿大英语中不同的特定消息才会被包含在`res/values/en-rCA/strings.xml`文件夹中，因此无需为这两个地区复制所有字符串。西班牙语和法语也是类似处理，可以包含在`res/values-ES/`和`res/values-fr/`文件夹中，如果需要考虑其他变体，则后来可以本地化为`res/values-es-rUS`或`res/values-fr-rCA/`。Android提供了一个清单，以规划如何本地化你的应用，你可以在这里找到：[http://developer.android.com/distribute/googleplay/publish/localizing.html](http://developer.android.com/distribute/googleplay/publish/localizing.html)。注意在创建目录时，在国别代码前加上`r`，并使用`-`代替`_`。
- en: In the `Parrot` app we have improved `SillyParrot` by automatically adapting
    to the device locale (`Locale.getDefault().getDisplayLanguage();`) following the
    structure described in the previous paragraph. Take a look at the directory structure
    of the project in the code bundle. In the Android developers guide ([http://developer.android.com/guide/topics/resources/localization.htm](http://developer.android.com/guide/topics/resources/localization.htm))
    there are examples of how to test localized apps in different languages, though
    you will need to try with different languages in a physical device to test the
    speech recognition part.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Parrot`应用中，我们通过自动适应设备地区设置（`Locale.getDefault().getDisplayLanguage();`）改进了`SillyParrot`，这一做法符合前文所述的结构。请查看代码包中的项目目录结构。在Android开发者指南（[http://developer.android.com/guide/topics/resources/localization.htm](http://developer.android.com/guide/topics/resources/localization.htm)）中有示例说明如何在不同语言中测试本地化应用，不过你需要使用物理设备尝试不同的语言来测试语音识别部分。
- en: Multimodality
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多模态
- en: An application may be considered multimodal if it uses several input and/or
    output modalities. In this sense, all the apps presented in this book are multimodal,
    as they use voice as well as a GUI either in the output or input.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个应用使用了多种输入和/或输出方式，它可能被认为是多模态的。从这个意义上说，本书中介绍的所有应用都是多模态的，因为它们既使用了语音，也使用了图形用户界面进行输入或输出。
- en: However, in the previous examples the modalities were not synchronized or used
    to provide alternative ways for handling the same bits of information. For example,
    in the `MusicBrain` app in [Chapter 5](ch05.html "Chapter 5. Form-filling Dialogs"),
    *Form-filling Dialogs* the input was oral and the output visual, and in the `SimpleParrot`
    app described in this chapter, the input and output are oral (requiring speech
    recognition and synthesis) and visual (selecting a language and the **push to
    speak** button in the input and **toasts** for output), but they correspond to
    different elements in the interface.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在之前的例子中，模态并没有同步或用于提供处理相同信息片段的替代方式。例如，在[第5章](ch05.html "第5章. 表单填充对话")《*表单填充对话*》中的
    `MusicBrain` 应用程序，输入是口头的，输出是视觉的，在本章中描述的 `SimpleParrot` 应用程序中，输入和输出都是口头的（需要语音识别和合成）和视觉的（选择语言和输入中的
    **按下说话** 按钮以及输出的 **通知** ），但它们对应于界面中的不同元素。
- en: In this section, we will describe how to develop multimodal applications in
    which the modalities can be seamlessly combined to input or output data, so the
    user can select the most convenient modality to use at any particular time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何开发多模态应用程序，在这些应用程序中，模态可以无缝结合以输入或输出数据，因此用户可以在特定时间选择最方便的模态。
- en: To do so, we build on the `FormFillLib` library presented in [Chapter 5](ch05.html
    "Chapter 5. Form-filling Dialogs"), *Form-filling Dialogs*, augmenting it by considering
    the synchronization of the oral fields with different elements in the GUI. This
    way, the user can fill in all the different elements in the GUI by either clicking
    or using speech.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们在[第5章](ch05.html "第5章. 表单填充对话")《*表单填充对话*》中展示的 `FormFillLib` 库基础上进行构建，通过考虑语音字段与
    GUI 中不同元素的同步来增强它。这样，用户可以通过点击或使用语音来填充 GUI 中的所有不同元素。
- en: The main idea is to create a correspondence between the fields in the voice
    form and the different elements in the GUI. We have considered the combinations
    of voice and GUI elements shown in the following table, so that when one of the
    elements in the pair is filled, the other is assigned a value accordingly. For
    example, if the user is prompted to choose an option and does it orally, the corresponding
    radio button or element in a list will be selected in the GUI. Similarly, if the
    element is chosen in the radio button or list, the user will not be asked for
    it orally.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是在语音表单中的字段与 GUI 中的不同元素之间建立对应关系。我们已经考虑了以下表格中显示的语音和 GUI 元素的组合，以便当一个元素对中的元素被填充时，另一个元素相应地被赋值。例如，如果用户被提示选择一个选项并且口头这样做，GUI
    中的相应单选按钮或列表中的元素将被选中。同样，如果在单选按钮或列表中选择了元素，用户将不会被口头询问。
- en: '| Description | Voice Field | GUI Element |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 语音字段 | GUI 元素 |'
- en: '| --- | --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Open input in which the user may write a long text or provide it orally |
    The results from the Google Speech Recognizer can be used directly | Text field
    ( `EditText`) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 开放输入，用户可以书写长文本或口头提供 | 可以直接使用谷歌语音识别器的结果 | 文本字段 ( `EditText`) |'
- en: '| Restricted input in which the user may select between alternative options
    | A hand-crafted grammar should be used to restrict the options | Group of radio
    buttons ( `RadioGroup`) or lists ( `ListView` or `Spinner`) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 受限输入，用户可以在备选选项之间选择 | 应该使用手工制作的语法来限制选项 | 单选按钮组 ( `RadioGroup`) 或列表 ( `ListView`
    或 `Spinner`) |'
- en: '| Restricted `yes`/`no` type inputs | A hand-crafted grammar should be used
    to restrict the options to `yes`/`no` and equivalents (for example, `true`/`false`)
    | Check boxes (`CheckBox`) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 受限的 `yes`/`no` 类型输入 | 应该使用手工制作的语法来限制选项为 `yes`/`no` 及其等价物（例如，`true`/`false`）
    | 复选框 (`CheckBox`) |'
- en: As can be observed in the table, it is important to introduce grammars, because
    the speech input must only accept the options provided by the GUI. This is why
    we have also augmented the capabilities of the VXML parser presented in [Chapter
    5](ch05.html "Chapter 5. Form-filling Dialogs"), *Form-Filling Dialogs* to take
    grammars into account.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从表中可以观察到，引入语法很重要，因为语音输入必须只接受 GUI 提供的选项。这就是为什么我们在[第5章](ch05.html "第5章. 表单填充对话")《*表单填充对话*》中展示的
    VXML 解析器功能也增加了对语法的考虑。
- en: In order to do this, the new `MultimodalFormFillLib` library (see `sandra.libs.dm.multimodalformfilllib`
    in the code bundle) incorporates several changes with respect to the `FormFillLib`
    library, which are also pointed out as comments in the code bundle. The next figure
    shows an activity diagram summarizing how oral dialogs are interpreted in the
    new library. The shaded parts are the main changes with respect to the interpreter
    presented in [Chapter 5](ch05.html "Chapter 5. Form-filling Dialogs"), *Form-filling
    Dialogs*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，新的`MultimodalFormFillLib`库（参见代码包中的`sandra.libs.dm.multimodalformfilllib`）相较于`FormFillLib`库进行了几处修改，这些修改在代码包中的注释里也有说明。下一张图展示了如何在新库中解释口头对话的活动图。阴影部分是相较于[第5章](ch05.html
    "第5章. 表单填充对话")，*表单填充对话*中介绍的解释器的主要变化。
- en: '![Multimodality](img/5297_07_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![多模态](img/5297_07_02.jpg)'
- en: As can be observed in the preceding diagram, in the `MultimodalFormFillLib`
    library not all recognition results are considered valid in all situations. If
    we look at the table introduced previously; if an oral field corresponds to a
    radio button, check box or list in the GUI, we should restrict the valid values
    for the field to the options provided. For example, if our app presents a selection
    list of ice-cream flavors containing chocolate, vanilla, and strawberry, then
    the only valid recognition results when the user is asked what flavor he prefers
    should be one of those three. This way, the user can either select a flavor on
    the screen or say the flavor orally, and the app will automatically update the
    other modality (fill the oral field or select an option in the GUI respectively).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，在`MultimodalFormFillLib`库中，并不是所有识别结果在所有情况下都被认为是有效的。如果我们查看之前引入的表格；如果语音字段对应于GUI中的单选按钮、复选框或列表，我们应该将字段的合法值限制为提供的选项。例如，如果我们的应用程序提供了一个包含巧克力、香草和草莓口味的冰淇淋选择列表，那么当询问用户他更喜欢哪种口味时，唯一有效的识别结果应该是这三种之一。这样，用户可以在屏幕上选择口味，或者口头说出口味，应用程序将自动更新另一种模态（填写语音字段或分别在GUI中选择选项）。
- en: This restriction is implemented by means of grammars. Now, each field contains
    information about its grammar wherever one has been indicated (for example, there
    is no need to indicate a grammar for text fields with an unrestricted input).
    When the field is visited by the `DialogInterpreter`, if there is a grammar, the
    recognized phrase is only considered if it is valid in the grammar; if not, it
    is treated as a no match.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个限制是通过语法实现的。现在，每个字段都包含有关其语法的详细信息（如果已指定的话，例如对于没有输入限制的文本字段，则无需指明语法）。当`DialogInterpreter`访问该字段时，如果存在语法，则只有语法中有效的识别短语才会被考虑；如果不是，则被视为不匹配。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: For simplicity, we only consider whether the value is valid or not according
    to the grammar, and not its semantic value. However, this could be done if the
    `isValid` method in the `Field` class did not compute only a Boolean value, but
    processed the semantics in some way (for example, by following the guidelines
    presented in [Chapter 6](ch06.html "Chapter 6. Grammars for Dialog"), *Grammars
    for Dialog*).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们只根据语法判断值是否有效，而不考虑其语义价值。然而，如果`Field`类中的`isValid`方法不仅仅计算布尔值，而是以某种方式处理语义（例如，遵循[第6章](ch06.html
    "第6章. 对话语法")，*对话语法*中提出的指导方针），这是可以实现的。
- en: In `VXMLParser.java` file, we have included `<grammar>` as a possible tag to
    be parsed. This tag has a mandatory `src` attribute indicating its location. When
    the parser encounters the tag, it invokes the `setGrammar` method in the `Field`
    class, passing the grammar `src` as a parameter. In `Field.java`, we have included
    methods to retrieve the XML contents of the grammar and to parse and query them.
    The `setGrammar` method invokes `retrieveGrammar`, which accesses the `url` (the
    `src` attribute contained a URL) or reads the grammar from the `assets` folder
    (the `src` attribute contained just the name of the grammar) and obtains the contents
    in a String. Then the `processXMLContents` method initializes the handcrafted
    grammar using the library `NLULib` developed in [Chapter 6](ch06.html "Chapter 6. Grammars
    for Dialog"), *Grammars for Dialog*. If no grammar is indicated for a specific
    field, then any recognition result is accepted without subsequent filtering.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`VXMLParser.java`文件中，我们包含了`<grammar>`作为可能要解析的标签。此标签有一个必填的`src`属性，指明其位置。当解析器遇到该标签时，它会调用`Field`类中的`setGrammar`方法，将语法`src`作为参数传递。在`Field.java`中，我们包含了获取语法的XML内容的方法以及解析和查询它们的方法。`setGrammar`方法调用`retrieveGrammar`，后者访问`url`（`src`属性包含一个URL）或从`assets`文件夹中读取语法（`src`属性仅包含语法的名称），并以字符串形式获取内容。然后`processXMLContents`方法使用第[六章](ch06.html
    "第六章. 对话语法")开发的`NLULib`库初始化手工制作的语法。*对话语法*。如果没有为特定字段指定语法，则任何识别结果都无需后续过滤即可接受。
- en: We have added another method in `Field.java` file called `isValid`, which can
    be used to check whether a phrase is valid in the grammar. When no grammar is
    used, the `isValid` method returns `true` regardless of the value.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Field.java`文件中增加了一个名为`isValid`的方法，该方法可以用来检查一个短语在语法中是否有效。当不使用语法时，无论值如何，`isValid`方法都返回`true`。
- en: The behavior described is coded in the `processAsrResults` method of the `DialogInterpreter`
    class, in which we have included the code to check if any of the recognition results
    in the N-best list obtained by the recognizer is valid in the grammar. If so,
    then the process moves to the next field, if not, it remains in the same field.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所述行为在`DialogInterpreter`类的`processAsrResults`方法中编码，我们在这其中包含了检查识别器获得的N-best列表中的任何识别结果在语法中是否有效的代码。如果有效，则流程移动到下一个字段；如果无效，则保持在同一字段。
- en: When we used the speech-only interface in previous chapters, there was no possibility
    for the user to delete one of the fields for which he had already provided information.
    This is not the case with a multimodal interface, as the user may change already
    provided items in the GUI. We have changed the method `moveToNextField` in the
    `DialogInterpreter` class, so that the condition for the end of the dialog is
    not that all fields have been visited, but that all fields are filled (their value
    is not `null`). The method that checks whether all fields in a form are filled
    (`allFieldsFilled`) has been included in the `Form` class. Also, it considers
    the list of fields to be circular, so that, when the last field is encountered,
    if there are unfilled fields it continues with the first.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中使用语音界面时，用户无法删除他已经提供信息的字段。在使用多模态界面时，情况并非如此，因为用户可以在GUI中更改已提供的项目。我们更改了`DialogInterpreter`类中的`moveToNextField`方法，因此对话结束的条件不是访问了所有字段，而是所有字段都已填写（其值不为`null`）。检查表单中所有字段是否已填写的方法（`allFieldsFilled`）已包含在`Form`类中。同时，它将字段列表视为循环的，以便在遇到最后一个字段时，如果有未填写的字段，它将继续从第一个字段开始。
- en: Now that grammars are ready to be considered, we can look at multimodality.
    We have created the `MultimodalDialogInterpreter` class, a subclass of `DialogInterpreter`
    that contains a collection of `MultimodalElement` objects. These objects contain
    pairs of oral and GUI fields that must be synchronized.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 既然语法已准备好被考虑，我们可以看看多模态。我们创建了`MultimodalDialogInterpreter`类，它是`DialogInterpreter`的一个子类，包含一系列`MultimodalElement`对象。这些对象包含必须同步的口语和GUI字段对。
- en: Firstly, we make sure that the changes in the oral part have an impact in the
    GUI. The method `oraltoGui` (abstract in `DialogInterpreter`, implemented in `MultimodalDialogInterpreter`)
    is invoked each time a field is filled orally (see the `processResults` method
    in `DialogInterpreter`) in order to show its value in the GUI. This method checks
    the type of visual element that corresponds to the oral field and shows the information
    accordingly by invoking the corresponding method. In list views and spinners it
    selects one item, in a radio group it checks one of the radio buttons, in a text
    field it writes a text, or it selects or deselects a checkbox as described in
    the previous table showing combinations of voice fields and GUI elements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们确保口头部分的更改对GUI产生影响。每次口头填写一个字段时，都会调用`oraltoGui`方法（在`DialogInterpreter`中是抽象的，在`MultimodalDialogInterpreter`中实现），以在GUI中显示其值（请参见`DialogInterpreter`中的`processResults`方法）。此方法检查与口头字段对应的视觉元素的类型，并通过调用相应的方法相应地显示信息。在列表视图和下拉菜单中选择一个项目，在单选组中选中一个单选按钮，在文本字段中写入文本，或者选中或取消选中复选框，如前表所示，展示了语音字段和GUI元素的组合。
- en: Secondly, we make sure that the changes in the visual part have an impact in
    the oral part. Thus if an element has been filled in the GUI, the app should not
    ask for it orally. The `guiToOral` method in the `MultimodalDialogInterpreter`
    class is invoked to save the values retrieved from the GUI in the oral fields.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们确保视觉部分的更改对口头部分产生影响。因此，如果在GUI中填写了一个元素，应用就不应该口头询问。在`MultimodalDialogInterpreter`类中调用`guiToOral`方法，将来自GUI的值保存到口头字段中。
- en: 'As an example of the use of the `MultimodalFormFillLib`, we present the `SendMessage`
    app, shown in the next figure, in which the user fills some pieces of information
    either orally, or using the GUI, or with both. It is a mock app, as it does not
    read the contacts from the user''s contacts list and does not send any message,
    as the focus of this chapter is on the interface. However this can be done following
    the instructions provided here: [http://developer.android.com/training/contacts-provider/retrieve-names.html](http://developer.android.com/training/contacts-provider/retrieve-names.html)
    and using the `SMSManager` for sending SMS, or an Intent with `ACTION_SEND` and
    `EXTRA_EMAIL` to send e-mails by just changing the implementation of the `populateContactList`
    and `sendMessage` methods in `SendMessage.java` file.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面以`MultimodalFormFillLib`的用途为例，我们展示了`SendMessage`应用，如图所示，用户可以通过口头、使用图形用户界面（GUI）或两者结合的方式填写一些信息。这是一个模拟应用，因为它不会从用户的联系人列表中读取联系人，也不会发送任何消息，因为本章的重点在于接口。然而，根据这里提供的说明：[http://developer.android.com/training/contacts-provider/retrieve-names.html](http://developer.android.com/training/contacts-provider/retrieve-names.html)，使用`SMSManager`发送短信，或者使用带有`ACTION_SEND`和`EXTRA_EMAIL`的Intent发送电子邮件，只需更改`SendMessage.java`文件中的`populateContactList`和`sendMessage`方法的实现即可完成这些功能。
- en: '![Multimodality](img/5297_07_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![多模态](img/5297_07_03.jpg)'
- en: 'The `SendMessage` app reads the `VXML` file that contains the structure of
    the oral dialog from the `assets` folder as shown in the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`SendMessage`应用从`assets`文件夹中读取包含口头对话结构的`VXML`文件，如下代码所示：'
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As can be observed in the `VXML` file and the GUI, there are four pieces of
    information required from the user; the recipient, whether he wants an acknowledgment
    of receipt, the urgency of the message (normal or urgent), and the message to
    be sent. We have used all the different GUI elements supported. As can be observed
    in the VXML code, all fields have grammars assigned except for the `message`.
    The `contact_grammar` accepts the contact names, the `ack_grammar` accepts phrases
    that can be translated to Boolean values such as `yes`, `no`, `true`, or `false`,
    the `urgency_grammar` contains the two possible values `normal` and `urgent`,
    and the `message` field does not indicate a grammar so that it accepts the best
    recognition result allowing the user to talk freely.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从`VXML`文件和GUI中可以观察到，需要从用户那里获取四部分信息：收件人、是否需要回执确认、消息的紧急性（正常或紧急）以及要发送的消息。我们使用了所有支持的不同的GUI元素。如VXML代码所示，除了`message`字段外，所有字段都分配了语法。`contact_grammar`接受联系人名称，`ack_grammar`接受可以翻译为布尔值的短语，如`yes`、`no`、`true`或`false`，`urgency_grammar`包含两个可能的值`normal`和`urgent`，而`message`字段没有指定语法，以便接受最佳识别结果，允许用户自由交谈。
- en: The VXML could also be read from the web as in [Chapter 5](ch05.html "Chapter 5. Form-filling
    Dialogs"), *Form-filling Dialogs*, but as it is so coupled with the GUI it is
    unlikely to change much, so it can be stored more conveniently in the `assets`
    folder. For example, we take into account that the valid values for the oral input
    are the same as the options shown visually in the GUI. In the previous screenshot,
    the radio buttons show the text **Normal** and **Urgent**, and thus, the corresponding
    oral field should only accept the values `urgent` and `normal`. Developers must
    bear in mind that this poses a considerable restriction on the VXML and grammar
    files.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: VXML也可以像在[第5章](ch05.html "第5章. 表单填充对话")，*表单填充对话*中那样从网络上读取，但由于它与GUI紧密耦合，所以它不太可能发生很大变化，因此可以更方便地存储在`assets`文件夹中。例如，我们考虑到口头输入的有效值与GUI中显示的视觉选项相同。在上一个截图中，单选按钮显示文本**正常**和**紧急**，因此，相应的口头字段只应接受值`urgent`和`normal`。开发者必须牢记，这对VXML和语法文件构成了相当大的限制。
- en: The `SendMessage` class is a subclass of `MultimodalDialogInterpreter`. In the
    `onCreate` method it invokes the `initializeGUI` and `startDialog` methods. The
    former initializes all the GUI elements, which must invoke the `guiToOral` method
    in their listeners (as the oral part must be changed after the changes in the
    GUI). The latter parses the oral form, sets the correspondences between the oral
    and visual elements (`setMultimodalCorrespondence`), and starts the oral interaction.
    The oral dialog controls the end of the interaction. When the `processDialogResults`
    is invoked, the user is informed about the success of the interaction (in a real
    setting, this method would actually send the message).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`SendMessage`类是`MultimodalDialogInterpreter`的子类。在`onCreate`方法中，它调用了`initializeGUI`和`startDialog`方法。前者初始化所有的GUI元素，这些元素必须在它们的监听器中调用`guiToOral`方法（因为口头部分必须在GUI更改后进行更改）。后者解析口头形式，设置口头和视觉元素之间的对应关系（`setMultimodalCorrespondence`），并开始口头互动。口头对话控制互动的结束。当调用`processDialogResults`时，用户会被告知互动是否成功（在实际设置中，此方法会实际发送消息）。'
- en: Note that the oral part will not be ready until the `vxml` file is read and
    parsed. This is why the GUI must wait for this process to be finished before trying
    to update the oral part. This is taken into account when setting the GUI elements
    (in the `setContactList`, `setAckCheckBox`, `setUrgencyRadioGroup`, and `setMessageEditText`).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，口头部分将在读取并解析`vxml`文件后才会准备好。这就是为什么GUI必须等待这个过程完成后再尝试更新口头部分的原因。在设置GUI元素时（在`setContactList`、`setAckCheckBox`、`setUrgencyRadioGroup`和`setMessageEditText`中）考虑到了这一点。
- en: The next screenshot shows an excerpt from a sample interaction with the `SendMessage`
    app where the final state of the GUI is as shown in the previous screenshot. In
    the example, the user selects to receive an acknowledgement of receipt and to
    send the message urgently. This information is saved by the system in the oral
    fields. As can be observed in the screenshot, the user is not asked for these
    pieces of information orally. Then, the user speaks the name of the recipient.
    As it is one of the valid contacts, it is accepted and shown in the GUI in the
    corresponding selection list.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了一个与`SendMessage`应用互动的示例，其中GUI的最终状态如前一个截图所示。在示例中，用户选择接收回执确认并发送紧急消息。这些信息由系统保存在口头字段中。从截图中可以看出，用户并没有被口头询问这些信息。然后，用户说出收件人的名字。由于这是有效的联系人之一，因此它被接受并在GUI的相应选择列表中显示。
- en: 'Finally, the user provides the message, and the result is shown in the GUI
    without being previously filtered by a grammar as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，用户输入信息，结果在GUI中显示，而不会像以下截图所示那样先通过语法进行过滤：
- en: '![Multimodality](img/5297OS_07_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![多模态](img/5297OS_07_04.jpg)'
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter has shown how to include languages other than English into apps,
    using resources associated with different locale settings. We also looked at how
    to synchronize the oral and visual modalities so that users can combine them when
    interacting with the apps.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何将除英语以外的语言集成到应用中，使用与不同地域设置相关的资源。我们还了解了如何同步口头和视觉模态，以便用户在与应用互动时可以结合使用它们。
- en: In the next chapter we will describe how to design virtual personal assistants
    that can engage in conversation and perform a range of tasks on your device.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何设计虚拟个人助手，使其能在您的设备上进行对话并执行一系列任务。
