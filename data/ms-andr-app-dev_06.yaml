- en: Chapter 6. CardView and Material Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. CardView 和材料设计
- en: 'In the first part of this chapter, we will improve our app significantly from
    a UI perspective and make it look professional by starting with a new widget:
    **CardView**. We will learn how to use design time attributes, which will improve
    our designing and development speed, and we will use a third party library to
    include custom fonts in an easy way in our entire app.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，我们将从用户界面的角度显著改进我们的应用程序，使其看起来更专业，我们从一个新的小部件：**CardView** 开始。我们将学习如何使用设计时属性，这将提高我们的设计和开发速度，并且我们将使用第三方库轻松地在整个应用程序中包含自定义字体。
- en: The second part will be focused on the design support library, adding material
    design concepts to our app, improving the tabs, and adding a parallax effect to
    the job offer view. During this, we will clarify what a toolbar, action bar, and
    app bar is, and how to implement up navigation from the app bar.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分将重点关注设计支持库，将材料设计概念添加到我们的应用程序中，改进标签页，并在职位视图上添加视差效果。在此过程中，我们将阐明工具栏、操作栏和应用程序栏是什么，以及如何从应用程序栏实现向上导航。
- en: 'CardView and UI tips:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CardView 和 UI 小贴士：
- en: CardView
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CardView
- en: Design time layout attributes
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计时布局属性
- en: Custom fonts
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义字体
- en: 'Design support library:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计支持库：
- en: TabLayout
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TabLayout
- en: Toolbar, action bar, and app bar
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具栏、操作栏和应用程序栏
- en: CoordinatorLayout
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoordinatorLayout
- en: Up navigation
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向上导航
- en: CardView and UI design tips
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CardView 和 UI 设计小贴士
- en: At the moment, our application displays the job offers in a row with two text
    views; it displays the information needed and we can say that the app is fine
    as it is and it serves its purpose. However, we can still make a useful app and
    have a professional, good-looking interface at the same time, allowing us to be
    original and different from the competition. For instance, to show job offers,
    we can simulate a job board with adverts pinned on it. For this, we can use the
    CardView widget, which will give it depth and the appearance of a paper card.
    We will change the font of our app. A simple change such as this makes a big difference;
    when we change the default font to a custom font, the app from the users' eyes
    is a customized one, where the developer has taken care of the smallest details.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的应用程序以行形式显示职位信息，包含两个文本视图；它展示了所需的信息，我们可以说应用程序目前是好的，并且达到了它的目的。然而，我们仍然可以让应用程序实用，并且同时拥有专业、美观的界面，使我们能够保持原创并与竞争对手不同。例如，为了展示职位信息，我们可以模拟一个带有广告海报的职位公告板。为此，我们可以使用
    CardView 小部件，它将赋予其深度和纸质卡片的外观。我们将改变我们应用程序的字体。这样一个简单的改变可以带来很大的不同；当我们把默认字体改为自定义字体时，从用户的角度来看，这个应用程序就是一个定制的版本，开发者关注到了每一个细节。
- en: Introducing CardView
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 CardView
- en: 'CardView was released with Android 5.0\. It is a view with rounded corners
    and an elevation with shadows, thus providing a depth feel and simulating a card.
    Combining this with a recycler view, we get a great-looking list of items, with
    a behavior and look consistent with many apps. The following image is an example
    of a list with CardView and custom fonts:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CardView 随 Android 5.0 一起发布。它是一个具有圆角和阴影的视图，从而提供深度感，并模拟卡片。将此与回收视图结合使用，我们可以得到一个外观一致且符合许多应用程序的列表项。以下是一张带有
    CardView 和自定义字体的列表示例：
- en: '![Introducing CardView](img/4887_06_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 CardView](img/4887_06_01.jpg)'
- en: While working with CardView, keep in mind that the rounded corners are implemented
    differently depending on the Android version. Padding is added to avoid clipping
    the child views in versions prior to Android 5.0, as also to achieve the shadow
    effect. In versions later than Android 5.0, shadows are displayed based on the
    property elevation from CardView, and any child intersecting with the rounded
    corners is clipped.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CardView 时，请记住，圆角根据 Android 版本的不同实现方式也不同。在 Android 5.0 之前的版本中，为了防止裁剪子视图以及实现阴影效果，会增加内边距。在
    Android 5.0 及以后的版本中，基于 CardView 的 elevation 属性显示阴影，任何与圆角相交的子视图都会被裁剪。
- en: 'To start using CardView, we need to add it as a dependency from the project
    structure window or add the following line to the dependencies inside `build.gradle`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 CardView，我们需要从项目结构窗口将其作为依赖项添加，或者在 `build.gradle` 文件内的依赖项中添加以下行：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can modify our `row_job_offer.xml` file with a base view as CardView with
    the content inside. This CardView will have some elevation and rounded corners.
    To set these attributes, we need to import CardView''s own attributes by adding
    the following schema to the XML:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改我们的 `row_job_offer.xml` 文件，将基础视图设置为带有内容的 CardView。这个 CardView 将具有一些高度和圆角。为了设置这些属性，我们需要通过在
    XML 中添加以下架构来导入 CardView 自有的属性：
- en: 'The following code will create the new layout:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将创建新的布局：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We found a texture of a corkboard set it as a background, and on every card,
    we added a pin with an ImageView object at the top. The following is the achieved
    result:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了一块软木塞的纹理，将其设置为背景，并在每张卡片上添加了一个带有ImageView对象的图钉。以下是实现的效果：
- en: '![Introducing CardView](img/4887_06_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 CardView](img/4887_06_02.jpg)'
- en: The app looks much better than before; now, it's really a job board. By displaying
    the same information—the same two `TextView` with the title and job description—and
    simply changing the appearance, it evolved from a demo app to an app that could
    perfectly be launched in the Play Store.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序看起来比之前好多了；现在它真成了一个职位公告板。仅仅通过改变外观，展示了相同的信息——同样是带有标题和职位描述的两个`TextView`——它就从演示应用演变成了可以在Play商店完美发布的应用。
- en: We can continue improving this by changing the font, but before this, we will
    introduce the design time layout attributes, which will make the design of a view
    easier and quicker.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更改字体来继续改进这一点，但在介绍设计时布局属性之前，这将使视图设计更加容易和快捷。
- en: Design-time layout attributes
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计时的布局属性
- en: When working with design-time attributes, I always remember a funny story that
    took place in one of my first jobs. I had to display a list of contacts, so when
    I created the view of the contact, I used dummy data, which is used to assign
    some text while you create the view so that you can see the size, color, and general
    look in the design view.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用设计时属性时，我总是想起我在第一份工作中发生的一个有趣故事。我需要显示联系人列表，因此我在创建联系人视图时使用了虚拟数据，这样在创建视图时可以分配一些文本，以便在设计视图中看到大小、颜色和总体外观。
- en: The contact that I created was named *Paco el churrero*, or Frank the churros
    maker. Paco is a synonym for Francisco, and a churro—if you don't know—is a fried
    dough pastry. Anyway, this dummy data was changed to a proper contact name, and
    when the contact list was shown, these contacts were retrieved from a server.
    I can't remember whether I was in a hurry to release the app, I forgot to do it,
    or I simply missed it, but the app went live that way. I started to work on another
    component, and all was fine until one day, when there was a problem on the server
    side, and the server was sending empty contacts. The app was unable to override
    the dummy data with the contact name, and Paco el churrero was shown as a contact!
    Hopefully, the server was fixed before any user noticed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的联系人名叫*Paco el churrero*，即弗兰克，炸油条的人。Paco是弗朗西斯科的昵称，而如果你不知道，churro是一种油炸面食。不管怎样，这些虚拟数据后来被更正为适当的联系人姓名，当显示联系人列表时，这些联系人是从服务器获取的。我记不清是我急于发布应用，忘记了这个操作，还是我简单地遗漏了它，但应用就这样上线了。我开始处理另一个组件，直到有一天服务器端出现问题，服务器开始发送空白联系人。应用无法用联系人姓名覆盖虚拟数据，结果Paco
    el churrero作为联系人显示了出来！幸运的是，在用户注意到之前，服务器得到了修复。
- en: After this, I created the view with dummy data, and once I was happy with the
    view, I removed the dummy data. However, with this approach, when I was asked
    for a UI change, I had to add the dummy data again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我使用虚拟数据创建了视图，当我满意视图后，我删除了虚拟数据。但是，这种方法在需要更改UI时，我不得不再次添加虚拟数据。
- en: With the release of Android Studio 0.2.11, the design-time layout attributes
    were born. These allow us to display text or any attribute in the design view
    that won't be there when you run the app; this data is only visible in the design
    view.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Android Studio 0.2.11版本的发布，设计时的布局属性应运而生。这些属性允许我们在设计视图中显示文本或任何属性，这些属性在运行应用时不会出现；这些数据只在设计视图中可见。
- en: To use these, we need to add the namespace tools to our layout. The namespace
    is always defined in the root element of the view; you can find the line, `informalexample">`
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些属性，我们需要在布局中添加工具的命名空间。命名空间总是在视图的根元素中定义；你可以找到这样的行，`informalexample">`。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To test this, we will add dummy text to the job offer and job description `TextView`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个，我们将在职位信息和职位描述的`TextView`中添加一些虚拟文本：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you have problems rendering the design view, change the Android version
    or the theme, as in the following image. If the problem persists, ensure that
    you have the latest version of Android Studio and the latest Android API downloaded:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到渲染设计视图的问题，可以更改Android版本或主题，如下面的图片所示。如果问题仍然存在，请确保你安装了最新版本的Android Studio和下载了最新的Android
    API：
- en: '![Design-time layout attributes](img/4887_06_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![设计时的布局属性](img/4887_06_03.jpg)'
- en: Once the view is rendered, we can see the job offer with the title and description
    from the design-time attributes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当视图渲染后，我们可以看到设计时属性中的职位提供标题和描述。
- en: '![Design-time layout attributes](img/4887_06_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设计时布局属性](img/4887_06_04.jpg)'
- en: You can use any attribute, text color, background color, and even image source,
    which is really useful when you create a view which contains an image that will
    be downloaded from the internet when the app is running, but you need a preview
    image to see how the view looks while creating it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何属性，如文本颜色、背景颜色，甚至图片源，这对于创建包含从互联网下载图片的视图非常有用，但在创建视图时需要预览图片来查看视图的外观。
- en: Working with custom fonts in Android
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android中使用自定义字体
- en: When working with customs fonts on Android, there is an amazing open source
    library—*Calligraphy* by Chris Jenkins—that allows us to set a default font for
    our whole app. This means that every widget with text, a Button, TextView, and
    EditText will show this font by default and we don't have to set the font individually
    for every single item in our app. Let's take a look at this in more detail and
    consider a few arguments in favor of Calligraphy.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Android上使用自定义字体时，有一个令人惊叹的开源库——Chris Jenkins的*Calligraphy*——它允许我们为整个应用程序设置默认字体。这意味着每个带有文本的组件，如Button、TextView和EditText默认都会显示这种字体，我们无需为应用程序中的每个单独项目分别设置字体。让我们更详细地了解这一点，并考虑一些支持Calligraphy的观点。
- en: 'If we want to apply a custom font, the first thing that we need to do is to
    place that font in the `assets` folder of our app. If we don''t have this folder,
    we need to create it inside the `main` method, at the same level as `java` and
    `src`. Create a second folder, `fonts`, inside `assets` and place the font there.
    In our example, we will use the *Roboto* font; it can be obtained from Google
    fonts at [https://www.google.com/fonts#UsePlace:use/Collection:Roboto](https://www.google.com/fonts#UsePlace:use/Collection:Roboto).
    When the font is downloaded, the app structure should look similar to the following
    screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要应用一个自定义字体，我们首先需要做的是将这个字体放在我们应用程序的`assets`文件夹中。如果我们没有这个文件夹，我们需要在`main`方法中创建它，与`java`和`src`同一级别。在`assets`中创建一个名为`fonts`的第二个文件夹，并将字体放在那里。在我们的示例中，我们将使用*Roboto*字体；可以从Google字体获取，地址为[https://www.google.com/fonts#UsePlace:use/Collection:Roboto](https://www.google.com/fonts#UsePlace:use/Collection:Roboto)。下载字体后，应用程序结构应与以下截图类似：
- en: '![Working with custom fonts in Android](img/4887_06_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![在Android中使用自定义字体](img/4887_06_05.jpg)'
- en: 'Once the font is in its place, we need to create a `Typeface` object from this
    font and set it to `myTextView`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 字体放置到位后，我们需要从这个字体创建一个`Typeface`对象，并将其设置为`myTextView`：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we now wanted to apply the same font to all the components in our app, such
    as tabs, the title, and job offer cards, we would have to repeat the same code
    in different places around our app. Apart from this, we will also have performance
    issues. Creating a font from an asset requires access to the file; it is an expensive
    operation. If we changed the typeface for the job title and the job description
    inside the adapter, the view of our app wouldn't be fluent while scrolling anymore.
    This brings in extra considerations; for instance, we would have to load the typeface
    once in a static class and use it along with the app. Calligraphy handles all
    of this for us.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在想将相同的字体应用到我们应用程序中的所有组件上，比如标签、标题和职位提供卡，我们不得不在应用程序的不同地方重复相同的代码。除此之外，我们还会遇到性能问题。从资源中创建字体需要访问文件；这是一个昂贵的操作。如果我们改变了适配器中职位标题和职位描述的字体，我们应用程序的视图在滚动时将不再流畅。这带来了一些额外的考虑；例如，我们不得不在一个静态类中一次加载字体，并在整个应用程序中使用它。Calligraphy为我们处理了所有这些事情。
- en: 'Another good reason to use calligraphy is that it allows us to set the font
    in the XML, so we can have different fonts in the same view and there is no need
    to set the typeface programmatically. We just need to add the `fontPath` attribute
    to the widget and optionally the `ignore` attribute to avoid warnings of Android
    Studio not detecting `fontPath`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用书法的另一个好处是它允许我们在XML中设置字体，这样我们就可以在同一个视图中拥有不同的字体，而且无需通过编程设置字体。我们只需在组件中添加`fontPath`属性，并可选地添加`ignore`属性以避免Android
    Studio未检测到`fontPath`的警告：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have explained the advantages of calligraphy, we can use it in
    our app. Add the following line to the dependencies in `build.gradle`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经解释了书法的优点，我们可以在我们的应用程序中使用它。在`build.gradle`中的依赖项中添加以下行：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To apply a default font, add the following code to `Oncreate()` inside `MAApplication`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用默认字体，请在`MAApplication`内的`Oncreate()`中添加以下代码：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the following to any activity where we want to display the default font:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以及我们想要显示默认字体的任何活动中添加以下内容：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To finish, we can find a handwriting font that we like and set it to the card''s
    title and description, which would look similar to the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以找到我们喜欢的手写字体，并将其设置为卡片标题和描述，效果可能类似于以下输出：
- en: '![Working with custom fonts in Android](img/4887_06_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![在Android中使用自定义字体](img/4887_06_06.jpg)'
- en: The design support library
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计支持库
- en: 'The design support library introduces material design components in an official
    way and is compatible with all the versions of Android starting with Android 2.1\.
    Material design is a new design language introduced with Android Lollipop. Before
    this library was released, we watched videos and considered examples of apps using
    these components, but there was no official way to use it. This established a
    baseline for the apps to follow; therefore, to master Android, we need to master
    material design. You can compile it using the following line:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 设计支持库以官方方式引入了材料设计组件，并且兼容从Android 2.1开始的版本。材料设计是随着Android Lollipop推出的一种新的设计语言。在这个库发布之前，我们观看了使用这些组件的应用程序的视频和示例，但没有官方的方法来使用它。这为应用程序设定了一个基线；因此，要掌握Android，我们需要掌握材料设计。你可以使用以下代码行进行编译：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This library includes a visual component as the input text with floating text,
    floating action buttons, **TabLayout…**, and so on. However, material design is
    not only about visual components; it's about movement and transitions between
    its elements, and for this reason, **CoordinatorLayout** has been introduced.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库包括视觉组件作为输入文本，带有浮动文本、浮动动作按钮、**TabLayout…**等等。然而，材料设计不仅仅是视觉组件；它还涉及到其元素之间的动作和过渡，因此引入了**CoordinatorLayout**。
- en: Introducing TabLayout
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍TabLayout
- en: The `TabLayout` design library allows us to have fixed or scrollable tabs with
    text, icons, or a customized view. As you would remember from the first instance
    of this in the book, customizing tabs wasn't very easy to do, and to change from
    scrolling to fixed tabs, we needed different implementations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`TabLayout`设计库允许我们有固定或可滚动的标签，包含文本、图标或自定义视图。正如你在本书的第一个实例中所记得的，自定义标签并不是那么容易做到的，要从滚动标签更改为固定标签，我们需要不同的实现方式。'
- en: 'Now, we want to change the color and design of the tabs to be fixed; what we
    have to do first is go to `activity_main.xml` and add `TabLayout`, removing the
    previous `PagerTabStrip` tab. Our view will look as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要改变标签的颜色和设计使其固定；我们首先需要做的是进入`activity_main.xml`并添加`TabLayout`，移除之前的`PagerTabStrip`标签。我们的视图将如下所示：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When we have this, we need to add tabs to the `Layout` tab. There are two ways
    to do this; one is to create tabs and add them manually as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有这个时，我们需要向`Layout`标签中添加标签。有两种方法可以做到这一点；一种是通过以下方式手动创建标签并添加它们：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The second way, which is how we will implement the tabs, is to set the view
    pager to `TabLayout`. Our `MainActivity.java` class should look as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方式，也就是我们将要实现的标签方式，是将视图页面设置为`TabLayout`。我们的`MainActivity.java`类应该如下所示：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we don''t specify any color, `TabLayout` uses the default color from the
    theme, and the position of the tabs is fixed. Our new tab bar will look as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不指定任何颜色，`TabLayout`会使用主题中的默认颜色，并且标签的位置是固定的。我们新的标签栏将如下所示：
- en: '![Introducing TabLayout](img/4887_06_07.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![介绍TabLayout](img/4887_06_07.jpg)'
- en: Toolbar, action bar, and app bar
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏、操作栏和应用程序栏
- en: Before proceeding to add motion and animations to our app, we need to clarify
    the concepts of toolbar, action bar, app bar, and `AppBarLayout` as these may
    cause a bit of confusion.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在为我们的应用程序添加动作和动画之前，我们需要明确工具栏、操作栏、应用程序栏和`AppBarLayout`的概念，因为这些可能会造成一些混淆。
- en: 'The action and app bar are the same component; "app bar" is just a new name
    that the action bar has acquired in material design. This is the opaque bar fixed
    at the top of our activity that usually shows the title of the app, navigation
    options, and displays different actions. The icon will or won''t be displayed
    depending on the theme:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 操作栏和应用程序栏是同一个组件；“应用程序栏”只是操作栏在材料设计中获得的新名字。这是固定在我们活动顶部的不透明栏，通常显示应用程序的标题、导航选项，并显示不同的操作。图标的显示与否取决于主题：
- en: '![Toolbar, action bar, and app bar](img/4887_06_08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![工具栏、操作栏和应用程序栏](img/4887_06_08.jpg)'
- en: Since Android 3.0, the Holo theme or any of its descendants is used by default,
    and these show the action bar.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Android 3.0以来，默认使用Holo主题或其任何后代，这些主题显示操作栏。
- en: Let's move on to the next concept—toolbar. Introduced in API 21, Android Lollipop,
    it is a generalization of the action bar that doesn't need to be fixed at the
    top of the activity. We can specify whether a toolbar is acting as the activity
    action bar with the `setActionBar()` method. This means that a toolbar will or
    won't act as an action bar depending on what we want.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一个概念——工具栏(toolbar)。在API 21，即Android Lollipop中引入，它是操作栏(action bar)的泛化，不必固定在活动顶部。我们可以使用`setActionBar()`方法指定工具栏是否作为活动的操作栏。这意味着工具栏将根据我们的需求表现为操作栏或非操作栏。
- en: If we create a toolbar and set it as an action bar, we must use a theme with
    the `.NoActionBar` option to avoid having a duplicated action bar with the one
    that comes by default in a theme and the toolbar that we just converted into the
    action bar.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建一个工具栏并将其设置为操作栏，我们必须使用带有`.NoActionBar`选项的主题，以避免在主题默认的操作栏和我们刚转换成操作栏的工具栏之间出现重复。
- en: A new element called `AppBarLayout` has been introduced in the design support
    library. It is `LinearLayout`, intended to contain the toolbar to display animations
    based on scrolling events. We can specify the behavior while scrolling in the
    children with the `app:layout_scrollFlag. AppBarLayout` attribute. It is intended
    to be contained in `CoordinatorLayout`, and the component is introduced in the
    design support library as well, which we will describe in the following section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 设计支持库中引入了一个名为`AppBarLayout`的新元素。它是一个`LinearLayout`，旨在包含工具栏以基于滚动事件显示动画。我们可以使用`app:layout_scrollFlag`属性在子项中指定滚动时的行为。`AppBarLayout`旨在被包含在`CoordinatorLayout`中，该组件也随设计支持库一起引入，我们将在下一节中进行描述。
- en: Adding motion with CoordinatorLayout
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CoordinatorLayout添加动态效果
- en: The `CoordinatorLayout` allows us to add motion to our app, connecting touch
    events and gestures with views. We can coordinate a scroll movement with the collapsing
    animation of a view, for instance. These gestures or touch events are handled
    with the `Coordinator.Behaviour` class, and `AppBarLayout` already has this private
    class. If we want to use this motion with a custom view, we will have to create
    this behavior ourselves.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`CoordinatorLayout`允许我们向应用程序添加动态效果，将触摸事件和手势与视图连接起来。例如，我们可以协调滚动动作与视图的折叠动画。这些手势或触摸事件由`Coordinator.Behaviour`类处理，而`AppBarLayout`已经拥有这个私有类。如果我们想要在自定义视图中使用这种动态效果，我们将不得不自己创建这种行为。'
- en: The `CoordinatorLayout` can be implemented in the top level of our app, so we
    can combine this with the application bar or any elements inside our activity
    or fragment. It also can be implemented as a container to interact with its child
    views.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`CoordinatorLayout`可以实现在我们应用程序的顶层，因此我们可以将其与应用程序栏或活动或片段内的任何元素结合使用。它也可以作为一个容器，与子视图进行交互。'
- en: Continuing with our app, we are going to show a full view of a job offer when
    we click on a card. This will be displayed in a new activity. This activity will
    contain a toolbar showing the title of the job offer and logo of the company.
    If the description is long, we will need to scroll down to read it; at this moment,
    we want to collapse the logo at the top as it is not relevant anymore. In the
    same way, while scrolling back up, we want it to expand again. To control the
    collapsing of the toolbar, we will need `CollapsingToolbarLayout`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，当点击卡片时，我们将显示一份工作机会的完整视图。这将在一个新活动中展示。该活动将包含一个显示工作机会标题和公司标志的工具栏。如果描述很长，我们需要向下滚动来阅读；此时，我们希望顶部不再相关的公司标志可以折叠。同样，当我们向上滚动时，希望它再次展开。为了控制工具栏的折叠，我们将需要`CollapsingToolbarLayout`。
- en: The description will be contained in `NestedScrollView`, which is a scroll view
    from the Android v4 support library. The reason for using `NestedScrollView` is
    that this class can propagate the scroll events to the toolbar, while `ScrollView`
    can't. Ensure that `compile 'com.android.support:support-v4:22.2.0'` is up to
    date.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 描述将被包含在`NestedScrollView`中，这是来自Android v4支持库的滚动视图。使用`NestedScrollView`的原因是，这个类可以将滚动事件传递给工具栏，而`ScrollView`则不能。确保`compile
    'com.android.support:support-v4:22.2.0'`是最新版本。
- en: We will see how to download images in the next chapter, so for now, we can just
    place an image from the `drawable` folder to implement the `CoordinatorLayout`
    functionality. In the next chapter, we will load the corresponding image for every
    company offering a job.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中了解如何下载图片，所以现在我们可以只从`drawable`文件夹放置一个图片来实现`CoordinatorLayout`的功能。在下一章中，我们将为每个提供工作的公司加载相应的图片。
- en: 'Our offer detail view, `activity_offer_detail.xml`, will look as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的优惠详情视图，`activity_offer_detail.xml`，将如下所示：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, the `CollapsingToolbar` layout reacts to the scroll flag and
    tells its children how to react. The toolbar will be pinned at the top, always
    staying visible, `app:layout_collapseMode="pin"`. However, the logo disappears
    with a parallax effect, `app:layout_collapseMode="parallax"`. Don't forget to
    add to the `NestedScrollview` attribute, `app:layout_behavior="@string/appbar_scrolling_view_behavior"`,
    and clean the project to generate this string resource internally. If you have
    problems, you can set the string directly, `"android.support.design.widget.AppBarLayout$ScrollingViewBehavior"`,
    and this will help you identify the issue.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`CollapsingToolbar`布局对滚动标志做出反应，并告诉其子元素如何反应。工具栏将固定在顶部，始终保持可见，`app:layout_collapseMode="pin"`。然而，标志随着视差效果消失，`app:layout_collapseMode="parallax"`。不要忘记在`NestedScrollview`属性中添加`app:layout_behavior="@string/appbar_scrolling_view_behavior"`，并清理项目以内部生成这个字符串资源。如果你遇到问题，可以直接设置字符串，`"android.support.design.widget.AppBarLayout$ScrollingViewBehavior"`，这将帮助你定位问题。
- en: 'When we click on a job offer, we need to navigate to `OfferDetailActivity`,
    and we need to send the information of the offer. As you probably know from the
    beginner level, to send information between activities, we use intents. In these
    intents, we can put data or serialized objects. To be able to send an object of
    the `JobOffer` type, we have to create a `JobOffer` class that implements `Serializable`.
    Once we do this, we can detect the click on the element in `JobOffersAdapter`,
    as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击一个工作机会时，需要导航到`OfferDetailActivity`，并且我们需要发送该工作机会的信息。正如你可能从初级水平就知道，要在活动之间发送信息，我们使用意图。在这些意图中，我们可以放置数据或序列化的对象。为了能够发送`JobOffer`类型的对象，我们必须创建一个实现`Serializable`的`JobOffer`类。一旦我们这样做，就可以在`JobOffersAdapter`中检测元素的点击，如下所示：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once we start the activity, we need to retrieve the title and set it to the
    toolbar. Add a long text to the `TextView` description inside `NestedScrollView`
    to test with dummy data first. We want to be able to scroll to test the animation:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始这个活动，就需要获取标题并将其设置到工具栏上。首先使用虚拟数据在`NestedScrollView`内的`TextView`描述中添加一段长文本进行测试。我们希望能够滚动以测试动画效果：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, ensure that your `styles.xml` file in the folder values uses a theme
    with no action bar by default:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保在values文件夹中的`styles.xml`文件默认使用不带操作栏的主题：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are now ready to test the behavior. Launch the app and scroll down. Take
    a look at how the image collapses and the toolbar is pinned at the top. It will
    look similar to the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备测试行为。启动应用并滚动到底部。看看图片如何折叠以及工具栏如何固定在顶部。它将与以下截图类似：
- en: '![Adding motion with CoordinatorLayout](img/4887_06_09.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用CoordinatorLayout添加动态效果](img/4887_06_09.jpg)'
- en: We are missing an attribute to achieve a nice effect in the animation. Just
    collapsing the image doesn't collapse it enough; we need to make the image disappear
    in a smooth way, replaced by the background color of the toolbar.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遗漏了一个属性，以实现动画中的良好效果。仅仅折叠图片还不够；我们需要让图片以平滑的方式消失，由工具栏的背景色替换。
- en: 'Add the `contentScrim` attribute to `CollapsingToolbarLayout`, and this will
    fade in the image as it collapses using the primary color of the theme, which
    is the same as the one used by the toolbar at the moment:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CollapsingToolbarLayout`中添加`contentScrim`属性，这将使用主题的主色调渐变显示图片，这与当前工具栏使用的颜色相同：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With this attribute, the app looks better when collapsed and expanded:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个属性，应用在展开和折叠时看起来会更好：
- en: '![Adding motion with CoordinatorLayout](img/4887_06_10.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用CoordinatorLayout添加动态效果](img/4887_06_10.jpg)'
- en: 'We just need to style the app a bit more by changing colors and adding padding
    to the image; we can change the colors of the theme in `styles.xml`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需通过改变颜色和为图片添加边距来稍微调整一下应用的风格；我们可以在`styles.xml`中更改主题的颜色：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Resize `AppBarLayout` to `190dp` and add `50dp paddingLeft` and `paddingRight`
    to ImageView to achieve the following result:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将`AppBarLayout`的大小调整为`190dp`，并在ImageView中添加`50dp paddingLeft`和`paddingRight`以实现以下效果：
- en: '![Adding motion with CoordinatorLayout](img/4887_06_11.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![使用CoordinatorLayout添加动态效果](img/4887_06_11.jpg)'
- en: Back navigation and up navigation
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后退导航和向上导航
- en: There are two ways of navigating to the previous screen. The one called back
    navigation is the navigation performed with the back button, which can be a hardware
    or software button depending on the device.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以导航到上一个屏幕。一种称为后退导航，是通过后退按钮执行的导航，这可以是硬件或软件按钮，具体取决于设备。
- en: 'The **Up navigation** is a navigation method introduced with the action bar
    in Android 3.0; here, we can go back to the previous screen using an arrow pointing
    left, which is displayed in the action bar, as shown in the image to the right
    in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**向上导航**是随着Android 3.0中的操作栏引入的一种导航方法；在这里，我们可以使用指向左边的箭头返回到上一个屏幕，该箭头显示在操作栏中，如下面的截图右侧所示：'
- en: '![Back navigation and up navigation](img/4887_06_12.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![后退导航和向上导航](img/4887_06_12.jpg)'
- en: 'On some occasions we need to override the functionality of the back navigation.
    For instance, if we have a custom `WebView` and we navigate through a browser,
    when we click on back, the back button will cause us to leave the activity by
    default; however, what we want is to go back in the history of the browser''s
    usage:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要覆盖后退导航的功能。例如，如果我们有一个自定义的`WebView`并通过浏览器导航，当我们点击后退时，后退按钮默认会让我们离开活动；然而，我们想要的是在浏览器使用历史中后退：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Apart from this, the back navigation is implemented by default, unlike the
    Up navigation. To implement the Up navigation, we need an action bar (or a toolbar
    acting as an action bar), and we need to activate this navigation with the `setDisplayHomeAsUpEnabled(true)`
    method. Inside `onCreate` in our activity, we will add the following lines to
    set our toolbar as an action bar and to activate the Up navigation:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这一点，后退导航是默认实现的，而向上导航则不是。要实现向上导航，我们需要一个操作栏（或者作为操作栏的工具栏），并且需要通过`setDisplayHomeAsUpEnabled(true)`方法激活此导航。在我们的活动中的`onCreate`内，我们将添加以下几行代码，以将我们的工具栏设置为操作栏并激活向上导航：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will display the back arrow at the top of our activity, as shown in the
    following screenshot. But at the moment, we won''t have any functionality:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在我们活动的顶部显示后退箭头，如下面的截图所示。但目前，我们还没有任何功能：
- en: '![Back navigation and up navigation](img/4887_06_13.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![后退导航和向上导航](img/4887_06_13.jpg)'
- en: 'Once this is activated, we need to capture the click in the back arrow of the
    action bar. This will be detected as an action selection in the menu with the
    `android.R.id.home` ID; we just need to add the following code to our activity:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦激活，我们需要捕获操作栏中后退箭头的点击。这将检测到菜单中带有`android.R.id.home` ID 的动作选择；我们只需要在我们的活动中添加以下代码：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Our application has drastically changed in this chapter; we changed the job
    offer list completely and it now looks similar to a nice list of handwritten paper
    cards pinned onto a corkboard. At the same time, you learned concepts from material
    design and how to work with the application bar and the toolbar. There are more
    widgets in the design support library, such as `InputText` or `FloatingButton`,
    that are very easy to implement. It is as easy as adding a widget to a view, which
    is why we focused on the more difficult components such as `CoordinatorLayout`
    or `CollapsingToolbarLayout`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的应用程序发生了巨大变化；我们完全改变了职位列表，现在它看起来类似于一张张精美的手写纸卡，钉在软木板上。同时，你学习了来自材料设计的概念以及如何使用应用栏和工具栏。设计支持库中还有更多小部件，如`InputText`或`FloatingButton`，它们非常容易实现。只需将小部件添加到视图中，这就是为什么我们专注于更复杂的组件，如`CoordinatorLayout`或`CollapsingToolbarLayout`。
- en: In the next chapter, we will see how to download the logo of the company, advertise
    the job directly from a URL, talk about memory management, and take a look at
    how to make sure we don't have memory leaks in our app.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解如何下载公司标志、直接通过URL发布职位广告、讨论内存管理，并看看如何确保我们的应用程序中没有内存泄漏。
