- en: Chapter 2. Creating a Test Project Using Robotium
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 使用Robotium创建测试项目
- en: This chapter will guide you in creating your first test project for Android
    using the Robotium Framework. First, let's implement a simple calculator android
    application. Then, using this **Application Under Test** (**AUT**), we will look
    into the process of creating a Robotium test project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您使用Robotium Framework为Android创建第一个测试项目。首先，让我们实现一个简单的计算器Android应用。然后，使用这个**被测应用（AUT）**，我们将了解创建Robotium测试项目的过程。
- en: Creating the AUT
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AUT
- en: 'In this section, we will create a simple calculator application that allows
    the entry of two numbers. The user can perform the following two operations on
    these numbers:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个简单的计算器应用，允许输入两个数字。用户可以对这两个数字执行以下两种操作：
- en: Addition
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法
- en: Subtraction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减法
- en: These operations are selectable via Spinner control. Spinner is similar to a
    combo box present in other coding languages such as HTML, and C#. The **Get Result**
    button is present to get the operational result in the bottom-aligned TextView.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作可以通过Spinner控件选择。Spinner与其他编程语言（如HTML和C#）中的组合框类似。底对齐的TextView中的**获取结果**按钮用于获取操作结果。
- en: 'The following screenshot shows the ZCalculator app:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了ZCalculator应用：
- en: '![Creating the AUT](img/8010OS_02_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![创建AUT](img/8010OS_02_01.jpg)'
- en: 'To create the AUT, follow the listed steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建AUT，请按照列出的步骤操作：
- en: Create an **Android Application Project** by navigating to **File** | **New**
    | **Android Application Project** in Eclipse IDE.![Creating the AUT](img/8010OS_02_02.jpg)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse IDE中，通过导航至**文件** | **新建** | **Android应用项目**来创建一个**Android应用项目**。![创建AUT](img/8010OS_02_02.jpg)
- en: Enter the application details, as in the following screenshot, and click on
    the **Next** button:![Creating the AUT](img/8010OS_02_03.jpg)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入应用详情，如以下截图所示，然后点击**下一步**按钮：![创建AUT](img/8010OS_02_03.jpg)
- en: Keep the default options, as they are in the following screenshot, and click
    on the **Next** button:![Creating the AUT](img/8010OS_02_04.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认选项，如以下截图所示，然后点击**下一步**按钮：![创建AUT](img/8010OS_02_04.jpg)
- en: For this Android application project, we will configure the launcher icon with
    the default value set, as in the following screenshot, and click on the **Next**
    button:![Creating the AUT](img/8010OS_02_05.jpg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个Android应用项目，我们将配置启动图标，设置默认值，如以下截图所示，然后点击**下一步**按钮：![创建AUT](img/8010OS_02_05.jpg)
- en: Check the **Create Activity** checkbox if it is not checked and select **Blank
    Activity**, as in the following screenshot, to create a default blank activity
    class in the project:![Creating the AUT](img/8010OS_02_06.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果**创建活动**复选框未选中，请勾选它，并选择**空白活动**，如以下截图所示，以在项目中创建默认的空白活动类：![创建AUT](img/8010OS_02_06.jpg)
- en: Enter `Main` in the **Activity Name** field, as in the following screenshot,
    and click on the **Finish** button to create the Android application project:![Creating
    the AUT](img/8010OS_02_07.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**活动名称**字段中输入`Main`，如以下截图所示，然后点击**完成**按钮以创建Android应用项目：![创建AUT](img/8010OS_02_07.jpg)
- en: 'Your Android project is now set up. You can refer to the ZCalculator project
    code base, given as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Android项目现在已经设置好了。你可以参考以下给出的ZCalculator项目代码库：
- en: 'Use the following code in your `Main.java` file:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`Main.java`文件中使用以下代码：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use the following code in the `main.xml` layout file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.xml`布局文件中使用以下代码：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `String.xml` file with the following entries:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下条目更新`String.xml`文件：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Update the `array.xml` file with the following entries:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下条目更新`array.xml`文件：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, update the `AndroidManifest.xml` file with the following activity action
    and launcher entries:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，使用以下活动动作和启动器条目更新`AndroidManifest.xml`文件：
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a test project
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个测试项目
- en: Let's proceed and create a test project to test the ZCalculator application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个测试项目，以测试ZCalculator应用。
- en: 'In Eclipse, go to **New** and from the **Select** wizard, select **Android
    Test Project**. Enter a proper project name and click on the **Next** button.
    It is recommended that the test project name follow a naming convention such as
    "Test + AUT name." That''s why this test app is named `TestZCalculator`, as shown
    in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中，转到**新建**，从**选择**向导中选择**Android测试项目**。输入适当的项目名称，然后点击**下一步**按钮。建议测试项目名称遵循如“Test
    + AUT名称”的命名约定。这就是为什么这个测试应用被命名为`TestZCalculator`，如下截图所示：
- en: '![Creating a test project](img/8010OS_02_08.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试项目](img/8010OS_02_08.jpg)'
- en: 'Then, select the AUT or the target project (in our case, ZCalculator), as in
    the following screenshot, and click on the **Finish** button:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择AUT或目标项目（在我们的例子中是ZCalculator），如以下截图所示，然后点击**完成**按钮：
- en: '![Creating a test project](img/8010OS_02_09.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试项目](img/8010OS_02_09.jpg)'
- en: 'Select a build target, as shown in the following screenshot, (SDK to target)
    and click on the **Finish** button:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个构建目标，如下截图所示（要定位的SDK），然后点击**完成**按钮：
- en: '![Creating a test project](img/8010OS_02_10.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试项目](img/8010OS_02_10.jpg)'
- en: Your test project is successfully created. Let's create a test case class to
    test ZCalculator's main class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你的测试项目已成功创建。现在我们来创建一个测试用例类以测试ZCalculator的主类。
- en: Creating a test case
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试用例
- en: 'To create a test case, follow the listed steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建测试用例，请按照列出的步骤操作：
- en: To create a test case, right-click on the `com.calculator.test` package in the
    **Package Explorer** window and navigate to **New** | **JUnit Test Case**, as
    shown in the following screenshot. If this package is not present, create it under
    the **src** branch:![Creating a test case](img/8010OS_02_11.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建测试用例，请在**包资源管理器**窗口中右键点击`com.calculator.test`包，并导航到**新建** | **JUnit测试用例**，如下截图所示。如果该包不存在，请在**src**分支下创建它：![创建测试用例](img/8010OS_02_11.jpg)
- en: On the **New JUnit Test Case** window, most of the fields are already filled.
    Just assign the name of the test case as `MainTest`, as we are going to test the
    `Main` class in ZCalculator. Keep the **setUp()**, **tearDown()**, and the **constructor**
    option checkboxes checked in the method stubs section and click on the **Finish**
    button.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新建JUnit测试用例**窗口中，大多数字段已自动填充。只需将测试用例的名称指定为`MainTest`，因为我们将要测试ZCalculator中的`Main`类。在方法存根部分保持**setUp()**，**tearDown()**和**构造函数**选项复选框被选中，然后点击**完成**按钮。
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `setUp()` and `tearDown()` methods are part of the `junit.framework.TestCase`
    class. The `setUp()` method is used to initialize the data needed to run the tests
    and reset environment variables. The `tearDown()` method is used to call the garbage
    collection to force the recovery of memory. It is called after each `@Test` method,
    as shown in the following code:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`setUp()`和`tearDown()`方法属于`junit.framework.TestCase`类的一部分。`setUp()`方法用于初始化运行测试所需的数据并重置环境变量。`tearDown()`方法用于调用垃圾回收以强制恢复内存。它在每个`@Test`方法之后调用，如下代码所示：'
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Creating a test case](img/8010OS_02_12.jpg)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建测试用例](img/8010OS_02_12.jpg)'
- en: Once it is completed, a test case `MainTest.java` will be created under the
    `com.calculator.test` package, as shown in the following screenshot. Also, the
    three stub methods will be generated automatically in the `MainTest` class:![Creating
    a test case](img/8010OS_02_13.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将在`com.calculator.test`包下创建一个测试用例`MainTest.java`，如下截图所示。同时，在`MainTest`类中会自动生成三个存根方法：![创建测试用例](img/8010OS_02_13.jpg)
- en: Adding the Robotium library
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Robotium库
- en: All versions of the Robotium JAR file can be downloaded from [https://code.google.com/p/robotium/downloads/list](https://code.google.com/p/robotium/downloads/list).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有版本的Robotium JAR文件都可以从[https://code.google.com/p/robotium/downloads/list](https://code.google.com/p/robotium/downloads/list)下载。
- en: 'The Robotium library can be added by following the listed steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照列出的步骤添加Robotium库：
- en: You need to add the Robotium JAR as a reference library to the test project.
    To reference this, right-click on your project and navigate to **Build Path**
    | **Configure Build Path**, as shown in the following screenshot:![Adding the
    Robotium library](img/8010OS_02_14.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要将Robotium JAR作为引用库添加到测试项目中。要引用它，请右键点击你的项目，并导航到**构建路径** | **配置构建路径**，如下截图所示：![添加Robotium库](img/8010OS_02_14.jpg)
- en: In the **Java Build Path** panel, go to the **Libraries** tab and click on the
    **Add External JARs…** button, as shown in the following screenshot. Then, provide
    a correct Robotium library (preferably the latest version) and add it to the list.
    The alternative way to achieve this is to copy the JAR file to the `lib` directory
    of the test:![Adding the Robotium library](img/8010OS_02_15.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Java构建路径**面板中，转到**库**标签页，并点击如下截图所示的**添加外部JARs…**按钮。然后，提供一个正确的Robotium库（最好是最新版本），并将其添加到列表中。实现这一点的另一种方式是将JAR文件复制到测试的`lib`目录中：![添加Robotium库](img/8010OS_02_15.jpg)
- en: 'It is mostly observed in the latest SDK versions (mostly API 17 and above)
    that the **java.lang.NoClassDefFoundError: com.jayway.android.robotium.solo.Solo**
    error occurs when the Robotium JAR file is not exported. So, to export it, go
    to the **Order and Export** tab in the **Java Build Path** section and check the
    Robotium JAR file in the list, as shown in the following screenshot, and click
    on the **OK** button:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '通常在最新的SDK版本中（主要是API 17及以上版本）会遇到**java.lang.NoClassDefFoundError: com.jayway.android.robotium.solo.Solo**错误，这是因为没有导出Robotium
    JAR文件。因此，要导出它，请转到**Java构建路径**部分的**顺序和导出**标签，并在列表中选中Robotium JAR文件，如下截图所示，然后点击**确定**按钮：'
- en: Note
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to have Android Private Libraries checked; otherwise the test
    won't start.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保已选中Android私有库，否则测试将无法启动。
- en: '![Adding the Robotium library](img/8010OS_02_16.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![添加Robotium库](img/8010OS_02_16.jpg)'
- en: Adding the package name in AndroidManifest.xml
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AndroidManifest.xml中添加包名
- en: 'Once you provide the reference of the Robotium library to the test project,
    open the `AndroidManifest.xml` file and change the target package name, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为测试项目提供了Robotium库的引用，打开`AndroidManifest.xml`文件，并更改目标包名，如下所示：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot shows the preceding change in the `AndroidManifest.xml`
    file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了`AndroidManifest.xml`文件中的上述更改：
- en: '![Adding the package name in AndroidManifest.xml](img/8010OS_02_17.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![在AndroidManifest.xml中添加包名](img/8010OS_02_17.jpg)'
- en: Robotium's test case code
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Robotium的测试用例代码
- en: Before going into the actual code, there are some classes and methods of the
    Robotium framework you should be familiar with.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入实际代码之前，你应该熟悉Robotium框架的一些类和方法。
- en: '`Solo` is the class of Robotium that is used for testing. It is initialized
    with the instrumentation of the test case and the first activity to test. This
    is performed in the `setUp()` method. The `Solo` class provides APIs with easy
    calling of Android UI components, for example, the `enterText()` API puts the
    text in an EditText view. We will see most of these APIs in the following section.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Solo`是Robotium用于测试的类。它使用测试用例的instrumentation和第一个要测试的活动进行初始化。这将在`setUp()`方法中执行。`Solo`类提供了易于调用Android用户界面组件的API，例如，`enterText()`
    API将文本放入EditText视图中。我们将在以下部分看到大多数这些API。'
- en: The test case method name in the JUnit should always start with the word "test."
    Since Robotium is built on JUnit, we have the `testZCalculatorBlackBox()` method
    for the test case. You can add any number of test case methods in a test case
    class.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit中的测试用例方法名称应以单词"test"开头。由于Robotium基于JUnit构建，我们为测试用例提供了`testZCalculatorBlackBox()`方法。你可以在一个测试用例类中添加任意数量的测试用例方法。
- en: 'In the following test case, we will access the UI components of ZCalculator
    and carry out the following operations in sequence:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下测试用例中，我们将访问ZCalculator的用户界面组件，并按顺序执行以下操作：
- en: Access the **Edit Text** field for inputs (first and second numbers).
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问用于输入（第一个和第二个数字）的**编辑文本**字段。
- en: Enter any value.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入任意值。
- en: Access and click on **Spinner** to select the operation.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问并点击**Spinner**以选择操作。
- en: Access and click on the **Get Result** button.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问并点击**获取结果**按钮。
- en: 'Put the following code into the `MainTest.java` file and save it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码放入`MainTest.java`文件并保存：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running the test case
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试用例
- en: We are now done with creating a test project with a valid test case for ZCalculator.
    It's time to run our test case.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了为ZCalculator创建带有有效测试用例的测试项目。是时候运行我们的测试用例了。
- en: Right-click on the test project or test case file, `MainTest.java`, and select
    **Run as Android JUnit test**. Select **Android Emulator** from the select device
    screen.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试项目或测试用例文件`MainTest.java`上右键点击，选择**作为Android JUnit测试运行**。在选择设备屏幕上选择**Android模拟器**。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to run a particular test case, right-click on the file and then
    select **run as Android JUnit Test**. To run all the test cases available in the
    test project, right-click on the project itself and select **run as Android JUnit
    Test**, it will run all the test cases.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要运行特定的测试用例，请右键点击文件，然后选择**作为Android JUnit测试运行**。要运行测试项目中可用的所有测试用例，请右键点击项目本身，然后选择**作为Android
    JUnit测试运行**，它将运行所有测试用例。
- en: 'Robotium''s test case for ZCalculator will work as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Robotium针对ZCalculator的测试用例将按以下方式工作：
- en: The ZCalculator application will be loaded.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ZCalculator应用程序将被加载。
- en: The first and the second numbers will be automatically entered in the first
    and second **Edit Text** fields, and then the spinner will be clicked on for selecting
    the operation (it will take Addition first).
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个和第二个数字将自动输入到第一个和第二个**编辑文本**字段中，然后点击下拉菜单选择操作（首先选择加法）。
- en: The **Get Result** button will be clicked on and the result will be displayed
    in the result text view.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将点击**获取结果**按钮，并在结果文本视图中显示结果。
- en: The assert statement will check for the valid operation result. This process
    will continue for Subtraction and if every assert is true, the test case is passed,
    indicated by a green bar in the JUnit tab, as depicted in the following screenshot:![Running
    the test case](img/8010OS_02_18.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断言语句将检查有效的操作结果。这个过程将继续针对减法进行，如果每个断言都为真，则测试用例通过，在JUnit标签中用绿色条表示，如下面的屏幕截图所示：![运行测试用例](img/8010OS_02_18.jpg)
- en: 'The application and instrumentation must be installed beforehand, if you want
    to run the test project via the Command Line. If they are already installed, then
    use the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想通过命令行运行测试项目，必须先安装应用程序和仪器。如果它们已经安装好了，那么使用以下命令：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Before running the preceding command, note that you run it from the location
    where `adb.exe` is present, or add the `adb.exe` path to the environment path's
    variable list to access it from anywhere in the system.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述命令之前，请注意，你应该在包含`adb.exe`的目录下运行它，或者将`adb.exe`的路径添加到环境路径变量列表中，以便在系统的任何位置访问它。
- en: You can find `adb` in the `platform-tools` folder inside the Android SDK.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Android SDK中的`platform-tools`文件夹里找到`adb`。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to create a test project using the Robotium
    Framework. Until now, you have learnt the basic flow required to create a simple
    test app using Robotium. It is time to go deeper into the framework and understand
    different Robotium API calls with their usage. In the next chapter, you will be
    introduced to the `Solo` class and information about APIs present in it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Robotium框架创建测试项目。到目前为止，你已经了解了使用Robotium创建简单测试应用程序所需的基本流程。现在是深入框架，了解不同的Robotium
    API调用及其使用方法的时候了。在下一章中，你将了解到`Solo`类及其内部API的相关信息。
