- en: Chapter 3. Permissions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章. 权限
- en: Permissions are the focus of this chapter. They are an integral part of an Android
    application and almost all application developers and users will encounter them
    at one time or the other. As we discussed in [Chapter 1](ch01.html "Chapter 1. The
    Android Security Model – the Big Picture"), *Android Security Model – the Big
    Picture*, install time application review is the most important security gate.
    This step is an all or nothing decision by the user; a user either accepts all
    the listed permissions or declines to download the app. So, as a user of an Android
    phone, it is important to understand permissions to make prudent decisions about
    which application to install. Permissions form the basis for securing components
    and protecting user data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是权限。权限是Android应用程序的必要组成部分，几乎所有的应用程序开发者和用户都会在不同时间遇到它们。[正如我们在第一章中讨论的](ch01.html
    "第一章. Android安全模型 - 大局观")，*Android安全模型 - 大局观*，安装时的应用程序审查是最重要的安全关卡。这一步是用户的全或无决策；用户要么接受所有列出的权限，要么拒绝下载应用。因此，作为Android手机的用户，了解权限对于明智地决定安装哪个应用程序至关重要。权限是保护组件和用户数据的基础。
- en: This chapter begins with an introduction of an existing permission in the Android
    system. We discuss the four permission protection levels namely Normal, Dangerous,
    Signature, and SignatureOrSystem. Then, we will discuss about how to secure an
    application and its components using permissions. Next, we learn how to extend
    the permission model by adding user defined permissions. This section will discuss
    permission groups, permission trees, and the syntax to create a new permission
    in the manifest file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从介绍Android系统中现有的权限开始。我们讨论了四种权限保护级别：普通、危险、签名和签名或系统。然后，我们将讨论如何使用权限来保护应用程序及其组件。接下来，我们学习如何通过添加用户定义的权限来扩展权限模型。这一节将讨论权限组、权限树以及在清单文件中创建新权限的语法。
- en: Permission protection levels
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限保护级别
- en: At the application level, Android security is based on permissions. Using this
    permission-based model, the Android system protects system resources, such as
    camera and Bluetooth, and application resources, such as files and components.
    An application should have privileges to act upon or use these resources. Any
    application intending to use these resources needs to declare to the user that
    it will be accessing these resources. For example, if an application will be sending
    and reading a SMS, it will need to declare `android.permission.SEND_SMS` and `android.permission.READ_SMS`
    in the manifest file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序层面，Android安全基于权限。使用这种基于权限的模型，Android系统保护系统资源，如相机和蓝牙，以及应用程序资源，如文件和组件。应用程序应该有权限去操作或使用这些资源。任何打算使用这些资源的应用程序需要向用户声明它将访问这些资源。例如，如果一个应用程序将发送和读取短信，它需要在清单文件中声明
    `android.permission.SEND_SMS` 和 `android.permission.READ_SMS`。
- en: Permissions are also an effective method for access control between applications.
    An application's manifest file contains a list of permissions. Any external application
    that wishes to access this application's resources should possess these permissions.
    This is discussed in greater detail in the next chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 权限也是应用程序之间进行访问控制的有效方法。应用程序的清单文件包含一个权限列表。任何希望访问此应用程序资源的外部应用程序应具备这些权限。下一章将详细讨论这一点。
- en: All Android permissions are declared as constants in the `Manifest.permission`
    class. However, this class does not mention the type of permission. This can be
    used to check the Android source code. I have tried to list some of these permissions
    in the following sections. The list of permissions keeps changing based on the
    functionality, so it is best to refer to the Android source code for an up-to-date
    listing of permissions. For example, `android.permission.BLUETOOTH` has been around
    since API level 1 but `android.permission.AUTHENTICATE_ACCOUNTS` was added in
    API 5\. You can get information to get the Android source code at [source.android.com](http://source.android.com).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android权限都在 `Manifest.permission` 类中声明为常量。然而，这个类并没有提到权限的类型。这可以用来检查Android源代码。我尝试在以下部分列出一些这些权限。权限列表会根据功能的变化而变化，因此最好参考Android源代码以获取最新的权限列表。例如，`android.permission.BLUETOOTH`
    从API级别1开始就有，而 `android.permission.AUTHENTICATE_ACCOUNTS` 是在API 5中添加的。您可以在 [source.android.com](http://source.android.com)
    获取获取Android源代码的信息。
- en: 'All Android permissions lie in one of the four protection levels. Permissions
    of any protection levels need to be declared in the manifest file. Third party
    apps can only use permissions with protection level 0 and 1\. These protection
    levels are discussed as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android权限都属于四个保护级别之一。任何保护级别的权限都需要在清单文件中声明。第三方应用只能使用保护级别为0和1的权限。以下将讨论这些保护级别：
- en: 'Normal permissions: Permissions in this level (level 0) cannot do much harm
    to the user. They generally do not cost users money, but they might cause users
    some annoyance. When downloading an app, these permissions can be viewed by clicking
    on the **See All** arrow. These permissions are automatically granted to the app.
    For example, permissions `android.permission.GET_PACKAGE_SIZE` and `android.permission.FLASHLIGHT`
    lets the application get the size of any package and access a flashlight respectively.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通权限：这一级别（级别0）的权限对用户造成不了多大伤害。它们通常不会让用户花钱，但可能会引起用户的一些烦恼。下载应用时，可以通过点击**查看全部**箭头来查看这些权限。这些权限会自动授予应用。例如，权限`android.permission.GET_PACKAGE_SIZE`和`android.permission.FLASHLIGHT`分别允许应用获取任何包的大小和访问闪光灯。
- en: The following is a list of some of the normal permissions that exist in the
    Android system at the time of writing the book.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是本书编写时Android系统中存在的一些普通权限列表。
- en: 'Permissions that are used to set user preferences include:'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于设置用户偏好的权限包括：
- en: '`android.permission.EXPAND_STATUS_BAR`'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.EXPAND_STATUS_BAR` 展开状态栏'
- en: '`android.permission.KILL_BACKGROUND_PROCESSES`'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.KILL_BACKGROUND_PROCESSES` 结束后台进程'
- en: '`android.permission.SET_WALLPAPER`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_WALLPAPER` 设置壁纸'
- en: '`android.permission.SET_WALLPAPER_HINTS`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_WALLPAPER_HINTS` 设置壁纸提示'
- en: '`android.permission.VIBRATE`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.VIBRATE` 震动'
- en: '`android.permission.DISABLE_KEYGUARD`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.DISABLE_KEYGUARD` 禁用键盘锁'
- en: '`android.permission.FLASHLIGHT`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.FLASHLIGHT` 闪光灯'
- en: 'Permissions that allow user to access system or application information include:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许用户访问系统或应用信息的权限包括：
- en: '`android.permission.ACCESS_LOCATION_EXTRA_COMMANDS`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_LOCATION_EXTRA_COMMANDS` 访问位置额外命令'
- en: '`android.permission.ACCESS_NETWORK_STATE`'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_NETWORK_STATE` 访问网络状态'
- en: '`android.permission.ACCESS_WIFI_STATE`'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_WIFI_STATE` 访问WiFi状态'
- en: '`android.permission.BATTERY_STATS`'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BATTERY_STATS` 电池统计'
- en: '`android.permission.GET_ACCOUNTS`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.GET_ACCOUNTS` 获取账户'
- en: '`android.permission.GET_PACKAGE_SIZE`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.GET_PACKAGE_SIZE` 获取包大小'
- en: '`android.permission.READ_SYNC_SETTINGS`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_SYNC_SETTINGS` 读取同步设置'
- en: '`android.permission.READ_SYNC_STATS`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_SYNC_STATS` 读取同步统计'
- en: '`android.permission.RECEIVE_BOOT_COMPLETED`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.RECEIVE_BOOT_COMPLETED` 接收开机完成'
- en: '`android.permission.SUBSCRIBED_FEEDS_READ`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SUBSCRIBED_FEEDS_READ` 读取订阅源'
- en: '`android.permission.WRITE_USER_DICTIONARY`'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_USER_DICTIONARY` 写入用户词典'
- en: Permissions that users should be asked for carefully include `android.permission.BROADCAST_STICKY`,
    that lets an application send a sticky broadcast which stays alive even after
    the broadcast has been delivered.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户应该谨慎请求的权限包括`android.permission.BROADCAST_STICKY`，它允许应用发送粘性广播，即使广播已经送达后仍然保持存活。
- en: 'Dangerous permissions: Permissions in this protection level (level 1) are always
    shown to the user. Granting dangerous permissions to apps allow them to access
    device features and data. These permissions cause user privacy or financial loss.
    For example, granting dangerous permissions, such as `android.permission.ACCESS_FINE_LOCATION`
    and `android.permission.ACCESS_COARSE_LOCATION`, lets an app access the user''s
    location that might be a privacy concern if the app does not need such a capability.
    Similarly, granting an app `android.permission.READ_SMS` and `android.permission.SEND_SMS`
    permission lets an application send and receive SMS which might be a privacy issue.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 危险权限：这一保护级别（级别1）的权限总是向用户显示。向应用授予危险权限允许它们访问设备功能和数据。这些权限可能导致用户隐私或财务损失。例如，授予如`android.permission.ACCESS_FINE_LOCATION`和`android.permission.ACCESS_COARSE_LOCATION`之类的危险权限，允许应用访问用户的位置，如果应用不需要这种功能，可能会成为隐私问题。同样，授予应用`android.permission.READ_SMS`和`android.permission.SEND_SMS`权限，允许应用发送和接收短信，这也可能涉及隐私问题。
- en: At any given point, a user can check the permissions granted to any application
    by going to the settings and selecting the application. Refer to the following
    two images that show the permissions for the Gmail application. The first image
    shows the dangerous permissions that are always displayed to the user. Notice
    the drop-down menu button **Show All**. This option shows all the permissions
    requested by the application. Notice the permission, **Hardware controls**, and
    a normal permission that is not displayed to the user by default.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户可以在任何时候进入设置，选择应用来查看已授予应用的权限。参考以下两张图片，它们展示了Gmail应用的权限。第一张图片显示了总是向用户显示的危险权限。注意**显示全部**的下拉菜单按钮。此选项显示了应用请求的所有权限。注意**硬件控制**权限，以及默认不向用户显示的正常权限。
- en: '![Permission protection levels](img/5603_03_01.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![权限保护级别](img/5603_03_01.jpg)'
- en: The following is a list of some of the dangerous permissions in the Android
    system at the time of writing the book.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是本书撰写时Android系统中一些危险权限的列表。
- en: 'Some dangerous permissions can be costly for the users. For example, an application
    that sends a SMS or subscribes to paid feeds can cause users huge bucks. The following
    are some other examples:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些危险权限对用户来说可能是代价高昂的。例如，发送短信或订阅付费内容的应用可能导致用户花费大量资金。以下是一些其他例子：
- en: '`android.permission.RECEIVE_MMS`'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.RECEIVE_MMS`'
- en: '`android.permission.RECEIVE_SMS`'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.RECEIVE_SMS`'
- en: '`android.permission.SEND_SMS`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SEND_SMS`'
- en: '`android.permission.SUBSCRIBED_FEEDS_WRITE`'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SUBSCRIBED_FEEDS_WRITE`'
- en: 'Permissions that have the power to change the state of the phone include the
    following. These should be used carefully, as they can make the system unstable,
    cause annoyance, and can also make the system less secure. For example, permission
    to mount and unmount filesystems can change the state of the phone. Any malicious
    application with the permission to record audio can easily eat up phone''s memory
    with garbage audio. The following are some examples:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有权改变手机状态的权限包括以下内容。这些权限应谨慎使用，因为它们可能导致系统不稳定，引起用户烦恼，并使系统安全性降低。例如，挂载和卸载文件系统的权限可以改变手机的状态。任何具有录音权限的恶意应用都可以轻松地用垃圾音频占用手机内存。以下是一些例子：
- en: '`android.permission.MODIFY_AUDIO_SETTINGS`'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MODIFY_AUDIO_SETTINGS`'
- en: '`android.permission.MODIFY_PHONE_STATE`'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MODIFY_PHONE_STATE`'
- en: '`android.permission.MOUNT_FORMAT_FILESYSTEMS`'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MOUNT_FORMAT_FILESYSTEMS`'
- en: '`android.permission.WAKE_LOCK`'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WAKE_LOCK`'
- en: '`android.permission.WRITE_APN_SETTINGS`'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_APN_SETTINGS`'
- en: '`android.permission.WRITE_CALENDAR`'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_CALENDAR`'
- en: '`android.permission.WRITE_CONTACTS`'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_CONTACTS`'
- en: '`android.permission.WRITE_EXTERNAL_STORAGE`'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_EXTERNAL_STORAGE`'
- en: '`android.permission.WRITE_OWNER_DATA`'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_OWNER_DATA`'
- en: '`android.permission.WRITE_SETTINGS`'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_SETTINGS`'
- en: '`android.permission.WRITE_SMS`'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_SMS`'
- en: '`android.permission.SET_ALWAYS_FINISH`'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_ALWAYS_FINISH`'
- en: '`android.permission.SET_ANIMATION_SCALE`'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_ANIMATION_SCALE`'
- en: '`android.permission.SET_DEBUG_APP`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_DEBUG_APP`'
- en: '`android.permission.SET_PROCESS_LIMIT`'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_PROCESS_LIMIT`'
- en: '`android.permission.SET_TIME_ZONE`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_TIME_ZONE`'
- en: '`android.permission.SIGNAL_PERSISTENT_PROCESSES`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SIGNAL_PERSISTENT_PROCESSES`'
- en: '`android.permission.SYSTEM_ALERT_WINDOW`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SYSTEM_ALERT_WINDOW`'
- en: 'Some dangerous permissions can be privacy risks. Permissions that let users
    read SMS, logs, and calendar can be easily used by botnets and Trojans to do interesting
    stuff on a command of their remote owners. The following are some other examples:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些危险权限可能存在隐私风险。允许用户读取短信、日志和日历的权限可能被僵尸网络和木马轻易利用，按照远程主人的命令执行有趣的操作。以下是一些其他例子：
- en: '`android.permission.MANAGE_ACCOUNTS`'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MANAGE_ACCOUNTS`'
- en: '`android.permission.MODIFY_AUDIO_SETTINGS`'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MODIFY_AUDIO_SETTINGS`'
- en: '`android.permission.MODIFY_PHONE_STATE`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MODIFY_PHONE_STATE`'
- en: '`android.permission.MOUNT_FORMAT_FILESYSTEMS`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MOUNT_FORMAT_FILESYSTEMS`'
- en: '`android.permission.MOUNT_UNMOUNT_FILESYSTEMS`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MOUNT_UNMOUNT_FILESYSTEMS`'
- en: '`android.permission.PERSISTENT_ACTIVITY`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.PERSISTENT_ACTIVITY`'
- en: '`android.permission.PROCESS_OUTGOING_CALLS`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.PROCESS_OUTGOING_CALLS`'
- en: '`android.permission.READ_CALENDAR`'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_CALENDAR`'
- en: '`android.permission.READ_CONTACTS`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_CONTACTS`'
- en: '`android.permission.READ_LOGS`'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_LOGS`'
- en: '`android.permission.READ_OWNER_DATA`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_OWNER_DATA`'
- en: '`android.permission.READ_PHONE_STATE`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_PHONE_STATE`'
- en: '`android.permission.READ_SMS`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_SMS`'
- en: '`android.permission.READ_USER_DICTIONARY`'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_USER_DICTIONARY`'
- en: '`android.permission.USE_CREDENTIALS`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.USE_CREDENTIALS`'
- en: 'Signature permissions: Permissions in this protection level (level 2) allow
    two applications authored by the same developer, access each other''s components.
    This permission is automatically granted to the app if the app being downloaded
    has the same certificate as the application that declared the permission. For
    example, application A defines a permission `com.example.permission.ACCESS_BOOK_STORE`.
    Application B, signed by the same certificate as application A, declares it in
    its manifest file. Since both application A and B have the same certificate, this
    permission is not shown to the user when installing the application B. A user
    can certainly view it, using **See All**. An app can perform really powerful actions
    with this permission of this group. For example, with `android.permission.INJECT_EVENTS`,
    an app can inject events such as keys, touch, and trackball into any application
    and `android.permission.BROADCAST_SMS` can broadcast an SMS acknowledgement. This
    permission defined by the Android systems that lie in this protection group is
    reserved for system apps only.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签名权限：这一保护级别（第2级）的权限允许同一开发者编写的两个应用程序互相访问对方的组件。如果下载的应用程序具有与声明权限的应用程序相同的证书，则自动授予此权限。例如，应用程序A定义了一个权限
    `com.example.permission.ACCESS_BOOK_STORE`。由与应用程序A相同证书签名的应用程序B在其清单文件中声明了它。由于应用程序A和B具有相同的证书，因此当安装应用程序B时，此权限不会显示给用户。用户当然可以使用**查看全部**来查看它。应用这一组权限的应用程序可以执行非常强大的操作。例如，有了
    `android.permission.INJECT_EVENTS` 权限，应用程序可以向任何应用程序注入按键、触摸和轨迹球事件，而 `android.permission.BROADCAST_SMS`
    可以广播短信确认。这一保护组中由Android系统定义的权限仅保留给系统应用。
- en: 'Some permissions in this level allow applications to use system level features.
    For example, `ACCOUNT_MANAGER` permission lets the applications use account authenticators
    and BRIK permissions allow the applications to brick the phone. The following
    is a list of some of the signature permissions at the time of writing the book.
    For a complete reference check the Android source code or the `Manifest.permission`
    class:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一级别的某些权限允许应用程序使用系统级别的功能。例如，`ACCOUNT_MANAGER` 权限允许应用程序使用账户验证器，而 BRIK 权限允许应用程序锁定手机。以下是编写本书时一些签名权限的列表。要获取完整的参考资料，请查看
    Android 源代码或 `Manifest.permission` 类：
- en: '`android.permission.ACCESS_SURFACE_FLINGER`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_SURFACE_FLINGER`'
- en: '`android.permission.ACCOUNT_MANAGER`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCOUNT_MANAGER`'
- en: '`android.permission.BRICK`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BRICK`'
- en: '`android.permission.BIND_INPUT_METHOD`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BIND_INPUT_METHOD`'
- en: '`android.permission.SHUTDOWN`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SHUTDOWN`'
- en: '`android.permission.SET_ACTIVITY_WATCHER`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_ACTIVITY_WATCHER`'
- en: '`android.permission.SET_ORIENTATION`'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_ORIENTATION`'
- en: '`android.permission.HARDWARE_TEST`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.HARDWARE_TEST`'
- en: '`android.permission.UPDATE_DEVICE_STATS`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.UPDATE_DEVICE_STATS`'
- en: '`android.permission.CLEAR_APP_USER_DATA`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CLEAR_APP_USER_DATA`'
- en: '`android.permission.COPY_PROTECTED_DATA`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.COPY_PROTECTED_DATA`'
- en: '`android.permission.CHANGE_COMPONENT_ENABLED_STATE`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CHANGE_COMPONENT_ENABLED_STATE`'
- en: '`android.permission.FORCE_BACK`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.FORCE_BACK`'
- en: '`android.permission.INJECT_EVENTS`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.INJECT_EVENTS`'
- en: '`android.permission.INTERNAL_SYSTEM_WINDOW`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.INTERNAL_SYSTEM_WINDOW`'
- en: '`android.permission.MANAGE_APP_TOKENS`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MANAGE_APP_TOKENS`'
- en: 'Some permissions in this level allow applications to send system level broadcasts
    and intents such as broadcasting intents and SMS. These permissions include:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一级别的某些权限允许应用程序发送系统级别的广播和意图，如发送意图和短信。这些权限包括：
- en: '`android.permission.BROADCAST_PACKAGE_REMOVED`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BROADCAST_PACKAGE_REMOVED`'
- en: '`android.permission.BROADCAST_SMS`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BROADCAST_SMS`'
- en: '`android.permission.BROADCAST_WAP_PUSH`'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BROADCAST_WAP_PUSH`'
- en: 'Other permissions in this level allow applications to access system level data
    that third party applications do not have. These permissions include:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一级别的其他权限允许应用程序访问第三方应用程序无法访问的系统级别数据。这些权限包括：
- en: '`android.permission.PACKAGE_USAGE_STATS`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.PACKAGE_USAGE_STATS`'
- en: '`android.permission.CHANGE_BACKGROUND_DATA_SETTING`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CHANGE_BACKGROUND_DATA_SETTING`'
- en: '`android.permission.BIND_DEVICE_ADMIN`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BIND_DEVICE_ADMIN`'
- en: '`android.permission.READ_FRAME_BUFFER`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_FRAME_BUFFER`'
- en: '`android.permission.DEVICE_POWER`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.DEVICE_POWER`'
- en: '`android.permission.DIAGNOSTIC`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.DIAGNOSTIC`'
- en: '`android.permission.FACTORY_TEST`'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.FACTORY_TEST`'
- en: '`android.permission.FORCE_STOP_PACKAGES`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.FORCE_STOP_PACKAGES`'
- en: '`android.permission.GLOBAL_SEARCH_CONTROL`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.GLOBAL_SEARCH_CONTROL`'
- en: 'SignatureOrSystem permissions: As with signature protection level, this permission
    is granted to applications with the same certificate as the application that defined
    the permission. In addition, this protection level includes applications with
    the same certificate as the Android system image. This permission level is mainly
    used for applications that are built by handset manufacturers, carriers, and system
    applications. These permissions are not allowed for third party apps. These permissions
    let apps perform some very powerful functions. For example, the permission `android.permission.REBOOT`
    allows an app to reboot the device. The permission `android.permission.SET_TIME`
    lets an app set system time.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签名或系统权限：与签名保护级别一样，此权限授予与定义该权限的应用具有相同证书的应用。此外，此保护级别还包括与Android系统映像具有相同证书的应用。这个权限级别主要用于手机制造商、运营商和系统应用构建的应用。第三方应用不允许使用这些权限。这些权限允许应用执行一些非常强大的功能。例如，权限
    `android.permission.REBOOT` 允许应用重启设备。权限 `android.permission.SET_TIME` 允许应用设置系统时间。
- en: 'A list of some of the SignatureOrSystem permissions as of the time of writing
    the book is as follows:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本书时，一些 SignatureOrSystem 权限列表如下：
- en: '`android.permission.ACCESS_CHECKIN_PROPERTIES`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_CHECKIN_PROPERTIES`'
- en: '`android.permission.BACKUP`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BACKUP`'
- en: '`android.permission.BIND_APPWIDGET`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BIND_APPWIDGET`'
- en: '`android.permission.BIND_WALLPAPER`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BIND_WALLPAPER`'
- en: '`android.permission.CALL_PRIVILEGED`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CALL_PRIVILEGED`'
- en: '`android.permission.CONTROL_LOCATION_UPDATES`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CONTROL_LOCATION_UPDATES`'
- en: '`android.permission.DELETE_CACHE_FILES`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.DELETE_CACHE_FILES`'
- en: '`android.permission.DELETE_PACKAGES`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.DELETE_PACKAGES`'
- en: '`android.permission.GLOBAL_SEARCH`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.GLOBAL_SEARCH`'
- en: '`android.permission.INSTALL_LOCATION_PROVIDER`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.INSTALL_LOCATION_PROVIDER`'
- en: '`android.permission.INSTALL_PACKAGES`'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.INSTALL_PACKAGES`'
- en: '`android.permission.MASTER_CLEAR`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MASTER_CLEAR`'
- en: '`android.permission.REBOOT`'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.REBOOT`'
- en: '`android.permission.SET_TIME`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_TIME`'
- en: '`android.permission.STATUS_BAR`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.STATUS_BAR`'
- en: '`android.permission.WRITE_GSERVICES`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_GSERVICES`'
- en: '`android.permission.WRITE_SECURE_SETTINGS`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_SECURE_SETTINGS`'
- en: Application level permissions
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序级别权限
- en: There are two ways to apply permissions to the entire application. In the first
    case, an application declares what permissions the application requires to function
    properly. So, an application that will be sending out SMS will declare such permission
    in the manifest file. In the second case, the application can declare what permissions
    other applications trying to interact with this application should have. For example,
    an application can declare that any application that wants to interact with one
    of its components should have permissions to access the camera. Both these kinds
    of permissions have to be declared in the manifest file. Let us go through them
    one by one.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将权限应用于整个应用程序。在第一种情况下，应用程序声明应用程序正常运行所需的权限。因此，将发送短信的应用程序将在清单文件中声明此类权限。在第二种情况下，应用程序可以声明尝试与此应用程序交互的其他应用程序应具有的权限。例如，一个应用程序可以声明任何想要与其组件交互的应用程序都应具有访问摄像头的权限。这两种类型的权限都必须在清单文件中声明。让我们逐一了解它们。
- en: 'This `<uses-permission>` tag is declared inside `<manifest>` and declares what
    permissions the application requests to function properly. The syntax of the tag
    is the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `<uses-permission>` 标签在 `<manifest>` 内声明，表示应用程序请求正常运行所需的权限。标签的语法如下：
- en: '[PRE0]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The user, when downloading the application, has to accept these permissions.
    `android:name` is the name of the permission. An example declaration of this tag
    is as follows. The following permission declares that the application that the
    user is about to install would access the user''s SMS:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在下载应用时，必须接受这些权限。`android:name` 是权限的名称。此标签的声明示例如下。以下权限声明用户即将安装的应用程序将访问用户的短信：
- en: '[PRE1]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `<application>` tag has an attribute called `android:permission` that declares
    blanket permissions for components. These are the permissions any application
    trying to interact with this application''s components need to have. This is shown
    in the following code. The following code shows that applications interacting
    with any component of `MyApplication` should have permission to access the camera:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`<application>`标签有一个名为`android:permission`的属性，用于声明组件的通用权限。任何尝试与此应用程序的组件交互的应用程序都需要这些权限。以下代码显示了这一点。以下代码表明，与`MyApplication`的任何组件交互的应用程序都应该有访问摄像头的权限：'
- en: '[PRE2]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As discussed in the next section, individual components can set permissions
    as well. Component permissions override the permission set using the `<application>`
    tag. The preceding method is the best place to declare the blanket permissions
    for all components.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如下一节所讨论的，各个组件也可以设置权限。组件权限会覆盖使用`<application>`标签设置的权限。上述方法是声明所有组件的通用权限的最佳位置。
- en: Component level permissions
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件级别权限
- en: 'All Android components can be secured using permissions. The following figure
    illustrates this concept:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android组件都可以使用权限进行保护。以下图示说明了这一概念：
- en: '![Component level permissions](img/5603OT_03_03.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![组件级别权限](img/5603OT_03_03.jpg)'
- en: Let's talk about permission declaration and enforcement for each component.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下每个组件的权限声明和实施。
- en: Activity
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动
- en: Any Activity can be secured by permission, by calling out the permission in
    Activity declaration in the `<activity>` tag. For example, the Activity `OrderActivity`
    with a custom permission `com.example.project.ORDER_BOOK` will be declared as
    follows. Any component that tries to launch `OrderActivity` needs to have this
    custom permission.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 任何活动都可以通过在`<activity>`标签的活动声明中调用权限来进行保护。例如，具有自定义权限`com.example.project.ORDER_BOOK`的活动`OrderActivity`将如下声明。任何尝试启动`OrderActivity`的组件都需要拥有这个自定义权限。
- en: '[PRE3]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In case of activities, permission enforcement happens when launching the Activity,
    by using `Context.startActivity()` and `Context.startActivityForResult()`. In
    case the launching component does not have appropriate permissions, a `SecurityException`
    is thrown.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于活动，权限实施发生在使用`Context.startActivity()`和`Context.startActivityForResult()`启动活动时。如果启动组件没有适当的权限，将抛出`SecurityException`。
- en: Service
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: Any Service can be protected using permission by listing out the required permissions
    in the `<service>` tag. For example, the Service `FindUsefulSMS` that identifies
    the SMS based on keywords declares a permission `android.permission.READ_SMS`.
    This permission will be declared as follows. Any component that tries to launch
    `FindUsefulSMS` needs to have this permission.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 任何服务都可以通过在`<service>`标签中列出所需的权限来进行保护。例如，基于关键词识别短信的服务`FindUsefulSMS`声明了一个权限`android.permission.READ_SMS`。这个权限将如下声明。任何尝试启动`FindUsefulSMS`的组件都需要拥有这个权限。
- en: '[PRE4]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Permission enforcement for a Service is done at the time of launching a Service
    by using `Context.startService()`, stopping a Service by using `Context.stopService()`,
    and binding to a Service by using `Context.bindService()`. In case the requesting
    component does not have the appropriate permissions, a `SecurityException` is
    thrown.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务的权限实施是在使用`Context.startService()`启动服务、使用`Context.stopService()`停止服务以及使用`Context.bindService()`绑定服务时进行的。如果请求的组件没有适当的权限，将抛出`SecurityException`。
- en: If the Service exposes a binder interface that other applications can bind to,
    caller permissions can be checked when binding to the binder by using `Context.checkCallingPermission()`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务公开了一个允许其他应用程序绑定的Binder接口，可以在绑定到Binder时使用`Context.checkCallingPermission()`来检查调用者的权限。
- en: Content Provider
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容提供者
- en: 'Content providers can be secured with permissions specified in the `<provider>`
    tag. In the following example, any component that wants to talk to the provider
    should have the `android.permission.READ_SMS` permission:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 内容提供者可以通过`<provider>`标签中指定的权限来保护。以下示例中，任何想要与提供者通信的组件都应该拥有`android.permission.READ_SMS`权限：
- en: '[PRE5]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As discussed in [Chapter 2](ch02.html "Chapter 2. Application Building Blocks"),
    *Application Building Blocks*, the `<provider>` tag also has fine-grained read
    and write permission attributes. To be able to read from a `<provider>` tag, the
    application should have the read permission. This is checked during `ContentResolver.query()`.
    To be able to update, delete, and insert into a provider, a component should have
    read and write permissions. These permissions are checked during `ContentResolver.insert()`,
    `ContentResolver.update()`, and `ContentResolver.delete()`. Failure to have appropriate
    permission will result in `SecurityException` being thrown by the call.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第2章](ch02.html "第2章. 应用构建块") *应用构建块* 中所讨论的，`<provider>`标签也具有细粒度的读写权限属性。为了能够从`<provider>`标签中读取，应用程序应具有读取权限。这会在`ContentResolver.query()`过程中进行检查。为了能够更新、删除和插入提供者，组件应具有读写权限。这些权限会在`ContentResolver.insert()`、`ContentResolver.update()`和`ContentResolver.delete()`过程中进行检查。如果权限不适当，将导致调用时抛出`SecurityException`。
- en: The `<grant-uri-permission>` tag is a child of the `<provider>` tag and is used
    to grant access to some specific data sets of a provider for a limited amount
    of time. Consider an example of an app that saves SMS to a database. Some SMSs
    may have a photo attached to it. For an application to view the SMS correctly,
    it will launch the image viewer, which might not have access to the provider.
    The **URI** (**Universal Resource Identifier**) permissions will let the image
    viewer have read permission for that particular picture. In the previous example,
    where the provider set `android:grantIriPermissions="true"`, the image viewer
    will have read permission to the entire provider. This poses a security risk.
    To give limited access, the provider can declare which parts of the provider it
    wants to be open to the URI permissions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`<grant-uri-permission>`标签是`<provider>`标签的子标签，用于在有限时间内授予对提供者某些特定数据集的访问权限。考虑一个将短信保存到数据库的应用程序示例。某些短信可能附有照片。为了使应用程序正确查看短信，它会启动图像查看器，而图像查看器可能无法访问提供者。**URI**（**通用资源标识符**）权限将允许图像查看器读取特定图片的权限。在前面的示例中，提供者设置了`android:grantIriPermissions="true"`，图像查看器将具有对整个提供者的读取权限。这构成了安全风险。为了提供有限的访问权限，提供者可以声明它希望对URI权限开放的部分。'
- en: 'The syntax of the URI permission is as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: URI权限的语法如下：
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The URI permissions are not recursive.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: URI权限不是递归的。
- en: 'What I find most interesting is that we can use wildcards and patterns to define
    which parts of the provider we want to be able to enforce the URI permissions
    to. An example of this is as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得最有趣的是，我们可以使用通配符和模式来定义我们想要强制实施URI权限的提供者的哪些部分。以下是一个例子：
- en: '[PRE7]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember to revoke the URI permissions once the task is completed by using `Context.revokeUriPermission()`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在任务完成后使用`Context.revokeUriPermission()`撤销URI权限。
- en: Broadcast receiver
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播接收器
- en: Broadcasts can be secured with permissions in two ways. In the first case, the
    receiver protects itself with permissions so it receives only the broadcasts it
    wants to hear. In the other case, a broadcaster selects which receivers can receive
    the broadcast. We will discuss both the scenarios in the following section.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 广播可以通过两种方式使用权限进行保护。在第一种情况下，接收者使用权限保护自己，因此它只接收想要听到的广播。在另一种情况下，广播者选择哪些接收者可以接收广播。我们将在下一节讨论这两种情况。
- en: Any receiver can be secured by calling out the permission in the receiver declaration
    in the `<receiver>` tag. For example, the receiver `MyListener` declares a permission
    `android.permission.READ_SMS` and this will be declared as follows. `MyListener`
    will receive broadcasts only from broadcasters with the permission `android.permission.READ_SMS`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 任何接收者都可以通过在`<receiver>`标签中的接收者声明中调用权限来保护。例如，接收者`MyListener`声明了一个权限`android.permission.READ_SMS`，这将按如下方式声明。`MyListener`只接收具有`android.permission.READ_SMS`权限的广播者的广播。
- en: '[PRE8]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember, sticky broadcasts cannot be protected by permissions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，粘性广播无法通过权限进行保护。
- en: The required permissions for receiving a broadcast are checked after the broadcast
    intent is delivered, that is, after the call to `Context.sendBroadcast()` returns.
    So, no exception is thrown if the broadcaster does not have the appropriate permissions;
    just that the broadcast will not be delivered. If the receiver is dynamically
    created by using `Context.registerReceiver()`, the permission can be set when
    creating this receiver.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接收广播所需的权限在广播意图传递后被检查，即在调用`Context.sendBroadcast()`返回之后。因此，如果广播者没有适当的权限，不会抛出异常；只是广播不会被传递。如果通过使用`Context.registerReceiver()`动态创建接收者，可以在创建此接收者时设置权限。
- en: 'The second case, where a broadcaster restricts which receivers can receive
    an intent, is done by using the method `sendBroadcast()`. An example of a broadcast
    that will only be sent to receivers of applications with the `android.permission.READ_SMS`
    permission is defined in the following code snippet:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种情况，广播者限制哪些接收者可以接收意图，是通过使用`sendBroadcast()`方法实现的。以下代码片段定义了一个仅发送给具有`android.permission.READ_SMS`权限的应用程序接收者的广播示例：
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Permissions declared with components are not granted to the application. They
    are permissions that an application whose component is trying to interact with
    it should have.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组件声明的权限不会授予应用程序。这是尝试与之交互的组件所属的应用程序应具备的权限。
- en: Extending Android permissions
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Android 权限
- en: Developers can extend the permission system by adding their own permissions.
    These permissions will be displayed to the user during the time of downloading
    the app, so it is important that they are localized and labeled properly.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以通过添加自己的权限来扩展权限系统。这些权限将在用户下载应用时向用户展示，因此确保它们被适当地本地化和标记是非常重要的。
- en: Adding a new permission
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新权限
- en: 'Developers may choose to add just a new permission or an entire tree of permissions.
    Declaring new permissions is done in the manifest file. To add a new permission,
    an application can declare it by using the `<permission>` tag as shown in the
    following code snippet:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以选择仅添加一个新权限或整个权限树。在清单文件中声明新权限。要添加新权限，应用程序可以使用`<permission>`标签声明，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A description of the attributes used in the preceding code snippet for the
    new permission group is as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段中用于新权限组的属性描述如下：
- en: '`android:name`: This is the name of the new permission being declared.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:name`：这是正在声明的新的权限名称。'
- en: '`android:description`: This describes the new permission being declared in
    detail.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:description`：这详细描述了正在声明的新的权限。'
- en: '`android:icon`: This is the permission icon.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon`：这是权限图标。'
- en: '`android:label`: This is the label displayed to the user at install time.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:label`：这是在安装时向用户显示的标签。'
- en: '`android:permissionGroup`: This assigns a permission to a pre-existing user
    defined group or a new group. If no name is specified, permission does not belong
    to any group, which is also fine. I will discuss how to create a permission group
    later in this section.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:permissionGroup`：这将为权限分配一个预先存在的用户定义的组或新组。如果没有指定名称，权限不属于任何组，这也是可以的。我将在本节后面讨论如何创建权限组。'
- en: '`android:protectionLevel`: This specifies the protection level of the new permission.
    These protection levels have been discussed earlier in this chapter.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:protectionLevel`：这指定了新权限的保护级别。这些保护级别在本章前面已经讨论过。'
- en: 'An example for such permission can be as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的权限的一个示例可能如下：
- en: '[PRE11]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To account for localization and maintenance, it is always better to use a string
    resource than a raw string.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于本地化和维护，使用字符串资源总比使用原始字符串要好。
- en: Once you declare a new permission, make sure to declare it in the `<uses-permission>`
    tag.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦声明了新权限，请确保在`<uses-permission>`标签中声明它。
- en: Creating a permission group
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建权限组
- en: 'A permission group can be created by using a `<permission-group>` tag. It is
    a logical grouping of permissions and when presenting them to the user, they are
    all presented together. A permission group is created by using the following syntax:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`<permission-group>`标签创建权限组。这是一个逻辑上的权限分组，当向用户展示时，它们将一起呈现。权限组是使用以下语法创建的：
- en: '[PRE12]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A description of the attributes used in the preceding code snippet for the
    new permission group is as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段中用于新权限组的属性描述如下：
- en: '`android:name`: This is the name of the new permission group. This is the name
    mentioned in the `<permission>` tag.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:name`：这是新权限组的名称。这是在`<permission>`标签中提到的名称。'
- en: '`android:description`: This describes the new permission group being declared
    in detail.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:description`：这详细描述了正在声明的新权限组。'
- en: '`android:icon`: This is the permission group icon.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon`：这是权限组的图标。（注意：这里重复了，根据注意事项，不应该重复输出，所以这里不翻译）'
- en: '`android:label`: This is the label to be displayed at the time of install.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:label`：这是在安装时显示的标签。（注意：这里重复了，根据注意事项，不应该重复输出，所以这里不翻译）'
- en: 'An example of a permission group with permissions for the bookstore can be
    declared as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有书店权限的权限组声明示例如下：
- en: '[PRE13]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating a permission tree
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建权限树
- en: 'If there is a need to arrange permissions as a namespace, such that a permission
    tree can be created, then the application can declare a `<permission-tree>` tag.
    An example of such a tree is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要将权限组织为一个命名空间，以便创建权限树，那么应用程序可以声明一个`<permission-tree>`标签。这样的树的一个示例如下：
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This tag does not define any new permissions, it just creates a namespace for
    you to group permissions. I see this concept being used by developers that have
    multiple applications and all such applications talk to each other. The syntax
    for a `<permission-tree>` tag is defined as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标签并不定义任何新权限，它只是为你创建一个用于分组权限的命名空间。我看到这个概念被那些有多款应用的开发商使用，所有这些应用都会相互通信。`<permission-tree>`标签的语法定义如下：
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A description of the attributes used in the preceding code snippet for the
    new permission group is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前述代码片段中使用的新权限组属性描述：
- en: '`android:name`: This is the name of the new permission group. The name should
    have at least three segments separated by a period, for example, `com.example.android`
    is fine, but `com.example` is not.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:name`：这是新权限组的名称。名称至少应由三个由点分隔的部分组成，例如`com.example.android`是可以的，但`com.example`则不行。'
- en: '`android:icon`: This is the permission group icon.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon`：这是权限组的图标。'
- en: '`android:label`: This is the label to be displayed to the user at the time
    of install.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:label`：这是在安装时向用户显示的标签。'
- en: 'An example declaration is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一个声明示例如下：
- en: '[PRE16]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Permissions are the core of Android application security and this chapter covered
    permissions in detail. We learned the four permission protection levels, how to
    protect the components with permissions, and how to define new permissions. Awareness
    and understanding of the permission model is essential both for developers and
    users of an Android phone. Now that we are armed with the knowledge of components,
    inter-component communication and permissions, let's march to the next chapter
    and learn how to define an application's policy file.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 权限是Android应用安全的核心，本章详细介绍了权限。我们了解了四种权限保护级别，如何使用权限保护组件，以及如何定义新权限。对于开发者和Android手机用户来说，了解和掌握权限模型至关重要。现在我们拥有了关于组件、组件间通信和权限的知识，让我们迈向下一章，学习如何定义应用程序的策略文件。
