- en: Chapter 2. App Links
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 应用链接
- en: 'One of the major improvements to the new Android Marshmallow version is powerful
    **app linking**. It allows the association of your app with your owned web domain.
    With this association, you as a developer allow the system to determine the default
    app that should handle a particular web link and skip prompting users to select
    an app. Saving clicks means less friction, which means that you reach the content
    faster; this leads to users and developers being happy. In this chapter, we will
    cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 新版Android Marshmallow的一个主要改进是强大的**应用链接**功能。它允许将你的应用与你所拥有的网络域关联起来。通过这种关联，你作为开发者允许系统确定处理特定网络链接的默认应用，并跳过提示用户选择应用的步骤。减少点击次数意味着摩擦更少，这意味着你可以更快地访问内容；这使用户和开发者都感到满意。在本章中，我们将涵盖以下主题：
- en: The Android Intent system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Intent系统
- en: Creating a website association
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建网站关联
- en: Triggering app link verification
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发应用链接验证
- en: App link settings and management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用链接设置与管理
- en: Testing app links
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应用链接
- en: The Android Intent system
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Intent系统
- en: 'Almost every developer knows what an **Android Intent** system is, but we will
    explain it a bit and lay out the basic principles required to understand the app
    links feature. The Android Intent system can be found in the Android platform;
    this allows the passing of data in a small, simple package. Intent means that
    we want to perform an action. You may already know about the basic intents:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个开发者都知道**Android Intent**系统是什么，但我们会稍作解释并概述理解应用链接功能所需的基本原则。Android Intent系统可以在Android平台中找到；这允许通过小而简单的数据包传递数据。意图意味着我们想要执行一个动作。你可能已经知道了一些基本的意图：
- en: '`startActivity()`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startActivity()`'
- en: '`startActivityForResult()`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startActivityForResult()`'
- en: '`startService()`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startService()`'
- en: '`sendBroadcast()`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sendBroadcast()`'
- en: 'The following figure shows an Android Intent system for the `startActivity()`
    and `onCreate()` intents:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了针对`startActivity()`和`onCreate()`意图的Android Intent系统：
- en: '![The Android Intent system](img/00007.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Android Intent系统](img/00007.jpeg)'
- en: 'Source: http://developer.android.com/guide/components/intents-filters.html'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：http://developer.android.com/guide/components/intents-filters.html
- en: The Android Intent system is a flexible mechanism that is used to enable apps
    to handle content and requests. Multiple apps may declare matching **URI** (short
    for **Uniform Resource Identifier**) patterns in their **intent filters**. When
    a user clicks on a web link that does not have a default **launch handler**, the
    platform may display a dialog for the user to select from a list of apps that
    have declared matching intent filters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Android Intent系统是一个灵活的机制，用于让应用能够处理内容和请求。多个应用可以在它们的**意图过滤器**中声明匹配的**URI**（即**统一资源标识符**的简称）模式。当用户点击没有默认**启动处理程序**的网络链接时，平台可能会显示一个对话框，让用户从声明了匹配意图过滤器的应用列表中选择。
- en: Intents are also used to trigger actions across the system, and some of these
    actions are system-defined, such as `ACTION_SEND` (referred to as the *share*
    action), where you as an app developer can share/send specific information to
    another application in order to complete an action required by a user.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 意图还用于在系统范围内触发动作，其中一些动作是系统定义的，比如`ACTION_SEND`（称为*分享*动作），你作为应用开发者可以将特定的信息分享/发送到另一个应用程序，以完成用户所需的一个动作。
- en: Until Android Marshmallow, browsers handled each link clicked on the Web, and
    the system checked whether a **custom URI scheme** was available. Your application
    could handle specific custom actions via the custom URI scheme. This was tricky
    at times and didn't allow the handling of links under an entire web domain. Now,
    it's possible. Android Marshmallow's added support for app links allows you, as
    an app developer, to associate an app with a web domain. Automatically, this will
    allow you to determine the default app that will handle a particular web link
    instead of showing the selected application to handle the dialog.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Marshmallow之前，浏览器处理网页上点击的每个链接，系统会检查是否有可用的**自定义URI方案**。你的应用程序可以通过自定义URI方案处理特定的自定义动作。这种方法有时比较复杂，并不支持处理整个网络域下的链接。现在，这成为了可能。Android
    Marshmallow增加的对应用链接的支持允许你作为应用开发者，将应用与一个网络域关联起来。这样，系统会自动确定哪个应用是处理特定网络链接的默认应用，而不是显示让用户选择应用的处理对话框。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you wish to read more about intents, you can go to the following link:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望了解更多关于意图的信息，可以访问以下链接：
- en: '[http://developer.android.com/guide/components/intents-filters.html](http://developer.android.com/guide/components/intents-filters.html)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/guide/components/intents-filters.html](http://developer.android.com/guide/components/intents-filters.html)'
- en: Creating a website association
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建网站关联
- en: 'You as an app developer as well as a website owner need to declare a website
    association with an app. The declaration is done by hosting a JSON file, which
    is specifically named `assetlinks.json`. The file must reside in a specific location
    on the domain in question, such as:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用开发者以及网站所有者，你需要声明一个网站与应用的关联。声明是通过托管一个名为 `assetlinks.json` 的 JSON 文件来完成的。该文件必须位于有关域名的特定位置，例如：
- en: '`https://<domain>:<optional port>/.well-known/assetlinks.json`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://<domain>:<optional port>/.well-known/assetlinks.json`'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This file is accessed and verified over the HTTPS protocol and not HTTP.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件通过 HTTPS 协议访问和验证，而不是 HTTP。
- en: Why this file?
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么需要这个文件？
- en: 'The JSON file holds information about the Android application that will be
    the default handler for the URLs under this domain. In the JSON file, you must
    have the following structure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 文件保存有关将成为此域名下 URL 默认处理程序的 Android 应用程序的信息。在 JSON 文件中，你必须具有以下结构：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following are some elements of the preceding structure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些前面结构中的元素：
- en: '`package_name`: This is the package name from your app''s **manifest**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package_name`：这是来自你应用**清单**中的包名。'
- en: '`sha256_cert_fingerprints`: This is the SHA-256 fingerprint of your app'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sha256_cert_fingerprints`：这是你应用的 SHA-256 指纹'
- en: 'Use the following command if you don''t have this **SHA** (short for **Secure
    Hash Algorithm**):'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有这个 **SHA**（**安全哈希算法**的简称），请使用以下命令：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Triggering app link verification
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触发应用链接验证
- en: You can request automatic verification for any app links declared in the `assetlinks.json`
    file. Requesting a verification is done by adding the `android:autoVerify` attribute
    to each intent filter in the manifest and setting it to `true`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以请求自动验证 `assetlinks.json` 文件中声明的任何应用链接。请求验证是通过将 `android:autoVerify` 属性添加到清单中的每个意图过滤器并设置为
    `true` 来完成的。
- en: Let's say we own a WhatsApp application and domain. We want to autoverify an
    intent filter that has the `android.intent.action.VIEW` action.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们拥有一个 WhatsApp 应用程序和域名。我们希望自动验证具有 `android.intent.action.VIEW` 动作的意图过滤器。
- en: 'The following is a sample activity from WhatsApp that handles app links and
    the autoverification attribute:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个来自 WhatsApp 的示例活动，它处理应用链接和自动验证属性：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `android:autoVerify` attribute alerts the platform to verify app links when
    the app is installed. If the app link's verification fails, your app will not
    be set as the preferred app to handle these links. If there is no preferred app
    to handle these links whenever a user opens one of them, a dialog to choose an
    app is displayed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`android:autoVerify` 属性提醒平台在安装应用时验证应用链接。如果应用链接的验证失败，你的应用将不会被设置为处理这些链接的首选应用。如果用户打开其中任何一个链接时没有首选应用来处理这些链接，则会显示选择应用对话框。'
- en: If a user has used the system settings and set an app as the preferred app,
    then the link will go directly to the app but not because the verification was
    successful.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已经使用系统设置并将一个应用设置为首选应用，那么链接将直接进入该应用，但这不是因为验证成功。
- en: App link settings and management
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用链接设置和管理
- en: For easy management, you can enter the system settings and tweak the URL handling
    by navigating to **Settings** | **Apps** | **App info** | **Open by default**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于管理，你可以进入系统设置，通过导航到 **设置** | **应用** | **应用信息** | **默认打开** 来调整 URL 处理。
- en: '![App link settings and management](img/00008.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![应用链接设置和管理](img/00008.jpeg)'
- en: Testing app links
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试应用链接
- en: As with every new feature we add, we must test the app links feature that we
    will add to our application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们添加的每个新功能一样，我们必须测试我们将添加到应用程序中的应用链接功能。
- en: Checking manifest and listing domains
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查清单和列出域名
- en: 'Our first step is to go over the manifest and make sure all the domains are
    registered correctly and all intent filters are well defined. Only the links/domains
    under all the criteria mentioned in the following bullets are the ones we need
    to test:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是检查清单，确保所有域名都正确注册，并且所有意图过滤器都定义良好。下面提到的所有条件下的链接/域名是我们需要测试的：
- en: The `android:scheme` attribute with a value of HTTP or HTTPS
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 HTTP 或 HTTPS 值的 `android:scheme` 属性
- en: The `android:host` attribute with a domain URI pattern
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有域名 URI 模式的 `android:host` 属性
- en: 'The `category` element, which can be one of the following:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category` 元素，可以是以下之一：'
- en: '`android.intent.action.VIEW`'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.intent.action.VIEW`'
- en: '`android.intent.category.BROWSABLE`'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.intent.category.BROWSABLE`'
- en: The Digital Asset Links API
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字资产链接 API
- en: 'We can use the **Digital Asset Links API** to confirm that our link''s JSON
    file is properly hosted and defined using the following syntax:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**数字资产链接API**，通过以下语法确认我们的链接JSON文件是否被适当地托管和定义：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Testing our intent
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的意图
- en: 'Now that we have confirmed that the hosted JSON file is valid, we will install
    the app on our device and wait for at least 20-30 seconds for the verification
    process to complete. After this, we can check whether the system has verified
    our app and set the correct link-handling policies using the following syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经确认托管的JSON文件是有效的，我们将在设备上安装应用，并等待至少20-30秒，让验证过程完成。之后，我们可以使用以下语法检查系统是否验证了我们的应用并设置了正确的链接处理策略：
- en: '`adb shell am start -a android.intent.action.VIEW \ -c android.intent.category.BROWSABLE
    \ -d "http://<DOMAIN>:<port>"`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`adb shell am start -a android.intent.action.VIEW \ -c android.intent.category.BROWSABLE
    \ -d "http://<DOMAIN>:<port>"`'
- en: 'For example, if we take YouTube videos, we can trigger the YouTube app to open
    the video directly using the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们使用YouTube视频，可以使用以下命令触发YouTube应用直接打开视频：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Checking policies using adb
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用adb检查策略
- en: '**Android Debug Bridge** (**adb**) can help us check existing link-handling
    policies for all applications in our device using the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android调试桥**（**adb**）可以帮助我们使用以下命令检查设备上所有应用的现有链接处理策略：'
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot is the result of the preceding command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图是前面命令的结果：
- en: '![Checking policies using adb](img/00009.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用adb检查策略](img/00009.jpeg)'
- en: 'Another option is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项如下：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot is the result of the preceding command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图是前面命令的结果：
- en: '![Checking policies using adb](img/00010.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用adb检查策略](img/00010.jpeg)'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We must wait at least 20-30 seconds after the installation for the system to
    complete the verification process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，我们必须等待至少20-30秒，以便系统完成验证过程。
- en: 'The following listing indicates apps'' association with domains per user:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的列表指示了每个用户与应用关联的域：
- en: '**Package**: This refers to the app''s package name, as declared in its manifest'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包**：这指的是应用在其清单中声明的包名。'
- en: '**Domains**: This refers to the list of hosts whose web links are handled by
    this app; blank spaces are used as delimiters'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域**：这指的是由该应用处理的网络链接的主机列表；空格用作分隔符。'
- en: '**Status**: This refers to the current link-handling setting for this app'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：这指的是此应用的当前链接处理设置。'
- en: Passing the verification and `android:autoVerify="true"` will show a status
    of `always`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过验证和`android:autoVerify="true"`将显示状态为`always`。
- en: The hexadecimal number after the status (as shown in the preceding screenshot)
    is the Android system's record of the user's app linkage preferences. It does
    not indicate that the verification has succeeded.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 状态后面的十六进制数字（如前一个截图所示）是Android系统记录的用户应用链接偏好的记录。它并不表示验证已经成功。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The user can change the app link settings before the end of the verification
    process, which means that we may see a false positive for a successful verification.
    User preferences take precedence over programmatic verification, so we will see
    that the link goes directly to our app without displaying a dialog, as if verification
    had succeeded.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以在验证过程结束前更改应用链接设置，这意味着我们可能会看到一个验证成功的假阳性。用户偏好优先于程序化验证，因此我们会看到链接直接跳转到我们的应用，而不会显示对话框，就像验证已经成功一样。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As we saw, app linking has become powerful in Android Marshmallow. This allows
    you, the app developers, help the system better decide how to act. Handling web
    URLs will give you wider exposure, a bigger funnel for your apps, and better experience,
    which you can provide to your users (which in turn leads to better ratings, more
    downloads, and vice versa).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，应用链接在Android Marshmallow中变得非常强大。这允许作为应用开发者的你帮助系统更好地决定如何行动。处理网页URL将为你提供更广泛的曝光，为你的应用带来更大的漏斗和更好的体验，从而你可以为用户提供更好的服务（这反过来又会导致更好的评分、更多的下载，反之亦然）。
- en: App linking is simple to implement, easy to understand, and is a must-have feature
    in the mobile/web world today. While app linking enables better action handling
    for those using your applications, users can have multiple devices, expecting
    the same behavior on each device, and would be more engaged if their data and
    action handling happens smoothly. This brings us to our next chapter, which will
    teach you how to back up user settings and more.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 应用链接的实现简单易懂，在当今的移动/网络世界中是必不可少的特性。尽管应用链接能为使用你应用程序的用户提供更好的操作处理，但用户可能会有多个设备，期待在每个设备上都有相同的行为表现，如果他们的数据和处理动作能够顺畅进行，用户将更加投入。这引出了我们的下一章内容，将会教您如何备份用户设置及更多功能。
