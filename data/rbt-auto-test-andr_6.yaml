- en: Chapter 6. Remote Control in Robotium
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章 Robotium中的远程控制
- en: This chapter will introduce you to the Software Automation Framework Support
    and the working of the Remote Control in Android. It helps to test the connection
    of an Android device to a remote client via the TCP Messenger Service. By the
    end of this chapter, you will learn the internal mechanism of how the Remote Control
    is used with a test APK that does not have Internet permissions and connects to
    a remote client with the help of the Android socket service.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍软件自动化框架支持以及Android中远程控制的工作原理。它有助于测试Android设备与远程客户端通过TCP信使服务的连接。在本章结束时，您将了解远程控制与没有互联网权限的测试APK结合使用的内部机制，以及它如何通过Android套接字服务连接到远程客户端。
- en: Software Automation Framework Support
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件自动化框架支持
- en: The main function of the **Software Automation Framework Support** (**SAFS**)
    is to fully integrate the use of Robotium for Android testing with a large set
    of users that use different technologies using the SAFS.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件自动化框架支持（SAFS）**的主要功能是，将Robotium完全集成到Android测试中，并与大量使用不同技术的用户一起使用SAFS。'
- en: 'In Android, sockets, UDP and RMI are not supported. Thus, the test application
    is not supposed to have access to the TCP sockets if AUT doesn''t have the following
    permissions:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，不支持套接字、UDP和RMI。因此，如果AUT没有以下权限，测试应用程序不应具有访问TCP套接字的权限：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The reason a Remote Control is introduced is that there is a generic way that
    uses the socket service in Android, which is completely independent of the test
    application and AUT.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 引入远程控制的原因是，在Android中有一个使用套接字服务的通用方法，这种方法完全独立于测试应用程序和AUT。
- en: Let's see how a Remote Control using SAFS works.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用SAFS的远程控制是如何工作的。
- en: Working of a Remote Control for Android
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android远程控制的工作原理
- en: '![Working of a Remote Control for Android](img/8010OS_06_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Android远程控制的工作原理](img/8010OS_06_01.jpg)'
- en: 'The working of a Remote Control for Android can be defined by the following
    steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android远程控制的工作原理可以通过以下步骤来定义：
- en: The user installs a socket service on the device/emulator. This socket service
    has full Internet permission. The TCP message exchange protocol is used by the
    remote process to send/receive the commands and share the results with the already
    installed socket service.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在设备/模拟器上安装套接字服务。这个套接字服务拥有完全的互联网权限。远程进程使用TCP消息交换协议发送/接收命令，并与已安装的套接字服务共享结果。
- en: The test application to be written for the AUT consists of the code to bind
    to this socket service. This test app doesn't need any Internet permission. It
    can rely on the socket service for the data results.![Working of a Remote Control
    for Android](img/8010OS_06_02.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为AUT编写的测试应用程序包含用于绑定到此套接字服务的代码。这个测试应用程序不需要任何互联网权限，可以依赖套接字服务提供数据结果。![Android远程控制的工作原理](img/8010OS_06_02.jpg)
- en: The TCP Messenger Service (socket service) acts as the mediator between the
    remote test controller (Windows, Linux, Mac, and so on) that communicates over
    the TCP sockets and an Android test package. It expects two-way communication
    for receiving commands and returning test data/results. Due to this service, a
    test package with no Internet permissions can be controlled via TCP sockets.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TCP信使服务（套接字服务）充当远程测试控制器（Windows、Linux、Mac等）与通过TCP套接字通信的Android测试包之间的中介。它期望进行双向通信，以接收命令和返回测试数据/结果。由于这项服务，没有互联网权限的测试包可以通过TCP套接字进行控制。
- en: The test application receives the commands from the socket service, performs
    the tests and returns the data, status needed by the test controller.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试应用程序从套接字服务接收命令，执行测试，并返回测试控制器所需的数据和状态。
- en: The application to be tested should not be hardcoded in the test application.
    This can be easily automated without the developer/tester code by updating the
    `android:targetPackage` attribute in the `AndroidManifest.xml` file. Thus, at
    the pre-test runtime, information out of the target APK can be extracted and can
    repackage an otherwise unmodified test application APK with an updated `AndroidManifest.xml`
    file for the target package. During runtime, the test APK can identify the target
    package and the initial activity to be launched through the `PackageManager`,
    `PackageInfo`, and `ApplicationInfo` calls.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 被测试的应用不应当在测试应用中硬编码。通过更新 `AndroidManifest.xml` 文件中的 `android:targetPackage` 属性，可以轻松地实现自动化，而无需开发者/测试者的代码。因此，在预测试运行时，可以提取目标
    APK 的信息，并使用更新后的 `AndroidManifest.xml` 文件为目标包重新打包其他未修改的测试应用 APK。在运行时，测试 APK 可以通过
    `PackageManager`、`PackageInfo` 和 `ApplicationInfo` 调用来识别目标包和要启动的初始活动。
- en: Robotium Remote Control helps test cases to be executed from JVM, which enables
    Robotium to work with JVM frameworks such as JUnit 4\. For the Remote Control,
    another `Solo` class is present at `com.jayway.android.robotium.remotecontrol.solo`.
    It provides the Remote Control API to the embedded traditional Robotium `Solo`
    class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Robotium 远程控制帮助测试用例从 JVM 执行，这使得 Robotium 能够与 JUnit 4 等JVM 框架一起工作。对于远程控制，另一个
    `Solo` 类位于 `com.jayway.android.robotium.remotecontrol.solo`。它为嵌入的传统 Robotium `Solo`
    类提供远程控制 API。
- en: 'Since the Remote Control `Solo` class runs outside the device/emulator, that
    is, in the context of the JUnit test, it can''t access the **Application Under
    Test** (**AUT**) objects. It does not abort or stop on a test failure. You can
    see the different methods and information present for it at the following source:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于远程控制 `Solo` 类在设备/模拟器外部运行，即在 JUnit 测试的上下文中，它无法访问 **被测应用**（**AUT**）的对象。它在测试失败时不会中止或停止。你可以通过以下来源查看为其提供的方法和信息：
- en: '[http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/Solo.html](http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/Solo.html)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/Solo.html](http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/Solo.html)'
- en: 'It uses the TCP Messenger Service for Android. You can download Robotium Remote
    Control release for Android testing with Robotium from the following URL:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用 Android 的 TCP Messenger 服务。你可以从以下 URL 下载用于 Robotium 安卓测试的 Robotium 远程控制版本：
- en: '[http://sourceforge.net/projects/safsdev/files/RobotiumRemoteControl/](http://sourceforge.net/projects/safsdev/files/RobotiumRemoteControl/)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://sourceforge.net/projects/safsdev/files/RobotiumRemoteControl/](http://sourceforge.net/projects/safsdev/files/RobotiumRemoteControl/)'
- en: 'You can get the latest SAFS download from the following URL:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从以下 URL 获取最新的 SAFS 下载：
- en: '[http://sourceforge.net/projects/safsdev/files/latest/download](http://sourceforge.net/projects/safsdev/files/latest/download)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://sourceforge.net/projects/safsdev/files/latest/download](http://sourceforge.net/projects/safsdev/files/latest/download)'
- en: Once you download Robotium Remote Control, you will find the `SoloRemoteControl`
    project already installed with it. It should be used as a reference for your own
    Java development project. The `src` folder inside the `SoloRemoteControl` project
    contains all the source code in the `robotium-remotecontrol.jar` file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 Robotium 远程控制后，你会发现已经安装了 `SoloRemoteControl` 项目。它应该作为你自己的 Java 开发项目的参考。`SoloRemoteControl`
    项目中的 `src` 文件夹包含了 `robotium-remotecontrol.jar` 文件中的所有源代码。
- en: Robotium Remote Control using SAFS
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SAFS 的 Robotium 远程控制
- en: SAFS tests are not wrapped up as JUnit tests and the SAFS Remote Control of
    Robotium uses an implementation that is NOT JUnit based. Also, there is no technical
    requirement for a JUnit on the Remote-Control side of the test.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SAFS 测试没有作为 JUnit 测试进行封装，Robotium 的 SAFS 远程控制使用了一种非基于 JUnit 的实现。此外，在远程控制测试端没有技术要求使用
    JUnit。
- en: The test setup and deployment of the automation of the target app can be achieved
    using the SDK tools. These tools are used as part of the test runtime such as
    adb and aapt. The existing packaging tools can be used to repackage a compiled
    Robotium test with an alternate `AndroidManifest.xml` file, which can change the
    target application at runtime.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 SDK 工具实现目标应用的自动化测试设置和部署。这些工具作为测试运行时的一部分，例如 adb 和 aapt。现有的打包工具可以用来使用替代的
    `AndroidManifest.xml` 文件重新打包编译后的 Robotium 测试，从而在运行时更改目标应用。
- en: SAFS is a general-purpose, data-driven framework. The only thing that should
    be provided by the user is the target package name or APK path arguments. The
    test will extract and redeploy the modified packages automatically and then launch
    the actual test.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SAFS是一个通用、数据驱动的框架。用户唯一需要提供的是目标包名称或APK路径参数。测试将自动提取和重新部署修改后的包，然后启动实际的测试。
- en: Traditional JUnit/Robotium users might not have, or see the need for, this general-purpose
    nature, but that is likely because it was necessary for the previous Android tests
    to be JUnit tests. It is required for the test to target one specific application.
    The Remote Control application is application specific. That's why the test app
    with the Remote Control installed in the device no longer needs to be an application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的JUnit/Robotium用户可能没有，或认为不需要这种通用性质，但这很可能是由于之前的Android测试必须是JUnit测试。测试需要针对一个特定的应用。远程控制应用是特定于应用程序的。这就是为什么在设备中安装了远程控制的测试应用不再需要是一个应用。
- en: 'The Remote Control in Robotium means there are two test applications to build
    for any given test. They are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Robotium中的远程控制意味着对于任何给定的测试，都需要构建两个测试应用。它们如下：
- en: Traditional on-device Robotium/JUnit test app
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统设备上的Robotium/JUnit测试应用
- en: Remote Control app
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程控制应用
- en: These two build projects have entirely different dependencies and build scripts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个构建项目具有完全不同的依赖项和构建脚本。
- en: The on-device test app has the traditional Robotium/Android/JUnit dependencies
    and build scripts, while the Remote Control app only has dependencies on the TCP
    sockets for communications and Robotium Remote Control API.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 设备上的测试应用具有传统的Robotium/Android/JUnit依赖项和构建脚本，而远程控制应用只依赖于TCP套接字进行通信和Robotium远程控制API。
- en: 'The implementation for the remote-controlled Robotium can be done in the following
    two pieces:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 远程控制的Robotium实现可以在以下两个部分完成：
- en: '**On Device**: `ActivityInstrumentationTestCase2.setup()` is initialized when
    Robotium''s `Solo` class object is to be used for the **RobotiumTestRunner** (**RTR**).
    The RTR has a Remote Control Listener and routes remote control calls and data
    to the appropriate `Solo` class methods and returns any results, as needed, to
    the Remote Controller. The on-device implementation may exploit test-result asserts
    if that is desirable.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在设备上**：当Robotium的`Solo`类对象要用于**RobotiumTestRunner**（**RTR**）时，`ActivityInstrumentationTestCase2.setup()`会被初始化。RTR有一个远程控制监听器，并将远程控制调用和数据路由到适当的`Solo`类方法，并根据需要将任何结果返回给远程控制器。在设备上的实现如果需要，可以利用测试结果断言。'
- en: '**Remote Controller**: The `RemoteSolo` API duplicates the traditional `Solo`
    API, but its implementation largely pushes the data through the Remote Control
    to the RTR, and then receives results from the Remote Controller. The Remote Control
    implementation may exploit any number of options for asserting, handling, or otherwise
    reporting or tracking the test results for each call.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程控制器**：`RemoteSolo` API复制了传统的`Solo` API，但它的实现主要是通过远程控制将数据推送到RTR，然后从远程控制器接收结果。远程控制的实现可以利用多种选项来断言、处理或以其他方式报告或跟踪每次调用的测试结果。'
- en: As you can see, the Remote-Control side only requires a `RemoteSolo` API without
    any specific JUnit context. It can be wrapped in a JUnit context if the tester
    desires it, but it is not necessary to be in a JUnit context.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，远程控制端只要求有一个`RemoteSolo` API，不需要任何特定的JUnit上下文。如果测试人员希望这样做，它可以被包装在JUnit上下文中，但并不需要在JUnit上下文中。
- en: 'The sample code and installation of Robotium Remote Control can be accessed
    in the following link:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Robotium远程控制的示例代码和安装方法链接：
- en: '[http://code.google.com/p/robotium/wiki/RemoteControl](http://code.google.com/p/robotium/wiki/RemoteControl)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.google.com/p/robotium/wiki/RemoteControl](http://code.google.com/p/robotium/wiki/RemoteControl)'
- en: Summary
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you learnt about the SAFS framework and its usage in Robotium
    to implement Robotium Remote Control. In the next chapter, you will be introduced
    to the Robotium utilities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了SAFS框架及其在Robotium中的使用，以实现Robotium远程控制。在下一章中，你将了解到Robotium实用工具。
