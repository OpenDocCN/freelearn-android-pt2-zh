- en: Chapter 12. Social Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十二章 社交模式
- en: So far in this book, we have covered many of the aspects of mobile app development.
    However, even the best designed and most useful application can benefit enormously
    from employing social media and other web content.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中我们已经涵盖了移动应用开发的许多方面。然而，即使设计得最好和最有用的应用也可以通过采用社交媒体和其他网页内容获得巨大的好处。
- en: The sandwich builder app we covered in earlier chapters is a good example of
    an app that could have its circulation boosted by generating Facebook likes and
    tweets, and these and other social media all provide technologies to incorporate
    such features directly into our app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面章节中介绍的快餐制作应用是一个很好的例子，这个应用可以通过生成 Facebook 点赞和推文来提升其知名度，而这些以及其他社交媒体都提供了直接将这些功能整合到我们应用中的技术。
- en: As well as incorporating existing social media platforms into our apps, we can
    embed any web content we like right into an activity with the **WebView** class.
    This extension of the view class can be used to add a single web page to an app
    or even build a complete web application. The WebView class is extremely useful
    when we have products or data that need regular updating, as this can be achieved
    without having to recode and release updates.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将现有的社交媒体平台整合到我们的应用中，我们还可以使用 **WebView** 类将任何喜欢的网页内容直接嵌入到活动中。这个视图类的扩展可以用来向应用添加单个网页，甚至构建完整的网页应用。当我们的产品或数据需要定期更新时，WebView
    类非常有用，因为这样可以实现，无需重新编码和发布更新。
- en: We will start this chapter by taking a look at the WebView class and see how
    we can incorporate JavaScript to give pages functionality; and then we'll explore
    some of the social media SDKs that allow us to incorporate many of their features,
    such as sharing and posting and liking.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从查看 WebView 类开始本章，并了解如何引入 JavaScript 以赋予页面功能；然后，我们将探索一些社交媒体 SDK，它们允许我们整合许多功能，如分享、发布和点赞。
- en: 'In this chapter, you will learn how to do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何执行以下操作：
- en: Open a web page in a WebView
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 WebView 中打开网页
- en: Open a web page in a browser
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中打开网页
- en: Enable and use JavaScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用和使用 JavaScript
- en: Use a JavaScriptInterface to bind script with native code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JavaScriptInterface 将脚本与原生代码绑定
- en: Write efficient HTML for web apps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网页应用编写高效的 HTML
- en: Create a Facebook app
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Facebook 应用
- en: Add a LikeView button
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个 LikeView 按钮
- en: Create a Facebook sharing interface
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Facebook 分享界面
- en: Integrating Twitter
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 Twitter
- en: Sending tweets
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送推文
- en: Adding web pages
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加网页
- en: 'Including a single web page in an activity or fragment using the WebView class
    is almost as simple as adding any other kind of view. There are three easy steps,
    as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 WebView 类在活动或片段中包含单个网页几乎和添加其他类型的视图一样简单。以下是三个简单步骤：
- en: 'Add the following permission to the manifest:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在清单中添加以下权限：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `WebView` itself looks like this:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`WebView` 本身看起来像这样：'
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, the Java for adding page is as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加页面的 Java 代码如下：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That's all there is to it, although you would probably want remove or reduce
    the default 16dp margins for most pages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部内容，尽管你可能想要移除或减少大多数页面默认的16dp边距。
- en: '![Adding web pages](img/image_12_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![添加网页](img/image_12_001.jpg)'
- en: This system is ideal for when dealing with pages that have been specifically
    designed for our app. If want to send our user to any other web page, then it
    is considered better practice to use a link, so that the user can open it with
    their chosen browser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理专门为我们的应用设计的页面时，这个系统非常理想。如果我们想将用户发送到任何其他网页，那么使用链接被认为是更好的做法，这样用户就可以使用他们选择的浏览器打开它。
- en: Including a link
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含一个链接
- en: 'To do this, any clickable view can act as the link, and the click listener
    can then respond like so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，任何可点击的视图都可以作为链接，然后点击监听器可以像这样响应：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that the correct use of web views is to use pages that are specifically
    designed to be an integral part of our app. Although the user needs to know that
    they are online (as charges may apply) our web views should look and behave like
    the rest of the app. It is perfectly possible to have more than one web view on
    a screen and to mix them with other widgets and views, and if we are working on
    an app that stores user details, this is often more easily managed using web tools
    rather than the Android APIs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，正确使用 WebView 是将专门设计为应用一部分的页面融入进来。尽管用户需要知道他们处于在线状态（可能产生费用），但我们的 WebView
    应该看起来和表现得像应用的其他部分一样。在屏幕上可以有多个 WebView，并且可以与其他小部件和视图混合使用。如果我们正在开发一个存储用户详细信息的应用，通常使用网页工具来管理会比使用
    Android API 更容易。
- en: The WebView class comes with a comprehensive array of settings that can be used
    to control a lot of properties, such as zoom functionality, image loading, and
    display settings.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: WebView类附带了一系列全面的设置，可以用来控制许多属性，比如缩放功能、图片加载和显示设置。
- en: Configuring WebSettings and JavaScript
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置WebSettings和JavaScript
- en: Although we can design our web views to look like other app components, they
    do of course posses a large number of web-specific properties and can, as web
    elements, be navigated as one would in a browser. These and other settings are
    managed elegantly by the **WebSettings** class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以设计网页视图，使其看起来像其他应用程序组件，但它们当然拥有许多与网页相关的属性，并且可以作为网页元素，像在浏览器中一样进行导航。这些和其他设置都由**WebSettings**类优雅地管理。
- en: 'This class consists largely of a long series of setters and getters. The entire
    collection can be initialized like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类主要由一系列设置器和获取器组成。整个集合可以这样初始化：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can now use this object to query the sate of our web views and to configure
    them to our wishes. For example, JavaScript is disabled by default but can be
    changed easily:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用这个对象来查询网页视图的状态，并将它们配置为我们所希望的样子。例如，默认情况下禁用JavaScript，但可以轻松更改：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is a large number of such methods, all of which are listed in the documentation:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多这样的方法，所有这些都在文档中列出：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These settings are not the only way we can take control over our web view,
    and it has some very useful methods of its own, most of which are listed here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置并不是我们控制网页视图的唯一方式，它还有一些非常有用的自有方法，其中大部分在这里列出：
- en: '`getUrl()` - Returns the web view''s current URL'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUrl()` - 返回网页视图当前的URL'
- en: '`getTitle()` - Returns the page''s title if specified in the HTML'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTitle()` - 如果HTML中指定了页面标题，则返回页面标题。'
- en: '`getAllAsync(String)` - Simple search function, highlighting occurrences of
    the given string'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAllAsync(String)` - 简单的搜索功能，突出显示给定字符串的出现'
- en: '`clearHistory()` - Empties the current history cache'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clearHistory()` - 清空当前历史缓存'
- en: '`destroy()` - Closes and empties the web view'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`destroy()` - 关闭并清空网页视图'
- en: '`canGoForward()` and `canGoBack()` - Enables the local history stack'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canGoForward()`和`canGoBack()` - 启用本地历史堆栈'
- en: These methods, along with web settings, allow us to do a lot more with a web
    view than simply access changeable data. We can, with a little effort, provide
    much of the functionality of a web browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法，连同网页设置，使我们能够使用网页视图做更多的事情，而不仅仅是访问可更改的数据。只要稍加努力，我们就能提供大部分网络浏览器功能。
- en: Whether we choose to present our web views as a seamless part of our app or
    provide the user with a fuller internet based experience, we will most likely
    want to include some JavaScript in our pages. We saw earlier how to enable JavaScript,
    but this only allows us to run standalone script; what would be far better would
    be if we could call an Android method from JavaScript, and this is exactly what
    the `JavaScriptInterface` does.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是选择将网页视图作为应用程序的无缝部分呈现，还是为用户提供更全面的基于互联网的体验，我们很可能会希望在自己的页面中包含一些JavaScript。我们之前了解到如何启用JavaScript，但这仅允许我们运行独立的脚本；更好的是，如果我们能从JavaScript调用Android方法，这正是`JavaScriptInterface`所做的。
- en: 'The use of an interface like this, to manage the natural incompatibilities
    between the two languages, and is of course a classic example of the **adapter
    design pattern**. To see how this can be achieved, follow these steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种接口来管理两种语言之间的自然不兼容性，这当然是**适配器设计模式**的经典示例。要了解如何实现这一点，请按照以下步骤操作：
- en: 'Add the following fields to whichever activity you are using for the task:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下字段添加到用于任务的任何活动中：
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit the `onCreate()` method like so:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式编辑`onCreate()`方法：
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the adapter class (this can also be an inner class). The `newActivity()`
    method could be anything we chose. Here, just by way of example, it starts a new
    activity:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建适配器类（这也可能是内部类）。`newActivity()`方法可以是任何我们选择的内容。这里，仅作为示例，它启动了一个新的活动：
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All that remains is to write the JavaScript to call our native method. Any
    clickable HTML object will do here. Create the following button on your page:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的就是编写JavaScript来调用我们的原生方法。这里可以使用任何可点击的HTML对象。在您的页面上创建以下按钮：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, just define the function in your script, like so:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，只需在脚本中定义函数，如下所示：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This process is wonderfully easy to implement and makes the web view a very
    powerful component, and the ability to call our Java methods from our web pages
    means we can combine web functionality to any app without having to compromise
    mobile functionality.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程实施起来非常简单，使WebView成为一个非常强大的组件，而且能够从网页中调用我们的Java方法意味着我们可以将网页功能整合到任何应用中，而无需牺牲移动功能。
- en: Although you will require no assistance in building web pages, there are one
    or two points that need making regarding best practice.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在构建网页时你不需要任何帮助，但在最佳实践方面仍有一两点需要注意。
- en: Writing HTML for WebViews
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为WebViews编写HTML
- en: 'It is tempting to think that the design of a mobile web app would follows similar
    conventions to the design of mobile web pages, and in many ways it does, but there
    are one or two subtle differences that the following list points out:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能会认为移动网页应用的设计遵循与移动网页类似的约定，在许多方面确实如此，但以下列表指出了一两个细微的差别：
- en: 'Make sure that you are using the correct `DOCTYPE`, which in our case is this:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你使用了正确的`DOCTYPE`，在我们的情况下是这样的：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating separate CSS and script files can cause a slow connection. Keep this
    code inline, ideally inside the head or at the very end of the body. Sadly, this
    means that we have to avoid CSS and web frameworks, and features such as material
    design have to be coded manually.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建单独的CSS和脚本文件可能会导致连接变慢。请将此代码内联，理想情况下放在head中或body的最后。遗憾的是，这意味着我们必须避免使用CSS和网页框架，而且像材料设计这样的特性必须手动编码。
- en: Avoid horizontal scrolling where possible. If your app absolutely requires this
    then use tabs, or better still, a sliding navigation drawer.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能避免水平滚动。如果应用确实需要这样做，那么请使用标签页，或者更好的是，使用滑动导航抽屉。
- en: As we have seen, the WebView is a powerful component and makes sophisticated
    mobile/web hybrid apps very easy to develop. The subject is a large one and one
    could realistically devote an entire book to the subject. For now, though, it
    is enough just to understand the scope and power of this tool.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，WebView是一个强大的组件，它使得开发复杂的移动/网页混合应用变得非常简单。这个主题非常广泛，实际上可以专门用一整本书来介绍。但现在，仅仅理解这个工具的范围和力量就足够了。
- en: Using built-in web tools is just one way that we can harness the power of the
    Internet. Being able to connect to social media is probably the most efficient
    and cheapest methods of promoting a product. One of the most useful and simplest
    to set up is Facebook.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的网页工具只是我们利用互联网力量的方式之一。能够连接到社交媒体可能是推广产品最有效且成本最低的方法之一。其中最实用且最简单设置的是Facebook。
- en: Connecting with Facebook
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Facebook
- en: Not only is Facebook one of the largest social networks, it is also very nicely
    set up to assist those wishing to promote their products. The ways that this can
    work varies from providing automatic logins, customizable advertising, and the
    ability for users to share products they *like* with others.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook不仅是最大的社交网络之一，而且它的设置非常完善，能够帮助那些希望推广产品的人。这种方式可以通过提供自动登录、可定制的广告以及用户与他人分享他们*喜欢*的产品等多种方式实现。
- en: 'To incorporate Facebook features into our Android applications, we will need
    the **Facebook SDK for Android**, and to make the most of this we will also need
    a Facebook App ID, which will require creating a simple app on Facebook:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Facebook功能整合到我们的Android应用中，我们需要**Android的Facebook SDK**，为了充分利用它，我们还需要一个Facebook应用ID，这需要我们在Facebook上创建一个简单的应用：
- en: '![Connecting with Facebook](img/image_12_002.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![连接到Facebook](img/image_12_002.jpg)'
- en: Adding the Facebook SDK
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Facebook SDK
- en: 'The first step in adding Facebook functionality to our apps is to download
    the Facebook SDK. This can be found here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将Facebook功能添加到我们的应用中的第一步是下载Facebook SDK。可以在以下位置找到：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The SDK is a powerful suite of tools, including views, classes, and interfaces
    that Android developers will be very familiar with. The Facebook SDK can be thought
    of as a useful extension of our native SDK.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SDK是一套强大的工具，包括视图、类和接口，Android开发者将会非常熟悉。Facebook SDK可以被视为我们本地SDK的有用扩展。
- en: 'A handy quick start guide can be found on the Facebook developer pages, but
    as is always the case in such situations, it is far more instructive to follow
    the process manually, as the following steps demonstrate:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook开发者页面上可以找到一个方便的快速入门指南，但像往常一样，在这种情况下，按照以下步骤手动操作会更加具有指导意义：
- en: Start a new Android Studio project with a minimum API level of 15 or higher.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用最低API级别为15或更高启动新的Android Studio项目。
- en: 'Open the modular `build.gradle` file and make the changes highlighted here:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开模块化的 `build.gradle` 文件，并做出这里强调的更改：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following permission to the manifest file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在清单文件中添加以下权限：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then import the following libraries to your main activity or application class:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下库导入到您的主活动或应用类中：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, initialize the SDK from the `onCreate()` method of your launch activity,
    like so:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从启动活动的 `onCreate()` 方法中初始化 SDK，如下所示：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is not all that we need to progress, but before we can go any further,
    we will need a Facebook App ID, which we can only acquire by creating an app on
    Facebook.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是我们前进所需的全部，但在我们继续之前，我们需要一个 Facebook App ID，我们只能通过在 Facebook 上创建应用来获得。
- en: Obtaining a Facebook App ID
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 Facebook App ID
- en: As you will have seen, Facebook apps can be very sophisticated, and their functions
    are limited only by their creator's imagination and coding prowess. They can,
    and often are, nothing more than a simple page, and when our emphasis is on an
    Android app, we need only the simplest of Facebook apps.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Facebook 应用可以非常复杂，它们的功能仅受创建者的想象力和编程能力的限制。它们可以，而且经常是，仅仅是一个简单的页面，当我们的重点是
    Android 应用时，我们只需要最简单的 Facebook 应用即可。
- en: 'For now, use the Facebook quick start process, which can be found here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，使用 Facebook 快速入门流程，可以在以下位置找到：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Obtaining a Facebook App ID](img/image_12_003.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![获取 Facebook App ID](img/image_12_003.jpg)'
- en: 'Once you click on **Create App ID**, you will be taken to your developer dashboard.
    The App ID can be found in the top-left of the window. The following two steps
    demonstrate how to complete the process we started earlier:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击 **创建 App ID**，您将被带到开发者仪表盘。App ID 可以在窗口的左上角找到。以下两个步骤演示了如何完成我们之前开始的过程：
- en: 'Open the `res/values/strings.xml` file and add the following value:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `res/values/strings.xml` 文件，并添加以下值：
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now add the following meta-data to the application tag of the manifest:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在清单文件的 application 标签中添加以下元数据：
- en: '[PRE20]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This completes the process of connecting our Android app to its Facebook counterpart,
    but we need to compliment this connection by providing information about our mobile
    app to our Facebook app.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了将我们的 Android 应用连接到其 Facebook 对应应用的过程，但我们需要通过向 Facebook 应用提供有关我们的移动应用的信息来完善这个连接。
- en: To do this, we will need to return to our Facebook developer dashboard and select
    **Developer Settings** from your profile (top right) drop-down and then the **Sample
    App** tab. This will request you enter your package name, launching activity,
    and **hash key**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要回到 Facebook 开发者仪表盘，从您的个人资料（右上角）下拉菜单中选择 **开发者设置**，然后点击 **示例应用** 选项卡。这将要求您输入您的包名、启动活动以及
    **哈希密钥**。
- en: 'If you are developing an app you intend to publish or use the same hash key
    for all your projects, you will know it, or have it to hand. Otherwise, the following
    code will find it for you:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发打算发布的应用，或者为所有项目使用同一个哈希密钥，您会知道它，或者能马上拿到它。否则，以下代码会为您找到它：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you enter this code directly, Studio will offer you a selection of which
    libraries to import via the quick-fix facility. The correct choices are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您直接输入这段代码，Studio 会通过快速修复功能提供一系列库供您选择导入。正确的选择如下：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There is more to it than one might imagine, but our app is now connected to
    Facebook, and we can take advantage of all the promotional opportunities. One
    of the most important of these is the Facebook Like button.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这其中的内容比想象中要多，但现在我们的应用已经连接到了 Facebook，我们可以利用所有的推广机会。其中最重要的之一就是 Facebook 的点赞按钮。
- en: Adding a LikeView
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 LikeView
- en: 'As you would imagine, the Facebook SDK comes equipped with the traditional
    *like* button. This is provided as a view and can be added like any other view:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以想象，Facebook SDK 配备了传统的 *点赞* 按钮。这个按钮作为一个视图提供，可以像添加其他任何视图一样添加：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Adding a LikeView](img/image_12_004.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![添加 LikeView](img/image_12_004.jpg)'
- en: 'As with other views and widgets, we can then modify this view from within a
    Java activity. There are quite a lot of things we can do with this and other Facebook
    views, and Facebook documents these thoroughly. The LikeView documentation, for
    example, can be found here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他视图和小部件一样，我们可以在 Java 活动内部修改这个视图。我们可以用这个和其他 Facebook 视图做很多事情，Facebook 对此有详尽的文档。例如，LikeView
    的文档可以在这里找到：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For now, we can just consider what it is the user is liking. This achieved
    with the `setObjectId()` method, which takes a string argument that can be either
    your app ID or a URL, like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以考虑用户点赞的是什么。这是通过 `setObjectId()` 方法实现的，它接受一个字符串参数，可以是您的应用 ID 或者一个 URL，如下所示：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are one or two differences between in-app Like views and those found on
    the Web. Unlike web likes, the Android like view will not inform the user how
    many other users have also clicked like and on a device that does not have Facebook
    installed, our like view will not work at all. These limitations of the Android
    LikeView are easily countered by using a WebView to contain the like view, which
    will then act like it would on the web.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应用内点赞视图与网页上的点赞视图之间存在一两个差异。与网页点赞不同，Android点赞视图不会告知用户还有多少用户点击了赞，在没有安装Facebook的设备上，我们的点赞视图将完全无法工作。通过使用WebView来包含点赞视图，可以轻松解决Android
    LikeView的这些限制，这样它就会像在网页上一样工作。
- en: The LikeView gives us and users the opportunity to see how popular a particular
    item is, but to really harness the power of this social platform, we want users
    to promote us by the modern version of word-of-mouth, that is, by *sharing* our
    products with their friends.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: LikeView为我们和用户提供了查看特定项目受欢迎程度的机会，但要真正利用这个社交平台的力量，我们希望用户通过现代口碑营销方式，即通过*分享*我们的产品给他们的朋友来推广我们。
- en: Content builders
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容构建器
- en: Having a large number of likes is a great way to drive traffic your way, but
    there is an economy of scale at work here that favors apps with very large numbers
    of downloads. Apps do not have to be huge to be successful, especially if they
    are providing a personal or local service, such as delivering custom-made sandwiches.
    In these cases, a label stating that only 12 people *like* something is not much
    of a recommendation. However, if those same people share how great their sandwich
    is with their friends, then we have a very powerful advertising tool at our disposal.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有大量赞是吸引流量的好方法，但这里有一个规模经济在起作用，它有利于下载量非常大的应用。应用不必做得很大才能成功，特别是如果它们提供个人或本地服务，比如定制三明治。在这些情况下，一个标签显示只有12个人*喜欢*某物并不是一个很好的推荐。然而，如果这些人向他们的朋友分享他们的三明治有多棒，那么我们就拥有了一个非常强大的广告工具。
- en: 'One of the main things that has made Facebook such a successful platform is
    its understanding that human beings are more interested and influenced by their
    friends than nameless strangers, and for small to medium enterprises, this can
    be invaluable. At its simplest we can simply add a share button, just as we did
    the like button, and this will open the share dialog. The **ShareButton** is as
    easy to add as the LikeView, as can be seen here:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook成为一个如此成功的平台的主要因素之一是它理解人类对自己的朋友比对无名陌生人更感兴趣和受影响，对于中小型企业来说，这可能是无价的。最简单的方式，我们可以像添加点赞按钮一样添加一个分享按钮，这将打开分享对话框。**ShareButton**的添加就像LikeView一样简单，如下所示：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will also need to set up a content provider in our manifest. The following
    code should be inserted into the root node:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在清单文件中设置一个内容提供者。以下代码应插入到根节点中：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Unlike the like view, with sharing we have more choice over the content type
    that we share and we can choose between sharing links, images, videos, and even
    multimedia.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与点赞视图不同，在分享时我们可以更多地选择要分享的内容类型，我们可以选择分享链接、图片、视频甚至多媒体。
- en: The Facebook SDK provides a class for each content type and a builder for combining
    more than one item into a single shareable object.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook SDK为每种内容类型提供了一个类，以及一个构建器，用于将多个项目组合成一个可分享的对象。
- en: 'When sharing photos or images, the `SharePhotoContent` class uses the Bitmap
    object, which is a more sophisticated and parcelable image format than the drawables
    we have been using so far. Although there are many ways to create a bitmap, including
    dynamically from code, it is also relatively simple to convert any of our drawables
    into a bitmap, as demonstrated in this snippet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在分享照片或图片时，`SharePhotoContent`类使用位图对象，这是一种比我们迄今为止使用的可绘制资源更复杂且可序列化的图像格式。尽管有许多方法可以创建位图，包括从代码动态创建，但将我们的任何可绘制资源转换为位图也相对简单，如下面的代码段所示：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This can then be defined as shareable content in these two simple steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以通过以下两个简单步骤将其定义为可分享内容：
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `ShareVideo` and `ShareVideoContent` classes work in an almost identical
    fashion and use the file''s URI as its source. If you have not worked with video
    files and URIs before, the simplest way to include them is explained in these
    short steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`ShareVideo`和`ShareVideoContent`类的工作方式几乎相同，并使用文件的URI作为其来源。如果你之前没有处理过视频文件和URI，以下简要步骤将介绍包含它们的最简单方法：'
- en: If you have not done so already, create a folder called `raw` directly inside
    your `res` directory.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，直接在`res`目录内创建一个名为`raw`的文件夹。
- en: Place your video(s) in this folder.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的视频放在这个文件夹里。
- en: Make sure the filename contains no spaces or capital letters and is an accepted
    format, such as `mp4`, `wmv`, or `3gp`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保文件名不包含空格或大写字母，并且是接受的格式，如`mp4`、`wmv`或`3gp`。
- en: 'The following code can then be used to extract the video''s URI:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的代码可以用来提取视频的URI：
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This URI can now be used to define our shared video content, like so:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以使用这个URI来定义我们的共享视频内容，如下所示：
- en: '[PRE31]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'These techniques are very handy for sharing single items, and even several
    items of the same kind, but there are of course times when we would like to mix
    content, and this can be achieved with the more generic Facebook SDK `ShareContent`
    class. The following code demonstrates how this can be done:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术非常适合分享单个项目，甚至是同一类的多个项目，但当然有时候我们希望混合内容，这可以通过更通用的Facebook SDK `ShareContent`
    类实现。以下代码演示了如何做到这一点：
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: These simple classes provide a flexible way to allow users to share content
    with their friends. There is also a send button that allows users to share our
    content privately with individuals or groups, and although useful to the user,
    this function serves little commercial purpose.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些简单的类提供了一种灵活的方式，允许用户与朋友们分享内容。还有一个发送按钮，允许用户将我们的内容私密地分享给个人或群组，尽管这对用户很有用，但这个功能几乎没有商业价值。
- en: 'A valuable tool when testing shared content is provided by the Facebook Sharing
    Debugger, which can be found here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 测试共享内容时，Facebook共享调试器提供了一个非常有价值的工具，可以在以下链接找到：
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is particularly useful, as there is no other simple way to see how our
    shared content is actually viewed by others.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这特别有用，因为没有其他简单的方法可以看到我们的共享内容实际上是如何被他人查看的。
- en: '![Content builders](img/image_12_005.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![内容构建器](img/image_12_005.jpg)'
- en: Facebook is not only one of the most popular social networks; it is also has
    a very well-thought-out SDK and is probably the most developer-friendly social
    network. This, of course, is no reason to ignore the others, chief among which
    is Twitter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook不仅是最受欢迎的社交网络之一，还拥有一个非常周到的SDK，可能是对开发者最友好的社交网络。当然，这并不是忽略其他社交平台的原因，其中Twitter最为重要。
- en: Integrating Twitter
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整合Twitter
- en: Twitter provides a very different social platform to Facebook, and people use
    it very differently as well. It is, however, another powerful tool in our arsenal,
    and like Facebook, it offers unparalleled promotional opportunities.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter提供了一个与Facebook截然不同的社交平台，人们使用它的方式也大不相同。然而，它也是我们武器库中的另一个强大工具，与Facebook一样，它提供了无与伦比的推广机会。
- en: Twitter employs a powerful framework integration tool called **Fabric** that
    allows developers to integrate Twitter functionality into our applications. Fabric
    can be downloaded directly into Android Studio as a plugin. Before downloading
    the plugin, it is necessary to register with Fabric. This is free and can be found
    at fabric.io.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter使用一个强大的框架集成工具，名为**Fabric**，它允许开发者将Twitter功能集成到我们的应用程序中。Fabric可以直接作为插件下载到Android
    Studio中。在下载插件之前，需要先在Fabric上注册。这是免费的，可以在fabric.io上找到。
- en: 'Once registered, open Android Studio and then select **Browse Repositories...**
    from **Settings > Plugins**:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，打开Android Studio，然后从**设置 > 插件**中选择**浏览仓库...**：
- en: '![Integrating Twitter](img/image_12_006.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![整合Twitter](img/image_12_006.jpg)'
- en: Once installed, Fabric has walk-through tutorial system and requires no further
    instruction. However it is not necessary to use this framework at all if all your
    app needs to do is post single tweets as this can be achieved with the vanilla
    SDK.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，Fabric有一个逐步教程系统，不需要进一步指导。然而，如果应用程序只需要发布单个推文，完全可以不使用这个框架，因为这可以通过普通的SDK实现。
- en: Sending tweets
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送推文
- en: 'Fabric is a sophisticated tool and, thanks to its inbuilt tuition, has a fast
    learning curve, but it still takes time to master and provides a lot of functionality
    that most apps won''t need. If all you want to do is have your app post a single
    tweet, it can be done without Fabric, like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric是一个复杂的工具，多亏了内置的教学功能，它的学习曲线很快，但仍然需要时间来掌握，并且提供了大多数应用程序不需要的许多功能。如果你只想让应用程序发布一条推文，可以不使用Fabric，像这样：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Even if all we ever do with Twitter is send tweets, this is still a very useful
    social function, and if we choose to take advantage of Fabric, we can build apps
    that rely heavily on Twitter, posting live streams and performing complex traffic
    analysis. As with Facebook, it is also always a good idea to think about what
    can be achieved with a web view, and building partial web apps into our mobile
    one is often the simplest solution.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们对Twitter的所有操作仅限于发送推文，这仍然是一个非常实用的社交功能。如果我们选择利用Fabric，我们可以构建严重依赖Twitter的应用程序，发布实时流并进行复杂的流量分析。与Facebook一样，考虑使用WebView可以实现的功能总是一个好主意，将部分网页应用嵌入我们的移动应用通常是最简单的解决方案。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Integrating social media into our mobile apps is a powerful tool and can make
    all the difference to the success of an app. In this chapter, we have seen how
    Facebook and Twitter provide software tools to facilitate this, and of course,
    other social media, such as Instagram and WhatsApp, provide similar developer
    tools.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将社交媒体集成到我们的移动应用中是一项强大的工具，它可以使应用程序的成功与否产生巨大差异。在本章中，我们看到了Facebook和Twitter提供了哪些软件开发工具来促进这一点，当然，其他社交媒体，如Instagram和WhatsApp，也提供了类似的开发工具。
- en: 'Social media is an ever-changing world, and new platforms as well as development
    tools are appearing all the time, and there is no reason to believe that Twitter
    and even Facebook might one day go the way of MySpace. This is yet another reason
    to consider using WebViews where possible: creating simple web apps within our
    main apps allows us a higher degree of flexibility.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体是一个不断变化的世界，新的平台和开发工具层出不穷，没有理由相信Twitter甚至Facebook有一天不会步MySpace的后尘。这也是我们尽可能考虑使用WebView的另一个原因：在主应用内创建简单的网页应用可以让我们拥有更高的灵活性。
- en: This brings us almost to the end of our journey, and in the next chapter we
    will look at what is generally the final stage of development, publication. However,
    this is also the point where we have to consider potential income, particularly
    advertising and in-app purchasing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎是我们旅程的终点，在下一章我们将要了解通常开发过程的最后阶段——发布。然而，这也是我们必须考虑潜在收入的时候，尤其是广告和应用程序内购买。
