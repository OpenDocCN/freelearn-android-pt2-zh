- en: Chapter 9. Testing for Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章. 安全测试
- en: This is undoubtedly the most important chapter of the book. As developers, we
    all try our best to write beautiful, usable, and secure code. We have all experienced
    the thrill of a great idea and the rush to see it working. We also have crazy
    schedules and deadlines. So bugs happen and testing for bugs is a natural part
    of any coding lifecycle.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是本书最重要的章节。作为开发者，我们都在努力编写优美、可用且安全的代码。我们都体验过伟大想法的兴奋和看到它实现的冲动。我们的工作安排和截止日期也常常很疯狂。因此，出现bug是自然的，而bug测试是任何编码生命周期的一部分。
- en: Most of the test cases today focus on usability, functionality, and stress testing.
    In most cases, test engineers are at a loss when it comes to testing for security.
    When compliance and security is overlooked, sometimes the application needs to
    be redesigned or implemented again. Take the case of creating a message digest
    for integrity purposes. A developer may decide to go with SHA-1 that creates a
    digest of 160 bits. On the server side, the database is designed to accommodate
    160 bit data. A non-ethical hacker breaks into the application. When the security
    review is performed, it is decided that SHA-1 was not strong enough for the use
    case and needs to be updated to SHA-256\. Since the database was designed to accommodate
    only 160 bits, it becomes a challenge to make a quick fix on the client side,
    as the entire design has to be changed. Things become serious now. This is such
    a waste of time specially considering the fact that a mobile ecosystem is fast
    paced and transient.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目前大多数测试用例关注于可用性、功能性和压力测试。在大多数情况下，当涉及到安全测试时，测试工程师往往不知所措。当合规性和安全被忽视时，有时应用程序需要重新设计或实现。以创建消息摘要为例，用于确保完整性。开发者可能会选择SHA-1，它产生一个160位的摘要。在服务器端，数据库被设计为容纳160位数据。一个非道德的黑客入侵了应用程序。在进行安全审查时，决定SHA-1对于该用例来说不够强大，需要更新到SHA-256。由于数据库仅被设计为容纳160位，因此在客户端快速修复变得具有挑战性，因为整个设计必须改变。事情现在变得严重了。尤其是在考虑到移动生态系统快速发展和变化的情况下，这真是浪费时间。
- en: This chapter aims to introduce the concept of security-focused testing. The
    chapter begins with an overview of testing. If you are already familiar with testing,
    you may easily skip this section. The next section will talk about security testing
    and ways that you can test your applications for security, namely security review,
    manual testing, and automated testing with tools. The following sections discuss
    some sample security test cases that can act as a baseline for writing tests.
    The chapter closes with a discussion of tools and resources that developers and
    test engineers can use for development of test cases and for testing for security.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节旨在介绍以安全为重点的测试概念。章节首先概述了测试。如果你已经熟悉测试，可以轻松跳过这一部分。下一节将讨论安全测试以及你可以如何测试应用程序的安全性，即安全审查、手动测试和利用工具的自动化测试。接下来的部分讨论一些可以作为编写测试基线的安全测试用例示例。章节最后讨论了开发者和测试工程师在开发测试用例和进行安全测试时可以使用的一些工具和资源。
- en: Testing overview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试概述
- en: With a wide array of devices of varying capabilities, form factors, and versions,
    Android is one of the most challenging operating systems to test. Getting the
    basic functionality and user experience itself is a challenge. The following figure
    illustrates tests that are usually performed in the context of an Android application
    development. As Bruce Schneier, a great cryptographer of our times, aptly states,
    "Security is not a product but a process", so you will notice that I have added
    security testing to the entire lifecycle of application testing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于设备能力、外形和版本的不同，Android是最具挑战性的操作系统之一进行测试。即使是获取基本的功能和用户体验本身就是一个挑战。下图说明了通常在Android应用程序开发背景下执行的测试。正如我们这个时代伟大的密码学家Bruce
    Schneier恰当指出的那样，“安全不是一个产品，而是一个过程”，因此你会注意到，我已经将安全测试添加到应用程序测试的整个生命周期中。
- en: '![Testing overview](img/5603OT_09_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![测试概述](img/5603OT_09_01.jpg)'
- en: Let us spend a little time on what each category, unit testing, integration
    testing, and system testing means from an Android perspective.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间了解从Android的角度看，单元测试、集成测试和系统测试各自的含义。
- en: '**Unit testing**: In most cases, developers who code the module develop unit
    tests. Developers should write and unit test their modules before handing off
    their code to test engineers. The Android SDK comes bundled with instrumentation
    APIs for unit test. This framework is implemented on JUnit, a popular framework
    for Java unit tests. Unit tests can be easily automated. These tests cover boundary
    tests, input validation tests, and connections with the backend.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：在大多数情况下，编写模块的开发人员也会开发单元测试。开发人员在将代码交给测试工程师之前，应该编写并单元测试他们的模块。Android
    SDK附带了用于单元测试的仪器化API。这个框架是基于JUnit实现的，JUnit是Java单元测试中一个流行的框架。单元测试可以很容易地自动化。这些测试涵盖了边界测试、输入验证测试以及与后端的连接测试。'
- en: '**Integration testing**: Once unit tests are done and different components
    are being integrated, integration tests are performed to make sure that different
    components work together. These are tests that are performed when components are
    bundled together. Let us consider two teams working separately, one on the login
    module and the other on the search result page. Once the development of modules
    is done and they are integrated with each other, tests should be performed which
    check the two modules together. These days most development environments use continuous
    integration that perform sanity tests that the two modules compile together.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：单元测试完成后，不同的组件开始集成时，进行集成测试以确保不同的组件能够协同工作。这些测试是在组件捆绑在一起时执行的。设想有两个团队分别独立工作，一个负责登录模块，另一个负责搜索结果页面。一旦模块开发完成并且它们被集成在一起，就应该执行测试，检查这两个模块的组合。如今，大多数开发环境都使用持续集成来执行一些基本的健全性测试，以确保这两个模块能够一起编译。'
- en: '**System testing**: These are tests that test the whole application and how
    the application interacts with the Android platform. Some examples of system testing
    will include testing how search functions on different platforms and how differences
    in Android-based devices affect the display of search results.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统测试**：这些测试针对整个应用程序以及应用程序与Android平台的交互进行测试。系统测试的一些示例包括在不同平台上测试搜索功能以及基于Android的设备差异如何影响搜索结果的显示。'
- en: Security tests should be performed at each stage of testing. For example, at
    the unit test level, developers should test for inconsistent and incorrect input
    values, buffer overflows, and access level of users.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安全测试应该在测试的每个阶段执行。例如，在单元测试级别，开发人员应该测试不一致和错误的输入值、缓冲区溢出以及用户的访问级别。
- en: At the integration level, engineers can test for secure data transit between
    two modules and behavior on passing erroneous data.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在集成级别，工程师可以测试两个模块之间安全数据传输以及传递错误数据时的行为。
- en: In the system testing state, engineers can test how their application looks
    and behaves on different Android platforms. In the case of Android, this is an
    especially important testing phase due to variations in the Android device and
    stack capabilities of different vendors and carriers.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在系统测试阶段，工程师可以测试他们的应用程序在不同Android平台上的外观和行为。在Android的情况下，由于不同厂商和运营商的Android设备和堆栈能力存在差异，这一阶段尤为重要。
- en: Any of the previously mentioned test suites in the flow usually contain a mix
    of different kinds of tests. These are illustrated in the following figure. Notice
    that I have again added security tests in the mix.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 流程中提到的任何测试套件通常都包含不同类型的测试混合。这些在以下图中有所说明。请注意，我再次在混合中加入了安全测试。
- en: '![Testing overview](img/5603OT_09_02.jpg)'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![测试概览](img/5603OT_09_02.jpg)'
- en: '**Functional tests**: These tests check if an application performs with expected
    behavior. For example, a functional test for the login function will test the
    case when a user enters a username and password and presses *Enter*; the user
    is either logged into the system if the credentials are valid or is shown an error.
    You may like to validate that correct error messages are generated with different
    error cases.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能测试**：这类测试检查应用程序是否表现出预期行为。例如，登录功能的功 能测试将检验用户输入用户名和密码并按下*回车*的情况；如果凭据有效，用户将能够登录系统，否则将显示错误。你可能还想验证在不同错误情况下是否生成了正确的错误消息。'
- en: '**Localization tests**: Most of the applications today are global and are available
    in different countries. To support different locales, an application has to be
    localized and internationalized. Localized refers to language translation and
    internationalization refers to adapting the application according to the norms
    of a particular locale. Consider a case of adapting a view that accepts addresses
    in Japanese (that is, you want to support Japan as a country). Localization will
    translate the word Address Line 1, Address Line 2, City, State, Zip, and Country
    into their Japanese equivalent. However, in Japan the addresses system is different
    from the Roman system and the view that accepts address will have to be redesigned
    and some labels might have to be shuffled around.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地化测试**：如今，大多数应用程序都是全球性的，在不同的国家可用。为了支持不同的地区，应用程序必须进行本地化和国际化。本地化指的是语言翻译，而国际化是指根据特定地区的规范调整应用程序。例如，考虑一个适应接受日语地址的视图的情况（即你想支持日本作为国家）。本地化会将地址行1、地址行2、城市、州、邮编和国家翻译成日语对应的内容。然而，在日本，地址系统与罗马系统不同，接受地址的视图将不得不重新设计，一些标签可能需要重新排列。'
- en: Android has a very user friendly framework to store strings and localized views
    that developers should take advantage of. It is better to consult with localization
    experts when opening up an application in new markets.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安卓有一个非常用户友好的框架，用于存储字符串和本地化视图，开发者应该充分利用这一点。在新的市场推出应用程序时，最好咨询本地化专家的意见。
- en: '**Usability tests**: Also called UI tests, these tests focus on the look and
    feel of the user interface and make sure that it is easy for a user to enter input,
    read information on screen, and change the esthetics and general flow of an application.
    Usability is very important in a screen space constrained device and devices of
    different screen sizes.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性测试**：也称为UI测试，这些测试关注用户界面的外观和感觉，确保用户能够轻松输入、在屏幕上阅读信息，以及改变应用程序的美观和总体流程。在屏幕空间受限的设备和不同屏幕尺寸的设备上，可用性非常重要。'
- en: '**Hardware compatibility tests**: This suite of tests will be targeted at testing
    hardware features used in the application on different devices. For example, if
    an application uses the device camera, tests should be performed to check if the
    code works properly on different device cameras with different focus capabilities.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件兼容性测试**：这一系列测试将针对在不同设备上测试应用程序中使用的硬件特性。例如，如果一个应用程序使用了设备相机，就应该进行测试，以检查代码是否在不同设备相机和不同的对焦能力下正常工作。'
- en: '**Regression tests**: These are usually automated tests that are run after
    every change in the application to ensure that the application still works as
    expected. For example, in the bookstore application, you may identify key pieces
    of functionality as login, logout, searching for books, and adding a book to a
    wish list. Whenever a new feature is added or an existing feature is updated,
    these sanity tests are performed to make sure that nothing broke.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试**：这些通常是自动化测试，在应用程序每次更改后运行，以确保应用程序仍然按预期工作。例如，在书店应用程序中，您可能会确定关键功能，如登录、登出、搜索书籍以及将书籍添加到愿望清单。每当添加新功能或更新现有功能时，都会执行这些健全性测试，以确保没有破坏任何功能。'
- en: Security tests are discussed in detail in the following sections.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节将详细讨论安全测试。
- en: As you may have guessed already, most of these test cases work in tandem with
    each other. For example, to test the address page for a new country, both localization
    and UI tests have to go hand in hand.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所料，这些测试案例中的大多数是相互协作的。例如，要测试新国家的地址页面，本地化和UI测试必须同时进行。
- en: Security testing basics
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全测试基础
- en: This chapter is an overview of security testing. We discuss the pillars of security
    around which security tests can be developed. The second section discusses different
    kinds of security testing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节概述了安全测试。我们讨论了可以围绕其开发安全测试的安全支柱。第二部分讨论了不同类型的安全测试。
- en: Security tenets
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全原则
- en: Any kind of application security testing should follow the six tenets of security,
    namely authentication, authorization, availability, confidentiality, integrity,
    and non-repudiation. We have covered most of these concepts and how to implement
    them in [Chapter 6](ch06.html "Chapter 6. Your Tools – Crypto APIs"), *Your Tools
    – Crypto APIs*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型的应用程序安全测试都应遵循安全的六个原则，即认证、授权、可用性、保密性、完整性和不可否认性。我们在[第6章](ch06.html "第6章. 您的工具
    – 加密API")，*您的工具 – 加密API*中涵盖了这些概念的大部分内容以及如何实现它们。
- en: '![Security tenets](img/5603OT_09_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![安全原则](img/5603OT_09_03.jpg)'
- en: '*Authentication* is the measure of identifying the user. You can use authentication
    APIs from companies such as Facebook, Twitter, LinkedIn, and PayPal. The main
    protocols used are OAuth and OpenIDConnect. These techniques offload the task
    of authentication from the application. It is a win-win condition for both application
    developers and users. Application developers do not have to implement their own
    schemes and can use built-in mechanisms for authentication. Users do not need
    to share personal information with applications they do not trust. It is useful
    for companies that develop such schemes as it drives traffic to their websites.
    Most of these techniques are based on providing a user with an authentication
    token.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*认证*是识别用户的措施。你可以使用来自Facebook、Twitter、LinkedIn和PayPal等公司的认证API。主要使用的协议是OAuth和OpenID
    Connect。这些技术将认证任务从应用程序中卸载。这对于应用程序开发者和用户来说都是一个双赢的局面。应用程序开发者不需要实现自己的方案，可以使用内置的认证机制。用户不需要与不信任的应用程序共享个人信息。这对于开发此类方案的公司来说非常有用，因为它可以引导流量到他们的网站。这些技术大多数基于为用户提供一个认证令牌。'
- en: '[Chapter 10](ch10.html "Chapter 10. Looking into the Future"), *Looking into
    the Future*, discusses some new advances in authentication.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章. 展望未来")，*展望未来*，讨论了认证方面的一些新进展。'
- en: Authorization refers to access control—determining whether the user has appropriate
    rights to access a resource. In case of Android, this can be achieved by protecting
    application components with permissions and checking caller identity whenever
    possible.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 授权是指访问控制——确定用户是否有适当的权限来访问资源。在Android的情况下，这可以通过保护应用程序组件的权限并在可能的情况下检查调用者身份来实现。
- en: '*Availability* means that data should be available to authorized users when
    needed. Using broadcasts and Intents with data can ensure this security measure.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*可用性*意味着数据应在需要时对授权用户可用。使用带有数据的广播和意图可以确保这一安全措施。'
- en: '*Confidentiality* refers to keeping data secure and only revealing it to intended
    parties. Encrypting data, using proper permissions, and conforming to the Android
    sandbox can help with this measure of security.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*保密性*是指确保数据安全，只向预期的方透露数据。对数据加密、使用适当的权限、并符合Android沙盒可以帮助实现这一安全措施。'
- en: '*Integrity* means that the data is not modified in transit or at rest. In case
    data is tampered with, this tampering can be identified. Adding message digests,
    digital signatures, and encrypting data, both in transit and at rest, can help
    with integrity.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*完整性*意味着数据在传输或静态存储过程中未被修改。如果数据被篡改，这种篡改可以被识别出来。添加消息摘要、数字签名以及无论是在传输过程中还是静态存储时对数据进行加密，都可以帮助保持数据的完整性。'
- en: '*Non-repudiation* can be achieved using digital signatures, timestamps, and
    certificates, and ascertains that the sender cannot deny sending the data. DRM,
    discussed in [Chapter 6](ch06.html "Chapter 6. Your Tools – Crypto APIs"), *Your
    Tools – Crypto APIs*, is implemented so that users cannot deny the reception of
    content.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*不可否认性*可以通过使用数字签名、时间戳和证书来实现，确保发送方不能否认发送数据。在[第6章](ch06.html "第6章. 你的工具 - 加密API")，*你的工具
    - 加密API*中讨论的DRM（数字版权管理）被实施，以使用户不能否认接收内容。'
- en: Security testing categories
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全测试类别
- en: 'Keeping the security principles just discussed in mind, security testing can
    be categorized into three buckets: application review, manual testing, and automated
    testing.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在牢记刚刚讨论的安全原则的基础上，安全测试可以分为三个类别：应用程序审查、手动测试和自动化测试。
- en: Application review
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序审查
- en: The first step in security testing is the application review process. This process
    focuses on understanding the application and identifying hardware, different technologies,
    and capabilities that an application uses. Once these characteristics are identified,
    the reviewer tries to access the security holes in these capabilities. The review
    process identifies the issues that are pronounced in the manifest file, use of
    broken or weak cryptography, insecure use of protocols, and security issues in
    technologies and hardware that may have escaped during development. It covers
    compliance and standards and if they have been appropriately adhered to.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安全测试的第一步是应用程序审查过程。这个过程关注于理解应用程序，并识别应用程序所使用的硬件、不同技术和功能。一旦识别出这些特性，审查者就会尝试访问这些功能中的安全漏洞。审查过程识别出的问题包括清单文件中明显的问题、使用破损或弱加密、协议的不安全使用以及在开发过程中可能遗漏的技术和硬件安全问题。它涵盖了合规性和标准，以及是否适当遵守了这些标准。
- en: Some examples of security issues that can be identified in the manifest file
    include superfluous permissions in the manifest file that the application does
    not need but were added for debugging purposes, not protecting components using
    permissions, forgetting to turn off the debug mode, and log statements.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单文件中可以识别的一些安全问题示例包括：清单文件中不必要的权限，应用程序实际上不需要但为了调试目的而添加的权限，未使用权限保护组件，忘记关闭调试模式，以及日志语句等。
- en: Compliance is based on the use case. Different standards are applied based on
    the use case around which the application is written. For example, a payment and
    commerce use case application may be looking at PCC-DSS. A geo-location based
    application will have to be aware of privacy issues.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 合规性基于用例。根据应用程序编写的用例，应用不同的标准。例如，支付和商务用例应用程序可能会关注PCC-DSS标准。基于地理位置的应用程序则必须注意隐私问题。
- en: These days there are security-auditing firms that specialize in the mobile application
    review process. You should use them if in doubt.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有一些专门从事移动应用程序审查过程的安全审计公司。如果你有疑问，应该使用这些公司。
- en: Manual testing
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动测试
- en: Manual security testing, as the name implies, is done manually during development
    or by test engineers. Engineers watch the behavior of an application under different
    scenarios by feeding in different inputs. Examples include looking at the logs
    to verify no sensitive information is being leaked out, going to the previous
    Activity several times to see how the application performs, trying to break the
    authentication scheme of the application, and checking if a user has appropriate
    access. Scenarios that cannot be also belong to this category. There are some
    companies such as uTest ([www.utest.com](http://www.utest.com)) that employ manual
    testers who can perform manual testing for your applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，手动安全测试是在开发过程中或由测试工程师手动完成的。工程师通过输入不同的数据来观察应用程序在不同场景下的行为。例如，查看日志以验证没有敏感信息泄露，多次返回上一个活动以观察应用程序的表现，尝试破坏应用程序的认证方案，以及检查用户是否具有适当的访问权限。无法自动化的场景也属于这一类。有一些公司如uTest（[www.utest.com](http://www.utest.com)）雇佣手动测试人员可以为你的应用程序执行手动测试。
- en: Dynamic testing
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态测试
- en: Also called automated testing, these tests are ideally performed by writing
    test scripts. Tests such as input validation, stress testing, fuzzing, and boundary
    tests can be easily automated. Most of these tests can easily be part of the standard
    development/test cycle and can act as sanity tests when adding new features. You
    may decide to use services of security firms such as Device Anywhere ([www.deviceanywhere.com](http://www.deviceanywhere.com))
    that specialize in this area.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为自动化测试，这些测试理想情况下是通过编写测试脚本来执行的。如输入验证、压力测试、模糊测试和边界测试等测试可以很容易地自动化。这些测试大多数可以轻松地成为标准开发/测试周期的一部分，并在添加新功能时作为健全性测试。你可能会决定使用专门从事此领域的安全公司的服务，如Device
    Anywhere（[www.deviceanywhere.com](http://www.deviceanywhere.com)）。
- en: Sample test case scenarios
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样本测试案例场景
- en: In this section, I have tried to enumerate some sample test cases that are interesting
    from the security perspective. They are in no particular order and you may use
    them as a reference when identifying test cases for your particular use case.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我尝试列举了一些从安全角度出发有趣的样本测试案例。它们没有特定的顺序，你可以在为特定用例识别测试案例时参考它们。
- en: Testing on the server
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端测试
- en: The mobile ecosystem is very interesting; it is young and still evolving. The
    application may want to send a piece of data to the server but what is received
    on the server may be quite different. This could be because of issues in the communication
    channel where a hacker snoops in and changes the content as it moves or it could
    be a bad client. No matter what the reason is, it is not enough to test the application
    only, server testing is critical for the security of your application. These tests
    focus on whether what was intended is received on the server side, if PII is stored
    in clear on the server, if business logic is residing on the client then is it
    working properly. We discussed this in [Chapter 6](ch06.html "Chapter 6. Your
    Tools – Crypto APIs"), *Your Tools – Crypto APIs*, as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 移动生态系统非常有趣；它年轻且仍在不断发展。应用程序可能希望将数据发送到服务器，但服务器接收到的内容可能大相径庭。这可能是因为通信通道出现问题，黑客窃听并更改传输中的内容，或者是因为客户端的问题。无论原因是什么，仅测试应用程序是不够的，服务器测试对你的应用程序的安全性至关重要。这些测试关注的是服务器端是否接收到了预期的内容，PII是否以明文形式存储在服务器上，如果业务逻辑驻留在客户端，那么它是否正常工作。我们在[第6章](ch06.html
    "第6章. 你的工具 - 加密API")，*你的工具 - 加密API*中讨论了这一点。
- en: This field of testing is mature and plenty of examples and tools are available
    for testing on the server. Checking for open ports and firewall can be easily
    done using port scanning tools such as Nmap.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试领域已经成熟，并且有大量的示例和工具可用于服务器端测试。使用像Nmap这样的端口扫描工具可以轻松检查开放端口和防火墙。
- en: Testing the network
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试网络
- en: The infrastructure layer is the backbone of mobile devices and makes mobility
    ubiquitous. It also brings in new challenges and test cases. Devices communicate
    with the server using different protocols and each brings with it unique bag of
    security holes. GSM can be easily broken; Wi-Fi is inherently insecure, especially
    if you are connecting to a rogue hotspot. **Long Term Evolution** (**LTE**) is
    a new standard for high speed wireless data communication and is IP-based but
    has not been thoroughly tested, and the proximity technologies such as NFC, Bluetooth,
    and RFID bring a whole different testing paradigm. It is thus important to test
    the technology that your application is using and build test cases around it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施层是移动设备的支柱，使移动性无处不在。它也带来了新的挑战和测试案例。设备使用不同的协议与服务器通信，每种协议都带来独特的安全漏洞。GSM容易被破解；Wi-Fi本质上不安全，特别是当你连接到恶意热点时。**长期演进**（**LTE**）是一种新的高速无线数据通信标准，基于IP但尚未经过彻底测试，而NFC、蓝牙和RFID等邻近技术带来了完全不同的测试范式。因此，测试你的应用程序所使用的技术并围绕它构建测试案例是非常重要的。
- en: Securing data in transit
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护传输中的数据
- en: It is good if your application uses **Transport Layer Security** (**TLS**),
    but make sure it is implemented correctly, so test it out. Testing that all communication
    between the client and the server is encrypted and no PII or secret key is being
    transmitted in clear. Remember serialization is not encryption and obfuscation
    is not encryption. Make sure that the server is checking for certificate validation
    and certificate expiry. Check if the encryption algorithms and protocol being
    used are current and secure enough for your use case.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序使用**传输层安全**（**TLS**），这是好的，但请确保它被正确实施，因此需要测试它。测试客户端和服务器之间的所有通信是否都已加密，并且没有PII或密钥在明文中传输。记住，序列化不是加密，混淆也不是加密。确保服务器正在检查证书验证和证书过期。检查所使用的加密算法和协议是否当前、对于你的用例足够安全。
- en: Secure storage
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全存储
- en: It is always a good idea to not store sensitive data such as private keys, usernames,
    passwords, and other PII on the client. Ideally, this information should be stored
    on the server. Storing the key with the data it encrypts defeats the purpose of
    security. If keys have to be stored on the client, first they should not be stored
    in clear. Second, they should not be stored in files, cache files, or shared preferences.
    Keys should be stored in the `keystore`, passwords in `AccountManager`, and all
    sensitive information should be stored in an encrypted fashion. In most cases,
    a hash value can be stored instead of a password.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将敏感数据如私钥、用户名、密码及其他个人识别信息（PII）存储在客户端始终不是一个好主意。理想情况下，这些信息应当存储在服务器上。将密钥与它加密的数据一起存储违背了安全的目的。如果必须在客户端存储密钥，首先，它们不应当以明文形式存储；其次，它们不应当存储在文件、缓存文件或共享首选项中。密钥应当存储在`keystore`中，密码在`AccountManager`中，所有敏感信息应以加密方式存储。在大多数情况下，可以存储哈希值而不是密码。
- en: Validating before acting
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动前的验证
- en: Validate the input, the data, and the caller being passed between different
    components of the application and also from other applications. Any Activity can
    parcel any type of data in the Intent and it is the responsibility of the receiving
    component to test and verify before acting on it. We discussed this at great length
    in [Chapter 2](ch02.html "Chapter 2. Application Building Blocks"), *Application
    Building Blocks*. The tests in this case will include passing invalid and erroneous
    data to a component and observing how it behaves.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 验证在不同应用程序组件之间以及来自其他应用程序传递的输入、数据和调用者。任何Activity都可以在Intent中封装任何类型的数据，而接收组件有责任在采取行动之前进行测试和验证。我们在[第2章](ch02.html
    "第2章. 应用程序构建块")中详细讨论了这一点，*应用程序构建块*。在这种情况下，测试将包括向组件传递无效和错误的数据，并观察它的行为。
- en: In some cases, you might be able to check the caller identity before acting
    on a request from them. Use it! Especially before launching sensitive actions,
    check the caller identity and data that you will be working on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能可以在处理来自他们的请求之前检查调用者的身份。使用它！特别是在启动敏感操作之前，检查调用者身份和你将要处理的数据。
- en: The principle of least privilege
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小权限原则
- en: Tests in this category include testing permissions of different application
    components and making sure that they have the least privileges possible to function
    properly. This includes checking files, cache files, and `SharedPrferences` for
    visibility and accessibility permissions. Check if they really need a `MODE_WORLD_READABLE`
    or `MODE_WORLD_WRITABLE` permission.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这类测试包括检查不同应用程序组件的权限，并确保它们具有正常功能所需的最小权限。这包括检查文件、缓存文件和`SharedPrferences`的可见性和可访问性权限。检查它们是否真的需要`MODE_WORLD_READABLE`或`MODE_WORLD_WRITABLE`权限。
- en: Check the permissions that your application requests. For example, if you do
    not need fine-grained location access, only ask for coarse-grained permission,
    and if you only need to read SMS, do not ask for both read and write SMS permissions.
    As consumers get more aware of security issues in the mobility space, they might
    be suspicious of your application if it requests permissions that do not make
    sense. It makes no sense for a book browsing application to have access to the
    user contact list and device camera.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的应用程序请求的权限。例如，如果你不需要精确的位置访问权限，只需请求粗略的位置权限，如果你只需要读取短信，就不要请求读取和写入短信的权限。随着消费者对移动领域安全问题的认识不断提高，如果应用程序请求的权限没有意义，他们可能会对你的应用程序产生怀疑。对于浏览图书的应用程序来说，访问用户联系人列表和设备摄像头是没有意义的。
- en: Managing liability
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理责任
- en: Be aware of rules and regulations in your domain. Getting into liability lawsuits
    is a messy affair and it is best to stay away from them. Also, if it makes sense
    to use third party tools and services that specialize in these matters then by
    all means use them. If your application collects user data, make sure that you
    have taken proper consent from the user and everything that you are collecting
    is listed out. As an example, the California Online Privacy Protection Act states
    that if an application collects information in California then it should be disclosed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你所在领域的规则和法规。涉及责任诉讼是一件麻烦的事，最好避免。另外，如果使用专门处理这些问题的第三方工具和服务是有意义的，那么请务必使用它们。如果你的应用程序收集用户数据，请确保你已经从用户那里获得了适当的同意，并且你收集的所有内容都已列出。例如，加州在线隐私保护法案规定，如果一个应用程序在加州收集信息，那么它应该被公开。
- en: Let's take another example use case of an application that processes payments.
    Instead of trying to do your own, use existing payment solutions such as PayPal.
    Payments deal with users' money and there are directives such as PCI-DSS that
    governs how such capabilities can be used.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个处理支付的应用程序为例。不要试图自己开发，而应使用现有的支付解决方案，如PayPal。支付处理涉及用户的资金，有诸如PCI-DSS这样的指导方针来规定如何使用这些功能。
- en: Similarly, instead of designing and developing your home-grown security algorithms
    and protocols, use time tested and industry tested security suites and libraries.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，与其设计和开发自家的安全算法和协议，不如使用经过时间和行业测试的安全套件和库。
- en: Be aware of how the application will be used in the countries that you support.
    Different countries have different rules and regulations. The definition of PII
    is different as well.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你的应用程序在支持的国家将如何被使用。不同的国家有不同的规则和法规。个人识别信息（PII）的定义也有所不同。
- en: Cleaning up
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理
- en: First, do not log sensitive information. Before releasing the application in
    the wild, make sure to turn debugging off. Clean up all sensitive information
    from files, cookies, and caches; that is, zeroize memory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，不要记录敏感信息。在将应用程序发布到野外之前，确保关闭调试。从文件、cookies 和缓存中清理所有敏感信息；即，清零内存。
- en: Usability versus security
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易用性与安全性的权衡
- en: Balancing usability and security is a tricky and delicate art. An application
    may persist username, password, and session tokens for convenience but it also
    makes security weak. If you have some functionality in your application that remembers
    user identity, weigh convenience and security. You may decide to limit session
    lengths and limit how long you want to keep cookies and tokens alive.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 平衡易用性和安全性是一门棘手且微妙的艺术。应用程序可能为了方便而持久保存用户名、密码和会话令牌，但这也会使安全性降低。如果你的应用程序中有记住用户身份的功能，要权衡便利性和安全性。你可能决定限制会话长度，以及限制保持
    cookies 和令牌存活的时间。
- en: Authentication scheme
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证方案
- en: The question here is whether you want to authenticate the device or the user?
    Devices do get lost or stolen. Identifying a user based on device characteristics
    such as IMEI, IMSI, or UDID may not be such a great authentication scheme. These
    persist remote wipes and resets. You may like to evaluate biometrics-based authentication
    mechanisms or two factor authentication schemes to authenticate the user.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，你是想要验证设备还是用户？设备可能会丢失或被盗。基于设备特性如 IMEI、IMSI 或 UDID 来识别用户可能不是一个很好的验证方案。这些会导致远程擦除和重置。你可能需要评估基于生物特征的验证机制或双因素验证方案来验证用户。
- en: Thinking like a hacker
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以黑客的思维思考
- en: Think like a hacker and test how a hacker will try to hack your application.
    Use the available tools and exploits already listed on the Internet. Testing the
    application using tools used by hackers can reveal what hackers will see and what
    information they will get when they try to crack your application. There are tools
    such as Fiddler ([www.fiddler2.com](http://www.fiddler2.com)) that you may use
    to monitor the network traffic through your application. It is important to remember
    that obfuscating the code is not security.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以黑客的思维去测试，想象他们会如何尝试攻击你的应用程序。利用互联网上已有的工具和漏洞。使用黑客的工具进行测试可以揭示黑客在试图破解你的应用程序时能看到什么，能得到什么信息。有一些工具，比如
    Fiddler （[www.fiddler2.com](http://www.fiddler2.com)），你可以用来监控应用程序的网络流量。重要的是要记住，混淆代码并不是安全。
- en: Integrating with caution
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谨慎集成
- en: Whether you are integrating with hardware (both internally and externally) or
    third party applications, do it with care.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是与硬件（内部和外部）还是第三方应用程序集成，都要小心谨慎。
- en: If the application is using some hardware components such as camera, Bluetooth,
    NFC chip, accelerometer, microphones, or GPS then it is important to test them
    for security as well. A flaw in any piece of hardware can affect the overall security
    of the application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用了某些硬件组件，如摄像头、蓝牙、NFC 芯片、加速度计、麦克风或 GPS，那么测试它们的安全性也很重要。任何硬件的缺陷都可能影响应用程序的整体安全性。
- en: Similarly, a bug in a third party library can result in the application being
    compromised. When integrating with such an external library, ask for their test
    results and look them up online and ask for recommendations.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，第三方库中的错误可能导致应用程序受到威胁。在与这样的外部库集成时，要求查看他们的测试结果，在线查找并寻求推荐。
- en: Security testing the resources
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全测试资源
- en: This section focuses on tools, techniques, and some other resources that can
    creatively be used to test applications for security.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍可以创造性地用于测试应用程序安全的工具、技术和其他资源。
- en: OWASP
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OWASP
- en: '**OWASP** (**Open Web Application Security Project**) is an organization committed
    to mobile security. They provide tools and research in the field of mobile security.
    Check out their website at [https://www.owasp.org](https://www.owasp.org). It
    is a good place to look for your security-related questions, contribute to the
    open source and innovate and participate in the mobile security discussion. OWASP
    compiles a list of top 10 security vulnerabilities each year and the community
    is challenged to work on it.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**OWASP**（**开放网络应用安全项目**）是一个致力于移动安全的组织。它们在移动安全领域提供工具和研究。查看它们的网站 [https://www.owasp.org](https://www.owasp.org)。这是寻找与安全相关问题的好地方，为开源贡献，创新并参与移动安全讨论。OWASP
    每年都会整理一份十大安全漏洞列表，并挑战社区去解决这些问题。'
- en: Android utilities
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安卓工具
- en: Android provides a whole array of utilities that can be creatively used to test
    applications. Besides testing, these tools can also help developers debug their
    applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了一系列可以创造性地用于测试应用程序的工具。除了测试，这些工具还可以帮助开发者调试他们的应用程序。
- en: Android Debug Bridge
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android调试桥
- en: '**Android Debug Bridge** (**ADB**) can be used for logs, memory checking, and
    many other purposes. Check out the full listing of functions provided by ADK on
    the developer website. The following screenshots show some examples of ADB in
    action:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android调试桥**（**ADB**）可用于日志、内存检查等多种用途。你可以在开发者网站上查看ADK提供的完整功能列表。下方的截图展示了一些ADB的使用示例：'
- en: '![Android Debug Bridge](img/5603OT_09_04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Android调试桥](img/5603OT_09_04.jpg)'
- en: The previous screenshot shows the sample log using the `adb logcat` command.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的截图展示了使用`adb logcat`命令的示例日志。
- en: Setting up the device
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置设备
- en: To set up advanced settings for monitoring web applications, you may turn on
    advanced features that can help you get more data during penetration testing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置用于监控Web应用程序的高级设置，你可以开启高级功能，以便在渗透测试期间获取更多数据。
- en: '![Setting up the device](img/5603OT_09_05.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![设置设备](img/5603OT_09_05.jpg)'
- en: The previous screenshot shows how you may enable the JavaScript and plugin to
    check for information leakage.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的截图显示了如何启用JavaScript和插件来检查信息泄露。
- en: SQlite3
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQlite3
- en: Using the SQLite3 utility, a user may explore the databases it creates and some
    other databases that come bundled with the platform.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLite3工具，用户可以探索它创建的数据库以及一些与平台捆绑的其他数据库。
- en: The SQLite utility lets the user query databases and check values in the database.
    Such database interrogation and examination can point out issues such as storing
    PII in the clear.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite工具允许用户查询数据库并检查数据库中的值。这种数据库的查询和检查可以指出诸如以明文存储PII等问题。
- en: Dalvik Debug Monitor Service
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dalvik调试监控服务
- en: '**Dalvik Debug Monitor Service** (**DDMS**) is another important tool provided
    by the Android framework. DDMS provides capabilities such as port-forwarding,
    screen capture, thread and heap information, the `logcat` process, and radio state
    information, incoming call and SMS spoofing, and location data spoofing. The following
    screenshot shows the window for DDMS. Check out the details on capabilities on
    the Android developer website.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dalvik调试监控服务**（**DDMS**）是Android框架提供的另一个重要工具。DDMS提供了如端口转发、屏幕截图、线程和堆信息、`logcat`进程、以及无线电状态信息、来电和短信欺骗、位置数据欺骗等功能。下方的截图展示了DDMS的窗口。你可以在Android开发者网站上查看这些功能的具体详情。'
- en: '![Dalvik Debug Monitor Service](img/5603OT_09_06.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Dalvik调试监控服务](img/5603OT_09_06.jpg)'
- en: There are some other third party tools as well such as the Intent Sniffer and
    the Manifest Explorer, both developed by iSecPartners ([https://www.isecpartners.com](https://www.isecpartners.com)).
    Other Linux tools such as `strace` and `procrank` can also be used as well. You
    can use BusyBox, as discussed in the following section, for this purpose.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他第三方工具，如由iSecPartners开发的Intent Sniffer和Manifest Explorer（[https://www.isecpartners.com](https://www.isecpartners.com)）。其他Linux工具如`strace`和`procrank`也可以使用。你可以使用下面章节讨论的BusyBox来实现这一目的。
- en: BusyBox
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BusyBox
- en: BusyBox is called the Swiss Army Knife of embedded Linux and provides several
    Unix tools such as `vi`, `whoami`, `watchdog`, and so on. These tools can be used
    for testing without rooting the phone. Installing the BusyBox on Android is pretty
    simple. Just download it from [www.busybox.net](http://www.busybox.net).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: BusyBox被称为嵌入式Linux的瑞士军刀，提供了许多Unix工具，如`vi`、`whoami`、`watchdog`等。这些工具可以在不root手机的情况下用于测试。在Android上安装BusyBox非常简单。只需从[www.busybox.net](http://www.busybox.net)下载即可。
- en: '![BusyBox](img/5603OT_09_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![BusyBox](img/5603OT_09_07.jpg)'
- en: As shown in the preceding screenshot, `busybox` can be easily pushed and installed.
    Once installed, the Linux commands can be easily executed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，`busybox`可以轻松地推送并安装。安装后，可以轻松执行Linux命令。
- en: Decompile APK
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反编译APK
- en: It is relatively easy to decompile an APK and read its contents. Doing this
    exercise will help you understand how a hacker will approach your APK.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译APK并阅读其内容相对简单。进行这项练习可以帮助你理解黑客将如何接近你的APK。
- en: An APK file is nothing but a ZIP file and renaming the APK file as a ZIP file
    will let you open it with any ZIP file explorer. These are available under the
    `/data/app` directory. You can pull it onto your machine using the `adb pull`
    command. In there, you can see the manifest file, resources, assets, and others.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: APK文件实际上只是一个ZIP文件，将APK文件重命名为ZIP文件后，你可以使用任何ZIP文件浏览器打开它。这些文件位于`/data/app`目录下。你可以使用`adb
    pull`命令将其拉到你的机器上。在其中，你可以看到清单文件、资源、资产以及其他文件。
- en: '![Decompile APK](img/5603OT_09_08.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![APK反编译](img/5603OT_09_08.jpg)'
- en: Next, using the `dexdump` utility provided in Android, the classes under the
    `/data/dalvik-cache` directory can be dumped.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用Android提供的`dexdump`工具，可以转储`/data/dalvik-cache`目录下的类。
- en: '![Decompile APK](img/5603OT_09_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![APK反编译](img/5603OT_09_09.jpg)'
- en: 'For example, to dump `data@app@com.example.example1-1.apk@classes.dex` into
    a file called `dump`, the command to be used is:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，要将`data@app@com.example.example1-1.apk@classes.dex`转储到一个名为`dump`的文件中，需要使用的命令是：
- en: '[PRE0]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is a screenshot of the kind of data collected in the dump file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在转储文件中收集的数据类型的截图：
- en: '![Decompile APK](img/5603OT_09_10.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![APK反编译](img/5603OT_09_10.jpg)'
- en: This dump will be in the form of the jump statements and is hard to read. A
    DEX de-compiler such as `baksmali` or `dedexer` can be used to make these files
    much more readable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个转储将以跳转语句的形式出现，难以阅读。可以使用如`baksmali`或`dedexer`这样的DEX反编译器，使这些文件更具可读性。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Security testing is a relatively young field. Patterns and testing strategies
    are still developing and security is being recognized as an important benchmark
    for identifying app weaknesses and improving app quality. In this chapter, we
    have put together our learning from all the previous chapters and used it to define
    test cases for our application. This is only a start and you should define test
    cases, as you deem appropriate for your use case.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 安全测试是一个相对较新的领域。模式和测试策略仍在发展中，安全已成为识别应用弱点、提高应用质量的重要基准。在本章中，我们将之前所有章节的学习成果汇集起来，用它来定义应用程序的测试用例。这只是一个开始，你应该根据你的使用情况，定义你认为合适的测试用例。
- en: We began with an overview of testing fundamentals. Then, we discussed the six
    pillars of security around which we designed our test cases. Some sample test
    cases were discussed that should provide you with a base for testing your application.
    And then we closed the chapter with a discussion of resources and tools that you
    could use for security-focused testing.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先概述了测试的基本原理。然后，我们讨论了围绕六个安全支柱设计的测试用例。我们讨论了一些示例测试用例，这些用例应该为你测试应用程序提供了一个基础。最后，我们讨论了你可以用于以安全为重点的测试资源和工具，以此结束了这一章节。
- en: Let us now march to the last chapter of the book and see what is new and happening
    in the Android space that challenges our security basics.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们走向本书的最后一章，看看在Android领域有哪些新的挑战在考验我们的安全基础知识。
