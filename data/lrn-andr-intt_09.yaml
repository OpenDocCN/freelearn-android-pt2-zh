- en: Chapter 9. Intent Service and Pending Intents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章 意图服务与待定意图
- en: From the very beginning of this book, we have been studying different tasks
    that an intent can do to facilitate Android and their types. We have seen that
    intents can help to navigate in between the activities. They are also used to
    transfer data between them. We saw how we can put filters in order to verify whether
    the incoming intent can qualify the component test and in the end, we learned
    the role of intent in Broadcast Receivers. In this chapter, we will have an advanced
    look at how the intents can be used for doing handy things using Intent Services
    and Pending Intents.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书一开始，我们就一直在研究意图可以执行的不同任务，以促进Android及其类型。我们已经看到意图可以帮助在活动之间导航。它们还用于在它们之间传输数据。我们了解到如何设置过滤器以验证传入的意图是否可以通过组件测试，最后我们学习了意图在广播接收器中的作用。在本章中，我们将深入了解如何使用意图服务和待定意图进行便捷操作。
- en: 'In this chapter, we will have a look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: What is Intent Service?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 意图服务是什么？
- en: Usage and Implementation of Intent Service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 意图服务的使用和实现
- en: What is Pending Intent?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待定意图是什么？
- en: Usage and Implementation of Pending Intent
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待定意图的使用和实现
- en: Summary
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概括
- en: Intent Service
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 意图服务
- en: Intent Service is a simple kind of service that is used to handle asynchronous
    work which has nothing to do with the main thread. This can be done if the client
    sends the request by the `startService(Intent intent)` method. This new task will
    be handled by the worker thread and stops when it runs out of work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 意图服务是一个简单的服务类型，用于处理与主线程无关的异步工作。如果客户端通过`startService(Intent intent)`方法发送请求，就可以这样做。这个新任务将由工作线程处理，并在没有工作可做时停止。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Intent Service is inherited by the `Service` class present in Android API
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 意图服务继承了Android API中的`Service`类
- en: Intent Service is used to offload the working thread, so that it does not become
    the bottleneck. It helps to make things go separately as of the main application
    thread. It is to be noted that though it works independently of the main thread,
    only one request can be processed at a given time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 意图服务用于卸载工作线程，使其不会成为瓶颈。它有助于使事情与主应用程序线程分开进行。需要注意的是，尽管它独立于主线程工作，但一次只能处理一个请求。
- en: Intent Service is the best way to offload the work from the UI thread of your
    application and into a work queue. There is no need to make asynchronous tasks
    and manage them for every processing. Rather, you define an Intent Service, enable
    it to handle the appropriate data that you want to send for the processing, and
    simply start the service. In the end, you can send the data back to the application
    by broadcasting it in an intent object and catching it from the Broadcast Receiver
    to use it in the application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 意图服务是从应用程序的UI线程卸载工作到工作队列的最佳方式。无需为每个处理创建异步任务并管理它们。相反，你定义一个意图服务，使其能够处理你想要发送进行处理的数据，然后简单地启动服务。最后，你可以通过在意图对象中广播数据并将其从广播接收器捕获来将数据发送回应用程序，以便在应用程序中使用。
- en: Comparison of four fundamentals
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 四个基础组件的比较
- en: This section shows the basic difference between four of the most important elements
    (Service, Thread, Intent Service, and Async Task) of Android development including
    Intent Service.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了Android开发中四个最重要的元素（服务、线程、意图服务和异步任务）之间的基本区别，包括意图服务。
- en: Best case to use
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最佳使用情况
- en: 'Best case scenarios for Service, Thread, Intent Service, and Async Task are
    given in the following table:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 服务、线程、意图服务和异步任务的最佳情况场景如下表所示：
- en: '|   | Best case scenario |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | 最佳情况场景 |'
- en: '| --- | --- |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Service | When task is not too long and has nothing to do with the main thread
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 服务 | 当任务不是很长，并且与主线程无关时 |'
- en: '| Thread | When there is a long task to perform and more than one task has
    to be done in parallel |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 线程 | 当有一个长任务需要执行，并且需要并行完成多个任务时 |'
- en: '| Intent Service | When there are long tasks without any intervention from
    the main thread and also where callbacks are needed |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 意图服务 | 当有不需要主线程干预的长任务，并且需要回调时 |'
- en: '| Async Task | When there are long tasks in which communication with the main
    thread is needed and also where there is a need for parallel work to be done |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 异步任务 | 当有需要与主线程通信的长任务，并且需要并行工作 |'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If there is a need for Intent Service to communicate with the main thread, we
    need to use Handler or Broadcast Intents.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Intent Service需要与主线程通信，我们需要使用Handler或广播Intent。
- en: Triggers
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发条件
- en: 'The difference in the triggers of Service, Thread, Intent Service, and Async
    Task has been discussed in the following table:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下表讨论了Service、Thread、Intent Service和Async Task之间的触发条件差异：
- en: '|   | Service | Thread | Intent Service | Async Task |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | Service | Thread | Intent Service | Async Task |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Triggers | By using the `onStartService()` method | By using the `start()`
    method | By Intent | By using the `execute()` method |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 触发方式 | 使用`onStartService()`方法 | 使用`start()`方法 | 使用Intent | 使用`execute()`方法
    |'
- en: '| Cause of Triggers | Can be called from any thread | Can be called and run
    by any other thread | Can only be called from the main thread | Can only be called
    from the main thread |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 触发原因 | 可以从任何线程调用 | 可以被任何其他线程调用和运行 | 只能从主线程调用 | 只能从主线程调用 |'
- en: '| Runs on | Can be called from the main thread | Its own thread | Separate
    worker thread | Separate worker thread although the method of the main thread
    can be run in between |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 运行环境 | 可以从主线程调用 | 在自己的线程上运行 | 在独立的工作线程上运行 | 在独立的工作线程上运行，尽管主线程的方法可能会在中间运行
    |'
- en: '| Limitations | Can block the main thread in certain scenarios | Has to be
    manually handled and the code may not be easily understandable | Cannot handle
    multiple tasks simultaneously and all tasks work on the same worker thread | Can
    have only one instance of one task and cannot be run in a loop |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 限制条件 | 在某些场景下可能会阻塞主线程 | 需要手动处理，代码可能不易理解 | 不能同时处理多个任务，所有任务都在同一个工作线程上运行 | 只能有一个任务实例，不能在循环中运行
    |'
- en: Usage and implementation of Intent Service
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Intent Service的使用和实现
- en: From the previous parts of this chapter, we have the clear view of the definition
    of Intent Service and what the fundamental differences are that it has with Threads,
    Async Tasks, and Service. It is now time to start with the implementation and
    usage of Intent Services. For this, we will start with the example which will
    help us to learn how to generate a fake notification from Intent Service.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章的前几部分，我们清楚地了解了Intent Service的定义以及它与Thread、Async Task和Service之间的基本区别。现在是开始实现和使用Intent
    Services的时候了。为此，我们将从一个示例开始，这将帮助我们学习如何从Intent Service生成假通知。
- en: Generating a fake notification from Intent Service
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Intent Service生成假通知
- en: In this example, we will learn the use of Intent Service in producing the notification
    on your notification bar. The example will also explain the use of the `onHandleIntent()`
    method which is used to implement all the functionality of Intent Service that
    also includes sending the broadcast and the notification to the notification bar.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习Intent Service在通知栏上生成通知的使用方法。该示例还将解释`onHandleIntent()`方法的使用，该方法用于实现Intent
    Service的所有功能，包括发送广播和通知到通知栏。
- en: 'Moreover, at the end of this section you will learn the difference between
    it and Thread, or any other previously mentioned Android-defined method. After
    the completion of this code, start the activity and you will get a view of these
    screens:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本节末尾，你将了解它与Thread或其他之前提到的Android定义方法之间的区别。完成这段代码后，启动活动，你将看到以下屏幕：
- en: '![Generating a fake notification from Intent Service](img/9639_09_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![从Intent Service生成假通知](img/9639_09_01.jpg)'
- en: Start of Activity will show the Hello World Screen
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Activity将显示“Hello World”屏幕
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note: Remember that in this example we will not go through the complete set
    of files that is used in the project. Since this is the last chapter of the book,
    we assume that you already got the basics of Android development in terms of XML
    file, resources, and layouts'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：请记住，在这个示例中，我们将不会介绍项目中使用的完整文件集。由于这是本书的最后一章，我们假设您已经掌握了关于XML文件、资源和布局的Android开发基础知识。
- en: '![Generating a fake notification from Intent Service](img/9639_09_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![从Intent Service生成假通知](img/9639_09_02.jpg)'
- en: The Notification panel showing the Progress notification
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 显示进度通知的通知面板
- en: A glance at the code
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码概览
- en: The example refers to the use of Intent Service in a scenario when there is
    a need for sending a message to the notification bar about progressing or signaling
    of any particular event.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例指的是在需要向通知栏发送关于特定事件进展或信号的情景下使用Intent Service。
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Dive into the understanding
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入理解
- en: Build a new project and open the `src` folder. Create a new class file with
    the name of `CustomIntentService.java` which is the child class of `IntentService`.
    Extend the `IntentService` class and override the method `onHandleIntent(Intent
    intent)`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新项目并打开`src`文件夹。创建一个名为`CustomIntentService.java`的新的类文件，它是`IntentService`的子类。扩展`IntentService`类并覆盖`onHandleIntent(Intent
    intent)`方法。
- en: 'At this point, you are all set to implement your own Intent Service that is
    responsible for sending a message to the notification bar and update it in the
    form of the Progress Percentage Bar format. Now, let''s start understanding the
    code by going through the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你已经准备好实现自己的Intent Service，负责将消息发送到通知栏，并以进度百分比条的形式更新它。现在，让我们通过以下步骤开始理解代码：
- en: The first step is to declare the variables `notificationManager` and `notification`
    in order to use them inside the `onHandleIntent()` method. There are some other
    static final variables that we will be using in this project. They are `NOTIFICATION_ID`,
    `ACTION_CustomIntentService`, `ACTION_MyUpdate`, `EXTRA_KEY_IN`, `EXTRA_KEY_OUT`,
    and `EXTRA_KEY_UPDATE`. Two new strings variables are also required in order to
    handle the notification string, stated as `activityMessage` and `extraOut`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是在`onHandleIntent()`方法中使用变量`notificationManager`和`notification`进行声明。还有一些其他的静态最终变量将在本项目中使用。它们是`NOTIFICATION_ID`、`ACTION_CustomIntentService`、`ACTION_MyUpdate`、`EXTRA_KEY_IN`、`EXTRA_KEY_OUT`和`EXTRA_KEY_UPDATE`。还需要两个新的字符串变量以处理通知字符串，分别表示为`activityMessage`和`extraOut`。
- en: The main implementation of this `IntentService` will take place in the `onHandleIntent()`
    method where we will define the working which includes messages to the notification
    bar and broadcasting of messages.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`IntentService`的主要实现将在`onHandleIntent()`方法中进行，我们将在这里定义包括消息到通知栏和广播消息的工作。
- en: At the start of this `onHandleIntent()`, the extras are obtained by the `intent.getStringExtra()`
    method and saved in the `msgFromActivity` variable which will later be sent to
    broadcast.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onHandleIntent()`方法开始时，通过`intent.getStringExtra()`方法获取额外的数据，并将其保存在`msgFromActivity`变量中，稍后该变量将发送到广播。
- en: Our main objective is to send a notification which will show 0 to 100 % progress
    (a fake counter) and get updated in the notification bar. For that, we are initializing
    a `for` loop which will go from 0 to 10\. At the start of this, we will call `Thread.sleep(1000)`,
    which will make the thread sleep and will not work for 1000 milliseconds.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的主要目标是发送一个通知，显示从0到100%的进度（一个假的计数器），并在通知栏中更新。为此，我们初始化一个`for`循环，该循环将从0进行到10。在开始时，我们将调用`Thread.sleep(1000)`，这将使线程休眠，在1000毫秒内不工作。
- en: 'Once the thread has slept for a certain time, the first counter of our fake
    progress update is done. Our next step is to send a broadcast whose main purpose
    is to give the update. In order to see this, we use the following lines of code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦线程休眠了一定时间，我们的假进度更新的第一个计数器就完成了。下一步是发送一个广播，其主要目的是提供更新。为了看到这一点，我们使用以下代码行：
- en: '[PRE1]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A quick overview of how we send a broadcast: make a new intent object, and
    give it a name and action of `intentUpdate`; since it is a custom action, give
    it a name of `ACTION_MyUpdate` which you can see in the code; define its category
    which is also a custom category; put the counter information (the variable that
    shows the current counter of the loop) and send a broadcast for this intent.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 快速了解我们如何发送广播：创建一个新的意图对象，并为其提供一个名称和`intentUpdate`的动作；由于这是一个自定义动作，所以给它一个`ACTION_MyUpdate`的名称，你可以在代码中看到；定义它的类别，这也是一个自定义类别；放入计数器信息（显示循环当前计数器的变量）并发送此意图的广播。
- en: 'The next step is to send the notification to the notification bar. The following
    lines of code can be seen inside the previous example:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将通知发送到通知栏。以下代码可以在上一个示例中看到：
- en: '[PRE2]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code sets the value of `notificationText` to the current counter of the
    loop and converts it into the percentage; makes a new notification by calling
    the `NotificationCompat.Builder()` (which is basically a builder pattern described
    in Android SDK) and gives it the application context, sets its title content,
    text, ticker, when-to-appear, and some other properties. At the end, you have
    to call `notificationManager.notify()` in order to show it in the notification
    bar.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码将`notificationText`的值设置为循环的当前计数器，并将其转换为百分比；通过调用`NotificationCompat.Builder()`（这基本上是Android
    SDK中描述的构建器模式）创建一个新的通知，并为其提供应用程序上下文，设置其标题内容、文本、提醒、出现时间以及其他一些属性。最后，你需要调用`notificationManager.notify()`以在通知栏中显示它。
- en: 'The last step is to send another broadcast as an acknowledgement, and it has
    the same procedure as that of the previous broadcast, as you can see in the following
    code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是发送另一个广播作为确认，它的流程与之前的广播相同，你可以在以下代码中看到：
- en: '[PRE3]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The last step showed in the code is to override the `onCreate()` method. You
    must have noticed that we did not make a new object of the notification manager
    which will certainly give an error. So, in order to make a new object, we will
    get the system service of Android by using the notification manager `getSystemService
    (Context.NOTIFICATION_SERVICE)`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码中显示的最后一步是覆盖`onCreate()`方法。你可能已经注意到我们没有创建一个新的通知管理器对象，这肯定会出错。因此，为了创建新对象，我们将通过使用通知管理器`getSystemService
    (Context.NOTIFICATION_SERVICE)`获取 Android 的系统服务。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example will also need a Broadcast Receiver. If you still don't have an
    idea about it, you can refer to previous chapters.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例还需要一个广播接收器。如果你还没有关于它的想法，可以参考前面的章节。
- en: Taking another example
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再举一个例子。
- en: The previous example mainly deals with the implementation of notification in
    the Android notification bar. It covered the implementation of Intent Service
    but not the making of Broadcast Receiver and its registration. In this example,
    we will learn how to use Intent Service and convert all the input data to uppercase
    and broadcast it back to Broadcast Receiver. The implementation of Broadcast Receiver
    is also a part of this example.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例主要处理了在 Android 通知栏中实现通知的问题。它涵盖了 Intent 服务的实现，但没有涉及广播接收器的制作及其注册。在这个例子中，我们将学习如何使用
    Intent 服务并将所有输入数据转换为大写，并将其广播回广播接收器。广播接收器的实现也是这个示例的一部分。
- en: 'Starting with the example, use the following code to implement it on your development
    environment:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从示例开始，在你的开发环境中使用以下代码来实现它：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is almost the same implementation that was done before, in the first example.
    In this example, the working of the `onHandleIntent()` method is shown, in which
    the following steps are taking place:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与之前的第一个示例中的实现相同。在这个例子中，展示了`onHandleIntent()`方法的工作原理，其中进行以下步骤：
- en: In the `onHandleIntent()` method, the first step that you can see is getting
    data from the coming intent and saving it into a variable. The variable `data`
    contains the incoming data which we will convert into the uppercase.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onHandleIntent()`方法中，你可以看到的第一步是从传入的意图中获取数据并将其保存到一个变量中。变量`data`包含我们将转换为大写的传入数据。
- en: The second step is logging the data into LogCat, which is obtained by using
    the method `Log.d(String, String)`. The first argument is `TAG`, which is normally
    the class name that is declared at the global level, so that any method may use
    it. This class name is important to distinguish your message from others (makes
    it easy to read). The second argument is the message string which is used to show
    any data in the process, so that at runtime the developer may see its value.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是将数据记录到 LogCat 中，这是通过使用`Log.d(String, String)`方法获得的。第一个参数是`TAG`，通常是全局声明的类名，以便任何方法都可以使用它。这个类名对于将你的消息与其他消息区分开来很重要（使其易于阅读）。第二个参数是消息字符串，用于显示过程中的任何数据，以便开发者在运行时可以看到其值。
- en: The third step is to convert this data into upper case. This will help to reflect
    the change in the broadcasted intent. Save this back into the data variable.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步是将这些数据转换成大写。这将有助于在广播的意图中反映更改。将其重新保存回数据变量中。
- en: The rest of the steps are the same as the previous example in which the intent
    object is made, the categories and action are defined, data is put as an extra
    and is sent to be broadcast by the receiver.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其余步骤与之前的示例相同，其中创建意图对象，定义类别和动作，将数据作为额外内容放入并发送给接收器进行广播。
- en: 'The next step, is to set the receiver which will be received from the `sendBroadcast()`
    method. For this, take a look at the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置将从`sendBroadcast()`方法接收的接收器。为此，请查看以下代码：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous code is that part of the example where how to make a Broadcast
    Receiver is written and this will receive the broadcast back and set `textView`.
    You can see in the code that the `onReceive()` method is overridden where the
    class is extending the Broadcast Receiver. Inside the `onReceive()` method, the
    string is obtained by the `intent.getStringExtra()` method and is saved in the
    result string. This string will be used to set the text of the `textView`, so
    that you can see the changes as they are reflected in the `textView`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码是示例中关于如何创建广播接收器的部分，这将接收广播并设置 `textView`。你可以在代码中看到，覆盖了 `onReceive()` 方法，该类正在扩展广播接收器。在
    `onReceive()` 方法内部，通过 `intent.getStringExtra()` 方法获取字符串并将其保存在结果字符串中。这个字符串将被用来设置
    `textView` 的文本，以便你可以看到它们在 `textView` 中的反映。
- en: 'Moving forward, the next step is to register this receiver with Intent Service.
    This will be done inside the activity where the receiver is linked to the Intent
    Filter, so that it can have its effect. This is shown in the following piece of
    code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，下一步是使用 Intent Service 注册这个接收器。这将在与 Intent Filter 相关联的活动内完成，以便它可以产生效果。以下代码段展示了这一过程：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The method `registerReceiver()` is declared inside your activity which will
    be called from the `onCreate()` or `onResume()` methods, so that it can register
    the Broadcast Receiver while starting or resuming the activity.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`registerReceiver()` 方法在你的活动中声明，它将从 `onCreate()` 或 `onResume()` 方法中被调用，以便在启动或恢复活动时注册广播接收器。'
- en: The Intent Filter is declared and initialized with the object named `intentFilter`.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intent Filter 被声明并使用名为 `intentFilter` 的对象初始化。
- en: The `intentFilter` object is set as default.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intentFilter` 对象被设置为默认。'
- en: The object of the Broadcast Receiver is initiated and registered with the Intent
    Filter by calling the `registerReceiver(Receiver, IntentFilter)` method.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广播接收器的对象被初始化并通过调用 `registerReceiver(Receiver, IntentFilter)` 方法与 Intent Filter
    注册。
- en: 'After registering the receiver with the Intent Filter, the next step is to
    use this in your activity. For this, take a look at the following code. This code
    can be inside any event:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Intent Filter 注册接收器之后，下一步是在你的活动中使用它。为此，请查看以下代码。这段代码可以位于任何事件内：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Initialize an intent in the traditional way by giving that the `IntentService`
    class you just made and put the input text that you want to convert in upper case.
    The extra data that is given to this intent is done by the `Intent.putExtra(String,
    String)` method. The last step is to start the service with this intent. We will
    use the `startService()` method and not the typical `startActivity()` method because
    we use `startActivity` for starting activities through intents in Android.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以传统方式初始化一个意图，给出你刚刚创建的 `IntentService` 类，并放入你想要转换为大写的输入文本。通过 `Intent.putExtra(String,
    String)` 方法给这个意图提供额外的数据。最后一步是使用这个意图启动服务。我们将使用 `startService()` 方法，而不是典型的 `startActivity()`
    方法，因为在 Android 中我们使用 `startActivity` 来通过意图启动活动。
- en: Pending Intents
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pending Intents
- en: Pending Intents are the intents which give token to other applications or you
    may call it a foreign application that may access your intent permission to run
    the predefined piece of code. This way, many other applications such as Alarm
    Manager and Calendar may use your application in order to execute their tasks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Pending Intent 是一种允许其他应用（或称为外部应用）访问你的意图权限以运行预定义代码段的意图。这样，许多其他应用（如闹钟管理和日历）可以利用你的应用来执行它们的任务。
- en: Pending Intents are not run instantly; rather, they are run when some other
    activity wants it to run. Pending Intent is a reference that is maintained by
    the system so that it can be used at a later stage. That means that even if the
    application that contains the Pending Intent ends, another application can still
    use the context until `cancel()` is called over that intent.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Pending Intents 不会立即运行；而是在其他活动需要它运行时才执行。Pending Intent 是系统维护的一个引用，以便在稍后的阶段使用。这意味着即使包含
    Pending Intent 的应用结束了，另一个应用仍然可以使用该上下文，直到对该意图调用 `cancel()`。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To perform a broadcast via a Pending Intent, use Pending Intent via `PendingIntent.getBroadcast()`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 Pending Intent 执行广播，请使用 `PendingIntent.getBroadcast()` 获取 Pending Intent。
- en: The Pending Intents can be launched via three methods, `getActivity(Context
    context, int requestCode, Intent intent, int flags)`, `getBroadcast(Context context,
    int requestCode, Intent intent, int flags)`, and `getService(Context context,
    int requestCode, Intent intent, int flags)`. In order to have a view of Pending
    Intents and how it is made and used in an Android Application, you can proceed
    to the next section which deals with the implementation.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Pending Intents 可以通过三种方法启动，分别是 `getActivity(Context context, int requestCode,
    Intent intent, int flags)`、`getBroadcast(Context context, int requestCode, Intent
    intent, int flags)` 和 `getService(Context context, int requestCode, Intent intent,
    int flags)`。为了了解 Pending Intents 在 Android 应用中的制作和使用方式，您可以继续阅读下一节，其中将介绍实现过程。
- en: How to make Pending Intents work?
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何让 Pending Intents 工作？
- en: This section deals with the implementation and explanation of how Pending Intents
    work. In order to have a good understanding of this, we advise you to read the
    previously mentioned definition so that you understand it better.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍 Pending Intents 的工作原理及解释。为了更好地理解这一点，我们建议您阅读之前提到的定义，以便您能更好地理解。
- en: In this example, we will show you how to make an application in which the user
    can input time (in seconds) into the `editText` field (in seconds) after which
    an alarm will go off and Android's Alarm Manager will make an alarm which will
    be played accordingly.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将向您展示如何制作一个应用程序，用户可以在 `editText` 字段（以秒为单位）中输入时间，之后闹钟将会响起，Android 的闹钟管理器将根据相应地播放闹钟。
- en: 'To understand more, take a look at the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步了解，请查看以下代码：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The piece of code written previously can be inserted into any event which can
    be a button to get the input value in the `EditText` field and process it with
    Pending Intents. The list of steps that is required to understand the previous
    code are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 之前编写的代码片段可以插入到任何事件中，比如一个按钮，用于获取 `EditText` 字段中的输入值，并通过 Pending Intents 处理它。
- en: Get the edit text from the layout file and make an object name `text` which
    holds the current state of that widget.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从布局文件中获取编辑文本，并创建一个名为 `text` 的对象，该对象保存该小部件的当前状态。
- en: The integer variable `i` will hold the input value in the edit text which will
    be obtained by `text.getText().toString()`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整数变量 `i` 将保存编辑文本中的输入值，通过 `text.getText().toString()` 获取。
- en: Create an explicit intent with a `BroadcastReceiver` class as the Intent's target
    class (which we will make after completing this).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个显式意图，将 `BroadcastReceiver` 类作为意图的目标类（我们将在完成此部分后创建）。
- en: In order to initiate the Pending Intent, we use `PendingIntent.getBroadcast(Context
    context, int requestCode, Intent intent, int flags, int, Intent, int)`. More descriptions
    about this method can be found at [http://developer.android.com/reference/android/app/PendingIntent.html](http://developer.android.com/reference/android/app/PendingIntent.html).
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了启动 Pending Intent，我们使用 `PendingIntent.getBroadcast(Context context, int requestCode,
    Intent intent, int flags, int, Intent, int)` 方法。关于这个方法的更多描述可以在 [http://developer.android.com/reference/android/app/PendingIntent.html](http://developer.android.com/reference/android/app/PendingIntent.html)
    找到。
- en: Get the system service of Alarm by putting `ALARM_SERVICE` in the `getSystemService()`
    method and direct it towards an `AlarmManager` object.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `getSystemService()` 方法中传入 `ALARM_SERVICE` 来获取闹钟的系统服务，并将其指向一个 `AlarmManager`
    对象。
- en: Set the values of the Alarm Manager by the value stored in `i` and give it the
    Pending Intent which will help it to start (since Alarm Manager is a service of
    Android).
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用存储在 `i` 中的值设置闹钟管理器的值，并给它一个 Pending Intent，这将帮助它启动（因为闹钟管理器是 Android 的一个服务）。
- en: The `alarmManager.set()` method consists of the arguments `int` type, `long
    triggerMilliSec` (in which you take the current system time and add your variable
    `i` by converting it into milliseconds) and the Pending Intent.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`alarmManager.set()` 方法包含参数 `int` 类型的类型、`long triggerMilliSec`（在其中您取当前系统时间并将变量
    `i` 转换为毫秒后相加）以及 Pending Intent。'
- en: Make a toast in order to show the successful completion of the alarm management.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作一个吐司通知，以显示闹钟管理的成功完成。
- en: 'The next step is to make a Broadcast Receiver of your choice and implement
    that receiver. For this, make a Broadcast Receiver and override the method `onReceive()`.
    Take a look at the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建您选择的广播接收器并实现该接收器。为此，创建一个广播接收器并重写 `onReceive()` 方法。查看以下代码：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This receiver has a toast which will indicate its status of alarming. The next
    thing is to declare an object of the vibrator kind which can be initiated by calling
    the `context.getSystemService(Context.VIBRATOR_SERVICE)` method. This method is
    responsible for returning back the object which will directly influence the physical
    vibrator of the cell phone. The last step is to start the vibration by calling
    the `vibrator.vibrate(int)` method.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接收器有一个吐司提示，它会指示其报警状态。下一步是声明一个振动器对象，可以通过调用 `context.getSystemService(Context.VIBRATOR_SERVICE)`
    方法来初始化。这个方法负责返回直接影响手机物理振动器的对象。最后一步是调用 `vibrator.vibrate(int)` 方法来启动振动。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To play the vibrator, you need to add the permission inthe manifest file. You
    can do it by using the following piece of code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用振动器，你需要在清单文件中添加权限。你可以使用以下代码片段来完成这个操作：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the end, we have to declare this receiver in the `AndroidManifest.xml` file
    and we can do this simply by using the following piece of code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须在 `AndroidManifest.xml` 文件中声明这个接收器，可以通过使用以下代码简单地完成：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The previous example is describing the use of pending Intent and Broadcast Receivers
    together.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例描述了待定意图（pending Intent）和广播接收器（Broadcast Receivers）一起使用的情况。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概括
- en: The summary of the last chapter of this book can be considered as the conclusion
    of this book. In this chapter, we learned how to implement `intentService` and
    `PendingIntents` and their best case scenarios. The `IntentService` feature and
    its comparison with three most commonly used Android features, such as the Thread,
    Services, and Async Tasks. Moreover, in this chapter, the example of Pending Intent
    is implemented with the explanation of each step. This chapter can be considered
    to be an advance version, or rather you may say, advance use of intents which
    can be done in Android. Keeping in mind that the use of these functionalities
    is not likely to be used, but under certain cases you have to let them work because
    there will be no other solution.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的最后一章的概要可以作为本书的结论。在本章中，我们学习了如何实现 `intentService` 和 `PendingIntents` 以及它们最佳的应用场景。`IntentService`
    的特性及其与 Android 中最常使用的三种功能——线程（Thread）、服务（Services）和异步任务（Async Tasks）的比较。此外，在本章中，实现了待定意图的示例，并解释了每一步。可以将本章视为意图在
    Android 中高级版本或高级用法的介绍。需要记住的是，这些功能的使用可能并不常见，但在某些情况下，你必须让它们工作，因为没有其他解决方案。
