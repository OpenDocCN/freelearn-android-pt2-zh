- en: Chapter 2. Hello, Platforms!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章.你好，平台！
- en: If you are familiar with developing applications using Visual Studio on Windows,
    then using Xamarin Studio should be very straightforward. Xamarin uses the same
    concept of a **solution** containing one or more **projects**, and it has created
    several new project types for iOS and Android applications. There are also several
    project templates to jump-start your development of common applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉在Windows上使用Visual Studio开发应用程序，那么使用Xamarin Studio应该非常直接。Xamarin使用相同的概念，即一个**解决方案**包含一个或多个**项目**，并且它为iOS和Android应用程序创建了几种新的项目类型。还有几个项目模板可以让你快速启动常见应用程序的开发。
- en: Xamarin Studio supports several out-of-the-box project types, including standard
    .NET class libraries and console applications. You cannot natively develop Windows
    applications on a Mac with Xamarin Studio, but you can certainly develop the shared
    code portion of your application in Xamarin Studio. We'll focus on sharing code
    in the later chapters, but keep in mind that Xamarin enables you to share a common
    C# backend between most platforms that support C#.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio支持多种开箱即用的项目类型，包括标准的.NET类库和控制台应用程序。你无法在Mac上的Xamarin Studio中本地开发Windows应用程序，但你可以肯定的是，可以在Xamarin
    Studio中开发应用程序的共享代码部分。我们将在后面的章节中关注共享代码，但请记住，Xamarin使你能够在支持C#的大部分平台之间共享一个通用的C#后端。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating a simple calculator application for iOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为iOS创建一个简单的计算器应用程序
- en: Apple's MVC pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 苹果的MVC模式
- en: Xcode and storyboards
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode和故事板
- en: Creating a calculator application for Android
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为安卓创建计算器应用程序
- en: Android activities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓活动
- en: Xamarin's Android designer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamarin的安卓设计师
- en: Building your first iOS application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立你的第一个iOS应用程序
- en: Launch Xamarin Studio and start a new solution. Just like in Visual Studio,
    there are lots of project types that can be created from the **New Solution**
    dialog. Xamarin Studio, formerly **MonoDevelop**, supports the development of
    many different types of projects such as C# applications targeting the Mono runtime
    or .NET Core, NUnit test projects, and even other languages besides C#, such as
    VB or C++.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Xamarin Studio并开始一个新的解决方案。与Visual Studio一样，**新建解决方案**对话框中有许多可以创建的项目类型。Xamarin
    Studio（前称**MonoDevelop**）支持开发许多不同类型的项目，如针对Mono运行时或.NET Core的C#应用程序、NUnit测试项目，甚至除了C#之外的其他语言，如VB或C++。
- en: 'Xamarin Studio supports the following project types for iOS:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio支持以下iOS项目类型：
- en: '**Single View App**: This is the basic project type that sets up an iOS storyboard
    along with a single view and controller.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单视图应用**: 这是一个基本的项目类型，它设置了一个iOS故事板以及一个单一视图和控制器。'
- en: '**Master Detail App**: a project type containing a list of items that you can
    tap to view details about. On iPhone/iPod it will use multiple controls taking
    up the full screen area and the iOS `UISplitViewController` on iPad.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主从应用**: 一种项目类型，其中包含你可以点击查看详细信息的项目列表。在iPhone/iPod上，它将使用多个控件占据整个屏幕区域，而在iPad上使用iOS的`UISplitViewController`。'
- en: '**Tabbed App**: This is a project type that automatically sets up a `UITabViewController`
    for applications with a tab layout.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签应用**: 这种项目类型会自动为具有标签布局的应用程序设置`UITabViewController`。'
- en: '**Page-Based App**: This project type automatically sets up a `UIPageViewController`
    for paging between screens as a carousel.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于页面的应用**: 这种项目类型会自动设置`UIPageViewController`，以便在屏幕间以轮播的方式分页。'
- en: '**WebView App**: This project type is for creating "hybrid" applications that
    are partially HTML and partially native. The application is set up to take advantage
    of the Razor templating features of Xamarin Studio.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebView应用**: 这种项目类型用于创建“混合”应用程序，部分是HTML，部分是原生应用。该应用程序设置为利用Xamarin Studio的Razor模板功能。'
- en: '**Class Library**: This is a class library used within other iOS application
    projects.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类库**: 这是一个在其他iOS应用程序项目中使用的类库。'
- en: '**Bindings Library**: This is an iOS project that can create C# bindings for
    an Objective-C library.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定库**: 这是一个iOS项目，可以为Objective-C库创建C#绑定。'
- en: '**UI Test App**: An NUnit test project for running UI tests either locally
    or on Xamarin Test Cloud.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI测试应用**: 用于运行UI测试的NUnit测试项目，可以在本地或Xamarin Test Cloud上运行。'
- en: '**Unit Test App**: This is a special iOS application project that can run NUnit
    tests.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试应用**: 这是一个特殊的iOS应用程序项目，可以运行NUnit测试。'
- en: 'To get started, create a new solution and navigate to **iOS** | **App**, and
    create a **Single View App** as seen in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请创建一个新解决方案，并导航到**iOS** | **App**，然后创建一个如以下截图所示的**单视图应用**：
- en: '![Building your first iOS application](img/image00199.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![构建你的第一个iOS应用程序](img/image00199.jpeg)'
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Visual Studio, you can create the correct type of project from **Visual C#
    | iOS | Universal | Single View App** in the new solution dialog.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，你可以在新解决方案对话框中从**Visual C# | iOS | Universal | 单视图应用**创建正确类型的项目。
- en: 'In the next step, we will need to:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将需要：
- en: Choose an **App Name**.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个**应用名称**。
- en: Choose an **Organizational Identifier**, which is a "reverse" domain name to
    uniquely identify your app.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个**组织标识符**，这是一个“反向”域名，用来唯一标识你的应用。
- en: Select which iOS devices you want to support; you can keep the default.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想要支持的iOS设备；你可以保留默认设置。
- en: Select the minimum iOS version you want to support; you can keep the default.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想要支持的最低iOS版本；你可以保留默认设置。
- en: Finally, on the last step, choose a directory to put your project and click
    **Create**.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步，选择一个目录来放置你的项目，然后点击**创建**。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Visual Studio, these settings are available by opening **Project Options**
    for the iOS project. Xamarin Studio has additional steps in its new project dialog,
    but you can always edit these settings after the fact.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，你可以通过打开iOS项目的**项目选项**来访问这些设置。Xamarin Studio在其新项目对话框中有额外的步骤，但事后你总是可以编辑这些设置。
- en: 'You''ll notice that several files and folders are automatically created from
    the project template. These files are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，项目模板会自动创建几个文件和文件夹。这些文件如下：
- en: '`References`: These are the standard references to other libraries you know
    and love from .NET.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`References`：这是你熟知的.NET其他库的标准引用。'
- en: '`Components`: This folder will contain any components added from the Xamarin
    Component store. See [Chapter 9](part0073.xhtml#aid-25JP21 "Chapter 9. Web Services
    with Push Notifications"), *Web Services with Push Notifications*, for more info
    about the Xamarin Component store.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Components`：这个文件夹将包含从Xamarin组件商店添加的任何组件。有关Xamarin组件商店的更多信息，请参见[第9章](part0073.xhtml#aid-25JP21
    "第9章. 带推送通知的Web服务")，*带推送通知的Web服务*。'
- en: '`Resources`: This directory will contain any images or plain files that you
    want to be copied directly to your application bundle.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources`：这个目录将包含任何你想要直接复制到应用程序包中的图片或普通文件。'
- en: '`AppDelegate.cs`: This is Apple''s main class for handling application-level
    events in your app.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppDelegate.cs`：这是苹果用于处理应用中应用程序级别事件的主类。'
- en: '`Entitlements.plist`: This is a settings file Apple uses to declare permissions
    for certain iOS features such as push notifications and iCloud. You will generally
    only have to use it for advanced iOS features.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Entitlements.plist`：这是一个设置文件，苹果用它来声明某些iOS功能（如推送通知和iCloud）的权限。通常你只有在使用高级iOS功能时才需要使用它。'
- en: '`*ViewController.cs`: This is the controller that represents the first screen
    in your app. It will have the same name as your project.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ViewController.cs`：这是表示应用中第一个屏幕的控制器。它将与你的项目同名。'
- en: '`Info.plist`: This is Apple''s version of a **manifest** file that can declare
    various settings for your application such as the app title, icon, splash screens,
    and other common settings.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Info.plist`：这是苹果版本的一个**清单**文件，可以声明应用程序的各种设置，如应用标题、图标、启动画面和其他常见设置。'
- en: '`LaunchScreen.storyboard`: This is a storyboard file for laying out the splash
    screen for your application. By default, Xamarin''s project template puts the
    name of your project here.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LaunchScreen.storyboard`：这是一个用于布局应用程序启动画面的Storyboard文件。默认情况下，Xamarin的项目模板在这里放置你的项目名称。'
- en: '`Main.cs`: This file contains the standard entry point for a C# program: `static
    void Main()`. It''s most likely that you will not need to modify this file.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main.cs`：这个文件包含了C#程序的标准入口点：`static void Main()`。你很可能不需要修改这个文件。'
- en: '`MainStoryboard.storyboard`: This is the storyboard definition file for your
    application. It will contain the layouts for the views in your app, list of controllers,
    and the transitions for navigating throughout your app. A storyboard is exactly
    how it sounds: a diagram/flowchart of the different screens in your iOS application.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainStoryboard.storyboard`：这是你的应用程序的Storyboard定义文件。它将包含你的应用中的视图布局、控制器列表以及应用内导航的过渡效果。Storyboard正如其名：是你iOS应用程序中不同屏幕的图解/流程图。'
- en: 'Now, let''s run the application to see what we get by default from the project
    template. Click on the large play button in the top-left corner of Xamarin Studio.
    You will be greeted by the simulator running your first iOS application as seen
    in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行应用程序，看看从项目模板中默认得到什么。点击Xamarin Studio左上角的大播放按钮。你将看到模拟器正在运行你的第一个iOS应用程序，如下截图所示：
- en: '![Building your first iOS application](img/image00200.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![构建你的第一个iOS应用程序](img/image00200.jpeg)'
- en: So far, your app is just a plain white screen, which is not very exciting or
    useful. Let's get a little more background on iOS development before moving forward.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的应用只是一个纯白色的屏幕，这并不令人兴奋或有用。在继续前进之前，让我们对iOS开发有更多的了解。
- en: Depending on your application's minimum iOS target, you can also run the application
    on different versions of the iOS simulator. Apple also provides simulators for
    iPad and all the different iOS devices currently in the market. It is also important
    to know that these are simulators and not emulators. An emulator will run an encapsulated
    version of the mobile OS (just as Android does). Emulators generally exhibit slower
    performance but give you a closer replica of the real OS. Apple's simulators run
    as native Mac applications and are not true operating systems. The benefit is
    that they are very fast in comparison to Android emulators.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的应用程序支持的最低iOS版本，你也可以在不同的iOS模拟器版本上运行应用程序。苹果还提供了针对iPad以及市场上所有不同iOS设备的模拟器。重要的是要知道这些是模拟器而非仿真器。仿真器将运行封装版的移动操作系统（就像Android那样）。仿真器通常性能较慢，但能更接近真实操作系统的复制。苹果的模拟器作为本地Mac应用程序运行，并不是真正的操作系统。其好处是相较于Android仿真器，它们运行得非常快。
- en: Understanding Apple's MVC pattern
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解苹果的MVC模式
- en: Before getting too far with iOS development, it is really important to get a
    foundation on Apple's design pattern for developing on iOS. You might have used
    the **Model View Controller (MVC)** pattern with other technologies such as **ASP.NET**,
    but Apple implements this paradigm in a slightly different way. Apples core set
    of APIs for developing UIs for iOS applications is called UIKit. Xamarin applications
    can take full advantage of UIKit by directly using these APIs from C#. UIKit is
    heavily based on the MVC design pattern.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入iOS开发之前，了解苹果公司在iOS开发中的设计模式是非常重要的。你可能在其他技术（如**ASP.NET**）中使用过**模型视图控制器（MVC）**模式，但苹果公司对此范式的实现略有不同。苹果为开发iOS应用程序的用户界面提供了一套核心API，称为UIKit。Xamarin应用程序可以通过直接使用C#中的这些API来充分利用UIKit。UIKit主要基于MVC设计模式。
- en: 'The **MVC** design pattern includes the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**MVC**设计模式包括以下内容：'
- en: '**Model**: This is the backend business logic driving the application. This
    can be any code that, for example, makes web requests to a server or saves data
    to a local **SQLite** database.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这是驱动应用程序的后端业务逻辑。这可以是任何代码，例如，向服务器发起网络请求或保存数据到本地**SQLite**数据库。'
- en: '**View**: This is the actual user interface seen on the screen. In iOS terms,
    this is any class that derives from `UIView`. Examples are toolbars, buttons,
    and anything else the user would see on the screen and interact with.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这是屏幕上实际的用户界面。在iOS的术语中，这是从`UIView`派生的任何类。例如工具栏、按钮，以及用户在屏幕上看到和与之交互的任何其他内容。'
- en: '**Controller**: This is the workhorse of the **MVC** pattern. The controller
    interacts with the **Model** layer and updates the **View** layer with the results.
    Similar to the **View** layer, any controller class would derive from `UIViewController`.
    This is where a good portion of the code in iOS applications resides.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这是**MVC**模式中的工作马。控制器与**模型**层交互，并将结果更新到**视图**层。与**视图**层类似，任何控制器类都将从`UIViewController`派生。这是iOS应用程序中大部分代码所在的地方。'
- en: 'The following image shows the MVC design pattern:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了MVC设计模式：
- en: '![Understanding Apple''s MVC pattern](img/image00201.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![理解苹果的MVC模式](img/image00201.jpeg)'
- en: 'To understand this pattern better, let''s walk through the following example
    of a common scenario:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这个模式，让我们通过以下常见场景的示例来一步步了解：
- en: We have an iOS application with a search box that needs to query a website for
    a list of jobs.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个iOS应用程序，其中包含一个搜索框，需要查询网站上的职位列表。
- en: The user will enter some text into the `UITextField` textbox and click on the
    `UIButton` button to start the search. This is the **View** layer.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将在`UITextField`文本框中输入一些文本，并点击`UIButton`按钮开始搜索。这是**视图**层。
- en: Some code will respond to the button by interacting with the **View**, display
    a `UIActivityIndicatorView` spinner, and call a method in another class to perform
    the search. This is the **Controller** layer.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 某些代码将响应按钮与**视图**交互，显示一个`UIActivityIndicatorView`加载指示器，并调用另一个类中的方法来执行搜索。这是**控制器**层。
- en: A web request will be made in the called class and a list of jobs will be returned
    asynchronously. This is the **Model** layer.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 被调用的类中将发起一个网络请求，并异步返回一个职位列表。这是**模型**层。
- en: The **Controller** will then update the **View** with the list of jobs and hide
    the spinner.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**控制器**随后将使用职位列表更新**视图**，并隐藏加载指示器。'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Apple's MVC pattern, see the documentation site at [https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/MVC.html](https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/MVC.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Apple的MVC模式的更多信息，请访问[https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/MVC.html](https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/MVC.html)的文档网站。
- en: A point to note is that you are free to do anything you want in the model layer
    of your application. This is where we can use plain C# classes that can be reused
    on other platforms such as Android. This includes any functionality using the
    C# **Base Class Libraries** (**BCL**), such as working with web services or a
    database. We'll dive deeper into cross-platform architecture and code-sharing
    concepts later in the book.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，你可以自由地应用中模型层做任何想做的事情。这里我们可以使用普通的C#类，这些类可以在其他平台如Android上复用。这包括使用C#的**基类库**（**BCL**）的任何功能，比如与网络服务或数据库交互。我们将在书中深入探讨跨平台架构和代码共享概念。
- en: Using the iOS designer
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用iOS设计师
- en: Since our plain white application is quite boring, let's modify the view layer
    of our application with some controls. To do this, we will modify the `MainStoryboard.storyboard`
    file in your project in Xamarin Studio or Visual Studio. Optionally, you can open
    the storyboard file in Xcode, which was previously the method of editing storyboard
    files before the Xamarin.iOS designer. Using Xcode could still be useful if there
    is a feature in iOS storyboards which isn't available in the Xamarin designer,
    or if you need to edit an older iOS format such as XIB files. However, Xcode is
    not quite as good of an experience, since custom controls in Xcode render as plain,
    white squares. Xamarin's designer actually runs your drawing code in custom controls,
    so that you get an accurate view of what your application will look like at runtime.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们纯白色的应用程序相当乏味，让我们通过一些控件来修改应用程序的视图层。为此，我们将在Xamarin Studio或Visual Studio中修改项目中的`MainStoryboard.storyboard`文件。可选地，你也可以在Xcode中打开故事板文件，这在Xamarin.iOS设计师之前是编辑故事板文件的方法。如果Xamarin设计师中不存在iOS故事板的功能，或者你需要编辑较旧的iOS格式如XIB文件，使用Xcode仍然有用。但是，Xcode的体验并不好，因为Xcode中的自定义控件呈现为普通的白色方块。Xamarin的设计师实际上运行你的自定义控件中的绘图代码，因此你可以准确地看到应用程序在运行时的样子。
- en: 'Let''s add some controls to our app by performing the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过执行以下步骤向我们的应用程序添加一些控件：
- en: Open the project you created earlier in this chapter in Xamarin Studio.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中打开本章早前创建的项目。
- en: Double-click on the `MainStoryboard.storyboard` file.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`MainStoryboard.storyboard`文件。
- en: The iOS designer will open, and you will see the layout for the single controller
    in your application.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iOS设计师界面将会打开，你可以看到应用程序中单一控制器的布局。
- en: In the **Document Outline** tab on the right, you'll see that your controller
    contains a single view in its layout hierarchy.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧的**文档大纲**标签页中，你会看到你的控制器在其布局层次结构中包含了一个单一视图。
- en: In the top-left corner, you'll notice a toolbox containing several types of
    objects that you can drag-and-drop onto your controller's view.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左上角，你会注意到一个工具箱，其中包含多种类型的对象，你可以将它们拖放到控制器的视图中。
- en: In the search box, search for `UILabel` and drag the label centered at the top
    of the screen.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中搜索`UILabel`，并将标签拖动到屏幕顶部居中位置。
- en: Double-click on the label to edit the text of the label to the number zero (**0**).
    You can also fill out this value from the **Properties** tab in the bottom right.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击标签以将标签文本编辑为零（**0**）。你也可以从右下角的**属性**标签页中填写这个值。
- en: Likewise, search for `UIButton` and create 10 buttons numbered **0-9** to create
    a number pad. You may edit the text on the button by using the **Properties**
    tab. You can also use **Copy/Paste** to speed up creating them. Double-clicking
    the button would add a click event handler, which you might be familiar with from
    Visual Studio when developing for other platforms.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，搜索 `UIButton` 并创建10个编号为**0-9**的按钮，以形成一个数字键盘。你可以通过使用**属性**标签来编辑按钮上的文本。你也可以使用**复制/粘贴**来加速创建过程。双击按钮会添加一个点击事件处理程序，这对于在其他平台上使用Visual
    Studio进行开发的人来说可能很熟悉。
- en: Run the application.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。
- en: 'Your application should start looking a lot more like a real application (a
    calculator) as seen in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序应该看起来更像一个真正的应用程序（计算器），如下面的截图所示：
- en: '![Using the iOS designer](img/image00202.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![使用iOS设计器](img/image00202.jpeg)'
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Visual Studio on Windows, these steps are identical to Xamarin Studio on
    a Mac. Keep in mind that you must remain connected to a Mac on your local network
    to use the Xamarin.iOS designer. Instructions for connecting to a Mac are in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Xamarin Setup"), *Xamarin Setup*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上的Visual Studio中，这些步骤与Mac上的Xamarin Studio相同。请记住，要使用Xamarin.iOS设计器，你必须保持与本地网络上的Mac连接。有关连接到Mac的说明，请参见[第1章](part0015.xhtml#aid-E9OE1
    "第1章. Xamarin设置")，*Xamarin设置*。
- en: Now you might be wondering about adding user interaction options to the app
    at this point. In Xcode's iOS designer, you would make an **outlet** that makes
    each view visible from C#. An outlet is a reference to a view in a storyboard
    or XIB file that will be filled out with an instance of the view at runtime. You
    can compare this concept to naming a control in other technologies such as **ASP.NET**,
    **WebForms**, or **WPF** (**Windows Presentation Foundation**). Luckily Xamarin's
    iOS designer is a bit simpler than setting up an outlet in Xcode. You merely fill
    out the **Name** field in the **Properties** tab, and Xamarin Studio will generate
    a property in a **partial class**, which gives you access to the label and button
    from your controller. Additionally, you can wire an **action** from a storyboard
    file, which is a method that will be called when an event occurs. Xamarin Studio
    exposes iOS actions as partial methods to be implemented in your classes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此时你可能会想知道如何为应用添加用户交互选项。在Xcode的iOS设计器中，你会创建一个**出口**，使每个视图在C#中可见。出口是引用故事板或XIB文件中的视图的引用，在运行时将用视图的实例填充。你可以将这个概念与其他技术中为控件命名的概念进行比较，例如**ASP.NET**、**WebForms**或**WPF**（**Windows
    Presentation Foundation**）。幸运的是，Xamarin的iOS设计器比在Xcode中设置出口要简单一些。你只需在**属性**标签的**名称**字段中填写，Xamarin
    Studio 就会在**部分类**中生成一个属性，使你能够从控制器访问标签和按钮。此外，你还可以从故事板文件中连接一个**动作**，这是一个在事件发生时将被调用的方法。Xamarin
    Studio 将iOS动作作为部分方法公开，以便在你的类中实现。
- en: 'Let''s add some interactions to the app as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式为应用添加一些交互：
- en: Switch back to Xamarin Studio.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回Xamarin Studio。
- en: Double-click on the `MainStoryboard.storyboard` file again.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次双击 `MainStoryboard.storyboard` 文件。
- en: Select the label you created earlier and navigate to the **Properties** pane
    and make sure you have the **Widget** tab selected.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你之前创建的标签，并导航到**属性**窗格，确保你已选择**小部件**标签页。
- en: Enter the name `label` in the **Name** field.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入 `label`。
- en: Create a new button with the text **+** for addition.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有文本**+**的按钮用于加法。
- en: Change to the **Events** tab.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**事件**标签页。
- en: Enter the name `OnAdd` into its **Up Inside** field. You can remember this as
    the "click" event for the button.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Up Inside**字段中输入名称 `OnAdd`。你可以将此视为按钮的“点击”事件。
- en: Xamarin Studio will direct you on where to place the `OnAdd` method in your
    `UIViewController`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xamarin Studio 将指导你将 `OnAdd` 方法放置在 `UIViewController` 中的位置。
- en: Repeat this process for each of the number buttons, but name the **Up Inside**
    event `OnNumber`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个数字按钮重复此过程，但将**Up Inside**事件命名为 `OnNumber`。
- en: Create a new button with the text **=** for the calculator.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为计算器创建一个带有文本**=**的新按钮。
- en: Change to the **Events** tab.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**事件**标签页。
- en: Enter the name `OnEquals` into its **Up Inside** field.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Up Inside**字段中输入名称 `OnEquals`。
- en: Xamarin has improved this experience greatly from what the experience used to
    be in Xcode. Xcode has a strange interface for those more familiar with tools
    like Visual Studio. The method for creating an outlet involved clicking and dragging
    from the control onto an Objective-C header file. Merely filling out a **Name**
    field is much simpler and much more intuitive for developers that have a C# background.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin在这方面已经大大改善了从Xcode中的体验。对于更熟悉Visual Studio等工具的人来说，Xcode有一个奇怪的界面。创建出口的方法涉及到点击并从控件拖动到Objective-C头文件。仅仅填写一个**名称**字段对于有C#背景的开发者来说要简单得多，也更直观。
- en: 'Now that we have two outlets defined, two new properties will be available
    from your controller. Expand the `*ViewController.cs` file in your solution and
    open the `*ViewController.designer.cs` file. You will see your properties defined
    as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经定义了两个出口，你的控制器将可以使用两个新的属性。在你的解决方案中展开`*ViewController.cs`文件并打开`*ViewController.designer.cs`文件。你会看到你的属性定义如下：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It is not a good idea to modify this file since the IDE will rebuild it if you
    make further changes in the designer or Xcode. Nevertheless, it is good practice
    to learn how things are actually working behind the scenes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 修改这个文件不是一个好主意，因为如果你在设计师或Xcode中做出进一步更改，IDE会重新构建它。尽管如此，了解幕后实际工作原理是一个好习惯。
- en: 'Open your `*ViewController.cs` file, and let''s enter the following code in
    your controller''s method:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`*ViewController.cs`文件，让我们在你的控制器方法中输入以下代码：
- en: '[PRE1]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Most of this code is just general C# logic for making a calculator operate.
    In the `OnAdd` method we append a `+` symbol if the label's text is non-empty.
    In the `OnNumber` method we replace or append to the label's text appropriately.
    Finally, in the `OnEquals` method we calculate the expression residing in the
    label with a string split operation and integer conversion. We then place the
    result in the label's text.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的大部分只是用于实现计算器操作的通用C#逻辑。在`OnAdd`方法中，如果标签文本非空，我们会添加一个`+`符号。在`OnNumber`方法中，我们适当地替换或追加标签文本。最后，在`OnEquals`方法中，我们使用字符串分割操作和整数转换计算标签中的表达式。然后，我们将结果放入标签文本中。
- en: 'Run your application, and you will be able to interact with your calculator
    as shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，你将能够与计算器进行交互，如下面的截图所示：
- en: '![Using the iOS designer](img/image00203.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![使用iOS设计师](img/image00203.jpeg)'
- en: Now would be a good time to complete this exercise on your own and finish the
    calculator. Adding buttons for subtraction, multiplication, division, and a "clear"
    button would complete the simple calculator. This should get you a handle on working
    with Apple's APIs for `UIButton`, `UILabel`, and basics of the UIKit framework.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个自己完成这个练习并完成计算器的好时机。添加减法、乘法、除法按钮以及一个"清除"按钮，这将完成简单计算器。这应该能让你掌握使用Apple的`UIButton`、`UILabel`
    API以及UIKit框架的基础知识。
- en: Since we have gone over the basics of laying out controls in Xamarin's iOS designer
    and interacting with outlets in C#, let's go over the standard life cycle of an
    iOS application. The primary location for handling application-level events is
    in the `AppDelegate` class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了在Xamarin的iOS设计师中布局控件以及在C#中与出口交互的基础知识，那么让我们来了解一下iOS应用程序的标准生命周期。处理应用程序级事件的主要位置是在`AppDelegate`类中。
- en: 'If you open your `AppDelegate.cs` file, you can override the following methods:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开你的`AppDelegate.cs`文件，你可以重写以下方法：
- en: '`FinishedLaunching`: This is the first entry point for the application, which
    should return `true`.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FinishedLaunching`：这是应用程序的第一个入口点，应该返回`true`。'
- en: '`DidEnterBackground`: This means the user clicked on the home button on their
    device or another app, such as a phone call, came to the foreground. You should
    perform any action needed to save the user''s progress or state of the UI as the
    iOS may kill your application once pushed to the background. While your application
    is in the background, the user could be navigating through the home screen or
    opening other apps. Your application is effectively paused in memory until resumed
    by the user.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DidEnterBackground`：这意味着用户点击了设备上的主页按钮，或者有其他应用，如电话，切换到前台。你应该执行任何需要保存用户进度或UI状态的操作，因为iOS可能会在应用退到后台时杀死你的应用。当你的应用在后台时，用户可能正在浏览主屏幕或打开其他应用。你的应用实际上是在内存中被暂停，直到被用户恢复。'
- en: '`WillEnterForeground`: This means the user has reopened your application from
    the background. You might need to perform other actions here such as refreshing
    the data on the screen and so on.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WillEnterForeground`：这意味着用户已经从后台重新打开了你的应用程序。你可能需要在这里执行其他操作，比如刷新屏幕上的数据等。'
- en: '`OnResignActivation`: This happens if the operating system displays a system
    popup on top of your application. Examples of this are calendar reminders or the
    menu the user can swipe down from the top of the screen.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnResignActivation`：当操作系统在应用程序顶部显示系统弹窗时会发生这种情况。例如日历提醒或用户从屏幕顶部向下滑动的菜单。'
- en: '`OnActivated`: This happens immediately after the `OnResignActivation` method
    is executed as the user returns to your app.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnActivated`：这发生在`OnResignActivation`方法执行后，用户返回到你的应用时立即发生。'
- en: '`ReceiveMemoryWarning`: This is a warning from the operating system to free
    up the memory in your application. It is not commonly needed with Xamarin because
    of the C#''s garbage collector, but if there are any heavy objects such as images
    throughout your app, this is a good place to dispose them. If enough memory cannot
    be freed, the operating system could terminate your application.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReceiveMemoryWarning`：这是操作系统发出的警告，要求释放应用程序中的内存。由于C#的垃圾收集器，这在Xamarin中通常不需要，但如果应用程序中有任何重对象，如图片等，这是一个处理它们的好地方。如果无法释放足够的内存，操作系统可能会终止你的应用程序。'
- en: '`HandleOpenUrl`: This is called if you implement a **URL scheme**, which is
    the iOS equivalent of file extension associations on a desktop platform. If you
    register your app for opening different types of files or URLs, this method will
    be called.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HandleOpenUrl`：如果你实现了**URL方案**，这是会调用的，它是iOS平台上相当于桌面平台的文件扩展名关联。如果你注册了你的应用程序以打开不同类型的文件或URL，这个方法将被调用。'
- en: 'Likewise, in your `*ViewController.cs` file, you can override the following
    methods on your controller:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在你的`*ViewController.cs`文件中，你可以在控制器上覆盖以下方法：
- en: '`ViewDidLoad`: This occurs when the view associated with your controller is
    loaded. It will occur only once on devices running iOS 6 or higher.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewDidLoad`：当与你的控制器关联的视图加载时，会发生这种情况。在运行iOS 6或更高版本的设备上，它只发生一次。'
- en: '`ViewWillAppear`: This occurs prior to your view appearing on the screen. If
    there are any views that need to be refreshed while navigating throughout your
    app, this is generally the best place to do it.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewWillAppear`：这发生在你的视图在屏幕上出现之前。如果应用程序导航过程中有任何视图需要刷新，这通常是最好的地方。'
- en: '`ViewDidAppear`: This occurs after the completion of any transition animations
    and your view is displayed on the screen. In some uncommon situations, you might
    need to perform actions here instead of in `ViewWillAppear`.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewDidAppear`：这发生在任何过渡动画完成后，你的视图在屏幕上显示之后。在某些不常见的情况下，你可能需要在这里而不是在`ViewWillAppear`中执行操作。'
- en: '`ViewWillDisappear`: This method is called prior to your view being hidden.
    You might need to perform some clean-up operations here.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewWillDisappear`：在您的视图被隐藏之前会调用此方法。你可能需要在这里执行一些清理操作。'
- en: '`ViewDidDisappear`: This occurs after any transition animations are completed
    for displaying a different controller on the screen. Just like the methods for
    appearing, this occurs after `ViewWillDisappear`.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewDidDisappear`：这发生在完成显示屏幕上不同控制器的过渡动画之后。与出现的 方法一样，这发生在`ViewWillDisappear`之后。'
- en: There are several more methods available to override, but many are deprecated
    for newer versions of iOS. Familiarize yourself with Apple's documentation site
    at [http://developer.apple.com/library/ios](http://developer.apple.com/library/ios).
    It is very helpful to read the documentation on each class and method when trying
    to understand how Apple's APIs work. Learning how to read (not necessarily code)
    Objective-C is also a useful skill to learn so that you are able to convert Objective-C
    examples to C# when developing iOS applications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多可以覆盖的方法，但许多方法在新版本的iOS中已被弃用。熟悉苹果的文档网站 [http://developer.apple.com/library/ios](http://developer.apple.com/library/ios)。在尝试理解苹果API的工作原理时，阅读每个类和方法的文档非常有帮助。学习如何阅读（不一定是编写）Objective-C也是一个有用的技能，这样你在开发iOS应用程序时能够将Objective-C示例转换为C#。
- en: Building your first Android application
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个Android应用程序
- en: Setting up an Android application in Xamarin Studio is just as easy as it is
    for iOS and is very similar to the experience in Visual Studio. Xamarin Studio
    includes several project templates that are specific for Android to jump-start
    your development.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin Studio 中设置 Android 应用程序与在 iOS 上一样简单，并且与 Visual Studio 中的体验非常相似。Xamarin
    Studio 包含了几个特定的 Android 项目模板，以便快速开始开发。
- en: 'Xamarin Studio includes the following project templates:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio 包含以下项目模板：
- en: '**Android App**: A standard Android application that targets the newest Android
    SDKs installed on your machine.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android 应用**：一个标准的 Android 应用程序，目标是安装在机器上的最新 Android SDK。'
- en: '**Wear App**: A project targeting Android Wear, for smartwatch devices.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wear 应用**：一个针对 Android Wear，适用于智能手表设备的项目。'
- en: '**WebView App**: A project template for a hybrid app using HTML for certain
    parts. Support for Razor templating is available.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebView 应用**：一个使用 HTML 实现部分功能的混合应用的工程模板。支持 Razor 模板。'
- en: '**Class Library**: A class library that can only be referenced by Android application
    projects.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类库**：只能被 Android 应用程序项目引用的类库。'
- en: '**Bindings Library**: A project for setting up a Java library to be called
    from C#.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定库**：一个用于设置可以从 C# 调用的 Java 库的项目。'
- en: '**UI Test App**: an NUnit test project for running UI tests either locally
    or on Xamarin Test Cloud.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI 测试应用**：一个 NUnit 测试项目，用于在本地或 Xamarin Test Cloud 上运行 UI 测试。'
- en: '**Unit Test App**: This is a special Android application project that can run
    NUnit tests.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试应用**：这是一个特殊的 Android 应用程序项目，可以运行 NUnit 测试。'
- en: Launch Xamarin Studio and start a new solution. From the **New Solution** dialog,
    create a new **Android App** under the **Android** section. Select
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Xamarin Studio 并开始一个新的解决方案。在**新建解决方案**对话框中，在**Android**部分创建一个新的**Android
    应用**。选择
- en: 'You will end up with a solution looking something like the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最终你将得到一个类似于以下截图的解决方案：
- en: '![Building your first Android application](img/image00204.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![构建你的第一个 Android 应用程序](img/image00204.jpeg)'
- en: Tip
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Visual Studio, the Android project template is found under **Android | Blank
    App**.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，Android 项目模板位于**Android | 空白应用**下。
- en: 'You''ll notice that the following files and folders specific to Android have
    been created for you:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，以下特定于 Android 的文件和文件夹已经为你创建：
- en: The `Components` folder. This is the same as for iOS projects, the place for
    adding components from the Xamarin Component Store.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Components` 文件夹。这与 iOS 项目相同，是添加来自 Xamarin 组件商店的组件的地方。'
- en: 'The `Assets` folder: This directory will contain files with a `build` action
    of `AndroidAsset`. This folder will contain raw files to be bundled with an Android
    application.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Assets` 文件夹：这个目录将包含具有 `AndroidAsset` 构建动作的文件。这个文件夹将包含要随 Android 应用程序捆绑的原始文件。'
- en: '`Properties/AndroidManifest.xml`: This file contains standard declarations
    about your Android applications, such as the application name, ID, and permissions.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties/AndroidManifest.xml`：这个文件包含了关于你的 Android 应用程序的标准声明，如应用程序名称、ID 和权限。'
- en: 'The `Resources` folder: Resources are images, layouts, strings, and so on that
    can be loaded via Android''s resource system. Each file will have an ID generated
    in `Resources.designer.cs` that you can use to load the resource.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources` 文件夹：资源包括可以经由 Android 资源系统加载的图片、布局、字符串等。每个文件将在 `Resources.designer.cs`
    中生成一个 ID，你可以使用它来加载资源。'
- en: 'The `Resources/drawable` folder: Any images used by your application are generally
    placed here.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/drawable` 文件夹：通常将应用程序使用的任何图片放在这里。'
- en: 'The `Resources/layout` folder: This contains any `*.axml` (Android XML) files
    that Android uses for declaring UIs. Layouts can be for an entire **activity**,
    **fragment**, **dialog**, or **child control** to be displayed on the screen.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/layout` 文件夹：这包含了 Android 用来声明 UI 的 `*.axml`（Android XML）文件。布局可以是整个**活动**、**片段**、**对话框**或要在屏幕上显示的**子控件**。'
- en: '`Resources/mipmap-*` folders: Contain icons for your application to be displayed
    on different Android devices'' home screens. App icons in these because they are
    used at resolutions different from the device''s current density.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/mipmap-*` 文件夹：包含在不同 Android 设备主屏幕上显示的应用程序图标。这些文件夹中的应用图标因为它们用于与设备当前密度不同的分辨率。'
- en: 'The `Resources/values` folder: This contains XML files to declare key-value
    pairs for strings (and other types) throughout an application. This is how localization
    for multiple languages is normally set up on Android.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/values` 文件夹：这包含了声明应用程序中字符串（和其他类型）的键值对的 XML 文件。这是在 Android 上通常设置多语言本地化的方式。'
- en: '`MainActivity.cs`: This is the `MainLauncher` action and the first activityof
    your Android application. There is no `static void Main` function in Android apps;
    execution begins on the activity that has `MainLauncher` set to `true`.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainActivity.cs`：这是`MainLauncher`操作和你的安卓应用程序的第一个活动。在Android应用中没有`static void
    Main`函数；执行从设置了`MainLauncher`为`true`的活动开始。'
- en: 'Now let''s perform the following steps to run the application:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们执行以下步骤来运行应用程序：
- en: Click on the play button to compile and run the application.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击播放按钮编译并运行应用程序。
- en: A **Select Device** dialog may appear.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能会出现一个**选择设备**对话框。
- en: Select the emulator of your choice and click on **Start Emulator**. If you have
    set up the x86 emulator in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Xamarin
    Setup"), *Xamarin Setup*, I would recommend using it.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你喜欢的模拟器，并点击**启动模拟器**。如果你在[第1章](part0015.xhtml#aid-E9OE1 "第1章。Xamarin 设置")，*Xamarin
    设置*中设置了x86模拟器，我建议使用它。
- en: Wait a few seconds for the emulator to start. Once it starts, it is a good idea
    to leave it running as long as you are working on an Android project. This will
    save you a good deal of time waiting.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟让模拟器启动。一旦启动，建议在你从事Android项目工作时让它保持运行。这将为你节省大量等待时间。
- en: You should see the emulator now enabled in the list of devices; select it, and
    click on **OK**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该在设备列表中看到已启用的模拟器；选择它，然后点击**确定**。
- en: The very first time you deploy to an emulator or device, Xamarin Studio will
    have to install a few things such as the Mono shared runtime and Android platform
    tools.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次将应用部署到模拟器或设备时，Xamarin Studio 需要安装一些东西，比如Mono共享运行时和Android平台工具。
- en: Switch over to the Android emulator.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到安卓模拟器。
- en: Your application will appear.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的应用程序将会出现。
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Visual Studio on Windows, you might also try using the **Visual Studio Emulator
    for Android**. It is a nice emulator that comes preinstalled with Visual Studio
    2015.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上的Visual Studio中，你也可以尝试使用**Visual Studio Emulator for Android**。这是一个不错的模拟器，预装在Visual
    Studio 2015中。
- en: 'When all is done, you have deployed your first Android application, complete
    with a single button. Your app will look like the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有工作完成后，你已经部署了你的第一个安卓应用程序，其中包括一个单一按钮。你的应用看起来将如下截图所示：
- en: '![Building your first Android application](img/image00205.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![构建你的第一个安卓应用程序](img/image00205.jpeg)'
- en: Understanding Android activities
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解安卓活动
- en: The Android operating system is very focused on the concept of an activity.
    An activity is a task or unit of work that users can perform on their screen.
    For example, users would perform a **phone activity** for dialing a number and
    carry out a second activity for interacting with their address book to locate
    the number. Each Android application is a collection of one or more activities
    that users can launch and press the hardware's back key on their device to exit
    or cancel. The user's history is kept in the Android **back stack**, which you
    can manipulate from code in special cases. When a new activity starts, the previous
    one is paused and maintained in memory for later use, unless the operating system
    is running low on memory.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓操作系统非常注重活动（Activity）这一概念。活动是用户在屏幕上可以执行的任务或工作单元。例如，用户会进行**拨号活动**来拨打一个号码，并进行第二个活动与通讯录互动以找到该号码。每个安卓应用程序都是由一个或多个活动组成，用户可以启动这些活动，并通过按下设备上的硬件返回键来退出或取消。用户的历史记录保存在安卓的**后退堆栈**中，在特殊情况下，你可以通过代码操作它。当一个新的活动开始时，前一个活动会被暂停并保存在内存中供以后使用，除非操作系统内存不足。
- en: Activities are loosely coupled with each other; in some ways, you can think
    of them as having completely separate states from one another in memory. Static
    classes, properties, and fields will persist the life of the application, but
    the common practice is to pass a state in an Android **bundle**. This is useful
    for passing an identifier for an item displayed in a list to edit that item in
    a new activity.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 活动之间是松耦合的；在某种程度上，你可以认为它们在内存中拥有完全独立的状态。静态类、属性和字段将保持应用程序的生命周期，但常见做法是将状态通过安卓**捆绑包**传递。这对于传递列表中显示的项目的标识符，以便在新活动中编辑该项目非常有用。
- en: 'Activities have the following lifecycle callback methods that you can override:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 活动有以下生命周期回调方法，你可以重写：
- en: '`OnCreate`: This is the first method called when your activity is created.
    Set up your views and perform other loading logic here. Most importantly, you
    will call `SetContentView` here to set up your activity''s view.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCreate`: 当你的活动被创建时，这是第一个被调用的方法。在这里设置你的视图并执行其他加载逻辑。最重要的是，你将在这里调用`SetContentView`来设置你的活动视图。'
- en: '`OnResume`: This is called when your activity''s view is visible on the screen.
    It is called if your activity is displayed for the first time, and when the user
    returns to it from another activity.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnResume`: 当你的活动视图在屏幕上可见时会被调用。如果活动是第一次显示，或者用户从另一个活动返回到它时，都会调用此方法。'
- en: '`OnPause`: This is called to notify that the user has left your activity. It
    can happen prior to navigating to a new activity within your app, locking the
    screen, or hitting the home button. Assume that the user may not return, so you
    need to save any changes the user made here.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnPause`: 当用户离开你的活动时会被调用。它可能发生在导航到应用内的新活动之前、锁屏或按下主页按钮时。假设用户可能不会返回，因此你需要在这里保存用户所做的任何更改。'
- en: '`OnStart`: This occurs immediately before `OnResume` when the activity''s view
    is about to be displayed on the screen. It occurs when an activity starts and
    when a user returns to it from another activity.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnStart`: 当活动的视图即将在屏幕上显示时，紧随`OnResume`之前发生。当活动开始或用户从另一个活动返回到它时，会发生此方法。'
- en: '`OnStop`: This occurs immediately after `OnPause` when the activity''s view
    is no longer displayed on the screen.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnStop`: 当活动的视图不再在屏幕上显示时，紧随`OnPause`之后发生。'
- en: '`OnRestart`: This method occurs when the user returns to your activity from
    a previous activity.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnRestart`: 当用户从上一个活动返回到你的活动时，会发生此方法。'
- en: '`OnActivityResult`: This method is used for communicating with other activities
    in other applications on Android. It is used in conjunction with `StartActvityForResult`;
    for example, you would use this to interact with the Facebook application to log
    in a user.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnActivityResult`: 此方法用于在 Android 上与其他应用程序中的活动进行通信。它与`StartActvityForResult`结合使用；例如，你可以用这个方法与
    Facebook 应用程序交互以登录用户。'
- en: '`OnDestroy`: This is called when your activity is about to be freed from memory.
    Perform any additional clean-up that could help the operating system here, such
    as disposing of any other heavyweight objects the activity was using.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnDestroy`: 当你的活动即将从内存中释放时会被调用。在这里执行任何可能帮助操作系统的额外清理工作，例如处理活动使用的任何其他重量级对象。'
- en: 'A flowchart of the Android lifecycle is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Android 生命周期的流程图如下：
- en: '![Understanding Android activities](img/image00206.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![理解 Android 活动](img/image00206.jpeg)'
- en: Unlike iOS, Android does not enforce any design patterns upon its developers.
    However, it is not possible to make it by without understanding the Android activity
    lifecycle to some degree. Many concepts with activities have a parallel to controllers
    on iOS; for example, `OnStart` is equivalent to `ViwWillAppear` and `OnResume`
    is equivalent to `ViewDidAppear`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 与 iOS 不同，Android 并未对其开发者实施任何设计模式。然而，在一定程度上理解 Android 活动生命周期是不可或缺的。活动中许多概念与 iOS
    上的控制器有相似之处；例如，`OnStart`相当于`ViwWillAppear`，而`OnResume`则相当于`ViewDidAppear`。
- en: 'Other methods of note for working with activities are as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理活动时需要注意的其他方法如下：
- en: '`StartActivity(Type type)`: This method starts a new activity within your application
    and passes no extra information to the activity.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StartActivity(Type type)`: 此方法在应用程序内启动一个新活动，并不向活动传递任何额外信息。'
- en: '`StartActivity(Intent intent)`: This is an overload method for starting a new
    activity with `Intent`. This gives you the ability to pass additional information
    to the new activity, and you can also launch activities in other applications.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StartActivity(Intent intent)`: 这是一个用于通过`Intent`启动新活动的重载方法。它使你能够向新活动传递额外信息，并且你也可以启动其他应用程序中的活动。'
- en: '`StartActivityForResult`: This method starts a new activity with the anticipation
    of receiving `OnActivityResult` when the activity''s operation is completed.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StartActivityForResult`: 此方法启动一个新活动，并预期在活动操作完成后收到`OnActivityResult`。'
- en: '`Finish`: This will close the current activity and invoke `OnDestroy` when
    it is completely closed and no longer displayed on the screen. Depending on what
    is currently on the back stack, the user will return to a previous activity or
    the home screen.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Finish`: 这将关闭当前活动，并在完全关闭且不再在屏幕上显示时调用`OnDestroy`。根据后退栈上当前的内容，用户将返回到上一个活动或主屏幕。'
- en: '`SetContentView`: This method sets the primary view to be displayed for an
    activity. It should be called within the `OnCreate` method prior to the activity
    being displayed on the screen.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SetContentView`：此方法设置要为活动显示的主要视图。它应该在活动在屏幕上显示之前在`OnCreate`方法内调用。'
- en: '`FindViewById`: This is a method for locating the view displayed in your activity.
    It has a generic version for returning a view of the appropriate type.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FindViewById`：这是一个用于定位在活动中显示的视图的方法。它有一个泛型版本，用于返回适当类型的视图。'
- en: You can think of `intent` as an object that describes the transition from one
    activity to another. You can pass additional data through intents as well as modify
    how the activity is displayed and the user's navigation history.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`intent`视为描述从一个活动过渡到另一个活动的对象。你还可以通过意图传递附加数据，以及修改活动的显示方式和用户的导航历史。
- en: In addition to activities, Android has the concept of a fragment. You can think
    of a fragment to be a miniature activity that is displayed inside a parent activity.
    Fragments are useful for reusing different pieces of a UI throughout your apps
    and can also help you implement split screen navigation on tablets.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 除了活动之外，Android还有片段（fragment）的概念。你可以将片段视为在父活动中显示的微型活动。片段对于在应用中复用不同的UI部分非常有用，还可以帮助你实现在平板电脑上的分屏导航。
- en: Xamarin's Android designer
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin的Android设计师
- en: The default template for Android projects has a little more built-in functionality
    than iOS, so we will have a few controls to remove later. Android user interface
    layouts are defined in XML files that are readable by humans and editable. However,
    Xamarin Studio has provided an excellent design tool that allows you to drag-and-drop
    controls to define your Android layouts. Let's add some more features to your
    application and start using the Android designer.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Android项目的默认模板比iOS具有更多内置功能，因此我们稍后会有一些控件需要删除。Android用户界面布局在XML文件中定义，这些文件对人类可读和可编辑。然而，Xamarin
    Studio提供了一个优秀的设计工具，允许你拖放控件来定义你的Android布局。让我们为你的应用程序添加更多功能，并开始使用Android设计师。
- en: 'Return to Xamarin Studio and carry out the following steps to add features
    to your app:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Xamarin Studio，执行以下步骤为你的应用添加功能：
- en: Open the Android project you created earlier in this chapter in Xamarin Studio.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中打开本章前面创建的Android项目。
- en: Under **Resources** | **layout** in your project, open `Main.axml`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中的**资源** | **布局**下，打开`Main.axml`。
- en: You will see the Android designer open in Xamarin Studio.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到Android设计师在Xamarin Studio中打开。
- en: Delete the existing label and button from the Android project template.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除Android项目模板中现有的标签和按钮。
- en: Drag **TextView** from the **Toolbox** section on the right to the empty layout.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧的**工具箱**部分拖动一个**TextView**到空白布局中。
- en: Type some default text such as `0` into the label.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签中输入一些默认文本，如`0`。
- en: In the **Properties** pane on the right, you'll see the **id** value is set
    to `@+id/textView1`. Let's change it to `@+id/text` so we can later interact with
    the label in C#.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧的**属性**窗格中，你会看到**id**值设置为`@+id/textView1`。我们将它改为`@+id/text`，以便稍后可以用C#与标签交互。
- en: Now drag a **GridLayout** from the **Toolbox** section and under the **Properties**
    panel set **Row Count** to 4 and **Column** to 3.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从**工具箱**部分拖动一个**GridLayout**，并在**属性**面板下设置**行数**为4和**列数**为3。
- en: Drag 10 **Button** widgets from the **Toolbox** section and number their text
    **0-9**.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**部分拖动10个**Button**控件，并将它们的文本编号为**0-9**。
- en: Set their **id** to `@+id/button0` numbered from **0-9.**
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们的**id**设置为从**0-9**编号的`@+id/button0`。
- en: Create two more buttons with ids `@+id/plus` and `@+id/equals`, with their text
    set to **+** and **=** respectively.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个更多带有id `@+id/plus` 和 `@+id/equals` 的按钮，将它们的文本分别设置为**+** 和 **=**。
- en: Tip
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Visual Studio, the Xamarin.Android designer is mostly identical to its Xamarin
    Studio counterpart. The main difference is when editing the properties on a control,
    the standard Visual Studio properties editor is used. You may find it useful to
    toggle between **A to Z** and grouped sorting via the toolbar buttons in the **Properties**
    pane.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，Xamarin.Android设计器与其Xamarin Studio对应部分基本相同。主要区别在于编辑控件属性时，使用的是标准的Visual
    Studio属性编辑器。你可能会发现通过**属性**窗格的工具栏按钮在**A到Z**和分组排序之间切换很有用。
- en: Now if you try to compile and run your application, you will notice some compiler
    errors. For now, open `MainActivity.cs` and remove the code in the `OnCreate`
    method with the exception of the line calling `SetContentView`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你尝试编译并运行你的应用程序，你可能会注意到一些编译错误。现在，打开 `MainActivity.cs` 并删除 `OnCreate` 方法中的代码，除了调用
    `SetContentView` 的那一行。
- en: 'Your `MainActivity` should look like this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `MainActivity` 应该看起来像这样：
- en: '[PRE2]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now launch your Android application and it should look identical to the changes
    you made in the designer as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启动你的 Android 应用程序，它应该与你设计师所做的更改完全相同，如下所示：
- en: '![Xamarin''s Android designer](img/image00207.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![Xamarin 的 Android 设计器](img/image00207.jpeg)'
- en: Switch back to Xamarin Studio and open `MainActivity.cs`. Let's modify the activity
    to interact with the layouts we set up in the Xamarin.Android designer. We use
    the `FindViewById` method to retrieve a view by the ID we set up in the layout
    file. Xamarin Studio has also auto-generated a static class named `Resource` for
    referencing your identifiers.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 切换回 Xamarin Studio 并打开 `MainActivity.cs` 文件。我们将修改活动以与在 Xamarin.Android 设计器中设置好的布局进行交互。我们使用
    `FindViewById` 方法通过我们在布局文件中设置的 ID 来获取视图。Xamarin Studio 还自动生成了一个名为 `Resource` 的静态类，以便引用你的标识符。
- en: 'First declare a class-level private field in `MainActivity.cs`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 `MainActivity.cs` 中声明一个类级别的私有字段：
- en: '[PRE3]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So let''s retrieve the instance of the **TextView** field by placing this code
    in `OnCreate` as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `OnCreate` 中通过以下代码获取 **TextView** 字段的实例：
- en: '[PRE4]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `Resource` class is a static class that the Xamarin designer will populate
    for you. For future reference, you may have to build your Android project for
    new IDs and other resources to show up in your C# files in Xamarin Studio.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resource` 类是一个静态类，Xamarin 设计器会为你填充它。为了将来的参考，你可能需要构建你的 Android 项目，以便新的 IDs
    和其他资源在 Xamarin Studio 的 C# 文件中显示。'
- en: 'Create a method we''ll use for click events, somewhere in `MainActivity.cs`,
    it will look very similar to what we did on iOS:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MainActivity.cs` 中创建一个我们将用于点击事件的方法，它将与我们在 iOS 上所做的非常相似：
- en: '[PRE5]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, let''s wire up the `Click` event for `number1` in your activity''s `OnCreate`
    method:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在活动中的 `OnCreate` 方法里为 `number1` 绑定 `Click` 事件：
- en: '[PRE6]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Repeat this code for all number buttons **0-9**.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有的数字按钮 **0-9** 重复这段代码。
- en: 'Next, let''s set up event handlers for the "add" and "equals" buttons as we
    did in the iOS app:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为 "add" 和 "equals" 按钮设置事件处理程序，就像我们在 iOS 应用中所做的那样：
- en: '[PRE7]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, let''s wire up the `Click` event for these buttons in your activity''s
    `OnCreate` method:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在活动中的 `OnCreate` 方法里为这些按钮绑定 `Click` 事件：
- en: '[PRE8]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now if we run the application, we''ll get an Android app that functions identically
    to the iOS calculator shown previously in this chapter:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行应用程序，我们将得到一个与本章前面展示的 iOS 计算器功能完全相同的 Android 应用：
- en: '![Xamarin''s Android designer](img/image00208.jpeg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![Xamarin 的 Android 设计器](img/image00208.jpeg)'
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结：
- en: In this chapter, we created our first iOS application in Xamarin Studio. We
    covered Apple's MVC design pattern to better understand the relationship between
    `UIViewController` and `UIView` and also covered how to use the iOS designer in
    Xamarin Studio for editing storyboard files. Next, we created our first Android
    application in Xamarin Studio and learned the activity lifecycle in Android. We
    also used Xamarin's Android designer to make changes to Android XML layouts.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在 Xamarin Studio 中创建了第一个 iOS 应用程序。我们介绍了苹果的 MVC 设计模式，以更好地理解 `UIViewController`
    和 `UIView` 之间的关系，同时也介绍了如何在 Xamarin Studio 中使用 iOS 设计器编辑 storyboard 文件。接下来，我们在
    Xamarin Studio 中创建了第一个 Android 应用程序，并学习了 Android 中的活动生命周期。我们还使用了 Xamarin 的 Android
    设计器来修改 Android XML 布局。
- en: From the topics covered in this chapter, you should be fairly confident in developing
    simple apps for iOS and Android using Xamarin's tools. You should have a basic
    understanding of the native SDKs and design patterns to accomplish tasks on iOS
    and Android.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章涵盖的主题来看，你应该能够使用 Xamarin 的工具为 iOS 和 Android 开发简单的应用程序，并且信心满满。你应该对原生 SDK 和设计模式有一个基本的了解，以完成在
    iOS 和 Android 上的任务。
- en: In the next chapter, we'll cover various techniques for sharing code across
    platforms with Xamarin Studio. We'll go over different ways for architecting your
    cross-platform application and how to set up projects and solutions for use in
    either Visual Studio or Xamarin Studio.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍使用 Xamarin Studio 在平台之间共享代码的各种技术。我们将讨论架构跨平台应用程序的不同方法，以及如何在 Visual
    Studio 或 Xamarin Studio 中设置项目和解决方案。
