- en: Chapter 10. Behavioral Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 行为模式
- en: So far in this book, we have looked closely at many of the most significant
    creational and structural design patterns. This has given us the power to construct
    all manner of architectures, but to perform the tasks we require, these structures
    need to be able to communicate, between their own elements and with other structures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们已经详细研究了许多最重要的创建性和结构性设计模式。这使我们能够构建各种各样的架构，但是为了执行我们所需的任务，这些结构需要能够在自身的元素之间以及与其他结构之间进行通信。
- en: Behavioral patterns were designed for modeling many of the general development
    problems we encounter on a regular basis, such as responding to a change in state
    of a particular object or adapting behavior to accord with a hardware change.
    We have already encountered one, in the last chapter with the observer, and here
    we will look further into some of the most useful behavioral patterns.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 行为模式旨在解决我们在日常开发中遇到的许多通用问题，例如响应特定对象状态的变化或调整行为以适应硬件变化。我们在上一章的观察者模式中已经遇到了一个，在这里我们将进一步了解一些最有用的行为模式。
- en: Behavioral patterns are far more adaptable in terms of the variety of tasks
    they can perform than creational and behavioral patterns, and although this flexibility
    is great, it can also complicate matters when it comes to selecting the best possible
    pattern, as there will often be two or three possible candidates for a given task.
    It is a good idea to take a look at several of these patterns together and see
    how understanding these sometimes subtle differences can help us apply behavioral
    patterns efficiently.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建性和结构性模式相比，行为模式在能够执行的任务类型上具有更高的适应性。虽然这种灵活性很好，但在选择最佳模式时，它也可能使问题复杂化，因为通常会有两三个候选模式可供选择。看看这些模式中的几个，了解它们之间有时微妙的差异，可以帮助我们有效地应用行为模式，这是一个好主意。
- en: 'In this chapter, you will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: Create a template pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模板模式
- en: Add specialization layers to the pattern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向模式中添加专业化层次。
- en: Apply a strategy pattern
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用策略模式
- en: Build and use a visitor pattern
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和使用访问者模式
- en: Create a state machine
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个状态机
- en: The generalized nature of these patterns means they can be applied in a huge
    number of various situations, but a good example of the type of task they can
    perform would be a click or touch listener and of course, the observer patterns
    of the previous chapter. Another common feature seen in many behavioral patterns
    is the use of abstract classes to create generalized algorithms, as we will see
    later in the chapter with the **visitor** and **strategy patterns** and in particular
    the **template pattern**, which we shall explore now.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式的通用性意味着它们可以应用于大量的不同场景中。它们能够执行的任务类型的一个很好的例子就是点击或触摸监听器，当然还有上一章中的观察者模式。在许多行为模式中经常看到的另一个共同特性是使用抽象类来创建通用算法，正如我们将在本章中看到的**访问者**和**策略模式**以及我们即将探讨的**模板模式**。
- en: The template pattern
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板模式
- en: Even if you are entirely new to design patterns, you will be familiar with how
    the template pattern works, as it employs abstract classes and methods to form
    a generalized (template) solution that can be used to create specialized subclasses
    in precisely the way that abstraction is intended to be used in OOP.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你完全不了解设计模式，你也会熟悉模板模式的工作方式，因为它使用抽象类和方法形成一个通用的（模板）解决方案，可以用来创建特定的子类，这正是OOP中抽象意图的使用方式。
- en: At its very simplest, the template pattern is nothing more than a generalization
    in the form of an abstract class with at least one concrete realization. For example,
    a template might define an empty layout and its realizations then control the
    content. One big advantage of this approach is that common elements and shared
    logic need only be defined in the base class, meaning that we only need to write
    code where our realizations differ from each other.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的模板模式不过是抽象类形式的泛化，至少有一个具体的实现。例如，模板可能定义了一个空的布局，而其实现则控制内容。这种方法的一个很大的优点是，公共元素和共享逻辑只需在基类中定义，这意味着我们只需要在我们实现之间不同的地方编写代码。
- en: Template patterns can become even more powerful and flexible if another layer
    of abstraction is added in the form of specializations of the base class. These
    can then be used as sub-categories of their parent classes and treated similarly.
    Before exploring these multi-layered patterns, we will take a look at the simplest
    example of a base template that provides the properties and logic to produce different
    outputs in accordance with their concrete realizations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在基础类中增加一层抽象，模板模式可以变得更加强大和灵活。这些可以作为其父类的子类别，并类似地对待。在探索这些多层次的模式之前，我们将先看一个最简单的基模板例子，它提供了根据其具体实现产生不同输出的属性和逻辑。
- en: Generally speaking, template patterns work on an algorithm or any set of procedures
    that can be broken down into steps. This template method is defined in the base
    class and made specific with realizations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，模板模式适用于可以分解为步骤的算法或任何程序集。这个模板方法在基础类中定义，并通过具体实现来明确。
- en: 'The best way to see this is by way of example. Here we will imagine a simple
    news feed app with a generalized *story* template with *news* and *sport* realizations.
    Follow these steps to create this pattern:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这个概念，最好的方式是通过例子。这里我们将设想一个简单的新闻源应用，它有一个通用的*故事*模板，以及*新闻*和*体育*的实现。按照以下步骤来创建这个模式：
- en: Start a new project and create a main layout based on the following component
    tree:![The template pattern](img/image_10_002.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新项目，并根据以下组件树创建一个主布局：![模板模式](img/image_10_002.jpg)
- en: 'Create a new abstract class called `Story`, as our generalization, like so:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的抽象类`Story`，作为我们的泛化，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, extend this to create the `News` class, like so:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照如下方式扩展以创建`News`类：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Sport` realization is the same, but with the following exceptions:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Sport`实现是相同的，但有以下例外：'
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, add these lines to the main activity:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将这些行添加到主活动中：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running this code on a real or virtual device allows us to toggle between the
    two realizations of our `Story` template:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实或虚拟设备上运行这段代码，允许我们在`Story`模板的两个实现之间切换：
- en: '![The template pattern](img/image_10_003.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![模板模式](img/image_10_003.jpg)'
- en: 'This template example is nice and simple and familiar but nevertheless the
    template can be applied in numerous situations and provides a very convenient
    method to organize code, in particular when there are many derived classes to
    be defined. The class diagram is as straightforward as the code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板例子既简单又熟悉，但尽管如此，模板可以应用于许多情况，并为组织代码提供了一种非常方便的方法，特别是当需要定义许多派生类时。类图与代码一样直接：
- en: '![The template pattern](img/image_10_004.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![模板模式](img/image_10_004.jpg)'
- en: Extending templates
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展模板
- en: The previous pattern is very useful when the individual realizations are very
    similar to each other, but there are often cases when we want to model objects
    that are similar enough to each other to warrant shared code but nevertheless
    possess different types or number of properties. A good example might be a database
    for a reading library. We could create a base class called *ReadingMaterial* and
    with the right properties, this could be used to cover almost any book, regardless
    of genre or content or age. If, however, we wanted to include magazines and periodicals,
    we might find our model failing to represent the multiple nature of such periodicals.
    In this situation, we could create an entirely new base class or alternatively
    create new and specialized abstract classes that extend the base class but are
    also extendable themselves.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当各个实现非常相似时，前面的模式非常有用。但通常情况下，我们想要建模的对象虽然彼此足够相似，以至于可以共享代码，但仍然具有不同类型或数量的属性。一个很好的例子可能是阅读图书馆的数据库。我们可以创建一个名为*阅读材料*的基础类，并拥有合适的属性，这可以用来涵盖几乎任何书籍，无论其类型、内容或年龄。然而，如果我们想要包括杂志和期刊，我们可能会发现我们的模型无法表示这类期刊的多样性。在这种情况下，我们可以创建一个全新的基础类，或者创建新的专门抽象类来扩展基础类，而这些类本身也可以被扩展。
- en: 'We will use this above example to demonstrate this, more functional, template
    pattern. This model now has three layers, generalizations, specializations, and
    realizations. As it is the structure of the pattern that matters here, we will
    save time and use the debugger to output our realized objects. To see how this
    would be put in practice, follow these steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上面的例子来演示这个更功能性的模板模式。现在这个模型有三个层次：泛化、专化和实现。由于这里重要的是模式的结构，我们将节省时间并使用调试器输出我们实现的对象。要了解如何将其实际应用，请按照以下步骤操作：
- en: 'Begin by creating an abstract, base class, like so:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个抽象的基类，如下所示：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, another abstract class for the book category:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为书籍类别创建另一个抽象类：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Magazine` class should look like this:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Magazine`类应该如下所示：'
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we can create the concrete realization classes. First the book class:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以创建具体的实现类。首先是书籍类：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Followed by the magazine class:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着是杂志类：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a POJO to use as dummy data, like so:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个POJO作为假数据，如下所示：
- en: '[PRE9]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This pattern can now be tested with code like the following in the main activity:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以通过以下主活动中的代码测试此模式：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'By changing the dummy document code, any realization can be tested, and will
    produce output along these lines:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改虚拟文档代码，可以测试任何实现，并将产生如下输出：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The previous example is short and simple, but it demonstrates each of the features
    that make the pattern so useful and versatile, as detailed in this list:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个例子简短且简单，但它演示了使模式如此有用和多变的每个特性，如下列表详细说明：
- en: Base classes provide standardized skeleton definitions and code, as demonstrated
    by the `fetchDocument()` method
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基类提供标准化的骨架定义和代码，正如`fetchDocument()`方法所展示的。
- en: Code that realizations have in common is defined in base classes, for example
    `title()` and `genre()`
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现中共同的代码在基类中定义，例如`title()`和`genre()`
- en: Placeholders are defined in base classes for specialized implementations, as
    seen by the way `date()` is managed
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 占位符在基类中定义，用于专门的实现，就像`date()`方法的管理方式一样。
- en: Derived classes can override placeholder methods and implemented methods; see
    `rating()`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派生类可以覆盖占位符方法和已实现的方法；请参阅`rating()`
- en: Derived classes can call back to base classes with `super`, as seen with the
    `fetchDocument()` method in the `Book` class
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派生类可以使用`super`回调到基类，就像`Book`类中的`fetchDocument()`方法一样。
- en: 'Although the template pattern may seem complex at first, the fact that so many
    elements are shared, means that well thought out generalizations and specializations
    can lead to very simple and clear code in the concrete classes themselves, something
    we will be grateful for when dealing with more than just one or two template realizations.
    This concentration of code defined in the abstract classes can be seen very clearly
    in the pattern''s class diagram, where the derived classes contain only the code
    that pertains to it alone:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管模板模式一开始可能看起来很复杂，但由于有这么多元素是共享的，因此经过深思熟虑的概括和特殊化可以导致具体类中的代码非常简单和清晰，当我们处理的不仅仅是
    一个或两个模板实现时，我们会为此感到庆幸。这种在抽象类中定义的代码集中，在模式类图中可以非常清楚地看到，派生类只包含与其单独相关的代码：
- en: '![Extending templates](img/image_10_005.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![扩展模板](img/image_10_005.jpg)'
- en: As mentioned at the top of the chapter, there are often more than one behavioral
    pattern that can be used in a given situation and the template pattern we discussed
    previously, along with the strategy, visitor, and state patterns, all fit into
    this category, as all of them derive specialized cases from generalized outlines.
    Each of these patterns deserves exploring in a little detail.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如章节开头所述，在给定情况下通常可以使用多种行为模式，我们之前讨论的模板模式，以及策略模式、访问者模式和状态模式，都适合这个类别，因为它们都是从概括的概要中派生出特殊情况的。这些模式都值得进行一些详细的探讨。
- en: The strategy pattern
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略模式
- en: The strategy pattern is very similar to the template pattern, the only difference
    really being the point at which individual realizations are created. This happens
    during compilation with a template pattern, but during runtime in a strategy pattern,
    and can be selected dynamically.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模式与模板模式非常相似，真正的唯一区别在于个体实现创建的时机。模板模式在编译时发生，但策略模式在运行时发生，并且可以动态选择。
- en: 'A strategy pattern reflects changes as they happen and its output depends on
    a context in the same way the output of a weather app depends on a location. We
    can use this scenario in our demonstration, but first consider this class diagram
    of a strategy pattern:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模式反映变化的发生，其输出取决于上下文，就像天气应用程序的输出取决于位置一样。我们可以在这个演示中使用这个场景，但首先考虑一下策略模式的类图：
- en: '![The strategy pattern](img/image_10_007.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![策略模式](img/image_10_007.jpg)'
- en: 'This can easily be realized using the weather example. Open a new project and
    follow these steps to see how:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用天气示例可以轻松实现这一点。打开一个新项目，按照以下步骤查看如何操作：
- en: 'Start with strategy interface; it looks like this:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从策略接口开始；它看起来像这样：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create several concrete implementations along the lines of the class here:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照这里的类创建几个具体实现：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, create the context class, which here is the location:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建上下文类，这里就是位置：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'By mocking up the location with a string value, we can test the pattern with
    client code like this:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用字符串值模拟位置，我们可以使用以下客户端代码测试该模式：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As this example demonstrates, strategy patterns, although similar to templates,
    are used for different tasks as they are applied at different occasions, runtime
    and compile time respectively.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个例子所示，策略模式虽然与模板相似，但用于不同的任务，因为它们分别在运行时和编译时应用。
- en: As well as applying our own templates and strategies, most platforms apply their
    own as part of the system. A good example of a strategy pattern at work in the
    Android framework can be seen every time a device is rotated and templates are
    applied to install layouts for different devices. We will take a closer look at
    this shortly, but first there are two other patterns we need to examine.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，除了应用我们自己的模板和策略外，大多数平台还会将其作为系统的一部分应用。在Android框架中，策略模式工作中的一个好例子就是每次设备旋转时，都会应用模板为不同设备安装布局。我们很快就会更详细地了解这一点，但首先还有另外两种模式我们需要检查。
- en: The visitor pattern
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问者模式
- en: Just like the template and strategy patterns, the visitor pattern is flexible
    enough to perform any of the tasks we have so far considered, and as with other
    behavioral patterns, the trick lies in applying the right pattern to the right
    problem. The term *visitor* is perhaps not as self-explanatory as *template* or
    *strategy*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与模板和策略模式一样，访问者模式足够灵活，可以执行我们迄今为止考虑的任何任务，与其他行为模式一样，关键在于将正确的模式应用于正确的问题。术语“访问者”可能不如“模板”或“策略”那么不言自明。
- en: The visitor pattern is designed so that a client can apply a process to a collection
    of unrelated objects, without having to worry about their differences. A good
    real-world example would be a trip to a supermarket where we might buy tinned
    products that have a bar code that can be scanned as well as fresh items that
    need to be weighed. This difference need not concern us in a supermarket as the
    cashier will take care of all this for us. In this case, the cashier is acting
    as the visitor, making all the necessary decisions regarding how to process individual
    items, leaving us (the client) only having to consider the final bill.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 访问者模式旨在让客户端可以将一个过程应用于一组不相关对象，而无需关心它们之间的差异。一个现实世界的好例子就是我们去超市购物，可能会购买可以扫描条形码的罐装产品，以及需要称重的新鲜商品。这种差异在超市中不需要我们关心，因为收银员会帮我们处理所有这些事情。在这种情况下，收银员充当访问者，做出关于如何处理单个商品的所有必要决策，而我们（客户端）只需考虑最终的账单。
- en: This does not really accord with our intuitive understanding of the word *visitor*,
    but from a design pattern point of view this is what it means. Another real-world
    example would be if we wished to travel across town. In this example, we might
    choose between a taxi or a bus. In both cases, we only concern ourselves with
    the final destination (and perhaps the cost) leaving the driver/visitor to negotiate
    the details of the actual route.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不完全符合我们对“访问者”一词的直观理解，但从设计模式的角度来看，这就是它的含义。另一个现实世界的例子是，如果我们希望穿越城镇。在这个例子中，我们可能会选择出租车或公交车。在这两种情况下，我们只关心最终目的地（也许还有费用），而让司机/访问者协商实际路线的细节。
- en: 'Follow these steps to see how a visitor pattern can be implemented to model
    the supermarket scenario outlined previously:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤，看看如何实现一个访问者模式，以模拟之前概述的超市场景：
- en: 'Start a new Android project and add the following interface to define shopping
    items, like so:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的Android项目，并添加以下接口来定义购物项目，如下所示：
- en: '[PRE16]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, create two item examples. First one for canned foods:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建两个项目示例。首先是罐装食品：
- en: '[PRE17]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, add the fresh foods item class:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，添加新鲜食品项目类：
- en: '[PRE18]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we can add the visitor interface itself, like this:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以添加访问者接口本身，如下所示：
- en: '[PRE19]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This can then be implemented as the following `Checkout` class:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，可以将其实现为以下`Checkout`类：
- en: '[PRE20]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can now see how the pattern allows us to write clean client code, like so:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以看到模式如何让我们编写干净的客户端代码，如下所示：
- en: '[PRE21]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This should then produce an output like this:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会产生如下输出：
- en: '[PRE22]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The visitor pattern has two particular strengths. The first is that it saves
    us having to use convoluted conditional nesting to differentiate between item
    types. The second, more significant, strength lies in how visitor and visited
    are kept separate, meaning that new item types can be added and altered without
    making any changes to the client at all. To see how this is done, just add the
    following code:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 访问者模式有两个特别的优势。第一个是它使我们不必使用复杂的条件嵌套来区分项目类型。第二个，也是更重要的优势在于，访问者和被访问者是分开的，这意味着可以添加和修改新的项目类型，而无需对客户端进行任何更改。要了解如何做到这一点，只需添加以下代码：
- en: 'Open and edit the `Visitor` interface so that it has the extra line highlighted
    here:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑`Visitor`接口，使其包含如下高亮显示的额外行：
- en: '[PRE23]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a `SpecialOffer` class, like so:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式创建一个`SpecialOffer`类：
- en: '[PRE24]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Overload the `visit()` method in the `Checkout` visitor class like so:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Checkout`访问者类中按如下方式重载`visit()`方法：
- en: '[PRE25]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As this demonstrates, the visitor pattern can be extended to manage any number
    of items and any number of different solutions. Visitors can be used one at a
    time, or as part of a chain of processes, and are often used when importing files
    with different formats.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所示，访问者模式可以扩展以管理任意数量的项目和任意数量的不同解决方案。访问者可以一次使用一个，或者作为一系列处理过程的一部分，并且通常在导入具有不同格式的文件时使用。
- en: All the behavioral patterns we have looked at in this chapter have a very wide
    scope and can be used to solve an enormous variety of software design problems.
    There is one pattern, however, that has a wider scope even than these, the state
    design pattern or machine.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中看到的所有行为模式都有非常广泛的应用范围，可以用来解决各种软件设计问题。然而，有一个模式的应用范围甚至比这些还要广泛，那就是状态设计模式或状态机。
- en: The state pattern
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态模式
- en: The state pattern is without doubt the most flexible of all the behavioral patterns.
    The pattern demonstrates how we can implement **finite state machines** in our
    code. State machines were an invention of the mathematician Alan Turing, who used
    them to realize all-purpose computers and prove that any mathematically computable
    process can be performed mechanically. In short, state machines can be used to
    perform any task we choose.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 状态模式无疑是所有行为模式中最灵活的一个。该模式展示了我们如何在代码中实现**有限状态机**。状态机是数学家艾伦·图灵的发明，他使用它们来实现通用计算机并证明任何数学上可计算的过程都可以机械地执行。简而言之，状态机可以用来执行我们选择的任何任务。
- en: The mechanics of the state design pattern are simple and elegant. At any point
    in the life-cycle of a finite state machine, the pattern is aware of its own internal
    state and the current external state, or input. Based on these two properties,
    the machine will then produce an output (which can be none) and change its own
    internal state (which can be the same). Believe it or not, very sophisticated
    algorithms can be realized with properly configured finite state machines.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 状态设计模式的工作机制简单而优雅。在有限状态机的生命周期中的任何时刻，该模式都知道其自身的内部状态和当前的外部状态或输入。基于这两个属性，机器将产生一个输出（可能没有）并改变其自身的内部状态（可能相同）。信不信由你，通过适当配置的有限状态机可以实现非常复杂算法。
- en: A traditional way of demonstrating the state pattern is with the example of
    a coin operated turnstile of the type that might be found at a sports stadium
    or funfair. This has two possible states, locked and unlocked, and takes two forms
    of input, a coin and a physical push.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 展示状态模式的传统方式是使用在体育场馆或游乐场可能找到的投币式旋转门作为例子。这有两种可能的状态，锁定和解锁，并接受两种形式的输入，即硬币和物理推力。
- en: 'To see how this can be modeled, follow these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何建模，请按照以下步骤操作：
- en: Start a new Android project and build a layout along the lines of the one here:![The
    state pattern](img/image_10_009.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个新的Android项目，并构建一个类似于以下布局的界面：![状态模式](img/image_10_009.jpg)
- en: 'Add the following interface:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下接口：
- en: '[PRE26]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next comes the `Locked` state:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是`Locked`状态：
- en: '[PRE27]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Followed by the `Unlocked` state:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着是`Unlocked`状态：
- en: '[PRE28]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create the following singleton to hold the output string:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下单例以保存输出字符串：
- en: '[PRE29]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next add the `Context` class, like this:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来添加`Context`类，如下所示：
- en: '[PRE30]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally edit the main activity to match this code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编辑主活动以匹配以下代码：
- en: '[PRE31]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This example may be simple, but it demonstrates perfectly just how powerful
    this pattern is. It is easy to see how the same scheme could be expanded to model
    more complex locking systems, and finite state machines are often used to implement
    combination locks. As mentioned earlier, the state pattern can be used to model
    anything that can be mathematically modeled. The previous example is easily tested
    and easy to expand:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可能很简单，但它完美地展示了这个模式有多么强大。很容易看出同样的方案如何扩展来模拟更复杂的锁定系统，而有限状态机通常用于实现组合锁。正如前面提到的，状态模式可以用来模拟任何可以数学建模的事物。前面的例子很容易测试，也很容易扩展：
- en: '![The state pattern](img/image_10_011.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![状态模式](img/image_10_011.jpg)'
- en: 'The true beauty of the state pattern lays in not just how incredibly flexible
    it is, but also how conceptually simple it is, and this can be seen most clearly
    with a class diagram:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 状态模式的真正魅力不仅在于它极其灵活，而且在于它在概念上的简单性，这一点在类图上可以看得最清楚：
- en: '![The state pattern](img/image_10_013.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![状态模式](img/image_10_013.jpg)'
- en: State patterns, like all the patterns in this chapter and other behavioral patterns,
    are remarkably flexible and this ability to adapted to suit an enormous number
    of situations is down to their abstract nature. This can make behavioral patterns
    conceptually more difficult to grasp, but a little trial and error is a good way
    to find the right patterns for the right situations.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 状态模式，就像本章中的所有模式和其他行为模式一样，具有非常高的灵活性，这种能够适应大量情况的能力源于它们的抽象性质。这可能会使得行为模式在概念上更难以掌握，但通过一些尝试和错误是找到适合各种情境的正确模式的好方法。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Behavioral patterns can appear very similar in structure and there is a lot
    of functional overlap, and this chapter has been largely theoretical so that we
    could approach them collectively. Once we become familiar with these structures,
    we will find ourselves returning to them frequently and in many situations.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 行为模式在结构上可能非常相似，功能上也有很多重叠，本章大部分内容是理论性的，以便我们可以集体地接近它们。一旦我们熟悉了这些结构，我们就会发现自己会经常在许多情况下返回到它们。
- en: In the next chapter, we will concentrate on more technical matters and see how
    to develop apps for the wide variety of form factors available, such as wrist
    watches and TV screens. From the work we have done so far, we can see how patterns
    such as the visitor could be used to manage such choices. As we have already experienced,
    the system manages much of this for us, often using inbuilt patterns of its own.
    Nevertheless, there are many opportunities to simplify and rationalize our code
    with design patterns.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于更多技术性的事务，并了解如何为各种可用的表单因子开发应用程序，例如手表和电视屏幕。从我们目前完成的工作来看，我们可以发现如何使用访问者模式等模式来管理这些选择。正如我们已经经历过的，系统为我们管理了大部分这些工作，经常使用它自己的内置模式。尽管如此，在设计模式中，我们仍有很多机会简化并合理化我们的代码。
