- en: 'Chapter 1. Introduction: Why High Performance?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 引言：为何要高绩效？
- en: According to the Cambridge dictionary, one of the acceptations of performance
    is "How well a person, machine, etc. does a piece of work or an activity." If
    we put it together with "high" we can define it as the output or efficiency with
    which a task is being done.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据剑桥词典，性能的一个可接受的定义是：“一个人、机器等完成一项工作或活动的表现。”如果我们将其与“高”结合，可以定义为执行任务时的输出或效率。
- en: High performance in software refers to the strategies that developers adopt
    to create pieces of software that can perform a process efficiently. When we are
    developing mobile software, this affects, but is not limited to, layout development,
    energy and battery management, security concerns, efficient multithreading, programming
    patterns, and debugging techniques.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件中的高性能指的是开发者采用的策略，以创建能够高效执行流程的软件片段。当我们开发移动软件时，这影响到但不限于布局开发、能源和电池管理、安全问题、有效的多线程、编程模式和调试技术。
- en: 'There is a big difference between doing things, and doing things right. In
    a real world with deadlines, budgets, and managers, software engineers fall very
    often into acquiring technical debt. A technical debt is "bought " (if we can
    use that verb) when a system is developed without a complete or proper design,
    moving problems forward instead of correctly addressing them. This has a snowball
    effect: at an advanced stage, the technical debt is so high that further development
    is very costly, and this leads to a dead point or astronomical damage to budgets
    in organizations.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 做事情与把事情做对之间存在很大差异。在一个有截止日期、预算和经理的现实世界中，软件工程师经常陷入技术债务。当系统在没有完整或不适当设计的情况下开发时，就会产生技术债务，将问题推向前而不是正确解决。这会产生滚雪球效应：在高级阶段，技术债务如此之高，以至于进一步开发成本非常高，这导致组织中的预算达到死点或天文数字的损失。
- en: While deadlines cannot always be avoided, adopting an efficient development
    process in any software development is vital to delivering good quality at a reasonable
    cost. It also means that the development skills become more mature in a developer,
    and instead of achieving tasks that fulfill the requirements, engineers can develop
    software that is efficient, robust, and that can be further extended in the future
    (what we called "maintainability").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管截止日期有时无法避免，但在任何软件开发中采用有效的开发过程对于以合理的成本交付高质量产品至关重要。这也意味着开发技能在开发者中变得更加成熟，工程师可以开发的不仅仅是满足要求的软件，而是高效、健壮，并且可以在未来进一步扩展的软件（我们称之为“可维护性”）。
- en: This book introduces techniques for constructing high-performance software for
    Android devices.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书介绍了为安卓设备构建高性能软件的技术。
- en: Why does the performance of an application mean so much to so many?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为何应用程序的性能对如此多人来说如此重要？
- en: 'Regardless of the industry, a decrease in the performance or quality of a software
    system can mean big losses. Software systems today control our finances and control
    the machines that take care of our health or our public transportation. There
    is almost no area in our lives that is not at least partially computerized. Not
    only losses: in a globalized and competitive world, a company producing low-performance
    software will soon be devoured by the more efficient and cheaper competition.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪个行业，软件系统性能或质量的下降可能导致巨大的损失。今天的软件系统控制着我们的财务，控制着照顾我们健康或公共交通的机器。我们的生活几乎没有任何领域至少不是部分计算机化的。不仅是损失：在一个全球化和竞争激烈的世界中，生产低性能软件的公司很快就会被更高效和更便宜的竞争对手吞噬。
- en: For a while, the only metric used in software development was "Is the software
    correct? Is it doing what it is supposed to be doing?". This made sense at the
    dawn of the computer systems era, when not every single process was computerized
    and we had not developed a culture of software engineering or good methods for
    quality control, team organization, and so on. Now, everybody demands more.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间以来，软件开发中唯一使用的指标是“软件是否正确？它是否在执行它应该做的事情？”。在计算机系统时代的曙光时期，这种做法是有道理的，当时并不是每个流程都计算机化，我们还没有发展出软件工程的文化或质量控制的良好方法，以及团队组织等等。现在，每个人都要求更多。
- en: 'Graphs are an excellent way to display information. Let''s analyze the smartphone
    penetration numbers:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是展示信息的绝佳方式。让我们分析一下智能手机的渗透率数据：
- en: '![Why does the performance of an application mean so much to so many?](img/4666_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![为何应用程序的性能对如此多人来说如此重要？](img/4666_01_01.jpg)'
- en: The numbers are clear. In the last quarter of 2008, in almost every region of
    the world smartphone penetration was under 20%. Nowadays, in 2015, most developed
    countries present a penetration close to 80%, whereas developing countries are
    close to 40%. In 2020, it is estimated that developed countries will have a penetration
    close to 100%, and countries in development over 50%. There are a few countries
    with more mobile phones than inhabitants!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据很明确。在2008年第四季度，世界上几乎所有地区的智能手机渗透率都低于20%。如今，在2015年，大多数发达国家的渗透率接近80%，而发展中国家接近40%。预计到2020年，发达国家的渗透率将接近100%，发展中国家的渗透率将超过50%。有些国家的手机数量甚至超过了人口数量！
- en: 'Mobile users nowadays do not only check their e-mail on a mobile phone. There
    are many operations that are performed on a mobile phone: the entertainment industry,
    banking and payment, tourism and traveling, gaming… This leads us to a conclusion:
    software must be not only correct but also efficient. Failure in software will
    lead to annoyed customers who might opt to use a different competitor with a better-performing
    product. In extreme cases, non-performing software can lead our business to lose
    its revenue—imagine the case of an application to make hotel reservations where
    you cannot proceed to payment.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的移动用户不仅会在手机上检查电子邮件。有许多操作是在手机上完成的：娱乐业、银行业务和支付、旅游业和旅行、游戏……这让我们得出一个结论：软件不仅要正确无误，还必须是高效的。软件的失败将导致客户的不满，他们可能会选择使用性能更好的竞争对手产品。在极端情况下，性能不佳的软件可能导致我们的业务失去收入——想象一下一个无法进行支付流程的酒店预订应用程序。
- en: Manual testing and automatic testing
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动测试和自动测试
- en: 'One of the first thoughts that naturally arise is that testing plays a central
    role in increasing and improving application performance. This is partially true,
    or as we prefer to say: testing is a good complement to a smartly designed application,
    but not a substitute.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自然会首先想到的一个问题是，测试在提高和改进应用程序性能方面起着核心作用。这在一定程度上是正确的，或者我们更愿意说：测试是一个为智能设计应用程序的好补充，但不是替代品。
- en: 'If we concentrate just on testing, there are two main types: manual testing
    and automatic testing. As in the previous case, both types of testing are mutually
    inclusive, and one should not be used in detriment to the other. Manual testing
    involves a real user playing around with an application and some defined use-case
    scenarios, but also with more free will and the ability to leave the road of predefined
    tests and explore new paths.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只关注测试，主要有两种类型：手动测试和自动测试。与之前的情况一样，这两种测试是相互包含的，不应以牺牲另一种为代价来使用其中一种。手动测试涉及一个真实用户与一个应用程序及其一些定义的使用场景进行交互，但也有更多的自由意志和能力去离开预定义的测试路径，探索新的路径。
- en: 'Automatic tests are tests written by developers to ensure consistency of the
    application throughout the evolution in the life of a system. There are a few
    different types: unit tests, integration tests, or UI tests, which will be familiar
    to the reader. Good test coverage provides robustness to the system when new changes
    are being applied, improving resistance against failures and performance problems.
    As in the previous case, we do not want to exclude manual tests in favor of automatic
    tests, or vice versa (at least until machines are able to pass the Turing test!).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自动测试是开发者编写的，以确保应用程序在整个系统生命周期内的一致性。有几种不同类型：单元测试、集成测试或UI测试，读者对此应该很熟悉。良好的测试覆盖为新应用的变化提供了系统的健壮性，提高了对失败和性能问题的抵抗力。与之前的情况一样，我们不希望排除手动测试以支持自动测试，反之亦然（至少在机器能够通过图灵测试之前！）。
- en: ANR and delays in software
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ANR和软件中的延迟
- en: '**ANR** stands for **Application Not Responding**, and is one of the several
    nightmares of an Android developer. The Android operating system analyzes the
    status of apps and threads, and when certain conditions are met it triggers an
    ANR dialog, blocking the user from any interactive experience. The dialog announces
    that the application stopped responding, and is not responsive anymore. The user
    can select whether he/she wants to close the application, or keep waiting until
    the application becomes responsive again (if this ever happens):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**ANR**代表**应用无响应**，是安卓开发者面临的一系列噩梦之一。安卓操作系统会分析应用程序和线程的状态，当满足某些条件时会触发ANR对话框，阻止用户进行任何交互式体验。该对话框宣布应用程序停止响应，且不再有反应。用户可以选择是否关闭应用程序，或者继续等待直到应用程序再次变得响应（如果这种情况真的会发生）：'
- en: '![ANR and delays in software](img/4666_01_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![软件中的ANR和延迟](img/4666_01_02.jpg)'
- en: What triggers ANRs and how can I avoid them?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么原因会导致ANR，我该如何避免它们？
- en: 'Android systems trigger ANRs in two different situations:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Android系统在两种不同情况下会触发ANR：
- en: When there has been no response for an event in five seconds
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当有事件在五秒内没有得到响应
- en: If a BroadcastReceiver is still executing 10 seconds after its execution
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个BroadcastReceiver在执行后10秒仍在运行
- en: 'This happens mostly when an operation is being executed in the **UI Thread**.
    In general, any operation expected to be time- or operation-consuming should be
    performed in a separate thread, keeping the UI Thread available for the user interaction,
    and only notifying the UI Thread when the operation has been finished. In [Chapter
    5](ch05.html "Chapter 5. Multithreading"), *Multithreading*, we will show some
    advanced techniques for multithreading and thread communication. There are also
    different classes that can be used to perform operations in different threads,
    each of them with its own advantages and disadvantages. In general, when developing
    an application, remember: ANR dialog appearance frequency is inversely proportional
    to user satisfaction.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常发生在**UI线程**中执行操作时。通常，任何预期会耗时或操作消耗的操作都应该在单独的线程中执行，保持UI线程可用于用户交互，并且只在操作完成时通知UI线程。在[第5章](ch05.html
    "第5章. 多线程") *多线程*中，我们将展示一些多线程和线程通信的高级技术。也有不同的类可以在不同的线程中执行操作，每一个都有其自身的优缺点。通常，在开发应用程序时，请记住：ANR对话框出现的频率与用户满意度成反比。
- en: Android architecture
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android架构
- en: 'As with any other development framework, Android defines its own architecture
    and module. Android is a Linux-based operating system, although the numerous abstract
    layers provided by the SDK hide the Linux kernel almost completely, and it is
    really rare that we will be programming directly at the kernel level:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他开发框架一样，Android定义了自己的架构和模块。Android是一个基于Linux的操作系统，尽管SDK提供的众多抽象层几乎完全隐藏了Linux内核，实际上我们很少会直接在内核级别编程：
- en: '![Android architecture](img/4666_01_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Android架构](img/4666_01_04.jpg)'
- en: Dalvik Virtual Machine
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dalvik虚拟机
- en: Each Android application runs in its own process inside a virtual machine called
    Dalvik. As we have seen, programs are typically written in Java and then compiled
    to bytecode. From the bytecode (`.class` files) they are afterwards transformed
    into DEX format, commonly using a special tool provided by the Android SDK called
    **dx**. This DEX format is more optimized and designed to have a smaller memory
    footprint in comparison with normal Java `.class` files, since mobile devices
    lack the computational capabilities of desktops. This is achieved through compression
    and merging/optimization of the multiple `.class` files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Android应用程序都在一个名为Dalvik的虚拟机中运行自己的进程。正如我们所见，程序通常是用Java编写的，然后编译成字节码。从字节码（`.class`文件）之后，它们会被转换成DEX格式，通常使用Android
    SDK提供的特殊工具，名为**dx**。这种DEX格式更优化，与普通的Java `.class`文件相比，其内存占用更小，因为移动设备的计算能力不如桌面设备。这是通过对多个`.class`文件的压缩和合并/优化来实现的。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is not completely accurate that the coding has to be strictly done in Java.
    Android allows using native code in our applications, too. Therefore, existing
    code that we were using before can be reused here. Also, in the computer vision
    area, there is a lot of code that has been reused from the OpenCV framework. This
    is achieved through the **Native Development Kit** (**NDK**), which is explored
    in [Chapter 9](ch09.html "Chapter 9. Native Coding in Android"), *Native Coding
    in Android* and [Chapter 10](ch10.html "Chapter 10. Performance Tips"), *Performance
    Tips*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 编码严格来说并非必须使用Java，Android同样允许在我们的应用程序中使用原生代码。因此，之前使用过的现有代码可以在这里复用。同样，在计算机视觉领域，有大量从OpenCV框架复用的代码。这是通过**原生开发工具包**（**NDK**）实现的，在[第9章](ch09.html
    "第9章. Android中的原生编码") *Android中的原生编码*和[第10章](ch10.html "第10章. 性能优化技巧") *性能优化技巧*中探讨了这一点。
- en: The Dalvik Virtual Machine also includes some **Java Virtual Machine** (**JVM**)
    features, such as **garbage collection** (**GC**). There has been a lot of criticism
    through the GC because of its non-generational nature; it's famous for driving
    developers crazy. However, since Android 2.3, an improved concurrent garbage collector
    makes some of the development easier.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Dalvik虚拟机还包括一些**Java虚拟机**（**JVM**）的特性，比如**垃圾回收**（**GC**）。由于GC的非分代性质，它曾受到很多批评；它以让开发者抓狂而闻名。然而，自从Android
    2.3以来，改进的并发垃圾回收器使得开发变得更加容易。
- en: Each application running on Dalvik has at least a total of 16 MB of available
    heap memory. This can be a real limitation for some applications, since we will
    likely need to deal with large amounts of image and audio resources. However,
    newer devices such as tablets or high-end devices have a higher heap limit to
    allow the usage of high-resolution graphics. We expect this situation to improve
    in the near future due to the fast evolution of mobile hardware.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dalvik上运行的应用程序至少有16MB的总可用堆内存。这对于某些应用程序来说可能是一个真正的限制，因为我们可能需要处理大量的图像和音频资源。然而，像平板电脑或高端设备这样的新型设备具有更高的堆限制，允许使用高分辨率图形。我们预计由于移动硬件的快速发展，这种情况将在不久的将来得到改善。
- en: Memory management
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存管理
- en: '**Memory** is always, by definition, a scarce resource on any software platform.
    But when it comes to mobile devices, this is an even more constrained resource.
    Mobile devices often have less physical memory and processor capacity that their
    bigger peers, and having an efficient memory management is crucial to improving
    user experience and software stability.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按**内存**的定义，在任何软件平台上它都是一种稀缺资源。但说到移动设备，这更是一个受限的资源。移动设备通常具有比其更大的同行更少的物理内存和处理能力，因此高效的内存管理对于提升用户体验和软件稳定性至关重要。
- en: Dalvik Virtual Machine routinely triggers garbage collection in a similar way
    to Java, but this does not mean that we can ignore memory management completely.
    One very common error in junior programmers is to create memory leaks. A memory
    leak happens when an object is stored in memory, but it cannot be accessed anymore
    by the running code. The size can vary a lot (from an integer to a big bitmap
    or structure of several megabytes), but in general they affect software smoothness
    and integrity. We can use automated tools and frameworks to detect memory leaks
    and also apply some programming techniques to avoid allocating objects unnecessarily
    (and equally important, to deallocate them when they are no longer needed).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Dalvik虚拟机与Java类似，会定期触发垃圾回收，但这并不意味着我们可以完全忽视内存管理。初级程序员常犯的错误之一就是产生内存泄漏。当内存中的对象无法再被运行中的代码访问时，就会发生内存泄漏。这些对象的大小可能差异很大（从整数到一个大位图或几个兆字节的机构），但一般来说，它们会影响软件的流畅性和完整性。我们可以使用自动化工具和框架来检测内存泄漏，同时应用一些编程技术来避免不必要地分配对象（同样重要的是，在不再需要时释放它们）。
- en: An Android application has a maximal amount of RAM memory that it can manage.
    It is different for each device (yes, another problem of the system fragmentation),
    and can be particularly checked by calling the function `getMemoryClass()` on
    the `ActivityManager`. Early devices had a per-app cap of 16 MB. Later devices
    increased that to 24 MB or 32 MB, and it will not be surprising to see devices
    up to 48 or 64 MB. There are several factors contributing to this fact, such as
    screen size. Larger screens generally mean larger resolutions for bitmaps; thus,
    as they increase, memory requirements will also grow. Some techniques can also
    bypass this limitation, such as using the NDK or requesting from the system a
    larger heap. This last is, however, considered to be poor form for an Android
    app.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓应用有一个最大可管理的RAM内存量。它因每个设备而异（是的，系统分化的另一个问题），可以通过在`ActivityManager`上调用`getMemoryClass()`函数来特别检查。早期设备的每个应用上限为16MB。后来设备将其增加到24MB或32MB，看到高达48或64MB的设备并不会令人惊讶。有几个因素促成了这一事实，比如屏幕尺寸。较大的屏幕通常意味着位图的分辨率更高；因此，随着它们的增加，内存需求也会增长。一些技术也可以绕过这个限制，比如使用NDK或向系统请求更大的堆。然而，这对于安卓应用来说被认为是拙劣的形式。
- en: When a process starts, it is forked from an existing or root process called
    **Zygote**. Zygote starts every time the system boots and loads the resources
    common to all the apps. By doing this, Android tries to share all the common resources
    among the applications, avoiding duplicating memory usage for the same frameworks.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个进程启动时，它是由一个现有的或根进程**Zygote**分叉出来的。Zygote每次系统启动时都会启动，并加载所有应用程序共有的资源。通过这种方式，安卓试图在应用程序之间共享所有公共资源，避免为相同的框架重复使用内存。
- en: Energy consumption
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 能耗
- en: Mobile devices have a limited battery size, and they are not connected to a
    permanent power supply as with a standard computer. Therefore, an efficient usage
    of the battery and energy is a vital factor of survival. If you are continuously
    performing operations that drain the battery or require continuous access to the
    device hardware it will affect the user experience, and it might lead to rejection
    of the application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备的电池容量有限，且不像标准电脑那样连接到永久电源。因此，高效使用电池和能源是生存的关键因素。如果你持续执行耗电操作或需要持续访问设备硬件，这将会影响用户体验，甚至可能导致应用程序被拒绝。
- en: Good energy management requires an excellent understanding of how the energy
    is used, and which operations can drain the battery very quickly. There are tools
    and benchmark frameworks to find out the energy bottlenecks and sections in the
    software where the energy consumption is higher than expected.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的能源管理需要对能源如何使用以及哪些操作可能迅速耗电有很好的了解。有一些工具和基准测试框架可以找出能源瓶颈和软件中能源消耗高于预期的部分。
- en: 'Mobile consumer-electronics devices, especially phones, are powered from batteries
    that are limited in size, and therefore, capacity. This implies that managing
    energy well is paramount in such devices. Good energy management requires a good
    understanding of where and how the energy is used. To this end we present a detailed
    analysis of the power consumption of a recent mobile phone, the Openmoko Neo Freerunner.
    We measure not only overall system power, but the exact breakdown of power consumption
    by the device''s main hardware components. We present this power breakdown for
    micro-benchmarks as well as for a number of realistic usage scenarios. These results
    are validated by the overall power measurements of two other devices: the HTC
    Dream and Google Nexus One.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 移动消费电子产品，尤其是手机，由有限容量的电池供电。这意味着在这样的设备中，良好的能源管理至关重要。良好的能源管理需要对能源的使用地点和使用方式有很好的了解。为此，我们详细分析了最近一款手机Openmoko
    Neo Freerunner的功耗。我们不仅测量了整个系统的功耗，还精确地测量了设备主要硬件组件的功耗分解。我们为微基准测试以及一些真实的使用场景提供了这种功耗分解。这些结果通过HTC
    Dream和Google Nexus One两款设备的整体功耗测量得到了验证。
- en: Java language
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java语言
- en: Android is mostly written in Java. Although a few alternatives have appeared
    lately (we can come up with Kotlin and Android, which is a fantastic combination,
    for example), Java will likely remain the language of choice for Android. Its
    very mature environment, massive support from Google and other companies, and
    the vibrant developer scene, ensure it goes on leading Android's development.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓大部分是用Java编写的。尽管最近出现了一些替代方案（例如，我们可以提到Kotlin和Android，这是一个绝佳的组合），但Java可能仍将是安卓的首选语言。它成熟的环境、来自谷歌和其他公司的大量支持以及活跃的开发者社区，确保了它继续引领安卓开发。
- en: One factor that did attract developers to the Android ecosystem was precisely
    this shared usage of an existing language. Java has some particular characteristics
    and techniques that we need to learn in order to use it effectively.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这种对现有语言的共享使用吸引了开发者加入安卓生态系统。Java有一些特定的特点和技巧，我们需要学习以有效地使用它。
- en: Native Development Kit or how to develop with native code when needed
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原生开发工具包，或者在需要时如何使用原生代码进行开发
- en: 'Using **Native Development Kit** (**NDK**) can mean sometimes the difference
    between a performing application or an application that just does its job. We
    will generally use NDK in the following contexts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**原生开发工具包**（**NDK**）有时意味着应用程序的表现截然不同，有的只是完成任务而已。我们通常在以下情况下使用NDK：
- en: '**Use of existing C/C++ libraries**: This is an obvious advantage, since you
    have access to powerful existing software such as OpenCV1, audio encoders, and
    so on.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用现有的C/C++库**：这是一个明显的优势，因为你能够使用强大的现有软件，如OpenCV1、音频编码器等。'
- en: 'Performance: For some critical inner loops, the marginal performance advantage
    of C/C++ over Java, especially before **Just-In-Time compilation** (**JIT**) is
    available in the Android compiler, may be a deciding factor.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能：对于一些关键的内循环，在Android编译器中**即时编译（JIT）**可用之前，C/C++相对于Java的边缘性能优势可能是决定性因素。
- en: '**To do something that the NDK allows that the Java API can''t manage**: Low-level
    operations close to the hardware, particularly to impact manufacturer-specific
    hardware, might only be possible through C/C++.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用NDK实现Java API无法处理的事情**：接近硬件的低级别操作，尤其是针对特定制造商硬件的影响，可能只能通过C/C++实现。'
- en: '**Obfuscation**: Compiled code is somehow more difficult to reverse-engineer
    than Java bytecode. Security by obscurity is, however, not the ideal solution,
    but it can complement your already existing system.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混淆**：编译后的代码在某种程度上比Java字节码更难以逆向工程。然而，安全性依赖于隐蔽性并不是理想的解决方案，但它可以补充您已有的系统。'
- en: Three limits in application responsiveness
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序响应性的三个限制
- en: 'There are three different thresholds accepted as limits to the user experience
    in any software system:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何软件系统中，有三个不同的阈值被认为是用户体验的限制：
- en: 0.1 seconds is perceived by the user as instantaneous responsiveness. In such
    operations, there is no need to display any visual feedback or notification to
    the user, and this includes most operations in normal scenarios (for example,
    the lapse between clicking on a button and displaying a dialog, or showing a different
    activity).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0.1秒被用户视为即时响应。在这种操作中，无需向用户显示任何视觉反馈或通知，这包括大多数正常场景中的操作（例如，点击按钮和显示对话框之间的间隔，或显示不同的活动）。
- en: 1.0 seconds is the lapse when the user flow gets interrupted. Between 0.1 and
    1.0 there is still no need to provide any feedback, but after a second, the user
    has lost the perception of performing an immediate operation.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1.0秒是用户流程中断的时间。在0.1到1.0秒之间，仍然无需提供任何反馈，但超过一秒后，用户会失去立即执行操作的感知。
- en: 10 seconds is the final limit, when the user loses concentration and interest
    in the application. More than 10 seconds in an operation generally means that
    the user will lose her/his interest in the system and procrastinate while the
    operation is being performed. Visual feedback is crucial here; without it, the
    user will get frustrated and reject our system.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10秒是最终的限制，此时用户会失去对应用程序的集中精力和兴趣。在操作超过10秒的情况下，用户通常会失去对系统的兴趣，并在操作执行过程中拖延。这里的视觉反馈至关重要；如果没有它，用户会感到沮丧并拒绝我们的系统。
- en: Google suggests keeping all interactions under 100 to 200 ms. That is the threshold
    beyond which users will perceive slowness in an application. Although this is
    not always possible (think about downloading a large amount of data, such as media
    and so on), we will learn techniques to provide the user with the best experience.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌建议所有交互的响应时间保持在100到200毫秒以内。这是用户感知应用程序迟缓的阈值。尽管这并不总是可能的（考虑到下载大量数据，如媒体等），但我们将学习一些技术，以提供最佳用户体验。
- en: Business value of software quality
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件质量商业价值
- en: Developers often need to justify to non-technical peers why some decisions are
    taken that do not bring immediate value (think about refactoring an old module
    or developing some test coverage). There is a clear gap between the business and
    engineer departments that needs to be reconciled.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员经常需要向非技术同行解释为什么做出某些决策，这些决策并不能立即带来价值（考虑到重构旧模块或开发一些测试覆盖率）。商业和工程部门之间存在明显的差距，需要调和。
- en: 'When we have to discuss with other departments the business value of decisions
    that have been made for the sake of software quality, I always like to mention
    the word "money". Making some decisions, in the long run, is equivalent to saving
    money and providing direct value to the software. They might not generate an immediate
    output, or a corporeal item (as much as software can be corporeal), but they certainly
    will come back in the future with some benefits. I can remember a few situations
    when refactoring a piece of software at the right moment made the difference between
    having a sustainable artifact that could be extended and having a monolith, as
    the result of many bad design decisions, that nobody was able to maintain and
    in the end meant money and financial costs. The following figure reveals the losses
    and consequences for companies over time due to bad software quality:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要与其他部门讨论为了软件质量而做出的决策的商业价值时，我总是喜欢提到“金钱”这个词。从长远来看，做出某些决策等同于节省开支并直接为软件提供价值。它们可能不会立即产生结果，或者产生一个实体物品（尽管软件可以是实体），但它们将来肯定会带来一些好处。我可以想起几次在恰当的时刻重构软件使得可持续扩展的工件与因许多糟糕设计决策而产生的单体架构之间的区别，没有人能够维护最终意味着金钱和财务成本。以下图表揭示了因软件质量不佳随时间给公司带来的损失和后果：
- en: '![Business value of software quality](img/4666_01_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![软件质量的企业价值](img/4666_01_03.jpg)'
- en: This graph has been taken from a document by David Chappell, and it explains
    some examples of when bad software quality incurs financial loss. Losing value
    from lost business might remind us of when Sony closed the PlayStation network
    due to a network attack. If the software had been properly designed and protected,
    the network might have been able to keep operating, but poor design led to the
    company losing a considerable amount of money. A financial loss due to customer
    reparations happens every time a company needs to compensate clients for a problem
    happening as a consequence of a poor software system. The obvious financial loss
    from lost customers will happen when customers do not want to acquire any more
    services provided by an infamous company! Financial loss from lawsuits is inevitable
    in many cases, especially when privacy issues or stolen data are involved (and
    they can be very expensive!).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图表摘自David Chappell的文档，它解释了软件质量不佳可能导致财务损失的一些例子。因业务流失而造成的价值损失可能让我们想起索尼因网络攻击而关闭PlayStation网络的事件。如果软件得到了恰当的设计和保护，网络可能还能够继续运行，但糟糕的设计导致公司损失了大量的金钱。每当公司需要为客户因软件系统糟糕导致的问题进行赔偿时，都会发生因客户赔偿而导致的财务损失。当客户不再愿意购买声名狼藉公司的服务时，明显的财务损失就会发生！因诉讼而导致的财务损失在很多情况下是不可避免的，特别是涉及到隐私问题或数据被盗时（这可能非常昂贵！）。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After this chapter, the reader should have a more accurate idea of the different
    areas we will explore together in this book. We also hope our arguments are convincing
    enough, and we will work towards developing them further throughout the entire
    book.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读了本章之后，读者应该对我们将在本书中一起探索的不同领域有一个更准确的认识。我们也希望我们的论点足够有说服力，并且我们将在整本书中进一步发展这些论点。
- en: The reader should be able to argue why performance will matter in the context
    of his/her organization, and should know some of the keywords of efficient Android
    development. Do not get stressed, this is only the beginning.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该能够论证在自身组织环境中性能的重要性，并且应该了解一些关于高效Android开发的关键词。不要感到压力，这只是一个开始。
