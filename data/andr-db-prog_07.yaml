- en: Chapter 7. Android Databases in Practice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 实践中的Android数据库
- en: In the previous chapter, we finally looked at ways we could bind our backend
    database to the user interface. At this point, we know about all the various local
    storage methods built into the Android OS ([Chapter 1](ch01.html "Chapter 1. Storing
    Data on Android"), *Storing Data on Android* and [Chapter 2](ch02.html "Chapter 2. Using
    a SQLite Database"), *Using a SQLite Database)*, most notably the SQLite database,
    as well as ways to take advantage of the SQLite language to execute powerful queries
    ([Chapter 3](ch03.html "Chapter 3. SQLite Queries"), *SQLite Queries)*. Furthermore,
    we know how to expose our custom SQLite databases to external applications through
    content providers ([Chapter 4](ch04.html "Chapter 4. Using Content Providers"),
    *Using Content Providers)*, as well as how to query pre-existing content providers
    such as the `Contacts` content provider ([Chapter 5](ch05.html "Chapter 5. Querying
    the Contacts Table"), *Querying the Contacts Table*).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们最终探讨了将后端数据库绑定到用户界面的方法。在这一点上，我们了解了所有内置在Android操作系统中的各种本地存储方法（[第1章](ch01.html
    "第1章. 在Android上存储数据")，*在Android上存储数据*和[第2章](ch02.html "第2章. 使用SQLite数据库")，*使用SQLite数据库*），尤其是SQLite数据库，以及如何利用SQLite语言执行强大查询的方法（[第3章](ch03.html
    "第3章. SQLite查询")，*SQLite查询*）。此外，我们还知道如何通过内容提供者将自定义SQLite数据库暴露给外部应用程序（[第4章](ch04.html
    "第4章. 使用内容提供者")，*使用内容提供者*），以及如何查询预存在的内容提供者，如`Contacts`内容提供者（[第5章](ch05.html "第5章.
    查询联系人表")，*查询联系人表*）。
- en: And so at this point, we've already equipped ourselves with a lot of tools –
    enough to start building out full-fledged applications. However, before we do,
    let's pause and think.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经装备了自己大量的工具——足以开始构建完整的应用程序。然而，在我们开始之前，让我们暂停一下并思考一下。
- en: Should we actually be relying on *local* SQLite databases? What if something
    happens to the user's phone, and their data gets erased? Or more importantly,
    should each user have to download the *entire* dataset, and store it locally on
    their phones? Keep in mind that a phone's memory is rather limited and is a fraction
    of what a desktop computer would have.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的应该依赖*本地*SQLite数据库吗？如果用户的手机出了问题，他们的数据被删除了怎么办？或者更重要的是，每个用户是否需要下载*整个*数据集，并将其本地存储在手机上？请记住，手机的内存相当有限，仅是台式机内存的一小部分。
- en: All these questions come into play when we start thinking about how we're going
    to design our application. Therefore, in this chapter, we'll start by looking
    at some practical use cases for having a localized SQLite database for your Android
    application, and then move to other, more typical application designs specifically
    for data-centric applications (if your application is going to be a game then
    likely this won't apply).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始考虑如何设计我们的应用程序时，所有这些问题都会发挥作用。因此，在本章中，我们将从一些实际的使用场景开始，探讨为您的Android应用程序提供本地化SQLite数据库的用途，然后转移到针对以数据为中心的应用程序的其他更典型的应用程序设计（如果您的应用程序将是一款游戏，那么这可能不适用）。
- en: Local database use cases
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地数据库使用场景
- en: So let's start with different ways one would likely see an Android application
    use a localized SQLite database. To clarify, what I mean when I say a *localized*
    SQLite database is one that solely exists on the phone's memory, and more specifically
    within the application's allocated memory, and is not backed up/supported by an
    external database. This is in contrast to an *external* database, which would
    exist on a server (or in the cloud), and would serve as either a backup to the
    localized database, or as a central database, from where all applications would
    request, insert, update, and delete data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们从不同的角度考虑一个Android应用程序可能会如何使用本地化的SQLite数据库。为了澄清，我所说的*本地化*的SQLite数据库是指仅存在于手机内存中，更具体地是在应用程序分配的内存中，并且没有外部数据库支持/备份的数据库。这与*外部*数据库形成对比，外部数据库存在于服务器（或云中），可以作为本地数据库的备份，或者作为中央数据库，所有应用程序都会请求、插入、更新和删除数据。
- en: 'For our first example, consider a puzzle-based application that keeps track
    of all the user''s high scores for each level. The high scores table would have
    fields such as the rank of that respective score (that is first, second, third,
    and so on), the name of the user who obtained that score, as well as the score
    itself. Let''s go through each form of data storage, and think about whether or
    not it would be a sensible way to accomplish the task at hand:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们的第一个示例来说，考虑一个基于谜题的应用程序，它跟踪每个级别的用户高分。高分表格将包含诸如该分数的排名（即第一、第二、第三等）、获得该分数的用户名称以及分数本身等字段。让我们逐一考虑每种数据存储形式，思考它是否是完成当前任务的一个合理的方案：
- en: '`SharedPreferences:` Could we use a Map-based class to accomplish this? I guess
    if we only needed one high scores table (as opposed to one per level) and that
    table only had a few rows, we could get away with using a simple Map. But this
    probably isn''t a very natural use of the `SharedPreferences` class, and we could
    probably do much better with a different type of data storage so let''s pass on
    this one for now.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SharedPreferences：` 我们可以使用基于Map的类来完成这个任务吗？我想，如果我们只需要一个高分表格（而不是每个级别一个）并且该表格只有几行数据，我们或许可以使用简单的Map来实现。但这可能并不是`SharedPreferences`类的自然使用方式，而且我们可能通过使用不同的数据存储类型来做得更好，所以现在我们先不考虑这个方案。'
- en: '**External SD cards:** As you probably recall, writing to SD cards is extremely
    useful for saving and backing up files. In theory though, we could probably save
    these tables in a file format particularly by saving them in **Comma Separated
    Values (CSV)** files (think of these as spreadsheets). Then, we could just have
    one CSV file per level, and since a CSV file is structured like a spreadsheet,
    we can very easily read these files in and bind them to something like a `GridView`.
    Now, one of the nice things about saving stuff to an SD card is that your data
    is naturally backed up. For instance, if the user had to uninstall and reinstall
    your application for whatever reason, those CSV files would still exist and the
    data would be preserved. On the flip side though, if for whatever reason the user
    removed their SD card or tampered with their SD card, then it''s possible that
    the data may be missing or corrupted. In any case, using CSV files and external
    SD cards isn''t a terrible solution, but it may not be the most optimal or natural
    one.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部SD卡：** 如你所知，写入SD卡对于保存和备份文件非常有用。理论上，我们可能通过将表格保存为**逗号分隔值（CSV）**文件（你可以将这些文件视为电子表格）来进行文件格式的保存。这样，每个级别对应一个CSV文件，由于CSV文件的格式与电子表格类似，我们可以很容易地将这些文件读取并绑定到类似`GridView`的控件中。将数据保存到SD卡的优点之一是数据自然得到了备份。例如，如果用户由于某种原因需要卸载并重新安装你的应用程序，那些CSV文件仍然存在，数据也得到了保留。然而另一方面，如果用户出于某种原因移除了SD卡或对SD卡进行了篡改，那么数据可能会丢失或损坏。无论如何，使用CSV文件和外部SD卡并不是一个糟糕的解决方案，但它可能不是最优化或最自然的选择。'
- en: '**SQLite databases:** Given that we''re trying to save a series of tables,
    naturally we should think about using some kind of database schema. Now, depending
    on how many levels there are in our game (and subsequently how many tables we
    would need), we could design a database schema that has one separate table for
    each level, and for each level we could just point the `Cursor` to the correct
    table''s URI. However, consider a scenario where we have 50 levels. In that case,
    it might seem a little silly to create 50 identical tables with 50 unique URIs.
    And so, what we might do is add an additional field to our table for *level*.
    Then, when we make our query, we could filter the table by the *level* column,
    and sort the remaining sub-table by rank. Using a SQLite database in this case
    would be especially slick because of how we could bind our resulting `Cursor`
    directly to the UI through a `ListView`. Now, what''s the problem here? Well,
    if the user has to uninstall your application, then it''s extremely likely that
    your SQLite database will get wiped out from the phone''s memory.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQLite数据库：**考虑到我们试图保存一系列表格，自然我们会考虑使用某种数据库架构。现在，根据我们的游戏中包含多少个级别（以及我们可能需要的表格数量），我们可以设计一个数据库架构，每个级别都有一个单独的表格，对于每个级别，我们只需将`Cursor`指向正确表格的URI。然而，设想一下如果我们有50个级别会怎样。在这种情况下，创建50个具有50个唯一URI的相同表格似乎有点愚蠢。因此，我们可能会在表中增加一个用于表示*级别*的字段。然后，当我们执行查询时，可以通过*级别*列过滤表格，并对剩余的子表格按排名进行排序。在这种情况下使用SQLite数据库特别方便，因为我们可以将生成的`Cursor`直接通过`ListView`绑定到用户界面。那么，这里的问题是什么呢？好吧，如果用户必须卸载你的应用程序，那么你的SQLite数据库极有可能从手机内存中被清除。'
- en: '**External databases:** Using an external database in this case could potentially
    get very messy. Why? First, let''s think about what our schema would have to look
    like. Potentially, we could have one giant table that contains fields for the
    device issuing the request (that is, the phone number or username of the device
    requesting the data), for the level being requested, and so on, and then just
    make queries that contain a bunch of filter clauses. Or, a nicer solution might
    be to have a table per level, and for each table include the additional field
    of which device that row belongs to. As you can see, in either case the schema
    is going to look a little messy, but for now let''s stick with the latter schema.
    Say your game does moderately well and reaches 100,000 active installs. Furthermore,
    say your game has 50 levels and for each high scores table, you keep the top 10
    scores. Not unreasonable for a semi-popular game, right? Well, under this sce
    nario, suddenly your external database has 50 tables with a million rows per table,
    leaving you with a fairly large and memory-intensive database. Then, you have
    to take into account that each time the user requests to see a high scores table,
    he/she will need to issue an HTTP request to your external database in order to
    retrieve the corresponding table. This HTTP request will be several magnitudes
    slower than a simple SQLite query to your local database. So what''s the plus
    side to all this work? This method will allow you to backup every user''s high
    scores, independent of how many times they uninstall and reinstall your application,
    or how many times they change phones, and so on. Another nice feature is that
    once you have all of the data from all of your users, you could potentially create
    a global high scores table — allowing your users to see not just what the high
    scores were for their specific Android device, but what the all-time high scores
    were across all users who p lay your game!'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部数据库：**在这种情况下使用外部数据库可能会变得相当复杂。为什么？首先，我们考虑一下我们的数据模型会是什么样子。可能我们会有一个巨大的表格，包含发出请求的设备（即请求数据的手机号或用户名）、请求的关卡等字段，然后就是包含一堆过滤子句的查询。或者，更好的解决方案可能是为每个关卡设置一个表格，并为每个表格包含一个附加字段，指明哪一行属于哪个设备。如您所见，无论哪种情况，数据模型都会有些混乱，但目前我们还是坚持后一种模式。假设你的游戏表现不错，达到了10万的活跃安装量。再假设你的游戏有50个关卡，每个高分排行榜都保留前10名成绩。对于一个半热门的游戏来说，这并不过分，对吧？在这种情况下，你的外部数据库突然就有了50个表格，每个表格有百万行数据，这会导致一个相当庞大且占用内存的数据库。此外，你还需要考虑到，每次用户请求查看一个高分排行榜时，他/她都需要向你的外部数据库发出一个HTTP请求，以获取相应的表格。这个HTTP请求的速度将远远慢于对本地数据库的简单SQLite查询。那么，所有这些工作的优点是什么？这种方法可以备份每个用户的高分记录，无论他们卸载和重新安装应用多少次，或者更换多少次手机等等。另一个很好的特性是，一旦你收集了所有用户的数据，你就可以创建一个全球高分排行榜——让你的用户不仅能看到他们特定Android设备上的高分，还能看到所有玩过你游戏用户的史上最高分！'
- en: 'And so, even in this scenario there are pros and cons for using a localized
    database versus an external database. The questions you''d need to ask yourself
    in this case are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即便在这种情况下，使用本地数据库与外部数据库也各有优缺点。在这种情况下你需要问自己的问题是：
- en: How important is it that I backup the user's high scores?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户的高分记录备份有多重要？
- en: How likely/useful would it be to build a global high scores table?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个全球高分排行榜的可能性/实用性有多大？
- en: If your intended game and audience is one that is extremely competitive and
    you believe users will get extremely upset if reinstalling your application/switching
    phones means losing their high scores history, then it might be wise to use an
    external database. However, my best guess is that very few mobile games will cause
    user's to become *that* competitive, in which case it would be significantly more
    practical to just have a simple localized database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是打造一款竞争性极强的游戏，并且你认为用户如果重新安装应用或更换手机会非常不满，因为他们会失去高分记录，那么使用外部数据库可能是明智之举。然而，我推测，很少有手机游戏会让用户变得如此竞争激烈，在这种情况下，使用简单的本地数据库将更为实际。
- en: The conclusion? For a normal puzzle-based game with a simple high scores table,
    a localized database does the trick. The format of the data (that is, a table)
    makes this database a natural choice, and the assumption that users won't care
    about whether or not their high scores are preserved make implementing a localized
    database much more practical than an external database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 结论是什么？对于一款基于普通谜题的游戏，以及一个简单的高分排行榜，使用本地化数据库就足够了。数据的格式（也就是表格）使得这个数据库成为自然的选择，而且假设用户不会关心他们的高分是否被保存，这使得实现一个本地化数据库比外部数据库更为实际。
- en: Let's consider one more example before we move on. Say you want to create an
    application that allows users to better find cafes and coffee shops. Perhaps you
    want to add features that allow the user to filter cafes and coffee shops by availability
    of space (too many times I find myself wandering into a nearby Starbucks just
    to find that all the tables are taken) or by availability of Wi-Fi. Not a bad
    application – but where would you find your initial cafe/coffee shop database?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，再考虑一个例子。假设你想创建一个应用程序，使用户能更好地找到咖啡馆和咖啡店。也许你想添加一些功能，允许用户根据空间可用性或Wi-Fi可用性筛选咖啡馆和咖啡店（我经常发现自己走进附近的星巴克，结果发现所有的桌子都被占了）。这个应用不错——但你会从哪里找到你的初始咖啡馆/咖啡店数据库呢？
- en: 'Thankfully, you run into a couple of APIs from various services (that is, Yelp,
    Zagat, and so on) which allow you to query their databases, so the data source
    is no longer a problem. But now what? How would you design your Android application''s
    backend? Let''s walk through our options again:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，你遇到了一些来自不同服务（如Yelp、Zagat等）的API，它们允许你查询它们的数据库，因此数据源不再是问题。但现在怎么办？你将如何设计你的Android应用程序的后端？让我们再次审视我们的选择：
- en: '`SharedPreferences:` This time it is pretty easy to see why a method as simple
    and lightweight as a `SharedPreferences` class would not be appropriate. We''ll
    pass on this one.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SharedPreferences:` 这一次，很明显，像`SharedPreferences`这样简单轻量级的方法并不合适。我们将放弃这个选项。'
- en: '**External SD cards:** So, like in our previous example, one possible way to
    use an external SD card is to store your data in CSV files (i.e. spreadsheet format)
    and then read and write to those files. And so, what we might do here is upon
    entering our application for the first time, we make a series of API calls to
    load our initial database of cafe/coffee shops. We then write our data into a
    CSV file and reference/update this CSV file going forward. So far so good. But
    what happens when we want to start filtering our data? Say the user only wants
    to see locations near him/her, or only wants to see locations that have free Wi-Fi.
    When we''re dealing with CSV files, there doesn''t exist a notion of *querying*
    this CSV file a file is a file and our only solution would be to open a connection
    to the file, iterate through each row, and manually pick out the rows that we
    want. In this example, though it would be slow and burdensome, in theory we could
    implement our backend with this SD card solution. However, it''s easy to see how
    once our schema becomes more complicated (requiring multiple tables instead of
    just one), not being able to execute efficient, complex queries would lead to
    an extremely poor design decision. And not to mention some of the issues mentioned
    previously with users removing SD cards, corrupting SD cards, and so on. Maybe
    it''s best we stay away from SD cards in this situation.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部SD卡：**就像我们之前的例子，使用外部SD卡的一个可能方法是，将你的数据存储在CSV文件中（即电子表格格式），然后读取和写入这些文件。那么，我们在这里可能会做的是，在第一次进入我们的应用程序时，我们进行一系列的API调用，以加载我们初始的咖啡馆/咖啡店数据库。然后我们将数据写入CSV文件，并引用/更新这个CSV文件。到目前为止，一切顺利。但是当我们想要开始筛选我们的数据时会发生什么？比如用户只想看到他/她附近的地点，或者只想看到提供免费Wi-Fi的地点。当处理CSV文件时，并不存在*查询*这个CSV文件的概念，因为文件就是文件，我们唯一的解决方案就是打开与文件的连接，遍历每一行，手动挑选出我们想要的行。在这个例子中，尽管这会变得缓慢且繁重，理论上我们可以用这个SD卡解决方案实现后端。然而，很容易看出，一旦我们的模式变得更加复杂（需要多个表而不仅仅是一个），不能执行高效、复杂的查询将导致一个极其糟糕的设计决策。更不用说之前提到的一些问题，比如用户移除SD卡、SD卡损坏等。在这种情况下，我们最好还是远离SD卡。'
- en: '**SQLite databases:** With SQLite databases, again, it''s a natural solution
    given the inherent table format of our data. We could very easily create a schema
    that has fields for name, location, Wi-Fi availability, and so on, and then write
    a slew of queries that would quickly filter our data accordingly. Additionally,
    with SQLite databases, we would benefit from the ease at which our data could
    be bound to the UI. However, what would the mechanics of our backend look like?
    Upon reaching the application for the first time, would we need to hit all APIs
    and download the entire dataset of all cafes/coffee shops across the entire nation?
    If we don''t, then we run into the problem of what happens when the user is traveling,
    or wants to look up locations outside of their current city most likely our only
    solution would be to call the APIs for every new location that is introduced.
    If we do download the entire data set at once, then depending on the num ber of
    cafes/coffee shops in the US, we could run into issues with memory and performance.
    In both cases, we need to methodically choose how we''re going to sync and update
    our SQLite database with the newest information available through the APIs, an
    entirely different problem in and of itself.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQLite数据库：**对于SQLite数据库来说，这也是一个自然而然的解决方案，因为我们的数据具有固有的表格格式。我们可以很容易地创建一个包含名称、位置、Wi-Fi可用性等字段的架构，然后编写一系列查询来快速相应地过滤数据。此外，使用SQLite数据库，我们还能够轻松地将数据绑定到用户界面。然而，我们的后端机制会是什么样的呢？用户首次打开应用程序时，我们是否需要访问所有API并下载全国所有咖啡馆/咖啡店的全量数据集？如果我们不这样做，那么当用户旅行或想要查看他们当前城市以外的位置时，我们很可能会遇到问题，唯一的解决方案可能是为每个新位置调用API。如果我们一次性下载整个数据集，那么根据美国咖啡馆/咖啡店的数量，我们可能会遇到内存和性能方面的问题。在两种情况下，我们都需要有计划地选择如何将SQLite数据库与通过API获取的最新信息同步和更新，这本身就是一个完全不同的问题。'
- en: '**External databases:** With an external database, we can also take advantage
    of the inherent table format of our data. And just like with localized databases,
    we can still execute quick queries to filter our data. We benefit from having
    a centralized database, ensuring that each time a user makes a request for a subset
    of data, it will be the most up-to-date data. Furthermore, since our database
    would exist in an external server, we don''t require any additional memory on
    the application side, and we should also see a big performance gain, as making
    one request to one external database is much faster than making several requests
    to several APIs. Where we lose (compared to the SQLite database) is what happens
    when the user is making the same request *repeatedly*. For instance, say a user
    opens the search `Activity`, searches for his/her desired list of locations, waits
    a few seconds for the network request to c ome back, and then accidentally closes
    that `Activity`. If the user then re-opens the application and goes back to that
    `Activity`, he/she will need to make the *same* network request and wait another
    couple of seconds just to get the *same* results back. This can often be a huge
    nuisance for active users, and given the relatively short attention span of many
    mobile users, could be lethal to the success of your application.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部数据库：**通过使用外部数据库，我们可以利用数据的固有表格格式。与本地数据库一样，我们仍然可以执行快速查询来过滤数据。我们受益于拥有一个集中式数据库，确保每次用户请求数据子集时，获取到的都是最新的数据。此外，由于我们的数据库将位于外部服务器上，因此在应用端不需要额外的内存，并且我们应能显著提升性能，因为访问一个外部数据库远比多次访问多个API要快。我们相对于SQLite数据库的劣势在于（当用户）*反复*进行相同请求时会发生的情况。例如，假设用户打开搜索`Activity`，搜索他/她想要的位置列表，等待几秒钟让网络请求返回，然后意外关闭了那个`Activity`。如果用户随后重新打开应用程序并返回到该`Activity`，他/她将需要再次进行*相同*的网络请求，并等待几秒钟才能获取到*相同*的结果。这对于活跃用户来说通常是一个巨大的烦恼，并且鉴于许多移动用户相对较短的注意力集中时间，这可能会对应用程序的成功产生致命影响。'
- en: Now that we've run through the list of data storage methods available to us,
    let's just quickly summarize some of the pros and cons of each. First off, in
    terms of pure *implementation*, the localized database and the external database
    were clear winners. Then, in terms of *memory consumption*, the external database
    was a better choice than the localized database because of how the entire dataset
    could exist outside of the application. In terms of *performance*, the external
    database was nice in the sense that instead of hitting multiple APIs, we only
    need to hit one database (our own). However, the localized database was nice in
    the sense that a user could maneuver in and out of the search `Activity` without
    having to make any additional network calls.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了我们可以使用的数据存储方法列表，让我们快速总结一下每种方法的优缺点。首先，从纯*实现*的角度来看，本地数据库和外部数据库是明显的胜者。然后，在*内存消耗*方面，由于整个数据集可以存在于应用程序之外，外部数据库比本地数据库是更好的选择。在*性能*方面，外部数据库的好处在于，我们不是访问多个API，只需访问一个数据库（我们自己的）。然而，本地数据库的好处在于，用户可以在不进行任何额外网络调用的情况下，在搜索`Activity`中自由进出。
- en: There's no clear winner here, but there is a way to *combine* the two methods
    to design a robust backend that addresses all of the previously discussed issues.
    This combined method uses an external database as the central storage unit, but
    then uses a localized database as a *cache* to improve performance. In the next
    section, let's hone in on what it means to use a localized SQLite database as
    a cache for an external database instead of a standalone database.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里没有明确的胜者，但是有一种方法可以*结合*这两种方法，设计一个健壮的后端，解决之前讨论的所有问题。这种结合方法使用外部数据库作为中央存储单元，但使用本地数据库作为*缓存*来提高性能。在下一节中，让我们深入了解使用本地SQLite数据库作为外部数据库的缓存而不是独立数据库意味着什么。
- en: Databases as caches
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库作为缓存
- en: So what exactly is a cache? A **cache** is often defined as a place in memory
    that stores duplicate data so that it can be served faster in the future. In our
    case, this is exactly what we're looking for.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，缓存究竟是什么呢？**缓存**通常被定义为内存中的一个位置，用于存储重复数据，以便在将来可以更快地提供服务。在我们的案例中，这正是我们需要的。
- en: In our previous example, we saw that by using an external database, we were
    able to improve upon memory consumption and, at times, performance, without compromising
    implementation. Additionally, we could naturally ensure that all users have the
    same data, and that data is the most up-to-date. The only time relying solely
    on an external database suffers is when you have users maneuvering around your
    application, having to make identical (or similar) network requests to your external
    database each time, and then having to repeatedly wait for those network requests
    to come back.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例中，我们看到了通过使用外部数据库，可以在不牺牲实现的前提下，提高内存消耗和性能。此外，我们自然可以确保所有用户拥有相同的数据，且这些数据是最新的。唯一当仅依赖外部数据库会受到影响的情况是，当用户在你的应用程序中操作时，每次都必须对外部数据库进行相同（或相似）的网络请求，并且不得不反复等待这些网络请求返回。
- en: One solution is to use a cache and only have to make the network request *once*.
    Then, when the network request finishes, store a duplicate version of the returned
    data on a localized database, so that if the user makes the same (or similar)
    request, our system only needs to make a local query instead of a network query.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一种解决方案是使用缓存，并且只需进行一次网络请求。然后，在网络请求完成后，将返回数据的副本存储在本地数据库上，这样，如果用户进行相同（或相似）的请求，我们的系统只需进行本地查询，而不是网络查询。
- en: To help you better understand the low-level implementation, let's take a closer
    look at how this cache would work.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您更好地理解底层实现，让我们更详细地看看这个缓存是如何工作的。
- en: So the user lands on your search `Activity` and issues a request. Let's say
    the request is for all cafes and coffee shops within three miles from his/her
    location that also have free Wi-Fi. One design choice that you'll have to make
    is how much data should you cache in this case? Of course, you could issue the
    request with all of the user's desired filters, and only cache those results.
    But what if the user suddenly decides he/she doesn't care about having free Wi-Fi?
    Or if the user decides to relax their search criteria and wants to look for all
    shops within five miles instead?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 用户启动你的搜索`Activity`并发出请求。假设用户的请求是查找他/她位置三英里内提供免费Wi-Fi的咖啡馆和咖啡店。你需要做出一个设计选择：在这种情况下应该缓存多少数据？当然，你可以带着用户的所有期望筛选条件发出请求，只缓存这些结果。但如果用户突然决定不再需要免费Wi-Fi呢？或者用户决定放宽搜索条件，想要查找五英里内的所有商店怎么办？
- en: While having a cache will definitely improve performance, the real gain comes
    from how often your cache is hit. For those who are familiar with designing caches,
    the trade-off comes from the frequency at which your cache is hit versus the size
    of your cache. In other words, in an extreme case, if you designed your cache
    to contain your *entire* data set, then obviously every request would be a cache
    hit, and so your cache would be extremely effective in that sense. However, the
    fact that you have your entire data set stored in memory is sub-optimal (and oftentimes
    impossible depending on the size of your database), and so your cache would fail
    on that front. Trying to find a nice blend of the two is the goal, and so in this
    situation, instead of only requesting for locations within three miles that have
    free Wi-Fi, why not try requesting for all locations within five miles and exclude
    the Wi-Fi filter completely?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然拥有缓存将肯定会提升性能，但真正的收益来自于你的缓存被命中的频率。对于那些熟悉设计缓存的人来说，权衡来自于缓存被命中的频率与其大小之间的平衡。换句话说，在极端情况下，如果你设计的缓存包含了你的*整个*数据集，那么显然每个请求都会命中缓存，从这个意义上说，你的缓存将非常有效。然而，将整个数据集存储在内存中是不理想的（通常取决于数据库的大小，这往往是不可行的），在这方面缓存就会失败。尝试找到两者之间的良好平衡是目标所在。因此，在这种情况下，为什么不尝试请求五英里内的所有位置，并完全排除Wi-Fi筛选器呢？
- en: By caching this request instead, now when the user decides to relax his/her
    search conditions from three miles to five miles (or downwards to two miles),
    you'll already have all the results; so instead of issuing another network request
    you can simply filter your cache for the desired subset of data. Similarly, if
    your user wants to remove the Wi-Fi filter, you can quickly query your cache for
    this data, this time with the *Wi-Fi only* filter removed. In both cases, the
    user hits your cache and saves you from making a time-consuming network request.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过缓存这个请求，当用户决定将搜索条件从三英里放宽到五英里（或者减少到两英里）时，你已经有所有结果了；所以，你不需要发出另一个网络请求，只需简单地过滤缓存以获取所需的数据子集即可。同样，如果用户想要移除Wi-Fi筛选器，你可以迅速查询缓存中的数据，这次移除*仅限Wi-Fi*的筛选器。在这两种情况下，用户命中了你的缓存，从而为你节省了耗时的网络请求。
- en: The last leg in designing your caching system would just be determining how
    often to refresh your cache. Never refreshing your cache is sub-optimal, as it
    will only consume more memory over time with each new request you cache, and,
    furthermore, you'll run into the problem of having out-of-date data. For instance,
    say your user makes a cafe/coffee shop request for their hometown and you cache
    this result. However, your caching system is one that never refreshes the cache.
    A lot can happen in a year, and a year later when the user pulls out your application
    again and makes the same cafe/coffee shop request, he/she will hit the cache and
    pull the old data instead of making a fresh request.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 设计缓存系统的最后一步就是确定多久刷新一次缓存。从不刷新缓存是不理想的，因为随着时间的推移，每次你缓存新请求，它只会消耗更多的内存，而且，你还会遇到数据过时的问题。例如，假设用户对其家乡的咖啡馆/咖啡店发出请求，你缓存了这个结果。然而，你的缓存系统从不刷新缓存。一年内很多事情都可能发生，一年后用户再次拿出你的应用并发出同样的请求，他/她将会命中缓存并获取旧数据，而不是发出新的请求。
- en: On the flip side, by allowing your cache to refresh too frequently, you'll decrease
    your cache hit frequency and will end up having to make more network requests
    than desired. And so we again have an optimization problem where we wish to maximize
    the number of cache hits, while minimizing the amount of memory consumption needed,
    and also minimizing the frequency at which we pull stale data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果允许你的缓存太频繁地刷新，你将降低缓存命中频率，最终不得不进行比预期更多的网络请求。因此，我们再次面临一个优化问题，我们希望最大化缓存命中次数，同时最小化所需的内存消耗，并最小化我们拉取陈旧数据的频率。
- en: This simplified optimization problem sits at the heart of every caching system,
    and is the one you need to keep in mind when using a localized database to cache
    your external database network requests. While there is still much that could
    be discussed regarding caches, the goal of this section (and of this whole chapter
    in general) was to stir your thought process, and introduce you to one of the
    many uses for localized databases, and how they can be used in conjunction with
    external databases.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简化的优化问题位于每个缓存系统的核心，当你使用本地数据库来缓存外部数据库网络请求时，这是你需要牢记的问题。尽管关于缓存还有很多可以讨论的内容，但本节（以及整章）的目标是激发你的思考过程，并介绍本地数据库的众多用途之一，以及它们如何与外部数据库结合使用。
- en: In the next section, I'll discuss how a typical data-centric application will
    look as well as map out the typical flow of data. Again, what I mean by *data-centric*
    applications are those whose primary functions involve displaying/interacting
    with some form of data. This could include everything from social networking applications
    where users can read/write messages to each other (the data in this case includes
    messages, events, photos — anything that can be shared), to food and dining applications
    where users can load details of nearby restaurants. This would typically exclude
    many game-based applications, though even game-based applications will at times
    need to adopt some kind of external database (for instance, the global high scores
    table we discussed earlier). With that, let's shift our focus again and start
    thinking about mobile applications from a more holistic perspective — as extensions
    of external databases and external applications, rather tha n simple standalone
    applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将讨论一个典型的以数据为中心的应用程序的外观，以及典型的数据流程。再次强调，我所说的*以数据为中心*的应用程序是指那些主要功能涉及显示/与某种形式的数据进行交互的应用程序。这可以包括从社交网络应用程序（用户可以相互阅读/发送消息，这里的数据包括消息、事件、照片——任何可以共享的内容），到餐饮应用程序（用户可以加载附近餐厅的详细信息）。这通常不包括许多基于游戏的应用程序，尽管即使是基于游戏的应用程序有时也需要采用某种外部数据库（例如，我们之前讨论的全局高分表）。接下来，让我们再次调整焦点，从更全面的角度思考移动应用程序——作为外部数据库和外部应用程序的扩展，而不仅仅是简单的独立应用程序。
- en: Typical application design
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 典型应用程序设计
- en: Up until now, we've only talked about and toyed with ideas regarding backend
    application designs. We first thought about the pros and cons of using a completely
    localized backend versus a completely external backend, and then thought about
    ways of using both in applications to try and get the best of both worlds. One
    of the ways we could do this was through using a cache, and in designing the cache
    alone, we saw that there were a slew of design decisions that had to be made.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，我们只讨论了关于后端应用程序设计的想法。我们首先考虑了完全本地化的后端与完全外部后端使用的优缺点，然后考虑了在应用程序中使用两者的方法，试图两全其美。我们可以这样做的一种方式是使用缓存，仅在设计缓存时，我们就发现有许多设计决策必须被做出。
- en: 'Whether you realized this or not, this whole time you''ve been analyzing the
    pros and cons of different backend designs for different applications, and now
    we''re ready to focus on a very general design that is extremely practical and
    is frequently used in data-centric mobile applications. But enough with words,
    let''s put a picture to our design:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不论你是否意识到，这段时间你一直在分析不同应用程序的不同后端设计的优缺点，现在我们准备关注一个非常通用且极其实用的设计，这种设计在以数据为中心的移动应用程序中经常使用。但是关于文字就到此为止，让我们给我们的设计配上图片：
- en: '![Typical application design](img/8123OS_07_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![典型应用程序设计](img/8123OS_07_01.jpg)'
- en: 'So what exactly is going on here? Let''s break this down:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这里到底发生了什么？让我们来分解一下：
- en: First, we have our external, centralized database. This is the heart of our
    backend. All applications (whether web or mobile) will reference this database,
    and in this way, we can ensure that all data across all mobile devices will be
    synced and up-to-date. Furthermore, in this design our application is no longer
    platform specific. In other words, one could easily create an application that
    works across all mobile devices, both Android and iOS, since all devices are pointing
    at the same database.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们有我们的外部集中式数据库。这是我们后端的核心。所有应用程序（无论是网页还是移动应用）都将引用这个数据库，这样我们可以确保所有移动设备上的数据都是同步且最新的。此外，在这种设计中，我们的应用程序不再是特定于某个平台的。换句话说，可以轻松创建一个在所有移动设备上都能运行的应用程序，包括Android和iOS，因为所有设备都指向同一个数据库。
- en: The external database also separates the client side (that is, the mobile applications
    and the web applications) from the data gathering/parsing/cleaning side. Here,
    in the latter, we have all of the processes meant to go and collect, parse, and
    clean the backend's data. This might involve periodically hitting APIs (assuming
    the API allows you to store copies of its data), scraping websites (to be discussed
    later), or, in some cases, manually inserting new data. Then, once the data comes
    in, it typically needs to be parsed and cleaned to fit the specifications of your
    database. Furthermore, this whole process of gathering and cleaning data can itself
    be automated with the use of CRON jobs (discussed in [Chapter 9](ch09.html "Chapter 9. Collecting
    and Storing Data"), *Collecting and Storing Data)*. So by setting up your application
    in this way, you are able to conceal all of this behind the scenes data mining
    from your users.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 外部数据库还将客户端（即移动应用和网页应用）与数据收集/解析/清洗端分离。在这里，后者包含了所有旨在收集、解析和清洗后端数据的流程。这可能包括定期调用API（假设API允许你存储其数据的副本）、抓取网页（稍后讨论）、或者在有些情况下手动插入新数据。一旦数据进来，通常需要被解析和清洗以符合你的数据库规格。此外，通过使用CRON作业（在[第9章](ch09.html
    "第9章. 收集和存储数据")中讨论的*收集和存储数据*），整个数据收集和清洗的过程本身也可以自动化。因此，以这种方式设置你的应用程序，你可以将所有这些后台数据挖掘工作从用户面前隐藏起来。
- en: On the flip side, you have the web applications and the mobile applications
    continuously making requests to your external database. These requests will typically
    be in the form of HTTP GET and POST requests (getting data versus inserting/updating
    data) and will return results in either XML or JSON format. Again, because these
    are just standard HTTP network requests, it is independent of the platform making
    the request, so you can easily port applications from one platform to another.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，网页应用和移动应用在不断地向你的外部数据库发送请求。这些请求通常以HTTP GET和POST请求的形式（获取数据与插入/更新数据），并以XML或JSON格式返回结果。再次强调，由于这些只是标准的HTTP网络请求，因此与发起请求的平台无关，你可以轻松地将应用程序从一个平台移植到另一个平台。
- en: Lastly, we have the cache, which is a temporary, localized subset of our external
    database, and which exists on the mobile/web application side. As discussed earlier,
    these caches are designed to increase performance of the application by saving
    us from having to make duplicate network requests.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们有缓存，这是外部数据库的一个临时的、局部的子集，存在于移动/网页应用端。如早前讨论的，这些缓存设计用来通过避免重复的网络请求来提高应用程序的性能。
- en: And there you have it. Again, for the moment this is still very high level,
    but we've already seen and discussed the components related to part four of our
    design and in the upcoming chapters, we'll look at the first three parts as well.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们要介绍的内容。再次强调，目前这还是一个很高的层面，但我们已经看到了并讨论了与我们的设计第四部分相关的组件，在接下来的章节中，我们还将看看前三个部分。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Even though we didn't look at any code in this chapter, we still managed to
    accomplish a lot. We started the chapter by identifying two very realistic needs
    (a simple high scores table and then a location/venues database), and worked through
    the thought process behind how you would choose an appropriate storage method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在本章中我们没有查看任何代码，但我们仍然完成了很多工作。我们通过确定两个非常现实的需求（一个简单的高分榜和一个位置/场所数据库）开始本章，并走过了选择合适存储方法的思考过程。
- en: We saw that for something as simple as a high scores table, a localized SQLite
    database was both effective and simple to implement. The only real con to this
    approach was not being able to show global high scores tables, but for most games,
    this is but a minor feature. However, for our cafe/coffee shop application, we
    saw that a localized SQLite database was much less effective than having a centralized
    external database, with the only con for the external database solution being
    that performance would suffer if repeated, unnecessary network calls were frequently
    made.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现，对于像高分排行榜这样简单的功能，一个本地化的SQLite数据库既有效又易于实现。这种方法唯一真正的缺点是无法显示全局高分排行榜，但对于大多数游戏来说，这只是一个小功能。然而，对于我们的咖啡馆/咖啡店应用程序，我们发现本地化的SQLite数据库远不如中央外部数据库有效，外部数据库解决方案唯一的缺点是，如果频繁进行重复且不必要的网络调用，性能会受到影响。
- en: To address this issue, we turned to caching as a solution — using both external
    and local databases and trying to leverage the pros of each method. However, to
    build an effective cache requires making several design decisions in order to
    optimize the cache hit frequency, while minimizing memory consumption and stale
    data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们求助于缓存作为一种解决方案——同时使用外部和本地数据库，试图利用每种方法的优点。然而，要构建一个有效的缓存，需要做出几个设计决策，以优化缓存命中频率，同时最小化内存消耗和陈旧数据。
- en: Lastly, we ended the chapter by taking not just a step away from the code, but
    a step away from the Android application itself, and tried to look at our application
    from a more holistic view. We looked at what a typical data-centric application
    would look like, and broke the circulation of data down into four parts. Up to
    this point, we've already covered enough to be able to implement part four of
    the design (the local cache), and we'll now devote a chapter to each of the remaining
    three parts. By the end of this book, the goal is for you to be able to confidently
    design and implement a full-scaled data-centric application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在本章的结尾不仅从代码中抽身，也从Android应用程序本身抽身，试图从更全面的角度审视我们的应用程序。我们探讨了典型的以数据为中心的应用程序的外观，并将数据循环分解为四个部分。至此，我们已经涵盖了足够的内容，能够实现设计部分的第四部分（本地缓存），接下来我们将用一章的篇幅来讲解剩余的三个部分。通过本书的学习，我们的目标是让您能够自信地设计和实现一个完整规模的数据中心应用程序。
