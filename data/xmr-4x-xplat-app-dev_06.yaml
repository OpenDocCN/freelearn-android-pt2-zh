- en: Chapter 6. XamSnap for Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. XamSnap for Android
- en: To begin writing the Android version of XamSnap, open the solution from the
    previous two chapters. We'll be working in the `XamSnap.Droid` project, which
    should be already setup from the Xamarin project template.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编写 XamSnap 的 Android 版本，请打开前两章的解决方案。我们将要在 `XamSnap.Droid` 项目中工作，该项目应该已经从
    Xamarin 项目模板中设置好了。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: The Android manifest
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 清单文件
- en: Android Material Design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 材料设计
- en: Writing a login screen for XamSnap
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 XamSnap 编写登录界面
- en: Android's ListView and BaseAdapter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 的 ListView 和 BaseAdapter
- en: Adding a friends list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加好友列表
- en: Adding a list of messages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加消息列表
- en: Introducing the Android Manifest
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Android 清单文件
- en: All Android applications have an XML file called the Android Manifest, which
    declares basic information about the app, and is named `AndroidManifest.xml`.
    This is very similar to the `Info.plist` file on iOS, except Xamarin also provides
    C# class attributes for placing common settings in the Android manifest. There
    is also a nice UI for editing the manifest under **Project Options | Android Application**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Android 应用程序都有一个名为 Android Manifest 的 XML 文件，它声明了关于应用程序的基本信息，文件名为 `AndroidManifest.xml`。这非常类似于
    iOS 上的 `Info.plist` 文件，但 Xamarin 还提供了 C# 类属性，用于在 Android 清单中放置常见设置。在 **项目选项 |
    Android 应用程序** 下还有一个很好的 UI 用于编辑清单文件。
- en: 'The most important settings, shown in the following screenshot, are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的设置，如下截图所示，如下：
- en: '**Application name**: This is the title of your application, which is displayed
    below the icon. It is not the same as the name selected on Google Play.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序名称**：这是你的应用程序的标题，显示在图标下方。它与在 Google Play 上选择的名称不同。'
- en: '**Package name**: This is just like on iOS, your app''s bundle identifier.
    It is a unique name to identify your application. The convention is to use the
    reverse domain style with your company name at the beginning; for example, `com.jonathanpeppers.xamsnap`.
    It must begin with a lower case letter and contain at least one character within.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包名**：这就像 iOS 上的应用程序捆绑标识符。这是一个唯一的名字来标识你的应用程序。约定是使用以你的公司名称开头的反向域名风格；例如，`com.jonathanpeppers.xamsnap`。它必须以小写字母开头并至少包含一个字符。'
- en: '**Application icon**: This is the icon displayed for your app on Android''s
    home screen.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序图标**：这是你的应用程序在 Android 主屏幕上显示的图标。'
- en: '**Version number**: This is a one-digit number that represents the version
    of your application. Raising this number indicates a newer version on Google Play.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本号**：这是一个数字，表示你的应用程序的版本。提高这个数字表示在 Google Play 上有更新的版本。'
- en: '**Version name**: This is a user-friendly version string for your app; for
    example, **1.0.0**.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本名称**：这是你应用程序的用户友好版本字符串；例如，**1.0.0**。'
- en: '**Minimum Android version**: This is the minimum version of Android that your
    application supports.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最低支持的 Android 版本**：这是你的应用程序支持的最低版本的 Android。'
- en: '**Target Android version**: This is the version of the Android SDK your application
    is compiled against. Using higher numbers gives you access to new APIs; however,
    you might need to do some runtime checks to not call these APIs on older devices.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标 Android 版本**：这是你的应用程序编译时使用的 Android SDK 的版本。使用更高的版本号可以让你访问新的 API；然而，你可能需要进行一些运行时检查，以免在旧设备上调用这些
    API。'
- en: '**Install Location**: This defines the different locations that your Android
    application can be installed to: auto (user settings), external (SD card), or
    internal (device internal memory).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装位置**：这定义了你的 Android 应用程序可以安装的不同位置：自动（用户设置）、外部（SD 卡）或内部（设备内部存储）。'
- en: '![Introducing the Android Manifest](img/image00229.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Android 清单文件](img/image00229.jpeg)'
- en: In addition to these settings, there is a set of checkboxes labeled **Required
    permissions**. These are displayed to users on Google Play prior to the application
    being installed. This is Android's way of enforcing a level of security, giving
    users a way to see what kinds of access an app will have to make changes to their
    device.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些设置，还有一组名为**所需权限**的复选框。这些将在用户在 Google Play 安装应用程序之前向用户展示。这是 Android 强制实施安全级别的方式，让用户可以看到应用程序将对设备进行哪些更改的访问权限。
- en: 'The following are some commonly used manifest permissions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常用的清单文件权限：
- en: '**Camera**: This provides access to the device camera'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Camera**：这提供了对设备相机的访问权限'
- en: '**Internet**: This provides access to make web requests over the Internet'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互联网**：这提供了通过互联网进行网络请求的访问权限'
- en: '**ReadContacts**: This provides access to read the device''s contacts library'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ReadContacts**：这提供了读取设备联系人库的访问权限'
- en: '**ReadExternalStorage**: This provides access to read the SD card'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ReadExternalStorage**：这提供了读取SD卡的权限'
- en: '**WriteContacts**: This provides access to modify the device''s contacts library'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WriteContacts**：这提供了修改设备联系人库的权限'
- en: '**WriteExternalStorage**: This provides access to write to the SD card'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WriteExternalStorage**：这提供了向SD卡写入的权限'
- en: In addition to these settings, a manual change to Android Manifest will be required
    many times. In this case, you can edit the manifest file as you would a standard
    XML file in Xamarin Studio. For a complete list of valid XML elements and attributes,
    visit [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些设置之外，很多时候还需要手动更改Android Manifest。在这种情况下，你可以在Xamarin Studio中像编辑标准的XML文件一样编辑清单文件。有关有效的XML元素和属性完整列表，请访问[http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html)。
- en: 'Now let''s fill out the following settings for our application:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的应用程序填写以下设置：
- en: '**Application name**: `XamSnap`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序名称**：`XamSnap`'
- en: '**Package name**: `com.yourcompanyname.xamsnap`; make sure to name future apps
    beginning with `com.yourcompanyname`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包名称**：`com.yourcompanyname.xamsnap`；确保将来命名的应用程序以`com.yourcompanyname`开头'
- en: '**Version number**: Just start with the number `1`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本号**：从数字`1`开始'
- en: '**Version**: This can be any string, but it is recommended to use something
    resembling a version number'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：可以是任何字符串，但建议使用类似版本号的字符串'
- en: '**Minimum Android version**: Select **Android 4.0.3 (API Level 15)**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最低Android版本**：选择**Android 4.0.3 (API Level 15)**'
- en: '**Required permissions**: Select **Internet**; we will be using it later'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所需权限**：选择**Internet**；我们稍后会用到它'
- en: At this point, notice that our Android project is already referencing our shared
    code from our portable class library. Expand the **References** folder for the
    project and notice the reference to the `XamSnap.Core` project. We will be able
    to access all the shared code that was written in [Chapter 4](part0039.xhtml#aid-1565U1
    "Chapter 4. XamSnap - A Cross-Platform App"), *XamSnap - A Cross-Platform App*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，请注意我们的Android项目已经引用了来自便携式类库的共享代码。展开项目的**引用**文件夹，注意对`XamSnap.Core`项目的引用。我们将能够访问在第4章[*XamSnap
    - A Cross-Platform App*](part0039.xhtml#aid-1565U1 "Chapter 4. XamSnap - A Cross-Platform
    App")中编写的所有共享代码。
- en: 'Go to the `Resources` directory, and in the `values` folder open `Strings.xml`;
    this is where all the text throughout your Android app should be stored. This
    is an Android convention that will make it very easy to add multiple languages
    to your application. Let''s change our strings to the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`Resources`目录，在`values`文件夹中打开`Strings.xml`；这是你整个Android应用中应存储所有文本的地方。这是Android的一个约定，它将使你非常容易地为应用程序添加多种语言。让我们将我们的字符串更改为以下内容：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll use these values later in the chapter; feel free to add new ones in cases
    where you display text to the user.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面使用这些值；在需要向用户显示文本的情况下，可以自由添加新的值。
- en: Setting up Material Design
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Material Design
- en: 'Beginning with Android 5.0 Lollipop, Google released a new theme and color
    palette for Android applications called **Material Design**. It is a good idea
    to adopt material design for new apps, as it gives you a modern Android look,
    with little effort to setup. For more information on material design, check out
    Google''s documentation at: [https://developer.android.com/design/material/index.html](https://developer.android.com/design/material/index.html).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android 5.0 Lollipop开始，谷歌发布了一个名为**Material Design**的新主题和颜色调色板，用于Android应用程序。对于新应用来说，采用Material
    Design是一个好主意，因为它可以让你轻松设置现代Android的外观。有关Material Design的更多信息，请查看谷歌的文档：[https://developer.android.com/design/material/index.html](https://developer.android.com/design/material/index.html)。
- en: To make material design (and other new Android features) easier to adopt, Google
    has also released an **AppCompat** library for Android so you can support these
    newer features on older Android OS versions. Xamarin supports a version of the
    AppCompat library on NuGet so that it is easy to set up for Xamarin.Android applications.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Material Design（和其他新的Android功能）更容易被采用，谷歌还发布了一个名为**AppCompat**的Android库，因此你可以支持在较旧的Android
    OS版本上的这些新功能。Xamarin在NuGet上支持AppCompat库的一个版本，以便于Xamarin.Android应用程序轻松设置。
- en: 'To set up the Android support library, follow these steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Android支持库，请按照以下步骤操作：
- en: Right-click on **Packages** and select **Add Packages**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**包**并选择**添加包**。
- en: Search for `Xamarin.Android.Support.v7.AppCompat`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`Xamarin.Android.Support.v7.AppCompat`。
- en: Click **Add Package**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加包**。
- en: NuGet will download the library and its dependencies, referencing them in your
    Android project.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NuGet将下载库及其依赖项，并在你的Android项目中引用它们。
- en: 'Now let''s implement our main application class; add a new **Activity** from
    the **New File** dialog. We won''t be subclassing `Activity` in this file, but
    this template adds several Android `using` statements to the top of the file that
    imports the Android APIs to be used within your code. Create a new `Application`
    class where we can register everything in our `ServiceContainer` as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现我们的主应用程序类；从**新建文件**对话框中添加一个新的**Activity**。在这个文件中，我们不会继承`Activity`，但这个模板在文件顶部添加了几个Android
    `using`语句，导入可以在代码中使用的Android API。创建一个新的`Application`类，我们可以在其中注册`ServiceContainer`中的所有内容，如下所示：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We used the built-in Android theme, `Theme.AppCompat.Light`, it is the default
    light theme for material design. Note the strange constructor we have to follow,
    this is a current requirement of a custom `Application` class in Xamarin. You
    can just recognize this as boilerplate code that you will need to add this in
    this case.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了内置的Android主题`Theme.AppCompat.Light`，这是材料设计的默认浅色主题。注意我们必须遵循的奇怪构造函数，这是Xamarin中自定义`Application`类的当前要求。你可以将这识别为在这种情况下需要添加的样板代码。
- en: 'Now let''s implement a simple base class for all the activities throughout
    our app. Create an `Activities` folder in the `XamSnap.Droid` project and a new
    file named `BaseActivity.cs` with the following contents:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为应用程序中的所有活动实现一个简单的基类。在`XamSnap.Droid`项目中创建一个`Activities`文件夹，并添加一个名为`BaseActivity.cs`的新文件，内容如下：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We did several things here to simplify the development of our other activities.
    First, we made this class generic, and made a protected variable named `viewModel`
    to store a view model of a specific type. Note that we did not use generics on
    controllers in iOS due to platform limitations (see more on Xamarin's documentation
    website at [http://developer.xamarin.com/guides/ios/advanced_topics/limitations/](http://developer.xamarin.com/guides/ios/advanced_topics/limitations/)).
    We also implemented `IsBusyChanged`, and displayed a simple `ProgressDialog` with
    the `Loading` string from the `Strings.xml` file to indicate network activity.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了几件事来简化我们其他活动的开发。首先，我们使这个类通用，并定义了一个受保护的变量`viewModel`来存储特定类型的视图模型。请注意，由于平台限制，我们在iOS上没有对控制器使用泛型（更多信息请参见Xamarin的文档网站：[http://developer.xamarin.com/guides/ios/advanced_topics/limitations/](http://developer.xamarin.com/guides/ios/advanced_topics/limitations/)）。我们还实现了`IsBusyChanged`，并显示了一个简单的`ProgressDialog`，其中包含来自`Strings.xml`文件的`Loading`字符串，以指示网络活动。
- en: 'Let''s add one more method for displaying errors to the user as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为用户显示错误再添加一个方法，如下所示：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This method will display a pop-up dialog, indicating that something went wrong.
    Notice we also used `ErrorTitle` and the built-in Android resource for an `Ok`
    string.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将显示一个弹出对话框，指示出现了错误。注意我们也使用了`ErrorTitle`和内置的Android资源中的`Ok`字符串。
- en: This will complete the core setup for our Android application. From here we
    can move on to implement the UI for the screens throughout our app.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将完成我们Android应用程序的核心设置。从这里我们可以继续实现我们应用程序中各个屏幕的用户界面。
- en: Adding a login screen
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加登录界面
- en: Before creating Android views, it is important to know the different layouts
    or view group types available in Android. iOS does not have an equivalent for
    some of these because iOS has a smaller variation of screen sizes on its devices.
    Since Android has virtually infinite screen sizes and densities, the Android SDK
    has a lot of built-in support for auto-sizing and layout for views.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Android视图之前，了解Android中可用的不同布局或视图组类型是很重要的。iOS没有一些这些的等价物，因为iOS在其设备上的屏幕尺寸变化较小。由于Android具有几乎无限的屏幕尺寸和密度，Android
    SDK为视图的自动调整大小和布局提供了大量内置支持。
- en: 'The following are the common types of layouts:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是常见的布局类型：
- en: '`ViewGroup`: This is the base class for a view that contains a collection of
    child views. You normally won''t use this class directly.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewGroup`：这是包含子视图集合的视图的基础类。通常你不会直接使用这个类。'
- en: '`LinearLayout`: This is a layout that positions its child views in rows or
    columns (but not both). You can also set weights on each child, to have them span
    different percentages of the available space.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearLayout`：这是一个布局，它将子视图排列成行或列（但不能同时排列）。你还可以为每个子项设置权重，让它们占据可用空间的不同百分比。'
- en: '`RelativeLayout`: This is a layout that gives much more flexibility on the
    position of its children. You can position child views relative to each other
    so that they are above, below, to the left, or to the right of one another.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RelativeLayout`：这是一个可以更灵活地设置其子项位置的布局。你可以将子视图相对于彼此定位，使它们相互在上方、下方、左侧或右侧。'
- en: '`FrameLayout`: This layout positions its child views directly on top of one
    another in the **z order** on the screen. This layout is best used for cases where
    you have a large child view that needs other views on top of it and perhaps docked
    to one side.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FrameLayout`：这个布局将它的子视图直接在屏幕上的**z顺序**一个叠一个。当你有一个需要其他视图覆盖其上并可能停靠在一侧的大子视图时，最好使用这个布局。'
- en: '`ListView`: This displays views vertically in a list with the help of an adapter
    class that determines the number of child views. It also has support for its children
    to be selected.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListView`：这会在列表中垂直显示视图，借助确定子视图数量的适配器类。它还支持其子项被选中。'
- en: '`GridView`: This displays views in rows and columns within a grid. It also
    requires the use of an adapter class to supply the number of children.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GridView`：这会在网格中以行和列显示视图。它还需要使用适配器类来提供子项的数量。'
- en: Before we begin writing the login screen, delete the `Main.axml` and `MainActivity.cs`
    files that were created from the Android project template. Next, create an Android
    layout file named `Login.axml` in the `layout` folder of the `Resources` directory
    in your project.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写登录界面之前，删除从Android项目模板创建的`Main.axml`和`MainActivity.cs`文件。接下来，在项目的`Resources`目录下的`layout`文件夹中创建一个名为`Login.axml`的Android布局文件。
- en: 'Now we can start adding functionalities to our Android layout as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始向我们的Android布局添加功能，如下所示：
- en: Double-click on the new layout file to open the Android designer.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击新的布局文件以打开Android设计器。
- en: Drag two **Plain Text** views onto the layout found in the **Text Fields** section.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个**纯文本**视图拖到**文本字段**部分找到的布局中。
- en: In the **Id** field, enter `@+id/username` and `@+id/password`, respectively.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Id**字段中，分别输入`@+id/username`和`@+id/password`。
- en: For the password field, set its **Input Type** property to `textPassword`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于密码字段，将其**输入类型**属性设置为`textPassword`。
- en: Drag a **Button** onto the layout and set its **Text** property to `@string/Login`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个**按钮**拖到布局上，并将其**文本**属性设置为`@string/Login`。
- en: Set the button's **Id** property to `@+id/login`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的**Id**属性设置为`@+id/login`。
- en: 'Your layout will look something like the following screenshot when complete:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的布局完成后，它看起来会像下面的截图：
- en: '![Adding a login screen](img/image00230.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![添加登录界面](img/image00230.jpeg)'
- en: 'Now create a new Android Activity file named `LoginActivity.cs` in the `Activites`
    folder we created earlier. Let''s implement the login functionality as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在我们之前创建的`Activites`文件夹中创建一个名为`LoginActivity.cs`的新Android活动文件。让我们按照以下方式实现登录功能：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that we set `MainLauncher` to `true`, to make this activity the first
    activity for the application. We also took advantage of the `ApplicationName`
    value and `BaseActivity` class we set up earlier in this chapter. We also overrode
    `OnResume` to clear out the two `EditText` controls so that the values are cleared
    out if you return to the screen.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们设置了`MainLauncher`为`true`，以使此活动成为应用的首个活动。我们还利用了本章早些时候设置的`ApplicationName`值和`BaseActivity`类。我们还重写了`OnResume`以清除两个`EditText`控件，这样如果你返回屏幕，这些值就会被清空。
- en: 'Now if you launch the application, you will be greeted by the login screen
    we just implemented, as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你启动应用程序，你将看到我们刚才实现的登录界面，如下面的截图所示：
- en: '![Adding a login screen](img/image00231.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![添加登录界面](img/image00231.jpeg)'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Just a note for Visual Studio users, Xamarin has done a great job making their
    Visual Studio Extension work identical to Xamarin Studio. All of the examples
    in this chapter should work just as described in either Xamarin Studio on OS X
    or Visual Studio on Windows.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Visual Studio用户来说，请注意，Xamarin已经很好地使他们的Visual Studio扩展与Xamarin Studio完全相同。本章中的所有示例都应在OS
    X上的Xamarin Studio或Windows上的Visual Studio中按所述方式工作。
- en: Using ListView and BaseAdapter
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ListView和BaseAdapter
- en: Now let's implement a conversations list on Android. The Android equivalent
    of `UITableView` and `UITableViewSource` are `ListView` and `BaseAdapter`. There
    are parallel concepts for these Android classes, such as implementing abstract
    methods and recycling cells during scrolling. There are a few different types
    of adapters used in Android such as `ArrayAdapter` or `CursorAdaptor`, although
    `BaseAdapter` is generally best suited for simple lists.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在Android上实现一个对话列表。`UITableView`和`UITableViewSource`在Android上的对应物是`ListView`和`BaseAdapter`。这些Android类有并行概念，例如实现抽象方法和滚动时回收单元格。在Android中使用了几种不同类型的适配器，如`ArrayAdapter`或`CursorAdaptor`，尽管对于简单列表来说，`BaseAdapter`通常是最合适的选择。
- en: 'Let''s implement our conversations screen. Begin by making a new Android Activity
    in your `Activities` folder named `ConversationsActivity.cs`. Let''s start with
    only a couple of changes to the class definition, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现我们的对话界面。首先在你的`Activities`文件夹中创建一个新的Android Activity，命名为`ConversationsActivity.cs`。我们首先只对类定义进行少量修改，如下所示：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Perform the following steps to implement a couple of Android layouts:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以实现几个Android布局：
- en: Create a new Android Layout in the `layout` folder of the `Resources` directory
    named `Conversations.axml`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`目录的`layout`文件夹中创建一个新的Android布局，命名为`Conversations.axml`。
- en: Drag a **ListView** control from **Toolbox** onto the layout and set its **Id**
    to `@+id/conversationsList`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**中拖动一个**列表视图(ListView)**控件到布局中，并将其**Id**设置为`@+id/conversationsList`。
- en: Create a second Android Layout; the `layout` folder in the `Resources` directory
    named `ConversationListItem.axml`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个Android布局；在`Resources`目录下的`layout`文件夹中命名为`ConversationListItem.axml`。
- en: Drag a **Text (Medium)** control onto the layout from the **Toolbox**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**中将一个**中等文本(Text Medium)**控件拖到布局中。
- en: Set its ID to `@+id/conversationUsername`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其ID设置为`@+id/conversationUsername`。
- en: Finally, let's set its **Margin** to `3dp` in the **Layout** tab of the **Properties**
    box.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们在**属性(Properties)**框的**布局(Layout)**选项卡中将其**边距(Margin)**设置为`3dp`。
- en: 'This will set up all the layout files that we''ll need to use throughout the
    conversations screen. Your `ConversationListItem.axml` layout will look something
    like what''s shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置我们将在对话界面中使用到的所有布局文件。你的`ConversationListItem.axml`布局看起来将类似于以下截图所示：
- en: '![Using ListView and BaseAdapter](img/image00232.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![使用ListView和BaseAdapter](img/image00232.jpeg)'
- en: 'Now we can implement `BaseAdapter` as a nested class inside of `ConversationsActivity`,
    as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`ConversationsActivity`内部作为一个嵌套类实现`BaseAdapter`，如下所示：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is a review of what is going on inside the adapter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是适配器内部正在进行的操作的回顾：
- en: We subclassed `BaseAdapter<Conversation>`.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们继承了`BaseAdapter<Conversation>`。
- en: We passed in a `Context` (our activity) so that we can pull out the `LayoutInflater`.
    This class enables us to load XML layout resources and inflate them into a view
    object.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们传递了一个`Context`（我们的活动），这样我们就可以取出`LayoutInflater`。这个类使我们能够加载XML布局资源，并将其膨胀成视图对象。
- en: We implemented `GetItemId`. This is a general method used to identify rows,
    but we just returned the position for now.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们实现了`GetItemId`。这是一个通常用于标识行的一般方法，但现在我们只是返回位置。
- en: We set up `GetView`, which recycles the `convertView` variable by only creating
    a new view if it is null. We also pulled out the text views in our layout to set
    their text.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设置了`GetView`方法，通过仅当`convertView`为空时创建新视图来回收`convertView`变量。我们还取出了布局中的文本视图以设置它们的文本。
- en: We overrode `Count` to return the number of conversations.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们重写了`Count`方法，以返回对话的数量。
- en: We implemented an indexer to return a `Conversation` object for a position.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们实现了一个索引器，用于根据位置返回一个`Conversation`对象。
- en: Overall, this should be fairly similar to what we did on iOS.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这应该和我们之前在iOS上的操作非常相似。
- en: 'Now let''s set up the adapter in our activity by adding the following to the
    body of `ConversationsActivity`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在`ConversationsActivity`的正文添加以下内容来在活动中设置适配器：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code will set up the adapter and reload our list of conversations when
    the activity appears on screen. Note that we called `NotifyDataSetInvalidated`
    here, so that `ListView` reloads its rows after the number of conversations has
    been updated.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将在活动出现在屏幕上时设置适配器并重新加载我们的对话列表。注意，我们在这里调用了`NotifyDataSetInvalidated`，这样当对话数量更新后，`ListView`可以重新加载其行。
- en: 'Last but not least, we need to modify the `OnLogin` method we set up earlier
    in `LoginActivity` to start our new activity as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要修改之前在`LoginActivity`中设置的`OnLogin`方法，以启动我们的新活动，如下所示：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now if we compile and run our application, we can navigate to a conversations
    list after logging in, as shown in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们编译并运行我们的应用程序，登录后我们可以导航到一个对话列表，如下截图所示：
- en: '![Using ListView and BaseAdapter](img/image00233.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![使用ListView和BaseAdapter](img/image00233.jpeg)'
- en: Implementing the friends list
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现好友列表
- en: 'Before we start implementing the friends list screen, we must first add a menu
    item to `ActionBar` in our application. Begin by creating a new `menu` folder
    within the `Resources` folder of our project. Next, create a new Android Layout
    file named `ConversationsMenu.axml`. Remove the default layout XML created, and
    replace it with the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实现好友列表屏幕之前，我们首先需要在应用程序的`ActionBar`中添加一个菜单项。首先在项目的`Resources`文件夹中创建一个名为`menu`的新文件夹。接下来，创建一个名为`ConversationsMenu.axml`的新Android布局文件。删除默认创建的布局XML，并替换为以下内容：
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We set up a root menu with one menu item inside it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个根菜单，其中包含一个菜单项。
- en: 'The following is a breakdown of what we set for the item in XML:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们为XML中的项目设置的内容分解：
- en: '`android:id`: We will use this later in C# to reference the menu item with
    `Resource.Id.addFriendMenu`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:id`：我们稍后在C#中会使用它，通过`Resource.Id.addFriendMenu`引用菜单项。'
- en: '`android:icon`: This is an image resource to display for the menu item. We
    used a built-in Android one for a generic *plus* icon.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon`：这是为菜单项显示的图像资源。我们使用了一个内置的Android通用*加号*图标。'
- en: '`android:showAsAction`: This will make the menu item visible if there is room.
    If for some reason the device''s screen is too narrow, an overflow menu would
    be displayed for the menu item.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:showAsAction`：如果空间足够，这将使菜单项可见。如果设备的屏幕太窄，将显示一个溢出菜单来代替菜单项。'
- en: 'Now we can make some changes in `ConversationsActivity.cs` to display the menu
    item as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`ConversationsActivity.cs`中进行一些更改，如下所示显示菜单项：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This code will take our layout and apply it to the menu at the top in our activity''s
    action bar. Next, we can add some code to be run when the menu item is selected,
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将使用我们的布局并将其应用到活动中操作栏顶部的菜单。接下来，我们可以添加一些代码，在选中菜单项时运行，如下所示：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now let's implement the next activity. Begin by making a copy of `Conversations.axml`,
    found in the `layout` folder in the `Resources` directory, and rename it to `Friends.axml`.
    The only change we'll make in this file will be to rename the ListView's ID to
    `@+id/friendsList`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来实现下一个活动。首先复制`Resources`目录中`layout`文件夹中的`Conversations.axml`文件，并将其重命名为`Friends.axml`。我们在这个文件中唯一要做的更改是将ListView的ID重命名为`@+id/friendsList`。
- en: 'Next, perform the following steps to create a layout that can be used for the
    list items in `ListView`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，执行以下步骤，创建一个可用于`ListView`中列表项的布局：
- en: Make a new Android Layout called `FriendListItem.axml`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`FriendListItem.axml`的新Android布局。
- en: Open the layout and switch to the **Source** tab found at the bottom of the
    screen.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开布局，并切换到屏幕底部的**源代码**标签。
- en: Change the root `LinearLayout` XML element to a `RelativeLayout` element.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将根`LinearLayout` XML元素更改为`RelativeLayout`元素。
- en: Switch back to the **Designer** tab found at the bottom of the screen.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回屏幕底部的**设计器**标签。
- en: Drag a **Text (Large)** control from the **Toolbox** onto the layout and set
    its **Id** to `@+id/friendName`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**中拖动一个**大文本**控件到布局上，并将其**Id**设置为`@+id/friendName`。
- en: Drag an **ImageView** control from the **Toolbox** onto the layout; you can
    either let its **Id** be its default value or blank it out.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具箱**中拖动一个**图像视图**控件到布局上；你可以让它保留默认的**Id**或者将其清空。
- en: Change the image view's image to `@android:drawable/ic_menu_add`. This is the
    same plus icon we used earlier in this chapter. You can select it from the **Resources**
    dialog under the **Framework Resources** tab.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像视图的图像更改为`@android:drawable/ic_menu_add`。这是我们本章前面使用的同样的加号图标。你可以在**资源**对话框下的**框架资源**标签中选择它。
- en: Set the **Width** and **Height** of both the controls to `wrap_content`. This
    is found under the **Layout** tab, under the **ViewGroup** section.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将控件的两边**宽度和高度**设置为`wrap_content`。这可以在**布局**标签下的**ViewGroup**部分找到。
- en: Next, check the value for **Align Parent Right** on just the image view.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，仅针对图像视图检查**与父级右对齐**的值。
- en: Finally, set the **Margins** of both the controls to `3dp` in the **Layout**
    tab of the **Properties** box.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在**属性**框的**布局**标签下，将控件的两边**边距**设置为`3dp`。
- en: 'Using the Xamarin designer can be very productive, but some developers prefer
    a higher level of control. You might consider writing the XML yourself as an alternative,
    which is fairly straightforward, as in the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin设计器可以非常高效，但有些开发者更喜欢更高水平的控制。你可以考虑自己编写XML作为替代方案，这相当直接，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since we now have all the layouts we need for the new screen, let''s create
    an Android Activity in the `Activities` folder named `FriendsActivity.cs`. Let''s
    create the basic definition of the activity as follows, just like we did before:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经拥有了新屏幕所需的所有布局，那么在`Activities`文件夹中创建一个名为`FriendsActivity.cs`的Android活动吧。让我们按照之前的做法，创建活动的基本定义如下：
- en: '[PRE14]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s implement a nested `Adapter` class for setting up the list view
    items, as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现一个嵌套的`Adapter`类来设置列表视图项，如下所示：
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There is really no difference in this adapter and the previous one we implemented
    for the conversations screen. We only have to set the friend's name, and we use
    the `User` object instead of the `Conversation` object.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个适配器与我们之前为对话屏幕实现的适配器实际上没有区别。我们只需要设置好友的名字，并且使用`User`对象而不是`Conversation`对象。
- en: 'To finish setting up the adapter, we can update the body of the `FriendsActivity`
    class, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成适配器的设置，我们可以更新`FriendsActivity`类的主体，如下所示：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And last but not least, we can update `OnOptionsItemSelected` in the `ConversationsActivity`
    class, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们可以更新`ConversationsActivity`类中的`OnOptionsItemSelected`，如下所示：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'So if we compile and run the application, we can navigate to a fully implemented
    friends list screen, as shown in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们编译并运行应用程序，我们可以导航到一个完全实现的好友列表屏幕，如下面的截图所示：
- en: '![Implementing the friends list](img/image00234.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![实现好友列表](img/image00234.jpeg)'
- en: Composing messages
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 撰写消息
- en: The next screen is a bit more complicated; we will need to create a `ListView`
    that uses multiple layout files for each row, depending on the type of the row.
    We'll also need to perform some layout tricks to place a view below the `ListView`
    and set up the `ListView` to autoscroll.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个屏幕有点复杂；我们将需要创建一个`ListView`，根据行的类型使用多个布局文件。我们还需要执行一些布局技巧，在`ListView`下方放置一个视图，并设置`ListView`自动滚动。
- en: 'For the next screen, let''s begin by creating a new layout named `Messages.axml`
    in the `layout` folder of the `Resources` directory and then perform the following
    steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个屏幕，我们首先在`Resources`目录的`layout`文件夹中创建一个名为`Messages.axml`的新布局，然后执行以下步骤：
- en: Drag a new **ListView** onto the layout. Set its **Id** to `@+id/messageList`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局中拖动一个新的**ListView**。将其**Id**设置为`@+id/messageList`。
- en: Check the box for **Stack From Bottom**, and set **Transcript Mode** to `alwaysScroll`.
    This will set it up to display items from the bottom up.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**从底部堆叠**的复选框，并将**文本模式**设置为`alwaysScroll`。这将设置它从底部向上显示项目。
- en: Set the **Weight** value to `1` for the **ListView** in the **Layout** tab under
    the **LinearLayout** section.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**LinearLayout**部分的**布局**选项卡中，将**ListView**的**权重**值设置为`1`。
- en: Drag a new **RelativeLayout** onto the layout. Let its **Id** be the default
    value, or remove it.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局上拖动一个新的**RelativeLayout**。让其**Id**保持默认值，或者移除它。
- en: Drag a new **Button** inside **RelativeLayout**. Set its **Id** to `@+id/sendButton`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**RelativeLayout**内拖动一个新的**按钮**。将其**Id**设置为`@+id/sendButton`。
- en: Check the box for **Align Parent Right** in the **Layout** tab.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**布局**选项卡中勾选**与父容器右对齐**的复选框。
- en: Drag a new **Plain Text** found in the **Text Field** section inside **RelativeLayout**
    to the left of the button. Set its **Id** to `@+id/messageText`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**RelativeLayout**内，从**文本字段**部分拖动一个新的**纯文本**到按钮左侧。将其**Id**设置为`@+id/messageText`。
- en: In the **Layout** tab, set **To Left Of** to `@+id/sendButton`, and set its
    **Width** to `match_parent`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**布局**选项卡中，将**To Left Of**设置为`@+id/sendButton`，并将其**宽度**设置为`match_parent`。
- en: Check the box for **Center in Parent** to fix the vertical centering.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**居中于父容器**以修复垂直居中问题。
- en: 'When completed, the XML file will be as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，XML文件如下所示：
- en: '[PRE18]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, perform the following steps to make two more Android layouts:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，执行以下步骤来制作另外两个Android布局：
- en: Create a new layout named `MyMessageListItem.axml` in the `layout` folder of
    the `Resources` directory.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`目录的`layout`文件夹中创建一个名为`MyMessageListItem.axml`的新布局。
- en: Open the layout and switch to the **Source** tab. Change the root XML element
    to a `RelativeLayout`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开布局并切换到**源代码**选项卡。将根XML元素更改为`RelativeLayout`。
- en: Switch back to the **Content** tab and drag two **TextView** controls onto the
    layout.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回**内容**选项卡，并将两个**TextView**控件拖动到布局上。
- en: In the **Id** field, enter `@+id/myMessageText` and `@+id/myMessageDate`, respectively.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Id**字段中，分别输入`@+id/myMessageText`和`@+id/myMessageDate`。
- en: For both the views, set **Margin** to `3dp`, and **Width** and **Height** to
    `wrap_content`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这两个视图，将**边距**设置为`3dp`，将**宽度和高度**设置为`wrap_content`。
- en: For the first TextView, set its **Color** under the **Style** tab to `@android:color/holo_blue_bright`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第一个TextView，在**样式**选项卡下将其**颜色**设置为`@android:color/holo_blue_bright`。
- en: For the second TextView, check the **Align Parent Right** checkbox under the
    **Layout** tab.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二个TextView，在**布局**选项卡下勾选**对齐父级右侧**复选框。
- en: Create a new layout named `TheirMessageListItem.axml` and repeat the process.
    Select a different color for the first TextView in the new layout.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`TheirMessageListItem.axml`的新布局，并重复该过程。为新的布局中的第一个TextView选择不同的颜色。
- en: 'Finally, we''ll need to create a new activity for the screen. Create a new
    Android Activity named `MessagesActivity.cs` in the `Activities` directory. Begin
    with the standard code to set up an activity, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为屏幕创建一个新的活动。在`Activities`目录中创建一个名为`MessagesActivity.cs`的新Android活动。从以下标准代码开始设置活动：
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, let''s implement a more complicated adapter than what we implemented
    earlier, as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现一个比我们之前实现的更复杂的适配器，如下所示：
- en: '[PRE20]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This includes everything except our implementation of `GetView`, which we'll
    get to shortly. The first changes here are some constants for `MyMessageType`
    and `TheirMessageType`. We then implemented `ViewTypeCount` and `GetItemViewType`.
    This is Android's mechanism for using two different layouts for list items in
    a list view. We use one type of layout for the user's messages and a different
    one for the other user in the conversation.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括除我们的`GetView`实现之外的所有内容，我们稍后会讨论这一点。这里的第一个变化是一些`MyMessageType`和`TheirMessageType`的常量。然后我们实现了`ViewTypeCount`和`GetItemViewType`。这是Android的机制，用于在列表视图中为列表项使用两种不同的布局。我们为用户的消息使用一种类型的布局，而为对话中的另一个用户使用不同的布局。
- en: 'Next, let''s implement `GetView` as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们按照以下方式实现`GetView`：
- en: '[PRE21]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Just a note, it is best practice in Android to use unique ID for each view.
    It is best even in this case where the code gets a bit ugly, but `FindViewById`
    does not work as intended when multiple layouts exist with views containing the
    same ID.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在Android中使用唯一ID作为每个视图的最佳实践。即使在这种情况下代码看起来有点丑陋，但最好还是这样做，因为当存在具有相同ID的视图的多个布局时，`FindViewById`不能按预期工作。
- en: 'Let''s break down our implementation through the following steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤分解我们的实现过程：
- en: We first pull out the `message` object for the position of the row.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先获取对应于行位置的`message`对象。
- en: Next, we grab the view type that determines if it is the current user's message
    or the other user in the conversation.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们获取决定是当前用户的消息还是对话中另一个用户的视图类型。
- en: If the `convertView` is `null`, we inflate the appropriate layout based on the
    type.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`convertView`为`null`，我们会根据类型充气适当的布局。
- en: Next, we pull the two text views, `messageText` and `dateText`, out of the `convertView`.
    We have to use the type value to make sure we use the correct resource IDs.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们从`convertView`中取出两个文本视图，`messageText`和`dateText`。我们必须使用类型值以确保使用正确的资源ID。
- en: We set the appropriate text on both text views using the `message` object.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`message`对象在两个文本视图中设置适当的文本。
- en: We return the `convertView`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们返回`convertView`。
- en: 'Now let''s finish `MessagesActivity` by setting up the rest of the adapter.
    First, let''s implement some member variables and the `OnCreate` method, as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过设置适配器的其余部分来完成`MessagesActivity`。首先，让我们实现一些成员变量和`OnCreate`方法，如下所示：
- en: '[PRE22]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So far, this activity is fairly standard compared to our previous activities
    in this chapter. We also had to wire up the `Click` event of `sendButton` in `OnCreate`
    so that it sends the message and refreshes the list. We also used a trick to scroll
    the list view to the end by setting its selection to the last item.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，与本章中的先前活动相比，这个活动相当标准。我们还必须在`OnCreate`中连接`sendButton`的点击事件，以便发送消息并刷新列表。我们还使用了一个技巧，通过将列表视图的选择设置为最后一个项目来滚动到列表末尾。
- en: 'Next, we''ll need to implement `OnResume` to load the messages, invalidate
    the adapter, and then scroll the list view to the end, as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现`OnResume`来加载消息，使适配器无效，然后滚动列表视图到底部，如下所示：
- en: '[PRE23]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Last but not least, we need to modify `ConversationsActivity.cs`, so that it
    navigates forward when you tap on a row in the list view:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要修改`ConversationsActivity.cs`文件，使得在点击列表视图中的行时能够向前导航：
- en: '[PRE24]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'So finally, if you compile and run the app, you will be able to navigate to
    the messages screen and add new messages to the list, as shown in the following
    screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最后，如果你编译并运行该应用，你将能够导航到消息界面并向列表中添加新消息，如下面的截图所示：
- en: '![Composing messages](img/image00235.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![编写消息](img/image00235.jpeg)'
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started out by going over the basic settings in the Android
    Manifest file. Next, we implemented a custom `Application` class for setting up
    our `ServiceContainer`. We then went over the different types of Android layouts
    and implemented a login screen using native Android views. Next, we set up a menu
    in the Android action bar by using an Android layout and overriding a few built-in
    methods. We implemented the friends list screen, and learned the basics of `ListView`
    and adapters. Finally, we implemented the messages screen, and used the more advanced
    functionality available in list view adapters and layouts.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先回顾了Android Manifest文件中的基本设置。接下来，我们实现了一个自定义的`Application`类来设置我们的`ServiceContainer`。然后，我们介绍了不同类型的Android布局，并使用原生的Android视图实现了一个登录界面。之后，我们通过使用Android布局并覆盖一些内置方法，在Android操作栏中设置了一个菜单。我们实现了好友列表界面，并学习了`ListView`和适配器的基础知识。最后，我们实现了消息界面，并使用了列表视图适配器和布局中更高级的功能。
- en: Upon completing this chapter, you will have a partially functional Android version
    of XamSnap. You will have gained some deeper understanding of the Android SDK
    and tools. You should be confident in developing your own Android applications
    using Xamarin. Take it upon yourself to implement the remaining screens that we
    did not cover in this chapter. If you get lost, feel free to review the full sample
    application included with this book. In the next chapter, we'll cover how to deploy
    to mobile devices and why it is very important to test your applications on real
    devices.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将拥有一个部分功能性的XamSnap的Android版本。你将对Android SDK和工具有了更深入的理解。你应该有信心使用Xamarin开发自己的Android应用程序。尝试自己实现本章未涵盖的剩余界面。如果你遇到困难，随时可以查看本书附带的完整示例应用程序。在下一章中，我们将介绍如何部署到移动设备上，以及为什么在真实设备上测试你的应用程序非常重要。
