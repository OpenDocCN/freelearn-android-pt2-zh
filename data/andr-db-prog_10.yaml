- en: Chapter 10. Bringing it Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 将一切整合到一起
- en: At last, it's time to bring everything together. Earlier in [Chapter 8](ch08.html
    "Chapter 8. Exploring External Databases"), *Exploring External Databases*, we
    started our example of writing a Blockbuster games application by creating a new
    Google App Engine (GAE) project and building up the JDO database. We first defined
    what our `VideoGame` table should look like, and then we wrote a handful of convenient
    wrapper methods which would allow us to retrieve, insert, update, and/or delete
    `VideoGame` data from our backend. Then in [Chapter 9](ch09.html "Chapter 9. Collecting
    and Storing Data"), *Collecting and Storing Data*, we looked at various ways in
    which we could collect data, either by using convenient APIs or by writing scrapers
    to do the dirty work for us. In our example, a scraper was necessary and so we
    wrote some code to first clean and structure Blockbuster's game rental page, before
    finally navigating and parsing the desired data. The la st step was simply to
    reintroduce ourselves to HTTP servlets and look at how we could implement a servlet
    that, when hit, would scrape and update our database with the latest games.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候将所有内容整合到一起了。在之前的[第8章](ch08.html "第8章. 探索外部数据库")，*探索外部数据库*中，我们通过创建一个新的
    Google App Engine (GAE) 项目并构建 JDO 数据库，开始了编写一个 Blockbuster 游戏应用示例。我们首先定义了`VideoGame`表应该是什么样子，然后编写了一些方便的包装方法，允许我们从后端检索、插入、更新和/或删除`VideoGame`数据。然后在[第9章](ch09.html
    "第9章. 收集和存储数据")，*收集和存储数据*中，我们探讨了我们可以通过使用方便的 API 或者编写抓取器来完成数据的收集。在我们的示例中，需要一个抓取器，因此我们编写了一些代码来首先清理和构建
    Blockbuster 的游戏租赁页面，然后最终导航和解析所需数据。最后一步就是重新介绍 HTTP servlet，并查看我们如何实现一个 servlet，当被访问时，它会抓取并更新我们数据库中的最新游戏。
- en: Now, we'll finish off the application by writing an HTTP servlet that will actually
    query and return data (as opposed to our earlier example, which simply returned
    a success or failure message), and, once returned, we'll write some simple XML
    parsers and list adapters to show you what to do with the data once it's on the
    mobile side. Then, you'll have a fully functional backend that will periodically
    scrape and update its own data, a series of HTTP servlets that will allow you
    to retrieve data independent of the platform, and an Android application that
    will parse the data and bind it to the UI for the user to see.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过编写一个 HTTP servlet 来完成应用程序的编写，该 servlet 实际上会查询并返回数据（与之前的示例不同，之前的示例只是返回成功或失败的消息），一旦返回数据，我们将编写一些简单的
    XML 解析器和列表适配器，以展示一旦数据在移动端上该如何处理。然后，你将拥有一个可以定期抓取和更新自身数据的功能齐全的后端，一系列允许你根据平台独立检索数据的
    HTTP servlet，以及一个 Android 应用程序，它将解析数据并将其绑定到用户可以看到的 UI 上。
- en: Implementing HTTP GET requests
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 HTTP GET 请求
- en: In the last chapter, we briefly went over the difference between a GET and POST
    request. The next step in our application development is writing a few classes
    on the GAE server side which will allow us to hit a URL and get back a list of
    video game objects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要介绍了 GET 和 POST 请求之间的区别。在我们的应用程序开发中的下一步是在 GAE 服务器端编写几个类，允许我们访问一个 URL
    并获取视频游戏对象的列表。
- en: This means we need to override another HTTP servlet which will likely take a
    parameter that indicates which game platform we're looking for. Intuitively, once
    we know the platform we're looking for, we recall from earlier that one of our
    wrapper methods for our JDO database involved querying for all games of a certain
    platform. Hence, we'll likely need to utilize our JDO wrapper class again.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们需要重写另一个 HTTP servlet，它可能会带有一个参数，指示我们正在寻找哪个游戏平台。直观地，一旦我们知道我们正在寻找的平台，我们会回忆起之前我们的
    JDO 数据库包装方法之一涉及到查询特定平台的所有游戏。因此，我们很可能会再次利用我们的 JDO 包装类。
- en: 'However, you might also recall that our JDO database returns rows not as strings
    but as objects, and so we''ll need to take the additional step of converting each
    `VideoGame` object into some kind of readable, formatted string, whether as XML
    or JSON. With these initial thoughts and intuitions at hand, let''s take a look
    at how you would implement this new GET request:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能也会回忆起我们的 JDO 数据库返回的行不是字符串，而是对象，因此我们需要将每个`VideoGame`对象转换为某种可读的、格式化的字符串，无论是
    XML 还是 JSON。有了这些初步的想法和直觉，让我们看看你将如何实现这个新的 GET 请求：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Everything should look familiar and the logic is fairly simple. The only part
    that''s unclear is near the end when I pass in a list of `VideoGame` objects and
    get back a string. As the name of the class suggests, I wrote a simple class which
    takes `VideoGame` objects, strips out their fields, and organizes them into well-formatted
    XML code (again, you could use JSON as well). Let''s take a quick look at how
    I defined my `GamesToXMLConverter` class:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都应该看起来很熟悉，逻辑相当简单。唯一不清楚的部分是在最后我传入一个`VideoGame`对象列表并返回一个字符串。顾名思义，我编写了一个简单的类，它接收`VideoGame`对象，提取它们的字段，并将它们组织成格式良好的XML代码（同样，你也可以使用JSON）。让我们快速看看我是如何定义我的`GamesToXMLConverter`类的：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And voila – nothing too complicated. Really, you can write your XML/JSON converters
    in any way you'd like in fact, if you search hard enough, I'm willing to bet there
    are convenient libraries out there which are designed to do this for you. However,
    as is the theme of this book, focus more on the concepts and less on my actual
    code – the idea is you reach into your JDO database and get back a list of objects
    and from there you simply need to think of a clean way to write those objects
    into the `HttpServletResponse` object that is returned.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 噔噔噔——没什么复杂的。实际上，你可以按照自己喜欢的方式编写XML/JSON转换器，如果你足够努力寻找，我敢打赌肯定有方便的库是为了帮你完成这项工作而设计的。然而，正如本书的主题，更多地关注概念而不是我的实际代码——这个想法是你深入到JDO数据库中，获取一个对象列表，然后你需要考虑一种简洁的方式来将那些对象写入返回的`HttpServletResponse`对象中。
- en: 'And again, just like with our previous HTTP servlet, in order for our GAE project
    to recognize this as a valid servlet, we need to define it as one in the `/war/WEB-INF/web.xml`
    file:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，就像我们之前的HTTP servlet一样，为了让我们的GAE项目识别这是一个有效的servlet，我们需要在`/war/WEB-INF/web.xml`文件中将其定义为一个servlet。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And once we have our name and URL pattern defined, we simply deploy the project
    and hit the following URL:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了名称和URL模式，我们只需部署项目并访问以下URL：
- en: '`http://{your-project-name}.appspot.com/getVideoGames?type={type}`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://{你的项目名}.appspot.com/getVideoGames?type={类型}`'
- en: 'And we''re done. For those following along, I invite you to check it out and
    see if you get a nicely formatted list of data. Otherwise, feel free to check
    out the following links to see my results:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '完成了。对于那些跟随进度的读者，我邀请你们检查一下，看看是否能得到一个格式良好的数据列表。否则，欢迎查看以下链接来查看我的结果： '
- en: '`http://entertainmentapp.appspot.com/getVideoGames?type=Xbox`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://entertainmentapp.appspot.com/getVideoGames?type=Xbox`'
- en: '`http://entertainmentapp.appspot.com/getVideoGames?type=Ps3`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://entertainmentapp.appspot.com/getVideoGames?type=Ps3`'
- en: 'The following is a screenshot for those reading this on the go:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是给那些在移动中阅读此内容的读者的截图：
- en: '![Implementing HTTP GET requests](img/8123OS_10_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![实现HTTP GET请求](img/8123OS_10_01.jpg)'
- en: And now, let's move it back to the Android side and see how we would both make
    the request and then handle/parse the result.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到Android端，看看我们是如何发起请求并处理/解析结果。
- en: 'Back to Android: parsing responses'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到Android：解析响应
- en: Now that we have our backend completely finished, all that remains is implementing
    these HTTP requests from the Android, parsing out the data, and then binding this
    data to the UI once it's been retrieved (though this will likely be a rehash of
    [Chapter 6](ch06.html "Chapter 6. Binding to the UI"),*Binding to the UI*).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的后端已经完全完成，剩下的就是从Android实现这些HTTP请求，解析数据，并在获取数据后将其绑定到UI上（尽管这可能需要重新复习[第6章](ch06.html
    "第6章. 绑定到UI")，*绑定到UI*）。
- en: 'To start, you''ll need to build an HTTP client which will allow you to make
    GET/POST requests. What this HTTP client essentially does is it acts as a vehicle
    for which you can make various HTTP requests. The HTTP client requires that you
    set some HTTP parameters for how the request should be made. Then, based on those
    parameters, the client knows how to handle each request accordingly. For instance,
    one such parameter is telling the HTTP client how to handle HTTP versus HTTPS
    requests (that is, requests made through an unsecured channel versus a secured
    one). Each channel requires that you specify a different port, so you''ll have
    to define these accordingly in your client. In the following code you can see
    an HTTP client which is configured for both HTTP and HTTPS requests:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要构建一个HTTP客户端，以便你可以发起GET/POST请求。这个HTTP客户端本质上是一个载体，你可以通过它发起各种HTTP请求。HTTP客户端要求你设置一些HTTP参数，以确定请求应该如何进行。然后，根据这些参数，客户端知道如何相应地处理每个请求。例如，这样的一个参数就是告诉HTTP客户端如何处理HTTP与HTTPS请求（即通过非安全通道与安全通道发起的请求）。每个通道都要求你指定不同的端口，因此你需要在客户端中相应地定义这些端口。在下面的代码中，你可以看到一个为HTTP和HTTPS请求配置的HTTP客户端：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you have that, I prefer to build some simple GET/POST wrapper methods,
    which when passed an HTTP client and a URL will return the result as a string:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了这些，我更喜欢构建一些简单的GET/POST包装方法，当你传递一个HTTP客户端和URL时，它会将结果作为字符串返回：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At first glance this may all seem very intimidating, especially for someone
    who has never seen any of these technologies or classes. Yes — there are a lot
    of new classes involved, but none of this is rocket science; in fact, the class
    names are all pretty intuitive and descriptive and there isn't too much going
    on beyond that.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，这可能看起来非常令人畏惧，尤其是对于那些从未见过这些技术或类的人。是的——涉及很多新的类，但这并不是火箭科学；实际上，类名都非常直观和具有描述性，除了这些并没有太多复杂的内容。
- en: In the first method, what we're doing is pretty simple. Java has an `HttpGet`
    class that's included in the Android SDK as well as in the Java SDK, which then
    gets instantiated with a URL. Next, we pass this `HttpGet` object into our HTTP
    client and wait for the response to come back to us. The response will eventually
    come back as an `HttpResponse` object, and within this object there are descriptive
    fields that tell you the HTTP status code, the content of the response (this is
    what we'll need shortly), and so on. The status code is a useful thing to have,
    as it will tell us whether or not the GET request was successful, and, if not,
    what error it failed with. With these different error codes at hand, we can then
    handle each event accordingly for instance, if the server is down, then we're
    out of luck and should either tell the user to check back later or potentially
    direct them to an offline version of your applica tion. On the other hand, if
    it was just a temporary connection issue, then maybe we'll silently make the request
    again.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法非常简单。Java中有一个`HttpGet`类，它包含在Android SDK和Java SDK中，我们可以用URL来实例化它。接下来，我们将这个`HttpGet`对象传递给我们的HTTP客户端，并等待响应返回。响应最终会以一个`HttpResponse`对象的形式返回，在这个对象内部有一些描述性字段，可以告诉我们HTTP状态码、响应内容（这是我们很快需要的东西）等。状态码是一个很有用的东西，因为它会告诉我们GET请求是否成功，如果不成功，它还会显示失败的错误。有了这些不同的错误代码，我们可以相应地处理每个事件，例如，如果服务器宕机，那么我们运气不佳，应该告诉用户稍后再检查，或者可能引导他们访问应用程序的离线版本。另一方面，如果只是临时的连接问题，那么我们可能会默默重试请求。
- en: Once we have the response and check that it succeeded, it's time to get the
    response body! The code for that is in the next section — that is, the `getResponseBody()`
    method. This method is a little more cumbersome, but hopefully the inline comments
    help guide you through what's going on. From a high level, essentially what we're
    doing is grabbing the content body of the `HttpResponse` object known in this
    case as the entity. However, the entity is a separate object which contains numerous
    descriptive fields, but what we're actually interested in is the string representation
    of the `HttpEntity` object. Hence, from the `HttpEntity` we request an `InputStream`,
    which will allow us to utilize a `StringBuilder` object and stream the characters
    of the content body line by line. Now, the rest of the code in between is simply
    a series of checks to make sure that there's actua lly a message to be buffered,
    and, if so, that it's not too large for our buffer to handle (that is, it doesn't
    exceed the maximum size of a string). Lastly, we just need to retrieve the content
    body's character set so that our `InputStreamReader` will know which character
    set to use when converting the message into characters.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到响应并确认请求成功，接下来就是获取响应体了！下一节将介绍这部分代码——即`getResponseBody()`方法。这个方法稍微有些复杂，但希望内联注释能帮助你理解正在发生的事情。从高层次来看，我们本质上是在获取`HttpResponse`对象的内容体，在这个例子中称为实体。然而，实体是一个单独的对象，包含许多描述性字段，但我们实际上感兴趣的是`HttpEntity`对象的字符串表示。因此，我们从`HttpEntity`请求一个`InputStream`，这将允许我们使用一个`StringBuilder`对象逐行流式传输内容体的字符。现在，中间的其余代码只是一系列检查，以确保实际上有消息需要缓冲，并且，如果有，它的大小不会太大，以至于我们的缓冲区无法处理（即它不会超过字符串的最大大小）。最后，我们只需要检索内容体的字符集，这样我们的`InputStreamReader`在将消息转换为字符时就知道使用哪个字符集了。
- en: 'Now, here''s how we''ll use the two previous classes to actually make the GET
    request from the Android client side:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以下是我们要如何使用前两个类从Android客户端实际发起GET请求的方法：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At this point you''ll notice that the meat of what''s happening is indeed in
    our `GetMethods` class, and that once this class has been implemented, making
    GET requests becomes quite simple: one only needs the URL. So then what does the
    XML parser look like in this case? Well, you can implement it in any number of
    ways, depending on how complicated the XML is and/or how familiar you are with
    various XML document parsers. For extremely simple XML (that is, documents with
    just a single layer of nodes), sometimes using simple REGEX commands will do the
    trick. In more complex XML, sometimes it helps to use Java''s built-in `SAXParser`
    classes or to even use our buddy `HtmlCleaner`. Note that in many cases the data
    returned might also be in JSON format, in which case you would need to write some
    simple JSON parsers that take the various key-value pairs and reconstruct the
    `VideoGame` objects on the mobile side.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你会注意到实际发生的事情确实在我们的`GetMethods`类中，一旦实现了这个类，发起GET请求就变得相当简单：只需要一个URL。那么在这种情况下，XML解析器是什么样的呢？嗯，你可以根据XML的复杂程度以及你对各种XML文档解析器的熟悉程度以多种方式实现它。对于极其简单的XML（即只有单层节点的文档），有时使用简单的正则表达式命令就可以解决问题。在更复杂的XML中，有时使用Java内置的`SAXParser`类甚至使用我们的朋友`HtmlCleaner`也会有所帮助。请注意，在很多情况下返回的数据也可能是JSON格式，在这种情况下，你需要编写一些简单的JSON解析器，这些解析器获取各种键值对，并在移动端重新构建`VideoGame`对象。
- en: 'Because of all these previous dependencies, I''ll leave the actual implementation
    of the `parseGameResponse()` method to you guys — the goal is clear and if you
    need a reminder of what the data looks like, just refer back to the first image
    of this chapter. Now you just need to parse it, which should be a relatively simple
    exercise. One last thing I''ll mention is that typically these HTTP requests can
    take some time (at least a couple of seconds, sometimes upwards of 10-20 depending
    on how much work is being done on the server). Because of how the Android OS will
    throw an "Application Not Responding" (ANR) error if the main UI thread gets held
    up for too long (5-10 seconds depending on the condition), I would highly recommend
    making all HTTP requests on separate threads. You can do this the traditional
    way using `Runnable` and `Handler` classes, but Android also provides you with
    nice wrapper classes like the `A syncTask` class. I''d also encourage you to read
    this post made by our friends at Google for more on designing responsive applications:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些先前的依赖，我将实际的`parseGameResponse()`方法的实现留给你们去完成——目标很明确，如果你需要回顾数据的样子，只需参考本章的第一张图片。现在你需要做的是解析它，这应该是一个相对简单的练习。我要提到的最后一点是，通常这些HTTP请求可能需要一些时间（至少几秒钟，有时根据服务器上执行的工作量可能会达到10-20秒）。由于Android操作系统如果主UI线程长时间被占用（根据情况可能5-10秒），会抛出“应用无响应”(ANR)错误，我强烈建议在单独的线程上执行所有HTTP请求。你可以使用传统的`Runnable`和`Handler`类来实现这一点，但Android也为你提供了很好的封装类，如`AsyncTask`类。我还鼓励你阅读谷歌朋友的这篇文章，了解更多关于设计响应式应用的信息：
- en: '[http://developer.android.com/guide/practices/design/responsiveness.html](http://developer.android.com/guide/practices/design/responsiveness.html)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/guide/practices/design/responsiveness.html](http://developer.android.com/guide/practices/design/responsiveness.html)'
- en: And so now, we've made our GET request, we've parsed the data, and we have a
    nice list of `VideoGame` objects on the mobile side which are duplicates of the
    `VideoGame` objects that came from our server. The only thing left to do is use
    one of our `ListAdapters` which we saw earlier in the book and bind it to the
    UI!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，我们已经发出了GET请求，解析了数据，并且在移动端拥有了一个漂亮的`VideoGame`对象列表，这些对象是我们从服务器接收到的`VideoGame`对象的副本。剩下要做的就是使用我们在书中前面看到的`ListAdapter`之一并将其绑定到UI！
- en: 'Final steps: binding to the UI (again)'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的步骤：绑定到UI（再次）
- en: It's time for the last and final step – binding our data to the user interface.
    This section should look very familiar for those who have gone through the entire
    book, so I'll try to be brief but complete.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是最后一步——将数据绑定到用户界面。对于那些已经阅读完全书的读者来说，这一部分应该非常熟悉，因此我会尽量简洁但全面的讲解。
- en: In the previous sections, we essentially hooked all the network requests together,
    both on the application side as well as on the server side, so that now we should
    be able to seamlessly make GET requests from any mobile application. We also looked
    at ways in which we could parse the resulting response (again, this was left as
    an exercise, as the response could come back in any number of ways) and convert
    the data from string form back into `VideoGame` object form.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们实际上已经将所有网络请求连接在一起，无论是在应用端还是在服务器端，因此现在我们应该能够从任何移动应用无缝地发出GET请求。我们还研究了如何解析返回的响应（这同样作为一个练习留给你，因为响应可能以任何方式返回）并将数据从字符串形式转换回`VideoGame`对象形式。
- en: 'So now let''s think back to [Chapter 6](ch06.html "Chapter 6. Binding to the
    UI"), *Binding to the UI*. In that chapter, we looked at two subclasses of `ListAdapters`
    the `BaseAdapter` and the `CursorAdapter`. As you''ll recall, the `CursorAdapter`
    is used when our data is stored into a SQLite database. The subsequent query into
    our SQLite database is returned in the form of a `Cursor` object which then gets
    wrapped by the `CursorAdapter` class. In our `VideoGame` example, we currently
    have a list of objects, not a `Cursor`. That''s not to say that we couldn''t store
    our results into a SQLite database, effectively making a cache (remember these?)
    on our application side and then issuing a query into our cache to get back a
    `Cursor`. But, for simplicity, let''s stick with our list of `VideoGame` objects
    and simply use a `BaseAdapter` which is designed especially for such lists. The
    code for it might look like the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回顾一下[第6章](ch06.html "第6章. 绑定到UI")，*绑定到UI*。在那章中，我们了解了`ListAdapters`的两个子类：`BaseAdapter`和`CursorAdapter`。您还记得，当我们的数据存储在SQLite数据库中时，使用`CursorAdapter`。后续对SQLite数据库的查询以`Cursor`对象的形式返回，然后由`CursorAdapter`类包装。在我们的`VideoGame`示例中，目前有一个对象列表，而不是`Cursor`。这并不是说我们不能将结果存储到SQLite数据库中，在应用程序端有效地创建一个缓存（还记得这些吗？），然后向缓存发出查询以获取`Cursor`。但为了简单起见，让我们坚持使用我们的`VideoGame`对象列表，并简单地使用专为这类列表设计的`BaseAdapter`。它的代码可能如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So just like how in [Chapter 6](ch06.html "Chapter 6. Binding to the UI"), *Binding
    to the UI*, we implemented a custom `BaseAdpater` that created a list of `Contact`
    objects - in this case, we're doing something extremely similar but for our `VideoGame`
    objects! Notice here that my `VideoGameViewHolder` only displays the name of the
    game and the type of the game and that I'm not doing anything with the image URL.
    Again, one could easily incorporate this into each row through using an `ImageView`,
    but that would require converting a URL into a Bitmap object - something that's
    not difficult to do but unnecessary in our case; you get the idea by now.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第6章](ch06.html "第6章. 绑定到UI")中，*绑定到UI*，我们实现了一个自定义的`BaseAdapter`，创建了一个`Contact`对象的列表——在这种情况下，我们正在做一些非常相似的事情，但针对的是我们的`VideoGame`对象！请注意，我的`VideoGameViewHolder`只显示了游戏名称和游戏类型，并没有处理图片URL。同样，通过使用`ImageView`，可以很容易地将这些内容整合到每一行中，但这需要将URL转换为Bitmap对象——虽然这并不难，但在我们的情况下是不必要的；现在您应该明白这个想法了。
- en: 'Now that this is done, we simply need to create an Activity which makes the
    GET request, takes the resulting list of `VideoGames`, and sets them as its `ListAdapter`
    by using the custom `VideoGameBaseAdapter`. The code for this is extremely simple:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们只需要创建一个Activity，它发起GET请求，获取结果中的`VideoGames`列表，并通过使用自定义的`VideoGameBaseAdapter`将其设置为`ListAdapter`。这个代码非常简单：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once done, our end result looks like the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们的最终结果如下所示：
- en: '![Final steps: binding to the UI (again)](img/8123OS_10_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![最后几步：再次绑定到UI](img/8123OS_10_02.jpg)'
- en: And voila! Pat yourself on the back, as we've now just finished our first full-scale
    data-centric application! Now not only do we have a fully functional backend equipped
    with its own set of HTTP requests, but we've also built the beginning of a promising
    Android application that can make HTTP requests to this backend, obtain the results,
    and display them in a simple list.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！给自己点个赞，因为我们刚刚完成了一个完整的数据中心应用程序！现在，我们不仅拥有一个功能齐全的后端，配备了自己的HTTP请求集合，而且还构建了一个有前景的Android应用程序，它能向后端发起HTTP请求，获取结果，并以简单的列表形式展示。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: So, we've reached the end but before we part, let's take a look from start to
    finish at all the incredible things we've learned and covered. We started this
    book by looking at various local storage methods on Android – methods that were
    extremely light-weight and efficient, as well as methods like the SQLite database,
    which were more complex but at the same time much more powerful.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了结尾，但在我们结束之前，让我们从开始到结束看看我们所学习和涵盖的所有令人惊叹的事情。我们通过查看Android上的各种本地存储方法开始了这本书——这些方法非常轻量级和高效，还有像SQLite数据库这样更复杂但同时也更强大的方法。
- en: We then took a deeper look at the SQLite database – likely the most common form
    of local data storage that you'll encounter in your Android application development
    careers, before moving onto SQL queries in [Chapter 3](ch03.html "Chapter 3. SQLite
    Queries"), *SQLite Queries*. Next, we learned about ways in which we could expose
    our SQLite databases to external applications through wrapping them in content
    providers. Then we took a look at the most popular content provider on the Android
    OS - the Contacts content provider, and implemented some common queries that one
    might encounter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着深入探讨了SQLite数据库——这可能是你在Android应用开发职业生涯中遇到的最常见的本地数据存储形式，然后进入了[第三章](ch03.html
    "第三章. SQLite查询")，*SQLite查询*。接下来，我们学习了如何通过将SQLite数据库包装在内容提供者中来向外部应用公开这些数据库。然后我们研究了Android操作系统中最受欢迎的内容提供者——联系人内容提供者，并实现了一些可能会遇到的一些常见查询。
- en: Once we had completely mastered local storage methods, we moved on to actually
    binding these local data sources to the user interface through various `ListAdapter`
    classes. It was in this chapter that we saw implementations and use cases of both
    the `CursorAdapter` as well as the `BaseAdapter`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全掌握了本地存储方法之后，我们继续学习如何通过各种`ListAdapter`类将这些本地数据源绑定到用户界面上。在这一章节中，我们看到了`CursorAdapter`和`BaseAdapter`的实现和使用场景。
- en: From there we moved onto a more holistic look at data-centric application design
    and programming. We talked about practical ways in which we could use all the
    various forms of local data storage, and also introduced the notion of a cache
    as one extremely practical use case for a SQLite database. This naturally transitioned
    us into considering external databases, as caches typically go hand in hand with
    web requests and web programming.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，我们转向了以数据为中心的应用程序设计和编程的更全面视角。我们讨论了实际使用各种本地数据存储形式的方法，并引入了缓存概念，这是SQLite数据库的一个极其实用的用例。这自然引导我们考虑外部数据库，因为缓存通常与网络请求和网络编程密切相关。
- en: It was with external databases that we ended our book. We discussed different
    kinds of external databases that we could use and decided to stick with Google
    App Engine (GAE) for our sample implementation. It was with GAE that we implemented
    a fully-functional JDO database (all done in the cloud), at which point we also
    implemented a series of HTTP servlets that would allow us to make HTTP GET and
    POST requests. And finally, we ended the book by implementing the code for the
    mobile side of our application – bringing us full circle and back to Android.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以外部数据库结束了本书。我们讨论了可以使用的外部数据库的不同类型，并决定在示例实现中使用Google App Engine (GAE)。使用GAE，我们实现了一个完全功能的JDO数据库（全部在云端完成），此时我们还实现了一系列HTTP
    Servlet，使我们能够进行HTTP GET和POST请求。最后，我们通过实现应用程序移动端的代码结束了本书——这让我们回到了Android，并圆满完成了整个学习过程。
- en: It's my hope that through all this, we can better see how databases, both local
    and external, fit into the grand scheme of developing powerful, data-centric Android
    applications. Best of luck and happy developing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望通过这些内容，我们能更好地理解数据库（无论是本地的还是外部的）是如何融入开发强大、以数据为中心的Android应用程序的整体架构中的。祝你好运，开发愉快。
