- en: Chapter 7. Working with Update Handlers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 使用更新处理器
- en: '**Update handlers** give us a way to run specific portions of code every time
    that the engine updates. Some game engines have one built in as a main loop, but
    with AndEngine we can create as many of these loops as necessary with ease. This
    chapter will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新处理器**让我们能够每次引擎更新时运行特定的代码片段。一些游戏引擎内置了一个作为主循环的更新处理器，但使用AndEngine，我们可以轻松地创建尽可能多的这些循环。本章将介绍以下内容：'
- en: Getting started with update handlers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用更新处理器
- en: Attaching an update handler to an entity
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将更新处理器附加到实体
- en: Using update handlers with conditionals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用条件更新处理器
- en: Handling the removal of an entity from the game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理从游戏中移除实体的操作
- en: Adding game timers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加游戏计时器
- en: Setting entity properties based on the time passed
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据经过的时间设置实体属性
- en: Getting started with update handlers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用更新处理器
- en: Update handlers are essentially portions of code that we register with either
    entities or the engine, that are run whenever the engine updates the scene. In
    most situations, this updating occurs every time a frame is drawn, regardless
    of whether entities or the scene have been altered. Update handlers can be a powerful
    means of running a game, but overusing them or performing heavy calculations in
    them will lead to poor performance. This recipe will cover the basics of adding
    a simple update handler to an activity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更新处理器本质上是我们在每次引擎更新场景时注册到实体或引擎的代码片段。在大多数情况下，这种更新每次绘制帧时都会发生，无论实体或场景是否已更改。更新处理器可以是运行游戏的一种强大方式，但过度使用它们或在它们中执行繁重的计算将导致性能下降。本节将介绍向活动添加简单更新处理器的基础知识。
- en: Getting ready...
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了...
- en: Create a new class named `UpdateHandlersActivity` that extends `BaseGameActivity`.
    We will use this class to create a basic update handler.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`UpdateHandlersActivity`的新类，该类继承自`BaseGameActivity`。我们将使用这个类来创建一个基本的更新处理器。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create an update handler that displays how many updates
    have occurred:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个显示已发生多少次更新的更新处理器：
- en: 'Place the following definitions within our `UpdateHandlersActivity` class:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`UpdateHandlersActivity`类中放置以下定义：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, add the following overridden methods to the class.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向类中添加以下重写的方法。
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, insert this last method into our class:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将这个最后的方法插入我们的类中：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first and the second step cover the creation of a simple `BaseGameActivity`
    class. For more information on creating a `BaseGameActivity` class, see the *Know
    the life cycle* recipe in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*. Notice, however, that we create and load a `Font`
    object in the `onCreateResources()` method. For more information on fonts and
    the `Text` entities that use them, see the *Applying text to a layer* recipe in
    [Chapter 2](ch02.html "Chapter 2. Working with Entities"), *Working with Entities*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步和第二步涵盖了创建一个简单的`BaseGameActivity`类的过程。关于创建`BaseGameActivity`类的更多信息，请参见[第1章](ch01.html
    "第1章. AndEngine游戏结构")中的*Know the life cycle*部分，*AndEngine游戏结构*。注意，我们在`onCreateResources()`方法中创建并加载了一个`Font`对象。关于字体和使用它们的`Text`实体的更多信息，请参见[第2章](ch02.html
    "第2章. 使用实体")中的*Applying text to a layer*部分，*使用实体*。
- en: In step three, we create a `Text` entity, `countingText`, by passing the `fontDefault32Bold`
    font, created in the `onCreateResources()` method of the activity, to the `Text`
    constructor, with location parameters to center it on the screen and a maximum
    string length parameter of `10` characters. After attaching the `countingText`
    entity to the scene, we register our update handler. In the `onUpdate()` method
    of our update handler, we increment the `countingInt` integer and set the `countingText`
    entity's text to the integer. This gives us a direct textual display in our game
    of how many updates have occurred, and thus how many frames have been drawn.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们通过将`onCreateResources()`方法中创建的`fontDefault32Bold`字体传递给`Text`构造函数，以及屏幕居中和最大字符串长度参数`10`个字符，创建了一个`Text`实体`countingText`。将`countingText`实体附加到场景后，我们注册了更新处理器。在我们的更新处理器的`onUpdate()`方法中，我们增加`countingInt`整数，并将`countingText`实体的文本设置为该整数。这让我们可以直接在游戏中以文本形式显示已经发生了多少次更新，从而绘制了多少帧。
- en: See also
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Know the life cycle* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. AndEngine游戏结构")中的*Know the life cycle*，*AndEngine游戏结构*。'
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 使用实体")，*使用实体*中*Applying text to a layer*。
- en: Attaching an update handler to an entity
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将更新处理器附加到实体上
- en: In addition to being able to register an update handler with a `Scene` object,
    we can register update handlers with specific entities. By registering an update
    handler with an entity, the handler is only called whenever the entity is attached
    to the engine's scene. This recipe demonstrates this process by creating an update
    handler, which is registered with an initially unattached entity, that increments
    the onscreen text.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够将更新处理器与`Scene`对象注册之外，我们还可以与特定实体注册更新处理器。通过将更新处理器与实体注册，只有当实体被附加到引擎的场景中时，处理器才会被调用。这个示例通过创建一个更新处理器，它与一个最初未附加的实体注册，来递增屏幕上的文本，演示了这一过程。
- en: Getting ready...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: Create a new class named `AttachUpdateHandlerToEntityActivity` that extends
    `BaseGameActivity` and implements `IOnSceneTouchListener`. We will use this class
    to attach an update handler to an `Entity` object that will wait to be attached
    to the scene until the scene is touched.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`AttachUpdateHandlerToEntityActivity`的新类，该类继承自`BaseGameActivity`并实现`IOnSceneTouchListener`接口。我们将使用这个类将更新处理器附加到一个`Entity`对象上，等到场景被触摸时再将其附加到场景中。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create an activity that demonstrates how update handlers
    depend on their parent entity to run:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个活动，演示更新处理器如何依赖于其父实体来运行：
- en: 'Insert the following definitions into our new activity class:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们新的活动类中插入以下定义：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, place the following overridden methods within the class:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在类中放置以下重写的方法：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, add this overridden `onPopulateScene()` method to our activity class:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下重写的`onPopulateScene()`方法添加到我们的活动类中：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Lastly, insert the following overridden method in our `AttachUpdateHandlerToEntityActivity`
    class to compete it:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在我们的`AttachUpdateHandlerToEntityActivity`类中插入以下重写的方法以完成它：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first and the second step cover the creation of a simple `BaseGameActivity`
    class. For more information on creating a BaseGameActivity class, see the *Know
    the life cycle* recipe in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*. Notice, however, that we create and load a `Font`
    object in the `onCreateResources()` method. For more information on fonts and
    the `Text` entities that use them, see the *Applying text to a layer* recipe in
    [Chapter 2](ch02.html "Chapter 2. Working with Entities"), *Working with Entities*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步和第二步涵盖了创建一个简单的`BaseGameActivity`类。有关创建BaseGameActivity类的更多信息，请参见[第1章](ch01.html
    "第1章. AndEngine游戏结构")中的*Know the life cycle*一节，*AndEngine游戏结构*。然而请注意，我们在`onCreateResources()`方法中创建并加载了一个`Font`对象。关于字体和使用它们的`Text`实体的更多信息，请参见[第2章](ch02.html
    "第2章. 使用实体")中的*Applying text to a layer*一节，*使用实体*。
- en: Step three creates a text entity, `countingText`, and attaches it to the center
    of our scene. Then, our blank entity, `blankEntity`, is created by calling the
    `Entity()` constructor and our update handler is registered with it. Note that
    the blank entity is not attached to the scene until a touch occurs within the
    `onSceneTouchEvent()` method in step four. The `onUpdate()` method of the update
    handler simply increments the `countingText` entity's text to show that the update
    handler it is running.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步创建了一个文本实体`countingText`，并将其附加到我们场景的中心。然后，通过调用`Entity()`构造函数创建我们的空白实体`blankEntity`，并且将更新处理器与其注册。注意，在第四步中的`onSceneTouchEvent()`方法检测到触摸事件之前，空白实体并不会被附加到场景中。更新处理器的`onUpdate()`方法仅仅是将`countingText`实体的文本递增，以显示更新处理器正在运行。
- en: Step four creates the `onSceneTouchEvent()` method that gets called when the
    scene is touched. We check to make sure that the touch event is a down action
    and that our blank entity does not already have a parent before attaching `blankEntity`
    to the scene.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第四步创建了`onSceneTouchEvent()`方法，该方法在场景被触摸时被调用。我们检查以确保触摸事件是一个按下动作，并且我们的空白实体还没有父实体，然后将`blankEntity`附加到场景中。
- en: There's more...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When running this recipe, we can see that the update handler is not called until
    the blank entity is attached to the scene. This effect is similar to overriding
    the `onManagedUpdate()` method of entities. The process of registering an update
    handler with an entity can be useful for creating enemies that have their own
    logic, or portions of the scene that should not be animated until shown. Update
    handlers registered with a child `Entity` object of another `Entity` object that
    is attached to the `Scene` object will still be active. Furthermore, the visibility
    of entities does not affect whether or not their registered update handlers will
    run.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此示例时，我们可以看到，在空白实体附加到场景之前，更新处理程序不会被调用。这种效果与覆盖实体的`onManagedUpdate()`方法类似。将更新处理程序注册到实体可以用于创建具有自身逻辑的敌人，或者是在显示之前不应该动画化的场景部分。注册到`Scene`对象中另一个`Entity`对象的子`Entity`对象的更新处理程序仍然有效。此外，实体的可见性并不影响其注册的更新处理程序是否运行。
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Getting started with update handlers* in this chapter.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中开始使用更新处理程序。
- en: '*Know the life cycle* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. AndEngine 游戏结构")中了解*AndEngine 游戏结构*的生命周期。
- en: '*Understanding AndEngine entities* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 使用实体")中了解*AndEngine 实体*，*使用实体*。
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 使用实体")中，将文本应用到图层，*使用实体*。
- en: '*Overriding onManagedUpdate* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 使用实体")中*覆盖onManagedUpdate*，*使用实体*。
- en: Using update handlers with conditionals
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合条件使用更新处理程序。
- en: To reduce the performance cost of running an update handler with heavy calculations,
    we can include a conditional statement that tells the update handler to run a
    specific set of instructions over another. For instance, if we have enemies that
    check to see if the player is within their sight, we can choose to let the vision
    calculations run only once every three updates. In this recipe, we will demonstrate
    a simple conditional statement that switches between a performance-intensive calculation
    and a very simple calculation by touching the screen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少运行具有繁重计算更新处理程序的性能成本，我们可以包含一个条件语句，告诉更新处理程序在另一个更新周期内运行一组特定的指令。例如，如果我们有敌人检查玩家是否在他们的视线范围内，我们可以选择让视野计算每三次更新只运行一次。在本示例中，我们将演示一个简单的条件语句，通过触摸屏幕在性能密集型计算和非常简单的计算之间进行切换。
- en: Getting ready...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: Create a new class named `UpdateHandlersAndConditionalsActivity` that extends
    `BaseGameActivity` and implements `IOnSceneTouchListener`. We will use this class
    to demonstrate how to use conditional statements with an update handler.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`UpdateHandlersAndConditionalsActivity`的新类，该类继承自`BaseGameActivity`并实现`IOnSceneTouchListener`接口。我们将使用这个类来演示如何在使用更新处理程序时使用条件语句。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create an update handler that uses a conditional block
    to determine which code to run:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个使用条件块来确定要运行哪段代码的更新处理程序：
- en: 'Place the following definitions in the new class:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新类中放置以下定义：
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, add the following overridden methods:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加以下重写的方法：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, insert the following overridden `onPopulateScene()` method:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，插入以下重写的`onPopulateScene()`方法：
- en: '[PRE9]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, create this `onSceneTouchEvent()` method to complete our activity:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建此`onSceneTouchEvent()`方法以完成我们的活动：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In step one, we define variables that are common to our test bed as well as
    a Boolean `performanceIntensiveLoop` variable, that tells our update handler which
    action to take and a double variable, `performanceHeavyVariable`, that we will
    use in our performance-intensive calculation. Step two creates the standard methods
    for our activity. For more information on creating `BaseGameActivity` classes,
    see the *Know the life cycle* recipe in [Chapter 1](ch01.html "Chapter 1. AndEngine
    Game Structure"), *AndEngine Game Structure*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们定义了测试床共有的变量以及一个布尔型变量`performanceIntensiveLoop`，它告诉我们的更新处理程序采取哪个动作，以及一个双精度变量`performanceHeavyVariable`，我们将在性能密集型计算中使用它。第二步为我们的活动创建标准方法。有关创建`BaseGameActivity`类的更多信息，请参见[第1章](ch01.html
    "第1章. AndEngine 游戏结构")中的*了解生命周期*示例。
- en: In step three, we create `countingText` before registering our update handler
    with the scene. On every update, it checks the `performanceIntensiveLoop` Boolean
    variable to determine whether it should perform a heavy task, calling the `Math`
    class' `sqrt()` method almost one million times, or a simple task, decrementing
    the `countingInt` variable's text.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们在注册更新处理器到场景之前创建了`countingText`。在每次更新时，它会检查`performanceIntensiveLoop`布尔变量，以确定它应该执行繁重任务（几乎调用一百万次`Math`类的`sqrt()`方法），还是执行简单任务（递减`countingInt`变量的文本）。
- en: Step four is the `onSceneTouchEvent()` method that switches the `performanceIntensiveLoop`
    Boolean variable every time the screen is touched.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第四步是`onSceneTouchEvent()`方法，每次触摸屏幕时都会切换`performanceIntensiveLoop`布尔变量。
- en: See also
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Getting started with update handlers* in this chapter.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章节中的*开始使用更新处理器*。
- en: '*Know the life cycle* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. AndEngine游戏结构")中的*Know the life cycle*，*AndEngine游戏结构*。'
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 使用实体")中的*将文本应用到层上*，*使用实体*。'
- en: Handling the removal of an entity from the game
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理从游戏中移除实体的操作
- en: Detaching entities within an update handler can occasionally throw an `IndexOutOfBoundsException`
    exception, because the entity is removed in the middle of an engine update. To
    avoid that exception, we create a `Runnable` parameter that is run last on the
    update thread, after all other updating has occurred. In this recipe, we will
    safely remove an entity from the game by using the BaseGameActivity class' `runOnUpdateThread()`
    method.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新处理器中分离实体有时可能会抛出`IndexOutOfBoundsException`异常，因为实体是在引擎更新过程中被移除的。为了避免该异常，我们创建了一个`Runnable`参数，在所有其他更新完成后，在更新线程上最后运行。在本教程中，我们将通过使用`BaseGameActivity`类的`runOnUpdateThread()`方法，从游戏中安全地移除实体。
- en: Getting ready...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪...
- en: Create a new class named `HandlingRemovalOfEntityActivity` that extends `BaseGameActivity`.
    We will use this class to learn how to safely remove an entity from an update
    handler.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`HandlingRemovalOfEntityActivity`的新类，该类继承自`BaseGameActivity`。我们将使用这个类来学习如何安全地从更新处理器中移除实体。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to see how we can remove an entity from its parent without
    throwing an exception:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤，我们可以在不抛出异常的情况下从一个父实体中移除一个实体：
- en: 'Insert the following definitions into the `HandlingRemovalOfEntityActivity`
    class:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HandlingRemovalOfEntityActivity`类中插入以下定义：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, add these overridden methods to the class:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将这些重写的方法添加到类中：
- en: '[PRE12]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Lastly, place the following `onPopulateScene()` method in the activity to finish
    it:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在活动中放置以下`onPopulateScene()`方法以完成它：
- en: '[PRE13]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In step one, we define the normal `BaseGameActivity` variables as well as a
    square `Rectangle` object, `spinningRect`, that will spin in place and a float
    variable, `totalElapsedSeconds`, to keep track of how many seconds have elapsed
    since the start of our update handler. Step two creates the standard `BaseGameActivity`
    methods. For more information on creating AndEngine activities, see the *Know
    the life cycle* recipe in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们定义了常规的`BaseGameActivity`变量以及一个正方形`Rectangle`对象，`spinningRect`，它将在原地旋转，还有一个浮点变量`totalElapsedSeconds`，用于跟踪自更新处理程序开始以来已经过去了多少秒。第二步创建了标准的`BaseGameActivity`方法。有关创建AndEngine活动的更多信息，请参见[第1章](ch01.html
    "第1章. AndEngine游戏结构")中的*Know the life cycle*部分，*AndEngine游戏结构*。
- en: In step three, we create the `spinningRect` rectangle defined in step one by
    calling the `Rectangle` constructor with a location at the center of the screen.
    The `Rectangle` object is then set to a black color via the `setColor()` method.
    Next, it has our update handler registered with it that records the elapsed time
    and removes the rectangle from the screen if more than `5` seconds have elapsed
    since the start of the activity. Notice that the way we detach the rectangle from
    the scene is by calling `runOnUpdateThread()`. This method passes the `Runnable`
    parameter to the engine to be run at the completion of the update cycle.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们通过调用`Rectangle`构造函数并设置屏幕中心位置来创建第一步中定义的`spinningRect`矩形。然后通过`setColor()`方法将`Rectangle`对象设置为黑色。接下来，它注册了我们的更新处理器，记录经过的时间，如果自活动开始以来已经超过`5`秒，则从屏幕上移除矩形。请注意，我们从场景中分离矩形的方式是调用`runOnUpdateThread()`。此方法将`Runnable`参数传递给引擎，以便在更新周期完成后运行。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Getting started with update handlers* in this chapter.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，*开始使用更新处理器*。
- en: '*Know the life cycle* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. AndEngine游戏结构") *AndEngine游戏结构* 中，*了解生命周期*。
- en: '*Applying primitives to a layer* in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 使用实体") *使用实体* 中，*给图层应用图元*。
- en: Adding game timers
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加游戏计时器
- en: Many games count down time and challenge the player to complete a task within
    the given amount of time. Such challenges are rewarding for the player, and often
    add replay value to a game. In the previous recipe, we kept track of the total
    elapsed time. In this recipe, we will start with a time and subtract from it the
    elapsed time provided by the update handler.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 许多游戏会倒计时并挑战玩家在给定的时间内完成任务。这样的挑战对玩家来说是有益的，并且常常增加了游戏的重复玩价值。在之前的教程中，我们跟踪了总经过时间。在本教程中，我们将从一个时间开始，并从中减去更新处理器提供的时间。
- en: Getting ready...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪...
- en: Create a new class named `GameTimerActivity` that extends `BaseGameActivity`.
    We will use this class to create a game timer from an update handler.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `GameTimerActivity` 的新类，该类继承自 `BaseGameActivity`。我们将使用这个类从更新处理器创建一个游戏计时器。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create a game timer using an update handler:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用更新处理器创建游戏计时器：
- en: 'Place these variable definitions in our new activity class:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们新活动类中放置以下变量定义：
- en: '[PRE14]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, insert the following standard, overridden methods:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，插入以下标准覆盖方法：
- en: '[PRE15]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, add this overridden `onPopulateScene()` method to the `GameTimerActivity`
    class:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将这个覆盖的 `onPopulateScene()` 方法添加到 `GameTimerActivity` 类中：
- en: '[PRE16]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In step one, we define common `BaseGameActivity` variables as well as an `EndingTimer`
    float variable set at `10` seconds. Step two creates the common methods for our
    activity. For more information on creating a BaseGameActivity class, see the *Know
    the life cycle* recipe in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们将常见的 `BaseGameActivity` 变量以及一个设置为 `10` 秒的 `EndingTimer` 浮点变量定义。第二步为我们的活动创建常见方法。有关创建
    BaseGameActivity 类的更多信息，请参见[第1章](ch01.html "第1章. AndEngine游戏结构") *AndEngine游戏结构*
    中的*了解生命周期*教程。
- en: In step three, we create the `countingText` entity, and use our scene to register
    an update handler, which counts down the `EndingTimer` variable using the `pSecondsElapsed`
    variable until it reaches `0`. When it reaches `0`, we simply unregister the update
    handler from the scene by calling the scene's `unregisterUpdateHandler()` method.
    In an actual game, the timer ending could end a level or even call the next wave
    of enemies to attack the player.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们创建 `countingText` 实体，并使用我们的场景注册一个更新处理器，该处理器通过 `pSecondsElapsed` 变量倒计时
    `EndingTimer` 变量，直到它达到 `0`。当它达到 `0` 时，我们只需通过调用场景的 `unregisterUpdateHandler()`
    方法，从场景中注销更新处理器。在实际游戏中，计时器结束可能意味着结束一个关卡，甚至召唤下一波敌人攻击玩家。
- en: See also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Getting started with update handlers* in this chapter.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，*开始使用更新处理器*。
- en: '*Know the life cycle* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. AndEngine游戏结构") *AndEngine游戏结构* 中，*了解生命周期*。
- en: '*Applying text to a layer* in [Chapter 2](ch02.html "Chapter 2. Working with
    Entities"), *Working with Entities*.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 使用实体") *使用实体* 中，*给图层应用文本*。
- en: Setting entity properties based on the time passed
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据经过的时间设置实体属性
- en: Consistency across devices is one of the more important aspects of mobile game
    development. Players expect a game to scale properly for their device's screen,
    but another important, and often overlooked, aspect of game development is basing
    movements and animations on time instead of engine updates. In this recipe, we
    will set an entity's property using an update handler.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动游戏开发中，设备之间的连贯性是更为重要的方面之一。玩家期望游戏能够适当地缩放以适应他们设备的屏幕，但游戏开发中另一个重要且经常被忽视的方面是基于时间而不是引擎更新来设置移动和动画。在本教程中，我们将使用更新处理器来设置实体的属性。
- en: Getting ready...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪...
- en: Create a new class named `SettingEntityPropertiesBasedOnTimePassedActivity`
    that extends `BaseGameActivity`. We will use this class to demonstrate how to
    set entity properties in time with an update handler.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `SettingEntityPropertiesBasedOnTimePassedActivity` 的新类，该类继承自 `BaseGameActivity`。我们将使用这个类来演示如何使用更新处理器来随时间设置实体属性。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to see how we can set an entity''s property based on how
    much time has passed in an udate:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤，我们可以根据已经过去的时间设置实体的属性：
- en: 'Define the following variables in the activity:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在活动中定义以下变量：
- en: '[PRE17]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, place these overridden methods in the class:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在这些重写的方法中放入以下类：
- en: '[PRE18]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Lastly, insert this `onPopulateScene()` method at the end of the activity to
    complete it:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在活动末尾插入此`onPopulateScene()`方法以完成它：
- en: '[PRE19]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As with the other recipes in this chapter, we first create common `BaseGameActivity`
    variables. For this recipe, we also define a `Rectangle` object, `spinningRect`,
    that will spin at specific revolutions per second. For more information on creating
    AndEngine activities, see the *Know the life cycle* recipe in [Chapter 1](ch01.html
    "Chapter 1. AndEngine Game Structure"), *AndEngine Game Structure*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中的其他方法一样，我们首先创建常见的`BaseGameActivity`变量。对于这个方法，我们还定义了一个`Rectangle`对象`spinningRect`，它将以每秒特定的圈数旋转。有关创建
    AndEngine 活动的更多信息，请参见[第一章](ch01.html "第一章. AndEngine 游戏结构") *AndEngine 游戏结构*中的*了解生命周期*方法。
- en: 'In step three, we fill the `onPopulateScene()` method by first creating our
    `spinningRect` rectangle, which we then use to register our update handler. Inside
    the update handler''s `onUpdate()` method, we set the rotation of the rectangle
    to equal its current rotation, via the `getRotation()` method, plus a calculation
    that adjusts the `pSecondsElapsed` variable to a set number of rotations per second.
    The following diagram shows how the updates in our games do not have equal durations
    and thus must take advantage of the `pSecondsElapsed` parameter instead of a constant
    value:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们通过首先创建我们的`spinningRect`矩形来填充`onPopulateScene()`方法，然后我们使用它来注册我们的更新处理程序。在更新处理程序的`onUpdate()`方法内部，我们将矩形的旋转设置为等于其当前的旋转，通过`getRotation()`方法，加上一个计算，将`pSecondsElapsed`变量调整为每秒设定的圈数。下图展示了我们游戏中的更新并不具有相等的持续时间，因此必须利用`pSecondsElapsed`参数而不是一个恒定值：
- en: '![How it works...](img/8987OS_07_01.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/8987OS_07_01.jpg)'
- en: There's more...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The calculation that we use in the `onUpdate()` method of our update handler
    sets the `Rectangle` object to rotate at half of a rotation per second. If we
    were to multiply the `(pSecondsElapsed*360f)` portion of the calculation by `4`,
    the rectangle would spin at 4 revolutions per second. For linear movements based
    on time, simply multiply the desired pixels per second with the `pSecondsElap`
    `ed` variable.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在更新处理程序的`onUpdate()`方法中使用的计算使`Rectangle`对象以每秒半圈的速度旋转。如果我们把计算中的`(pSecondsElapsed*360f)`部分乘以`4`，矩形将以每秒4圈的速度旋转。对于基于时间的线性移动，只需将所需的每秒像素数与`pSecondsElapsed`变量相乘。
- en: See also
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Getting started with update handlers* in this chapter.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章节将开始介绍更新处理程序。
- en: '*Know the life cycle* in [Chapter 1](ch01.html "Chapter 1. AndEngine Game Structure"),
    *AndEngine Game Structure*.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*了解生命周期*在第 [第一章](ch01.html "第一章. AndEngine 游戏结构") *AndEngine 游戏结构*中。'
