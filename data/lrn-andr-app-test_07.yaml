- en: Chapter 7. Behavior-driven Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 行为驱动开发
- en: '**Behavior-driven Development** (**BDD**) can be understood as the evolution
    and confluence of **Test-driven Development** (**TDD**) and acceptance testing.
    Both techniques were discussed in previous chapters, so you may want to look back
    at [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting Started with Testing"),
    *Getting Started with Testing,* and [Chapter 6](part0061_split_000.html#page "Chapter 6. Practicing
    Test-driven Development"), *Practicing Test-driven Development,* before proceeding.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**行为驱动开发**（**BDD**）可以理解为**测试驱动开发**（**TDD**）和验收测试的发展和融合。这两种技术在前面的章节中都有讨论，所以在继续之前，您可能想回顾一下[第1章](part0014_split_000.html#page
    "Chapter 1. Getting Started with Testing")，*开始测试*，以及[第6章](part0061_split_000.html#page
    "Chapter 6. Practicing Test-driven Development")，*实践测试驱动开发*。'
- en: Behavior-driven Development introduces some new concepts, such as the use of
    a common vocabulary to describe the tests, and the inclusion of business participants
    in the software development project, such as product owners or business analysts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发（BDD）引入了一些新概念，例如使用通用词汇描述测试，以及在软件开发项目中包含业务参与者，如产品所有者或业务分析师。
- en: We have visited Test-driven Development before, and we focused on converting
    low-level requirements into tests that could drive our development process. Behavior-driven
    Development forces us to concentrate on higher level requirements, and by using
    a specific vocabulary, we can express these requirements in a way that can be
    further analyzed or evaluated. Some people believe BDD is only the philosophy
    of TDD done right.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经接触过测试驱动开发，我们专注于将低级需求转换为可以推动我们开发过程的测试。行为驱动开发迫使我们关注更高级别的需求，通过使用特定的词汇，我们可以以可以进一步分析或评估的方式表达这些需求。有些人认为BDD只是正确执行的TDD的哲学。
- en: We will explore these concepts through examples, so that you can draw your own
    conclusions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过实例来探索这些概念，以便您可以得出自己的结论。
- en: Given, When, and Then
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给定、当、然后
- en: 'Given/When/Then words are the common vocabulary that spans the divide between
    business and technology, and as described at [http://behaviour-driven.org](http://behaviour-driven.org),
    they can also be referred to as the ubiquitous language of Behavior-driven Development.
    The framework is based on the following three core principles that we reproduce
    here, verbatim:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Given/When/Then 这些词汇是跨越业务和技术之间鸿沟的通用语言，正如在 [http://behaviour-driven.org](http://behaviour-driven.org)
    所描述的，它们也可以被称为行为驱动开发无处不在的语言。该框架基于以下三个核心原则，我们在这里逐字重现：
- en: Business and technology should refer to the same system in the same way
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务和技术应该以相同的方式指代同一个系统。
- en: Any system should have an identified, verifiable value to the business
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何系统都应该对业务有一个明确且可验证的价值。
- en: Up-front analysis, design, and planning, all have a diminishing return
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前期的分析、设计和规划，都会有一个递减的回报。
- en: 'Behavior-driven Development relies on the use of this specific vocabulary.
    Additionally, the format in which requirements are expressed is predetermined,
    allowing tools to interpret and execute them:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发依赖于使用这个特定的词汇。此外，预先确定的需求表达格式允许工具解释和执行它们：
- en: '**Given**: This is to describe the initial state before an external stimuli
    is received.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**给定**：这是描述在外部刺激接收之前的初始状态。'
- en: '**When**: This is to describe the key action the user performs.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当**：这是为了描述用户执行的关键动作。'
- en: '**Then**: This is to analyze the results of the actions. To be observable,
    the actions performed should have some kind of outcome.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**然后**：这是为了分析行动的结果。为了可观察，所执行的动作应该有一种结果。'
- en: FitNesse
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FitNesse
- en: 'FitNesse is a software development collaboration tool that can be used to manage
    BDD scenarios. Strictly speaking FitNesse is a set of tools, described as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: FitNesse 是一个软件开发协作工具，可用于管理BDD场景。严格来说，FitNesse 是一组工具，如下所述：
- en: As a software testing tool, FitNesse is a lightweight, open source framework
    that allows teams to collaborate
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为软件测试工具，FitNesse 是一个轻量级、开源的框架，允许团队协作。
- en: It is also a Wiki where you can easily create, edit pages, and share information
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还是一个 Wiki，您可以轻松创建、编辑页面并共享信息。
- en: A web server, so it doesn't require additional configuration or administrative
    privileges to set up, or configure
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网络服务器，因此它不需要额外的配置或管理权限来设置或配置。
- en: Download the FitNesse distribution from [http://www.fitnesse.org](http://www.fitnesse.org).
    The distribution is a JAR file that installs itself on first run. Throughout these
    examples, we used FitNesse standalone release 20140901 but newer versions should
    also work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://www.fitnesse.org](http://www.fitnesse.org)下载FitNesse发行版。该发行版是一个JAR文件，在首次运行时自动安装。在这些示例中，我们使用了FitNesse独立版20140901，但较新版本也应该可以工作。
- en: Running FitNesse from the command line
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行运行FitNesse
- en: 'By default, when FitNesse runs, it listens on port 80, so to run unprivileged,
    you should change the port on the command line. In this example, we use `8900`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，FitNesse运行时监听80端口，因此要在非特权模式下运行，你应该在命令行上更改端口。在此示例中，我们使用`8900`：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output obtained when we run the command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们运行命令时获得的输出：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once running, you can direct your browser to the local FitNesse server home
    page (`http://localhost:8900/FrontPage`), and you will be presented with this
    content:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行，你可以将浏览器直接指向本地FitNesse服务器主页（`http://localhost:8900/FrontPage`），你将看到以下内容：
- en: '![Running FitNesse from the command line](img/00035.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![从命令行运行FitNesse](img/00035.jpeg)'
- en: Creating a TemperatureConverterTests subwiki
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建TemperatureConverterTests子维基
- en: Once FitNesse is up and running, we can start by creating a subwiki to organize
    our tests. You may already be familiar with the wiki concept. If not, wiki is
    a website that allows page editing and creation by its users. This editing process
    is done from within the browser, and uses a markup language that greatly simplifies
    the process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦FitNesse启动并运行，我们可以通过创建一个子维基来组织我们的测试。你可能已经熟悉维基概念。如果不是，维基是一个允许用户编辑和创建网页的网站。这种编辑过程是在浏览器内完成的，并使用一种大大简化过程的标记语言。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find out more about wikis in what could perhaps be the most famous wiki
    at [http://en.wikipedia.org/wiki/Wiki](http://en.wikipedia.org/wiki/Wiki).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在可能是最著名的维基[http://en.wikipedia.org/wiki/Wiki](http://en.wikipedia.org/wiki/Wiki)上了解更多关于维基的信息。
- en: Though this subwiki organization is not mandatory, it is highly recommended,
    especially if you plan to use FitNesse for acceptance testing on multiple projects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种子维基组织不是强制性的，但强烈建议这样做，特别是如果你打算在多个项目中使用FitNesse进行验收测试。
- en: One of the most simplified processes is hyperlink creation, which is done only
    by using *CamelCase* or *WikiWords*; that is a word that starts with a capital
    letter and has at least one or more capital letter in it. This WikiWord will be
    converted into a hyperlink to a page, with that name.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最简化的过程之一是超链接创建，只需使用*驼峰命名*或*维基词*即可完成；即以大写字母开头并至少包含一个大写字母的单词。这个维基词将被转换成同名页面的超链接。
- en: 'To create the **TemperatureConverterTests** subwiki, we simply press the **Edit**
    button to the right of the FitNesse logo, to edit the home page, adding the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建**TemperatureConverterTests**子维基，我们只需点击FitNesse标志右侧的**编辑**按钮，编辑主页，添加以下内容：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This adds a new table to the page by using the "|" markup as the first character
    and to delimit the columns.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过使用"|"标记作为第一个字符和分隔列，向页面添加了一个新表格。
- en: We also add a column with a descriptive comment about the tests. This comment
    is turned into italics by surrounding it with two single quotes (''). This text
    will create a wiki link named, `TemperatureConverterTests`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一列带有描述性注释的测试。这个注释通过使用两个单引号（''）包围变成斜体。这段文本将创建一个名为`TemperatureConverterTests`的维基链接。
- en: Press **Save,** and the page will be modified.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**保存**，页面将被修改。
- en: 'Once the page is displayed, we can verify that `TemperatureConverterTests`
    is now followed by a **[?]** (question mark) because the page has not been created
    yet, and will be created when we click on it. Click on it now, this puts us straight
    into edit mode of the new page. We can add some comments to clearly identify this
    newly created front page of the subwiki:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦页面显示，我们可以验证`TemperatureConverterTests`后面是否跟着一个**[?]**（问号），因为页面尚未创建，在我们点击它时将会创建。现在点击它，这将直接把我们带入新页面的编辑模式。我们可以添加一些注释以清楚地标识这个新创建的子维基主页：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the text `TemperatureConverterTests` `SubWiki` is escaped using `!-` and
    `-!` to prevent it from being converted to another page link.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，文本`TemperatureConverterTests` `SubWiki`通过使用`!-`和`-!`进行转义，以防止它被转换成另一个页面链接。
- en: Press **Save** again.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 再次按下**保存**。
- en: Adding child pages to the subwiki
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向子维基添加子页面
- en: Now, we add a new child page by using the **[Add]** link that appears next to
    the page title.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们通过使用页面标题旁边的**[添加]**链接来添加一个新子页面。
- en: 'There are different options for creating the child page, and we can select:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建子页面有不同的选项，我们可以选择：
- en: 'Static: This is a normal Wiki page'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态：这是一个普通的维基页面
- en: 'Suite: This is a page containing other tests composing a suite'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 套件：这是一个包含其他测试构成套件的页面
- en: 'Test: This is a page that contains tests'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试：这是一个包含测试的页面
- en: 'We will select to add a suite page and call it `TemperatureConverterTestSuite`
    as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择添加一个套件页面，并将其命名为`TemperatureConverterTestSuite`，如下截图所示：
- en: '![Adding child pages to the subwiki](img/00036.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![向子维基添加子页面](img/00036.jpeg)'
- en: After pressing **Save**, this page is created and has been automatically added
    as a link to the `TemperatureConverterTests` subwiki.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**保存**后，这个页面就会被创建，并且自动作为链接添加到`TemperatureConverterTests`子维基中。
- en: Let's follow this newly created link to reach the test suite page.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跟随这个新创建的链接到达测试套件页面。
- en: Once you're here, add another child using **[Add]** | **[Test Page]**. This
    adds a test page, and we will name it `TemperatureConverterCelsiusToFahrenheitFixture,`
    as this will contain our fixture. The naming here is just a convention to organize
    our wiki.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里后，使用**[添加]** | **[测试页面]**再添加一个子页面。这添加了一个测试页面，我们将它命名为`TemperatureConverterCelsiusToFahrenheitFixture`，因为这将会包含我们的夹具。这里的命名只是按照约定来组织我们的维基。
- en: Click on **Save** to finish the operation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**保存**来完成操作。
- en: Adding the acceptance test fixture
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加验收测试夹具
- en: 'Up until now, we were only creating wiki pages. Nothing exciting about that!
    Now, we will be adding our acceptance test fixture directly to the page. Be sure
    you have navigated to the newly added page, `TemperatureConverterCelsiusToFahrenheitFixture`,
    click on **Edit**, and replace `<test page>` with the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们一直在创建维基页面。这并没有什么令人兴奋的！现在，我们将直接把验收测试夹具添加到页面中。确保你已经导航到新添加的页面`TemperatureConverterCelsiusToFahrenheitFixture`，点击**编辑**，并将`<test
    page>`替换为以下内容：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This table defines several items for our test feature:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格为我们的测试特性定义了几个项目：
- en: '`TemperatureConverterCelsiusToFahrenheitFixture`: This is the table title and
    the test fixture name.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TemperatureConverterCelsiusToFahrenheitFixture`：这是表格标题和测试夹具名称。'
- en: '`celsius`: This is the column name for the value we are providing as input
    to the test.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`celsius`：这是我们提供给测试作为输入值的列名。'
- en: '`fahrenheit?`: This is the column name for the value expected as the result
    of the conversion. The question mark indicates that this is a result value.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fahrenheit?`：这是我们期望作为转换结果的值的列名。问号表示这是一个结果值。'
- en: '`~=`: This indicates that the result is approximately this value.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~=`：这表示结果大约是这个值。'
- en: '`< _ <`: This indicates that the expected value is within this range.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`< _ <`：这表示预期值在这个范围内。'
- en: '`Invalid temperature`: -274.00 C below absolute zero is the value expected
    by the failed conversion.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Invalid temperature`：低于绝对零度-274.00摄氏度是失败的转换预期的值。'
- en: Save this content by clicking on **Save**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**保存**来保存这些内容。
- en: Adding the supporting test classes
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加支持测试类
- en: If we press the **Test** button, which is below the FitNesse logo (see the following
    screenshot for details), we will receive an error. In some way this is expected
    because we haven't created the supporting test fixture yet. The test fixture will
    be a very simple class that invokes the `TemperatureConverter` class methods.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们按下**测试**按钮，这个按钮位于FitNesse标志下方（详细情况见下截图），我们将收到一个错误。在某种程度上这是预期的，因为我们还没有创建支持测试夹具。测试夹具将是一个非常简单的类，调用`TemperatureConverter`类的方法。
- en: 'FitNesse supports the following two different test systems:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: FitNesse支持以下两种不同的测试系统：
- en: '**fit**: This is the older of the two methods and uses HTML, parsed just prior
    to the fixture being called'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fit**：这是两种方法中较旧的一种，使用HTML，在调用夹具之前解析'
- en: '**slim**: This is newer; all the table processing is done inside FitNesse within
    slim runners'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**slim**：这是较新的方法；所有的表格处理都在FitNesse内的slim运行器中完成'
- en: Further information about these test systems can be found at [http://fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.TestSystems](http://fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.TestSystems).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些测试系统的更多信息可以在以下链接找到：[http://fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.TestSystems](http://fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.TestSystems)。
- en: 'In this example, we use slim, by setting the variable `TEST_SYSTEM` within
    the same page as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过在同一个页面内设置变量`TEST_SYSTEM`来使用slim：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we are going to create the slim test fixture. Remember the text fixture
    is a simple class that allows us to run our already written temperature conversion
    code from the FitNesse test suite. We create a new package, named `com.blundell.tut.fitnesse.fixture`,
    inside of our existing project `TemperatureConverter` and inside the `core` module.
    We will be creating the fixture inside this package.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将要创建slim测试夹具。请记住，测试夹具是一个简单的类，它允许我们从FitNesse测试套件运行已经写好的温度转换代码。我们在现有项目`TemperatureConverter`的`core`模块内创建一个名为`com.blundell.tut.fitnesse.fixture`的新包。我们将在该包内创建夹具。
- en: 'Next, we have to create the `TemperatureConverterCelsiusToFahrenheitFixture`
    class, which we defined in our acceptance test table:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须创建一个`TemperatureConverterCelsiusToFahrenheitFixture`类，这是我们在验收测试表中定义的：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As a reminder it should look something like this when done:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，完成后的样子应类似如下：
- en: '![Adding the supporting test classes](img/00037.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![添加支持测试类](img/00037.jpeg)'
- en: This fixture should delegate to our real code and not do anything by itself.
    We decided to return `String` from `fahrenheit(),` so we can return the `Exception`
    message in the same method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个夹具应该委托给我们的真实代码，而不应该自己执行任何操作。我们决定从`fahrenheit()`返回`String`，这样我们就可以在同一个方法中返回`Exception`消息。
- en: At this point, run the core module tests to ensure you have not broken anything
    (and to compile the newly created class for later).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，运行核心模块测试以确保你没有破坏任何东西（同时编译新创建的类以备后用）。
- en: 'On the FitNesse test page, we should also define the package the test resides
    in. This allows the tests written in FitNesse to find the test fixture written
    in our Android project. In the same page we are still editing, add:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在FitNesse测试页面上，我们还应该定义测试所在的包。这允许在FitNesse中编写的测试能找到我们在Android项目中编写的测试夹具。在我们仍在编辑的同一页面中，添加：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we add our Android project class files to the path of our FitNesse tests.
    This allows FitNesse to use our newly written test fixture and our `TemperatureConverter`;
    the code under test:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将Android项目类文件添加到FitNesse测试的路径中。这允许FitNesse使用我们新编写的测试夹具和我们的`TemperatureConverter`；即测试中的代码。
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This should be adapted to your system paths. The main point here is the path
    after `/core/`. This is pointing to where the compiled `*.class` files are for
    your application under test. Note, that we need to add the test sources and the
    project sources separately.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该适应你的系统路径。这里的重点是`/core/`之后的路径。这指向的是你的测试应用程序下编译的`*.class`文件的存放位置。注意，我们需要分别添加测试源和项目源。
- en: 'After finishing these steps, we can click on the **Test** button to run the
    tests, and the following screenshot will reflect the results:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，我们可以点击**测试**按钮运行测试，以下截图将反映结果：
- en: '![Adding the supporting test classes](img/00038.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![添加支持测试类](img/00038.jpeg)'
- en: We can easily identify every test that succeeded by their green color, and the
    failed ones by their red color. In this example, we don't have any failure, so
    everything is green. Notice, it also shows the `classpath` and `TEST_SYSTEM` variables
    we declared.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过它们的绿色来判断每个成功的测试，以及通过红色来判断失败的测试。在这个例子中，我们没有失败，所以一切都是绿色的。注意，它还显示了我们所声明的`classpath`和`TEST_SYSTEM`变量。
- en: FitNesse has another useful feature, **Test History**. All the test runs and
    a specific number of results are saved for a period of time, so that you can review
    the results later on and compare them, and thus, analyze the evolution of your
    changes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: FitNesse还有一个有用的功能，**测试历史**。所有测试运行和一定数量的结果会被保存一段时间，这样你可以在以后查看结果并进行比较，从而分析你的更改的演变。
- en: This feature is accessed by clicking **Test** **History** located at the bottom
    of the list, under **Tools,** on the top menu.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击顶部菜单中**工具**下的列表底部的**测试** **历史**来访问此功能。
- en: 'In the following screenshot, we can see the results for the last 3 test runs,
    where 2 failed and 1 succeeded. Also by clicking on the **+** (plus) or **-**
    (minus) signs, you can expand or collapse the view to show or hide detailed information
    about the test run:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，我们可以看到最近3次测试运行的结果，其中2次失败，1次成功。同时，通过点击**+**（加号）或**-**（减号）标志，你可以展开或折叠视图以显示或隐藏有关测试运行的详细信息：
- en: '![Adding the supporting test classes](img/00039.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![添加支持测试类](img/00039.jpeg)'
- en: GivWenZen
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GivWenZen
- en: GivWenZen is a framework that builds upon FitNesse and Slim to allow the user
    to exploit the Behavior-driven Development technique of expression, using the
    **Given-When-Then** vocabulary to describe tests. These test descriptions are
    also created using the FitNesse wiki facility, of expressing the tests as plain
    text contained in tables in a wiki page.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: GivWenZen 是一个框架，基于 FitNesse 和 Slim，允许用户利用行为驱动开发技术的表达方式，使用 **给定-当-那么** 词汇来描述测试。这些测试描述也使用
    FitNesse 维基功能创建，即以纯文本表格形式在维基页面上表达测试。
- en: The idea is simple and straightforward, and follows up with what we have been
    doing with FitNesse, but this time instead of writing acceptance tests giving
    a table of values, we will use the three Behavior-driven Development magic words,
    **Given-When-Then**, to describe our scenarios.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法简单直接，与我们之前使用 FitNesse 的工作一脉相承，但这次我们不是通过提供一个值表来编写验收测试，而是将使用行为驱动开发的三个神奇词汇
    **给定-当-那么** 来描述我们的场景。
- en: 'Firstly, let''s install FitNesse with GivWenZen. Download the full distribution
    from its download list page at [http://goo.gl/o3Hlpo](http://goo.gl/o3Hlpo). Once
    unzipped, the GivWenZen JAR starts up exactly the same way as FitNesse did (because
    it''s just a modification on top):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装带有 GivWenZen 的 FitNesse。从其下载列表页面 [http://goo.gl/o3Hlpo](http://goo.gl/o3Hlpo)
    下载完整发行版。解压后，GivWenZen JAR 的启动方式与 FitNesse 完全相同（因为它只是在顶部的一个修改）：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Further reading, comprehensive instructions and examples can be found on the
    wiki at [https://github.com/weswilliams/GivWenZen/wiki](https://github.com/weswilliams/GivWenZen/wiki).
    We used GivWenZen 1.0.3 in these examples, but newer versions should work as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 更多阅读、综合说明和示例可以在维基上找到，地址是 [https://github.com/weswilliams/GivWenZen/wiki](https://github.com/weswilliams/GivWenZen/wiki)。我们在这些示例中使用了
    GivWenZen 1.0.3，但新版本应该也能工作。
- en: The GivWenZen full distribution includes all the dependencies needed, including
    FitNesse, so if you have FitNesse running from previous examples it is better
    to stop it, as you must use a different JAR for GivWenZen.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: GivWenZen 完整发行版包括了所有需要的依赖，包括 FitNesse，因此如果你之前运行过 FitNesse 示例，最好停止它，因为你必须使用不同的
    JAR 文件来运行 GivWenZen。
- en: Upon startup, point your browser to the home page and you will find a familiar
    FitNesse front page, or if you have configured the port like we did previously,
    check out some tests at `http://localhost:8900/GivWenZenTests`. You can take some
    time to explore the examples included.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，将浏览器指向主页，你会看到一个熟悉的 FitNesse 首页，或者如果你像之前那样配置了端口，可以查看 `http://localhost:8900/GivWenZenTests`
    的一些测试。你可以花些时间探索其中包含的示例。
- en: Creating the test scenario
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建测试场景
- en: Let's create a simple scenario for our temperature converter, so we can understand
    Given-When-Then a bit better.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的温度转换器创建一个简单的场景，这样我们可以更好地理解给定-当-那么。
- en: 'As a plain English sentence, our scenario would be:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 用纯英文句子表达，我们的场景将是：
- en: '*Given* I''m using the Temperature Converter, *When* I enter 100 into the Celsius
    field, *Then* I obtain 212 in the Fahrenheit field.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*给定* 我正在使用温度转换器，*当* 我在摄氏度字段输入100，*那么* 我在华氏度字段得到212。'
- en: 'The value is directly translated into a GivWenZen scenario by adding this to
    a wiki page:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这段内容添加到维基页面，其值将直接转换成 GivWenZen 场景：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The translation is straightforward. The table title must be `script`, and in
    this case it is preceded by a dash (-) to hide it. Then each of the **Given-When-Then**
    scenarios is placed in a column, and the predicate in the other column.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译非常直接。表格标题必须是 `script`，在这种情况下，前面有一个破折号 (-) 来隐藏它。然后每个 **给定-当-那么** 场景都放在一列中，谓词放在另一列。
- en: 'Before running this script, when the whole page is executed, we need to initialize
    GivWenZen by running another script. You do this by adding it to the top of the
    wiki page:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行这个脚本之前，当整个页面被执行时，我们需要通过运行另一个脚本来初始化 GivWenZen。你通过将其添加到维基页面的顶部来实现这一点。
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We also need to initialize the classpath and add the corresponding imports
    for all scripts. Usually, this is done in one of the **SetUp** pages, which are
    executed before running every test script (like the `setUp()` method in a JUnit
    test), but for the sake of simplicity, we are adding the initialization to this
    same page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要初始化类路径并为所有脚本添加相应的导入。通常，这在一个 **SetUp** 页面中完成，该页面在运行每个测试脚本之前执行（就像 JUnit 测试中的
    `setUp()` 方法），但为了简单起见，我们将初始化添加到这个相同的页面：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You will need to change the last two path variables to match your `TemperatureConverter`
    project; you'll see why you need these later.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要更改最后两个路径变量以匹配你的 `TemperatureConverter` 项目；稍后你会明白为什么需要这些。
- en: 'If you run the tests at this point by clicking the **Test** button, you will
    receive the following message:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时你点击**测试**按钮运行测试，你会收到以下信息：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The second column in the table, for our test outline, holds the domain steps,
    hence, the exception `DomainStepNotFound`. You need a step class with an annotated
    method matching this pattern: "I''m using the TemperatureConverter".'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格的第二列中，我们的测试大纲保存了领域步骤，因此，出现了`DomainStepNotFound`异常。你需要一个步骤类，其中有一个带注解的方法与这个模式匹配："我正在使用TemperatureConverter"。
- en: 'Typical causes of this error are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这种错误的典型原因如下：
- en: '`StepClass` is missing: This is our error'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepClass`丢失了：这是我们的错误'
- en: '`StepClass` is missing the `@DomainSteps` annotation'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepClass`缺少了`@DomainSteps`注解'
- en: '`StepMethod` is missing the `@DomainStep` annotation'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepMethod`缺少了`@DomainStep`注解'
- en: The `StepMethod` annotation has a regular expression that does not match the
    current test step you have written
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepMethod`注解中有一个正则表达式，它与你当前编写的测试步骤不匹配'
- en: 'An example step class could be:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例步骤类可能是这样的：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The step class should be placed in the package or subpackage of `bdd.steps`,
    or you could alternatively define your own custom package. This package is going
    to live inside the `/core/test/` module of our application. If you noticed, above
    the **setUp** page, we added our application on the path, so this DomainStep can
    be found after we build the project.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤类应该放在`bdd.steps`包或其子包中，或者你也可以定义自己的自定义包。这个包将位于我们应用程序的`/core/test/`模块中。如果你注意到了，在**setUp**页面上方，我们将我们的应用程序添加到了路径上，因此在我们构建项目后，可以找到这个DomainStep。
- en: 'In order to use the `@DomainStep(s)` annotation in our project, we need the
    GivWenZen JAR on our project test path. This can be done by copying the `givwenzen.jar`
    file into `/core/libs,` or even better with Gradle by adding it as a remote dependency
    to `build.gradle`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的项目中使用`@DomainStep(s)`注解，我们需要在项目的测试路径上放置GivWenZen JAR。这可以通过将`givwenzen.jar`文件复制到`/core/libs`中来实现，或者更好的方式是在`build.gradle`中将其作为远程依赖添加：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You'll notice that this `testCompile` dependency isn't the official GivWenZen
    release but someone has forked (copied) the code, and uploaded it. This doesn't
    matter to us for now because we are only using the two annotation classes (which
    I know are identical in this version), but it's worth keeping in mind and reverting
    to the original GivWenZen library if it is ever released as a remote dependency.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，这个`testCompile`依赖并不是官方的GivWenZen发布版本，而是有人复制了代码并上传了。目前这对我们来说没有影响，因为我们只使用了两个注解类（我知道在这个版本中它们是相同的），但值得记住，如果它作为远程依赖发布，我们应该恢复到原始的GivWenZen库。
- en: 'Following the small outline example, in our particular case the implementation
    of `StepClass` will be:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 根据小轮廓示例，在我们特定的案例中，`StepClass`的实现将是：
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, we are using a subpackage of `bdd.steps` because, by default,
    this is the package hierarchy GivWenZen searches for step's implementations. Otherwise,
    extra configuration is needed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了`bdd.steps`的子包，因为默认情况下，GivWenZen会在这个包层次结构中搜索步骤的实现。否则，需要额外的配置。
- en: Classes implementing steps should be annotated by `@DomainSteps,` and each of
    the step's methods annotated by `@DomainStep`. Each step method annotation receives
    a String regular expression as a parameter. This regular expression is used by
    GivWenZen to match the steps.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 实现步骤的类应该用`@DomainSteps`注解，每个步骤的方法用`@DomainStep`注解。每个步骤方法注解接收一个字符串正则表达式作为参数。GivWenZen使用这个正则表达式来匹配步骤。
- en: 'For example, in our scenario, we have defined this step:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的场景中，我们定义了这一步骤：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our annotation is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的注解如下：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will match, and the regular expression group values defined by `ANY_TEMPERATURE`
    and `UNIT_NAME` will be obtained and provided to the method as its argument''s
    `value` and `unitName`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将匹配，并且由`ANY_TEMPERATURE`和`UNIT_NAME`定义的正则表达式组值将被获取，并提供给方法的参数`value`和`unitName`：
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Recall that in a previous chapter I recommended reviewing regular expressions
    because they could be useful. Well this is probably one of these places where
    they are extremely useful. It allows for a flexible use of the English language.
    Here `I(?: a|''m)` was used to allow **I am** and **I''m**. In `ANY_TEMPERATURE,`
    we are matching every possible temperature value with the optional sign and decimal
    point. Consequently `UNIT_NAME` matches the unit name; that is, Celsius or Fahrenheit.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '请记住，在上一章中我建议复习正则表达式，因为它们可能很有用。好吧，这可能是它们极其有用的地方之一。它允许灵活使用英语。在这里使用了 `I(?: a|''m)`
    来允许 **I am** 和 **I''m**。在 `ANY_TEMPERATURE,` 中，我们匹配每个可能的温度值，包括可选的符号和小数点。因此 `UNIT_NAME`
    匹配单位名称；即摄氏度或华氏度。'
- en: These regular expressions are used in the construction of the `@DomainStep`
    annotation parameters. Groups delimited by `()` parenthesis in these regular expressions
    are converted into method parameters. This is how `setField()` obtains its parameters.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些正则表达式用于构建 `@DomainStep` 注解参数。这些正则表达式中由 `()` 括号分隔的组被转换为方法参数。这就是 `setField()`
    获取其参数的方式。
- en: Then we have a `verifyConversion()` method that returns true or false depending
    on whether the actual conversion matches the expected one, within a difference
    of two decimal places.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有一个 `verifyConversion()` 方法，根据实际转换与预期转换是否在两位小数的差异内匹配，返回 true 或 false。
- en: Finally, we have some methods that actually invoke the conversion methods in
    the `TemperatureConverter` class.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一些实际调用 `TemperatureConverter` 类中的转换方法的方法。
- en: 'On running the tests once again, all the tests pass. We can confirm this by
    analyzing the output message:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行测试后，所有测试都通过了。我们可以通过分析输出消息来确认这一点：
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We should not only create scenarios for normal situations, but cover exceptional
    conditions as well. Say, in plain text, our scenario is something like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅应该为正常情况创建场景，还应该涵盖异常条件。比如，用纯文本来说，我们的场景是这样的：
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Given I''m using the Temperature Converter, when I enter `-274` into the Celsius
    field, then I obtain an **Invalid temperature: -274.00C below absolute zero**
    exception.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我正在使用温度转换器，当我将 `-274` 输入到摄氏度字段中时，我会得到一个 **无效温度：-274.00C 低于绝对零度** 的异常。
- en: 'It can be translated into a GivWenZen table like the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以转换成如下所示的 GivWenZen 表：
- en: '[PRE21]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By adding a single supporting step method, we will be able to run it. The step
    method can be implemented like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加一个单一的支持步骤方法，我们将能够运行它。步骤方法可以这样实现：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method obtains the exception message, temperature value, and unit from
    the regular expression. Then this is compared against the actual exception message
    to verify that it matches.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法从正则表达式中获取异常消息、温度值和单位。然后将其与实际的异常消息进行比较，以验证是否匹配。
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget when you add Java code to your `StepClass` annotation you will
    need to compile the class again so that FitNesse can use the new code. One way
    to do this is just to run your Java tests from the IDE, forcing a recompile.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将 Java 代码添加到 `StepClass` 注解中时，不要忘记你需要重新编译该类，以便 FitNesse 可以使用新代码。这样做的一种方式是从
    IDE 中运行你的 Java 测试，强制重新编译。
- en: 'Additionally, we can create other scenarios that, in this situation, will be
    supported by the existing step''s methods. These scenarios could be:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以创建其他场景，在这种情况下，将由现有的步骤方法支持。这些场景可能是：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Because GivWenZen is based on FitNesse, we are free to combine both approaches
    and include the tests from our previous session, in the same suite. Doing so,
    we can run the entire suite from the suite page, obtaining the overall results
    as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 GivWenZen 基于 FitNesse，我们可以自由地结合这两种方法，并将之前会话中的测试包含在同一个套件中。这样做，我们可以从套件页面运行整个套件，获得以下总体结果：
- en: '![Creating the test scenario](img/00040.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试场景](img/00040.jpeg)'
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered Behavior-driven Development as an evolution of
    Test-driven Development, which we examined in previous chapters.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了行为驱动开发作为测试驱动开发（我们在前几章中检查过）的演变。
- en: We discussed the driving forces behind Behavior-driven Development. We analyzed
    the concepts serving as the foundations, explored the Given-When-Then vocabulary
    idea, and introduced FitNesse and Slim as helpful tools in deploying tests.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了行为驱动开发背后的推动力。我们分析了作为基础的概念，探索了 Given-When-Then 词汇表的想法，并介绍了 FitNesse 和 Slim
    作为部署测试的有用工具。
- en: We presented GivWenZen, a tool based on FitNesse that gives us the ability to
    create near-English, prose-style scenarios, and test them.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了 GivWenZen，这是一个基于 FitNesse 的工具，它使我们能够创建近乎英文的、散文式场景，并对它们进行测试。
- en: We introduced these techniques and tools to our sample Android project. However,
    we are still limited to test subjects that are testable under the JVM, avoiding
    the use of Android-specific classes and the user interface. We will be exploring
    some alternatives to overcome this limitation in [Chapter 9](part0079_split_000.html#page
    "Chapter 9. Alternative Testing Tactics"), *Alternative Testing Tactics*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些技术和工具引入到了我们的示例 Android 项目中。然而，我们的测试对象仍然局限于可以在 JVM 下测试的，避免使用特定于 Android
    的类和用户界面。我们将在[第9章](part0079_split_000.html#page "第9章. 替代测试策略")，*替代测试策略*中探索一些方法来克服这一限制。
- en: The next chapter deals with a different aspect of testing, concentrating on
    performance and profiling, which is a natural step to follow after we have our
    application behaving correctly, and according to our test specifications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论测试的另一面，专注于性能和剖析，这在我们应用程序按预期运行并符合我们的测试规范后，是一个自然而然的步骤。
