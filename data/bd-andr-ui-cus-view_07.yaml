- en: Performance Considerations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能考虑
- en: In the previous chapters, we have been talking briefly about performance and,
    for example, avoiding doing some operations using the `onDraw()` method. But we
    haven't covered in detail why you should follow these recommendations and what
    the real impact of not following these best practices is to the custom view and
    to the application using it. Many of the things we will explain here might seem
    common sense, and indeed they should be, but sometimes we might not think about
    them, or we may not know or be aware of the real impact that it might have on
    the application, both from a performance point of view and regarding battery consumption.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们简要地讨论了性能问题，例如避免使用`onDraw()`方法进行某些操作。但我们还没有详细解释为什么你应该遵循这些建议，以及不遵循这些最佳实践对自定义视图和使用它的应用程序的真正影响。我们在这里解释的许多事情可能看起来是常识，实际上也应该是，但有时我们可能不会想到它们，或者我们可能不知道或不了解它们对应用程序可能产生的真实影响，无论是从性能角度还是关于电池消耗。
- en: 'In this chapter, we will address these points and we will look at the following
    topics in more detail:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论这些问题，并更详细地了解以下主题：
- en: Recommendations and best practices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议和最佳实践
- en: The impact on the app when performance is not taken into account
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当不考虑性能时对应用的影响
- en: Code optimizations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码优化
- en: Performance impact and recommendations
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能影响和推荐
- en: As we've just said, unless we have suffered it or we are supporting a low-end
    or really old device, we might not even be aware of what the impact is of not
    following the performance recommendations or best practices. If we are using a
    high-end device to test what are we currently developing, we might not see how
    it performs on a low-end device, and most probably there will be more downloads
    or more users using it on medium or low-end devices. It is almost the same as
    when we develop a network-connected piece of software with a nice and reliable
    Wi-Fi connection, or have an unlimited 4G network. The experience might not be
    the same for those with a limited or metered connection, and for especially those
    still on a 2G network.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，除非我们经历过性能问题，或者我们在支持低端或非常旧的设备，否则我们可能甚至不知道不遵循性能建议或最佳实践的影响是什么。如果我们使用高端设备来测试当前开发的内容，我们可能无法看到它在低端设备上的表现，而且很可能会有更多用户在中低端设备上使用它。这几乎就像是我们用良好可靠的Wi-Fi连接开发网络连接软件，或者拥有无限的4G网络。对于网络受限或按量计费的用户，尤其是仍在使用2G网络的用户，他们的体验可能完全不同。
- en: It is important, in both cases, to take all our target users into account and
    test under several scenarios, with different devices and hardware.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，重要的是要考虑我们的所有目标用户，并在多种场景下进行测试，使用不同的设备和硬件。
- en: The impact of not following the best practices
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不遵循最佳实践的影响
- en: One of the recommendations we have been giving during these last chapters is
    to avoid allocating objects in the `onDraw()` method. But what will happen if
    we start allocating objects?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近几章中，我们一直在推荐避免在`onDraw()`方法中分配对象。但如果我们开始分配对象，会发生什么呢？
- en: 'Let''s create a simple custom view and allocate an object on purpose so we
    can evaluate the result when running the app:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的自定义视图，并故意分配一个对象，以便我们可以在运行应用时评估结果：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this quick example, we are allocating several things within the `onDraw()`
    method, from the `Paint` objects, to the `Rect` objects, to creating a new `bitmap`,
    which allocates internal memory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个快速示例中，我们在`onDraw()`方法中分配了多件事情，从`Paint`对象到`Rect`对象，再到创建一个新的`bitmap`，这会分配内部内存。
- en: 'If we run this code, we''ll get a rotating white rectangle in the middle of
    the screen, as in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这段代码，我们会在屏幕中央得到一个旋转的白色的矩形，如下面的截图所示：
- en: '![](img/cfb6fc4b-3ea8-44da-a6a3-1fb33a15e297.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/cfb6fc4b-3ea8-44da-a6a3-1fb33a15e297.png)'
- en: 'In addition, we will not only get a similar view. If we check the logcat logs
    when our application is running, we might get lines similar to these:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们不仅会得到一个类似的视图。如果我们在应用程序运行时检查logcat日志，我们可能会得到类似以下的行：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We might even get them several times during the application execution. This
    is the Android run-time's (ART's) garbage collector kicking in to clean unused
    objects to free up some memory. As we are continuously creating new objects, the
    VM triggers the garbage collector to free up some memory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序执行期间，我们可能会多次获取它们。这是Android运行时（ART）的垃圾收集器介入，清理未使用的对象以释放内存。由于我们不断创建新对象，虚拟机将触发垃圾收集器来释放一些内存。
- en: 'More information about garbage collection can be found at the following URL:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于垃圾回收的更多信息可以在以下网址找到：
- en: '[https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))。'
- en: 'Luckily, Android Studio already shows us, quite clearly, that we are doing
    something wrong inside our `onDraw()` method:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Android Studio 已经非常明确地告诉我们，在我们的 `onDraw()` 方法内部我们正在做错误的事情：
- en: '![](img/086755ce-57d4-42e6-8888-aa6a6a597b59.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/086755ce-57d4-42e6-8888-aa6a6a597b59.png)'
- en: It also shows us what it might cause if we don't follow this recommendation.
    In this case, if the garbage collector kicks in, in the middle of a scroll or
    drawing, we might get some stuttering or, simply, a smooth animation might be
    seen as jumpy or not as smooth as it should be.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它还告诉我们，如果不遵循这个建议，可能会造成什么后果。在这种情况下，如果在滚动或绘制过程中垃圾回收器启动，我们可能会遇到一些卡顿，或者一个平滑的动画可能看起来会跳跃或不那么流畅。
- en: Check the full source code of this example, which shouldn't be followed, in
    the `Example30-Performance` folder in the GitHub repository. Please use it as
    an example of what should be avoided.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请在 GitHub 存储库的 `Example30-Performance` 文件夹中查看这个示例的完整源代码，不建议遵循它。请将其作为一个应该避免的示例。
- en: Code optimization
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码优化
- en: 'Allocating objects is not the only thing we should take into consideration
    when thinking about performance in our custom view. The amount of calculations,
    the type of calculations, the amount of primitives we are drawing, the amount
    of overdrawing, and the list of things we should check, is pretty big. In the
    end, most things are common sense: just don''t recalculate values that we already
    have and maximize parts of the code that can be skipped if there are no changes
    required or, basically, try to reuse as much as possible what has been calculated
    on previous frames.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑自定义视图中的性能时，分配对象不是我们应该考虑的唯一事情。我们应该考虑的计算量、计算类型、我们正在绘制的原始数量、过度绘制的数量以及我们应该检查的事情列表非常庞大。最终，大多数事情都是常识：只是不要重新计算我们已经拥有的值，并最大化如果不需要更改就可以跳过的代码部分，或者基本上，尽量重复使用尽可能多的之前帧已经计算过的内容。
- en: Let's compare two methods that convert YUV pixel data to RGB. It is not the
    most typical thing you'll have to do in a custom view, but it's perfect to show
    how performance can be impacted by reusing as much as we can and not recalculating
    what doesn't have to be recalculated.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较两种将 YUV 像素数据转换为 RGB 的方法。这并不是自定义视图中你必须做的最典型的事情，但它完美地展示了通过尽可能多地重复使用和不重新计算不需要的内容，性能会受到怎样的影响。
- en: 'When getting frames from the camera viewfinder in Android, they are usually
    in YUV format instead of RGB. More information about YUV can be found at the following
    URL:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中从摄像头取景器获取帧时，它们通常是 YUV 格式而不是 RGB。关于 YUV 的更多信息可以在以下网址找到：
- en: '[https://en.wikipedia.org/wiki/YUV](https://en.wikipedia.org/wiki/YUV).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[YUV](https://en.wikipedia.org/wiki/YUV)的相关信息可以在以下网址找到。'
- en: 'We will start with a straightforward code and we will optimize it step by step
    to evaluate the impact of all the optimizations:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从直接的代码开始，并逐步对其进行优化，以评估所有优化的影响：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This version is based on the YUV-to-RGB converter, found at the following URL:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本基于以下网址找到的 YUV 到 RGB 转换器：
- en: '[https://searchcode.com/codesearch/view/2393/](https://searchcode.com/codesearch/view/2393/)
    and'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://searchcode.com/codesearch/view/2393/](https://searchcode.com/codesearch/view/2393/)
    和'
- en: '[http://sourceforge.jp/projects/nyartoolkit-and/](http://sourceforge.jp/projects/nyartoolkit-and/).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://sourceforge.jp/projects/nyartoolkit-and/](http://sourceforge.jp/projects/nyartoolkit-and/)。'
- en: We've used the floating point version here so that we can see, later on, the
    differences with the fixed point version.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了浮点数版本，以便稍后我们可以看到与固定点版本的差异。
- en: 'Now, let''s create a small custom view that will transform, in every frame,
    a YUV image to an RGB, set it into a `Bitmap`, and draw it on the screen:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个小的自定义视图，它将在每一帧中将 YUV 图像转换为 RGB，将其设置为 `Bitmap`，并在屏幕上绘制：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s also add a code to check the number of frames per second that our small
    code will manage to draw. We will use this measurement to check the performance
    improvements on the optimizations we''ll be doing:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也添加一段代码来检查我们的小代码能管理的每秒帧数。我们将使用这个测量来检查我们将要进行的优化对性能的提升：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we run this code as it is, on my device it measures 1.20 frames per second.
    The demo image used is a *1,000x1,500* image. Let's see what we can do to improve
    it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们就这样在我的设备上运行这段代码，它测量到的每秒帧数是1.20。使用的演示图片是*1,000x1,500*的图像。让我们看看我们能做些什么来改进它。
- en: 'To start, we can remove some unnecessary calculations:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以移除一些不必要的计算：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we've removed the two calculations of the pixel position and we are doing
    it by just a single increment at each pixel. In the previous case, it was doing
    the calculation `i * width + j` both for reading the `yuvData` and writing to
    `rgbData`. If we check the frames per second counter after this change, we'll
    notice it has slightly increased to 1.22\. Not a huge improvement, but it's a
    start.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们移除了两个像素位置的计算，而是通过每个像素的单个增量来完成。在之前的情况下，无论是读取`yuvData`还是写入`rgbData`，都会进行`i
    * width + j`的计算。如果我们检查这个更改后的每秒帧数计数器，我们会注意到它略微增加到了1.22。虽然提升不大，但这是一个开始。
- en: Now, we can see in the original implementation, the one used in the Android
    SDK, that the floating point operations are commented out in favor of fixed point
    operations. Floating point operations are usually costlier than plain integer
    operations. The performance of floating point operations has been improving quite
    a lot these last years with all the new hardware, but integer operations are still
    faster. We will not be able to get the same precision as with floating point operations,
    but we can get quite a good approximation by using fixed-point arithmetic.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到在原始实现中，即Android SDK中使用的方法，浮点运算被注释掉了，取而代之的是定点运算。浮点运算通常比整数运算成本更高。尽管这些年随着新硬件的出现，浮点运算的性能有了很大的提升，但整数运算仍然更快。我们无法获得与浮点运算相同的精度，但通过使用定点运算，我们可以得到相当好的近似值。
- en: 'More information about fixed-point arithmetic can be found at the following
    URL:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关于定点运算的更多信息可以在以下URL找到：
- en: '[https://en.wikipedia.org/wiki/Fixed-point_arithmetic](https://en.wikipedia.org/wiki/Fixed-point_arithmetic).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[定点运算](https://en.wikipedia.org/wiki/Fixed-point_arithmetic)的相关信息可以在以下链接找到。'
- en: When using fixed-point arithmetic, we have to define the number of bits of an
    integer value that will be used as the fixed point precision. The remaining bits
    will be used to actually store the integer value. Obviously, we'll have more precision
    as more bits we use to store it but, on the other hand, we'll have less bits to
    store the integer value. The idea is to multiply all constants and operations
    by a power of two number and, after doing all the operations, divide the result
    by the same number. As it's a power of two, we can easily perform a fast bitwise
    shift right operation instead of a costly divide.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用定点运算时，我们必须定义一个整数值的位数，这将用作定点精度。剩余的位数将用于实际存储整数值。显然，我们用于存储的位数越多，精度就越高，但另一方面，用于存储整数值的位数就越少。想法是将所有常数和操作乘以2的幂次数，在完成所有操作后，将结果除以相同的数。由于它是2的幂，我们可以轻松地进行快速的位运算右移操作，而不是昂贵的除法。
- en: For example, if we used a fixed point precision of 10 bits, we have to multiply
    all values by *1,024* or shift them 10 bits to the left and, at the end of all
    calculations, perform a right shift of 10 bits.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们使用10位的定点精度，我们必须将所有值乘以*1,024*或左移10位，在所有计算结束时，执行10位的右移操作。
- en: 'Let''s apply this to these operations:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这些操作应用到这里：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We are transforming them into the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将它们转换为以下形式：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can check that *1.164 * 1,024* is `1192` rounded up, and the same applies
    to all the other constants-we rounded the numbers to get the most valid approximation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查*1.164 * 1,024* 是向上取整的`1192`，其他所有常数也同样处理——我们四舍五入数字以获得最有效的近似值。
- en: 'For the same reason, we have to change the following checks:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 出于同样的原因，我们必须更改以下检查：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have to change the check with *255*255* multiplied by *1,024* of shifted
    `10` positions to the left:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将带有*255*255*乘以*1,024*的检查，左移`10`位：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the division by *1,024* or right shift by `10` before using the values
    to output the color:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出颜色之前，先除以*1,024*或右移`10`位使用这些值：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Implementing these changes, even if we have added some more operations compared
    to the floating point version, improves our frames per second counter to *1.55*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实施这些更改后，即使与浮点版本相比我们增加了一些操作，但每秒帧数计数器提高到了*1.55*。
- en: 'Another small optimization we can do is to avoid calculating the `luminance`
    factor of every component, as it''s the same in each case. So let''s replace this
    code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个小优化是我们可以避免计算每个分量的`亮度`因子，因为在每种情况下它都是相同的。所以让我们替换这段代码：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With this one, which only calculates the `luminance` once:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个只计算一次`亮度`的版本：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This should be optimized by most compilers; I'm not sure what the new compilers
    D8 and R8 will do, but with the current Java/Android tooling, it isn't optimized.
    By making this small change, we increase the frames per second counter to *1.59*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会被大多数编译器优化；我不确定新的编译器D8和R8会做什么，但使用当前的Java/Android工具链，它并没有被优化。通过这个小小的改动，我们将每秒帧数计数器提升到了*1.59*。
- en: 'The way this YUV file format works is that a pair of `U` and `V` chroma values
    are shared for two `luminance` values, so let''s try to use this to our advantage
    to compute two pixels at the same time, avoiding additional checks and code overhead:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这种YUV文件格式的工作方式是，一对`U`和`V`色度值被两个`亮度`值共享，所以让我们尝试利用这一点同时计算两个像素，避免额外的检查和代码开销：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are now just calculating the chroma components once, and we've removed the
    check to get new `U` and `V` components only every two pixels. Doing these changes
    increased our frames per second counter to *1.77*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只计算一次色度分量，并且移除了检查，只在每两个像素获取新的`U`和`V`分量。进行这些更改后，我们的每秒帧数计数器提升到了*1.77*。
- en: 'As Java bytes range from -128 to 127, we''ve added some checks for negative
    numbers, but instead of doing these checks, we can do a quick bitwise AND operation
    (`&`):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java字节范围从-128到127，我们添加了一些对负数的检查，但我们可以通过快速进行按位与操作（`&`）来代替这些检查：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'That small change slightly increased our frames per second counter to *1.83*.
    But we can still optimize it a bit more. We have used `10` bits of fixed-point
    arithmetic precision, but, in this particular case, we might have enough using
    `8` bits of precision. Changing from `10` bits of precision to only `8` will save
    us one operation:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小小的改动将我们的每秒帧数计数器略微提升到了*1.83*。但我们还可以进一步优化。我们使用了`10`位固定小数点精度的算术，但在这个特定情况下，我们可能使用`8`位精度就足够了。从`10`位精度改为仅`8`位将节省我们一个操作步骤：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We've updated all the constants to be multiplied by `256` instead of *1,024*,
    and we've updated the checks. The constant `65280` that appears on the code is
    `255` multiplied by `256`. On the part of the code that we are shifting the values
    to in order to get the actual color components, we have to shift right the red
    component by `8` and shift it left by `16` to adjust it to the ARGB position in
    the color component, so we can just do one single shift operation of `8` bits
    left. It's even better on the green coordinate-we have to shift it right by `8`
    and shift it left by `8`, so we can leave it as it is and not shift it at all.
    We still have to shift right the blue component by `8` positions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有常量更新为乘以`256`而不是*1,024*，并更新了检查。代码中出现的常数`65280`是`255`乘以`256`。在我们将值位移以获取实际颜色分量的代码部分，我们必须将红色分量右移`8`位，然后左移`16`位以调整到ARGB在颜色分量中的位置，这样我们只需进行一次`8`位左移的单一位移操作。在绿色坐标上甚至更好——我们需要将其右移`8`位然后左移`8`位，因此我们可以保持原样，不进行任何位移。我们仍然需要将蓝色分量右移`8`位。
- en: We also had to update the masks to check that every component stays between
    its 0-255 range, but now the masks are shifted by the right bit position `s0x00ff0000`,
    `0x0000ff00`, and `0x000000ff`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须更新掩码，以确保每个分量保持在0-255的范围内，但现在掩码已经右移到了正确的位位置`0x00ff0000`，`0x0000ff00`和`0x000000ff`。
- en: 'This change marginally improved our frames per second counter to *1.85*, but
    we can still go further. Let''s try to get rid of all the shifts, checks, and
    masks. We could do that by using some pre-calculated tables that we''ll calculate
    once at the creation of our custom view. Let''s create this function to pre-calculate
    everything we need:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个改变将我们的每秒帧数计数器略微提升到了*1.85*，但我们还可以做得更好。让我们尝试去掉所有的位移、检查和掩码操作。我们可以通过使用一些预先计算的表格来实现，这些表格在我们自定义视图创建时计算一次。让我们创建这个函数来预先计算我们需要的一切：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We are calculating the values for `luminance`, all chroma components, and finally
    the clipped, shifted, and masked values for everything. As `luminance` and some
    chromas might be negative, we've added a *+*`300` value to the `luminance` value,
    as it'll be added to all values, and then adapted the `clipValues` tables to take
    that `300` offset into account. Otherwise, we might try to index an array with
    a negative index, and that would make our application crash. Checking whether
    the index is negative before accessing the array will kill all the performance
    optimizations, as we are trying to get rid, as much as possible, of all operations
    and checks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在计算`luminance`（亮度）的所有色度分量以及最后所有内容的剪辑、移位和遮罩值。由于`luminance`和某些色度可能是负数，我们在`luminance`值中添加了*+*`300`，因为它将加到所有值上，然后调整`clipValues`表以考虑这个`300`的偏移量。否则，我们可能会尝试用负索引来索引数组，这将导致我们的应用程序崩溃。在访问数组之前检查索引是否为负将消除所有性能优化，因为我们尽可能想要摆脱所有操作和检查。
- en: 'Using these tables, our YUV-to-RGB converter code is reduced to the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些表格，我们的 YUV 到 RGB 转换器代码减少到以下内容：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With these changes, we get a *2.04* frames per second counter, or a *70%* increase
    of performance, compared with the original method. Anyway, this is only an example
    of how code can be optimized; if you really want to convert, in real-time, a YUV
    image to RGB, I suggest that you either check out a native C or C++ implementation
    or go for a GPU or render script approach.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这些更改后，我们获得了每秒*2.04*帧的速度计数，或者与原始方法相比性能提升了*70%*。无论如何，这只是一个代码如何优化的示例；如果你真的想要实时将
    YUV 图像转换为 RGB，我建议你检查一下本地 C 或 C++ 的实现，或者采用 GPU 或渲染脚本的方法。
- en: 'Finally, if we run this application, we will get a screen similar to the following
    screenshot. We are not scaling or applying any additional transformation to the
    image, as we just wanted to measure the amount of time that it takes to transform
    from a YUV image to an RGB image. Your screen image might differ depending on
    the screen size and your device:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们运行这个应用程序，我们将得到一个类似于以下截图的屏幕。我们没有对图像进行缩放或应用任何额外的转换，因为我们只想测量从 YUV 图像转换为
    RGB 图像所需的时间。你的屏幕图像可能会因屏幕大小和设备的不同而有所不同：
- en: '![](img/53a62ad7-ada2-4617-be51-6c276d395892.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53a62ad7-ada2-4617-be51-6c276d395892.png)'
- en: Check the whole example source code in the `Example31-Performance` folder in
    the GitHub repository.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 仓库的`Example31-Performance`文件夹中查看整个示例源代码。
- en: 'There are many other things to take into consideration when talking about performance.
    If you want to know more details about how Java code is translated into dexbyte
    code and executed in the Android VM, check out the following presentation:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论性能时，还有很多其他事情需要考虑。如果你想了解更多关于 Java 代码如何转换为 dex 字节码并在 Android VM 中执行的信息，请查看以下演示：
- en: '[https://www.slideshare.net/RaimonRls/the-bytecode-mumbojumbo](https://www.slideshare.net/RaimonRls/the-bytecode-mumbojumbo).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[字节码之谜](https://www.slideshare.net/RaimonRls/the-bytecode-mumbojumbo)。'
- en: Mocking up the preview window
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟预览窗口
- en: When previewing our custom views on Android Studio, there are some occasions
    when calculations can be very complex or, for example, we need some data initialized,
    but we can't do that while showing our custom view inside the preview window of
    Android Studio. We'll be able to do something about this by checking the is `InEditMode()`
    method.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Android Studio 中预览我们的自定义视图时，有时计算可能会非常复杂，或者例如我们需要初始化一些数据，但我们不能在 Android Studio
    的预览窗口中显示我们的自定义视图时这样做。通过检查 `isInEditMode()` 方法，我们将能够对此进行处理。
- en: This method will return true if we are inside an IDE or a development tool.
    Knowing this information, we could easily mock some of the data or simplify the
    rendering to just show a preview of what we want to draw.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处于 IDE 或开发工具内部，这个方法将返回 true。知道了这个信息，我们可以轻松地模拟一些数据，或者简化渲染，只显示我们想要绘制的内容的预览。
- en: 'For example, in the `Example07-BuilderPattern` folder in the GitHub repository,
    we are calling this method at the custom view creation to alter the color values
    used in the gradient, although we could actually call it during the `onDraw()`
    method as well, to alter the rendering of the view:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 GitHub 仓库中的`Example07-BuilderPattern`文件夹里，我们在自定义视图创建时调用这个方法来改变渐变中使用的颜色值，尽管实际上我们也可以在`onDraw()`方法中调用它，来改变视图的渲染效果：
- en: '![](img/caf6b140-52e3-494b-8ca1-e8a86b627326.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caf6b140-52e3-494b-8ca1-e8a86b627326.png)'
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen what the impact is of not following the performance
    recommendations and why there is a set of best practices and things we should
    avoid when implementing our own custom view. We have also seen how to improve
    or optimize a code for performance and how to tweak or customize a view to render
    a preview on the Android Studio IDE preview window.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了不遵循性能建议的影响，以及在我们实现自定义视图时为何有一套最佳实践和应避免的事项。我们还学习了如何改进或优化代码以提高性能，以及如何调整或自定义视图以在
    Android Studio IDE 预览窗口中渲染预览。
- en: As we will see in the next chapter, whether our custom view is used by other
    people or even by ourselves shouldn't make a difference. It should not make the
    application using it crash or misbehave because of it. Like including a third-party
    library, it should never crash our application, as otherwise, we will most probably
    stop using it and replace it with another library.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在下一章看到的，无论我们的自定义视图是被其他人使用还是被我们自己使用，都不应该有任何区别。它不应该因为自身的问题导致使用它的应用程序崩溃或行为异常。就像包含第三方库一样，它绝不应该让我们的应用程序崩溃，否则，我们很可能会停止使用它并用另一个库来替代。
- en: So, in the next chapter, we will not only see how to apply these recommendations,
    but also how to make our custom view reusable with many applications, and how
    to share it or open source it so it can be widely used within the Android community.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在下一章中，我们不仅将学习如何应用这些建议，还将学习如何使我们的自定义视图在多个应用中可复用，以及如何分享或开源它，以便在 Android 社区内广泛使用。
