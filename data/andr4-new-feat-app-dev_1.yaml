- en: Chapter 1. Action Bar for All
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 适用于所有人的操作栏
- en: '**Action bar** API was firstly introduced with Android 3.0\. With Android Ice
    Cream Sandwich, action bar supports small screen sizes. This chapter shows how
    to use and configure the action bar.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作栏** API最初是在Android 3.0中引入的。随着Android冰激凌三明治的发布，操作栏支持小屏幕尺寸。本章展示了如何使用和配置操作栏。'
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Action bar types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作栏类型
- en: Adding an action bar
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加操作栏
- en: Adding an ActionProvider and ShareActionProvider
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加ActionProvider和ShareActionProvider
- en: Adding an action view
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加操作视图
- en: Using action bar for navigation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用操作栏进行导航
- en: Action bar
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作栏
- en: 'Action bar is a user interface element located on top of the user''s device
    screen. It provides actions and navigation capabilities to the user. Action bar
    has been available since API Level 11 (Android 3.0 Honeycomb) and after Ice Cream
    Sandwich was released, it supports small screen devices too. A sample Action Bar
    with tabs is shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 操作栏是位于用户设备屏幕顶部的用户界面元素。它为用户提供操作和导航功能。操作栏自API级别11（Android 3.0 Honeycomb）起提供，冰激凌三明治发布后，也支持小屏幕设备。以下截图显示了一个带有标签的操作栏示例：
- en: '![Action bar](img/9526_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![操作栏](img/9526_01_01.jpg)'
- en: 'As it can be seen in the preceding screenshot, on the left of the bar there
    is an application logo and title, and then come the tabs for navigation. Lastly,
    the action buttons are placed after the tabs. The action buttons that do not fit
    to screen are displayed as an overflow menu with three dots on the right of the
    bar. In the previous screenshot, the action bar is displayed on a large screen
    device. However, in small screen devices, the Action Bar is displayed as a stack
    of bars as seen in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，在栏的左侧有一个应用程序图标和标题，然后是导航标签。最后，在标签之后放置操作按钮。那些不适合屏幕显示的操作按钮会以三个点的溢出菜单形式显示在栏的右侧。在前面的截图中，操作栏显示在大屏幕设备上。然而，在小屏幕设备上，操作栏会显示为堆叠的栏，如下截图所示：
- en: '![Action bar](img/9526_01_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![操作栏](img/9526_01_02.jpg)'
- en: As it can be seen in the preceding screenshot, there is not enough space to
    display all action bar items and the action bar is displayed with two bars on
    top of the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，可以看到没有足够的空间显示所有操作栏项目，操作栏以屏幕顶部的双栏形式显示。
- en: 'Another type of action bar is the **split** action bar. In this type of action
    bar, action buttons are displayed in a bar at the bottom of the screen in narrow
    screens as shown in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的操作栏是**分割**操作栏。在这种类型的操作栏中，在窄屏幕上，操作按钮显示在屏幕底部的栏中，如下截图所示：
- en: '![Action bar](img/9526_01_03.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![操作栏](img/9526_01_03.jpg)'
- en: Adding an action bar
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加操作栏
- en: After Ice Cream Sandwich, Android doesn't require the menu button to reach the
    options menu. The best practice is to use action bar instead of the menu button.
    It is very easy to migrate from the options menu to the action bar. Now we are
    going to create a menu and then migrate that menu to the action bar.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 冰激凌三明治之后，Android不再需要使用菜单按钮来访问选项菜单。最佳实践是使用操作栏而不是菜单按钮。从选项菜单迁移到操作栏非常容易。现在我们将创建一个菜单，然后将该菜单迁移到操作栏。
- en: 'Firstly, create an Android project and then add a menu that contains `Settings`
    and `About` as menu items. The resulting menu XML file should look like the following
    code block:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个Android项目，然后添加一个包含`设置`和`关于`作为菜单项的菜单。生成的菜单XML文件应如下代码块所示：
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您的账户下载您购买的所有Packt图书的示例代码文件，网址为[http://www.PacktPub.com](http://www.PacktPub.com)。如果您在别处购买了这本书，可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)注册，我们会直接将文件通过电子邮件发送给您。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The layout XML for this sample is a `LinearLayout` layout with a `TextView`
    component in it as shown in the following code block:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的布局XML是一个`LinearLayout`布局，其中包含一个`TextView`组件，如下代码块所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Implement the `onCreateOptionsMenu` and `onOptionsItemSelected` methods as
    shown in the following code block, in order to show the menu items:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`onCreateOptionsMenu`和`onOptionsItemSelected`方法，如下代码块所示，以显示菜单项：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In order to display the action bar, the Android applications should target
    a minimum of API Level 11 in the `AndroidManifest.xml` file as shown in the following
    code block:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示操作栏，Android应用程序应该在`AndroidManifest.xml`文件中至少针对API级别11，如下面的代码块所示：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With this configuration, when the application runs on devices that have Android
    3.0 or greater, the action bar will be displayed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个配置，当应用程序在搭载Android 3.0或更高版本的设备上运行时，操作栏将会显示。
- en: 'When we run this application on an emulator with API Level 15, we will see
    the overflow menu on the right of the action bar and the options menu buttons
    will be displayed when the overflow menu is pressed. In order to show the options
    menu buttons on the action bar (not as an overflow menu), just add `android:showAsAction="ifRoom|withText"`
    in the `item` tags of the menu XML file. The resulting menu XML file should look
    like the following code block:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在API级别15的模拟器上运行这个应用程序时，我们将在操作栏的右侧看到溢出菜单，并且当按下溢出菜单时，选项菜单按钮将会显示。为了在操作栏上显示选项菜单按钮（而不是作为溢出菜单），只需在菜单XML文件的`item`标签内添加`android:showAsAction="ifRoom|withText"`。修改后的菜单XML文件应该如下面的代码块所示：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If there is not enough space (`ifRoom`) to display the options menu buttons,
    the buttons will be displayed as an overflow menu. In order to show the options
    menu buttons with icon only (if an icon is provided), `withText` should be removed.
    When you run the application it will look like the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有足够的空间（`ifRoom`）来显示选项菜单按钮，按钮将会作为溢出菜单显示。为了仅显示带有图标的选项菜单按钮（如果提供了图标），应该移除`withText`。当你运行应用程序时，它将如下面的截图所示：
- en: '![Adding an action bar](img/9526_01_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![添加操作栏](img/9526_01_05.jpg)'
- en: 'In some cases, you may not want to display the action bar. In order to remove
    the action bar, add `android:theme="@android:style/Theme.Holo.NoActionBar"` to
    the `activity` tag in the `AndroidManifest.xml` file. The resulting `AndroidManifest.xml`
    should look like the following code block:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能不希望显示操作栏。为了移除操作栏，你需要在`AndroidManifest.xml`文件中的`activity`标签内添加`android:theme="@android:style/Theme.Holo.NoActionBar"`。修改后的`AndroidManifest.xml`应该如下面的代码块所示：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In order to show the action bar as a *split* action bar, add the `android:uiOptions="splitActionBarWhenNarrow"`
    application in the `activity` tag in `AndroidManifest.xml`. The resulting `AndroidManifest.xml`
    should look like the following code block:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将操作栏显示为*分割*操作栏，在`AndroidManifest.xml`中的`activity`标签内添加`android:uiOptions="splitActionBarWhenNarrow"`属性。修改后的`AndroidManifest.xml`应该如下面的代码块所示：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you run this application on an emulator, the screen will look like the
    following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在这个模拟器上运行这个应用程序时，屏幕将如下面的截图所示：
- en: '![Adding an action bar](img/9526_01_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![添加操作栏](img/9526_01_06.jpg)'
- en: Adding an ActionProvider
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加ActionProvider
- en: 'In order to use a custom view instead of a simple button in action bar, the
    `ActionProvider` class could be the solution. **ActionProvider** has been available
    since API Level 14\. ActionProvider can generate a custom view in the action bar,
    can generate submenus, and can handle events of the views that it generates. In
    order to create an ActionProvider, we should extend the `ActionProvider` class.
    The following code shows a sample class that extends the `ActionProvider` class
    and displays a custom layout instead of a simple button in action bar:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在操作栏中使用自定义视图而不是简单的按钮，`ActionProvider`类可能是一个解决方案。**ActionProvider**从API级别14开始可用。ActionProvider可以在操作栏中生成自定义视图，可以生成子菜单，并且可以处理它生成的视图的事件。为了创建一个ActionProvider，我们应该继承`ActionProvider`类。下面的代码展示了一个扩展了`ActionProvider`类的示例类，并在操作栏中显示自定义布局而不是简单按钮：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We have to add a constructor and override the `onCreateActionView()` method.
    In the constructor, we assign `Context` to a variable because we are going to
    need it in further implementations. The `onCreateActionView()` method is the place
    where we generate a custom layout for the action bar menu item. `onPerformDefaultAction()`
    is the method which is called when the action bar menu item is in the overflow
    menu and is clicked from there. If the ActionProvider provides submenus, this
    method is never called. The layout XML for the custom layout used in the `onCreateActionView()`
    method is shown in the following code block:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须添加一个构造函数并重写 `onCreateActionView()` 方法。在构造函数中，我们将 `Context` 赋值给一个变量，因为我们在后续实现中需要它。`onCreateActionView()`
    方法是生成操作栏菜单项自定义布局的地方。`onPerformDefaultAction()` 是当操作栏菜单项在溢出菜单中并被点击时调用的方法。如果 ActionProvider
    提供子菜单，则永远不会调用此方法。在 `onCreateActionView()` 方法中使用的自定义布局的布局 XML 如下代码块所示：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see in the XML file, we added an `ImageButton` component and a `TextView`
    component to a `LinearLayout` layout. The `onClickListener()` event of `ImageButton`
    is implemented in the `onCreateActionView()` method of the `Chapter1ActionProvider`
    class. In this event, a `Toast` message is displayed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 XML 文件中所见，我们将一个 `ImageButton` 组件和一个 `TextView` 组件添加到了 `LinearLayout` 布局中。`ImageButton`
    的 `onClickListener()` 事件在 `Chapter1ActionProvider` 类的 `onCreateActionView()` 方法中实现。在此事件中，将显示一个
    `Toast` 消息。
- en: 'The `Activity` class that displays the action bar is shown the following code
    block:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 显示操作栏的 `Activity` 类如下代码块所示：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In order to display a custom layout for an action bar menu item, we have to
    assign an `ActionProvider` class in the `menu` XML file. We assign `Chapter1ActionProvider`
    which was implemented as in the earlier code as `ActionProvider`. The menu XML
    file in our example is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为操作栏菜单项显示自定义布局，我们必须在 `menu` XML 文件中分配一个 `ActionProvider` 类。我们分配了之前作为 `ActionProvider`
    实现的 `Chapter1ActionProvider`。我们示例中的 menu XML 文件如下所示：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you see in the `menu` XML file, we provided an `ActionProvider` class to
    the `settings` menu item. The last important thing is setting the minimum SDK
    version to API Level 14 in the `AndroidManifest.xml` file, because `ActionProvider`
    is a new feature released in API Level 14\. The `AndroidManifest.xml` file should
    look like the following code block:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 `menu` XML 文件中所见，我们为 `settings` 菜单项提供了一个 `ActionProvider` 类。最后重要的一步是在 `AndroidManifest.xml`
    文件中将最低 SDK 版本设置为 API 级别 14，因为 `ActionProvider` 是在 API 级别 14 中发布的新功能。`AndroidManifest.xml`
    文件应如下代码块所示：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you run this application in an emulator, a user interface component with
    an image button and a text view will be displayed in the action bar. A toast message
    will be displayed if you press the image button. The screen will look like the
    following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在模拟器中运行此应用程序时，操作栏中将显示一个带有图像按钮和文本视图的用户界面组件。如果你按下图像按钮，将显示一个吐司消息。屏幕将如下所示：
- en: '![Adding an ActionProvider](img/9526_01_07.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![添加 ActionProvider](img/9526_01_07.jpg)'
- en: Adding submenus to the ActionProvider
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 ActionProvider 添加子菜单
- en: 'It is possible to show submenus with ActionProvider. In order to add submenus,
    we should override the `onPrepareSubMenu(SubMenu subMenu)` and `hasSubMenu()`
    methods in the `Chapter1ActionProvider` class. The resulting code of the `Chapter1ActionProvider`
    class should look like the following code block:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 ActionProvider 显示子菜单。为了添加子菜单，我们应该在 `Chapter1ActionProvider` 类中重写 `onPrepareSubMenu(SubMenu
    subMenu)` 和 `hasSubMenu()` 方法。`Chapter1ActionProvider` 类的结果代码应如下代码块所示：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the `onPrepareSubMenu(SubMenu subMenu)` method, we dynamically created submenus
    and set their `onMenuItemClickListener` events. The `onPrepareSubMenu(SubMenu
    subMenu)` method is called if the `hasSubMenu()` method returns true, so we implemented
    it as returning true.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onPrepareSubMenu(SubMenu subMenu)` 方法中，我们动态创建了子菜单并设置了它们的 `onMenuItemClickListener`
    事件。如果 `hasSubMenu()` 方法返回 true，则会调用 `onPrepareSubMenu(SubMenu subMenu)` 方法，因此我们将其实现为返回
    true。
- en: 'It is also possible to create submenus from a `menu` XML file. If you want
    to create submenus from a `menu` XML file, `onPrepareSubMenu(SubMenu subMenu)`
    should look like the following code block:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过 `menu` XML 文件创建子菜单。如果你想从 `menu` XML 文件创建子菜单，`onPrepareSubMenu(SubMenu
    subMenu)` 应该如下代码块所示：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code shows how we could inflate an XML file to create the submenus using
    the `menu` XML file `menu2`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码展示了如何使用 `menu` XML 文件 `menu2` 将 XML 文件展开以创建子菜单。
- en: ShareActionProvider
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ShareActionProvider
- en: '**ShareActionProvider** provides a consistent way of sharing. It puts an action
    button on the action bar with a share icon. When you click that button, it lists
    the available applications for sharing. All you need is to declare `ShareActionProvider`
    in the `menu` item as shown in the following code block:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**ShareActionProvider**提供了一种一致的分享方式。它在操作栏上放置一个带有分享图标的动作按钮。当你点击该按钮时，它会列出可用于分享的应用程序。你需要在`menu`项中声明`ShareActionProvider`，如下面的代码块所示：'
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `Activity` class that uses `ShareActionProvider` should look like the following
    code block:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ShareActionProvider`的`Activity`类应该如下代码块所示：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see in the code, we get the `ShareActionProvider` attribute of the
    `menu` item in the `onCreateOptionsMenu(Menu menu)` method. Then we define the
    intent for sharing with the `setShareIntent` method of `ShareActionProvider`.
    `getShareIntent()` method creates an **intent** for sharing text. We use this
    method to define intent for the `ShareActionProvider` instance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，我们在`onCreateOptionsMenu(Menu menu)`方法中获取了`menu`项的`ShareActionProvider`属性。然后我们使用`ShareActionProvider`的`setShareIntent`方法定义分享的意图。`getShareIntent()`方法创建了一个用于分享文本的**意图**。我们使用此方法为`ShareActionProvider`实例定义意图。
- en: ShareActionProvider keeps the history of applications used for sharing in a
    file. The default file that ShareActionProvider uses is `ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME`.
    It is possible to change this file with the `setShareHistoryFileName` method.
    All you need is to pass an XML file name with the .xml extension to this method.
    ShareActionProvider uses this file to find the most frequently used application
    for sharing. Then it displays the most frequently used application near the share
    action button as a default sharing target.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`ShareActionProvider`会在一个文件中保存用于分享的应用程序历史记录。`ShareActionProvider`默认使用的文件是`ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME`。可以通过`setShareHistoryFileName`方法更改此文件。你需要向此方法传递一个带有.xml扩展名的XML文件名。`ShareActionProvider`使用这个文件来查找最常用于分享的应用程序。然后它将最常使用的应用程序显示在分享动作按钮附近，作为默认分享目标。'
- en: 'The screen of the application with ShareActionProvider looks like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ShareActionProvider`的应用程序界面如下所示：
- en: '![ShareActionProvider](img/9526_01_04.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![ShareActionProvider](img/9526_01_04.jpg)'
- en: 'Since the ShareActionProvider was introduced in API Level 14, we have to set
    the minimum SDK to 14 in the `AndroidManifest.xml` file as shown in the following
    code block:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`ShareActionProvider`是在API级别14引入的，因此我们必须在`AndroidManifest.xml`文件中将最小SDK设置为14，如下代码块所示：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding an action view
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个动作视图
- en: An **action view** is a user interface component that appears in the action
    bar instead of an action button. This view is collapsible, that is if it is configured
    as collapsible, meaning it expands when the action button is pressed. If it is
    not configured as collapsible, it is viewed expanded by default. In the following
    example, we added an action view and showed its events and how to handle these
    events.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**动作视图**是出现在操作栏中的用户界面组件，而不是操作按钮。这个视图是可以折叠的，即如果它被配置为可折叠，意味着在按下动作按钮时会展开。如果没有配置为可折叠，默认会展开显示。在以下示例中，我们添加了一个动作视图，并展示了其事件以及如何处理这些事件。'
- en: 'Firstly, add a layout for the action view that has three buttons with the text
    `Large`, `Medium`, and `Small` as shown in the following code block:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加一个动作视图的布局，其中包含三个带有文本`Large`、`Medium`和`Small`的按钮，如下代码块所示：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then we need to bind this action view to an action bar `menu` item. The XML
    code of `menu` is shown in the following code bock:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将此动作视图绑定到操作栏的`menu`项。`menu`的XML代码如下所示：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see in the `menu` XML code, we bind the action view to the `size`
    menu item by setting the `actionLayout` property. We also set the `showAsAction`
    property to `collapseActionView`. This way the action view is collapsible and
    it expands when the action button item is pressed. This option helps us to save
    space in the action bar. If this property is not set as `collapseActionView`,
    the action view is displayed as expanded by default.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在`menu`的XML代码中所见，我们通过设置`actionLayout`属性将动作视图绑定到`size`菜单项。我们还设置了`showAsAction`属性为`collapseActionView`。这样，动作视图就是可折叠的，当按下动作按钮项时展开。这个选项可以帮助我们在操作栏中节省空间。如果此属性未设置为`collapseActionView`，则动作视图默认会展开显示。
- en: 'The `Activity` class that handles action view events is shown in the following
    code block:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 处理动作视图事件的`Activity`类如下代码块所示：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you see in the `Chapter1ActionViewActivity`, you can set event listeners
    of the items in action view in the `onCreateOptionsMenu(Menu menu)` method. We
    set the `onClickListener` event of the buttons in the action view in the `onCreateOptionsMenu(Menu
    menu)` method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在`Chapter1ActionViewActivity`中看到的，你可以在`onCreateOptionsMenu(Menu menu)`方法中设置动作视图内各项目的事件监听器。我们在`onCreateOptionsMenu(Menu
    menu)`方法中设置了动作视图内按钮的`onClickListener`事件。
- en: It is possible to expand and collapse the action view programmatically with
    the `expandActionView()` and `col` `lapseActionView()` methods. As you can see
    in the `onClick(View v)` method of the `Chapter1ActionViewActivity` method, we
    manually collapsed the action view with the `collapseActionView()` method.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`expandActionView()`和`collapseActionView()`方法以编程方式展开和折叠动作视图。正如在`Chapter1ActionViewActivity`的`onClick(View
    v)`方法中看到的那样，我们使用`collapseActionView()`方法手动折叠了动作视图。
- en: You can do an action when the action view is expanded or collapsed with the
    `OnActionExpandListener` class. As you can see in the code, we defined the `Chapter1ActionListener`
    class that implements `OnActionExpandListener`. We override the `onMenuItemActionCollapse(MenuItem
    item)` and `onMenuItemActionExpand(MenuItem item)` methods of this class in order
    to show a `Toast` message. We passed `Activity` as a parameter to the constructor
    of `Chapter1ActionListener` because we need the `Activity` when showing the `Toast`
    message. We have to register the `setOnActionExpandListener()` method with the
    `OnActionExpandListener` class, in order to handle expand and collapse events.
    As you can see in the code, we registered this event in the `onCreateOptionsMenu(Menu
    menu)` method. We show a `Toast` message when the action view is collapsed and
    expanded.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当动作视图展开或折叠时，你可以使用`OnActionExpandListener`类执行一个动作。正如代码中看到的，我们定义了实现`OnActionExpandListener`的`Chapter1ActionListener`类。我们重写了这个类的`onMenuItemActionCollapse(MenuItem
    item)`和`onMenuItemActionExpand(MenuItem item)`方法，以便显示一个`Toast`消息。我们将`Activity`作为参数传递给`Chapter1ActionListener`的构造函数，因为显示`Toast`消息时需要`Activity`。为了处理展开和折叠事件，我们必须注册`setOnActionExpandListener()`方法与`OnActionExpandListener`类。正如代码中看到的，我们在`onCreateOptionsMenu(Menu
    menu)`方法中注册了这个事件。当动作视图折叠和展开时，我们会显示一个`Toast`消息。
- en: 'Since the action view is introduced in API Level 14, we have to set the minimum
    SDK property to 14 or greater in the `AndroidManifest.xml` file as shown in the
    following code block:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于动作视图是在API级别14中引入的，因此我们必须在`AndroidManifest.xml`文件中将最小SDK属性设置为14或更高，如下代码块所示：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When you run this application on an emulator it will look like the following
    screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在模拟器上运行这个应用时，它看起来会像下面的截图一样：
- en: '![Adding an action view](img/9526_01_08.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![添加动作视图](img/9526_01_08.jpg)'
- en: Using the action bar for navigation
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用操作栏进行导航
- en: Tabbed navigation could also be implemented with the `TabWidget` class. However,
    the action bar has some advantages. The action bar automatically adjusts itself
    according to the device screen size. For instance, if there is not enough space
    for tabs, it will display tabs in a stacked bar manner. Thus, it's better to use
    the action bar for tabbed navigation implementation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 标签导航也可以通过`TabWidget`类实现。然而，操作栏有一些优点。操作栏会根据设备屏幕大小自动调整自身。例如，如果没有足够的空间显示标签，它会以堆叠条的方式显示标签。因此，在实现标签导航时，最好使用操作栏。
- en: 'Now, we are going to see how to use the action bar for tabbed navigation. Firstly,
    create an Android project and add two fragments: one that displays `Fragment A`
    and an other that displays `Fragment B`. The layout XML for fragments should look
    like the following code block:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将要了解如何使用操作栏进行标签导航。首先，创建一个Android项目并添加两个片段：一个显示`Fragment A`，另一个显示`Fragment
    B`。片段的布局XML应该如下代码块所示：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The classes that extend the `Fragment` class for the two fragments should look
    like the following code block:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为这两个片段扩展`Fragment`类的类应该如下代码块所示：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In order to use action bar for tabbed navigation, we should firstly implement
    the `ActionBar.TabListener` class. The class that implements `TabListener` is
    going to be used in the `Activity` class in adding tabs. The `Activity` class
    with the `TabListener` implementation should look like the following code block:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用操作栏进行标签导航，我们首先应该实现`ActionBar.TabListener`类。实现`TabListener`的类将在`Activity`类中添加标签时使用。带有`TabListener`实现的`Activity`类应该如下代码块所示：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `Chapter1TabListener` class there are three methods that need to be
    overridden: `onTabReselected(Tab tab, FragmentTransaction ft)`, `onTabUnselected(Tab
    tab, FragmentTransaction ft)`, and `onTabSelected(Tab tab, FragmentTransaction
    ft)`. In the `onTabSelected(Tab tab, FragmentTransaction ft)` method, we initialize
    and add the fragment to our activity if it doesn''t exist. If it exists, we simply
    attach to it. When the tab is unselected, the `onTabUnselected(Tab tab, FragmentTransaction
    ft)` method is called. In this method, we detach the fragment because it shouldn''t
    be displayed. When the tab is reselected, the `onTabReselected(Tab tab, FragmentTransaction
    ft)` method is called. We do nothing in this method. In the `Chapter1ActionBarTabActivity`
    class, we create and set up the action bar. Layout for our activity has nothing
    but a `LinearLayout` layout and we use fragments for the user interface. Firstly,
    we set the navigation mode of action bar to `ActionBar.NAVIGATION_MODE_TABS` because
    we want tabbed navigation. Then we create two tabs, set their `TabListener` events,
    and add them to the `action bar` instance. When you run the application, you will
    see two tabs named **FIRST TAB** and **SECOND TAB**. The first tab will display
    **Fragment A** and the second tab will display **Fragment B**. The screen will
    look like the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Chapter1TabListener` 类中有三个需要重写的方法：`onTabReselected(Tab tab, FragmentTransaction
    ft)`、`onTabUnselected(Tab tab, FragmentTransaction ft)` 和 `onTabSelected(Tab tab,
    FragmentTransaction ft)`。在 `onTabSelected(Tab tab, FragmentTransaction ft)` 方法中，如果片段不存在，我们会初始化并将片段添加到我们的活动中。如果它已存在，我们只需连接到它。当标签被取消选择时，会调用
    `onTabUnselected(Tab tab, FragmentTransaction ft)` 方法。在这个方法中，我们分离片段，因为它不应该被显示。当标签被重新选择时，会调用
    `onTabReselected(Tab tab, FragmentTransaction ft)` 方法。在这个方法中我们不执行任何操作。在 `Chapter1ActionBarTabActivity`
    类中，我们创建并设置操作栏。我们活动的布局只有一个 `LinearLayout` 布局，我们使用片段作为用户界面。首先，我们将操作栏的导航模式设置为 `ActionBar.NAVIGATION_MODE_TABS`，因为我们需要标签导航。然后我们创建两个标签，设置它们的
    `TabListener` 事件，并将它们添加到 `操作栏` 实例中。当你运行应用程序时，你会看到两个标签，名为 **FIRST TAB** 和 **SECOND
    TAB**。第一个标签将显示 **Fragment A**，第二个标签将显示 **Fragment B**。屏幕将如下所示：
- en: '![Using the action bar for navigation](img/9526_01_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![使用操作栏进行导航](img/9526_01_09.jpg)'
- en: It is important not to forget to set the minimum SDK level to API Level 11 or
    higher, because the action bar was introduced in API Level 11.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是不要忘记将最低 SDK 级别设置为 API 级别 11 或更高，因为操作栏是在 API 级别 11 中引入的。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use the action bar as this approach is more
    consistent than using the options menu. You also saw how to create custom layouts
    in the action bar using the ActionProvider. You learned how to use ShareActionProvider
    and how it is an effective way of implementing sharing in your app. You learned
    how to use the action view and how to make it collapsible. Finally, you learned
    how to use a the ction bar for tabbed navigation. It has the advantages of adapting
    itself to device screen size, so it is better to use the action bar than using
    older APIs. In the next chapter, we are going to learn about an Android layout
    called GridLayout and we will see how to add and configure it.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用操作栏，因为这种方法比使用选项菜单更为一致。你还了解了如何使用 ActionProvider 在操作栏中创建自定义布局。你学习了如何使用
    ShareActionProvider，以及它如何在你的应用中实现分享的有效方式。你学习了如何使用操作视图以及如何使其可折叠。最后，你学习了如何使用操作栏进行标签导航。它具有适应设备屏幕尺寸的优点，因此使用操作栏比使用较旧的
    API 更好。在下一章中，我们将学习一个名为 GridLayout 的 Android 布局，并了解如何添加和配置它。
