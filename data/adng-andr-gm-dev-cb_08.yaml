- en: Chapter 8. Maximizing Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章 最大化的性能
- en: 'In this chapter, we''re going to cover some of the best practices to improve
    the performance of our AndEngine applications. The topics included are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些提高AndEngine应用程序性能的最佳实践。包括以下主题：
- en: Ignoring entity updates
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略实体更新
- en: Disabling background window rendering
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用背景窗口渲染
- en: Limiting simultaneous sound streams
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制同时播放的音轨数量
- en: Creating sprite pools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建精灵池
- en: Cutting down render time with sprite groups
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用精灵组减少渲染时间
- en: Disabling rendering with entity culling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用实体剔除的渲染
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Game optimization plays a critical role in the success of a game on Google Play.
    It is likely that a user will rate a game negatively if it doesn't run well on
    their device. Unfortunately, with there being so many different devices out there
    and no way to effectively mass-restrict low-end devices on Google Play, it's best
    to optimize Android games as much as possible. Ignoring ratings, it's fair to
    assume that a game with poor performance across the mid-level devices will not
    reach its full potential as far as downloads and active users go. This chapter
    is going to cover some of the most helpful solutions for performance issues related
    to AndEngine. This will help us to improve performance for mid- to low-end devices,
    eliminating the need to sacrifice quality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏优化在Google Play上游戏成功中起着关键作用。如果游戏在用户设备上运行不佳，用户很可能会给出负面评价。不幸的是，由于存在许多不同的设备，而且无法在Google
    Play上有效地大规模限制低端设备，因此最好尽可能优化Android游戏。忽略评分，可以公平地说，如果游戏在中端设备上的表现不佳，那么在下载和活跃用户方面将无法达到其全部潜力。本章将介绍一些与AndEngine性能问题相关的最有帮助的解决方案。这将帮助我们提高中低端设备的性能，无需牺牲质量。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While the recipes in this chapter can greatly improve the performance of our
    games, it is important to keep in mind that clean and efficient code goes equally
    as far. Game development is a very performance-critical task and, as with all
    languages, there are plenty of little things to do or avoid. There are many resources
    online that cover the majority of the good versus bad topics related to both Java
    general practices as well as Android-specific tips and tricks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章中的方法可以大幅提高我们游戏的性能，但重要的是要记住，清晰高效的代码同样重要。游戏开发是一项非常注重性能的任务，与所有语言一样，有许多小事要做或避免。网上有许多资源涵盖了关于Java通用实践以及Android特定技巧的好坏话题。
- en: Ignoring entity updates
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽略实体更新
- en: One of the most important rules for game development when it comes to optimizing
    a game is, *don't do work that does not need to be done!*. In this recipe, we're
    going to talk about how we can use the `setIgnoreUpdate()` method on our entities
    in order to restrict the update thread to only update what should be updated,
    rather than constantly updating all of our entities whether we're using them or
    not.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在优化游戏方面，游戏开发最重要的规则之一是，*不要做不需要做的工作！*。在本节中，我们将讨论如何使用`setIgnoreUpdate()`方法在我们的实体上，以限制更新线程只更新应该更新的内容，而不是不断更新所有实体，不管我们是否使用它们。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following `setIgnoreUpdate(boolean)` methods allow us to control which
    entities will be updated via the engine''s update thread:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`setIgnoreUpdate(boolean)`方法允许我们控制哪些实体将通过引擎的更新线程进行更新：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: As we've discussed in the previous chapters, each child's `onUpdate()` method
    is called via its parent. The engine first updates, calling the update method
    for the main `Scene` object. The scene then proceeds to call all of the update
    methods of its children. Next, the children of the scene will call the update
    method to their children respectively and so on in that fashion. With this in
    mind, by calling `setIgnoreUpdate()` on our main Scene object, we can effectively
    ignore updates to all entities on the scene as well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，每个子对象的`onUpdate()`方法都是通过其父对象调用的。引擎首先更新，调用主`Scene`对象的更新方法。然后场景继续调用其所有子对象的更新方法。接下来，场景的子对象将分别调用其子对象的更新方法，依此类推。考虑到这一点，通过在主Scene对象上调用`setIgnoreUpdate()`，我们可以有效地忽略场景上所有实体的更新。
- en: Ignoring updates to entities which are not in use, or even entities which should
    not react unless a certain event occurs, can save quite a bit of CPU time. This
    is especially true on a scene with a large number of entities. It may not seem
    like much work, but keep in mind that for each entity with an entity modifier
    or update handler, those objects must be updated as well. On top of that, each
    of the entities' children then proceed to update due to the parent/child hierarchy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略未使用实体的更新，或者除非发生特定事件否则不做出反应的实体，可以节省大量的CPU时间。这对于包含大量实体的场景尤为如此。这可能看起来工作量不大，但请记住，对于每个带有实体修改器或更新处理器的实体，这些对象也必须更新。除此之外，每个实体的子实体也会因为父/子层次结构而继续更新。
- en: It is best practice to set `setIgnoreUpdate(true)` to all entities which are
    offscreen or do not require constant updates. For sprites which may not require
    any updates at all, such as the background sprite of a scene, we can ignore updates
    indefinitely and not cause any problems. In situations where the entity needs
    to be updated, but not very frequently, such as a bullet being fired from a turret,
    we can enable the updates to that bullet while it is traveling from the turret
    to the destination, disabling it when it's no longer neded.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是为所有屏幕外的或不需要持续更新的实体设置`setIgnoreUpdate(true)`。对于可能根本不需要任何更新的精灵，比如场景的背景精灵，我们可以无限期地忽略更新，而不会造成任何问题。在实体需要更新，但不是非常频繁的情况下，例如从炮塔发射的子弹，我们可以在子弹从炮塔飞向目标的过程中启用更新，在不再需要时禁用它。
- en: See also
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Understanding AndEngine entities* section in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 使用实体")中的*了解AndEngine实体*部分，*使用实体*'
- en: Disabling background window rendering
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用后台窗口渲染
- en: In most games, developers generally lean toward full-screen modes. This may
    not seem obvious since we see no real difference visually, but the Android OS
    doesn't realize which applications are running in full-screen. What this means
    is that the background window will continue to be drawn underneath our application
    unless otherwise specified in the `AndroidManifest.xml`. In this topic, we're
    going to cover how to disable background rendering to improve application FPS,
    mainly benefiting lower-end devices.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数游戏中，开发者通常更倾向于使用全屏模式。虽然从视觉上看我们并没有发现明显的差异，但安卓操作系统并不会识别哪些应用程序是在全屏模式下运行的。这意味着除非在`AndroidManifest.xml`中另外指定，否则后台窗口将继续在我们的应用程序下方绘制。在本主题中，我们将介绍如何禁用后台渲染以提高应用程序的帧率，这主要有利于低端设备。
- en: Getting ready...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: The first thing we must do in order to stop the background windows from rendering
    is create a theme for our application. We will do this by adding a new xml file
    to our project's `res/values/` folder, called `theme.xml`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了停止后台窗口的渲染，我们首先需要为应用程序创建一个主题。我们将在项目的`res/values/`文件夹中添加一个名为`theme.xml`的新xml文件来实现这一点。
- en: 'Overwrite all code in the default xml file with the following code and save
    the file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码覆盖默认xml文件中的所有内容，并保存文件：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once we''ve created and filled out the `theme.xml` file, we can disable background
    window rendering by applying the theme to our application tag in the `AndroidManifest.xml`
    file of our project. The application tag''s attributes might look similar to this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并填写完`theme.xml`文件后，我们可以在项目的`AndroidManifest.xml`文件中，将主题应用于我们的应用程序标签，从而禁用后台窗口渲染。应用程序标签的属性可能看起来类似于这样：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that we can also apply the theme to specific activities, rather than on
    an application-wide basis by adding the `android:theme="@style/Theme.NoBackground"`
    code to individual activity tags. This would be most relevant for hybrid games
    which require both the AndEngine view as well as native Android views across multiple
    activities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们也可以将主题应用于特定的活动，而不是在整个应用程序范围内应用，只需在各个活动标签中添加`android:theme="@style/Theme.NoBackground"`代码即可。这对于需要同时使用AndEngine视图和原生安卓视图的混合游戏来说最为相关，这些视图跨越了多个活动。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Disabling the background window rendering is a simple task and can offer a few
    percentages of performance gain, mostly in older devices. The main line of code
    which takes care of the background window is found in the `theme.xml` file. By
    nullifying the `android:windowBackground` item, we're notifying the device that,
    rather than drawing the background window, we want to completely remove it from
    being rendered.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用背景窗口渲染是一个简单的任务，主要在旧设备上可以提供一些百分比的性能提升。负责背景窗口的主要代码在`theme.xml`文件中找到。通过将`android:windowBackground`项设置为null，我们通知设备，我们希望完全移除背景窗口的渲染，而不是绘制它。
- en: Limiting simultaneous sound streams
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制同时播放的音轨数量
- en: Sound playback is generally not a problem when it comes to game performance
    with AndEngine. However, there are situations where a large number of sounds may
    play in a very short time-span which can cause a noticeable amount of lag on older
    and sometimes newer devices depending on how many sounds are playing. AndEngine
    allows up to five simultaneous sound streams, of the same `Sound` object, to play
    at any given time by default. In this topic, we're going to work with `EngineOptions`
    in order to change the number of simultaneous sound streams in order to better
    accommodate our application's needs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在AndEngine中，声音播放通常不会成为游戏性能的问题。然而，在某些情况下，大量声音可能在非常短的时间内播放，这可能会在旧设备上有时甚至在新设备上造成明显的延迟，这取决于同时播放的声音数量。默认情况下，AndEngine允许同一`Sound`对象在任何给定时间同时播放五个音轨。在本主题中，我们将通过操作`EngineOptions`来更改同时播放的音轨数量，以更好地满足我们应用程序的需求。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to increase or decrease the number of simultaneous streams per Sound
    object, we must make a simple adjustment to `EngineOptions` in the `onCreateEngineOptions()`
    method of our activity:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加或减少每个`Sound`对象的同时播放音轨数量，我们必须在活动的`onCreateEngineOptions()`方法中对`EngineOptions`进行简单的调整：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `Engine` object's `AudioOptions` is set to allow five simultaneous sound
    streams for each `Sound` object created within our applications by default. In
    most cases, this will not cause any noticeable performance loss for applications
    which do not rely heavily on sound playback. On the other hand, games which tend
    to produce sounds on collision or forces applied to bodies may be susceptible
    to large numbers of sound streams being played at the same time, especially in
    games with more than 100 sprites on the scene at any given time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Engine`对象的`AudioOptions`设置为每个`Sound`对象允许同时播放五个音轨。在大多数情况下，这对于不重度依赖声音播放的应用程序来说，不会造成明显的性能损失。另一方面，倾向于在碰撞或施加力时产生声音的游戏可能会同时播放大量音轨，特别是在任何给定时间场景中有超过100个精灵的游戏中。
- en: Limiting the number of simultaneous sound streams is an easy task to accomplish.
    By simply calling `getAudioOptions().getSoundOptions().setMaxSimultaneousStreams(n)`
    on our `EngineOptions`, where `n` is the number of maximum streams per `Sound`
    object, we can reduce the number of unnecessary sounds to be played during gameplay
    at inconvenient times.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 限制同时播放的音轨数量是一个容易完成的任务。只需在我们的`EngineOptions`上调用`getAudioOptions().getSoundOptions().setMaxSimultaneousStreams(n)`，其中`n`是每个`Sound`对象的最大音轨数量，我们就可以减少在游戏过程中不适宜的时候播放的不必要声音。
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Introducing sounds and music* section in [Chapter 1](ch01.html "Chapter 1. AndEngine
    Game Structure"), *AndEngine Game Structure*
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. AndEngine游戏结构")中的*引入声音和音乐*部分，*AndEngine游戏结构*'
- en: Creating sprite pools
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建精灵池
- en: The `GenericPool` classes are an incredibly important part of AndEngine game
    design considering mobile platforms are relatively limited when it comes to hardware
    resources. In Android game development, the key to a smooth gameplay experience
    throughout a lengthy session is to create the least amount of objects as possible.
    This does not necessarily mean we should limit ourselves to four or five objects
    on the screen, it means we should consider the option of recycling objects which
    have already been created. This is where object pools come into play.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`GenericPool`类在考虑到移动平台在硬件资源上的限制时，是AndEngine游戏设计中极其重要的部分。在Android游戏开发中，要实现长时间游戏体验的流畅，关键在于尽可能少地创建对象。这并不意味着我们应该将屏幕上的对象限制在四个或五个，而是应该考虑回收已经创建的对象。这时对象池就派上用场了。'
- en: Getting started…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始操作…
- en: Refer to the class named `SpritePool` in the code bundle.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考代码包中名为`SpritePool`的类。
- en: How to do it…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: The `GenericPool` classes make use of a few useful methods, which make recycling
    objects for later use very easy. We will cover the main methods to be used here.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`GenericPool`类使用了一些有用的方法，使得回收对象以供后续使用变得非常简单。我们将在这里介绍主要使用的方法。'
- en: 'Constructing the `SpritePool` class:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 构造`SpritePool`类：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Allocating pool items:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配池项目：
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Obtaining pool items:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取池项目：
- en: '[PRE6]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Recycling pool items:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回收池项目：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The idea of the `GenericPool` class is very simple. Rather than creating new
    objects when we need them and discarding them when we're finished with them, we
    can tell the pool to allocate a limited number of objects and store them for later
    use. We can now call the `obtainPoolItem()` method from the pool to obtain one
    of the stored allocated objects for use in our levels, possibly as an enemy. Once
    that enemy is destroyed by the player, for example, we can now call `recyclePoolItem(pItem)`
    to send that enemy object back into the pool. This allows us to avoid garbage
    collection invocations and gives us the potential to greatly reduce the memory
    needed for new objects.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`GenericPool`类的理念非常简单。当我们需要对象时，不是创建新对象并在用完后丢弃它们，而是可以告诉池分配有限数量的对象并存储起来以供后续使用。我们现在可以从池中调用`obtainPoolItem()`方法，以获取存储分配的对象之一，在我们的关卡中使用，例如作为敌人。一旦这个敌人被玩家摧毁，我们现在可以调用`recyclePoolItem(pItem)`将这个敌人对象送回池中。这使我们能够避免垃圾收集的调用，并有可能大大减少新对象所需的内存。'
- en: The four methods in the *How to do it...* section are all that is needed when
    working with your average pool. We must obviously create the pool before we can
    use it. Then the following three methods define what happens in the event of object
    allocation, obtaining an object for use, and what happens once an object is recycled,
    or sent back to be stored in the pool when we are finished with it until we need
    a new object. Object pools can be used for more than just sprite recycling, though,
    so we're going to go a little bit more in-depth about what each of these methods
    does, how they do it, and why they do it, starting with the constructor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何操作...*部分中的四种方法，对于使用普通池来说已经足够。显然，我们必须在使用之前创建池。然后，以下三种方法定义了对象分配、获取对象使用以及对象回收时会发生什么，或者在我们用完后将其送回池中存储，直到我们需要新对象。尽管对象池不仅仅用于精灵对象的回收，但我们会更深入地了解每个方法的用途、工作原理以及原因，从构造函数开始。
- en: In step one, we must pass any objects needed for the pool object's constructor.
    In this case, we need to obtain a `TextureRegion` and `VertexBufferObjectManager`
    in order to create the Sprite objects. This is nothing new, but keep in mind that
    the `GenericPool` class is not limited to creating pools for sprites. We can create
    pools for any type of object or datatype. The key note is to use the pool's constructor
    as a method to obtain the necessary parameters to be passed to the pool's object
    allocations.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们必须传递给池对象构造函数所需的任何对象。在这种情况下，我们需要获取`TextureRegion`和`VertexBufferObjectManager`以创建Sprite对象。这并不是什么新知识，但请记住，`GenericPool`类不仅限于创建精灵的池。我们可以为任何类型的对象或数据类型创建池。关键是要使用池的构造函数作为获取传递给池对象分配所需参数的方法。
- en: In step two, we're overriding the `onAllocatePoolItem()` method. The pool will
    call this method any time it needs to allocate a new object. Two instances are
    if there are initially no objects in the pool or if all of the recycled objects
    have been obtained and are in use. All we need to take care of in this method
    is that we return a new instance of the object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，我们覆盖了`onAllocatePoolItem()`方法。当池需要分配新对象时，它将调用此方法。两种情况是：池最初没有对象，或者所有回收的对象都已获取并在使用中。我们在这个方法中需要处理的是返回对象的新实例。
- en: 'Step three involves the `obtain` method used in order to retrieve an object
    from the pool to be used in our game. We can see that the `obtainPoolItem()` method
    in this case requires us to pass in `pX` and `pY` parameters to be used by the
    sprite''s `setPosition(pX, pY)` method in order to reposition the sprite. We proceed
    to set the sprite''s `visibility` to `true`, allow updates to the sprite, as well
    as setting the color back to its initial value, white. In any case, this method
    should be used to reset the values of the object back to a default state or otherwise
    define the necessary *new* properties of the object. In the code, we might obtain
    a new sprite from the pool as shown in the following code snippet:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步涉及到使用`obtain`方法从对象池中获取一个对象，以便在我们的游戏中使用。我们可以看到，在这种情况下，`obtainPoolItem()`方法要求我们传入`pX`和`pY`参数，这些参数将被精灵的`setPosition(pX,
    pY)`方法使用，以重新定位精灵。然后我们将精灵的`visibility`设置为`true`，允许更新精灵，以及将颜色设置回初始值白色。在任何情况下，此方法应用于将对象的值重置为默认状态，或者定义对象必要的*新*属性。在代码中，我们可能会像以下代码片段所示从对象池中获取一个新的精灵：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the final method, we will use from the `GenericPool` class the `recyclePoolItem(pItem)`
    method, where `pItem` is the object to recycle back into the pool. This method
    should take care of all aspects related to disabling the object from use within
    our game. In terms of sprites, in order to increase performance while sprites
    are stored in the pool, we set the visibility to false, ignore updates to the
    sprite, clear any entity modifiers and update handlers so that they are not still
    running once we obtain a new sprite.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后的方法中，我们将从`GenericPool`类中使用`recyclePoolItem(pItem)`方法，其中`pItem`是要回收回对象池中的对象。此方法应处理与禁用游戏内使用的对象相关的所有方面。对于精灵来说，为了在精灵存储在池中时提高性能，我们将可见性设置为false，忽略对精灵的更新，清除任何实体修饰符和更新处理器，这样在我们获取新精灵时它们就不会仍在运行。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even if not using pools, an option to consider is to use `setVisible(false)`
    alongside `setIgnoreUpdate(true)` on an `Entity`, which is no longer needed. Constantly
    attaching and detaching `Entity` objects may provide opportunities for the garbage
    collector to run and potentially cause noticeable hiccups in frame rate during
    gameplay.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不使用对象池，也可以考虑在不再需要的`Entity`上使用`setVisible(false)`和`setIgnoreUpdate(true)`。不断附加和分离`Entity`对象可能会给垃圾收集器运行提供机会，并可能在游戏过程中引起帧率的明显卡顿。
- en: There's more…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Creating pools to handle object recycling is very important to aid in the reduction
    of performance hiccups, but when a game is first initialized the pool will not
    have any objects ready for use. This means that, depending on how many objects
    the pool will need to allocate in order to satisfy the maximum number of objects
    throughout a full level, a player may notice sudden bursts of frame rate interruption
    during the first few minutes of gameplay. In order to avoid an issue such as this,
    it is a good idea to preallocate pool objects during level loading to avoid any
    object creation during gameplay.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 创建对象池以处理对象回收对于减少性能卡顿非常重要，但是当游戏首次初始化时，池中不会有任何可用的对象。这意味着，根据池需要在整个关卡中分配以满足最大对象数的对象数量，玩家可能会在游戏的前几分钟内注意到帧率的突然中断。为了避免此类问题，最好在关卡加载时预分配池对象，以避免在游戏过程中创建对象。
- en: In order to allocate a large number of pool items during loading, we can call
    `batchAllocatePoolItems(pCount)` on any class extending `GenericPool`, where `pCount`
    is the number of items we wish to allocate. Keep in mind it is a waste of resources
    to load any more items than we need, but it can also cause hiccups in frame rate
    if we don't allocate enough items. For example, in order to determine how many
    enemy objects should be allocated within our game, we can come up with a formula
    such as default enemy count multiplied by level difficulty. However, all games
    are different and so too will be the formula neededfor object creation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在加载期间分配大量池对象，我们可以对任何扩展`GenericPool`的类调用`batchAllocatePoolItems(pCount)`，其中`pCount`是我们希望分配的项数。请记住，加载比我们需要的更多的物品是资源的浪费，但如果分配的物品不足，也可能会引起帧率卡顿。例如，为了确定我们的游戏中应分配多少敌方对象，我们可以制定一个公式，比如默认敌方数量乘以关卡难度。然而，所有游戏都是不同的，因此所需的对象创建公式也将不同。
- en: See also
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Bringing a scene to life with sprites* section in [Chapter 2](ch02.html
    "Chapter 2. Working with Entities"), *Working with Entities*
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 使用实体")中关于*使用精灵为场景注入生命*的部分'
- en: Cutting down render time with sprite groups
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用精灵组减少渲染时间
- en: Sprite groups are a great addition to any AndEngine game which deals with hundreds
    of visible sprites on the scene at any given time. The `SpriteGroup` class allows
    us to eliminate a large amount of overhead by grouping many sprite rendering calls
    into a limited number of OpenGL calls. If a school bus were to pick up a single
    child, drop them off at school, then pick up the next child, repeating until all
    children were at school, the process would take a far greater time to complete.
    The same goes for drawing sprites with OpenGL.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵组是任何需要在任何时刻处理场景上数百个可见精灵的AndEngine游戏的一个很好的补充。`SpriteGroup`类允许我们将许多精灵渲染调用分组到有限的OpenGL调用中，从而消除大量开销。如果一个校车只接一个孩子，把他们送到学校，然后再接下一个孩子，直到所有的孩子都到学校，这个过程完成所需的时间会更长。使用OpenGL绘制精灵也是同样的道理。
- en: Getting started…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始操作…
- en: Refer to the class named `ApplyingSpriteGroups` in the code bundle. This recipe
    requires an image named `marble.png`, which is 32 pixels in width by 32 pixels
    in height.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考代码包中名为`ApplyingSpriteGroups`的类。这个示例需要一个名为`marble.png`的图像，该图像的宽度为32像素，高度为32像素。
- en: How to do it…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: When creating a `SpriteGroup` for use in our games, we can treat them as an
    `Entity` layer which is specifically meant for `Sprite` objects only. The following
    steps explain how to create and attach `Sprite` objects to a `SpriteGroup`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当在我们的游戏中创建一个`SpriteGroup`时，我们可以将它们视为专门用于`Sprite`对象的`Entity`层。以下步骤说明如何创建并将`Sprite`对象附加到`SpriteGroup`。
- en: 'Creating a sprite group can be achieved with the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个精灵组可以使用以下代码实现：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Attaching sprites to the sprite group is an equally simple task:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将精灵附加到精灵组同样是一个简单的任务：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this recipe, we're setting up a scene which applies roughly 375 sprites to
    our scene, all drawn through the use of the `mSpriteGroup` object. Once the sprite
    group is created, we can basically treat it as an ordinary entity layer, attaching
    sprites as needed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们设置了一个场景，将大约375个精灵应用到我们的场景中，所有这些都是通过使用`mSpriteGroup`对象绘制的。一旦创建了精灵组，我们基本上可以将其视为一个普通实体层，根据需要附加精灵。
- en: 'Create a `BuildableBitmapTextureAtlas` for our sprite in the `onCreateResources(`
    method of our activity:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们活动的`onCreateResources(`方法中为我们的精灵创建一个`BuildableBitmapTextureAtlas`：
- en: '[PRE11]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating the textures for use in a `SpriteGroup` can be handled as we would
    an ordinary Sprite.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建用于`SpriteGroup`中的纹理可以像处理普通Sprite一样处理。
- en: 'Construct our `mSpriteGroup` object and apply it to the scene:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造我们的`mSpriteGroup`对象并将其应用到场景中：
- en: '[PRE12]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`SpriteGroup` requires two new parameters that we''ve not dealt with yet. `SpriteGroup`
    is an `Entity` subtype, so we already know that the first two parameters are the
    x and y coordinates to position `SpriteGroup`. For the third parameter, we''re
    passing a `BitmapTextureAtlas`. *The sprite group can only contain sprites which
    share the same texture atlas as the sprite group!* The fourth parameter is the
    maximum capacity that `SpriteGroup` is able to draw. If the capacity is 400, then
    we can apply up to 400 sprites to `SpriteGroup`. It is important to limit the
    capacity to the maximum number of sprites we wish to draw. *Exceeding the limit
    will cause a force-closure of the application*.'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SpriteGroup`需要两个我们尚未处理的新参数。`SpriteGroup`是`Entity`的一个子类型，因此我们知道前两个参数是用于定位`SpriteGroup`的x和y坐标。第三个参数，我们传递了一个`BitmapTextureAtlas`。*精灵组只能包含与精灵组共享相同纹理图的精灵！*第四个参数是`SpriteGroup`能够绘制的最大容量。如果容量是400，那么我们可以将最多400个精灵应用到`SpriteGroup`。将容量限制为我们希望绘制的最大精灵数非常重要。*超出限制将导致应用程序强制关闭*。'
- en: The final step is to apply the sprites to the sprite group.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一步是将精灵应用到精灵组。
- en: 'In this recipe, we have set a loop up in order to apply the sprites to various
    positions on the screen. However, what we''re really interested in here is the
    following code used to create a `Sprite` and attach it to the `SpriteGroup`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们设置了一个循环，以便将精灵应用到屏幕上的各个位置。然而，在这里我们真正关心的是以下用于创建`Sprite`并将其附加到`SpriteGroup`的代码：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can create our sprite as we would create any other sprite. We can set the
    position, scale, and texture region as usual. Brace for the tricky part now! We
    must call `mSpriteGroup.attachChild(sprite)` in order to allow the `mSpriteGroup`
    object to handle drawing of the sprite object. That's all it takes!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像创建任何其他精灵一样创建我们的精灵。我们可以像平常一样设置位置、缩放和纹理区域。现在要做好准备迎接棘手的部分！我们必须调用`mSpriteGroup.attachChild(sprite)`，以允许`mSpriteGroup`对象处理精灵对象的绘制。这就完成了！
- en: Following these steps, we can successfully allow our sprite groups to draw many,
    many sprites onto the screen before even noticing a drop in performance within
    our application. The difference is huge compared to individually drawing sprites
    with separate buffers. In many cases, users have claimed to achieve an improvement
    of up to 50 percent when working with games which include large amounts of entities
    on the scene at one time.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤，我们可以在性能下降之前成功让我们的精灵组在屏幕上绘制许多精灵。与使用单独缓冲区单独绘制精灵相比，差异是巨大的。在许多情况下，用户声称在使用包含大量实体同时出现在场景中的游戏时，可以实现高达50%的性能提升。
- en: There's more…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: It's not time to run off and convert all of your projects to use sprite groups
    just yet! The benefits to using sprite groups speak for themselves, but that's
    not to say there are no negative side effects either. The `SpriteGroup` class
    is not supported directly by OpenGL. The class is more or less a 'hack', which
    allows us to save some time with additional rendering calls. Setting up sprite
    groups in more complex projects can be a hassle due to the 'side effects'.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在还不是将所有项目转换为使用精灵组的时候！使用精灵组的好处不言而喻，但这并不意味着没有负面影响。`SpriteGroup`类并不直接得到OpenGL的支持。这个类或多或少是一个'hack'，它让我们在额外的渲染调用中节省一些时间。在更复杂的项目中设置精灵组可能会因为'副作用'而变得麻烦。
- en: There are some situations after attaching and detaching many sprites which take
    advantage of alpha modifiers and modified visibility, causing some of the sprites
    on the sprite group to 'flicker'. This outcome is most noticeable after more and
    more sprites have been attached and detached or set to invisible/visible multiple
    times. There is a way around this that will not hurt performance too much, which
    involves moving sprites off the screen rather than detaching them from the layer
    or setting them to invisible. However, for larger games that only take advantage
    of one activity and swap scenes based on the current level, moving the sprites
    off the screen might only lead to future problems.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在多次附着和分离利用了alpha修饰符和修改了可见性的许多精灵后，有时会出现一些情况，导致精灵组中的某些精灵出现'闪烁'。在越来越多的精灵被附着和分离，或者多次设置为不可见/可见之后，这种结果最为明显。有一种方法可以绕过这个问题，而且不会过多影响性能，即移动精灵使其离开屏幕，而不是从图层中分离它们或设置为不可见。然而，对于只利用一个活动并且根据当前关卡切换场景的大型游戏来说，将精灵移出屏幕可能会带来未来的问题。
- en: Take this into account and plan wisely before deciding to use a sprite group.
    It might also help to test the sprite group in terms of how you plan to use your
    sprites before incorporating it into your game. The sprite group will not always
    cause problems, but it's something to keep in mind. Additionally, AndEngine is
    an open source project which is continuously being updated and enhanced. Keep
    up to date with the latest revisions for fixes or improvements.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定使用精灵组之前，要考虑这一点并明智地计划。在将精灵组整合到游戏中之前，测试你打算如何使用精灵的精灵组可能也会有所帮助。精灵组不总会引起问题，但这是需要记住的一点。此外，AndEngine是一个开源项目，它正在不断更新和改进。关注最新修订版以获取修复或改进。
- en: See also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Understanding AndEngine entities* section in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 使用实体")中的*了解AndEngine实体*部分，*使用实体*'
- en: The *Bringing a scene to life with sprites* section in [Chapter 2](ch02.html
    "Chapter 2. Working with Entities"), *Working with Entities*
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 使用实体")中的*用精灵为场景注入生命*部分，*使用实体*'
- en: Disabling rendering with entity culling
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用实体剔除来禁用渲染
- en: Culling entities is a method used to prevent unnecessary entities from being
    rendered. This can result in improved performance in cases where a sprite is not
    visible within the viewing area of an AndEngine `Camera`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 剔除实体是一种防止不必要的实体被渲染的方法。在精灵在AndEngine `Camera`的视图中不可见的情况下，这可以提高性能。
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Make the following method call to any preexisting `Entity` or `Entity` subtype:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对任何预先存在的`Entity`或`Entity`子类型进行以下方法调用：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Culling entities disallows certain entities from being rendered depending on
    their position on the scene relative to the portion of the scene visible by the
    camera. This is useful when we have many sprites on a scene that might occasionally
    move out of view of the camera. With culling enabled, those entities which are
    outside of the camera view will not be rendered in order to save us from unnecessary
    calls to OpenGL.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 剔除实体会根据它们在场景中的位置相对于摄像机可见场景部分来禁止某些实体被渲染。当我们场景上有许多精灵可能会偶尔移出摄像机视野时，这非常有用。启用剔除后，那些在摄像机视图之外的实体将不会被渲染，以避免我们进行不必要的OpenGL调用。
- en: Note that culling only takes place on those entities which are entirely out
    of view of the camera. This takes into account the full area of the entity, from
    the bottom left corner to the top right corner. Culling is not applied to portions
    of an entity, which may be outside of the camera's iew.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，剔除只发生在那些完全在摄像机视野之外的实体上。这考虑了实体的整个区域，从左下角到右上角。如果实体的部分在摄像机视野之外，不会应用剔除。
- en: There's more…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: '**Culling** will only stop rendering those entities which move out of visibility
    of the `Camera`. Because of this, it is not a bad idea to enable culling on all
    game objects (items, enemies, and so on.) that are constantly moving out of the
    `Camera` area. For instances with large backgrounds made up of smaller textures,
    culling can also greatly improve performance, especially considering the size
    of background images.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**剔除**只会停止渲染那些移出摄像机视野的实体。因此，对所有那些经常移出`Camera`区域的 游戏对象（如物品、敌人等）启用剔除并不是一个坏主意。对于由较小纹理组成的大型背景实例，剔除也可以显著提高性能，尤其是考虑到背景图像的大小。'
- en: Culling can really help us save some rendering time, but that doesn't necessarily
    mean that we should enable it on all entities. After all, there's a reason why
    it's not enabled by default. It is a bad idea to enable culling on HUD entities.
    It might seem like a viable option to include it for pause menus or other large
    entities which might transition in and out of the camera view, but this can lead
    to problems when moving the camera. AndEngine works in such a way that the HUD
    never really moves with the camera, so if we enable culling on HUD entities, then
    move our camera 800 pixels to the right (assuming our camera width is 800 pixels)
    our HUD entities would still physically respond as if they were in the proper
    position on our screen but they will not render. They would still react with touch
    events and other various scenarios, but we simply won't see them on the screen.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 剔除确实可以帮助我们节省渲染时间，但这并不意味着我们应该对所有实体启用剔除。毕竟，默认不启用它是有一个原因的。在HUD实体上启用剔除是一个糟糕的主意。对于暂停菜单或其他可能进出摄像机视野的大型实体来说，包含它似乎是一个可行的选择，但这可能会导致在移动摄像机时出现问题。AndEngine
    的工作方式是HUD实际上永远不会随着摄像机移动，所以如果我们对HUD实体启用剔除，然后将摄像机向右移动800像素（假设我们的摄像机宽度是800像素），我们的HUD实体仍然会在物理上响应它们在屏幕上的正确位置，但它们不会渲染。它们仍然会响应触摸事件和其他各种场景，但我们就是看不到它们在屏幕上。
- en: Additionally, culling requires an added layer of visibility-checking before
    an Entity is drawn on the Scene. Because of this, older devices have the potential
    to actually notice a performance loss while Entity culling is enabled while those
    entities are not being culled. It may not sound like much, but when we've got
    players running on devices that are just barely capable of running at 30 frames
    per second, there's a good chance that those additional visibility checks on,
    for example, 200 sprites may be just enough to tilt the scale toward 'inconvenient
    gameplay'.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在实体被绘制在场景上之前，剔除还需要进行一层额外的可见性检查。因此，较旧的设备在启用实体剔除时，如果这些实体没有被剔除，可能会有性能损失。这可能听起来不多，但当我们在仅能勉强运行30帧每秒的设备上有玩家运行时，对例如200个精灵进行额外的可见性检查可能会足以使游戏体验变得不便。
- en: See also
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见：
- en: The *Understanding AndEngine entities* section in [Chapter 2](ch02.html "Chapter 2. Working
    with Entities"), *Working with Entities*.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 使用实体")中关于*理解 AndEngine 实体*的部分，*使用实体*。'
