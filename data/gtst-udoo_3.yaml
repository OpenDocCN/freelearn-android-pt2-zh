- en: Chapter 3. Testing Your Physical Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章. 测试您的物理应用程序
- en: One of the most important steps during software development is **testing**.
    When we are testing software components, we are using a testing framework to write
    unit tests, and maybe integration tests, that are useful to reproduce bugs and
    to check the expected behavior of our application. In physical applications, this
    process isn't so easy because we have to test how our sketch interacts with hardware
    circuits.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发过程中最重要的步骤之一是**测试**。当我们测试软件组件时，我们使用测试框架编写单元测试，也许还有集成测试，这有助于复现错误并检查我们应用程序的预期行为。在物理应用中，这一过程并不容易，因为我们需要测试我们的草图与硬件电路的交互情况。
- en: We will add to the LedLamp application all the required features to implement
    an easy way to find anomalies in the circuit, so that we can avoid complex debug
    processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为LedLamp应用程序添加所有必要的功能，以实现一种简单的方法来查找电路中的异常，这样我们可以避免复杂的调试过程。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Further details about electronic components and circuits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于电子元件和电路的更多细节
- en: Adding components to a circuit so they can be tested by a sketch
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向电路添加组件，以便它们可以被草图测试
- en: Writing the first test for circuit debugging
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写第一个用于电路调试的测试
- en: Running the circuit test from your prototype
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从您的原型运行电路测试
- en: Building a testable circuit
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可测试的电路
- en: During Android application writing, we may use the internal testing framework
    to write instrumentation tests. With them, we can check the behavior of an application
    at all levels of the Android stack, including user interface stress tests. However,
    in our UDOO projects, we make use of Android to interact with the onboard microcontroller
    to control and collect data from physical devices. When we have a good features
    coverage through tests in our Android application, and when it matches all our
    requirements, it's more likely that our first problems will be related to hardware
    faults and anomalies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写安卓应用程序时，我们可能会使用内部测试框架编写仪器测试。通过它们，我们可以检查应用程序在安卓堆栈所有层面的行为，包括用户界面压力测试。然而，在我们的UDOO项目中，我们利用安卓与板载微控制器交互，以控制和收集物理设备的数据。当我们的安卓应用程序通过测试覆盖了良好特性，并且符合我们所有要求时，我们首先遇到的问题很可能与硬件故障和异常有关。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: In this book, we will not cover the Android unit testing framework because it's
    not required to make your first steps in hardware prototyping. However, bear in
    mind that you should learn how to write Android tests because it's a must to improve
    the quality of your software. You can find more information in the official documentation
    at [http://developer.android.com/training/activity-testing/index.html](http://developer.android.com/training/activity-testing/index.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将不介绍安卓单元测试框架，因为它不是在硬件原型制作初期所必需的。但是，请记住，您应该学习如何编写安卓测试，因为要提高软件质量，这是必须的。您可以在官方文档中找到更多信息，地址是[http://developer.android.com/training/activity-testing/index.html](http://developer.android.com/training/activity-testing/index.html)。
- en: 'In the previous chapter, we built our first prototype using many electronic
    components, such as an LED and a resistor, and we wrote an Android application
    to act as a devices controller. This is a good starting point, because we already
    have a working device in which we can add another feature. To keep the circuit
    simple, we will add an independent LED from the first one, to make our appliance
    capable of turning on and off two different devices. We need to make some changes
    to the LedLamp circuit to connect the second LED to the UDOO board. Take a look
    at the following schema:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了许多电子元件，比如LED和电阻，构建了我们的第一个原型，并编写了一个安卓应用程序作为设备控制器。这是一个很好的起点，因为我们已经拥有了一个可以添加其他功能的正常工作的设备。为了使电路简单，我们将从第一个LED独立添加另一个LED，使我们的设备能够控制两个不同设备的开关。我们需要对LedLamp电路进行一些更改，以便将第二个LED连接到UDOO板上。请查看以下电路图：
- en: '![Building a testable circuit](img/1942OS_03_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![构建可测试的电路](img/1942OS_03_01.jpg)'
- en: 'To achieve the preceding schema, take the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现上述电路图，请采取以下步骤：
- en: Remove the connection from the positive line of the power bus, because we need
    to control different components from different pins.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从电源总线的正线断开连接，因为我们需要从不同的引脚控制不同的组件。
- en: Keep the ground connected to the negative line of the power bus because we are
    connecting all grounds together.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持地线连接到电源总线的负线，因为我们将所有的地线都连接在一起。
- en: Put two *220 Ohm resistors* to connect the negative legs to the negativepower
    bus.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用两个*220欧姆电阻器*将负极腿连接到负电源总线。
- en: Connect positive legs to UDOO pinouts 2 and 3.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将正极腿连接到UDOOb引脚2和3。
- en: In the previous chapter, we connected the resistor to the positive leg, while
    now we are connecting the negative one. Both configurations are correct because
    when the LED and the resistor are connected in series, the current will flow through
    them with the same intensity. We can find that circuits are similar to highways,
    while cars are like electric charges. If cars encounter one or many roadblocks,
    they start to slow down at every point of the highway, and it doesn't matter if
    they are near or far from the roadblock. So, even if the resistor is at the end
    of the circuit, the right amount of current will flow through the LED.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们将电阻器连接到正极腿，而现在我们连接负极腿。这两种配置都是正确的，因为当LED和电阻器串联连接时，电流将以相同的强度流过它们。我们可以发现，电路类似于高速公路，而汽车就像电荷。如果汽车遇到一个或多个路障，它们将从高速公路的每个点开始减速，而且不管它们距离路障是远是近。因此，即使电阻器位于电路末端，正确数量的电流仍会流过LED。
- en: 'Now that the circuit includes a new LED, we have to change our sketch so it
    can fit our needs with the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 既然电路包括了一个新的LED，我们必须按照以下步骤更改我们的草图，使其符合我们的需求：
- en: 'At the top of the sketch, add the following object-like macro:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在草图的顶部添加以下类似对象的宏：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Initialize the new LED in the `setup()` function, as you can see in the highlighted
    code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup()`函数中初始化新的LED，如高亮代码所示：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code to the `executor()`function so that the new LED behaves
    like the first one that we have already programmed:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`executor()`函数中添加以下代码，使新的LED模仿我们已经编程的第一个LED的行为：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Change the accessory descriptor at the top of the file to update the sketch
    version:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改文件顶部的配件描述符，以更新草图版本：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Changing the version number is always a good practice that you should be aware
    of. In our case, this is also a requirement because we have to inform Android
    that the hardware behavior has changed. As you saw in [Chapter 2](ch02.html "Chapter 2. Know
    Your Tools"), *Know your Tools*, when versions defined in Android and Arduino
    mismatch, the Android application will not communicate with the microcontroller,
    and this prevents unexpected behaviors, especially when the hardware is changed.
    Indeed, if we deploy the new sketch again, we can see that Android will not find
    any available application to manage the accessory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更改版本号总是一个你应该注意的好习惯。在我们的案例中，这也是一个要求，因为我们必须通知Android硬件行为已经改变。正如你在[第2章](ch02.html
    "第2章. 了解你的工具")，*了解你的工具*中看到的，当Android和Arduino中定义的版本不匹配时，Android应用程序将不会与微控制器通信，这防止了意外的行为，特别是在硬件更改时。实际上，如果我们再次部署新的草图，可以看到Android将找不到任何可用的应用程序来管理配件。
- en: 'The last step where the prototype will work again, is to update the Android
    application starting from its user interface and logic, so that it becomes capable
    to manage the new device. To achieve this goal, we should take the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，让原型再次工作，是更新Android应用程序，从其用户界面和逻辑开始，使其能够管理新设备。为了实现这个目标，我们应该采取以下步骤：
- en: 'Add a new switch button into `res/layout/activity_light_switch.xml` file, below
    the `firstLed` declaration:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/layout/activity_light_switch.xml`文件中，在`firstLed`声明下方添加一个新的开关按钮：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add in the `LightSwitch` activity at the top of the class, the following declaration
    to store the state of the second LED:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类的顶部`LightSwitch`活动中添加以下声明，以存储第二个LED的状态：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following code under the `switchLight()` method to pilot the second
    LED according to the sketch switch case:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`switchLight()`方法下方添加以下代码，根据草图开关案例控制第二个LED：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Update the `usb_accessory_filter.xml` descriptor file under `res/xml/` with
    the new hardware version:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/xml/`下的`usb_accessory_filter.xml`描述符文件中更新新的硬件版本：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are matching the version of the sketch so Android knows that this application
    can manage the connected accessory again. After deploying the new application,
    we can use the prototype to turn on and off the two connected LEDs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在匹配草图的版本，以便Android知道这个应用程序可以再次管理连接的配件。部署新应用程序后，我们可以使用原型来打开和关闭两个连接的LED。
- en: Developing a diagnostic mode
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发一个诊断模式。
- en: With a working prototype, it's time to add a functionality that we can use to
    test our circuit. Even if we are tempted to put our hands on code, we need first
    to simulate a physical damage that causes a fault in the prototype. Because we
    don't want to really damage one of our LEDs, we can always alter the circuit components
    to reproduce an anomaly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个可工作的原型后，是时候添加一个功能来测试我们的电路了。即使我们很想动手写代码，但首先需要模拟一个物理损坏，这个损坏会在原型中引起故障。因为不想真正损坏我们的LED灯，我们可以更改电路元件来复现异常。
- en: 'Indeed, we can simulate that the resistor connected to pin 3 has a broken leg.
    If this occurs, the circuit is interrupted and this prevents the current from
    flowing through the LED. To reproduce this problem in our breadboard, we can simply
    remove the first resistor, as we can see in the following schema:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以模拟连接到引脚3的电阻器一条腿断裂的情况。如果发生这种情况，电路会被切断，这会阻止电流流过LED灯。为了在面包板上复现这个问题，我们可以简单地移除第一个电阻器，如下一个图表中所示：
- en: '![Developing a diagnostic mode](img/1942OS_03_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![开发诊断模式](img/1942OS_03_02.jpg)'
- en: Now we have simulated our first hardware fault. If we open the Android application
    and use the on/off switches, we can see that the second LED works as expected
    while the first one stops working. However, none of the software components notice
    anything because they are agnostic to what happens under the hood. If such problems
    occurs, we are lost because we start software and hardware debugging without knowing
    in which part we should put our attention to find the fault.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经模拟了第一个硬件故障。如果我们打开Android应用程序并使用开关，可以看到第二个LED灯按预期工作，而第一个停止工作。然而，由于软件组件对内部发生的情况一无所知，所以它们没有注意到任何问题。如果出现这样的问题，我们会感到迷茫，因为我们在不知道应该将注意力集中在哪个部分来查找故障的情况下，开始进行软件和硬件调试。
- en: When the software doesn't work, we usually use a debugger. Unfortunately, when
    we deal with electric circuits, we don't have so many tools and we may need to
    implement something on our own. A good starting point is to add a functionality
    to the prototype so it can debug itself through a **diagnostic** mode. This mode
    should *simulate and mimic the real behaviors of our circuit*, but in a controlled
    way. Diagnostic mode is really helpful to identify the cause of anomalies in our
    prototype when the problem is not related to a software bug.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当软件出现问题时，我们通常会使用调试器。不幸的是，当处理电路问题时，我们没有太多的工具，可能需要自己实现一些功能。一个好的起点是给原型添加一个功能，使其能够通过**诊断**模式自我调试。这个模式应该*模拟并模仿我们电路的真实行为*，但要以受控的方式进行。诊断模式对于识别原型中与软件错误无关的异常原因非常有帮助。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The diagnostic mode is the first step we should follow to find anomalies. However,
    when we find a hardware fault, we should start using other tools such as a *multimeter*,
    which has the capability to measure voltage, current, and resistance.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 诊断模式是我们寻找异常应该遵循的第一步。然而，当我们发现硬件故障时，应该开始使用其他工具，比如一个能够测量电压、电流和电阻的*万用表*。
- en: 'Before we start to implement this mode in our sketch, we need to connect a
    *push button* that we will use to enable the diagnostic mode. We need to add this
    component to our breadboard, as you can see in the left part of the following
    schema:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始在草图上实现这个模式之前，需要连接一个*按钮*，我们将用它来启用诊断模式。我们需要将这个组件添加到我们的面包板上，如下一个图表的左侧部分所示：
- en: '![Developing a diagnostic mode](img/1942OS_03_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![开发诊断模式](img/1942OS_03_03.jpg)'
- en: 'The procedure to add components to the breadboard, as shown in the schema,
    is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 按照图表所示，将组件添加到面包板的步骤如下：
- en: Add the push button to the middle of our breadboard so that the legs in the
    same vertical line aren't connected.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮添加到面包板的中间，使得同一垂直线上的腿不要连接。
- en: Connect the left leg of the button to pin +5V.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的左腿连接到+5V引脚。
- en: Connect the right leg of the button to pin 4.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的右腿连接到引脚4。
- en: Connect one side of a *10 KOhm* resistor to the right leg of the button and
    the other side to the negative line of the power bus.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个*10 KOhm*电阻的一侧连接到按钮的右腿，另一侧连接到电源总线的负线。
- en: Through these connections, we read a digital signal from pin 4 when we press
    the push button because the *current chooses the path with lesser resistance*,
    like water does. In our case, the mechanical switch will create a connection between
    the +5V and the 4 pins, and because the resistance of this path is greatly inferior
    to the *10 KOhm* present in the ground path, UDOO will read this voltage difference
    and convert it into a digital signal. When the switch is open, the only available
    path is pin 4 and the ground so UDOO reads no voltage differences. This allows
    us to know whether the switch is pressed or not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些连接，当我们按下按钮时，我们从引脚4读取数字信号，因为*电流会选择电阻较小的路径*，就像水一样。在我们的案例中，机械开关将在+5V和4引脚之间建立连接，并且由于这条路径的电阻远小于地线中的*10
    KOhm*，UDOOb将读取这个电压差并将其转换为数字信号。当开关打开时，唯一的路径是引脚4和地线，因此UDOOb不会读取到电压差。这使我们能够知道开关是否被按下。
- en: Writing the first test
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写第一个测试
- en: 'Now that we have a physical hardware switch, we need to activate the diagnostic
    mode when users press the push button. To detect the button press, we should change
    the sketch according to the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了一个物理硬件开关，我们需要在用户按下按钮时激活诊断模式。为了检测按钮按下，我们应该按照以下步骤更改草图：
- en: 'Add the highlighted declarations, just after the ADK initialization:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ADK初始化之后，添加突出显示的声明：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need the button state for each reading phase so that we can save the state
    during the current and the previous reading. The `lastPress` variable will contain
    the timestamp when the button was pressed last time. We set the button status
    to `LOW` because we state that no current flows through the button and this means
    that it's not pressed.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要每次读取阶段的按钮状态，这样我们就可以在当前和之前的读取期间保存状态。`lastPress`变量将包含上次按下按钮的时间戳。我们将按钮状态设置为`LOW`，因为我们认为没有电流流过按钮，这意味着它没有被按下。
- en: 'At the top of the sketch, define the following object-like macros:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在草图的顶部，定义以下类似对象的宏：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We set the BUTTON pin 4 and a DEBOUNCE value that refers to the number of milliseconds
    that should elapse before our code starts to evaluate the button press again.
    The use of this threshold is required because it prevents the reading of false
    positive. If we omit this part, when the button is pressed, the sketch will detect
    thousands of readings because the UDOO reading phase is faster than our reaction
    to release the push button. This value is called **debounce threshold**.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们设置按钮引脚4和DEBOUNCE值，该值表示在代码开始再次评估按钮按下之前应经过的毫秒数。使用这个阈值是必要的，因为它防止读取到错误的阳性结果。如果我们省略这部分，当按钮被按下时，草图将检测到数千次读数，因为UDOOb的读取阶段比我们松开按钮的反应要快。这个值称为**消抖阈值**。
- en: 'Configure the button pin mode in the `setup()` function as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup()`函数中按如下配置按钮引脚模式：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Move the content of the `loop()` function into a new one called the `readCommand()`
    function so that it matches the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`loop()`函数的内容移动到一个名为`readCommand()`的新函数中，使其与以下内容相匹配：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With an empty `loop()` function, we should add in it the reading phase with
    the following code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在空的`loop()`函数中，我们应该添加以下代码进行读取阶段：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We are storing the value of the button using the built-in `digitalRead()` function,
    which abstracts the complexity to read the voltage difference from the chosen
    pin. Then, we are checking if the current state is different from the previous,
    so we are sure that the button is pressed exactly in this moment.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用内置的`digitalRead()`函数存储按钮的值，该函数抽象了从所选引脚读取电压差的复杂性。然后，我们检查当前状态是否与之前不同，这样我们就能确定按钮正是在这一刻被按下。
- en: However, we also need to check whether the time since we press the push button
    exceeds the debounce threshold. We use the built-in `millis()` function, which
    returns the number of milliseconds since the UDOO board has started the current
    program.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，我们还需要检查自按下按钮以来是否超过了消抖阈值。我们使用内置的`millis()`函数，它返回自UDOOb板开始当前程序以来的毫秒数。
- en: If the press button event is caught, we set the `lastPress` value and show a
    visual feedback to notify users that the diagnostic mode is about to start. In
    any case, we are saving the previous button state and continuing with the standard
    execution.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果捕捉到按下按钮的事件，我们设置`lastPress`值，并提供视觉反馈以通知用户诊断模式即将启动。无论如何，我们都会保存先前的按钮状态，并继续执行标准操作。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Sometimes the diagnostic mode requires activation and deactivation phases. In
    our case, we are keeping the process simple so the diagnostic mode runs only once
    after the button is pressed. In other projects, we may need a more complex activation
    mechanism that we can isolate in a standalone function.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时诊断模式需要激活和停用阶段。在我们的案例中，我们简化了流程，使得诊断模式仅在按下按钮后运行一次。在其他项目中，我们可能需要一个更复杂的激活机制，可以将其隔离在独立函数中。
- en: 'As a last step, implement the `startDiagnostic()` function as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后一步，按照以下方式实现`startDiagnostic()`函数：
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The diagnostic function should mimic all, or almost all, possible behaviors
    of our circuit. In this case, we turn on and off the first and the second LED
    and, as the last test, we power them on together. In a diagnostic mode, it's important
    to use internal functions to reproduce the circuit actions. This helps us to test
    the `executor()` function's inputs so that we are sure that we have mapped all
    expected inputs sent by the Android application.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诊断功能应该模仿我们电路的所有或几乎所有可能的行为。在本例中，我们打开和关闭第一个和第二个LED，作为最后的测试，我们同时为它们供电。在诊断模式下，使用内部函数来复现电路动作非常重要。这有助于我们测试`executor()`函数的输入，确保我们已经映射了Android应用程序发送的所有预期输入。
- en: Now that we have a diagnostic function, we have to deploy our LedLamp sketch
    once again and push the button to start the diagnosis. As expected, only one LED
    should turn on because of the virtually broken resistor. Now we can connect the
    resistor again and start the diagnostic mode to test if the LED connection has
    been fixed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了诊断功能，我们必须再次部署LedLamp草图，并按下按钮开始诊断。如预期的那样，由于虚拟损坏的电阻器，只有一个LED会亮起。现在我们可以重新连接电阻器，并启动诊断模式，以测试LED连接是否已修复。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have delved into hardware testing to enhance the quality
    of our projects. We found how valuable this process is because, with this approach,
    we can isolate hardware faults from software bugs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了硬件测试，以提高我们项目的质量。我们发现这个过程非常有价值，因为通过这种方法，我们可以将硬件故障与软件错误区分开来。
- en: We added another LED to our previous prototype so that we can control multiple
    devices from the Android application. Then, we simulated a hardware fault in one
    of the electric components, removing one resistor from the circuit to produce
    a controlled anomaly. This led us to write our own diagnostic mode to find these
    kinds of faults quickly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的原型中添加了另一个LED，以便我们可以从Android应用程序控制多个设备。然后，我们在其中一个电子组件中模拟了一个硬件故障，从电路中移除一个电阻器以产生一个受控的异常。这促使我们编写了自己的诊断模式，以便快速找到这类故障。
- en: The first step was to add a push button to our prototype that we can use to
    start the diagnostic mode and then we used this functionality to mimic all the
    possible circuit behaviors to find the broken resistor easily.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为我们的原型添加一个按钮，我们可以使用它来启动诊断模式，然后我们利用这个功能模拟所有可能的电路行为，以便轻松找到损坏的电阻器。
- en: In the next chapter, we start a new prototype from scratch, which is capable
    of collecting data from the environment, through a new set of electronic components.
    We will also write an Android application capable of reading these values sent
    from the sketch and to visualize the processed data.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从零开始构建一个新原型，它能够通过一组新的电子组件从环境中收集数据。我们还将编写一个Android应用程序，能够读取草图发送的这些值，并可视化处理后的数据。
