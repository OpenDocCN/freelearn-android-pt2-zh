- en: Chapter 1. Understanding Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 了解安卓
- en: This chapter provides you with a strong theoretical concept of Android. It is
    obvious that the term is not alien even for any novice technology user. Because
    of the popularity of this great operating system, many developers started to shift
    from web development and other platforms. This huge migration has brought a significant
    change in the market of Android apps and has opened new, unlimited doors for new
    mobile application developers. Android is a strong opponent of iOS which is an
    operating system by Apple Inc. However, as statistics suggest, Android is catching
    up with the iOS market in terms of revenue as Google Play is the fastest growing
    app market in terms of total number of downloads.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为您提供了关于安卓的强大理论知识。很明显，这个术语对于任何新手技术用户来说都不陌生。由于这个伟大的操作系统普及，许多开发者开始从网页开发和其他平台转移过来。这次大规模的迁移为安卓应用市场带来了显著变化，并为新的移动应用开发者开启了无限的新大门。安卓是苹果公司iOS操作系统的一个强大的对手。然而，正如统计数据所示，在收入方面，安卓正在追赶iOS市场，因为谷歌Play是下载总量方面增长最快的应用市场。
- en: 'This chapter includes the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Introducing Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍安卓
- en: Understanding the whys and whens of Android
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解安卓的为什么和何时
- en: Official Google IDE for Android Developers – the Android Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓开发者的官方谷歌IDE——安卓工作室
- en: Structure of an Android application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓应用程序的结构
- en: Presenting the Android Activity lifecycle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示安卓活动生命周期
- en: Introducing Android
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍安卓
- en: Android is a Linux-based operating system which makes it an open source software.
    Google distributed its license under the Apache License Agreement. The availability
    of Android code makes it an easily-modifiable operating system, which can be customized
    by the vendor as well. Due to a highly flexible design, some critics call it unsecure,
    which was right at a certain period of time, but now, Android is a mature operating
    system with a high-level secure architecture. It is said that the newest version
    of Android (that is, Jelly Bean) is the most secure operating system that Google
    has ever produced. Let's move forward with an overview of the different versions
    of the Android OS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓是一个基于Linux的操作系统，因此它是一款开源软件。谷歌将其许可协议在Apache许可协议下发布。安卓代码的可用性使得它成为一个易于修改的操作系统，供应商也可以对其进行定制。由于其高度灵活的设计，一些批评者称它不安全，在一段时间内这是正确的，但现在，安卓已经是一个具有高级安全架构的成熟操作系统。据说最新的安卓版本（即果冻豆）是谷歌有史以来生产的最安全的操作系统。下面让我们通过了解不同版本的安卓操作系统来进一步了解。
- en: Exploring the different versions of Android
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索不同的安卓版本
- en: Since the beginning, Android has been transforming itself with the release of
    different versions. Not just UI but many features were added, modified, and enhanced
    in each upcoming version. The first version to officially use the name of a dessert
    was Android Cupcake 1.5, which was based on Linux 2.6.27\. Every new Android version
    comes with a new set of API levels, which basically revises the previous API with
    some modification, obsoleteness, and addition of new controls.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自从发布以来，安卓通过不同版本的发布一直在进行自我转变。不仅仅是UI，每个新版本都增加了许多功能，进行了修改和增强。第一个正式使用甜点名称的版本是安卓1.5纸杯蛋糕，基于Linux
    2.6.27。每个新的安卓版本都伴随着一组新的API级别，这基本上是对以前的API进行一些修改，过时处理，以及新增新的控件。
- en: Releasing new versions of Android brings some obsoleteness in the previous methods/functions
    from a developer's point of view. However, this will bring warnings but not errors;
    you can still use previous method calls in new API Levels as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，发布安卓新版本带来了一些旧方法/功能的过时。然而，这将带来警告而不是错误；你仍然可以在新的API级别中使用以前的方法调用。
- en: 'The following table shows the different Android versions with their API Levels
    and major highlights:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了不同安卓版本及其API级别和主要亮点：
- en: '| Android version | Version name | Main features | API level | Release date
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 安卓版本 | 版本名称 | 主要功能 | API级别 | 发布日期 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Android 4.1/4.2/4.3 | Jelly Bean | Google NowVoice-to-searchLock screen widgetsSpeed
    enhancementsGesture typing in keyboardSecure USB debugging (for developers only)OpenGLES
    3.0 supportImproved camera user interfaceRight-to-left languages support | 16,
    17, and 18 | July 9, 2012, November 13, 2012, and July 24, 2013 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 安卓4.1/4.2/4.3 | 果冻豆 | 谷歌即时语音搜索锁屏小部件速度提升键盘中的手势输入（仅限开发者）安全的USB调试OpenGLES 3.0支持改进的相机用户界面从右至左语言支持
    | 16, 17 和 18 | 2012年7月9日，2012年11月13日，2013年7月24日 |'
- en: '| Android 4.0 | Ice Cream Sandwich | Major UI changesEnhanced lock screen actionsScreen
    orientation animationEmail app with EAS v14Facial unlockEnhanced web browserSupport
    of tablet and cell phones | 14 and 15 | October 19, 2011 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 安卓 4.0 | Ice Cream Sandwich | 重大UI变化增强锁屏操作屏幕方向动画带EAS v14的邮件应用面部解锁增强的网页浏览器支持平板和手机
    | 14和15 | 2011年10月19日 |'
- en: '| Android 3.x | Honeycomb | First OS for tabletsAddition of system bar and
    action barQuick access to camera and its featuresTwo pane email UI viewMulti-core
    support | 11, 12, and 13 | February 22, 2011 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 安卓 3.x | Honeycomb | 首个为平板设计的操作系统增加系统栏和动作栏快速访问相机及其功能双窗格邮件UI视图多核支持 | 11、12和13
    | 2011年2月22日 |'
- en: '| Android 2.3 | GingerBread | Enhanced UINative VoIP/SIP supportGoogle Talk
    and Google WalletVideo call support | 9 and 10 | December 6, 2010 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 安卓 2.3 | GingerBread | 增强的UI原生VoIP/SIP支持Google Talk和Google Wallet视频通话支持 |
    9和10 | 2010年12月6日 |'
- en: '| Android 2.2 | Froyo | Speed improvementsUSB tetheringJIT implementation |
    8 | May 20, 2010 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 安卓 2.2 | Froyo | 提升了速度USB网络共享JIT实现 | 8 | 2010年5月20日 |'
- en: '| Android 2.0/2.1 | Eclair | Updated UILive wallpaperBluetooth 2.1 | 5, 6,
    and 7 | January 12, 2010 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 安卓 2.0/2.1 | Eclair | 更新的UI动态壁纸蓝牙 2.1 | 5、6和7 | 2010年1月12日 |'
- en: '| Android 1.6 | Donut | Gesture recognition | 4 | September 15, 2009 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 安卓 1.6 | Donut | 手势识别 | 4 | 2009年9月15日 |'
- en: '| Android 1.5 | Cupcake | Text prediction in keyboardRecord and watch videos
    | 3 | April 30, 2009 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 安卓 1.5 | Cupcake | 键盘文本预测录制和观看视频 | 3 | 2009年4月30日 |'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is an interesting fact that the versions of Android are in alphabetical order.
    Starting off from Apple Pie 1.0 and then Banana Bread 1.1, it made its way towards
    Jelly Bean with a complete coherence of alphabetical sequence, and by maintaining
    the legacy; the next version expected will be Key Lime Pie.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，安卓系统的版本是按字母顺序排列的。从Apple Pie 1.0开始，然后是Banana Bread 1.1，按字母顺序连贯地发展到了Jelly
    Bean，并保持了这一传统；预计下一个版本将是Key Lime Pie。
- en: As it is mentioned earlier that Android is open for modifications by the vendor
    due to its open-sourced nature, many famous mobile manufacturers put their own
    customized versions of Android in their phones. For example, Samsung made a custom
    touch interface over Android and calls it TouchWiz (Samsung Galaxy S4 comes with
    TouchWiz Nature UX 2.0). Similarly, HTC and Sony Xperia came up with their own
    custom user interface and called it HTC Sense and TimeScape respectively.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，由于安卓的开源性质，厂商可以对其进行修改，许多著名的手机制造商都在自己的手机中安装了定制版的安卓系统。例如，三星在安卓上制作了自定义触摸界面，称之为TouchWiz（三星Galaxy
    S4配备了TouchWiz Nature UX 2.0）。同样，HTC和索尼Xperia也推出了自己的定制用户界面，分别称之为HTC Sense和TimeScape。
- en: '![Exploring the different versions of Android](img/9639_01_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![探索不同版本的安卓系统](img/9639_01_01.jpg)'
- en: Google Play – the official app store for Android
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Play – 安卓官方应用商店
- en: Just like any other famous mobile operating systems, Android has its app store
    known as Google Play. Previously, the app store was called Android Market, which,
    at the start of the year 2012, became Google Play with a new-and-improved user
    experience. The update unified the whole entertainment world under the umbrella
    of Google Play. Music, apps, books, and movies, all became easily accessible to
    the users just like Apple's famous App Store (iTunes). You can find detailed information
    about the Android store at [http://play.google.com/about/](http://play.google.com/about/).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他著名的移动操作系统一样，安卓也有自己的应用商店，名为Google Play。此前，应用商店被称为Android Market，在2012年初，更名为Google
    Play，用户体验得到了新的改进。该更新将整个娱乐世界统一在Google Play之下。音乐、应用、书籍和电影，都变得像苹果著名的App Store（iTunes）一样易于用户访问。您可以在[http://play.google.com/about/](http://play.google.com/about/)上详细了解安卓商店的信息。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Google Movies & TV, Google Music, Google Books, and Google Magazines are only
    available in limited countries.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Google Movies & TV、Google Music、Google Books和Google Magazines仅在部分国家可用。
- en: Google Play provides a wide range of applications, movies, e-books, and music.
    Recently, they also introduced the Google Play TV facility under the same app
    store. Talking about the application side, Google Play provides different categories
    in which a user can select applications. It ranges from games to comics and social
    apps. Users can enjoy many paid applications and can unlock many features by in-app
    billing services provided by Google Play.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play提供各种应用、电影、电子书和音乐。最近，他们还在同一应用商店下推出了Google Play TV服务。谈到应用方面，Google
    Play提供了不同的类别供用户选择应用。从游戏到漫画，再到社交应用，应有尽有。用户可以享受许多付费应用，并通过Google Play提供的应用内购买服务解锁许多功能。
- en: There are different vendor specific app stores as well, such as Kindle's Amazon
    App Store, Nook Store, and many others that provide many applications under their
    own terms and conditions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 还有不同的厂商特定的应用商店，如Kindle的亚马逊应用商店、Nook商店等，它们根据自身的条款和条件提供许多应用程序。
- en: Understanding the whys and whens of Android
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Android的为何与何时
- en: Android is a Linux-based open source operating system, primarily targeted for
    touch screen mobiles and tablets. Andy Rubin, Rich Miner, Nick Sears, and Chris
    White founded the operating system in October 2003\. The basic intention behind
    the idea of Android was to develop an operating system for digital content. This
    was because, at that time, mobiles were using Symbian and Windows Mobile as their
    operating systems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Android是基于Linux的开源操作系统，主要针对触屏手机和平板电脑。安迪·鲁宾、Rich Miner、Nick Sears和Chris White在2003年10月创立了这个操作系统。Android背后的基本意图是开发一个用于数字内容的操作系统。这是因为当时，手机使用的操作系统是Symbian和Windows
    Mobile。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: iPhone was released in June 2007 by Apple Inc. Android was released in November
    2007 by Google Inc.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 2007年6月，苹果公司推出了iPhone。2007年11月，谷歌公司推出了Android。
- en: However, when they realized that there is not much of a market for devices such
    as cameras, they diverted their attention to mobile phones against Symbian and
    Windows Mobile. iPhone was not on the market then. Android Inc., a top brand for
    smart phone operating systems covering 75 percent of market share as of today
    in smartphones, was running secretly at that time. They revealed nothing to the
    market except that they were working on software for mobile phones. That same
    year, Rubin, the co-founder of Android, ran out of money, and his close friend,
    Steve Perlman, brought him $10,000 cash in an envelope.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当他们意识到像相机这样的设备市场并不大时，他们将注意力转向了对抗Symbian和Windows Mobile的手机。当时iPhone还没有上市。作为当今智能手机操作系统市场的佼佼者，占据75%市场份额的Android
    Inc.当时还在秘密运行。除了他们在开发手机软件之外，没有向市场透露任何信息。同年，Android的联合创始人鲁宾资金耗尽，他的好朋友Steve Perlman给他带来了一封装有10,000美元现金的信封。
- en: In August 2005, Google Inc. acquired Android Inc., making it a subsidiary of
    Google Inc. The primary employees of Android stayed in Android Inc. after acquisition.
    Andy Rubin developed a mobile device platform powered by Linux Kernel. Handset
    makers and carriers were being promised a flexible and upgradeable operating system
    by Google. As Google was not releasing any news about Android in the media, rumors
    started to spread around. Speculations spreading around included Google is developing
    Google branded handsets and Google is defining cell phone prototypes and technical
    specifications. These speculations and rumors continued until December 2006.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年8月，谷歌公司收购了Android Inc.，使其成为谷歌公司的子公司。收购后，Android的主要员工留在了Android Inc.。安迪·鲁宾开发了一个由Linux内核提供支持的移动设备平台。谷歌向手机制造商和运营商承诺提供一个灵活且可升级的操作系统。由于谷歌没有在媒体上发布关于Android的消息，谣言开始传播。流传的猜测包括谷歌正在开发谷歌品牌的手机，谷歌正在定义手机原型和技术规格。这些猜测和谣言一直持续到2006年12月。
- en: Later, in November 2007, Open Handset Alliance revealed that their goal was
    to develop an open standard for mobile devices. Android was released as its first
    product; a mobile device platform built on Linux Kernel Version 2.6\. Open Handset
    Alliance is a consortium of 65 companies involved in mobile space advocating open
    source standards for the mobile industry.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，在2007年11月，开放手机联盟透露他们的目标是开发移动设备的开放标准。Android作为他们的首款产品发布，这是一个基于Linux内核版本2.6构建的移动设备平台。开放手机联盟是由65家参与移动领域的公司组成的联盟，倡导移动行业的开源标准。
- en: In October 2008, the very first commercially available phone deploying Android
    operating system was released by HTC, called HTC Dream. The following image shows
    HTC Dream. Since then Android is being upgraded. Google launched its nexus series
    in 2010.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年10月，首款搭载Android操作系统的商业手机由HTC推出，名为HTC Dream。下图展示了HTC Dream。自那时起，Android一直在进行升级。谷歌在2010年推出了nexus系列。
- en: '![Understanding the whys and whens of Android](img/9639_01_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![理解Android的为何与何时](img/9639_01_02.jpg)'
- en: HTC Dream, the First Android phone using Android Activity back stack
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: HTC Dream，首款使用Android Activity堆栈的Android手机
- en: The evolution of Android OS
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android操作系统的演变
- en: After the first appearance of Android OS in HTC Dream, it gained rapid popularity
    among consumers. Android is continuously being upgraded by Google. Each major
    release includes bug fixes from the last release and new features.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓操作系统在HTC Dream首次亮相后，迅速在消费者中获得了普及。谷歌不断升级安卓系统。每个主要版本都包括修复上一个版本的bug和新增功能。
- en: Android released its first version in September 2008 in the device HTC Hero.
    Android 1.1 was an update tweaking bugs and issues, with no major release. After
    Android 1.1, Android 1.5 named Cupcake, was released with features such as video
    uploading, text prediction, and so on. Android 1.6 Donut and Android 2.0/2.1 Éclair
    released at the end of 2009, followed by 2.1 in January 2010, introduced major
    updates such as Google Maps, enhanced photo video capabilities, Bluetooth, multi-touch
    support, live wallpapers, and more. In May 2010, Android 2.2 named as Frozen Yogurt,
    or Froyo, was the major release, adding support for Wi-Fi hotspot connectivity.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓在2008年9月发布了第一个版本，设备为HTC Hero。安卓1.1是一个修复了bug和问题的更新，没有主要版本发布。在安卓1.1之后，发布了名为Cupcake的安卓1.5版本，增加了视频上传、文本预测等功能。2009年底发布了安卓1.6
    Donut和安卓2.0/2.1 Éclair版本，2010年1月发布的2.1版本引入了包括Google Maps、增强的照片视频功能、蓝牙、多点触控支持、动态壁纸等重大更新。2010年5月，名为Frozen
    Yogurt（或Froyo）的安卓2.2版本成为主要发布，增加了对Wi-Fi热点连接的支持。
- en: This version became very popular among developers, and is used to be the minimum
    API level for android apps. Android 2.3 Gingerbread, released in May 2010 introduced
    the Near Field Communication (NFC) capability, which allowed users to perform
    tasks such as mobile payments and data exchange. This version of Android became
    the most popular version among developers. Android 3.0/3.1 Honeycomb, was specially
    optimized for tablet devices, and more UI control for developers was a big plus.
    Android 4.0 Ice Cream Sandwich was released in October 2011\. Since Android 3.0/3.1
    was only for tablets, the Ice Cream Sandwich release overhauled the gap, and was
    supported by both mobile phones and tablets. The latest release of Android, Android
    4.2 Jelly Bean further polished the UI, refined the software, among other improvements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本在开发者中变得非常流行，通常被用作安卓应用的最小API级别。2010年5月发布的安卓2.3 Gingerbread版本引入了近场通信（NFC）功能，允许用户执行如移动支付和数据交换等任务。这个版本的安卓成为了开发者中最受欢迎的版本。专为平板设备优化的安卓3.0/3.1
    Honeycomb版本，为开发者提供了更多的UI控制，这是一个很大的优势。2011年10月发布的安卓4.0 Ice Cream Sandwich版本。由于安卓3.0/3.1仅适用于平板电脑，Ice
    Cream Sandwich版本弥补了这一差距，同时支持手机和平板电脑。最新的安卓版本，安卓4.2 Jelly Bean进一步提升了UI，优化了软件，还有其他改进。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Google started naming Android versions after sugar treats, in alphabetical order,
    after Android 1.1 version.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌从安卓1.1版本开始，按照字母顺序以甜点命名安卓版本。
- en: 'The following image shows all the versions in a visual format:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下图以视觉格式展示了所有版本：
- en: '![The evolution of Android OS](img/9639_01_03.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![安卓操作系统的演变](img/9639_01_03.jpg)'
- en: 'The following screenshot shows the current distribution (March 2013) of Android
    versions. It is clear from the screenshot that Android 2.3 Gingerbread is the
    most popular version, followed by Android Ice Cream 4.0:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了2013年3月安卓版本的当前分布情况。从截图中可以看出，安卓2.3 Gingerbread是最受欢迎的版本，其次是安卓4.0 Ice Cream版本。
- en: '![The evolution of Android OS](img/9639_01_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![安卓操作系统的演变](img/9639_01_04.jpg)'
- en: Current distributions of Android versions
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓版本的当前分布
- en: Official IDE from Google – the Android Studio
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌官方IDE - 安卓工作室
- en: Before Google I/O 2013, Android was officially using Eclipse as an IDE for its
    development. Official Android Support clearly mentioned about the use of this
    IDE along with the **Android Development Tools** (**ADT**) and **Android Software
    Development Kit** (**SDK**) with its documentation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在2013年谷歌I/O大会之前，安卓官方一直使用Eclipse作为其开发IDE。官方安卓支持明确提到了这款IDE与**安卓开发工具**（**ADT**）和**安卓软件开发工具包**（**SDK**）及其文档的使用。
- en: '![Official IDE from Google – the Android Studio](img/9639_01_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![谷歌官方IDE - 安卓工作室](img/9639_01_05.jpg)'
- en: Loading Screen for Android Studio (Windows 7)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓工作室（Windows 7）的加载屏幕
- en: In Google I/O 2013, Google came up with a new IDE that is specially designed
    for the development of Android Apps. The IDE is called Android Studio, which is
    an IntelliJ-based software that provides promising features to the developers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在2013年的谷歌I/O大会上，谷歌推出了一款专为安卓应用开发设计的新IDE。这个IDE被称为Android Studio，它是一款基于IntelliJ的软件，为开发者提供了许多有前景的功能。
- en: Features of Android Studio
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安卓工作室的特点
- en: 'Android Studio gives various features on top of an IntelliJ-based IDE. The
    list of features that are introduced in Android Studio is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 在 IntelliJ-based IDE 的基础上提供了各种功能。以下是 Android Studio 中引入的功能列表：
- en: Android Studio comes with built-in Android Development Tools
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio 内置了 Android 开发工具
- en: Android Studio gives Gradle-based support for the build
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio 提供基于 Gradle 的构建支持
- en: Flexible controls for building an Android UI and simultaneous views on different
    screen sizes
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于构建 Android UI 的灵活控制，并支持不同屏幕尺寸的同步视图
- en: Android refactoring, quick fixes, and tips and tricks
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 重构、快速修复以及技巧和窍门
- en: Advance UI maker for Android apps with drag-and-drop functionality
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有拖放功能的 Android 应用高级 UI 制作工具
- en: 'The following screenshot shows the Android Studio multi-screen viewer with
    UI maker:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了带有 UI 制作器的 Android Studio 多屏幕查看器：
- en: '![Features of Android Studio](img/9639_01_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio 的功能](img/9639_01_06.jpg)'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: The current version of Android Studio is v0.1.1.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 Android Studio 的版本是 v0.1.1。
- en: Apart from that, there are various other features that are offered by Android
    Studio. Google mentioned in the launch that the version (v0.1) is unstable and
    needs various fixes before it can be used with its 100 percent accuracy.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Android Studio 还提供了许多其他功能。谷歌在发布时提到，版本（v0.1）不稳定，需要在进行 100% 准确使用之前进行各种修复。
- en: Limitations of Android Studio
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android Studio 的限制
- en: 'Android Studio is in the early phase, which makes it an immature software with
    limitations. According to Google, they are working on the updates of the software
    and soon will rectify the issues. As per Version 0.1.1,the limitations faced by
    the developers are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 处于早期阶段，这使得它成为一款成熟度低且有限制的软件。根据谷歌的说法，他们正在努力更新该软件，并很快将纠正这些问题。在版本
    0.1.1 中，开发者面临的问题如下：
- en: Android Studio can only be compiled with Android 4.2 Jelly Bean
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio 只能编译为 Android 4.2 Jelly Bean
- en: The user interface can only be made with Android 4.2 Jelly Bean UIs and widgets
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面只能使用 Android 4.2 Jelly Bean 的 UI 和小部件来制作
- en: An Eclipse project cannot be directly imported on Android Studio (refer to [http://developers.android.com/](http://developers.android.com/))
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse 项目不能直接导入到 Android Studio（参考 [http://developers.android.com/](http://developers.android.com/)）
- en: Bugs in importing library projects
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入库项目时的错误
- en: Building blocks of an Android application
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 应用的构建块
- en: An Android application consists of various building blocks that help developers
    to keep things organized. It gives flexibility to maintain assets, pictures, animations,
    movie clips, and implement the localization functionality. Moreover, there are
    some components that contain the information regarding the minimum and maximum
    versions of Android that your application supports. Similarly, menus are separately
    handled in Android application projects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Android 应用由多种构建块组成，帮助开发者保持事物的组织性。它提供了维护资产、图片、动画、视频片段以及实现本地化功能的灵活性。此外，还有一些组件包含有关您的应用程序支持的最小和最大
    Android 版本的信息。同样，菜单在 Android 应用项目中是单独处理的。
- en: '![Building blocks of an Android application](img/9639_01_07.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Android 应用的构建块](img/9639_01_07.jpg)'
- en: Various components of an Android application as shown in Android Studio
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中显示的 Android 应用程序的各种组件
- en: 'Just like Eclipse IDE, Android Studio gives various handy functionalities to
    play with these features. Looking forward to the building blocks of the Android
    application, we can classify the components into the following parts:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Eclipse IDE 类似，Android Studio 提供了各种便捷的功能来操作这些特性。展望 Android 应用的构建块，我们可以将这些组件分为以下部分：
- en: Coding components
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码组件
- en: Media components
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体组件
- en: XML components
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML 组件
- en: Referencing components
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用组件
- en: Library components
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库组件
- en: Coding components
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码组件
- en: Breaking into components brings an easy understanding of the structure of an
    Android application. Coding components are those that directly relate to the source
    code of an Android project. In order to write an application, a developer needs
    to write some lines of code that will respond in the way the user wants.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将组件分解有助于更容易理解 Android 应用的结构。编码组件与 Android 项目的源代码直接相关。为了编写应用程序，开发者需要编写一些代码，以响应用户的期望。
- en: In coding components, the main folder that holds all of the developer's code
    is `src`. The folder consists of one or more Java packages in which developers
    classify their code in accordance with the type of work done. The default way
    to write a package name is dot separated (for example, `com.app.myapplicationproject`),
    which can easily distinguish it from any other package of any other project.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码组件中，保存所有开发者代码的主要文件夹是`src`。该文件夹包含一个或多个Java包，开发者根据所完成工作的类型对代码进行分类。编写包名称的默认方式是用点分隔（例如，`com.app.myapplicationproject`），这样可以轻松将其与其他任何项目的任何其他包区分开来。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Android application's package name is used to identify it uniquely on Google
    Play.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序的包名称用于在Google Play上唯一标识它。
- en: Inside the packages there are `.java` files that are present for the developer
    to reference from the Android library and proceed to the desirable output. These
    Java classes may be or may not be inherited from the Android API. We can also
    use most of the Java functions in writing our code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些包内，有`.java`文件，供开发者从Android库引用并继续到期望的输出。这些Java类可能继承自Android API，也可能不继承。我们还可以在编写代码时使用大多数Java函数。
- en: Media components
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 媒体组件
- en: 'Due to highly configured hardware, users need applications with good graphics,
    animations, sounds, and video files. Hence, you can easily introduce any of them
    but it should be made sure that none of them should affect the quality of the
    app as there are thousands of different types of Android devices available. Android
    provides a flexible method that you can use to place your media files within the
    project. By classification, there are two ways of maintaining your media files
    inside an application project:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于高度配置的硬件，用户需要具有良好图形、动画、声音和视频文件的应用程序。因此，你可以轻松引入任何一种，但应确保它们都不应影响应用程序的质量，因为市面上有数千种不同类型的Android设备。Android提供了一种灵活的方法，你可以使用它将媒体文件放置在项目内。按分类，有两种在应用程序项目中维护媒体文件的方法：
- en: Assets folder
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Assets`文件夹'
- en: Res folder
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res`文件夹'
- en: The assets folder
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Assets`文件夹'
- en: An Android project contains a folder named `assets`. This folder is responsible
    for holding all of the media files, including music, images, and so on. The developer
    can directly access the folder from the code by writing the `getAssets()` function
    within the inherited `Activity` class. This function returns the `AssetManager`
    that can easily be used to access the subfolders and files inside the main `assets`
    folder.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Android项目包含一个名为`assets`的文件夹。这个文件夹负责保存所有媒体文件，包括音乐、图片等。开发者可以通过在继承的`Activity`类中编写`getAssets()`函数直接从代码访问文件夹。这个函数返回`AssetManager`，可以轻松地用来访问主`assets`文件夹内的子文件夹和文件。
- en: The main advantage of the `assets` folder is that there is no need to keep references
    for the files placed, which is very handy in the situation where the developer
    needs to do a test and make a runtime change. Though it does not have any reference,
    it may introduce errors due to typing mistakes. Another advantage of using assets
    is that the developer can arrange folders according to his or her will; similarly,
    the naming conventions for these folders can easily be chosen according to the
    ease of the developer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`assets`文件夹的主要优点是无需为放置的文件保持引用，这对于开发者需要进行测试和运行时更改的情况非常方便。尽管它没有任何引用，但由于输入错误，它可能会引入错误。使用资源的另一个优点是开发者可以根据自己的意愿来安排文件夹；同样，这些文件夹的命名约定也可以根据开发者的方便轻松选择。'
- en: The res folder
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`res`文件夹'
- en: The `res` folder is used to manage an application's resources such as media
    files, images, user interface layouts, menus, animation, colors, and strings (text)
    in an Android application; or in other words, you can say that this is the most
    intelligent way of handling the media files. It consists of many subfolders including
    `drawable`, `drawable-ldpi`, `drawable-mdpi`, `drawable-hdpi`, `drawable-xhdpi`,
    `drawable-xxhdpi`, `raw`, `layout`, `anim`, `menu`, and `values`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`res`文件夹用于管理Android应用程序中的应用程序资源，如媒体文件、图片、用户界面布局、菜单、动画、颜色和字符串（文本）；换句话说，你可以认为这是处理媒体文件的最智能方式。它包括许多子文件夹，如`drawable`、`drawable-ldpi`、`drawable-mdpi`、`drawable-hdpi`、`drawable-xhdpi`、`drawable-xxhdpi`、`raw`、`layout`、`anim`、`menu`和`values`。'
- en: '**Drawable** is directly related to the images that are used in the Android
    project. It is an intelligent way of keeping images in the project. As we know
    that there are various types of devices present in the market that support Android
    OS. In order to differentiate between these devices, the low resolution images
    are placed in the `ldpi` folder for the devices with less resolution. Similarly,
    the `mdpi` folder is for the device with medium screen density, `hdpi` for high
    density, `xhdpi` for extra high density, and so on.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Drawable**与Android项目中使用的图片直接相关。这是一种在项目中保存图片的智能方式。我们知道市场上存在各种支持Android OS的设备。为了区分这些设备，低分辨率的图片被放在`ldpi`文件夹中，供低分辨率设备使用。同样，`mdpi`文件夹适用于中等屏幕密度的设备，`hdpi`适用于高密度设备，`xhdpi`适用于超高密度设备，依此类推。'
- en: Tip
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The images placed in these drawable folders should be uniquely named in order
    to access them with a single reference from the code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 放在这些drawable文件夹中的图片应该有唯一的名称，以便从代码中通过单一引用来访问它们。
- en: Similarly, for placing music and sound contents, we use the `raw` folder in
    order to access them from the code. Any other file apart from the music and sound
    can also be placed in the `raw` folder (for example, the JSON file). The same
    goes with `anim`, `values`, `menus`, and `layout` folders for placing the animations,
    values, custom menus, and different types of layouts respectively.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，为了放置音乐和声音内容，我们使用`raw`文件夹以便从代码中访问它们。除了音乐和声音之外，任何其他文件也可以放在`raw`文件夹中（例如，JSON文件）。`anim`、`values`、`menus`和`layout`文件夹也是如此，分别用于放置动画、值、自定义菜单和不同类型的布局。 '
- en: XML components
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML组件
- en: In Android, a developer needs to use XML in order to make the user interface.
    Layouts, Menus, Sub Menus, and many other things are defined in the form of different
    Android tags based on XML. Apart from layouts, you can also store strings, color
    codes, and many other things in the form of XML files. The component supports
    the maintenance of the hierarchy of the application and makes it easy to understand
    for all developers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，开发者需要使用XML来创建用户界面。布局、菜单、子菜单以及许多其他内容都是以不同的Android标签形式基于XML定义的。除了布局，你还可以以XML文件的形式存储字符串、颜色代码等许多其他内容。该组件支持维护应用程序的层次结构，使所有开发者易于理解。
- en: Let's take a look at some of the most important XML files that are used as the
    backbone of any Android application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下一些最重要的XML文件，它们是任何Android应用程序的支柱。
- en: The layout folder
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布局文件夹
- en: Inside the `res` folder, there is a folder called `layout` that contains all
    the layouts of activities. It is to be noted that there are some extensions of
    this folder, just like the drawable folders. The `layout-land` and `layout-port`
    methods are specifically used for keeping the layout well organized in landscape
    and portrait mode respectively.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在`res`文件夹内，有一个名为`layout`的文件夹，其中包含了所有活动的布局。需要注意的是，这个文件夹也有一些扩展，就像drawable文件夹一样。`layout-land`和`layout-port`方法分别用于在横屏和竖屏模式下保持布局的良好组织。
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: XML can also be used for making custom drawables that can be used as images
    in different scenarios. For example, the image of the custom button can be made
    with XML, which gives a different UI behavior on clicked and non-clicked states.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: XML还可以用于创建自定义drawable，这些drawable可以在不同场景下作为图片使用。例如，可以使用XML制作自定义按钮的图片，它会在点击和未点击状态下呈现不同的UI行为。
- en: The preceding screenshot is of Android Studio where you can see an `activity_main.xml`
    file that is used to describe the layout of an activity. There are some Android-defined
    XML tags for `RelativeLayout` and `TextView` (read the following information box).
    Similarly, there are some other tags as well that are available for the developer
    to include different kinds of widgets in the layout.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图是Android Studio的界面，你可以看到一个`activity_main.xml`文件，该文件用于描述一个活动的布局。有一些Android定义的XML标签用于`RelativeLayout`和`TextView`（阅读下面的信息框）。同样，还有一些其他标签供开发者使用，以便在布局中包含不同类型的控件。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`RelativeLayout` is a layout in which children are placed to the relative positions.
    This layout is often used by Android mobile developers.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`RelativeLayout`是一个布局，其中子元素按照相对位置进行放置。这个布局经常被Android移动开发者使用。'
- en: '`TextView` is one of the views that is used to display any kind of text including
    numbers, strings, and editables.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextView`是用于显示文本（包括数字、字符串和可编辑内容）的视图之一。'
- en: The menu folder
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 菜单文件夹
- en: 'Android comes with different kind of menus that can be used in order to give
    quick access to the prominent functionalities that are used within an activity.
    The different menus available are as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了不同类型的菜单，以便在活动中快速访问常用的功能。可用的不同菜单如下：
- en: Context menus
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文菜单
- en: Options menus (with an action bar)
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项菜单（带操作栏）
- en: Pop-up menus
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹出菜单
- en: Custom menus
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义菜单
- en: 'Due to the limited focus of this chapter, we cannot completely elaborate on
    the functionality and give examples of the different types of menus. However,
    all types of menus are based on XML files in which Android-defined tags such as
    `<menu>`, `<item>`, and `<group>` are used to introduce menus in the application.
    See the following screenshot for reference:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章的重点有限，我们无法完全展开讨论各种菜单的功能并给出示例。然而，所有类型的菜单都基于XML文件，在这些文件中，使用Android定义的标签如`<menu>`、`<item>`和`<group>`来引入应用程序中的菜单。以下截图供参考：
- en: '![The menu folder](img/9639_01_08.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![菜单文件夹](img/9639_01_08.jpg)'
- en: The Android ICS Options menu is on left and the Custom Pop Up menu is on the
    right
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Android ICS选项菜单在左侧，自定义弹出菜单在右侧
- en: The values folder
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`values`文件夹'
- en: The `values` folder consists of various XML files that can be used by the developer
    in many scenarios. The most common files for this folder are `styles.xml` and
    `strings.xml`. The `style` file consists of all the tags that are related to the
    style of any UI. Similarly, the `strings.xml` file consists of all the strings
    that are used in the source code of any Android project. Apart from that, the
    `strings.xml` file also contains the `<color>` tagged hash-coding, which is used
    to identify many colors inside the source code of an Android application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`values`文件夹包含各种XML文件，开发者在许多场景下都可以使用它们。这个文件夹中最常见的文件是`styles.xml`和`strings.xml`。`style`文件包含与任何UI样式相关的所有标签。同样，`strings.xml`文件包含在Android项目的源代码中使用的所有字符串。除此之外，`strings.xml`文件还包含`<color>`标签的哈希编码，用于在Android应用程序的源代码中识别许多颜色。'
- en: AndroidManifest.xml
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AndroidManifest.xml
- en: Unlike the previously mentioned folders, `AndroidManifest.xml` is a file that
    contains important information about the Android application. The manifest file
    consists of various tags such as `<application>`, `<uses-sdk>`, `<activity>`,
    `<intent-filter>`, `<service>`, and many other tags that are enclosed within the
    main tag of `<manifest>`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面提到的文件夹不同，`AndroidManifest.xml`是一个包含关于Android应用程序重要信息的文件。清单文件由各种标签组成，如`<application>`、`<uses-sdk>`、`<activity>`、`<intent-filter>`、`<service>`等，它们都被包含在`<manifest>`主标签内。
- en: Just like the tags suggest, this XML file contains all the information about
    activities, services, SDK versions, and everything that is related to the application.
    There are various errors that may arise if you don't enter the correct information
    or miss anything in the `AndroidManifest.xml` file.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如标签所示，这个XML文件包含了关于活动、服务、SDK版本以及与应用程序相关的所有信息。如果你在`AndroidManifest.xml`文件中输入的信息不正确或遗漏了任何内容，可能会出现各种错误。
- en: Another major advantage of the `AndroidManifest.xml` file is that it is the
    best way to track the structure of any Android application. The total number of
    activities, services, and receivers can be seen easily by this file. Apart from
    that, we can change the styles, fonts, SDK constraints, screen-size restrictions,
    and many other features just by tweaking the `AndroidManifest.xml` file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`文件的另一个主要优点是，它是跟踪任何Android应用程序结构最佳方式。通过这个文件，可以轻松查看活动、服务和接收器的总数。除此之外，我们只需调整`AndroidManifest.xml`文件，就可以更改样式、字体、SDK限制、屏幕尺寸限制以及许多其他功能。'
- en: At the time of signing the `.apk` build, we mention the package name, version
    name, and version code, which are uniquely identified by the Google Play in order
    to put the application on the market. The application will then be identified
    by this package name and further releases are based on changing the version codes
    and version name described inside the `AndroidManifest.xml` file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在签名`.apk`构建时，我们会提到包名、版本名称和版本代码，Google Play通过这些信息来唯一标识应用程序并将其发布到市场。应用程序将通过这个包名被识别，后续的发布基于在`AndroidManifest.xml`文件中更改版本代码和版本名称。
- en: '![AndroidManifest.xml](img/9639_01_09.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![AndroidManifest.xml](img/9639_01_09.jpg)'
- en: Referencing components
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用组件
- en: Another basic component of an Android application is the referencing component.
    Put simply this component helps XML-based files to interact with the Java code.
    In Android Studio, the file `R.java` is placed under the source folder, which
    is the child of the build folder in the project hierarchy. The `R.java` file consists
    of all the references that are used in the XML files for layout, menus, drawables,
    anim, and so on. This file is then exposed to the activity files to get the references
    and obtain the objects to perform various functions and parameters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓应用程序的另一个基本组件是引用组件。简单来说，这个组件帮助基于XML的文件与Java代码进行交互。在Android Studio中，`R.java`文件位于源文件夹下，该文件夹是项目层次结构中构建文件夹的子文件夹。`R.java`文件包含了所有在XML文件中用于布局、菜单、可绘制资源、动画等的引用。然后，此文件向活动文件公开，以获取引用并获取执行各种功能和参数的对象。
- en: Mostly, this `R.java` file is obtained as a part of the project import and used
    as `R.layout.main`. In this example, it clearly means that we need to obtain a
    layout that is a part of the `res` layout folder and the name of the layout is
    `main`. As a result, it will return a resource ID, which is hidden from the developer
    and directly referenced to the particular layout inside the `res` folder.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这个`R.java`文件是作为项目导入的一部分获得的，并用作`R.layout.main`。在这个例子中，它清楚地表明我们需要获取`res`布局文件夹中的一个名为`main`的布局。因此，它将返回一个资源ID，这个ID对开发者是隐藏的，并直接引用`res`文件夹中的特定布局。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `R.java` file is automatically generated while building the project. Hence,
    it should not be pushed into the repository. Ensure the content of the `R.java`
    file is not modified manually. The `R.java` file that exists in the `gen` folder
    of your project is defined by Android at the time of project making or compiling.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建项目时，`R.java`文件会自动生成。因此，它不应该被推送到仓库中。确保不要手动修改`R.java`文件的内容。项目`gen`文件夹中存在的`R.java`文件是在项目创建或编译时由安卓定义的。
- en: Library components
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库组件
- en: Libraries are pre-built Java files/projects that can be used by anyone to perform
    certain tasks inside this application. There are various third-party paid/unpaid
    libraries available that give various functionalities to the developer. Library
    components are not libraries themselves; rather, they are the project folders
    in which the libraries are kept.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 库是预构建的Java文件/项目，任何人都可以使用它们在应用程序内执行特定任务。有许多第三方付费/免费的库，为开发者提供各种功能。库组件本身不是库；它们是保存库的项目文件夹。
- en: In an Android project, a folder named `libs` is present inside the main application
    folder (Android Studio), which is used as a library component. Any `.jar` library
    file can be put under this folder in order to reference it from the code. While
    using those libraries inside the Java code, you need to import the corresponding
    package name that is present inside the `.jar` file in order to use the functions
    of that particular class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在安卓项目中，主应用文件夹（Android Studio）内有一个名为`libs`的文件夹，用作库组件。任何`.jar`库文件都可以放在这个文件夹下，以便从代码中引用。在使用这些库的Java代码中，需要导入`.jar`文件中存在的相应包名称，才能使用该特定类的功能。
- en: Similarly, you can use any other Android project as a library by making it a
    module and importing it inside your project. This functionality was previously
    called as Library Project in Eclipse, imported by **Project Properties** | **Android**
    | **Library Reference**.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以通过将其他安卓项目作为一个模块并导入到你的项目中，来使用它作为库。这个功能在Eclipse中以前被称为库项目，通过**项目属性** | **安卓**
    | **库引用**进行导入。
- en: '![Library components](img/9639_01_10.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![库组件](img/9639_01_10.jpg)'
- en: The Android Studio module importing window
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓Studio模块导入窗口
- en: Android Activity lifecycle
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓活动生命周期
- en: An Android application consists of one or more activities. These activities
    are visual representations of an application in transitioning flow while performing
    the task, taking user inputs, and showing results to the user. Each activity presents
    the user with a visual representation on the screen for user interaction. Android
    keeps all the activities in a back stack following the last in, first out rule.
    Whenever a new activity is started, the current activity is pushed in the back
    stack. Thus, Android gives focus focuses on the new activity. The activity can
    take up the whole screen of the device, or it can also take part of the screen,
    or it can be dragged as well. Whether it is an activity taking the whole area
    of a screen or a small part of screen, only one activity is focused at a time
    in Android. When, any existing activity is stopped, it is pushed into the back
    stack, which in turn results the next top activity being focused.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Android应用程序由一个或多个活动组成。这些活动在执行任务、接收用户输入和向用户展示结果时的转换流程中，是应用程序的可视化表现。每个活动在屏幕上为用户提供了一个可视化的交互界面。Android按照后进先出的原则，将所有活动保存在后退栈中。每当新活动启动时，当前活动就会被推入后退栈。因此，Android将焦点转移到新活动上。活动可以占据设备的整个屏幕，也可以只占用屏幕的一部分，或者还可以被拖动。无论活动是占据整个屏幕区域还是屏幕的一小部分，在Android中一次只会有一个活动获得焦点。当任何现有活动停止时，它会被推入后退栈，这反过来又导致下一个顶部活动获得焦点。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Android 4.x versions introduced fragments. Fragments can be referred to as sub-activities,
    which are embedded in an activity to perform different tasks in a single activity
    at the same time, unlike activities.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Android 4.x版本引入了片段（Fragments）。片段可以被视为子活动，它们被嵌入到活动中，以在单个活动中同时执行不同的任务，与活动不同。
- en: Usually, an Android application consists of more than one activity. These activities
    are loosely bounded with each other. It is a good practice to create each activity
    for a specific task to be performed. For example, in a simple phone dialing application,
    there might be one activity to show all contacts, one to show full contact details
    of any specific contact, one for dialing a number, and so on. In all the applications,
    there is a main activity that behaves as the starting point of the application.
    This activity starts when the application is launched. Then this activity starts
    some other activity, which starts another, and so on. Android manages all the
    activities in a back stack.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个Android应用程序由多个活动组成。这些活动之间是松散耦合的。最佳实践是为每个要执行的具体任务创建一个活动。例如，在一个简单的电话拨号应用中，可能会有一个活动显示所有联系人，一个显示任意特定联系人的完整联系信息，一个用于拨号，等等。在所有应用中，都有一个主活动，它作为应用的启动点。当应用启动时，这个活动就会开始运行。然后这个活动会启动另一个活动，后者再启动其他活动，依此类推。Android通过后退栈管理所有活动。
- en: '![Android Activity lifecycle](img/9639_01_11.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![Android活动生命周期](img/9639_01_11.jpg)'
- en: Android Activity back stack
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Android活动后退栈
- en: The previous figure shows a simple representation of how back stack works. The
    area highlighting top activities in a stack represents foreground activity, sometimes
    called focused activity or running activity. When a new activity is created, it
    is pushed in the stack, and when any existing activity is destroyed, it is pulled
    out of the stack. This process of being pushed in the stack and pulled out of
    the stack is managed by the activity lifecycle in Android. This lifecycle is called
    Activity lifecycle. The lifecycle manages the activities in the stack and notifies
    about the changes in the state in the activities through the callback methods
    of the cycle. An activity receives different types of states such as activity
    created, activity destroyed, and so on, due to change in the state. A developer
    overrides these callback methods to perform the necessary steps for respective
    change of state. For example, when an activity is started, the necessary resources
    should be loaded, or when an activity is destroyed, those resources should be
    unloaded for better performance of the app. All these callback methods play a
    crucial role in managing the Activity lifecycle. It is the developer's choice
    to override none, some, or all methods.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示展示了后台堆栈如何工作的简单表示。堆栈中突出显示的顶部活动代表前台活动，有时也称为焦点活动或运行活动。当一个新活动被创建时，它被推入堆栈；当一个现有活动被销毁时，它从堆栈中移除。这个被推入堆栈和从堆栈中移除的过程由Android的活动生命周期管理。这个生命周期被称为活动生命周期。生命周期管理堆栈中的活动，并通过回调方法通知活动状态的变化。由于状态变化，活动会接收到诸如活动创建、活动销毁等不同类型的状态。开发者重写这些回调方法以执行相应状态变化所需的步骤。例如，当活动开始时，应加载必要的资源；当活动被销毁时，应卸载这些资源以获得更好的应用性能。所有这些回调方法在管理活动生命周期方面都扮演着关键角色。开发者可以选择不重写、重写部分或全部方法。
- en: Fundamental states of an activity
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动的基本状态
- en: 'Basically, an activity remains in three states: `Resumed`, `Paused`, and `Stopped`.
    When an activity is resumed, it is shown on the screen and gets the focus of the
    user. This activity remains in the foreground section of the back stack. When
    another activity is started and it becomes visible on the screen, then this activity
    is paused. This activity still remains on the foreground task, and it is still
    alive, but it has not gotten any user focus. It is also possible that the new
    activity partially covers the screen. In that case, the part of the paused activity
    will be visible on the screen. The activity comes in the Stopped state when it
    becomes completely invisible from the screen, and is replaced by another activity
    in the foreground. In this stopped state, the activity is still alive, but it
    is in the background section of the back stack. The difference between the paused
    and stopped states is that, in the paused state, the activity is attached to the
    window manager, but in the stopped state, it is not attached to the window manager.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，活动存在三种状态：`Resumed`（恢复），`Paused`（暂停），和`Stopped`（停止）。当活动恢复时，它显示在屏幕上并获得用户的焦点。这个活动保持在后台堆栈的前台部分。当另一个活动开始并在屏幕上可见时，这个活动就会被暂停。这个活动仍然在前台任务中，仍然存活，但它没有获得任何用户焦点。也有可能是新活动部分覆盖了屏幕。在这种情况下，暂停活动的部分仍然会在屏幕上可见。当活动完全从屏幕上消失并被前台另一个活动替换时，它进入停止状态。在这个停止状态下，活动仍然存活，但在后台堆栈的背景部分。暂停状态和停止状态之间的区别在于，在暂停状态下，活动附着在窗口管理器上，但在停止状态下，它没有附着在窗口管理器上。
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In an extremely low memory situation, an Android system can kill any paused
    or stopped activity by asking to finish it, or without asking by killing the process.
    To avoid this problem, the developer should store all the necessary data in a
    pause and stop callback, and should retrieve this data in the resume callback.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在极端低内存的情况下，Android系统可能会通过要求其完成或直接杀死进程来杀死任何暂停或停止的活动。为了避免这个问题，开发者应该在暂停和停止的回调中保存所有必要的数据，并在恢复回调中检索这些数据。
- en: The callback methods of the Activity lifecycle
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动生命周期的回调方法
- en: 'There are various callback methods that are called when the state of any activity
    is changed. Developers perform the necessary tasks and actions in these methods
    for better performance of the app. To show the Activity lifecycle in action, we
    are creating a small Android application in this section. Here is the step-by-step
    approach:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何活动的状态发生改变时，会有各种回调方法被调用。开发者在这些方法中执行必要的任务和操作，以提高应用的性能。为了展示活动生命周期的实际应用，我们将在本节中创建一个小的Android应用程序。以下是逐步操作的步骤：
- en: Start **Android Studio**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**Android Studio**。
- en: Create an empty project with the details as shown in the following screenshot:![The
    callback methods of the Activity lifecycle](img/9639_01_12.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空项目，详细信息如下截图所示：![活动的回调方法](img/9639_01_12.jpg)
- en: New Project Dialog in Android Studio
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android Studio中的新建项目对话框
- en: 'Add the following code in the `MainActivity.java` file of the project:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的`MainActivity.java`文件中添加以下代码：
- en: '[PRE0]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the project in the emulator, and you will see toasts being printed on screen
    in the following order:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器中运行项目，你会看到以下顺序在屏幕上打印提示：
- en: Activity Created
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动创建
- en: Activity Started
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动启动
- en: Activity Resumed
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动恢复
- en: Activity Paused
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动暂停
- en: Activity Stopped
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动停止
- en: Activity Destroyed
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动销毁
- en: Let us see the working of the previously mentioned code.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看之前提到的代码是如何工作的。
- en: 'When you run the project, the emulator will display all the toasts in the previously
    given order on the screen. At the start of project, an activity is created, and
    then the activity is started. After starting the activity, it is displayed on
    the screen and emulator prints **Resumed**. Now, we go back by pressing the back
    key, and the Android system prepares to finish the activity. So, the activity
    is first paused, then it is stopped, and finally it is destroyed. All these callbacks
    together are called the Activity lifecycle. Activity lifecycle starts from the
    `onCreate()` method and it stops at the `onStop()` method. The activity is visible
    from the `onStart()` method to the `onStop()` method, and the activity remains
    in foreground from the `onResume()` method to the `onPause()` method. The following
    figure shows this cycle distribution:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行项目时，模拟器将按照之前给出的顺序在屏幕上显示所有的提示。在项目开始时，会创建一个活动，然后启动该活动。活动启动后，它会在屏幕上显示，并且模拟器会打印**恢复**。现在，我们通过按后退键返回，Android系统准备结束该活动。因此，活动首先会被暂停，然后停止，最后被销毁。所有这些回调一起被称为活动生命周期。活动生命周期从`onCreate()`方法开始，在`onStop()`方法结束。活动从`onStart()`方法到`onStop()`方法是可见的，并且从`onResume()`方法到`onPause()`方法活动保持在前台。下图展示了这个周期的分布：
- en: '![The callback methods of the Activity lifecycle](img/9639_01_13.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![活动的回调方法](img/9639_01_13.jpg)'
- en: The activity lifecycle flow
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动生命周期流程
- en: 'Until now, we have discussed the lifecycle callback methods used, their states,
    and their purpose. Now, we will look into the callback method''s flow. In Android,
    when one activity is started, the already opened activity is stopped, and this
    change of activity happens in a flow. The following figure shows the visual flowchart
    of the Activity lifecycle:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了使用的生命周期回调方法、它们的状态和目的。现在，我们将探讨回调方法的流程。在Android中，当一个活动被启动时，已经打开的活动会被停止，这种活动的变化是按流程发生的。下图展示了活动生命周期的可视化流程图：
- en: '![The activity lifecycle flow](img/9639_01_14.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![活动生命周期流程](img/9639_01_14.jpg)'
- en: Callback methods are shown with rectangles. The very first step in the Activity
    lifecycle is to create an activity. Android creates an activity, if no instance
    of that activity is running in the same task. The `noHistory` tag does not allow
    multiple activities; rather it will determine whether an activity will have historical
    trace or not (refer to [http://developer.android.com/guide/topics/manifest/activity-element.html#nohist](http://developer.android.com/guide/topics/manifest/activity-element.html#nohist)),
    where you can determine multiple instances by the `android:launchmode flag` tag.
    Making this tag's value `true` means only one instance of the activity will be
    created in the stack, and whenever an activity intent is called, the same instance
    is pushed on top of the stack to show the activity on screen.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 回调方法用矩形表示。活动生命周期的第一步是创建一个活动。如果同一任务中没有运行该活动的实例，Android会创建一个活动。`noHistory`标签不允许有多个活动，它会决定活动是否会有历史痕迹（参考[http://developer.android.com/guide/topics/manifest/activity-element.html#nohist](http://developer.android.com/guide/topics/manifest/activity-element.html#nohist)），您可以通过`android:launchmode`标志标签确定多个实例。将此标签的值设为`true`意味着在堆栈中只创建一个活动实例，并且每次调用活动意图时，都会将同一实例推送到堆栈顶部以在屏幕上显示活动。
- en: After the `onCreate()` method, the `onStart()` method is called. This method
    is responsible for the initial settings, but it is best practice configure these
    in the `onResume()` method, which is called after the `onStart()` method. Remember,
    the foreground phase is started from the `onResume()` method. Say a user gets
    a call on his or her phone, then this activity will be paused through the `onPause()`
    method. So, all the steps involved in storing the necessary data when the activity
    is paused should be done here. This method can be very beneficial in critical
    memory situations because in these situations, Android can stop the paused activities,
    which in turn can show unexpected behavior in the app. If the activity is killed
    due to a critical memory situation, the `onCreate()` method is called instead
    of the `onResume()` method, resulting in the creation of a new instance of the
    activity.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreate()`方法之后，会调用`onStart()`方法。这个方法负责初始化设置，但最佳实践是在`onResume()`方法中进行配置，该方法是继`onStart()`之后被调用的。请记住，前台阶段是从`onResume()`方法开始的。假设用户在电话中接到一个电话，那么这个活动将通过`onPause()`方法暂停。因此，在活动暂停时涉及存储必要数据的所有步骤都应该在这里完成。在关键内存情况下，这个方法可能非常有用，因为在这种情况下，Android可能会停止暂停的活动，这反过来可能会导致应用程序出现意外行为。如果活动因关键内存情况被杀死，那么会调用`onCreate()`方法，而不是`onResume()`方法，这将导致创建活动的新实例。
- en: But, if everything goes right, then the activity returns to its same state through
    the `onResume()` method. In this method, the user can do all the work of reloading
    the stored data in the `onPause()` method, and can get the activity back to life.
    On turning off the activity after `onResume()` is launched the `onStop()` method
    is called. This triggers either the `onRestart()` method, or the `onDestroy()`
    method depending on user action. In a nutshell, the developer can control the
    Activity lifecycle using callback methods. It is a good practice to use the `onPause()`
    and `onResume()` methods for data management, whether the activity remains foreground
    or not, and `onCreate()` and `onDestroy()` should be used for only initial data
    management and cleaning up the resources respectively.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果一切顺利，活动将通过`onResume()`方法返回到其之前的状态。在这个方法中，用户可以重新加载在`onPause()`方法中存储的所有数据，可以让活动恢复生机。在`onResume()`启动后关闭活动，会调用`onStop()`方法。这会根据用户行为触发`onRestart()`方法或`onDestroy()`方法。简而言之，开发者可以利用回调方法控制活动的生命周期。一种良好的实践是使用`onPause()`和`onResume()`方法进行数据管理，无论活动是否保持在前台，而`onCreate()`和`onDestroy()`应分别只用于初始数据管理和清理资源。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All callback methods except the `onCreate()` method take no parameter or argument.
    In case of a critical memory situation, if an activity is destroyed, then that
    instance state is passed in the `onCreate()` method at the time of creation of
    that activity.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`onCreate()`方法之外的所有回调方法都不带参数或论据。在关键内存情况下，如果活动被销毁，那么在创建该活动时，该实例状态会传递给`onCreate()`方法。
- en: It is not necessary to override all the methods. The user can override any number
    of methods as there is no such restriction on it. The user should set a view in
    the `onCreate()` method. If you don't set any view for the content, a blank screen
    will show up. In each callback, first of all, the same callback method of the
    superclass should be called before doing anything. This super callback method
    operates the Activity lifecycle through standard flow developed by Android systems.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 并没有必要重写所有的方法。用户可以根据需要重写任意数量的方法，因为没有这样的限制。用户应该在`onCreate()`方法中设置视图。如果你没有为内容设置任何视图，将会显示一个空白屏幕。在每一个回调中，首先应该调用超类的同名回调方法，然后再进行其他操作。这个超回调方法通过Android系统开发的标准流程来操作Activity的生命周期。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the key concepts of Android. We discussed about
    Android, its versions that are named after sugar treats, covered a brief history
    of Android, and how its founders released Android with Google. We also discussed
    Google Play, an official store for Android apps; Android Studio, an official IDE
    from Google, and its features and limitations. Then we moved our discussion to
    a development perspective, and we discussed the building blocks for any Android
    application. We also discussed the Activity lifecycle, which plays a very important
    role in any Android application, its flow, its callback methods, and and looked
    at an example of it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Android的关键概念。我们讨论了Android及其以糖果命名的版本，回顾了Android的历史，以及其创始人如何与谷歌一起发布Android。我们还讨论了Google
    Play，这是Android应用的官方商店；Android Studio，这是谷歌推出的官方IDE，以及它的功能和局限性。然后我们从开发的角度进行了讨论，并介绍了任何Android应用的基础构建模块。我们还讨论了Activity生命周期，这在任何Android应用中都扮演着非常重要的角色，其流程、回调方法，并查看了一个示例。
- en: In the next chapter, we will discuss the intents, role played by the intents
    in Android, a technical overview, structure, and its uses in Android.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Android中意图的作用、技术概览、结构及其在Android中的用途。
