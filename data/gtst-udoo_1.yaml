- en: Chapter 1. Turn On the Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 启动引擎
- en: Any idea should start with a prototype. It doesn't matter whether it's a game,
    a web or mobile application, or a generic software component. Every time we want
    to deliver something to our final users, we have to create a prototype first.
    This is the most important step because it's when we start to face our first difficulties
    and when we may change some important aspects of our project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何想法都应该从原型开始。不管是游戏、网络或移动应用程序，还是一般的软件组件，都无关紧要。每次我们想要向最终用户交付某些东西时，首先必须创建一个原型。这是最重要的一步，因为这时我们开始面临最初的困难，并且可能会改变我们项目的某些重要方面。
- en: If we are writing a software component, the first prototype isn't too expensive
    because what we need is our time and passion. However, this isn't applicable when
    our project has some hardware parts because it could be too expensive to afford
    all the required components. This statement was true until programmers, engineers
    and open source lovers started to release projects such as **Arduino**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在编写一个软件组件，第一个原型并不会太昂贵，因为我们需要的只是时间和热情。然而，当项目包含一些硬件部分时，这可能不适用，因为购买所有必需的组件可能过于昂贵。这一说法直到程序员、工程师和开源爱好者开始发布如**Arduino**之类的项目时才不再正确。
- en: 'Fast prototyping boards let people realize projects with cheap or reused old
    components, and this, together with the **Do It Yourself** (**DIY**) philosophy,
    allows the creation of a huge community that spreads all over the world. This
    is where the UDOO board plays an important role in the makers'' community: the
    hardware prototyping ecosystem, together with the traditional way to write software
    applications, represents a powerful combination for interactive projects creation.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 快速原型开发板使人们能够使用便宜或回收的旧组件来实现项目，再加上**自己动手**（**DIY**）的理念，使得一个遍布全球的巨大社区得以创建。这正是UDOO主板在创客社区中发挥重要作用的地方：硬件原型生态系统与传统编写软件应用程序的方式相结合，为交互式项目的创建提供了强大的组合。
- en: 'In this chapter, we will explore more details about the UDOO board, focusing
    on the elements that are important to get started. In particular, we will cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更详细地探讨UDOO主板，重点关注开始时需要了解的重要元素。特别是，我们将涵盖以下内容：
- en: Exploring the UDOO platform and its main characteristics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 UDOO 平台及其主要特性
- en: Setting up the board with the Android operating system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Android 操作系统设置主板
- en: Configuring the development environment for Arduino and Android
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Arduino 和 Android 配置开发环境
- en: Bootstrapping a simple Android application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引导一个简单的 Android 应用程序
- en: Deploying an Android application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一个 Android 应用程序
- en: Introducing the UDOO platform
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 UDOO 平台
- en: The UDOO board is designed to offer us great flexibility with the tools, the
    programming language, and the environment in which we build the first prototype.
    The main goal of the board is to take part in the era of the *Internet of Things*
    and this is why an embedded Atmel SAM3X8E ARM Cortex-M3 processor is its first
    building block.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: UDOO主板旨在为我们提供极大的灵活性，包括工具、编程语言以及构建第一个原型的环境。该主板的主要目标是参与物联网时代，这就是为什么内置Atmel SAM3X8E
    ARM Cortex-M3处理器成为其第一个构建块的原因。
- en: This processor is the same that powers the Arduino Due board and it's fully
    compliant to Arduino pinout. The result of this feature is that the board is compatible
    with all Arduino Due shields and most of Arduino Uno shields, so developers can
    convert and reuse their old programs and circuits.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理器与Arduino Due主板所使用的相同，并且完全符合Arduino引脚布局。这一特性的结果是，该主板兼容所有Arduino Due屏蔽板以及大多数Arduino
    Uno屏蔽板，因此开发者可以转换和重用他们的旧程序和电路。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The UDOO I/O pins are 3.3V compliant. For instance, if you're using a sensor
    powered by 5V that outputs the signal to UDOO pins at 3.3V, then you're fine.
    On the other hand, if the sensor outputs the signal to UDOO at 5V, it will damage
    your board. Every time you're using a shield or a sensor, be aware of provided
    output voltage to UDOO pins. This precaution is the same for a traditional Arduino
    Due board.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: UDOO 的 I/O 引脚是3.3V兼容的。例如，如果你使用的是一个5V供电的传感器，但其信号输出到UDOO引脚时为3.3V，那么是可以的。另一方面，如果传感器以5V的信号输出到UDOO，则会损坏你的主板。每次使用屏蔽或传感器时，请注意提供给UDOO引脚的输出电压。这一预防措施对于传统的Arduino
    Due主板同样适用。
- en: The second building block is a powerful Freescale i.MX 6 ARM Cortex-A9 processor,
    which is shipped in Dual and Quad core versions. The official supported operating
    system is *UDOObuntu*, which is a *Lubuntu 12.04 LTS armHF* based operating system
    that ships out of the box with many pre-installed tools to be up and running quickly.
    Indeed, after your first boot, you have a fully configured development environment
    to program the onboard Arduino from the board itself.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个核心组件是强大的Freescale i.MX 6 ARM Cortex-A9处理器，有双核和四核版本。官方支持的操作系统是*UDOObuntu*，这是一个基于*Lubuntu
    12.04 LTS armHF*的操作系统，出厂时预装了许多工具，可以快速上手。实际上，在第一次启动后，您就可以使用完全配置好的开发环境，直接在开发板上对板载Arduino进行编程。
- en: Despite that, what makes UDOO really different from other boards is the **Android
    support**. With the capability to run smoothly, this operating system is a great
    opportunity for novice or experienced Android developers because they can create
    a new kind of real-world application that is powered by the Android user interface,
    its powerful design patterns, and even by other developers' applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，使UDOO与其他开发板真正不同的是**对Android的支持**。凭借流畅的运行能力，这个操作系统对于新手或经验丰富的Android开发人员来说是一个巨大的机会，因为他们可以创建一种由Android用户界面、其强大的设计模式，甚至其他开发者的应用程序提供支持的新型真实世界应用程序。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Developers can choose to write their real-word applications using the Linux
    operating system. In this case, they can write web services or desktop applications
    using many well-known programming languages such as Python, Javascript (Node.js),
    Php, and Java. However, we will focus on application development under Android.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以选择使用Linux操作系统编写他们的真实应用程序。在这种情况下，他们可以使用许多知名的编程语言编写Web服务或桌面应用程序，如Python、Javascript（Node.js）、Php和Java。然而，我们将重点放在Android下的应用程序开发上。
- en: The latest building block is related to all I/O components. UDOO could be purchased
    with an internal Wi-Fi and a Gigabit Ethernet, which are recognized by both Linux
    and Android. It also offers **HDMI** (**High-Definition Multimedia Interface**)
    output connection and is shipped with an integrated **Transistor-Transistor Logic**
    (**TTL**) to **Low-Voltage Differential Signaling** (**LVDS**) expansion slot
    so that developers can connect an external LVDS touch screen.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个核心组件与所有I/O组件相关。UDOO可以配备内部Wi-Fi和千兆以太网，它们都可以被Linux和Android识别。它还提供**HDMI**（**高清晰度多媒体接口**）输出连接，并配有集成的**晶体管-晶体管逻辑**（**TTL**）到**低电压差分信号**（**LVDS**）扩展槽，以便开发人员可以连接外部LVDS触摸屏。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: During the course of this book, it is assumed that you're connecting UDOO to
    an external monitor through the HDMI cable. However, if you own an external LVDS
    panel, you can proceed with the connection just before the *Our first run* section
    in this chapter. To let Android use the external panel, you should follow some
    steps that you can find in the official documentation at [http://www.udoo.org/faq-items/how-do-i-set-up-my-lvds/](http://www.udoo.org/faq-items/how-do-i-set-up-my-lvds/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的学习过程中，我们假设您将通过HDMI线将UDOO连接到外部显示器。然而，如果您拥有一个外部LVDS面板，可以在本章的*我们的第一次运行*部分之前进行连接。为了让Android使用外部面板，您应该按照官方网站上的步骤进行操作，具体步骤可以在[http://www.udoo.org/faq-items/how-do-i-set-up-my-lvds/](http://www.udoo.org/faq-items/how-do-i-set-up-my-lvds/)找到。
- en: Another great component that is officially supported is the camera module that
    is easy to plug in the board and can be used for projects that require computer
    vision or image analysis. The last integrated component is the audio card with
    a fully functional audio playback and recording through an external microphone.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个官方支持的重要组件是摄像头模块，它易于插入开发板，并可用于需要计算机视觉或图像分析的项目。最后一个集成组件是音频卡，通过外部麦克风可以实现完全功能的音频播放和录制。
- en: The mix of these building blocks, together with the Internet access and many
    Android APIs, gives us the opportunity to build real-world applications that listen
    to the environment and talk to devices with a board that can take part in the
    *Internet of Things*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件的结合，加上互联网接入和许多Android API，使我们有机会构建真实世界的应用程序，这些程序能够监听环境并与设备进行交互，一块可以参与*物联网*的板子。
- en: Downloading and installing Android
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装Android
- en: We have an idea about a list of UDOO components that we may use to start building
    amazing projects. However, before we continue, we need to configure our board
    to run the Android operating system and also our development environment so that
    we can start writing and deploying our first application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了一些可能用于开始构建惊人项目的UDOO组件列表。但是，在我们继续之前，我们需要配置我们的开发板以运行Android操作系统，还需要配置我们的开发环境，这样我们就可以开始编写并部署我们的第一个应用程序。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All prototypes you build in this book are based on Android KitKat 4.4.2 that
    is the latest supported version at the time of this writing. During the course
    of this book you will build many projects that make use of the **Android Support
    Library** to ensure compatibility with newer Android versions that the UDOO board
    will support.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中构建的所有原型都是基于Android KitKat 4.4.2，这是本书编写时支持的最新版本。在本书的学习过程中，你将构建许多项目，这些项目使用了**Android支持库**以确保与UDOO开发板将支持的较新Android版本兼容。
- en: The UDOO board doesn't have internal storage or a built-in boot program because
    it relies on external storage, a microSD card, in which you can install a bootloader
    and a compatible operating system. The easiest way to create a bootable microSD
    card, is to download and copy a precompiled image, though it's possible to create
    a clean operating system using released binaries and kernel sources.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: UDOO开发板没有内置存储或内置启动程序，因为它依赖于外部存储，即microSD卡，你可以在其中安装引导加载程序和兼容的操作系统。创建可启动microSD卡的最简单方法是下载并复制预编译的镜像，尽管也可以使用发布的二进制文件和内核源代码创建干净的操作系统。
- en: '[http://www.udoo.org/downloads/](http://www.udoo.org/downloads/) points to
    the official UDOO download page that contains the links for all the available
    precompiled images.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.udoo.org/downloads/](http://www.udoo.org/downloads/)指向UDOO官方网站的下载页面，其中包含所有可用的预编译镜像的链接。'
- en: Among Linux images, we can find and download the latest supported version of
    Android KitKat 4.4.2\. As stated earlier, UDOO comes in two different versions
    with dual and quad processors so we must download the right version, according
    to the owned platform.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux镜像中，我们可以找到并下载最新支持的Android KitKat 4.4.2版本。正如之前所述，UDOO有两个不同版本，分别配备双核和四核处理器，因此我们必须根据所拥有的平台下载正确的版本。
- en: Installing from Windows
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Windows安装
- en: To install the Android image from Windows, you need some extra tools to unpack
    and copy the image into the microSD card. The downloaded `.zip` file is in 7-Zip
    compression format, so you need to install a third-party unarchive program such
    as 7-Zip. When the extracting process is done, we have an uncompressed `.img`
    file ready for copy on an empty card.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Windows安装Android镜像，你需要一些额外的工具来解压并将镜像复制到microSD卡中。下载的`.zip`文件是7-Zip压缩格式，因此你需要安装一个第三方解压缩程序，如7-Zip。解压过程完成后，我们得到了一个未压缩的`.img`文件，可以将其复制到空卡上。
- en: 'To write the uncompressed image into our microSD card, perform the following
    steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要将未压缩的镜像写入我们的microSD卡，请执行以下步骤：
- en: Insert your microSD card in the built-in slot reader or external card reader.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的microSD卡插入内置的插槽读取器或外部读卡器。
- en: Format the card using the `FAT32` filesystem.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`FAT32`文件系统格式化卡片。
- en: To write the image on the micsoSD card, we need to use the Win32DiskImager tool.
    Download it from [http://sourceforge.net/projects/win32diskimager/](http://sourceforge.net/projects/win32diskimager/).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将镜像写入microSD卡，我们需要使用Win32DiskImager工具。从以下链接下载：[http://sourceforge.net/projects/win32diskimager/](http://sourceforge.net/projects/win32diskimager/)。
- en: Run the application, but bear in mind that if we are using Windows 7 or Window
    8.x, we have to right-click on `Win32DiskImager.exe` executable and be sure to
    select the **Run as administrator** option from the context menu.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，但请记住，如果我们使用的是Windows 7或Windows 8.x，我们必须右键点击`Win32DiskImager.exe`可执行文件，并确保从上下文菜单中选择**以管理员身份运行**的选项。
- en: Win32DiskImager is a tool that writes raw disk images using low-level instructions.
    This means that you need to exactly follow the next steps and be really sure that
    you correctly select the output device. If this option is wrong, you might lose
    all your data from an unwanted storage memory.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Win32DiskImager是一个使用低级别指令写入原始磁盘镜像的工具。这意味着你需要严格按照以下步骤操作，并确保你正确选择了输出设备。如果这个选项错了，你可能会丢失来自不想要存储内存的所有数据。
- en: Once the application starts, you can see the main window, as illustrated in
    the following screenshot:![Installing from Windows](img/1942OS_01_01.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序启动后，你可以看到如下截图所示的主窗口：![从Windows安装](img/1942OS_01_01.jpg)
- en: From the application's main window, in the **Image File** box, choose the `.img`
    file previously extracted.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的主窗口中，在**镜像文件**框内，选择之前解压的`.img`文件。
- en: Select the microSD drive accurately on the **Device** dropdown and bear in mind
    that if we use the wrong drive, we can destroy all our data on the computer's
    hard disk.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准确地在**设备**下拉菜单中选择microSD驱动器，并记住如果我们选择了错误的驱动器，可能会破坏计算机硬盘上的所有数据。
- en: Click on the **Write** button and wait for the process to complete in order
    to have a bootable Android operating system in the microSD card.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**写入**按钮，等待进程完成，以便在microSD卡中拥有可启动的Android操作系统。
- en: Installing from Mac OS X
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Mac OS X安装
- en: To install the Android image from Mac OS X, we need a third-party tool to unpack
    the downloaded `.zip` file, because it's in 7-Zip compression format and we can't
    use the built-in unarchive software. We have to download software such as Keka,
    which is freely available at [http://www.kekaosx.com/](http://www.kekaosx.com/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Mac OS X安装Android镜像，我们需要一个第三方工具来解压下载的`.zip`文件，因为它采用7-Zip压缩格式，我们不能使用内置的解压缩软件。我们必须下载像Keka这样的软件，它可以在[http://www.kekaosx.com/](http://www.kekaosx.com/)免费获得。
- en: If we love the Mac OS X terminal, we can use the Homebrew package manager that
    is available at [http://brew.sh/](http://brew.sh/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们喜欢Mac OS X终端，可以使用Homebrew包管理器，它可以在[http://brew.sh/](http://brew.sh/)找到。
- en: 'In this case, from the command line, we can simply install the `p7zip` package
    and use the `7za` utility to unpack the file as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，从命令行，我们可以简单地安装`p7zip`包并使用`7za`工具按以下方式解压文件：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To proceed and write the uncompressed image into our microSD card, perform
    the following steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将未压缩的镜像写入我们的microSD卡，执行以下步骤：
- en: 'Launch the **Terminal** application and enter into the folder in which we have
    downloaded and extracted the Android image. Assuming `Downloads` is the name of
    that folder, we can issue the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**终端**应用程序，进入我们下载并解压Android镜像文件的文件夹。假设该文件夹名为`Downloads`，我们可以输入以下命令：
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Get the list of all mounted devices with the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令获取所有已挂载设备的列表：
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The list of all systems and internal hard drive partitions will be similar to
    the following screenshot:![Installing from Mac OS X](img/1942OS_01_02.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有系统和内部硬盘分区的列表将与以下截图类似：![从Mac OS X安装](img/1942OS_01_02.jpg)
- en: Connect the microSD card using the built-in or external card reader.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内置或外置读卡器连接microSD卡。
- en: Format the microSD card through the Disk Utility application that is already
    available in our system. Launch it and select the correct disk from the list on
    the left.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过系统已提供的磁盘工具应用程序格式化microSD卡。启动它，并从左侧列表中选择正确的磁盘。
- en: From the main panel of the window, choose the **Erase** tab from the upper menu
    and select the **MS-DOS (FAT)** filesystem in the **Format** dropdown. When you
    are ready, click on the **Erase** button.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口的主面板上，从顶部菜单选择**擦除**标签页，并在**格式**下拉菜单中选择**MS-DOS (FAT)**文件系统。准备好后，点击**擦除**按钮。
- en: 'From the Terminal application, launch the previous command again:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端应用程序中，再次启动之前的命令：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The list of mounted partitions has been changed, as we see in the following
    screenshot:![Installing from Mac OS X](img/1942OS_01_03.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挂载分区的列表已经改变，如下面的截图所示：![从Mac OS X安装](img/1942OS_01_03.jpg)
- en: We can assume that the missing device, during the first run, is our microSD
    card, so we have to bear in mind the new value under the **Filesystem** column.
    If you look at the previous screenshot, our partition name is `/dev/disk1s1` while
    it isn't `/dev/disk0s2` because it's our hard disk.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以假设在首次运行时缺少的设备是我们的microSD卡，因此我们必须记住**文件系统**列下的新值。如果你查看之前的截图，我们的分区名为`/dev/disk1s1`而不是`/dev/disk0s2`，因为那是我们的硬盘。
- en: 'Once we have found the correct partition, we have to unmount it using the following
    command:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到正确的分区后，我们必须使用以下命令卸载它：
- en: '[PRE4]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To write the image into the microSD card, we must find the raw disk device so
    that we can erase and write the Android image into the card. Assuming that the
    partition name found before was `/dev/disk1s1`, the related raw disk will be `/dev/rdisk1`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将镜像写入microSD卡，我们必须找到原始磁盘设备，这样我们就可以擦除并将Android镜像写入卡中。假设之前找到的分区名为`/dev/disk1s1`，相关的原始磁盘将是`/dev/rdisk1`。
- en: Note
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are going to use the `dd` tool. This command writes raw disk images using
    low-level instructions. This means that you need to exactly follow the next steps
    and be really sure that you choose the correct disk device, because if it is wrong,
    you can lose all your data from an unwanted storage.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将要使用 `dd` 工具。这个命令使用低级指令写入原始磁盘镜像。这意味着你需要严格遵循以下步骤，并确保你选择了正确的磁盘设备，因为如果选择错误，你可能会因为不想要的存储而丢失所有数据。
- en: 'Write the image previously extracted into the microSD card using `dd` with
    the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `dd` 将之前解压的镜像写入 microSD 卡，命令如下：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A full example of the previous command is as follows:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前命令的完整示例如下：
- en: '[PRE6]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we launch the command nothing seems to happen, but actually, `dd` is writing
    the Android image in the background. Once the process is complete, it outputs
    the transferred bytes report, as shown in the following example:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们执行命令时，看似没有任何反应，但实际上，`dd` 在后台写入 Android 镜像。一旦进程完成，它会输出传输字节的报告，如下例所示：
- en: '[PRE7]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we have our bootable Android operating system and we can eject the microSD
    card with the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了可启动的 Android 操作系统，我们可以使用以下命令弹出 microSD 卡：
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Installing from Linux
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Linux 安装
- en: To install the Android image from Linux, we need a third-party tool to unpack
    the downloaded `.zip` file. Because the file is in 7-Zip compression format, we
    need to install the `p7zip` package porting from the command line using the package
    manager of our distribution. Then we can use the `7za` utility to unpack the file
    or any other graphical unarchiver that makes you comfortable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Linux 安装 Android 镜像，我们需要一个第三方工具来解压下载的 `.zip` 文件。因为文件是使用 7-Zip 压缩格式，我们需要通过命令行使用发行版的包管理器安装
    `p7zip` 包。然后我们可以使用 `7za` 工具解压文件，或者使用任何让你感到舒适的图形化解压缩工具。
- en: 'We can proceed to write the uncompressed image into our microSD card using
    the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤将未压缩的镜像写入我们的 microSD 卡：
- en: 'Open the Linux Terminal and enter into the folder where we have downloaded
    and extracted the Android image. Assuming the file is in our `Downloads` folder,
    we can issue the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Linux 终端，进入我们下载并解压 Android 镜像的文件夹。假设文件在我们的 `Downloads` 文件夹中，我们可以输入以下命令：
- en: '[PRE9]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Attach the microSD card using the built-in or external card reader.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内置或外置读卡器连接 microSD 卡。
- en: 'Find the correct device name through the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令找到正确的设备名称：
- en: '[PRE10]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is a filtered list of all the devices found, and it contains, among
    others output lines, something like:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出是找到的所有设备的筛选列表，其中包含，例如：
- en: '[PRE11]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, `/dev/sda` is our hard disk while `/dev/sdb` is our microSD card.
    If this is not your case and you are using an internal card reader, it's possible
    that the device is named `/dev/mmcblk0`.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此例中，`/dev/sda` 是我们的硬盘，而 `/dev/sdb` 是我们的 microSD 卡。如果情况并非如此，且你使用的是内置读卡器，那么设备名称可能是
    `/dev/mmcblk0`。
- en: When you've found the right device name, keep it in mind so that we can use
    it later.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 找到正确的设备名称后，请记住，我们稍后会使用它。
- en: 'Find all the mounted partitions of the above device through the following command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令查找上述设备的所有已挂载分区：
- en: '[PRE12]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the previous command generates an output, find the partition name available
    in the first column of the output and unmount any listed partitions through the
    following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果之前的命令产生了输出，找到输出中第一列可用的分区名称，并通过以下命令卸载列出的任何分区：
- en: '[PRE13]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`dd` is a tool that writes raw disk images using low-level instructions. This
    means that you need to exactly follow the next steps and be really sure that you
    choose the correct disk device because, if it is wrong, you can lose all your
    data from an unwanted storage memory.'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`dd` 是一个使用低级指令写入原始磁盘镜像的工具。这意味着你需要严格遵循以下步骤，并确保你选择了正确的磁盘设备，因为如果选择错误，你可能会因为不想要的存储设备而丢失所有数据。'
- en: 'Write the image previously extracted to the above device name using the `dd`
    command:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `dd` 命令将之前解压的镜像写入上述设备名称：
- en: '[PRE14]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Assuming `/dev/sdb` is our microSD card, the following is a full example:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设 `/dev/sdb` 是我们的 microSD 卡，以下是一个完整示例：
- en: '[PRE15]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When we launch the command nothing seems to happen, but actually, `dd` is writing
    the image in the background. Once the process is complete, it outputs the transferred
    bytes report, as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们执行命令时，看似没有任何反应，但实际上，`dd` 在后台写入镜像。进程完成后，它会输出传输字节的报告，如下所示：
- en: '[PRE16]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now we have our bootable Android operating system and we can eject the microSD
    card with the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了可启动的 Android 操作系统，可以使用以下命令弹出 microSD 卡：
- en: '[PRE17]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Our first run
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的首个运行
- en: Once we have a bootable microSD card, we can insert it into our UDOO board,
    use our external monitor or LVDS panel and connect a mouse and a keyboard. After
    the power is switched on, the Android logo shows up and when the loading process
    is finished, we can finally see the Android home interface.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了可启动的 microSD 卡，我们可以将其插入 UDOO 主板，使用外部显示器或 LVDS 面板，并连接鼠标和键盘。打开电源后，会出现 Android
    标志，当加载过程完成后，我们最终可以看到 Android 主界面。
- en: Setting up the development environment
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: 'Now that Android in our UDOO board is fully functional, it''s time to configure
    the development environment. Every project we''re going to build is composed of
    two different running applications: the first is the physical application composed
    of an Arduino program capable of controlling an external circuit through UDOO
    I/O pins; the second one, is an Android application that will run on the board
    and that deals with the user interface.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 UDOO 主板上的 Android 系统已经完全功能正常，是时候配置开发环境了。我们将要构建的每个项目都由两个不同的运行应用程序组成：第一个是物理应用程序，由一个能够通过
    UDOO I/O 引脚控制外部电路的 Arduino 程序组成；第二个是在板上运行并处理用户界面的 Android 应用程序。
- en: Because we have to write two different applications that interact with each
    other, we need to configure our development environment with two different IDEs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们需要编写两个相互交互的不同应用程序，所以我们需要用两个不同的 IDE 配置开发环境。
- en: Installing and using Arduino IDE
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和使用 Arduino IDE
- en: Before we can start to upload our programs, we need to install the *microUSB
    serial port driver* so that we can correctly communicate with onboard Arduino.
    The USB to the **Universal Asynchronous Receiver/Transmitter** (**UART**) driver,
    compatible with the CP210x converter available on the board, can be downloaded
    from
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始上传程序之前，需要安装 *microUSB 串行端口驱动程序*，以便我们可以正确与主板上的 Arduino 进行通信。与 **通用异步收发传输器**
    (**UART**) 相兼容的 USB 驱动程序，适用于板上的 CP210x 转换器，可以从以下链接下载
- en: '[http://www.silabs.com/products/mcu/pages/usbtouartbridgevcpdrivers.aspx](http://www.silabs.com/products/mcu/pages/usbtouartbridgevcpdrivers.aspx).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.silabs.com/products/mcu/pages/usbtouartbridgevcpdrivers.aspx](http://www.silabs.com/products/mcu/pages/usbtouartbridgevcpdrivers.aspx).'
- en: Here we have to choose the correct version according to our operating system.
    Once the download is complete, we can extract the archive and double-click on
    the executable to proceed with the installation. When the installation process
    is complete, we may need to restart the system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要根据操作系统选择正确的版本。下载完成后，我们可以解压存档，并双击可执行文件进行安装。安装过程完成后，我们可能需要重启系统。
- en: Now that the microUSB bridge driver is working, from the Arduino website, we
    have to download the IDE 1.5x beta because, at the moment, the beta version is
    the only one that supports Arduino Due boards. The link [http://arduino.cc/en/Main/Software#toc3](http://arduino.cc/en/Main/Software#toc3)
    points directly to the latest version.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 microUSB 桥接驱动程序已经可以工作，从 Arduino 网站，我们需要下载 IDE 1.5x 测试版，因为目前，测试版是唯一支持 Arduino
    Due 主板的版本。链接 [http://arduino.cc/en/Main/Software#toc3](http://arduino.cc/en/Main/Software#toc3)
    直接指向最新版本。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: To upload a new program, UDOO needs to receive the signals ERASE and RESET from
    the serial port before and after the upload, respectively. On the official Arduino
    Due board, this action is performed by the integrated ATmega16U2 microcontroller,
    which is missing in the UDOO board. The Arduino IDE will take care of this process,
    but if in the future you prefer to use another IDE, you will have to take care
    on your own.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了上传新程序，UDOO 需要在上传前后分别从串行端口接收 ERASE 和 RESET 信号。在官方的 Arduino Due 主板上，这个操作是由集成的
    ATmega16U2 微控制器执行的，而 UDOO 主板上缺少这个微控制器。Arduino IDE 将会处理这个过程，但如果你将来想使用另一个 IDE，你就需要自己处理。
- en: Installing in Windows
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 中的安装
- en: 'To install in Windows, we have two different options: use the provided installer
    or use the archive file for nonadministrator installation. If we choose to use
    the installer, we can double-click on the executable. When the installer asks
    us which components we want to install, be sure to select all the checkboxes.
    If we choose to use the archive file instead of the installer, extract the file
    and put the result directory into your users folder.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装时，我们有两种不同的选择：使用提供的安装程序或使用归档文件进行非管理员安装。如果我们选择使用安装程序，可以双击可执行文件。当安装程序询问我们想要安装哪些组件时，请确保选中所有的复选框。如果我们选择使用归档文件而不是安装程序，提取文件并将结果目录放入你的用户文件夹中。
- en: Installing in Mac OS X
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上安装
- en: To install in Mac OS X, we need to download the archive version. If we run an
    OS X version greater than 10.7, we can download the Java 7 version. In any other
    cases, or if you are not sure, download the Java 6 version.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上安装时，我们需要下载归档版本。如果我们运行的是大于 10.7 的 OS X 版本，可以下载 Java 7 版本。在其他情况下，或者如果你不确定，请下载
    Java 6 版本。
- en: When we finish the download, we have to double-click on the archive to proceed
    with the extraction and then drag-and-drop the Arduino application icon inside
    our `Applications` folder.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，我们需要双击归档文件以进行解压，然后将 Arduino 应用程序图标拖放到我们的 `Applications` 文件夹中。
- en: Installing in Linux
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上安装
- en: To install in Linux, we need to download the archive version supported by our
    32 or 64 bit architecture. Once the download has finished, we can extract the
    IDE and put it inside our `home` folder or in any other folder of your choice.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装时，我们需要下载与我们32位或64位架构支持的归档版本。下载完成后，我们可以解压 IDE 并将其放入我们的 `home` 文件夹或其他你选择的文件夹中。
- en: First launch
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 首次启动
- en: 'Now that we have finished configuring the communication driver and the IDE
    with the correct patch, we can launch and see the Arduino IDE, as shown in the
    following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了通信驱动和 IDE 的配置，并打上了正确的补丁，我们可以启动并查看如下截图所示的 Arduino IDE：
- en: '![First launch](img/1942OS_01_04.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![首次启动](img/1942OS_01_04.jpg)'
- en: Installing and using Android Studio
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和使用 Android Studio
- en: 'UDOO with an Android operating system acts like any other traditional Android
    device. This means we can use the standard toolchain, build system, and IDE used
    for the development of smartphones or tablets applications. At the moment, the
    available toolchains are related to two main IDEs: Eclipse and Android Studio.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 搭载 Android 操作系统的 UDOO 与其他传统 Android 设备类似。这意味着我们可以使用标准的工具链、构建系统和用于开发智能手机或平板应用程序的
    IDE。目前，可用的工具链与两个主要的 IDE 相关：Eclipse 和 Android Studio。
- en: Eclipse is an open source IDE with an advanced plugin system that allows you
    to easily extend many of its core capabilities. This brought Google to develop
    an **Android Development Tool** (**ADT**) plugin to create an integrated development
    environment in which developers can write, debug, and package their Android applications.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 是一个开源 IDE，拥有一个高级插件系统，可以轻松扩展其许多核心功能。这使得 Google 开发了**Android Development
    Tool**（**ADT**）插件，以创建一个集成开发环境，让开发者可以编写、调试和打包他们的 Android 应用程序。
- en: Android Studio is a more recent project whose first beta was released in May
    2013 while the first stable release was in December 2014\. Based on IntelliJ IDEA,
    a well-known Java IDE, it's powered by the **Gradle** build system that combines
    the flexibility of **Ant** with the dependency management of **Maven**. All these
    characteristics, together with the increasing number of plugins, best practices,
    **Google Cloud Platform** integration, and third-party services integration such
    as **Travis CI**, make Android Studio a great choice for the development of future
    projects.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 是一个较新项目，2013年5月发布了第一个测试版，而第一个稳定版本是在2014年12月发布的。基于知名的 Java IDE
    IntelliJ IDEA，它由 **Gradle** 构建系统提供支持，该系统结合了 **Ant** 的灵活性以及 **Maven** 的依赖管理。所有这些特点，加上越来越多的插件、最佳实践、**Google
    Cloud Platform**集成和第三方服务如 **Travis CI** 的集成，使得 Android Studio 成为未来项目开发的一个绝佳选择。
- en: All Android projects covered in this book are built using Android Studio, and
    if you are a novice or an experienced Android developer and Eclipse is your usual
    IDE, this could be a great opportunity to try the new Android Studio.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖的所有 Android 项目都是使用 Android Studio 构建的，如果你是一个新手或经验丰富的 Android 开发者，且习惯使用 Eclipse，这可能是一个尝试新
    Android Studio 的好机会。
- en: The first thing to do is to download the latest version of Android Studio for
    your operating system from [https://developer.android.com/sdk/](https://developer.android.com/sdk/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要从[https://developer.android.com/sdk/](https://developer.android.com/sdk/)下载适用于您操作系统的最新版Android
    Studio。
- en: When the download starts, we'll be redirected to the installation instructions
    related to our operating system, and when we finish the installation, we can start
    the IDE. During the first run, the IDE will make all the required checks to retrieve
    and install the latest available SDK, virtual device, and build system to let
    you start developing the first application. In the **Setup Wizard - SDK Settings**
    page, be sure to select the **Android SDK** and **Android Virtual Device** components
    and then click on **Next**. In the next page, you should accept all Android licenses
    and then click on **Finish**.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当开始下载时，我们会重定向到与我们的操作系统相关的安装说明，当我们完成安装后，可以启动IDE。在首次运行时，IDE将进行所有必要的检查以获取并安装最新的可用SDK、虚拟设备和构建系统，让您开始开发第一个应用程序。在**设置向导
    - SDK设置**页面，确保选择**Android SDK**和**Android Virtual Device**组件，然后点击**下一步**。在下一页中，您应该接受所有Android许可，然后点击**完成**。
- en: 'Once the IDE is installed, we can start Android Studio. The following screenshot
    shows the main window when a project is not opened:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完IDE后，我们可以启动Android Studio。以下截图显示了未打开项目时的主窗口：
- en: '![Installing and using Android Studio](img/1942OS_01_05.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![安装和使用Android Studio](img/1942OS_01_05.jpg)'
- en: Running your first Android application
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行您的第一个Android应用程序
- en: Now that Android is installed in our UDOO board and that all development environments
    are configured, we can start to write and deploy our first Android application.
    The following is the default pattern of other developers when they start to dive
    into a new technology. We are going to write and deploy a simple Android application
    that prints Hello World!.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Android已经安装在我们的UDOO板上，所有开发环境都已配置，我们可以开始编写并部署我们的第一个Android应用程序。以下是其他开发者在开始深入研究新技术时的默认模式。我们将编写并部署一个简单的Android应用程序，该程序打印出Hello
    World!。
- en: 'To bootstrap our first project, perform the following steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动我们的第一个项目，请执行以下步骤：
- en: In the main window of Android Studio, click on **Start a new Android Studio
    project**.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio的主窗口中，点击**开始一个新的Android Studio项目**。
- en: In the **Application name** field, type `HelloWorld`; in **Company domain**,
    write your domain or `example.com` if you don't have any at the moment. Then,
    click on **Next**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用程序名称**字段中，输入`HelloWorld`；在**公司域名**中，写入您的域名或如果您目前没有的话，可以写`example.com`。然后点击**下一步**。
- en: 'In the form factors selection window, select **Phone and Tablet** and choose
    **API 19: Android 4.4 (KitKat)** in the **Minimum SDK**. Then, click on **Next**.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在形态因素选择窗口中，选择**手机和平板**，并在**最低SDK**中选择**API 19: Android 4.4 (KitKat)**。然后点击**下一步**。'
- en: In the add activity page, for the purpose of this hello world application, select
    a **Blank Activity** option and click on **Next**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加活动页面，为了这个hello world应用程序的目的，选择**空白活动**选项并点击**下一步**。
- en: In the **Activity Options** page, write *HelloWorld* in **Activity Name** and
    click on **Finish**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**活动选项**页面，在**活动名称**中写入*HelloWorld*并点击**完成**。
- en: Tip
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In next chapters, we will create applications from scratch, so we have to bear
    in mind the previous steps because we are going to repeat the process multiple
    times in this book.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将从头开始创建应用程序，因此我们必须记住前面的步骤，因为在这本书中我们将多次重复这个过程。
- en: Now Android Studio will start to download all Gradle requirements to prepare
    our build system. When the process is completed, we get our first HelloWorld application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Android Studio将开始下载所有Gradle需求，以准备我们的构建系统。当这个过程完成后，我们得到了第一个HelloWorld应用程序。
- en: Without writing any lines of code, we have already created a deployable application.
    Now we have to connect our UDOO board using a microUSB to the USB cable. If we
    take a look at the board, we see two different microUSB ports. The first one on
    the left, that we will use in the next chapters, connects our computer to the
    serial port of both processors, so we can use it to upload the Arduino program
    to the UDOO microcontroller or we can use it to access to the Android system shell.
    The activated communication for the serial port depends on the state of J18 jumper,
    whether it's plugged or not. Instead, the microUSB port on the right connects
    our computer to the i.MX 6 processor that runs Android and that we will use to
    upload our Android applications. You can find more information about the processor
    communication at the official UDOO website [http://www.udoo.org/features/processors-communication/](http://www.udoo.org/features/processors-communication/).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在不编写任何代码的情况下，我们已经创建了一个可部署的应用程序。现在，我们需要使用microUSB到USB电缆连接我们的UDOO板。如果我们查看一下主板，我们会看到两个不同的microUSB端口。左边的第一个端口，我们将在下一章中使用它，将我们的计算机连接到两个处理器的串行端口，因此我们可以使用它将Arduino程序上传到UDOO微控制器，或者我们可以使用它访问Android系统shell。串行端口的激活通信取决于J18跳线的状态，是插入还是未插入。而右边的microUSB端口则将我们的计算机连接到运行Android的i.MX
    6处理器，我们将使用它来上传我们的Android应用程序。你可以在UDOO官方网站上找到更多关于处理器通信的信息[http://www.udoo.org/features/processors-communication/](http://www.udoo.org/features/processors-communication/)。
- en: 'To connect our computer to the Android operating system for the application
    upload process, we need to use the right microUSB port colored in black in the
    following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的计算机连接到Android操作系统以进行应用程序上传过程，我们需要使用下面截图中标有黑色的右侧microUSB端口：
- en: '![Running your first Android application](img/1942OS_01_06.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![运行你的第一个Android应用程序](img/1942OS_01_06.jpg)'
- en: Like we do in a traditional Android application, we can click from the top menu
    on **Run** and then on **Run app**. At this point, we need to choose a running
    device, but unfortunately, our list of available devices is empty. This problem
    occurs because of how the internal communication between processors works.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在传统的Android应用程序中所做的那样，我们可以从顶部菜单点击**Run**（运行），然后点击**Run app**（运行应用）。此时，我们需要选择一个运行设备，但不幸的是，我们可用的设备列表是空的。这个问题是由于处理器间内部通信的方式导致的。
- en: After the boot time, the connection is enabled between the two processors and
    plugging the microUSB cable will produce no effect. This happens because Android
    doesn't use the internal UART serial port during the communication with Arduino.
    It uses the **USB On-The-Go** (**OTG**) bus that allows devices to act as host
    and let other components such as flash drive, mouse, keyboard, or Arduino, in
    this case, to connect through it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时间之后，两个处理器之间的连接已启用，插入microUSB电缆将不会产生任何效果。这是因为Android在与Arduino通信时并不使用内部UART串行端口。它使用的是**USB
    On-The-Go**（**OTG**）总线，允许设备充当主机，并让其他组件（如闪存驱动器、鼠标、键盘或Arduino）通过它连接。
- en: The i.MX 6 processor is physically connected to the OTG bus while the other
    side of the bus is connected both to Arduino and to the external microUSB connector.
    The current active connection can be changed using a software piloted switch.
    When the external OTG port is enabled, Android can communicate with an external
    computer via microUSB port but it can't send back any data to onboard Arduino.
    On the contrary, when the external OTG port is disabled, Android can communicate
    with Arduino but the connection with the computer is interrupted.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: i.MX 6处理器物理连接到OTG总线，而总线的另一端同时连接到Arduino和外部microUSB连接器。当前活动的连接可以通过软件控制的开关进行更改。当外部OTG端口启用时，Android可以通过microUSB端口与外部计算机通信，但不能将任何数据发送回板载Arduino。相反，当外部OTG端口禁用时，Android可以与Arduino通信，但与计算机的连接会中断。
- en: The latter is our actual configuration and we need to switch the OTG port in
    order to enable the external communication with our computer to complete the application
    deployment. From Android, we have to go to the **Settings menu** and choose **Developer
    options**. There we need to select the **External OTG port enabled** checkbox.
    If the USB cable is connected, a popup will ask us to allow USB debugging. If
    this is our main computer, we may want to select **Always allow from this computer**
    and then click on **OK**. If this option is not checked, the popup will be shown
    every time we connect UDOO to our computer.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 后者是我们的实际配置，我们需要切换OTG端口以启用与计算机的外部通信，完成应用程序部署。在Android系统中，我们必须进入**设置菜单**，选择**开发者选项**。在那里，我们需要勾选**启用外部OTG端口**的复选框。如果连接了USB线，会出现一个弹窗要求我们允许USB调试。如果是我们的主计算机，我们可能想要选择**始终允许此计算机**，然后点击**确定**。如果没有勾选这个选项，每次我们连接UDOO到计算机时都会显示弹窗。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Bear in mind that every time we need to deploy our Android application, we need
    to enable the external OTG port. On the contrary, when our application is deployed
    and we need Android to communicate with Arduino, we need to disable the external
    OTG port.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，每次我们需要部署Android应用程序时，都需要启用外部OTG端口。相反，当我们的应用程序部署好，需要Android与Arduino通信时，我们需要禁用外部OTG端口。
- en: Now that our computer can see the UDOO board as a traditional Android device,
    we can try to deploy our application again. This time, in the **Choose Device**
    dialog, we can find a Freescale UDOO Android device. Select it and click on **OK**.
    Our first deployment is complete and now we can see the HelloWorld application
    on the connected monitor.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的计算机可以将UDOO板视为传统的Android设备，我们可以尝试再次部署我们的应用程序。这次，在**选择设备**对话框中，我们可以找到一个Freescale
    UDOO Android设备。选择它并点击**确定**。我们的首次部署完成，现在我们可以在连接的监视器上看到HelloWorld应用程序。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned some UDOO characteristics that distinguish this
    board from the others. One of the greatest differences is related to the full
    support of the Android platform that led us to install and configure the latest
    supported version on the board.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了一些UDOO的特性，这些特性使这块开发板与其他开发板区分开来。最大的区别之一是与Android平台的全面支持，这让我们能够在板上安装和配置最新支持的版本。
- en: We explored the necessary tools to start developing real-world applications
    and we configured our development environment to write Android applications and
    Arduino programs.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探索了开始开发实际应用所需的工具，并配置了我们的开发环境以编写Android应用程序和Arduino程序。
- en: We had a brief introduction about how the communication between the two processors
    works and how we can switch the OTG port to enable external access for our first
    deployment. In the next chapter, we will start a new Android application from
    scratch that is capable of using and controlling a physical device built through
    a set of prototyping tools.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要介绍了两个处理器之间如何通信以及如何切换OTG端口以启用外部访问，完成首次部署。在下一章中，我们将从零开始创建一个新的Android应用程序，能够使用并控制通过一套原型工具构建的物理设备。
