- en: Chapter 5. Structural Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章. 结构型模式
- en: So far in this book, we have looked at patterns for holding and returning data
    and for combining objects into larger ones, but we have not yet considered how
    we offer a selection of choices to the user.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们已经了解了用于保存和返回数据的模式，以及将对象组合成更大的对象的模式，但我们还没有考虑如何向用户提供选择的方式。
- en: In planning our sandwich builder app, we would ideally like to offer the customer
    a wide range of possible ingredients. Probably the best way to present such choices
    is through a list or, for large collections of data, a series of lists. Android
    manages these processes very nicely with the **RecyclerView**, which is a list
    container and manager that replaced the previous ListView. This is not to say
    that the plain, old list view should never be used, and in cases where all we
    want is a short, simple text list of a few items, using a recycler view could
    be considered overkill, and list views are often the way to go. Saying that, the
    recycler view is far superior particularly when it comes to managing data, keeping
    the memory footprint small and scrolling smooth, and when contained within a CoordinatorLayout,
    allows users to drag and drop or swipe and dismiss list items.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划我们的三明治制作应用时，我们理想情况下希望能为客户提供多种可能的食材选择。展示这些选择的最佳方式可能是通过列表，或者对于大量数据集合，一系列的列表。Android
    通过**回收视图（RecyclerView）**很好地管理这些过程，它是一个列表容器和管理器，取代了之前的ListView。这并不是说我们不应该使用普通的旧列表视图，在只需要短列表、简单文本列表几个项目的情况下，使用回收视图可能被认为是大材小用，列表视图通常是更好的选择。话虽如此，回收视图在管理数据方面要优越得多，特别是当它包含在协调器布局中时，可以保持内存占用小、滚动平滑，并允许用户拖放或滑动删除列表项。
- en: To see how all this is done, we will construct an interface, which will consist
    of a list of ingredients for the user to select from. This will require the RecyclerView
    for holding the list, which will in turn introduce us to the adapter pattern.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何完成所有这些工作，我们将构建一个界面，该界面将由用户从中选择的一系列食材列表组成。这将需要回收视图来持有列表，进而将介绍我们适配器模式。
- en: 'In this chapter, you will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: Apply a RecyclerView
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用回收视图（RecyclerView）
- en: Apply a CoordinatorLayout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用协调器布局（CoordinatorLayout）
- en: Generate lists
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成列表
- en: Translate string resources
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译字符串资源
- en: Apply a ViewHolder
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用视图持有者（ViewHolder）
- en: Use a RecyclerView adapter
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用回收视图适配器（RecyclerView adapter）
- en: Create an adapter design pattern
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建适配器设计模式
- en: Construct bridge design pattern
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建桥接设计模式
- en: Apply facade patterns
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用外观模式（facade patterns）
- en: Use patterns to filter data
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模式来过滤数据
- en: Generating lists
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成列表
- en: 'The RecyclerView is a relatively recent addition and replaces the ListView
    on older versions. It performs the same functions but manages data far more efficiently,
    particularly very long lists. The RecyclerView is part of the v7 support library
    and needs to be compiled in the `build.gradle` file, along with the others shown
    here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 回收视图是相对较新的添加项，取代了旧版本中的ListView。它执行相同的功能，但数据管理效率要高得多，特别是对于非常长的列表。回收视图是v7支持库的一部分，需要在`build.gradle`文件中编译，以及这里显示的其他内容：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The coordinator layout will form the root layout of the main activity and will
    look like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 协调器布局将形成主活动的根布局，看起来会像这样：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Recycler view can then be placed inside the layout:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，回收视图可以被放置在布局内：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Generating lists](img/image_05_001.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![生成列表](img/image_05_001.jpg)'
- en: The RecyclerView provides a dummy list for us, but we will create our list from
    card views.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 回收视图为我们提供了一个虚拟列表，但我们将从卡片视图中创建我们的列表。
- en: List item layouts
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表项布局
- en: It is very tempting to use a card view to display individual items in a list,
    and one can find many examples of it being used like this. However This practice
    is not recommended by Google and for good reason. Cards are designed to display
    content of non-uniform size and the rounded edges and shadows only serve to clutter
    up the screen. When list items are all the same size and conform to the same layout,
    then they should appear as simple rectangular layouts, sometimes with a simple
    divider separating them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用卡片视图显示列表中的单个项目非常诱人，你可以找到许多这样的例子。然而，这种做法并不被谷歌推荐，并且有充分的理由。卡片设计用于显示大小不一的内容，而圆角和阴影只会让屏幕显得杂乱。当列表项大小相同并符合相同的布局时，它们应该显示为简单的矩形布局，有时用简单的分隔线隔开。
- en: We will be creating complex, interactive list items later in the book, so for
    now we will just have an image and a string as our item view.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面，我们将创建复杂的、可交互的列表项，所以现在我们只将图像和字符串作为我们的项目视图。
- en: 'Create a layout file with a horizontal linear layout as its root and place
    these two views inside it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个以水平线性布局为根的布局文件，并将这两个视图放在其中：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have used the `tools` namespace here, that should be removed later, just
    so we can see what our layout looks like without having to compile the entire
    project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了`tools`命名空间，稍后应该移除它，这样我们就可以在不编译整个项目的情况下看到布局的外观：
- en: '![List item layouts](img/image_05_002.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![列表项布局](img/image_05_002.jpg)'
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You may have noticed that some margins and padding look different on CardViews
    when tested on older devices. Rather than resort to creating alternative layout
    resources, the `card_view:cardUseCompatPadding="true"` property will often resolve
    this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在旧设备上测试时，CardViews的一些边距和填充看起来不同。与其创建替代布局资源，通常使用`card_view:cardUseCompatPadding="true"`属性可以解决此问题。
- en: The text sizes and margins we applied here are not arbitrary, but those specified
    by material design guidelines.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里应用的文本大小和边距不是任意的，而是由材料设计指南指定的。
- en: Material font sizes
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料字体大小
- en: 'Text size is very important when it comes to material design and only certain
    sizes are permitted in certain contexts. In the current example, we selected 24sp
    for the name and 16 for the description. Generally speaking, nearly all the text
    we will ever display in a material design application will be 12, 14, 16, 20,
    24, or 34sp. There is a certain level of flexibility when it comes to selecting
    which size to use and when, but the following list should provide a good guide:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在材料设计中，文本大小非常重要，且在特定上下文中只允许使用特定大小的文本。在当前示例中，我们为名称选择了24sp，为描述选择了16sp。一般来说，我们在材料设计应用程序中显示的几乎所有文本都将是12、14、16、20、24或34sp的大小。在选择使用哪种大小以及何时使用时，有一定的灵活性，但以下列表应提供良好的指导：
- en: '![Material font sizes](img/image_05_003.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![材料字体大小](img/image_05_003.jpg)'
- en: Connecting data
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接数据
- en: Android comes equipped with the **SQLite** library, which is a powerful tool
    for creating and managing complex databases. One could easily fill an entire chapter
    or even a whole book on the subject. Here we are not dealing with a large collection
    and it will be simpler and hopefully clearer to create our own data class.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Android配备了**SQLite**库，这是一个创建和管理复杂数据库的强大工具。关于这个主题，可以轻松地填满整整一个章节甚至整本书。这里我们没有处理大量数据集，创建我们自己的数据类会更简单，希望也更清晰。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you would like to learn more about SQLite, comprehensive documentation can
    be found at: [http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html](http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于SQLite的信息，可以在以下链接找到全面的文档：[http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html](http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html)
- en: 'Later we will create complex data structures, but for now we only need to see
    how the setup works, so we will create just three items. To add these, create
    a new Java class called `Filling` and complete like so:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后我们将创建复杂的数据结构，但现在我们只需要了解设置是如何工作的，因此我们只创建三个条目。要添加这些，请创建一个名为`Filling`的新Java类，如下完成：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These can be defined in the main activity like so:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在主活动中这样定义：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we have defined our string resources in the `strings.xml` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在`strings.xml`文件中定义了我们的字符串资源：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This has two great advantages. Firstly, it allows us to keep view and model
    separate and secondly, if we were ever to translate our app into other languages
    this now only requires only an alternative `strings` file. In fact, Android Studio
    makes this process so simple it is worth taking a moment here to see how it is
    done.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这有两个很大的优势。首先，它允许我们保持视图和模型分离；其次，如果我们有朝一日将应用程序翻译成其他语言，现在只需要一个替代的`strings`文件。实际上，Android
    Studio使这个过程变得如此简单，值得花时间了解如何完成。
- en: Translating string resources
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译字符串资源
- en: 'Android Studio provides a **translation editor** to simplify the process of
    providing alternative resources. In exactly the same way that we create designated
    folders for different screen sizes, we create alternative values directories for
    different languages. The editor manages this for us and we do not really need
    to know much about it but it is useful to know that, if we wished to translate
    our app into Italian, say, then the editor would create a folder named `values-it`
    and place the alternative `strings.xml` file within it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供了一个**翻译编辑器**，以简化提供替代资源的过程。正如我们为不同的屏幕尺寸创建指定文件夹一样，我们也为不同的语言创建替代的值目录。编辑器为我们管理这些操作，我们实际上并不需要了解太多，但知道这一点很有用：如果我们希望将应用翻译成意大利语，例如，编辑器将创建一个名为`values-it`的文件夹，并将替代的`strings.xml`文件放在其中。
- en: '![Translating string resources](img/image_05_004.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![翻译字符串资源](img/image_05_004.jpg)'
- en: To access the translations editor, simply right-click on the extant `strings.xml`
    file in the project explorer and select it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问翻译编辑器，只需在项目资源管理器中右键点击现有的`strings.xml`文件，并选择它。
- en: Although the RecyclerView is a fantastic tool for managing and binding data
    in an efficient manner, it does require quite a bit of setting up. Apart from
    the view and the data, there are two other elements required to bind the data
    to our activity, the **LayoutManager** and the **data adapter**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管RecyclerView是一个在高效管理绑定数据方面非常出色的工具，但它确实需要相当多的设置。除了视图和数据之外，还需要两个其他元素来将数据绑定到我们的活动上，即**布局管理器**和**数据适配器**。
- en: Adapters and layout managers
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适配器和布局管理器
- en: 'RecyclerViews manage their data by using a `RecyclerView.LayoutManager` and
    a `RecyclerView.Adapter`. The LayoutManager can be thought of as belonging to
    the RecyclerView and it is this that communicates with the adapter, which in turn
    is bound to our data in a fashion depicted in the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: RecyclerView通过使用`RecyclerView.LayoutManager`和`RecyclerView.Adapter`来管理其数据。可以将LayoutManager视为属于RecyclerView的一部分，它是与适配器通信的，而适配器则以以下图表所示的方式绑定到我们的数据：
- en: '![Adapters and layout managers](img/image_05_005.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![适配器和布局管理器](img/image_05_005.jpg)'
- en: Creating a layout manager is very straightforward. Simply follow these two steps.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建布局管理器非常简单。只需按照以下两个步骤操作。
- en: 'Open the `MainActivity.Java` file and include the following fields:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.Java`文件，并包含以下字段：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then add the following lines to the `onCreate()` method:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下行添加到`onCreate()`方法中：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code is simple to understand but the purpose of the `RecyclerView.setHasFixedSize(true)`
    command my need some explanation. If we know in advance that our list is always
    going to be the same length, then this call will make the management of the list
    far more efficient.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码很容易理解，但`RecyclerView.setHasFixedSize(true)`命令的目的可能需要一些解释。如果我们提前知道列表总是相同长度，那么这个调用将使列表的管理更加高效。
- en: 'To create the adapter, follow these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建适配器，请按照以下步骤操作：
- en: Create a new Java class called `DataAdapter` and have it extend `RecyclerView.Adapter<RecyclerViewAdapter.ViewHolder.`
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Java类，名为`DataAdapter`，并让它继承`RecyclerView.Adapter<RecyclerViewAdapter.ViewHolder>`。
- en: This will generate and error, click on the red quick-fix icon and implement
    the methods suggested.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一个错误，点击红色的快速修复图标并实施建议的方法。
- en: 'These three methods should be filled out as seen here:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这三个方法应按照这里所示填写：
- en: '[PRE9]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And finally, the ViewHolder:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，是ViewHolder：
- en: '[PRE10]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The **ViewHolder** speeds up long lists by only making one call to `findViewById()`,
    which is a resource hungry process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**ViewHolder**通过只调用一次`findViewById()`来加速长列表，这是一个资源密集型的过程。'
- en: 'The example can now be run on an emulator or handset and will have an output
    similar to that seen here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例现在可以在模拟器或手机上运行，并且将产生类似于这里看到的输出：
- en: '![Adapters and layout managers](img/image_05_006.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![适配器和布局管理器](img/image_05_006.jpg)'
- en: Obviously, we would want far more than three fillings but it is easy to see
    from this example how we could add as many more as we wished.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们想要的填充物远不止三个，但从这个例子中可以很容易看出，我们可以根据需要添加更多。
- en: The example we have worked through here explains enough of how the RecyclerView
    works to be able to implement one in a variety of situations. We used a LinearLayoutManager
    with one here to create our list, but there is also a **GridLayoutManager** and
    a **StaggeredGridLayoutManager** that work in a very similar fashion.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里已经详细介绍了如何使用RecyclerView，足以让我们在各种情况下实现一个。这里我们使用了一个LinearLayoutManager来创建我们的列表，但还有**GridLayoutManager**和**StaggeredGridLayoutManager**以非常类似的方式工作。
- en: The adapter pattern
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器模式
- en: In the example we have been studying here, we used an adapter pattern to connect
    our data with our layout in the form of our `DataAdapter`. This is a ready-made
    adapter and although it is clear how it works, it teaches us nothing about the
    structure of the adapter or how to construct one ourselves.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们一直研究的这个例子中，我们使用了适配器模式将我们的数据以`DataAdapter`的形式与布局连接起来。这是一个现成的适配器，尽管它的工作原理很清晰，但它并没有告诉我们关于适配器结构或如何自己构建适配器的内容。
- en: There are many cases where Android provides built in patterns, which is very
    useful, but there will often be times when we need an adapter for classes we have
    created ourselves, and we will now see how this is done and also how to create
    the associated design pattern, the bridge. It is best to begin by looking at these
    patterns conceptually.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在很多情况下，Android 提供了内置的模式，这非常有用，但经常会有我们需要为自己创建的类适配器的时候，现在我们将看到如何做到这一点，以及如何创建相关的设计模式——桥接（bridge）。最好是从概念上了解这些模式开始。
- en: The purpose of the adapter is perhaps the easiest to understand. A good analogy
    would be the physical adapters we use when we take electronic devices to other
    countries where their power outlets work on different voltages and frequencies.
    The adapter has two faces, one to accept our plug and one to fit the socket. Some
    adapters are even smart enough to accept more than one configuration, and this
    is exactly how software adapters work.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器的作用可能是最容易理解的。一个好的类比就是当我们把电子设备带到其他国家时使用的物理适配器，那些国家的电源插座工作在不同的电压和频率上。适配器有两面，一面接受我们的插头，另一面适合插座。一些适配器甚至足够智能，可以接受多种配置，这正是软件适配器的工作原理。
- en: '![The adapter pattern](img/image_05_007.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![适配器模式](img/image_05_007.jpg)'
- en: There are many occasions when we have interfaces that do not match up in the
    same way as plugs do not line up with foreign sockets and the adapter is one of
    the most widely relied on design patterns. We saw earlier that Android APIs themselves
    make use of them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在很多情况下，我们遇到的接口并不能像插头与插座那样完美匹配，适配器（adapter）就是最广泛采用的设计模式之一。我们之前看到，Android API
    本身就使用了这种模式。
- en: One way to solve the problem of incompatible interfaces is to change the interfaces
    themselves, but this can result in some very messy code and spaghetti-like connections
    between classes. Adapters solve this problem and also allow for us to make wide
    scale changes to our software without really disrupting overall structures.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 解决不兼容接口问题的一种方法是改变接口本身，但这可能导致代码非常混乱，并且类之间的联系像意大利面条一样复杂。适配器解决了这个问题，同时也允许我们在不真正破坏整体结构的情况下对软件进行大规模更改。
- en: Imagine that our sandwich app has launched and is doing fine, but then the offices
    we deliver to change their floor plans and go from small offices to an open plan
    structure. Previously we had used fields for building, floor, office, and desk
    to locate customers, but now the office field makes no sense and we have to redesign
    accordingly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的三明治应用已经推出并且运行良好，但是后来我们送达的办公室改变了他们的楼层计划，从独立小办公室变成了开放式办公结构。之前我们使用建筑、楼层、办公室和办公桌字段来定位客户，但现在办公室字段不再有意义，我们必须相应地重新设计。
- en: If our application is at all complex, there will no doubt be many references
    and uses of location classes and rewriting them all could be a time-consuming
    business. Fortunately, the adapter pattern means we can adapt to this change with
    very little fuss.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序稍微复杂一些，无疑会有许多地方引用和使用位置类，重写它们可能会非常耗时。幸运的是，适配器模式意味着我们可以非常轻松地适应这种变化。
- en: 'Here is the original location interface:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是原始的位置接口：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is how it would be implemented:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的实现方式：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Assuming that these classes already exist and it is these that we wish to adapt,
    it takes just the adapter class and some test code to convert a whole app from
    the old system to the new:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这些类已经存在，并且是我们希望适配的类，那么只需要一个适配器类和一些测试代码就可以将整个应用程序从旧系统转换到新系统：
- en: 'The adapter class:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适配器类：
- en: '[PRE13]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The test code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试代码：
- en: '[PRE14]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Despite its usefulness, the adapter pattern has a very simple structure, as
    can be seen in the diagram here:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管适配器模式非常有用，但它的结构非常简单，正如这里所示的图表：
- en: '![The adapter pattern](img/image_05_008.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![适配器模式](img/image_05_008.jpg)'
- en: The key to the adapter pattern is the way that the adapter class implements
    the new interface and wraps the old one.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器模式的关键在于适配器类实现新接口并包装旧接口的方式。
- en: It is easy to see how this pattern can be applied in many other circumstances
    where we need to convert one kind of interface into another. The adapter is one
    of the most useful and frequently applied structural patterns. In some ways, it
    is similar to the next pattern we will encounter, the bridge, in that they both
    have a class that is used to convert interfaces. However, the bridge pattern serves
    a very different function, as we shall see next.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出这种模式如何应用于其他许多情况，在这些情况下，我们需要将一种接口转换为另一种接口。适配器是最有用和最常应用的结构型模式之一。在某种意义上，它与我们将遇到的下一个模式——桥接模式相似，因为它们都有一个用于转换接口的类。然而，正如我们接下来将看到的，桥接模式具有完全不同的功能。
- en: The bridge pattern
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 桥接模式
- en: The main difference between adapters and bridges is that adapters are built
    to correct incompatibilities that arise from our design, whereas a bridge is constructed
    before, and its purpose is to separate an interface from its implementation, so
    that we can modify and even replace the implementation without changing client
    code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器和桥接的主要区别在于，适配器是为了解决设计中出现的不兼容问题而构建的，而桥接是在之前构建的，其目的是将接口与其实现分离，这样我们就可以在不更改客户端代码的情况下修改甚至替换实现。
- en: In the following example, we will assume that users of our sandwich builder
    app will have a choice of open or closed sandwiches. Apart from this one factor,
    these sandwiches are identical in that they can contain any combination of fillings,
    although to simplify matters, there will only be a maximum of two ingredients.
    This will demonstrate how we can decouple an abstract class from its implementations
    so that they be modified independently.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将假设我们的三明治制作应用程序的用户可以选择开放或封闭的三明治。除了这一因素外，这些三明治在可以包含任意填充组合方面是相同的，尽管为了简化问题，只会有最多两个配料。这将演示如何将抽象类与其实现解耦，以便可以独立修改它们。
- en: 'The following steps explain how to construct a simple bridge pattern:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤解释了如何构建一个简单的桥接模式：
- en: 'Begin by creating an interface like the one seen here:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个像这样的接口：
- en: '[PRE15]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, create an abstract class like so:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，像这样创建一个抽象类：
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now extend this class like this:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在像这样扩展这个类：
- en: '[PRE17]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And then create two concrete classes to represent our choice of sandwich:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建两个具体类来表示我们选择的三明治：
- en: '[PRE18]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This pattern can now be tested by adding these lines to the client code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，可以通过向客户端代码中添加以下几行来测试此模式：
- en: '[PRE19]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output in the debug screen will then match this:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后调试屏幕上的输出将与以下内容相匹配：
- en: '[PRE20]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What this demonstrates is how the pattern allows us to make our sandwich in
    different ways using the same abstract class method but different bridge implementer
    classes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了该模式如何允许我们使用相同的抽象类方法以不同的方式制作三明治，但使用不同的桥接实现类。
- en: 'Both adapters and bridges work by creating clean structures that we can use
    to unify or separate classes and interfaces to solve structural incompatibilities
    as they arise, or anticipate them during planning. When viewed diagrammatically,
    the differences between the two become more apparent:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器和桥接模式都通过创建清晰的结构来工作，我们可以使用这些结构来统一或分离类和接口，以解决出现的结构不兼容问题，或者在规划期间预测这些问题。从图解上观察，两者的区别变得更加明显：
- en: '![The bridge pattern](img/image_05_009.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![桥接模式](img/image_05_009.jpg)'
- en: Most structural patterns (and design patterns in general) rely on creating these
    extra layers to clarify code. Simplifying complex structure is without doubt a
    design pattern's greatest asset, and very few patterns help us simplify code more
    than the facade pattern.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数结构型模式（以及一般的设计模式）依赖于创建这些额外的层次来澄清代码。简化复杂结构无疑是设计模式最大的优点，而门面模式帮助我们简化代码的能力很少有模式能比肩。
- en: The facade pattern
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 门面模式
- en: The facade pattern is perhaps one of the simplest of the structural pattern
    to understand and create. As its name suggests, it act as a face that sits in
    front of a complex system. When programming client code, we never have to concern
    ourselves with the complex logic of the rest of our system, if we have a facade
    to represent it. All we have to do is deal with the facade itself, and this means
    we can devise facades to maximize simplicity.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 门面模式或许是最简单的结构型模式之一，易于理解和创建。顾名思义，它就像一个位于复杂系统前面的面孔。在编写客户端代码时，如果我们有一个门面来代表它，我们永远不必关心系统其余部分的复杂逻辑。我们只需要处理门面本身，这意味着我们可以设计门面以最大化简化。
- en: 'Think of the facade pattern like the simple keypad you might find on a typical
    vending machine. Vending machines are very complex systems, combining all manner
    of mechanical and physical components. However, to operate one, all we need is
    to know how to punch in a number or two on its keypad. The keypad is the facade
    and it hides all the complexity behind it. We can demonstrate this by considering
    the imaginary vending machine, outlined in the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将外观模式想象成在典型自动售货机上可能找到的简单键盘。自动售货机是非常复杂的系统，结合了各种机械和物理组件。然而，要操作它，我们只需要知道如何在它的键盘上输入一两个数字。键盘就是外观，它隐藏了所有背后的复杂性。我们可以通过考虑以下步骤中概述的假想自动售货机来演示这一点：
- en: 'Start by creating the following interface:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从创建以下接口开始：
- en: '[PRE21]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, add three concrete implementations of this, like so:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，像这样添加三个具体实现：
- en: '[PRE22]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now add the facade class:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加外观类：
- en: '[PRE23]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Place suitable images in the appropriate drawable directories.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在适当的可绘制目录中放置合适的图像。
- en: 'Create a simple layout file with an image view similar to this one:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的布局文件，其中包含类似于这样的图像视图：
- en: '[PRE24]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add an `ImageView` to the activity class:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向活动类中添加一个`ImageView`：
- en: '[PRE25]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a facade:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个外观：
- en: '[PRE26]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then test output with calls like the one here:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后通过类似于此处的调用测试输出：
- en: '[PRE27]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This constitutes our facade pattern. It is pretty simple to visualize:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这构成了我们的外观模式。它非常简单，容易可视化：
- en: '![The facade pattern](img/image_05_010.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![外观模式](img/image_05_010.jpg)'
- en: Of course, the facade pattern in this example might seem pointless. The `dispense()`
    method does nothing more than display an image, and requires no simplification.
    However, in a more realistic simulation, the dispensing process would involve
    all manner of calls and checks, change has to be calculated, stock availability
    checked, and any number of servos need setting into action. The beauty of the
    facade pattern is that if we were to put all these procedures into place, we would
    not have to change a single line in our client code or facade class. A single
    call to `dispenseDrink()` will have the correct result, no matter how complex
    the logic behind it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，此示例中的外观模式可能看起来毫无意义。`dispense()`方法所做的不过是显示一个图像，并不需要简化。然而，在一个更现实的模拟中，分发过程将涉及各种调用和检查，需要计算找零，检查库存可用性，以及设置多个伺服电机的动作。外观模式的优点是，如果我们要实施所有这些程序，我们不需要更改客户端代码或外观类中的任何一行。对`dispenseDrink()`的单个调用将产生正确的结果，不管背后的逻辑有多复杂。
- en: Despite being very simple, the facade pattern is immensely useful in many situations
    where we want to present a simple and orderly interface for a complicated system.
    Far less simple but equally useful is the criteria (or filter) pattern, which
    allows us to interrogate complex data structures.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管外观模式非常简单，但在许多情况下它都非常有用，比如我们想要为复杂的系统提供一个简单且有序的接口。不那么简单但同样有用的是标准（或过滤）模式，它允许我们查询复杂的数据结构。
- en: The criteria pattern
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准模式
- en: The criteria design pattern provides a clear and concise technique for filtering
    objects according to set criteria. It can be a very powerful tool as this next
    exercise will demonstrate.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 标准设计模式为根据设定标准过滤对象提供了一种清晰且简洁的技术。它可能是一个非常强大的工具，接下来的练习将证明这一点。
- en: 'In this example, we will apply a filter pattern to sort through a list of ingredients
    and filter them according to whether they are vegetarian and where they are produced:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将应用一个过滤模式来筛选一系列食材，并根据它们是否为素食以及产地来过滤它们：
- en: 'Begin by creating the filter interface, like so:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从创建如下所示的过滤器接口开始：
- en: '[PRE28]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next add the ingredient class, like this:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着添加如下所示的配料类：
- en: '[PRE29]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now implement the filter to meet the vegetarian criteria:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在实现满足素食标准的过滤器：
- en: '[PRE30]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, add a filter to test for local produce:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加一个测试本地产品的过滤器：
- en: '[PRE31]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And one for non-local ingredients:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再为非本地食材添加一个：
- en: '[PRE32]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now we need to include an `AND` criteria filter:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要包含一个`AND`标准过滤器：
- en: '[PRE33]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Followed by an `OR` criteria:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着是一个`OR`标准：
- en: '[PRE34]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, add a small data set along these lines:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加如下所示的小型数据集：
- en: '[PRE35]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the main activity, create the following filters:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主活动中，创建以下过滤器：
- en: '[PRE36]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create a simple layout with a basic text view.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有基本文本视图的简单布局。
- en: 'Add the following method to the main activity:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向主活动添加以下方法：
- en: '[PRE37]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The pattern can now be tested with calls like those here:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以使用类似于此处的调用测试该模式：
- en: '[PRE38]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Testing the pattern on a device should produce this output:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备上测试该模式应产生此输出：
- en: '![The criteria pattern](img/image_05_011.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![标准模式](img/image_05_011.jpg)'
- en: 'We only applied a few simple criteria here, but we could easily have included
    information regarding allergies, calories, price, and any others we chose, along
    with the appropriate filters. It is this ability to create a single criterion
    from multiple ones that makes this pattern so useful and versatile. It can be
    viewed visually like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里只应用了一些简单的标准，但我们同样可以轻松地包含有关过敏、卡路里、价格以及我们选择的任何其他信息，以及相应的过滤器。正是这种能够从多个标准创建单一标准的能力，使得这个模式如此有用和多变。它可以像这样视觉化地呈现：
- en: '![The criteria pattern](img/image_05_012.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![标准模式](img/image_05_012.jpg)'
- en: The filter pattern, like many others, does not do anything that we have not
    done before. Instead it shows another way to perform familiar and common tasks,
    such as filtering data according to specific criteria. Providing we pick the right
    pattern for the right task, these tried and tested structures make best practice
    almost inevitable.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器模式，像许多其他模式一样，并没有做任何我们之前没有做过的事情。相反，它展示了执行熟悉和常见任务（如根据特定标准过滤数据）的另一种方式。只要我们为正确的任务选择正确的模式，这些经过验证的结构模式几乎必然会使最佳实践成为可能。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered some of the most frequently applied and most
    useful of the structural patterns. We began by seeing how the framework separates
    model from view and then how to manage data structures with the RecyclerView and
    its adapter and how this is similar to the adapter design pattern. With this connection
    established, we then went on to create an example of how we use adapters to counter
    the inevitable incompatibilities between objects, unlike the bridge pattern we
    built next, which is designed beforehand.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些最常应用和最有用的结构模式。我们从框架如何将模型与视图分离开始，然后学习了如何使用RecyclerView及其适配器管理数据结构，以及这与适配器设计模式的相似之处。建立这种联系后，我们接着创建了一个示例，说明如何使用适配器来解决对象之间不可避免的兼容性问题，而我们随后构建的桥接模式则是在设计之初就预定好的。
- en: Having started the chapter on quite a practical note, it concludes by taking
    a close look at two other important structural patterns, the facade, for simplifying
    structures apparent functionality and the criteria pattern, which works on sets
    of data, returning filtered sets of objects, applying multiple criteria as simply
    as we might one.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章以非常实用的内容开始，最后通过深入探讨另外两个重要的结构模式作结：门面模式，用于简化结构的明显功能；以及标准模式，它处理数据集，返回经过筛选的对象集，像我们可能只应用一个标准那样简单地应用多个标准。
- en: In the next chapter, we will explore user interfaces and how to apply the design
    library to provide swipe and dismiss behavior. We will also revisit the factory
    pattern and apply it to our layout, using a customized dialog box to display its
    output.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨用户界面以及如何应用设计库来实现滑动和取消行为。我们还将重新审视工厂模式，并将其应用于我们的布局，使用自定义对话框来显示其输出。
