- en: Chapter 8. Contacts, Camera, and Location
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章. 联系人、相机和位置
- en: Some of the most vital features used by mobile applications today are based
    on the new types of data that can be collected by our devices. Features such as
    a device's GPS location and camera are staples in modern applications such as
    Instagram or Twitter. It's difficult to develop an application and not use some
    of these functionalities. So, let's explore our options for taking advantage of
    this functionality with Xamarin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当前移动应用程序最关键的一些特性基于我们的设备可以收集的新类型数据。像 GPS 位置和相机这样的功能是 Instagram 或 Twitter 等现代应用程序的基石。开发一个应用程序而不使用这些功能是非常困难的。因此，让我们探讨使用
    Xamarin 利用这一功能的方法。
- en: 'In this chapter, we will do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将执行以下操作：
- en: Introduce the Xamarin.Mobile library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Xamarin.Mobile 库
- en: Read the address book on Android and iOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 和 iOS 上读取通讯录
- en: Retrieve the GPS location of our device
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取我们设备的 GPS 位置
- en: Pull photos from the camera and photo library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从相机和照片库中提取照片
- en: Introducing Xamarin.Mobile
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Xamarin.Mobile
- en: To simplify the development of these features across multiple platforms, Xamarin
    has developed a library called **Xamarin.Mobile**. It delivers a single API for
    accessing the contacts, GPS location, heading of the screen, camera, and photo
    library for iOS, Android, and even Windows platforms. It also takes advantage
    of **Task Parallel Libraries** (**TPL**) to deliver a modern C# API that will
    make developers more productive than their native alternatives would. This gives
    you the ability to write nice, clean, asynchronous code using the `async` and
    `await` keywords in C#. You can also reuse the same code in iOS and Android, apart
    from a few differences that are required by the Android platform.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化这些特性在多个平台上的开发，Xamarin 开发了一个名为 **Xamarin.Mobile** 的库。它为 iOS、Android 甚至 Windows
    平台提供了一个单一的 API，用于访问联系人、GPS 位置、屏幕方向、相机和照片库。它还利用 **任务并行库**（**TPL**）提供一个现代的 C# API，使开发者比使用原生替代方案更高效。这使你能够使用
    C# 中的 `async` 和 `await` 关键字编写优美、清晰的异步代码。你还可以在 iOS 和 Android 上重用相同的代码，除了 Android
    平台所必需的一些差异。
- en: 'To install Xamarin.Mobile, open the **Xamarin Component Store** in **Xamarin
    Studio** and add the **Xamarin.Mobile** component to a project, as shown in the
    following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Xamarin.Mobile，请在 **Xamarin Studio** 中打开 **Xamarin 组件商店**，并将 **Xamarin.Mobile**
    组件添加到项目中，如下面的截图所示：
- en: '![Introducing Xamarin.Mobile](img/image00242.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Xamarin.Mobile](img/image00242.jpeg)'
- en: 'Before we dig further into using Xamarin.Mobile, let''s review the namespaces
    and functionality available with the library:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解如何使用 Xamarin.Mobile 之前，让我们回顾一下该库提供的命名空间和功能：
- en: '`Xamarin.Contacts`: This contains classes that enable you to interact with
    the full address book. It includes everything from the contact''s photo, phone
    numbers, address, e-mail, website, and so on.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xamarin.Contacts`：这包含了使你能够与完整通讯录交互的类。它包括从联系人的照片、电话号码、地址、电子邮件、网站等所有内容。'
- en: '`Xamarin.Geolocation`: This, combined with the accelerometer, gives you access
    to the device''s GPS location, including the altitude, heading, longitude, latitude,
    and speed. You can track the device''s position explicitly or listen for GPS position
    changes over time.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xamarin.Geolocation`：结合加速度计，这可以让你访问设备的 GPS 位置，包括高度、屏幕方向、经度、纬度和速度。你可以明确跟踪设备的位置，或者随着时间的推移监听
    GPS 位置的变化。'
- en: '`Xamarin.Media`: This grants access to the device''s cameras (if there are
    more than one) and built-in photo library. This is an easy way to add photo selection
    capabilities to any application.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xamarin.Media`：这可以访问设备的摄像头（如果设备有多个摄像头）和内置照片库。这是向任何应用程序添加照片选择功能的一种简单方法。'
- en: Xamarin.Mobile is an open source project with the standard Apache 2.0 license.
    You can contribute to the project or submit issues to the GitHub page at [https://github.com/xamarin/Xamarin.Mobile](https://github.com/xamarin/Xamarin.Mobile).
    Feel free to use Xamarin.Mobile in your applications, or fork and modify it for
    your own purposes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Mobile 是一个开源项目，采用标准的 Apache 2.0 许可证。你可以为项目做贡献或在 GitHub 页面提交问题，地址是[https://github.com/xamarin/Xamarin.Mobile](https://github.com/xamarin/Xamarin.Mobile)。请随意在您的应用程序中使用
    Xamarin.Mobile，或者为了自己的目的对其进行分叉和修改。
- en: In this chapter, we will be adding lots of features to the XamSnap sample application,
    built in earlier chapters. You may wish to visit [Chapter 6](part0055.xhtml#aid-1KEEU2
    "Chapter 6. XamSnap for Android"), *XamSnap for Android*, if needed, or refer
    to the sample source code included with this book.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向之前章节构建的XamSnap示例应用程序添加许多功能。如有需要，你可能希望访问[第6章](part0055.xhtml#aid-1KEEU2
    "第6章。XamSnap for Android")，*XamSnap for Android*，或者参考本书附带的示例源代码。
- en: Accessing contacts
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问联系人
- en: To begin our exploration of what Xamarin.Mobile offers, let's access the address
    book within a Xamarin application. Let's improve the add friend feature of XamSnap
    by loading friends from the user's contact list. Make sure to add Xamarin.Mobile
    to the project from the Component Store for both the iOS and Android projects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始探索Xamarin.Mobile提供的内容，让我们访问Xamarin应用程序内的地址簿。通过从用户的联系人列表加载朋友，来改进XamSnap的添加好友功能。确保从组件商店为iOS和Android项目添加Xamarin.Mobile。
- en: 'Navigate to the `XamSnap` portable class library. First, we will need to split
    apart the `IWebService` interface, by moving one method to a new `IFriendService`
    interface:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 导航至`XamSnap`可移植类库。首先，我们需要将`IWebService`接口拆分，通过将一个方法移动到新的`IFriendService`接口中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, in `FriendViewModel`, we will need to use the new `IFriendService` interface
    instead of the old one:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`FriendViewModel`中，我们需要使用新的`IFriendService`接口而不是旧的接口：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we need to implement `IFriendService` in the iOS project to allow it to
    load from a device''s contact list. Navigate to the `XamSnap.iOS` project and
    add a new class implementing `IFriendService`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在iOS项目中实现`IFriendService`，以便能够从设备的联系人列表中加载。导航至`XamSnap.iOS`项目，并添加一个实现`IFriendService`的新类：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In order to use Xamarin.Mobile to load contacts, you must first create an `AddressBook`
    object. Next, we have to call `RequestPermissions` in order to ask the user for
    permission to access the address book. This is an important step, since it is
    required by iOS devices before an application can access the user's contacts.
    This prevents potentially nefarious applications from retrieving contacts without
    the user's knowledge.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Xamarin.Mobile加载联系人，你首先必须创建一个`AddressBook`对象。接下来，我们需要调用`RequestPermissions`来请求用户允许访问地址簿。这是一个重要的步骤，因为iOS设备要求在应用程序访问用户联系人之前必须这样做。这防止了可能恶意应用在用户不知情的情况下获取联系人。
- en: Next, we use `foreach` over the `AddressBook` object and create instances of
    the `User` object that our existing application already understands. This is a
    great example of how the MVVM design pattern is great at separating layers. When
    we swap out logic at the model layer, the UI continues to work properly without
    any changes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`foreach`遍历`AddressBook`对象，并创建现有应用程序已经理解的`User`对象的实例。这正是MVVM设计模式在分层方面的优势的绝佳例子。当我们更换模型层的逻辑时，UI仍然可以正常工作，无需任何更改。
- en: 'Next, we need to modify our `AppDelegate.cs` file to use our `ContactsService`
    as the `IFriendService` interface:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改我们的`AppDelegate.cs`文件，以使用我们的`ContactsService`作为`IFriendService`接口：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you were to compile and run the application at this point, you would be
    greeted by the standard iOS popup requesting access to contacts, as shown in the
    following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在这个时候编译并运行应用程序，你会看到标准的iOS弹窗，请求访问联系人，如下面的截图所示：
- en: '![Accessing contacts](img/image00243.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![访问联系人](img/image00243.jpeg)'
- en: If you accidentally hit **Don't Allow**, you can change this setting by navigating
    to **Settings** | **Privacy** | **Contacts** on the device. In the iOS Simulator,
    you can also reset all privacy prompts in the simulator by closing the application
    and going to **Settings** | **General** | **Reset** | **Reset Location & Privacy**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你意外点击了**不允许**，可以通过导航到设备上的**设置** | **隐私** | **联系人**来更改此设置。在iOS模拟器中，还可以通过关闭应用程序并前往**设置**
    | **通用** | **重置** | **重置位置与隐私**来重置所有隐私提示。
- en: 'If our app is granted the correct access, we should be able to see a list of
    contacts without modifying any code in the UI layer of our application. The following
    screenshot shows the default list of contacts in the iOS Simulator:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序被授予了正确的访问权限，我们应该能够看到联系人列表，而无需修改应用程序UI层的任何代码。以下屏幕截图显示了iOS模拟器中的默认联系人列表：
- en: '![Accessing contacts](img/image00244.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![访问联系人](img/image00244.jpeg)'
- en: Retrieving contacts on Android
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android上检索联系人
- en: In a very similar fashion, we can retrieve a list of contacts in Android with
    Xamarin.Mobile. All of the APIs in Xamarin.Mobile are identical in Android, with
    the exception of the requirement to pass `Android.Content.Context`  in a few places.
    This is because many native Android APIs require a reference to the current activity
    (or to another context such as `Application`) in order to function properly. To
    begin, create a standard Android Application project by navigating to **Android**
    | **Android Application** in Xamarin Studio. Make sure to add Xamarin.Mobile to
    the project from the Component Store.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以非常类似的方式，我们可以使用 Xamarin.Mobile 在 Android 中获取联系人列表。Xamarin.Mobile 中的所有 API 在
    Android 上都是相同的，除了在某些地方需要传递`Android.Content.Context`。这是因为许多原生 Android API 需要引用当前活动（或其他如`Application`的上下文）才能正常工作。首先，通过在
    Xamarin Studio 中导航到**Android** | **Android Application**创建一个标准的 Android 应用程序项目。确保从组件商店向项目添加
    Xamarin.Mobile。
- en: 'Add an Android equivalent of the `IFriendService` as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式添加`IFriendService`的 Android 等效项：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code, calling Xamarin.Mobile, is identical to what we did on the code for
    iOS, except that here, `Application.Context` had to be passed for the Android
    `Context` in the constructor for `AddressBook`. Our code changes are complete;
    however, if you ran the application right now, an exception would be thrown. Android
    requires permission in the manifest file, which will notify the user of its access
    to the address book when downloaded from Google Play.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这段调用 Xamarin.Mobile 的代码与我们为 iOS 编写的代码相同，不同之处在于这里需要为`AddressBook`构造函数中的 Android
    `Context`传递`Application.Context`。我们的代码修改完成了；但是，如果你现在运行应用程序，将会抛出异常。Android 需要在清单文件中要求权限，这样当从
    Google Play 下载时，它会通知用户其访问通讯录的权限。
- en: 'We must modify the `AndroidManifest.xml` file and declare one permission as
    follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须修改`AndroidManifest.xml`文件，并按以下方式声明一个权限：
- en: Open the project options for the Android project.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Android 项目的项目选项。
- en: Select the **Android Application** tab under **Build**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建**下选择**Android Application**标签页。
- en: Under the **Required permissions** section, check **ReadContacts**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**所需权限**部分，勾选**ReadContacts**。
- en: Click on **OK** to save your changes.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**OK**保存更改。
- en: 'Now if you run the application, you will get a list of all the contacts on
    the device, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你运行应用程序，你将获得设备上所有联系人的列表，如下截图所示：
- en: '![Retrieving contacts on Android](img/image00245.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![在 Android 上获取联系人](img/image00245.jpeg)'
- en: Looking up GPS location
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找 GPS 位置
- en: Using Xamarin.Mobile to track a user's GPS location is as simple as accessing
    their contacts. There is a similar process for setting up access on iOS and Android,
    but in the case of location, you don't have to request permission from code. iOS
    will automatically show the standard alert requesting permission. Android, on
    the other hand, merely requires a manifest setting.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Xamarin.Mobile 跟踪用户的 GPS 位置与访问他们的联系人一样简单。iOS 和 Android 设置访问权限的过程类似，但在位置的情况下，你无需从代码请求权限。iOS
    会自动显示标准警报请求权限。而 Android 只需要在清单中进行设置。
- en: As an example, let's add functionality to our XamSnap application that tags
    GPS location to messages within a chat conversation. You can think of this as
    tagging a location to a photo, as in other apps. Make sure to add Xamarin.Mobile
    to the project from the Component Store.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，让我们为 XamSnap 应用添加一个功能，在聊天对话中为消息标记 GPS 位置。你可以将其视为像其他应用一样给照片标记位置。确保从组件商店向项目添加
    Xamarin.Mobile。
- en: 'First, let''s implement a `Location` class for storing latitude and longitude:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们实现一个用于存储纬度和经度的`Location`类：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, let''s add a `Location` property to the `Message` class:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在`Message`类中添加一个`Location`属性：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s create a new `ILocationService` interface for querying a GPS location:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个新的`ILocationService`接口，用于查询 GPS 位置：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now need to update the `MessageViewModel` class to use the location service
    and tag the GPS location on new messages:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要更新`MessageViewModel`类，以使用位置服务并在新消息上标记 GPS 位置：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, let''s implement the `ILocationService` interface for iOS. Create a new
    class in the iOS project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为 iOS 实现`ILocationService`接口。在 iOS 项目中创建一个新类：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What we did here was to first create a `Geolocator` object if needed. This delays
    the iOS permission popup until you actually go to send a message. We then used
    `async`/`await` to query for a GPS location with a three second timeout. We logged
    the location that was found and created a new `Location` object for use in the
    rest of our application. If any errors occurred, we made sure to log them and
    return `null` for our instance of `Location`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的首先是在需要时创建一个`Geolocator`对象。这样可以延迟 iOS 权限弹窗，直到你实际去发送消息。然后我们使用`async`/`await`查询
    GPS 定位，并设置三秒的超时时间。我们记录找到的位置并创建一个新的`Location`对象，供应用程序的其余部分使用。如果发生任何错误，我们确保记录它们并将我们的`Location`实例返回为`null`。
- en: 'Next, register our new service in `AppDelegate.cs`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`AppDelegate.cs`中注册我们的新服务：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, there is a setting in our `Info.plist` file that is required by iOS
    for accessing a user's location and that also gives the developer the option to
    display a message in the permission popup.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的`Info.plist`文件中有一个设置是 iOS 访问用户位置所必需的，并且它还允许开发者在权限弹窗中显示一条消息。
- en: 'Open the `Info.plist` file and change it as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`Info.plist`文件，并按如下所示更改：
- en: Click the **Source** tab.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**源代码**标签。
- en: Click the plus button on the **Add new entry** row.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加新条目**行上的加号按钮。
- en: In the dropdown, choose **Location When In Use Usage Description**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中，选择**使用期间的位置访问描述**。
- en: Enter text for the user in the **Value** field.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**值**字段中为用户输入文本。
- en: 'If you compile and run the application, you should see an iOS permission prompt
    when adding a new message, as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编译并运行应用程序，你应该会在添加新消息时看到一个 iOS 权限提示，如下面的截图所示：
- en: '![Looking up GPS location](img/image00246.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![查找 GPS 定位](img/image00246.jpeg)'
- en: If you watch the console log in Xamarin Studio, you will be able to see the
    GPS coordinates being added to the `Message` object. For this to actually work,
    you will have to deploy to a physical iOS device to see the GPS location returned.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察 Xamarin Studio 中的控制台日志，你将能够看到 GPS 坐标被添加到`Message`对象中。为了实际工作，你将需要部署到物理
    iOS 设备上才能看到返回的 GPS 定位。
- en: Implementing GPS location on Android
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 Android 上的 GPS 定位
- en: 'Just as in the previous section, using Xamarin.Mobile for GPS location is almost
    identical to the APIs we used in iOS. First, we will need to create an `ILocationService`
    as before, only needing to change one line of code from that we created for iOS:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一部分所述，使用 Xamarin.Mobile 获取 GPS 位置与我们在 iOS 上使用的 API 几乎相同。首先，我们需要像之前一样创建一个`ILocationService`，只需更改一行我们为
    iOS 创建的代码：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, also register our new service in `Application.cs` :'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`Application.cs`中注册我们的新服务：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Again, this looks identical to the code for iOS, except for the constructor
    for `Geolocator`. If you ran the application at this point, it would start with
    no errors. However, no events would be fired from the `Geolocator` object. We
    first need to add permission to access the location from the Android Manifest
    file. It is also a good idea to start the locator in `OnResume` and stop it in
    `OnPause`. This will conserve the battery by stopping the GPS location when this
    activity is no longer on the screen.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这看起来与 iOS 的代码相同，除了`Geolocator`的构造函数。如果在这一点上运行应用程序，它将开始运行且没有错误。然而，`Geolocator`对象不会触发任何事件。我们首先需要从
    Android 清单文件中添加访问位置的权限。在`OnResume`中开始定位器，在`OnPause`中停止它也是一个好主意。这将通过在屏幕上不再显示此活动时停止
    GPS 定位来节省电池。
- en: 'Let''s create an `AndroidManifest.xml` file and declare two permissions, as
    follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`AndroidManifest.xml`文件，并声明两个权限，如下所示：
- en: Open the project options for the Android project.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Android 项目的项目选项。
- en: Select the **Android Application** tab under **Build**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建**下选择**Android 应用程序**标签。
- en: Click on **Add Android manifest**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加 Android 清单**。
- en: Under the **Required permissions** section, check **AccessCoarseLocation** and
    **AccessFineLocation**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**所需权限**部分，勾选**AccessCoarseLocation**和**AccessFineLocation**。
- en: Click on **OK** to save your changes.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**保存你的更改。
- en: 'Now if you compile and run the application, you will get the GPS location tagged
    to new messages sent. Most Android emulators have an option for emulating GPS
    location. The x86 HAXM emulator is found under the dots menu at the bottom, then
    **Extended Controls | Location**, as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你编译并运行应用程序，你将获得与新发送的消息关联的 GPS 定位信息。大多数 Android 模拟器都有模拟 GPS 定位的选项。x86 HAXM
    模拟器位于底部点菜单下，然后是**扩展控制 | 位置**，如下面的截图所示：
- en: '![Implementing GPS location on Android](img/image00247.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![在 Android 上实现 GPS 定位](img/image00247.jpeg)'
- en: Accessing the photo library and camera
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问照片库和相机
- en: The last major feature of Xamarin.Mobile is the ability to access photos in
    order to give users the ability to add their own content to your applications.
    Using a class called `MediaPicker`, you can pull photos from the device's camera
    or photo library and optionally display your own UI for the operation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Mobile的最后一个主要功能是访问照片，以使用户能够向你的应用程序添加自己的内容。使用一个名为`MediaPicker`的类，你可以从设备的相机或照片库中获取照片，并可以选择性地为操作显示你自己的UI。
- en: 'Let''s modify `MessageViewModel` to support photos. First, add the following
    property:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改`MessageViewModel`以支持照片。首先，添加以下属性：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we need to modify the following lines in the `SendMessage` method:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改`SendMessage`方法中的以下几行：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we will need to modify the UI layer to prompt for photos. Open `MessagesController.cs`
    and add the following variables to the top of the class:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要修改UI层以提示选择照片。打开`MessagesController.cs`并在类的顶部添加以下变量：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `ViewDidLoad` method, we will need to set up the `MediaPicker` and a
    new `UIBarButtonItem` to choose a photo:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ViewDidLoad`方法中，我们需要设置`MediaPicker`和一个新的`UIBarButtonItem`来选择照片：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are using the `UIActionSheet` class here to prompt the user to decide whether they
    want to take a new photo or open an existing one. Now let''s implement the `OnActionSheetClicked`
    method:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们使用`UIActionSheet`类来提示用户决定他们是想拍摄新照片还是打开现有照片。现在让我们实现`OnActionSheetClicked`方法：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using `MediaPicker` is pretty straightforward; you merely have to call `GetTakePhotoUI`
    or `GetPickPhotoUI` to retrieve a `MediaPickerController` instance. Then, you
    can call `PresentViewController` to display the controller modally over the top
    of the current controller. After calling `GetResultAsync` we use the resulting
    `MediaFile` object to pass the path of the photo to our ViewModel layer. It is
    also necessary to use a `try-catch` block, in case the user cancels and calls `DismissViewController`
    to hide the modal.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`MediaPicker`非常直接；你只需调用`GetTakePhotoUI`或`GetPickPhotoUI`来获取一个`MediaPickerController`实例。然后，你可以调用`PresentViewController`以模态形式在当前控制器顶部显示控制器。调用`GetResultAsync`之后，我们使用结果`MediaFile`对象将照片路径传递给我们的ViewModel层。还需要使用`try-catch`块，以防用户取消并调用`DismissViewController`隐藏模态界面。
- en: 'Next, we need to modify `UITableViewSource` to display photos:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改`UITableViewSource`以显示照片：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'One last case we need to handle is in the `ViewWillAppear` method:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要处理的最后一个情况是在`ViewWillAppear`方法中：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If we did not make this change, the list of photos would refresh after choosing
    a photo, which could cause some odd behavior.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不进行这项更改，选择照片后照片列表将会刷新，这可能导致一些奇怪的行为。
- en: 'You should now be able to run the app and select a photo to be viewed on the
    screen. The following screenshot shows a nice default photo from the iOS simulator
    that I selected from the photo library:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够运行应用程序并在屏幕上选择照片。以下屏幕截图显示了我从照片库中选择的iOS模拟器中的默认照片：
- en: '![Accessing the photo library and camera](img/image00248.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![访问照片库和相机](img/image00248.jpeg)'
- en: Accessing photos on Android
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android上访问照片
- en: In comparison to iOS, we have to use a slightly different pattern on Android
    to retrieve photos from the camera or photo library. A common pattern in Android
    is that it calls `StartActivityForResult` to launch an activity from another application.
    When this activity is completed, `OnActivityResult` will be called to notify your
    activity that the action is complete. Because of this, Xamarin.Mobile could not
    use the same APIs on Android as on iOS.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与iOS相比，我们在Android上需要使用稍微不同的模式从相机或照片库中检索照片。Android中的一个常见模式是调用`StartActivityForResult`从另一个应用程序启动活动。当此活动完成后，将调用`OnActivityResult`以通知你的活动操作已完成。因此，Xamarin.Mobile在Android上不能使用与iOS相同的API。
- en: 'First, let''s modify our Android layouts to handle photos. Add a new `ImageButton`
    in `Messages.axml` before `EditText`, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们修改Android的布局以处理照片。在`Messages.axml`中的`EditText`之前添加一个新的`ImageButton`，如下所示：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Then add the `android:layout_toRightOf="@+id/photoButton"` attribute to `EditText`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`EditText`中添加`android:layout_toRightOf="@+id/photoButton"`属性。
- en: 'Next, we need to modify both `MyMessageListItem` and `TheirMessageListItem`
    as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要按照以下方式修改`MyMessageListItem`和`TheirMessageListItem`：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In both of these cases, it is a lot easier to just modify the Android XML, as
    the designer is sometimes a bit finicky when adding new views to the left or right
    of existing views.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，修改Android XML要容易得多，因为设计师在向现有视图的左右添加新视图时有时会有些挑剔。
- en: 'Now let''s add a couple of member variables to the top of `MessagesActivity.cs`
    as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`MessagesActivity.cs`文件的顶部添加几个成员变量，如下所示：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, let''s rearrange the `OnCreate` method as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按如下方式重新排列`OnCreate`方法：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What we are doing here is creating an `AlertDialog` when the `photoButton` is
    clicked. This is identical to what we did on iOS, giving the option for the user
    to either take a photo or choose one from their existing photo library. We have
    also moved the click handler of `sendButton` to a `Send` method so we can reuse
    it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的就是当点击`photoButton`时创建一个`AlertDialog`。这与我们在 iOS 上所做的完全相同，为用户提供选项，要么拍照，要么从现有的照片库中选择。我们还把`sendButton`的点击处理程序移到了一个`Send`方法中，这样我们可以重用它。
- en: 'Now, let''s implement the `OnTakePhoto` and `OnChoosePhoto` methods needed:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现所需的`OnTakePhoto`和`OnChoosePhoto`方法：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In each case, we make a call to `GetPickPhotoUI` or `GetTakePhotoUI` in order
    to get an instance of an Android `Intent` object. This object is used to start
    new activities within an application. `StartActivityForResult` will also start
    the `Intent` object, expecting a result to be returned from the new activity.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，我们都会调用`GetPickPhotoUI`或`GetTakePhotoUI`以获取一个 Android `Intent`对象的实例。这个对象用于在应用程序内启动新的活动。`StartActivityForResult`也会启动`Intent`对象，并期望从新活动中返回一个结果。
- en: 'Next, we need to implement `OnActivityResult` in order to handle what will
    happen when the new activity is completed:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现`OnActivityResult`以处理当新活动完成时会发生什么：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If this is successful, we retrieve a `MediaFile` and pass its path to our ViewModel
    layer. We call our `Send` method that we set up earlier, which sends the message.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，我们将获取一个`MediaFile`并将它的路径传递给我们的 ViewModel 层。我们调用之前设置的`Send`方法，该方法用于发送消息。
- en: 'One other detail we need is to add the following code to our `OnResume` method:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`OnResume`方法中添加以下代码：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This prevents some odd behavior when the user navigates away to a new activity
    to choose a photo and then returns. It is very similar to what we had to do on
    iOS.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以防止用户导航到新活动以选择照片然后返回时出现一些奇怪的行为。这和我们之前在 iOS 上需要做的事情非常相似。
- en: 'For these changes to work, we need to modify our `AndroidManifest.xml` file
    and declare two permissions as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些更改生效，我们需要修改我们的`AndroidManifest.xml`文件，并按如下声明两个权限：
- en: Open the project options for the Android project.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Android 项目的项目选项。
- en: Select the **Android Application** tab under **Build**.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建**下选择**Android 应用程序**标签页。
- en: Click on **Add Android manifest**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加 Android 清单**。
- en: Under the **Required permissions** section, check **Camera** and **WriteExternalStorage**.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**所需权限**部分，勾选**相机**和**写入外部存储**。
- en: Click on **OK** to save your changes.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**以保存更改。
- en: 'You should now be able to run the application and send photos as messages,
    as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够运行应用程序并发送照片作为消息，如下截图所示：
- en: '![Accessing photos on Android](img/image00249.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![在 Android 上访问照片](img/image00249.jpeg)'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we discovered the Xamarin.Mobile library and how it can accelerate
    common tasks in a cross-platform way. We retrieved contacts from the address book
    and set up GPS location updates over time. Lastly, we loaded photos from the camera
    and photo library.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Xamarin.Mobile 库以及它如何以跨平台的方式加速常见任务。我们从地址簿中检索联系人，并随时间设置 GPS 位置更新。最后，我们从相机和照片库中加载照片。
- en: After completing this chapter, you should have a complete grasp of the Xamarin.Mobile
    library and the common functionality it provides for cross-platform development.
    It gives clean, modern APIs that offer `async`/`await` functionality that can
    be accessed across iOS, Android, and Windows Phone. Accessing contacts, GPS, and
    photos across platforms is very straightforward with Xamarin.Mobile.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你应该完全掌握 Xamarin.Mobile 库及其为跨平台开发提供的常见功能。它提供了干净、现代的 API，具有`async`/`await`功能，可以跨
    iOS、Android 和 Windows Phone 访问。使用 Xamarin.Mobile 在不同平台上访问联系人、GPS 和照片是非常简单的。
- en: In the next chapter, we'll create a real web service using Windows Azure to
    drive our XamSnap application. We will use a feature called Azure Functions and
    implement push notifications on iOS and Android.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Windows Azure 创建一个真实的网络服务，来驱动我们的 XamSnap 应用程序。我们将使用一个称为 Azure Functions
    的功能，并在 iOS 和 Android 上实现推送通知。
