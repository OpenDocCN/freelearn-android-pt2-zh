- en: Building a Charts Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建图表组件
- en: 'In the previous chapter, we saw how to build a complex custom view that combined
    a bit of everything we''ve covered in this book. It included some rendering code,
    used a third-party library, had touch interactions and animations, and we briefly
    talked about performance considerations. It was a rather complete custom view
    example, but it''s not the only one. In this chapter, we''ll be building another
    complex custom view. Step by step, we''ll build a charts custom view to draw graphs
    we can embed in our Android applications. We''ll start by building a very basic
    implementation and we''ll be adding additional features and functionalities along
    the way. In more detail, we''ll see about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解到如何构建一个复杂的自定义视图，它融合了本书所介绍的所有内容。它包括一些渲染代码，使用第三方库，具有触摸交互和动画效果，并且我们简要讨论了性能考量。这是一个相当完整自定义视图的例子，但它并非唯一。在本章中，我们将构建另一个复杂自定义视图。逐步地，我们将构建一个图表自定义视图，用以绘制可以嵌入到我们的Android应用程序中的图形。我们将从构建一个非常基础的实施开始，并在途中添加额外的功能和功能性。更详细地说，我们将了解以下内容：
- en: Building a basic charts component
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个基础图表组件
- en: How to take into account margins and padding
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何考虑边距和填充
- en: Using Paths to improve rendering
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路径改善渲染
- en: Updating and growing our data set
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新和扩展我们的数据集
- en: Rendering additional features and customizations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加额外的特性和自定义
- en: Building a basic chart custom view
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个基础的图表自定义视图
- en: Most probably, at one point or another, we'll have to draw some charts in an
    Android application. It can be a static chart, which isn't that fun as it can
    be replaced simply by an image, or it can be a dynamic chart, allowing user interactions
    and reactions to data changes. This last case is where we can use a custom view
    to draw real-time graphs, add multiple sources of data, and even animate it. Let's
    start by building a very simple custom view where we'll add more features later
    on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android应用程序中，我们可能需要在某个时刻绘制一些图表。它可以是静态图表，这并不那么有趣，因为它可以被简单地替换为图像，也可以是动态图表，允许用户交互和对数据变化的反应。最后一种情况是我们可以使用自定义视图来绘制实时图表，添加多个数据源，甚至为其添加动画。让我们从构建一个非常简单的自定义视图开始，稍后我们会添加更多功能。
- en: Margins and padding
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边距和填充
- en: 'As with any normal view, our custom view will be subject to the layout manager''s
    margins and to the view''s padding. We should not worry that much about the margin
    values, as the layout manager will directly process them and will transparently
    modify the size available for our custom view. The values we''ve to take into
    consideration are the padding values. As we can see in the following image, the
    margin is the space the layout manager is adding before and after our custom view
    and the padding is the internal space between the view boundaries and the content
    itself:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何普通视图一样，我们的自定义视图将受到布局管理器的边距和视图填充的影响。我们不应该太担心边距值，因为布局管理器将直接处理它们，并且会透明地修改我们的自定义视图可用的尺寸。我们需要考虑的是填充值。正如在下图中所看到的，边距是布局管理器在我们自定义视图前后添加的空间，而填充则是视图边界与内容之间的内部空间：
- en: '![](img/740959ca-d93e-41d5-834b-06ba78b731ca.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/740959ca-d93e-41d5-834b-06ba78b731ca.png)'
- en: 'Our view has to manage this padding appropriately. To do so, we can directly
    use the different `getPadding` methods from `canvas` such as `getPaddingTop()`,
    `getPaddingBottom()`, `getPaddingStart()`, and so on. Using the padding values,
    we should adjust the rendering area accordingly on our `onDraw()` method:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的视图需要适当管理这个填充。为此，我们可以直接使用`canvas`中的不同`getPadding`方法，如`getPaddingTop()`、`getPaddingBottom()`、`getPaddingStart()`等。使用填充值，我们应该在`onDraw()`方法中相应地调整渲染区域：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this code, we're storing the left and topmost points of our `Canvas` which
    are the start and top padding values respectively. We have to be careful with
    this sentence as the start padding might not be the left padding. If we check
    the documentation we'll find there are both `getPaddingStart()`, `getPaddingEnd()`,
    `getPaddingLeft()`, and `getPaddingRight()`. The start padding, for example, can
    be the right padding if our device is configured in **Right-To-Left** (**RTL**)
    mode. We have to be careful with these details if we'd like to support both LTR
    and RTL devices. In this specific example, we'll build it with RTL support by
    detecting the layout direction using the `getLayoutDirection()` method available
    on view. But first, let's focus on a very simple implementation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们存储了 `Canvas` 的左侧和顶部点，分别是起始填充和顶部填充值。我们必须小心这句话，因为起始填充可能不是左侧填充。如果我们查看文档，我们会发现既有
    `getPaddingStart()`，`getPaddingEnd()`，也有 `getPaddingLeft()` 和 `getPaddingRight()`。例如，如果我们的设备配置为**从右到左**（**RTL**）模式，则起始填充可能是右侧填充。如果我们想要支持LTR和RTL设备，我们必须注意这些细节。在这个特定示例中，我们将通过使用视图上可用的
    `getLayoutDirection()` 方法检测布局方向来构建支持RTL的版本。但首先，让我们专注于一个非常简单的实现。
- en: Basic implementation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本实现
- en: 'Our basic implementation will be quite straightforward. Let''s start by creating
    the class and its constructor:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本实现将非常直接。首先创建类及其构造函数：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We''ve initialized a `Paint` object on our constructor, but this time we''ve
    set the style to `Paint.Style.STROKE` as we''re only interested in drawing lines.
    Let''s now add a method so whoever is using the custom view can set the data to
    render:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的构造函数中初始化了一个 `Paint` 对象，但这次我们将样式设置为 `Paint.Style.STROKE`，因为我们只关心绘制线条。现在让我们添加一个方法，这样无论谁使用自定义视图都可以设置要渲染的数据：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We're making a copy of the original data array as we don't have control over
    it and it might change without prior warning. Later, we'll see how can we improve
    this behavior and adapt to changes to the data set.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在复制原始数据数组，因为我们无法控制它，它可能会在没有任何预警的情况下发生变化。稍后，我们将看到如何改进这种行为并适应数据集的变化。
- en: We're also calculating the maximum and minimum values on the array and the difference
    between them. This will allow us to get a relative scale of those numbers and
    scale them down, or up if needed, to a 0 to 1 scale, which will be quite handy
    for adjusting the rendering to our view height.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在数组上计算最大值和最小值以及它们之间的差值。这将使我们能够得到这些数字的相对比例，并将它们缩小或按需放大到0到1的比例，这将非常方便调整渲染以适应我们的视图高度。
- en: 'Now that we have the data, we can implement our `onDraw()` method:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了数据，可以实现我们的 `onDraw()` 方法：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To keep it as simple as possible, for the time being, we're drawing a black
    background with `canvas.drawARGB(255, 0, 0, 0)` and then we're computing the available
    size on our `Canvas` by subtracting the paddings from the total width and height.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽可能简单，目前我们使用 `canvas.drawARGB(255, 0, 0, 0)` 绘制黑色背景，然后通过从总宽度和高度中减去填充来计算 `Canvas`
    上的可用大小。
- en: We're also splitting the horizontal space equally for all the points and scaling
    them vertically to use the whole available space. As we've calculated the difference
    between the minimum and maximum value of our data set, we can scale those numbers
    to a `0` to `1` range by subtracting the minimum value of the number and then
    dividing by the difference or `verticalDelta` as the variable we're using here.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在所有点之间平均分配水平空间，并垂直缩放它们以使用所有可用空间。由于我们计算了数据集中最小值和最大值之间的差，我们可以通过减去数值的最小值然后除以差值（或这里我们使用的
    `verticalDelta` 变量）来将这些数字缩放到 `0` 到 `1` 的范围。
- en: With these calculations, we only have to keep track of the previous values in
    order to be able to draw a line from the old point to the new one. Here, we are
    storing the last `x` and `y` coordinates in the `lastX` and `lastY` variables
    respectively and we are updating them at the end of every single loop.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些计算，我们只需跟踪之前的值，以便能够从旧点画到新点。这里，我们将最后的 `x` 和 `y` 坐标分别存储在 `lastX` 和 `lastY`
    变量中，并在每次循环结束时更新它们。
- en: Optimizations and improvements with Paths
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路径进行优化和改进
- en: 'We could actually pre-calculate these operations we''re doing on the `onDraw()`
    method as there is no need to do it every single time we''re drawing the chart
    on the screen. We could just do it at the `setDataPoints()`, which is the only
    point in our custom view that our data set can be changed or replaced:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以在`onDraw()`方法中预先计算这些操作，因为每次在屏幕上绘制图表时都没有必要这样做。我们可以在`setDataPoints()`中执行，这是我们自定义视图中唯一可以更改或替换数据集的点：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we can simplify our `onDraw()` method as we can safely assume our data
    set will always range between `0` and `1`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以简化`onDraw()`方法，因为我们完全可以假设我们的数据集将始终在`0`和`1`之间变化：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But we can go further and convert the line drawings into a `Path`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以更进一步，将线条图转换成一条`Path`：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It will generate a `Path` with all the lines from one point to another the very
    first time the `onDraw()` method is called. The graph will be also scaled to the
    `canvas` dimensions. The only issue we will have now is that it'll not automatically
    adjust to a `canvas` size change or if our graph data is updated. Let's see how
    we can fix it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在第一次调用`onDraw()`方法时生成一条从一点到另一点的`Path`。图表还将根据`canvas`的尺寸进行缩放。我们现在唯一的问题将是它不会自动调整以适应`canvas`大小的变化或我们的图表数据更新。让我们看看如何修复它。
- en: 'First, we have to declare a `boolean` flag to determine if we''ve to regenerate
    the Path or not and two variables to hold the last width and height of our custom
    view:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须声明一个`boolean`类型的标志，以确定是否需要重新生成`Path`，以及两个变量来保存我们自定义视图的最后宽度和高度：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In our class constructor, we have to create an instance of the `Path`. Later
    on, instead of checking with null and creating a new instance, we''d call the
    reset method to generate a new `Path`, but reusing this way the object instance:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在类的构造函数中，我们必须创建一个`Path`的实例。稍后，我们不是通过检查null来创建新实例，而是调用reset方法来生成新的`Path`，但重用这个对象实例：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On `setDataPoints()` we have to set `regenerate` to true just before the call
    to `postInvalidate`. And on our `onDraw()` method, we''ve to add additional checks
    to detect when the `canvas` size changes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setDataPoints()`中，我们只需在调用`postInvalidate`之前将`regenerate`设置为true。在我们的`onDraw()`方法中，我们必须添加额外的检查以检测`canvas`大小何时发生变化：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As we have just mentioned, instead of checking with null, we will check the
    value of the `boolean` flag to regenerate the `Path`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才提到的，我们将检查`boolean`标志的值而不是检查null，以重新生成`Path`：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Background lines and details
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景线条和细节
- en: 'Let''s add it into an Android project to see the results. First let''s create
    a very simple layout file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其添加到Android项目中以查看结果。首先创建一个非常简单的布局文件：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s also create an empty activity that will only set this layout file as
    the content View and generate some random data for our chart component to render:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也创建一个空的活动，这个活动将仅将此布局文件设置为内容视图，并为我们的图表组件生成一些随机数据以进行渲染：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we run this example, we''ll get the following screen:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个例子，我们将得到以下屏幕：
- en: '![](img/49ab7a3d-7bc3-42b9-a4d9-38111f1f0f83.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49ab7a3d-7bc3-42b9-a4d9-38111f1f0f83.png)'
- en: 'OK, we''ve a simple implementation done, but let''s add some details. We''ll
    start by adding a small dot on each data point for improved clarity. Let''s create
    a new `Paint` object on our class constructor for that:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了一个简单的实现，但让我们添加一些细节。首先，在每个数据点上添加一个小点以提高清晰度。让我们在类构造函数中创建一个新的`Paint`对象：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, one approach to do so, is to create an additional Path that will draw
    small circles on each data point. Using the same approach as we did for the line
    Path, we''ll create an instance of the `circlePath` on the class constructor and
    reset it whenever it has to be regenerated. As we''re calculating the coordinates
    for the lines, we can reuse them as the location of the circles:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一种实现方法是在每个数据点上绘制小圆圈。我们将在类构造函数中创建一个`circlePath`实例，并在需要重新生成时重置它。由于我们正在计算线条的坐标，因此可以直接将它们用作圆圈的位置：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this example, we''ve hard coded the radius of the circle to `10`, just a
    bit bigger than the thickness of the lines: `8`, but we''ll talk about customizations
    later on this chapter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将圆的半径硬编码为`10`，仅比线条的厚度`8`稍大一点，但稍后我们将在本章中讨论自定义选项。
- en: 'If we now run this example, we''ll see the difference from our previous version:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行这个例子，我们将看到与之前版本的区别：
- en: '![](img/87c0fde5-51bc-41a7-b699-0cea16f43ca7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87c0fde5-51bc-41a7-b699-0cea16f43ca7.png)'
- en: 'To add a more visual reference, let''s also add some background lines. As it
    will be drawn using different settings, let''s first create a new `Paint` object:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加更直观的参考，我们还可以添加一些背景线条。由于它将使用不同的设置来绘制，首先我们创建一个新的`Paint`对象：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s modify the `onDraw()` method to also generate a new `Path` with
    the background lines:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改`onDraw()`方法，以生成带有背景线条的新`Path`：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, we are creating both horizontal and vertical lines. Horizontal lines
    will be created at the same exact points there will be a data point. We won''t
    follow the same principle for vertical lines, we''ll just draw 10 vertical lines
    uniformly separated between the top and the bottom of our `Canvas`. Executing
    our example now, we''ll get something similar to the following screen:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建水平和垂直的线条。水平线条将在有数据点的确切位置创建。对于垂直线条，我们不会遵循相同的原理，我们只需在`Canvas`的顶部和底部之间均匀绘制10条垂直线条。执行我们的示例，现在我们会得到类似于以下屏幕的内容：
- en: '![](img/e76fd2c5-61a9-43b3-b16a-d15141d34b73.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e76fd2c5-61a9-43b3-b16a-d15141d34b73.png)'
- en: That's alright, but we are still missing some reference points. Let's draw some
    horizontal and vertical labels.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以，但我们仍然缺少一些参考点。让我们绘制一些水平和垂直的标签。
- en: 'First, let''s create an array of labels and create a method to let anyone using
    this custom view set them:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个标签数组，并创建一个方法，让使用此自定义视图的任何人都可以设置它们：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If they''re not set, we can either don''t draw anything or generate them ourselves.
    In this example, we''ll generate them ourselves automatically using the array
    index:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们没有被设置，我们可以选择不绘制任何内容，或者自己生成它们。在这个例子中，我们将自动使用数组索引生成它们：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To measure the text, so we can center it, we''ll reuse a `Rect` object. Let''s
    create and instantiate it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测量文本，以便我们可以居中它，我们将复用`Rect`对象。让我们创建并实例化它：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we can add the following code to the `onDraw()` method to draw the bottom
    labels, one for each point in our data set:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将以下代码添加到`onDraw()`方法中，以绘制底部的标签，我们的数据集中的每个点都有一个：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We have also adjusted the total height of the graph to add some space for the
    labels:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还调整了图表的总高度，以添加一些标签的空间：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's also draw a side legend indicating the value and scale of the points.
    As we're drawing a pre-defined set of vertical lines, we just have to calculate
    these values. We'd have to convert these values from the 0 to 1 range back to
    their original range and specific value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也绘制一个侧边图例，指示点的值和刻度。由于我们绘制的是预定义的一组垂直线条，我们只需计算这些值。我们需要将这些值从0到1的范围转换回它们的原始范围和特定值。
- en: 'We''d have to adjust the width and the initial left point of the graph depending
    on the label size. So, in addition, let''s calculate the maximum width of the
    side labels:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要根据标签大小调整图表的宽度和初始左侧点。因此，让我们计算侧标签的最大宽度：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We also used a `DecimalFormat` instance to format the floating point values.
    We''ve created this `DecimalFormat` with the following pattern:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了一个`DecimalFormat`实例来格式化浮点数值。我们使用以下模式创建了此`DecimalFormat`：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In addition, we''re storing the labels in an array to avoid regenerating them
    every single time we''re drawing our view. With the maximum label width stored
    in the `maxLabelWidth` variable, we can adjust the paddings:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将标签存储在数组中，以避免每次绘制视图时都重新生成它们。在`maxLabelWidth`变量中存储最大标签宽度后，我们可以调整填充：
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We'll still use `leftPadding` to render all the objects and `labelLeftPadding`
    to render the labels. We have added the size of the maximum label and an additional
    *50%* of padding that will be distributed before and after the label when drawing
    it. For that reason, the labels will be rendered with an additional *25%* of `maxLabelWidth`
    padding, so there will be another *25%* of space between the end of the label
    and the start of the graph.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然使用`leftPadding`来渲染所有对象，并使用`labelLeftPadding`来渲染标签。我们已经添加了最大标签的大小以及绘制标签前后分布的额外*50%*填充。因此，标签将具有额外的*25%*`maxLabelWidth`填充，这样标签末尾和图表开始之间将有另外*25%*的空间。
- en: 'We can easily draw the vertical labels by just iterating the array and computing
    the right vertical position:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需遍历数组并计算正确的垂直位置，就可以轻松绘制垂直标签：
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To center the text on a vertical coordinate, we're using the average between
    the ascent and descent from the current font.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在垂直坐标上居中文本，我们使用了当前字体上升和下降之间的平均值。
- en: 'If we now run this example, we''ll have a more detailed view of our graph:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行这个示例，我们将更详细地查看我们的图表：
- en: '![](img/c35a24d3-be7f-4bb4-98dd-8b62d9b3c11e.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c35a24d3-be7f-4bb4-98dd-8b62d9b3c11e.png)'
- en: 'We said, early in this chapter, that we''ll build support for RTL and LTR devices.
    In this graph view, the legend will feel more natural on the right side of the
    screen if the device layout is configured as RTL. Let''s quickly implement this
    change:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开头提到，我们将支持 RTL 和 LTR 设备。如果设备布局配置为 RTL，那么在图表视图中，图例在屏幕右侧会感觉更自然。让我们快速实现这个变化：
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The only change we've to do is to is checking if the layout direction is `LAYOUT_DIRECTION_RTL`
    and change the `leftPadding` and the `labelLeftPadding` to update where to draw
    the graph and the labels.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们唯一需要做的改变是检查布局方向是否为`LAYOUT_DIRECTION_RTL`，并更改`leftPadding`和`labelLeftPadding`，以更新绘制图表和标签的位置。
- en: Customizations
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义
- en: In the last chapter we've already seen how to add parameters to our custom view.
    On the graph custom view we're building in this chapter, we could configure, for
    example, colors, thickness of the lines, size of dots, and so on, but instead
    we'll focus on other kinds of customizations, for example, inverting the vertical
    axis, and enabling or disabling the rendering of the bottom and side labels or
    graph legend. Contrasting with the previous configurations, these will require
    some additional code tweaks and specific implementations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章我们已经看到了如何向自定义视图添加参数。在本章中我们构建的图表自定义视图，我们可以配置例如颜色、线条粗细、点的大小等等，但相反，我们将关注其他类型的自定义，例如，反转垂直轴，以及启用或禁用底部和侧标签或图表图例的渲染。与之前的配置相比，这些将需要一些额外的代码调整和特定实现。
- en: 'Let''s start by allowing inverting the vertical axis. Our default implementation
    will render the smaller values on top and the bigger values at the bottom of our
    graph. This might not be the expected result, so let''s add a way to invert the
    axis:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从允许反转垂直轴开始。我们的默认实现将在顶部渲染较小的值，在图表底部渲染较大的值。这可能不是预期的结果，所以让我们添加一种方法来反转轴：
- en: '[PRE27]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, we have to change only how labels are generated and invert, if applicable,
    the values of the data points. To change the generation of labels, we can do it
    by simply updating the order of the steps. Instead of getting a number from `0`
    to `1`, we''ll invert the process and get a number from `1` to `0`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需改变标签生成的步骤，并在适用的情况下反转数据点的值。要更改标签的生成，我们可以通过简单地更新步骤的顺序来实现。我们不是从`0`到`1`获取一个数字，而是反转这个过程，从`1`到`0`获取一个数字：
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To get an inverted value of a data point, if needed, depending on the flag''s
    value, let''s add a new method to do so:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，根据标志位的值获取数据点的反转值，让我们添加一个新方法来实现：
- en: '[PRE29]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, instead of getting the data points directly from the array, we should use
    this method, as it will transparently invert the number if needed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不是直接从数组获取数据点，而应该使用这个方法，因为它会在需要时透明地反转数字。
- en: As we've mentioned before, we've also added a `setLabels()` method, so labels
    can also be externally customized.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，我们还添加了一个`setLabels()`方法，因此标签也可以在外部进行自定义。
- en: 'We can also add a `boolean` flag to allow or prevent drawing the legend and
    background lines:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加一个`boolean`类型的标志，以允许或阻止绘制图例和背景线条：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Simply check the status of this flag before drawing the background lines and
    labels.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制背景线条和标签之前，只需检查此标志的状态。
- en: See the full example in the `Example34-Charts` folder on the GitHub repository.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 仓库的`Example34-Charts`文件夹中查看完整的示例。
- en: Adding advanced features
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加高级功能
- en: We've been building a simple implementation of a charts custom view. But we'll
    need some more features or our custom view might feel a bit static or not really
    useful. We can't build all the features we might think of or probably need. Also,
    we should be careful of not building a Swiss army knife custom view as it might
    become hard to maintain and might have an impact on the custom view performance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在构建一个简单的图表自定义视图实现。但是，我们的自定义视图可能需要一些更多的功能，否则可能会显得有些静态或不太有用。我们无法构建我们可能想到或可能需要的所有功能。同时，我们也应该注意不要构建一个瑞士军刀式的自定义视图，因为它可能难以维护，并且可能对自定义视图性能产生影响。
- en: Real-time updates
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时更新
- en: In our first plain implementation of our custom view, we've created a method
    to set the data points but we couldn't modify or update the data. Let's implement
    some quick changes to be able to dynamically add points. In this implementation,
    we adjusted the values to the 0 to 1 scale directly on the `setDataPoints()` method.
    As we'll provide a method to add new data values, we might get values outside
    the original minimum and maximum values, invalidating the scale we calculated
    before.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们自定义视图的首次简单实现中，我们创建了一个设置数据点的方法，但无法修改或更新数据。让我们进行一些快速更改，以便能够动态添加点。在这个实现中，我们在`setDataPoints()`方法中直接将值调整到了0到1的刻度。由于我们将提供一个添加新数据值的方法，我们可能会得到超出原有最小值和最大值的值，这将使之前计算的刻度无效。
- en: 'Let''s first store the data in a collection instead of an array, so we can
    easily add new values:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们用集合而不是数组来存储数据，这样我们可以轻松添加新值：
- en: '[PRE31]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We''ll be storing the data in an `ArrayList` and we''ve modified the `setDataPoints()`
    method in order to be able to do so. Also, we have created the `adjustDataRange()`
    method to recalculate the range of the data and trigger a data regeneration and
    a redraw of our view:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将数据存储在`ArrayList`中，并修改了`setDataPoints()`方法以便能够这样做。同时，我们创建了`adjustDataRange()`方法来重新计算数据的范围，并触发数据重新生成和视图的重新绘制：
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The implementation of the `addValue()` method is quite simple. We add the new
    data to the `ArrayList` and if it''s inside the current range, we just trigger
    a regeneration of the graph and a redraw of our view. If it''s outside the current
    range, we call the `adjustDataRange()` method to adjust all the data to the new
    range:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`addValue()`方法的实现相当简单。我们将新数据添加到`ArrayList`中，如果它在当前范围内，我们只需触发图形的重新生成和视图的重新绘制。如果它超出了当前范围，我们调用`adjustDataRange()`方法来调整所有数据到新范围：'
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We just need to modify the `getDataPoint()` method to adjust the data to the
    `0` to `1` range:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需修改`getDataPoint()`方法，将数据调整到`0`到`1`的范围：
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If we run the example, we can see we can add new points to the graph and it
    will adjust automatically. To completely change or update the data, the method
    `setDataPoints()` must be called.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行示例，可以看到可以向图中添加新点，它会自动调整。要完全更改或更新数据，必须调用`setDataPoints()`方法。
- en: Multiple data sets
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个数据集
- en: Sometimes, we'd like to show multiple graphs to compare them or simply to show
    multiple data sets at the same time. Let's do some modifications to allow two
    graphs at the same time in our graph custom view. It can be further extended to
    support even more graphs, but let's limit it to two to simplify the logic in this
    example.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望显示多个图表以进行比较，或者简单地同时显示多个数据集。让我们进行一些修改，以允许在我们的图表自定义视图中同时显示两个图表。它可以进一步扩展以支持更多的图表，但在这个示例中，我们将限制为两个以简化逻辑。
- en: 'First, we need to create different Paint and Path objects for each graph. We''ll
    create arrays to store them as it''ll be easier, later on, to iterate and render
    them. For example, we can create several Paint objects with different colors for
    each graph:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为每个图表创建不同的Paint和Path对象。我们将创建数组来存储它们，这样稍后迭代和渲染它们会更容易。例如，我们可以为每个图表创建具有不同颜色的多个Paint对象：
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Actually, it''s a lot of work to set the same parameters again and again, so
    we can use another constructor from `Paint` that copies the attributes from an
    already existing `Paint` object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，一次又一次地设置相同的参数是一项相当多的工作，因此我们可以使用`Paint`的另一个构造函数，它从一个已存在的`Paint`对象复制属性：
- en: '[PRE36]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Also, the `Path` objects and the data storage:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`Path`对象和数据存储：
- en: '[PRE37]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We had also need a mechanism to add data to a specific data set:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个机制来将数据添加到特定的数据集：
- en: '[PRE38]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As we will have different data sets, we''ve to calculate the minimum and maximum
    values of all data sets. We will be using the same scale on each graph so it will
    be easier to compare:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将拥有不同的数据集，我们必须计算所有数据集的最小值和最大值。我们将每个图使用相同的刻度，这样比较起来更容易：
- en: '[PRE39]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, we need to update the `getDataPoint()` method to allow us to get data
    from different data sets:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要更新`getDataPoint()`方法，以允许我们从不同的数据集中获取数据：
- en: '[PRE40]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: With all these methods, we can update our path generation code to generate multiple
    `Path`s. If the data set for that graph is not defined, it'll not generate the
    `Path`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些方法，我们可以更新路径生成代码以生成多个`Path`。如果该图的 数据集未定义，它将不会生成`Path`。
- en: '[PRE41]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The rendering code, which is just iterating through all the generated `Path`s
    and drawing them with their correspondent `Paint` objects:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染代码，只是遍历所有生成的`Path`并使用相应的`Paint`对象进行绘制：
- en: '[PRE42]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If we run this example with two sets of random data, we''ll see something similar
    to the following screen:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用两组随机数据运行这个示例，我们将看到类似于以下屏幕的内容：
- en: '![](img/c9060b21-9612-4d3b-9cc7-f4205e370f02.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9060b21-9612-4d3b-9cc7-f4205e370f02.png)'
- en: Zooming and scrolling
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放大和滚动
- en: Another interesting feature we can implement into our custom view is the ability
    to zoom and scroll. Like we did in our previous chapter, we'll use the `ScaleDetector`
    class from Android to detect the pinch gesture and update the zoom in our custom
    view.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实现的另一个有趣功能是自定义视图的放大和滚动能力。就像我们在上一章中所做的那样，我们将使用Android的`ScaleDetector`类来检测捏合手势并在自定义视图中更新放大。
- en: Implementation will be quite different from the previous chapter. In this case,
    we'll do it in a simpler way. As we want to zoom everything, we'll just apply
    a `canvas` transformation instead of regenerating the scaled `Path` objects again,
    but first, let's implement the gesture detector and add the ability to scroll
    and animate properties.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 实现将与上一章有很大不同。在这种情况下，我们会以更简单的方式来做。由于我们希望放大所有内容，我们将应用`canvas`转换，而不是再次重新生成缩放的`Path`对象，但首先，让我们实现手势检测器并添加滚动和动画属性的能力。
- en: 'We can almost copy the same methods we used in our previous custom EPG View
    for animating variable logic and checking if we still have an unfinished animation:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎可以复制之前在自定义EPG视图中使用的相同方法，用于动画变量逻辑的检查，以及我们是否还有未完成的动画：
- en: '[PRE43]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can also add, almost as it is, the code for checking drag events, sending
    the touch events to the scale detector and scroll the screen depending on the
    drag amount:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以几乎原封不动地添加检查拖动事件、将触摸事件发送到缩放检测器并根据拖动量滚动屏幕的代码：
- en: '[PRE44]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We''ve defined a variable named scale that will control the amount of zooming,
    or scaling, we''re doing to our graph custom view. Let''s now write the implementation
    of the `scaleDetector`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为scale的变量，它将控制我们对图表自定义视图的放大（或缩放）量。现在，让我们编写`scaleDetector`的实现：
- en: '[PRE45]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We also implemented a scroll correction mechanism to keep where we're zooming
    as centered as possible. In this case, we had to implement it on both the horizontal
    and the vertical axis. The main idea behind the algorithm is to calculate the
    horizontal and vertical position of the focused point of the gesture and when
    changing the zoom, adjusting the scroll position to keep it at the same place.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还实现了一个滚动校正机制，以尽可能保持放大时的居中。在这种情况下，我们必须在水平和垂直轴上实现它。算法背后的主要思想是计算手势关注点的水平和垂直位置，并在改变缩放时调整滚动位置，以保持其位置不变。
- en: 'Now, our `onDraw()` method will simply start with the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`onDraw()`方法将简单地从以下内容开始：
- en: '[PRE46]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We need to check and process the animation cycles by calling `animateLogic()`,
    then let's behave properly and save our `canvas` state, apply a translation by
    the scrolling values `frScrollX` and `frScrollY`, and scale the whole `canvas`
    by the `scale` variable.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过调用`animateLogic()`来检查和处理动画周期，然后正确地表现并保存我们的`canvas`状态，应用由滚动值`frScrollX`和`frScrollY`确定的平移，以及通过`scale`变量缩放整个`canvas`。
- en: 'Everything we''ll render will be displaced by the scroll position and scaled
    by the value of the scale variable. Before finishing the method, we''ve to restore
    our `canvas` and trigger a new redraw cycle if not all the property animations
    have finished:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要渲染的所有内容都将被滚动位置偏移并由scale变量的值进行缩放。在结束方法之前，我们必须恢复我们的`canvas`，并在不是所有的属性动画都完成时触发新的重绘周期：
- en: '[PRE47]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: See the full example source code in the `Example35-Charts` folder on the GitHub
    repository.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub仓库的`Example35-Charts`文件夹中查看完整的示例源代码。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have seen how to build a charts custom view to draw graphs
    in our Android applications. We have also quickly covered how to manage paddings,
    RTL / LTR support, and we have finally added some complexity to our custom view
    by supporting multiple data sets or adding the features of zooming and scrolling.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何在Android应用程序中构建图表的自定义视图。我们还快速介绍了如何管理内边距、RTL / LTR支持，最后通过支持多个数据集或添加放大和滚动的功能，为我们的自定义视图增加了复杂性。
- en: Also, the way we've implemented this custom view; using independent data ranges
    and adapting it dynamically to the screen, means it'll automatically adjust to
    any screen resolution or for example, to an orientation change. This is usually
    a good practice and will prevent many issues when testing our custom view on several
    devices. In addition, making the sizes of everything we draw on the screen depend
    on the screen density, like we did in our previous example, will make the portability
    even easier.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现这个自定义视图的方式；使用独立的数据范围并动态适应屏幕，意味着它将自动调整以适应任何屏幕分辨率，或者例如，适应屏幕方向的改变。这通常是一个好习惯，可以防止在多种设备上测试自定义视图时出现许多问题。此外，像我们在上一个示例中所做的那样，使屏幕上绘制的一切大小依赖于屏幕密度，将使可移植性更加容易。
- en: In the next chapter, we will show how to build a custom view using the 3D rendering
    capabilities we've introduced in previous chapters.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '在下一章中，我们将展示如何利用前几章中介绍的三维渲染功能来构建自定义视图。 '
