- en: Implementing Your First Custom View
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现你的第一个自定义视图
- en: In the previous chapter, we've seen how to create the foundations of a custom
    view, but unless we add some more features and customizations it'll be pretty
    useless. In this chapter, we'll continue building on top of these foundations,
    see how we can parameterize our custom view to allow either ourselves or any other
    developer to customize them, and at the end, cover some rendering that will enable
    us to build slightly more complex custom views.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们已经看到了如何创建自定义视图的基础，但除非我们添加更多功能和自定义，否则它将相当无用。在本章中，我们将在这些基础上继续构建，了解如何参数化我们的自定义视图，以便我们或其他开发人员可以自定义它们，并在最后，涵盖一些渲染内容，这将使我们能够构建更复杂的自定义视图。
- en: In addition, as we've mentioned in the previous chapter, we can create custom
    layouts as well. In this chapter, we'll see how to create a simple custom layout.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如我们在前一章提到的，我们还可以创建自定义布局。在本章中，我们将了解如何创建一个简单的自定义布局。
- en: 'In more detail, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细地说，我们将涵盖以下主题：
- en: Measuring and parameterizing our custom view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量和参数化我们的自定义视图
- en: Instantiating custom views
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化自定义视图
- en: Creating custom layouts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义布局
- en: Basic rendering
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本渲染
- en: Measuring and parameterizing our custom view
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量和参数化我们的自定义视图
- en: In order to have a good reusable custom view, it needs to be able to adapt to
    different sizes and device resolutions, and to increase its reusability even more
    it should support parameterization.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有一个好的可重用的自定义视图，它需要能够适应不同的尺寸和设备分辨率，为了进一步提高其可重用性，它应该支持参数化。
- en: Measuring our custom view
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量我们的自定义视图
- en: 'In the quick example we built in the previous chapter, we delegated all sizes
    and measurement to the parent view itself. To be honest, we haven''t even delegated
    it; we just didn''t do anything specifically to take care of that. Being able
    to control the size and dimensions of our custom view is something we definitely
    need to pay some attention to. To start, we''re going to **override** the `onMeasure()`
    method from view as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中我们快速构建的示例中，我们将所有尺寸和测量都委托给了父视图本身。坦白说，我们甚至没有委托它；我们只是没有特别做任何事情来处理这个问题。能够控制我们自定义视图的尺寸和维度是我们绝对需要关注的事情。首先，我们将从视图**重写**`onMeasure()`方法，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Reading the Android documentation about the `onMeasure()` method, we should
    see we must **call** either `setMeasuredDimension(int, int)` or the superclass''
    `onMeasure(int, int)`. If we forget to do so, we''ll get an `IllegalStateException`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读关于`onMeasure()`方法的Android文档，我们应该看到我们必须**调用** `setMeasuredDimension(int, int)`或者父类的`onMeasure(int,
    int)`。如果我们忘记这样做，我们将得到一个`IllegalStateException`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are three different **modes** in which our view's parent can indicate
    to our view how it should calculate its size. We can get the mode by using the
    `MeasureSpec.getMode(int)` method with each size spec `widthMeasureSpec` and `heightMeasureSpec`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种不同的**模式**，我们的视图的父视图可以通过这些模式指示我们的视图如何计算其大小。我们可以通过使用`MeasureSpec.getMode(int)`方法与每个尺寸规范`widthMeasureSpec`和`heightMeasureSpec`来获取模式。
- en: 'These modes are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式如下：
- en: '`MeasureSpec.EXACTLY`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MeasureSpec.EXACTLY`'
- en: '`MeasureSpec.AT_MOST`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MeasureSpec.AT_MOST`'
- en: '`MeasureSpec.UNSPECIFIED`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MeasureSpec.UNSPECIFIED`'
- en: 'We''ll get `MeasureSpec.EXACTLY` when the size has been calculated or decided
    by the parent. Our view will have that size even if it requires or returns a different
    size. If we get `MeasureSpec.AT_MOST` we have more flexibility: we can be as big
    as we need but up to the size we also have. Finally, if we received `MeasureSpec.UNSPECIFIED`,
    we can size our view to whatever size we want or the view needs.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当父视图计算或决定了尺寸时，我们将得到`MeasureSpec.EXACTLY`。即使我们的视图需要或返回不同的尺寸，它也将具有这个大小。如果我们得到`MeasureSpec.AT_MOST`，我们则有更大的灵活性：我们可以根据需要变得更大，但最大不超过给定的大小。最后，如果我们收到`MeasureSpec.UNSPECIFIED`，我们可以将视图的大小设置为任意我们想要的或视图需要的尺寸。
- en: Using `MeasureSpec.getSize(int)`, we can also get a size value from the size
    spec.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`MeasureSpec.getSize(int)`，我们还可以从尺寸规范中获取一个尺寸值。
- en: 'Now that we have all this, how do we know which values map to the width and
    height parameters on our XML layout file? Easy to see, let''s check. For example,
    if we specify precise values as shown in the `activity_main.xml` file in the GitHub
    repository, we will get the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 既然有了这些，我们如何知道哪些值对应于我们XML布局文件中的宽度和高度参数？很容易看出，让我们检查一下。例如，如果我们像GitHub仓库中的`activity_main.xml`文件那样指定精确值，我们将得到以下代码：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Code on our custom view, using `MeasureSpec.toString(int)` to get a string
    description of the measure specification and the size looks like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的自定义视图中，使用`MeasureSpec.toString(int)`获取测量规范和尺寸的字符串描述的代码如下：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result on the Android log is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android日志上的结果如下：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Our view will be `394` by `394` pixels exactly. The `394` pixels comes from
    transforming the `150dp` to pixels on the mobile device I was using for testing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的视图将是精确的`394`乘`394`像素。这个`394`像素来自于将`150dp`转换为我用于测试的移动设备上的像素。
- en: As there are many Android devices with different resolutions and screen densities,
    we should always use **density-independent pixel** (**dp**) or (**dip**) instead
    of pixels.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有许多具有不同分辨率和屏幕密度的Android设备，我们应始终使用**密度独立像素**（**dp**）或（**dip**）而不是像素。
- en: 'For more details about dp, refer to a video by Google available on YouTube:
    DesignBytes: Density-independent Pixels.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于dp的信息，请参考谷歌在YouTube上发布的一个视频：DesignBytes：密度独立像素。
- en: 'If you would like to convert from dp to real pixels on a specific device, you
    can use the following method:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在特定设备上将dp转换为实际像素，你可以使用以下方法：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can see how the conversion is done using the density of the screen, so on
    different devices the conversion can be different. The `+ 0.5` in the previous
    code is just to round up the value when converting from a floating point number
    to an `int`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到转换是如何使用屏幕密度的，因此在不同的设备上转换可能会有所不同。前面代码中的`+ 0.5`只是为了在从浮点数转换为`int`时将值四舍五入。
- en: 'To convert from pixels to density-independent points, we have to do the inverse
    operation, as shown in the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要从像素转换到密度独立点，我们必须进行相反的操作，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s now see what we receive if we use different measure parameters, such
    as `match_parent` or `wrap_content`, as shown in the `activity_main.xml` file
    in the GitHub repository:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看，如果我们使用不同的测量参数，比如`match_parent`或`wrap_content`，如GitHub仓库中的`activity_main.xml`文件所示，我们会得到什么结果：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running the same code as before, we get the following on the Android log:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行与之前相同的代码，我们在Android日志中得到以下信息：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So we are still getting a `MeasureSpec.EXACTLY`, but this time with the size
    of the parent `RelativeLayout`; let''s try changing one of the `match_parents`
    for a `wrap_content` in `activity_main.xml`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们仍然得到了一个`MeasureSpec.EXACTLY`，但这次是父`RelativeLayout`的大小；让我们尝试在`activity_main.xml`中将一个`match_parents`改为`wrap_content`：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can spot an easy-to-follow pattern with `MeasureSpec.EXACTLY` and `MeasureSpec.AT_MOST`,
    but what about `MeasureSpec.UNSPECIFIED`?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地识别出`MeasureSpec.EXACTLY`和`MeasureSpec.AT_MOST`的模式，但`MeasureSpec.UNSPECIFIED`呢？
- en: 'We''ll get a `MeasureSpec.UNSPECIFIED` if our parent is not bounded; for example,
    if we have a vertical `LinearLayout` inside a `ScrollView`, as shown in the `scrollview_layout.xml`
    file in the GitHub repository:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的父视图没有边界，我们将得到一个`MeasureSpec.UNSPECIFIED`；例如，如果我们有一个垂直的`LinearLayout`在`ScrollView`内部，如GitHub仓库中的`scrollview_layout.xml`文件所示：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we''ll get the following on the Android log:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在Android日志中得到以下信息：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That seems alright, but what happens if we now run this code? We''ll get an
    empty screen; our red background we''ve previously implemented is gone:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来没问题，但如果我们现在运行这个代码会怎样呢？我们会得到一个空白屏幕；我们之前实现的红色背景不见了：
- en: '![](img/a1bcec83-d3f8-4aab-8d2c-a4cbe743e041.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1bcec83-d3f8-4aab-8d2c-a4cbe743e041.png)'
- en: 'That is because we''re not managing the size of our custom view. Let''s fix
    that, as shown in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们没有管理自定义视图的大小。让我们按照下面的代码所示进行修复：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, depending on the measurement specs, we'll set the size of our view by calling
    the `setMeasuredDimension(int, int)` method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据测量规格，我们将通过调用`setMeasuredDimension(int, int)`方法来设置视图的大小。
- en: For the full example, check the source code in the `Example03-Measurement` folder
    in the GitHub repository.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整示例，请检查GitHub仓库中`Example03-Measurement`文件夹中的源代码。
- en: Parameterizing our custom view
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数化我们的自定义视图
- en: 'We have our custom view that adapts to multiple sizes now; that''s good, but
    what happens if we need another custom view that paints the background blue instead
    of red? And yellow? We shouldn''t have to copy the custom view class for each
    customization. Luckily, we can set parameters on the XML layout and read them
    from our custom view:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个能适应多种尺寸的自定义视图；这是好事，但如果我们需要另一个自定义视图，将背景色改为蓝色而不是红色呢？还有黄色？我们不应该为了每个定制而复制自定义视图类。幸运的是，我们可以在XML布局中设置参数，并从我们的自定义视图中读取它们：
- en: 'First, we need to define the type of parameters we will use on our custom view.
    We''ve got to create a file called `attrs.xml` in the `res` folder:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要定义我们将在自定义视图中使用的参数类型。我们必须在 `res` 文件夹中创建一个名为 `attrs.xml` 的文件：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we add a different namespace on our layout file where we want to use
    this new parameter we''ve just created:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在我们想要使用我们刚刚创建的这个新参数的布局文件中，我们添加了一个不同的命名空间：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have this defined, let''s see how we can read it from our custom
    view class:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经定义了它，让我们看看如何从我们的自定义视图类中读取它：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By getting a `TypedArray` using the styled attribute ID Android tools created
    for us after saving the `attrs.xml` file, we'll be able to query for the value
    of those parameters set on the XML layout file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用我们在保存 `attrs.xml` 文件后，Android 工具为我们创建的样式属性ID来获取 `TypedArray`，我们将能够查询在XML布局文件上设置的这些参数的值。
- en: In this example, we created an attribute named `fillColor` that will be formatted
    as a color. This format, or basically, the type of the attribute, is very important
    to limit the kind of values we can set, and how these values can be retrieved
    afterwards from our custom view.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们创建了一个名为 `fillColor` 的属性，它将被格式化为颜色。这种格式，或者说基本上，属性的类别非常重要，因为它决定了我们可以设置哪种类型的值，以及之后如何从我们的自定义视图中检索这些值。
- en: Also, for each parameter we define, we'll get a `R.styleable.<name>_<parameter_name>
    index` in the `TypedArray`. In the preceding code, we're querying for the `fillColor`
    using the `R.styleable.OwnCustomView_fillColor index`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，对于我们定义的每个参数，我们将在 `TypedArray` 中获得一个 `R.styleable.<name>_<parameter_name>`
    索引。在上述代码中，我们正在使用 `R.styleable.OwnCustomView_fillColor` 索引来查询 `fillColor`。
- en: We shouldn't forget to recycle the `TypedArray` after using it so it can be
    reused later on, but once recycled, we can't use it again.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用完 `TypedArray` 后，我们不应该忘记回收它，以便稍后可以重新使用，但一旦回收，我们就不能再使用它了。
- en: 'Let''s see the results of this little customization:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个小小的自定义的结果：
- en: '![](img/a9126c6f-80b6-489a-8525-aebfd9ecb311.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9126c6f-80b6-489a-8525-aebfd9ecb311.png)'
- en: 'We''ve used color in this specific case, but we can use many other types of
    parameters; for example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定情况下我们使用了颜色，但我们也可以使用许多其他类型的参数；例如：
- en: Boolean
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: Int
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数
- en: Float
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数
- en: Color
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色
- en: Dimension
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尺寸
- en: Drawable
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像
- en: String
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Resource
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源
- en: 'Each one has its own getter method: `getBoolean(int index, boolean defValue)`
    or `getFloat(int index, float defValue)`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每个都有自己的获取方法：`getBoolean(int index, boolean defValue)` 或 `getFloat(int index,
    float defValue)`。
- en: In addition, to know if a parameter is set we can use the `hasValue(int)` method
    before querying or we can simply use the default values of the getters. If the
    attribute is not set at that index, the getter will return the default value.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了知道是否设置了参数，我们可以在查询之前使用 `hasValue(int)` 方法，或者我们可以简单地使用获取器的默认值。如果在那个索引处没有设置属性，获取器将返回默认值。
- en: For the full example, check the `Example04-Parameters` folder in the GitHub
    repository.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整示例，请查看 GitHub 存储库中的 `Example04-Parameters` 文件夹。
- en: Instantiating custom views
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例化自定义视图
- en: Now that we've seen how to set parameters on the XML layout and parse them on
    our custom view class, we'll see how to instantiate custom views from code as
    well and reuse then as much as possible from both instantiation mechanisms.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何在XML布局上设置参数并在我们的自定义视图类中解析它们，接下来我们将看到如何从代码中实例化自定义视图，并尽可能多地重用这两种实例化机制。
- en: Instantiating custom views from code
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从代码中实例化自定义视图
- en: On our custom view, we've created a single constructor with two parameters,
    a `Context` and an `AttributeSet`. Now, if we're creating our UI programmatically,
    or if by any other reason we need to instantiate our custom view by code, we need
    to create an additional constructor.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的自定义视图中，我们创建了一个带有两个参数的单个构造函数，一个 `Context` 和一个 `AttributeSet`。现在，如果我们是编程式地创建我们的UI，或者由于任何其他原因我们需要通过代码实例化我们的自定义视图，我们需要创建一个额外的构造函数。
- en: 'As we want to keep using our custom view in our XML layouts, we have to keep
    both constructors. To code avoid duplication, we will create some helper methods
    to initialize it and use them from both constructors:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们想要在XML布局中继续使用我们的自定义视图，所以我们必须保留这两个构造函数。为了避免代码重复，我们将创建一些辅助方法来初始化它，并从两个构造函数中使用它们：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We also created a public method, `setFillColor(int)`, so we can set the fill
    color by code as well. For example, let''s modify our `Activity` to create the
    view hierarchy programmatically instead of inflating it from an XML layout file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个公共方法 `setFillColor(int)`，这样我们也可以通过代码设置填充颜色。例如，让我们修改我们的 `Activity`，以编程方式创建视图层次结构，而不是从XML布局文件中膨胀它：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we're just creating a `LinearLayout` with vertical orientation and adding
    a custom view as a child. Then we're setting the `LinearLayout` as the content
    view of the `Activity`. Also, we've used a hexadecimal color directly. If we're
    not used to specifying colors in hexadecimal format, we could use `Color.argb()`
    or `Color.rgb()` to convert color components to an integer value.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们只是创建了一个垂直方向的`LinearLayout`，并添加了一个自定义视图作为子视图。然后我们将`LinearLayout`设置为`Activity`的内容视图。此外，我们还直接使用了十六进制颜色。如果我们不习惯用十六进制格式指定颜色，可以使用`Color.argb()`或`Color.rgb()`将颜色组件转换为整数值。
- en: The full source code can be found in the `Example05-Code` folder in the GitHub
    repository.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码可以在GitHub仓库中的`Example05-Code`文件夹中找到。
- en: Builder pattern
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建器模式
- en: In the previous example, we used the `setFillColor()` method to set the fill
    color of the custom view, but suppose we will have many other parameters, the
    code might get a bit messy with all the setters.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们使用了`setFillColor()`方法来设置自定义视图的填充颜色，但是假设我们还有许多其他参数，代码可能会因为所有的设置器而变得有些混乱。
- en: 'Let''s create a simple example: instead of having one single background color,
    we''ll have four different colors and we''ll draw a gradient on our view:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的示例：不是使用单一背景色，我们将使用四种不同的颜色，并在我们的视图上绘制渐变：
- en: 'Let''s start by defining the four different colors and their setters as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义四种不同的颜色及其设置方法，如下所示：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We also added a boolean to check if we have to update the gradient. Let's ignore
    thread synchronization here as it's not the main purpose of this example.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个布尔值以检查是否需要更新渐变。这里我们忽略线程同步，因为这不是此示例的主要目的。
- en: 'Then, we''ve added a check for this `boolean` on the `onDraw()` method and,
    in the case it''s needed, it''ll regenerate the gradient:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`onDraw()`方法中为这个`boolean`添加了一个检查，如果需要的话，它会重新生成渐变：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It's a bad practice to create new object instances on the `onDraw()` method.
    Here it is only done once, or every time we're changing the colors. If we were
    changing the color constantly, this would be a bad example as it'll be constantly
    creating new objects, polluting the memory, and triggering the **Garbage Collector**
    (**GC**). There will be more on performance and memory in [Chapter 7](6a783453-2297-4806-80b4-c8022bd9e309.xhtml),
    *Performance Considerations*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onDraw()`方法中创建新的对象实例是一个不好的实践。这里只做一次，或者每次更改颜色时都会执行。如果我们不断更改颜色，这将是一个不好的例子，因为它会不断创建新对象，污染内存，并触发**垃圾回收器**（**GC**）。关于性能和内存的内容将在[第7章](6a783453-2297-4806-80b4-c8022bd9e309.xhtml)，*性能考量*中进行更详细的介绍。
- en: 'We have to update the code of our `Activity` to set these new colors:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须更新我们的`Activity`的代码以设置这些新颜色：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we can see, we've used four setters to set the colors. If we've got more
    parameters, we could use more setters, but one of the issues of this approach
    is that we have to take care of thread synchronization and the object might be
    in an unstable state until all calls are done.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们使用了四个设置器来设置颜色。如果我们有更多参数，可以使用更多设置器，但这种方法的其中一个问题是，我们必须处理线程同步，并且对象可能在所有调用完成之前都处于不稳定状态。
- en: Another option is to add all the parameters to the constructor, but that is
    not a good solution either. It'd make our job more complex, as it'll be hard to
    remember the order of the parameters or, in the case where we had optional, to
    create many different constructors or passing null references that make our code
    harder to read and maintain.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是将所有参数添加到构造函数中，但这也不是一个好的解决方案。它会使得我们的工作更加复杂，因为记住参数的顺序可能会很困难，或者在有可选参数的情况下，创建许多不同的构造函数或传递null引用，这会使我们的代码更难以阅读和维护。
- en: Check the full source code of this example in the `Example06-BuilderPattern-NoBuilder`
    folder of the GitHub repository.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub仓库的`Example06-BuilderPattern-NoBuilder`文件夹中查看此示例的完整源代码。
- en: 'Now that we''ve introduced the issue, let''s solve it by implementing the `Builder`
    pattern on our custom view. We start by creating a `public static class` inside
    our custom view that will build it as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了这个问题，让我们通过在自定义视图上实现`Builder`模式来解决它。我们从在自定义视图中创建一个`public static class`开始，它会按照以下方式构建视图：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We also create a new private constructor that only accepts an `OwnCustomView.Builder`
    object:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个新的私有构造函数，它只接受一个`OwnCustomView.Builder`对象：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We've removed other constructors for clarity. Also at this point, we create
    the array of colors based on the colors that the `builder` object has and a `boolean`
    to know if it's the first time it'll be drawn or not.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，我们删除了其他构造函数。在这个阶段，我们还基于`builder`对象具有的颜色创建颜色数组，以及一个`boolean`来判断是否是第一次绘制。
- en: 'This will be useful to instantiate the `LinearGradient` object only once and
    avoid creating many instances:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将有助于只实例化一次`LinearGradient`对象，避免创建许多实例：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, once the object is created we can't change its colors, but we don't have
    to worry about thread synchronization and the object's state.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦创建了对象，我们就不能更改其颜色，但我们不需要担心线程同步和对象的状态。
- en: 'To make it work, let''s update the code on our `Activity` as well:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，让我们也更新我们的`Activity`上的代码：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using the `Builder` pattern, our code is cleaner and the object is constructed
    or built when we've set all the properties and this will become even handier if
    the custom view has more parameters.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Builder`模式，我们的代码更清晰，当设置所有属性时构建或创建对象，如果自定义视图有更多参数，这将变得更加方便。
- en: The full example source code can be found in the `Example07-BuilderPattern`
    folder in the GitHub repository.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例源代码可以在GitHub仓库中的`Example07-BuilderPattern`文件夹中找到。
- en: Creating a custom layout
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义布局
- en: Android provides several layouts to position our views in many different ways,
    but if these standard layouts aren't useful for our specific use case, we can
    create our own layouts.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了多种布局来以多种不同的方式定位我们的视图，但如果这些标准布局不适用于我们的特定用例，我们可以创建自己的布局。
- en: Extending ViewGroup
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展ViewGroup
- en: The process to create a custom layout is quite similar to creating a custom
    view. We've got to create a class that extends from `ViewGroup` instead of view,
    create the appropriate constructors, implement the `onMeasure()` method, and override
    the `onLayout()` method rather than the `onDraw()` method.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义布局的过程与创建自定义视图类似。我们需要创建一个从`ViewGroup`而不是视图继承的类，创建适当的构造函数，实现`onMeasure()`方法，并覆盖`onLayout()`方法，而不是`onDraw()`方法。
- en: Let's create a very simple custom layout; it will add elements to the right
    of the previous element until it doesn't fit on the screen, then it'll start a
    new row, using the higher element to calculate where this new row will start and
    avoid any overlapping between views.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个非常简单的自定义布局；它会将元素添加到前一个元素的右侧，直到不适合屏幕，然后开始新的一行，使用较高的元素来计算新行的起始位置，并避免视图之间的任何重叠。
- en: 'Adding random sized views, where each view has a red background, will look
    as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 添加随机大小的视图，每个视图具有红色背景，将如下所示：
- en: '![](img/62f2b38c-b67f-4150-b747-a33a9502534a.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f2b38c-b67f-4150-b747-a33a9502534a.png)'
- en: 'First, let''s create a class that extends from `ViewGroup`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个从`ViewGroup`继承的类：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We created the constructor and we implemented the `onLayout()` method as it''s
    an abstract method and we''ve got to implement it. Let''s add some logic to it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了构造函数，并实现了`onLayout()`方法，因为这是一个抽象方法，我们必须实现它。让我们添加一些逻辑：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This logic implements what we've described before; it tries to add a child to
    the right of the previous child and if it doesn't fit on the layout width, checking
    the current `left` position plus the measured child width, it starts a new row.
    The `rowHeight` variable measures the higher view on that row.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逻辑实现了我们之前描述的内容；它试图将子项添加到前一个子项的右侧，如果不适合布局宽度，检查当前的`left`位置加上测量的子项宽度，它就会开始新的一行。`rowHeight`变量测量那一行上的较高视图。
- en: 'Let''s also implement the `onMeasure()` method:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也实现`onMeasure()`方法：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The logic is the same as before, but it''s not laying out its children. It
    calculates the maximum width and height that will be needed, and then with the
    help of a helper method sets the dimensions of this custom layout according to
    the width and height measurement specs:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑与之前相同，但它没有布置其子项。它计算将需要的最大宽度和高度，然后在一个帮助方法的帮助下，根据宽度和高度测量规范设置此自定义布局的尺寸：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we''ve got our custom layout, let''s add it to our `activity_main`
    layout:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了自定义布局，让我们将其添加到我们的`activity_main`布局中：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For the last step, let''s add some random sized views to it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步中，让我们添加一些随机大小的视图：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Check the `Example08-CustomLayout` folder on GitHub for the full source code
    of this example.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub的`Example08-CustomLayout`文件夹中查看此示例的完整源代码。
- en: On this page, we can also find a quite complex example of a full-featured custom
    layout.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面上，我们还可以找到一个功能齐全的自定义布局的相当复杂的示例。
- en: Basic rendering
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本渲染
- en: So far we've only been drawing a solid background or a linear gradient. That's
    neither exciting nor really useful. Let's see how we can draw more interesting
    shapes and primitives. We'll do so by creating an example of a circular activity
    indicator that we'll be adding more and more features to in the following chapters.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只绘制了纯色背景或线性渐变。这既不令人兴奋也没有实际用途。让我们看看如何绘制更有趣的形状和图元。我们将通过创建一个圆形活动指示器的示例来实现，在接下来的章节中，我们将在其中添加越来越多的功能。
- en: Creating the basic circular activity indicator
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本的圆形活动指示器
- en: 'The `Canvas` class provides us with many drawing functions; for example:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`Canvas`类为我们提供了许多绘图函数；例如：'
- en: '`drawArc()`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawArc()`'
- en: '`drawBitmap()`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawBitmap()`'
- en: '`drawOval()`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawOval()`'
- en: '`drawPath()`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawPath()`'
- en: 'To draw a circular activity indicator, we can use the `drawArc()` method. Let''s
    create the basic class and draw an arc:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制圆形活动指示器，我们可以使用`drawArc()`方法。让我们创建基本的类并绘制一个弧线：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result is as shown in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![](img/2c9a946b-8846-4198-97c5-f5f935e32353.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c9a946b-8846-4198-97c5-f5f935e32353.png)'
- en: 'Let''s fix the ratio, so the width of the arc will be the same as the height:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整比例，使弧线的宽度与高度相同：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We''ll use the smaller dimension, either width or height, and draw the arc
    centered with a square ratio: with the same width and same height.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用较小的尺寸，无论是宽度还是高度，并以正方形比例（宽度与高度相同）居中绘制弧线。
- en: This doesn't look like an activity indicator; let's change it and draw only
    a thin band of the arc. We can achieve this by using the clipping capabilities
    that `canvas` gives us. We can use `canvas.clipRect` or `canvas.clipPath`, for
    example. When using clipping methods, we can also specify a clipping operation.
    By default, if we don't specify it, it will intersect with the current clipping.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不像一个活动指示器；让我们改变它，只绘制弧线的一细带。我们可以通过使用`canvas`提供的剪裁功能来实现这一点。我们可以使用`canvas.clipRect`或`canvas.clipPath`，例如。使用剪裁方法时，我们还可以指定一个剪裁操作。如果我们不指定，默认情况下，它将与当前的剪裁相交。
- en: 'To draw only a thin band, we''ll create a smaller arc in a path, around *75%*
    of the size of the arc we''d like to draw. Then, we''ll subtract it from the clipping
    rectangle of the whole view:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了只绘制一个细带，我们将在路径中创建一个较小的弧线，大小约为我们想要绘制的弧线的*75%*。然后，我们将它从整个视图的剪裁矩形中减去：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the following screenshot, we can see the difference:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到差异：
- en: '![](img/6ac73a16-70b2-4c7a-87ea-d1feacd304a0.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ac73a16-70b2-4c7a-87ea-d1feacd304a0.png)'
- en: As finishing touches, let's add a background color to the arc and change the
    starting position to the top of the view.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的润色，让我们给弧线添加一个背景颜色，并将起始位置改为视图的顶部。
- en: 'To draw the background, we''ll add the following code to create a background
    `Paint` to our constructor:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制背景，我们将在构造函数中添加以下代码来创建一个背景`Paint`：
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then modify the `onDraw()` method to actually draw it, just before drawing
    the other arc:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后修改`onDraw()`方法，在实际绘制另一个弧线之前绘制它：
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As a small difference, we're drawing the whole `360` degrees so it will cover
    the whole circle.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个小差异，我们绘制了整个`360`度，这样它将覆盖整个圆。
- en: 'To change the starting position of the arc, we''ll rotate our drawing operations.
    `Canvas` supports rotation, translation, and matrix transformations as well. In
    this case, we only need to rotate `90` degrees anti-clockwise to get our starting
    point at the top of the arc:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变弧线的起始位置，我们将旋转绘图操作。`Canvas`支持旋转、平移和矩阵变换。在这种情况下，我们只需逆时针旋转`90`度，就能使我们的起始点位于弧线的顶部：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We also used `canvas.save()` and `canvas.restore()` to preserve the state of
    our `canvas`; otherwise, it will be rotating `-90` degrees each time it is drawn.
    When calling the `canvas.rotate()` method, we also specified the center point
    of the rotation, which matches with the center point of the screen and the center
    point of the arc.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`canvas.save()`和`canvas.restore()`来保存我们的`canvas`的状态；否则，每次绘制时它都会旋转`-90`度。当调用`canvas.rotate()`方法时，我们还指定了旋转的中心点，该中心点与屏幕的中心点以及弧线的中心点相匹配。
- en: Whenever we're using a `canvas` function as `rotate`, `scale`, or `translate`,
    for example, we're actually applying a transformation to all the successive `canvas`
    drawing operations.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们使用如`rotate`、`scale`或`translate`等`canvas`函数时，实际上我们是在对所有后续的`canvas`绘图操作应用变换。
- en: 'The final result is shown in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果如下截图所示：
- en: '![](img/725dac60-6a60-4a79-8249-148e5a8cf8a4.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/725dac60-6a60-4a79-8249-148e5a8cf8a4.png)'
- en: 'Something we need to be aware of is that not all `canvas` operations are supported
    by hardware on all Android versions. Please check if the operations you have to
    do are supported or provide a runtime workaround for them. Find more information
    about what operations are hardware accelerated at:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要意识到的一件事是，并非所有的`canvas`操作在所有Android版本上都得到硬件支持。请检查您需要执行的操作是否受支持，或者为它们提供运行时解决方案。在以下链接中了解更多关于哪些操作是硬件加速的信息：
- en: '[https://developer.android.com/guide/topics/graphics/hardware-accel.html](https://developer.android.com/guide/topics/graphics/hardware-accel.html).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/guide/topics/graphics/hardware-accel.html](https://developer.android.com/guide/topics/graphics/hardware-accel.html)。'
- en: 'Here is the final implementation of the class:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是类的最终实现代码：
- en: '[PRE38]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The whole example source code can be found in the `Example09-BasicRendering`
    folder in the GitHub repository.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 整个示例源代码可以在GitHub仓库中的`Example09-BasicRendering`文件夹中找到。
- en: 'Furthermore, I gave a talk about this at the Android Developer''s Backstage
    in Krakow in January 2015; here is a link to the presentation:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我在2015年1月在克拉科夫的Android开发者后台关于这个话题进行了演讲；以下是演讲的链接：
- en: '[https://www.slideshare.net/RaimonRls/android-custom-views-72600098](https://www.slideshare.net/RaimonRls/android-custom-views-72600098).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.slideshare.net/RaimonRls/android-custom-views-72600098](https://www.slideshare.net/RaimonRls/android-custom-views-72600098)。'
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to measure and how to add parameters to our
    custom view. We also saw how to instantiate a custom view from code and use a
    `Builder` pattern to simplify all the parameters and keep our code cleaner. In
    addition, we went through a quick example of a custom layout and we started building
    a circular activity indicator. In the next chapter, we will see how to handle
    events and add some interactions to the circular activity indicator we've just
    started to build.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何测量以及如何为自定义视图添加参数。我们还了解了如何从代码中实例化自定义视图，并使用`Builder`模式来简化所有参数，使代码保持整洁。此外，我们还快速通过一个自定义布局的示例，并开始构建圆形活动指示器。在下一章中，我们将学习如何处理事件并为刚刚开始构建的圆形活动指示器添加一些交互。
