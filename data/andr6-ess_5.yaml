- en: Chapter 5. Audio, Video, and Camera Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 音频、视频和摄像头特性
- en: Android Marshmallow gives us good audio, video, and camera capabilities, and
    you can see that improvements have been made to enable and better support new
    or mint condition protocols or even change the behavior of some APIs, such as
    the camera service.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Android Marshmallow为我们提供了良好的音频、视频和摄像头功能，并且可以看到已经进行了改进，以启用和更好地支持新的或全新的协议，甚至改变一些API的行为，如摄像头服务。
- en: 'In this chapter, we will try and explain these changes with a proper discussion
    on their usage and benefits. Our journey in the upcoming pages will cover the
    following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试通过适当的讨论来解释这些变化及其使用方法和好处。在接下来的几页中，我们的旅程将涵盖以下主题：
- en: Audio features
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频特性
- en: Video features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频特性
- en: Camera features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄像头特性
- en: Audio features
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频特性
- en: Android Marshmallow 6.0 adds some enrichments to the audio features that we
    will cover in the upcoming sections.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Android Marshmallow 6.0对音频特性增加了一些增强功能，我们将在接下来的章节中进行介绍。
- en: Support for the MIDI protocol
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对MIDI协议的支持
- en: The `android.media.midi` package was added in Android 6.0 (API 23).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.media.midi`包是在Android 6.0（API 23）中新增的。'
- en: With the new midi APIs, you can now send and receive **MIDI** (short for **Musical
    Instrument Digital Interface**) events in a much simpler way than earlier.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的midi API，现在可以比以前更简单的方式发送和接收**MIDI**（即**Musical Instrument Digital Interface**，乐器数字接口）事件。
- en: 'The package was built to provide us with capabilities to do the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包旨在为我们提供以下能力：
- en: Connect and use a MIDI keyboard
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接并使用MIDI键盘
- en: Connect to other MIDI controllers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到其他MIDI控制器
- en: Use external MIDI synthesizers, external peripherals, lights, show control,
    and so on
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部MIDI合成器、外部外围设备、灯光、展示控制等
- en: Allow dynamic music generation from games or music-creation apps
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许游戏或音乐创作应用动态生成音乐
- en: Allow the creation and passing of MIDI messages between apps
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许应用之间创建和传递MIDI消息
- en: Allow Android devices to act as multi-touch controllers when connected to a
    laptop
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许Android设备在连接到笔记本电脑时作为多点触控控制器
- en: 'When dealing with MIDI, you must declare it in the manifest, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理MIDI时，您必须在清单中声明，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Pay attention to the `required` part; in a manner similar to other features,
    setting it to `true` will make your app visible in the play store only if the
    device supports the MIDI API.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`required`部分；与其他特性类似，将其设置为`true`将使得只有当设备支持MIDI API时，您的应用才会在播放商店中可见。
- en: 'You can also check in runtime for MIDI support and then change the required
    part to `false`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在运行时检查MIDI支持，然后将required部分更改为`false`：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: MidiManager
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MidiManager
- en: 'A way to properly use the MIDI API is via the `MidiManager` class; obtain it
    via `context` and use it when required:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正确使用MIDI API的一种方式是通过`MidiManager`类；通过`context`获取它，并在需要时使用：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For more information, you can refer to:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多信息，您可以参考以下内容：
- en: '[https://developer.android.com/reference/android/media/midi/package-summary.html](https://developer.android.com/reference/android/media/midi/package-summary.html)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/media/midi/package-summary.html](https://developer.android.com/reference/android/media/midi/package-summary.html)'
- en: Digital audio capture and playback
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字音频捕获和播放
- en: 'Two new classes have been added for digital audio capture and playback:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为数字音频捕获和播放新增了两个类：
- en: '`android.media.AudioRecord.Builder` - digital audio capture'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.media.AudioRecord.Builder` - 数字音频捕获'
- en: '`android.media.AudioTrack.Builder` - digital audio playback'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.media.AudioTrack.Builder` - 数字音频播放'
- en: These will help configure the audio source and sink properties.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将帮助配置音频源和接收器属性。
- en: Audio and input devices
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频和输入设备
- en: The new `hasMicrophone()` method has been added to the `InputDevice` class.
    This will report whether the device has a built-in microphone that developers
    can use. Let's say you want to enable voice search from a controller connected
    to Android TV and you get an `onSearchRequested()` callback for the user's search.
    You can then verify that there's a microphone with the `inputDevice` object you
    get in the callback.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 新增了`hasMicrophone()`方法到`InputDevice`类中。这将报告设备是否有开发者可用的内置麦克风。例如，您想要从连接到Android
    TV的控制器启用语音搜索，并在用户搜索时收到`onSearchRequested()`回调。然后，您可以验证在回调中获得的`inputDevice`对象是否有麦克风。
- en: Information on audio devices
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频设备信息
- en: The new `AudioManager.getDevices(int flags)` method allows easy retrieval of
    all the audio devices currently connected to the system. If you want to be notified
    when there are audio device connections/disconnections, you can register your
    app to an `AudioDeviceCallback` callback via the `AudioManager.registerAudioDeviceCallback(AudioDeviceCallback
    callback, Handler handler)` method.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`AudioManager.getDevices(int flags)`方法允许轻松检索当前连接到系统的所有音频设备。如果你想要在音频设备连接/断开时得到通知，可以通过`AudioManager.registerAudioDeviceCallback(AudioDeviceCallback
    callback, Handler handler)`方法注册你的应用到`AudioDeviceCallback`回调中。
- en: Changes in AudioManager
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`AudioManager`的变化'
- en: 'Some changes have been introduced in the `AudioManager` class, and they are
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioManager`类中引入了一些变化，如下所示：'
- en: Using `AudioManager` to set the volume directly is not supported.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用`AudioManager`来设置音量是不被支持的。
- en: Using `AudioManager` to mute specific streams is not supported.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`AudioManager`静音特定流是不被支持的。
- en: The `AudioManager.setStreamSolo(int streamType, boolean state)` method is deprecated.
    If you need exclusive audio playback, use `AudioManager.requestAudioFocus(AudioManager.OnAudioFocusChangeListener
    l, int streamType, int durationHint)`.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioManager.setStreamSolo(int streamType, boolean state)`方法已弃用。如果你需要独占音频播放，请使用`AudioManager.requestAudioFocus(AudioManager.OnAudioFocusChangeListener
    l, int streamType, int durationHint)`。'
- en: The `AudioManager.setStreamMute(int streamType, boolean state)` method is deprecated.
    If you need to use `AudioManager.adjustStreamVolume(int streamType, int direction,
    int flags)` for direction, you can use one of the newly added constants.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioManager.setStreamMute(int streamType, boolean state)`方法已弃用。如果你需要使用`AudioManager.adjustStreamVolume(int
    streamType, int direction, int flags)`来调整音量方向，你可以使用其中新增的常量之一。'
- en: '`ADJUST_MUTE` will mute the volume. Note that it has no effect if the stream
    is already muted.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADJUST_MUTE`将会静音。注意，如果该流已经静音，此操作无效。'
- en: '`ADJUST_UNMUTE` will unmute the volume. Note that it has no effect if the stream
    is not muted.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADJUST_UNMUTE`将会取消静音。注意，如果该流未被静音，此操作无效。'
- en: Video features
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视频特性
- en: In Android Marshmallow, the video processing API has been upgraded with new
    capabilities. Some new methods and even a new class has been added just for developers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android棉花糖版本中，视频处理API已经升级，具备新的功能。一些新的方法甚至一个全新的类`MediaSync`只为开发者添加。
- en: android.media.MediaSync
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`android.media.MediaSync`'
- en: 'The all new `MediaSync` class has been designed to help us with synchronous
    audio and video streams'' rendering. You can also use it to play audio- or video-only
    streams. You can use the dynamic playback rate and feed the buffers in a nonblocking
    action with a callback return. For more information on the proper usage, read:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 全新的`MediaSync`类被设计用来帮助我们同步渲染音频和视频流。你也可以使用它来仅播放音频或视频流。你可以使用动态播放速率，并通过回调返回非阻塞动作来输入缓冲区。关于正确使用方法，请阅读：
- en: '[https://developer.android.com/reference/android/media/MediaSync.html](https://developer.android.com/reference/android/media/MediaSync.html)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[关于`MediaSync`的官方文档](https://developer.android.com/reference/android/media/MediaSync.html)'
- en: MediaCodecInfo.CodecCapabilities.getMaxSupportedInstances
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`MediaCodecInfo.CodecCapabilities.getMaxSupportedInstances` 方法'
- en: Now, we have a `MediaCodecInfo.CodecCapabilities.getMaxSupportedInstances` helper
    method to get the maximum number of supported concurrent codec instances. However,
    we must consider this only an upper bound. The actual number of concurrent instances
    can be lower depending on the device and the amount of available resources at
    the time of usage.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了`MediaCodecInfo.CodecCapabilities.getMaxSupportedInstances`辅助方法，以获取支持的同时编解码器实例的最大数量。然而，我们只能将此视为上限。实际的同时实例数量可能会根据设备和在用时可用资源的数量而减少。
- en: Why do we need to know this?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们需要知道这些？
- en: Let's think of a case where we have a media-playing application and we want
    to add effects between the movies played. We will need to use more than one video
    codec, decode two videos, and encode one video stream back to be displayed on
    screen. Checking with this API will allow you to add more features that rely upon
    multiple instances of codecs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个媒体播放应用，我们想在播放的电影之间添加效果。这将需要使用多个视频编解码器，解码两个视频，并将一个视频流重新编码以显示在屏幕上。通过检查这个API，你可以添加更多依赖于多个编解码器实例的功能。
- en: MediaPlayer.setPlaybackParams
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`MediaPlayer.setPlaybackParams` 方法'
- en: We can now set the media playback rate for fast or slow motion playback. This
    will give us the chance to create a funny video app where we slow down parts or
    play them fast, creating a new video while playing. Audio playing is synced accordingly,
    so you might hear a person talking slowly or even fast, for that matter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以设置媒体播放速率，以实现快速或慢速动作播放。这将给我们一个机会，创建一个有趣的应用，其中我们可以放慢部分动作或快速播放，从而在播放时创建一个新视频。音频播放相应地同步，因此您可能会听到一个人慢慢地或快速地说话。
- en: Camera features
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相机功能
- en: In Android Lollipop, there was the new `Camera2` API, and now, in Android Marshmallow,
    there are a few more updates to the camera, flashlight, and image reprocessing
    features.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Lollipop中，有新的`Camera2` API，现在在Android Marshmallow中，对相机、手电筒和图像重新处理功能有一些更多的更新。
- en: The flashlight API
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手电筒API
- en: Almost every device today has a camera, and almost every camera device has a
    flash unit. The `setTorchMode()` method has been added to control the flash torch
    mode.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在几乎每个设备都有相机，几乎每个相机设备都有闪光单元。添加了`setTorchMode()`方法来控制闪光手电筒模式。
- en: 'The `setTorchMode()` method is used in the following manner:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTorchMode()`方法的使用方式如下：'
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `cameraId` element is the unique ID for the flash unit camera with which
    you want to change the torch mode. You can use `getCameraIdList()` to get the
    list of cameras and then use `getCameraCharacteristics(String cameraId)` to check
    whether flash is supported in that camera. The `setTorchMode()` method allows
    you to turn it on or off without opening the camera device and without requesting
    permission from the camera. The torch mode will be switched off as soon as the
    camera device becomes unavailable or when other camera resources that have the
    torch on become unavailable. Other apps can use the flash unit as well, so you
    need to check the mode when required or register a callback via the `registerTorchCallback()`
    method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`cameraId`元素是您想要更改手电筒模式的闪光单元相机的唯一ID。您可以使用`getCameraIdList()`获取相机列表，然后使用`getCameraCharacteristics(String
    cameraId)`检查该相机是否支持闪光。`setTorchMode()`方法允许您在不打开相机设备且不需要从相机请求权限的情况下打开或关闭它。一旦相机设备不可用，或者具有开启手电筒的其他相机资源不可用时，手电筒模式将会关闭。其他应用也可以使用闪光单元，因此您需要在需要时检查模式，或者通过`registerTorchCallback()`方法注册一个回调。'
- en: 'Refer to the sample app, **Torchi**, to see the entire code at:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 参考示例应用**Torchi**，查看完整代码：
- en: '[https://github.com/MaTriXy/Torchi](https://github.com/MaTriXy/Torchi)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MaTriXy/Torchi](https://github.com/MaTriXy/Torchi)'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Turning on the torch mode may fail if the camera or other camera resources are
    in use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相机或其他相机资源正在使用中，开启手电筒模式可能会失败。
- en: The reprocessing API
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新处理API
- en: As mentioned earlier, the `Camera2` API was given a few boosts to allow added
    support for **YUV** and private opaque format image reprocessing. Before using
    this API, we need to check whether these capabilities are available. This is why
    we use the `getCameraCharacteristics(String cameraId)` method and check for the
    `REPROCESS_MAX_CAPTURE_STALL` key.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`Camera2` API得到了一些增强，以支持**YUV**和私有不透明格式图像的重新处理。在使用这个API之前，我们需要检查这些功能是否可用。这就是为什么我们要使用`getCameraCharacteristics(String
    cameraId)`方法，并检查`REPROCESS_MAX_CAPTURE_STALL`键的原因。
- en: android.media.ImageWriter
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: android.media.ImageWriter
- en: This is a new class that's been added to Android 6.0.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在Android 6.0中新增的类。
- en: It allows us to create an image and feed it into a surface and then back to
    `CameraDevice`. Usually, `ImageWriter` is used along with `ImageReader`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们创建一个图像并将其输入到表面，然后返回到`CameraDevice`。通常，`ImageWriter`与`ImageReader`一起使用。
- en: android.media.ImageReader
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: android.media.ImageReader
- en: This is a new class that's been added to Android 6.0.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在Android 6.0中新增的类。
- en: It allows us direct access to the image data rendered in a surface. `ImageReader`,
    along with `ImageWriter`, allows our app to create an image feed from the camera
    to the surface and back to the camera for reprocessing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们直接访问在表面上渲染的图像数据。`ImageReader`加上`ImageWriter`允许我们的应用从相机创建图像流到表面，然后返回相机进行重新处理。
- en: Changes in the camera service
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相机服务的改变
- en: Android Marshmallow has made a change to the *first come* *, first serve* access
    model; now, the service access model has favorites processes—ones that are marked
    as high-priority. This change results in some more logic-related work for us developers.
    We need to make sure that we take into account a situation where we get bumped
    up (higher priority) or debunked (lower priority due to a change in our application).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓棉花糖对*先到先得*的访问模型进行了更改；现在，服务访问模型有了偏好进程——那些被标记为高优先级的进程。这个变化导致我们开发人员需要处理更多逻辑相关的工作。我们需要确保考虑到这种情况：我们的优先级被提升（更高优先级）或被降级（由于应用程序的变化而降低优先级）。
- en: 'Let''s try and explain this in a few simple bullets:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试用几个简单的要点来解释这个问题：
- en: When you want to access camera resources or open and configure a camera device,
    your access is verified according to the *priority* of your application process.
    An application process with foreground activities (visible user) is normally given
    a higher priority, which in turn allows a better chance to get the desired access
    when needed.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想访问摄像头资源或打开及配置摄像头设备时，你的访问权限将根据应用程序进程的*优先级*进行验证。通常，具有前台活动（对用户可见）的应用程序进程会被赋予更高的优先级，这也使得在需要时获得所需访问权限的可能性更大。
- en: On the other side of the *priority* scale, you can find low-priority apps that
    can and will be tossed aside (revoked from access) when a high-priority application
    attempts to use the camera. For example, when using the `Camera` API, you will
    get the `onError()` call when evicted, and when using the `Camera2` API, you will
    get the `onDisconnected()` call when evicted.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*优先级*的另一个极端，你会发现低优先级的应用程序可能会被搁置（从访问中撤销），当一个高优先级的应用程序尝试使用摄像头时。例如，当使用`Camera`
    API时，你会在被踢出时收到`onError()`调用；当使用`Camera2` API时，你会在被踢出时收到`onDisconnected()`调用。
- en: Some devices out in the wild can allow separate applications to open and use
    separate camera devices simultaneously. The camera service now detects and disallows
    performance issues that are caused due to multiprocess usage. When the service
    detects such an issue, it will evict low-priority apps even if only one app is
    using that camera device.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 野外一些设备能够允许不同的应用程序同时打开和使用不同的摄像头设备。摄像头服务现在可以检测并禁止由于多进程使用造成的性能问题。当服务检测到这类问题时，即使只有一个应用程序在使用该摄像头设备，它也会踢出低优先级的应用程序。
- en: In a multiuser environment, when switching users, all active apps using the
    camera in the previous user profile will be evicted in order to allow proper usage
    and access to apps for the current user. This means that switching users will
    stop the camera-using apps from using the camera for sure.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多用户环境中，切换用户时，为允许当前用户的应用程序正确使用和访问，将踢出之前用户配置文件中所有正在使用摄像头的应用程序。这意味着，切换用户将确保使用摄像头的应用程序停止使用摄像头。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered quite a few changes in and additions to the Android
    APIs. Android Marshmallow is more about helping us, the developers, achieve better
    media support and showcase our ideas when using the audio, video, or camera APIs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了安卓API中的一些变化和新增内容。安卓棉花糖主要是帮助我们这些开发人员实现更好的媒体支持，在使用音频、视频或摄像头API时展示我们的想法。
- en: In the next chapter, we will go over some of the Android features to understand
    the features, additions, and changes made.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些安卓特性，以了解在使用音频、视频或摄像头API时，安卓所做的特性增加和更改。
