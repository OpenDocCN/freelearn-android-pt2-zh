- en: Chapter 8. Signing and Distributing APK
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章. 签名和分发APK
- en: 'All the hard work done so far is not going to pay off unless we distribute
    our application for others to use. An Android application has to be signed before
    it goes on the radar for distribution. Any Android application, be it used in
    the emulator or distributed to friends, relative for testing, or published to
    Google Play store, needs to be signed electronically. In this chapter, we will
    learn about how to sign it and publish it for use by others. This chapter will
    cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所有至今为止的辛勤工作，除非我们分发应用供他人使用，否则都是徒劳的。安卓应用在上架分发前必须进行签名。任何安卓应用，无论是用于模拟器，还是分发给朋友、亲戚测试，或者发布到Google
    Play商店，都需要进行电子签名。在本章中，我们将学习如何签名并发布供他人使用。本章将涵盖以下内容：
- en: APK (Android package)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APK (Android包)
- en: Preparing for release
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备发布
- en: Compilation for release
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布编译
- en: Generating a private key
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成私钥
- en: Using the Eclipse ADT for release
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse ADT进行发布
- en: Publish to Google Play
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布到Google Play
- en: APK – Android package
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: APK – 安卓包
- en: The **Android package** (**APK**), in simple terms, is similar to the runnable
    JAR or executable file (on Windows OS) which consists of everything that is needed
    to run the application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**安卓包**（**APK**）简单来说，类似于可运行的JAR或可执行文件（在Windows操作系统上），它包含了运行应用所需的一切。'
- en: The Android ecosystem uses a virtual machine, that is, **Dalvik virtual machine**
    (**DVM**) to run the Java applications. Dalvik uses its own bytecode, which is
    quite different from the Java bytecode.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓生态系统使用虚拟机，即**Dalvik虚拟机**（**DVM**）来运行Java应用。Dalvik使用自己的字节码，这与Java字节码有很大不同。
- en: A tool `dx` under Android SDK converts our Java classes to `.dex` (**Dalvik
    executable**).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK下的工具`dx`将我们的Java类转换为`.dex`（**Dalvik可执行文件**）。
- en: The `.dex` files and resources of application (XML and images) are packaged
    by the tool **aapt** (**Android asset packing tool**) into the `.apk` file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 工具**aapt**（**安卓资源打包工具**）将`.dex`文件和应用资源（XML和图片）打包到`.apk`文件中。
- en: Preparing for release
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备发布
- en: After the hard work of coding and testing the application needs to be packaged
    for release. Packaging involves the following steps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 经过编码和测试的辛勤工作后，应用需要被打包以便发布。打包包括以下步骤。
- en: Compilation for release
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布编译
- en: 'This is the very first step towards release and distribution. It comprises
    of setting a package name in the application''s manifest file, configuring application
    attributes, and compilation before release. They involve the following steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是发布和分发的第一步。它包括在应用的清单文件中设置包名，配置应用属性，以及发布前的编译。它们包括以下步骤：
- en: '**Choosing appropriate package name**: Once the application is released it
    cannot be undone hence, the need to dwell upon and choose a suitable package name.
    The package name can be set in the application''s manifest file.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择合适的包名**：一旦应用发布，就无法撤回，因此需要仔细考虑并选择一个合适的包名。包名可以在应用的清单文件中设置。'
- en: '**Disabling debugging**: We need to make sure we disable debugging before we
    release it. To disable debugging, comment or remove the `Log()` method call in
    the code. Also, debugging can be disabled by removing the `android:debuggable`
    attribute from the `<application>` tag.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用调试**：我们需要确保在发布之前禁用调试。要禁用调试，可以在代码中注释或移除`Log()`方法调用。此外，通过从`<application>`标签中移除`android:debuggable`属性也可以禁用调试。'
- en: '**Pointing out the application icon**: Every application needs to have an icon
    of itself. Please make sure that the icon follows the icon guidelines a: [http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html](http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html).
    Icons can be specified by using the icon attributes of the `<application>` tag.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指出应用图标**：每个应用都需要有自己的图标。请确保图标遵循图标指南：[http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html](http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html)。图标可以通过使用`<application>`标签的icon属性来指定。'
- en: '**Versioning**: This is the most important aspect of release and also maintenance.
    The version identifies the application''s release build and determines how it
    should be updated. To put it in the simple terms, the version number must be incremented
    with each published release. With no version in place, it is rather impossible
    for future updates. The versioning information is provided by the following two
    attributes:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本控制**：这是发布和维护最重要的方面。版本标识应用程序的发布版本，并确定其更新方式。简单来说，每次发布时版本号必须递增。如果没有版本号，未来更新几乎是不可能的。版本信息由以下两个属性提供：'
- en: '| `android:versionCode` | It is the integer represents version of application.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `android:versionCode` | 这是一个表示应用程序版本的整数。 |'
- en: '| `android:versionName` | It is the string that is displayed to users to identify
    what is installed in the device. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `android:versionName` | 这是显示给用户以识别设备中安装内容的字符串。 |'
- en: Both these attributes can be specified under the `<manifest>` element.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个属性都可以在 `<manifest>` 元素下指定。
- en: '**Review the manifest file for permissions**: It should only specify relevant
    permissions in the manifest file using the `<uses-permission>` tag.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查权限清单文件**：它应该只使用 `<uses-permission>` 标签在清单文件中指定相关权限。'
- en: Generating a private key
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成私钥
- en: 'An android application must be signed with our own private key. It identifies
    a person, corporation, or entity associated with the application. This can be
    generated using the program `keytool` from the Java SDK. The following command
    is used for generating the key:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓应用程序必须使用我们自己的私钥进行签名。它标识与该应用程序相关联的人、公司或实体。这可以通过使用 Java SDK 中的程序 `keytool` 来生成。以下命令用于生成密钥：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can use a different key for each published application, and specify a different
    name to identify it. Also, Google expects validity of at least 25 years or more.
    A very important thing to consider is to keep a back up and securely store the
    key, because once it is compromised it impossible to update an already published
    application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每个发布的应用程序使用不同的密钥，并为它指定一个不同的名称以进行标识。另外，谷歌期望有效期至少为 25 年或更长时间。一个非常重要的考虑是要备份并安全地存储密钥，因为一旦密钥泄露，就不可能更新已经发布的应用程序。
- en: Signing
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 签名
- en: 'After obtaining the private key we need to sign the application. This is done
    using a program `jarsigner` from the Java SDK. The following command is used:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 获取私钥后，我们需要对应用程序进行签名。这是使用 Java SDK 中的程序 `jarsigner` 完成的。使用以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Alignment
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对齐
- en: 'Once the APK is signed it needs to be optimized, to do that we use the `zipalign`
    tool available with the Android SDK under the `tools/` directory. The usage is
    as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 APK 文件被签名，就需要对其进行优化。为此，我们使用 Android SDK 中的 `tools/` 目录下的 `zipalign` 工具。使用方法如下：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the Eclipse ADT for release
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Eclipse ADT 发布
- en: Using the Eclipse **Android Development Tool** (**ADT**), all the aforementioned
    steps in the *Preparing for release* section can be done with ease. Let's prepare
    our DistanceConverter from the earlier chapter for release using the Eclipse ADT.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Eclipse **Android 开发工具** (**ADT**)，*准备发布* 部分中提到的所有步骤都可以轻松完成。让我们使用 Eclipse
    ADT 为前一章中的 DistanceConverter 准备发布。
- en: 'Follow the given steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Right-click on the project **DistanceConverter** and then select **Export**
    from the context menu. Select **Export Android Application**, as shown in the
    following screenshot:![Using the Eclipse ADT for release](img/1103OS_08_01.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击项目 **DistanceConverter**，然后从上下文菜单中选择 **Export**。选择 **Export Android Application**，如下所示截图：![使用
    Eclipse ADT 发布](img/1103OS_08_01.jpg)
- en: The **Export** wizard will now guide you through the process of signing, including
    the steps for selecting the private key (if already generated using the tool),
    or creating a new keystore and private key. Some of the following screens are
    captured, with the first screenshot being the creation of a keystore.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Export** 向导现在将指导您完成签名过程，包括选择私钥的步骤（如果已经使用工具生成），或者创建新的密钥库和私钥。以下是一些截图，第一张是创建密钥库的截图。'
- en: Now select **Create new keystore** and provide the **Location** and **Password**
    values:![Using the Eclipse ADT for release](img/1103OS_08_02.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择 **Create new keystore** 并提供 **Location** 和 **Password** 的值：![使用 Eclipse
    ADT 发布](img/1103OS_08_02.jpg)
- en: In the following screen we can enter other details about the key creation as
    specified in the next table:![Using the Eclipse ADT for release](img/1103OS_08_03.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下屏幕中，我们可以根据下表输入有关密钥创建的其他详细信息：![使用 Eclipse ADT 发布](img/1103OS_08_03.jpg)
- en: 'In the **Export Android Application** wizard, fill in the respective details:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**导出Android应用**向导中，填写相应的详细信息：
- en: '| Field | Value |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字段 | 值 |'
- en: '| --- | --- |'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Alias** | `DIS` – It is the key alias name |'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **别名** | `DIS` – 这是密钥别名名称 |'
- en: '| **Password** | `<password>` |'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **密码** | `<密码>` |'
- en: '| **Validity** | `25` – for publishing in Google Play, a period ending 22 October
    2033 is a requirement |'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **有效期** | `25` – 对于在Google Play上发布，截至2033年10月22日的期限是必须的 |'
- en: '| **First and Last Name** | `<NAME>` |'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **名字和姓氏** | `<姓名>` |'
- en: '| **Organizational Unit** | Personal |'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **组织单位** | 个人 |'
- en: '| **Organization** | Personal |'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **组织** | 个人 |'
- en: '| **City or Locality** | `<CITY NAME>` |'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **市/地区** | `<城市名称>` |'
- en: '| **State or Province** | `<STATE NAME>` |'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **州/省** | `<州名称>` |'
- en: '| **Country Code(xx)** | Two letter code (for example, US) |'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **国家代码(xx)** | 两个字母代码（例如，US） |'
- en: Click on **Finish**, and the result is compiled, signed, aligned, and ready
    for distribution.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**，结果就会被编译、签名、对齐，并准备好分发。
- en: Publishing to Google Play
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到Google Play
- en: 'Publishing at Google Play is very simple and involves the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Google Play上发布非常简单，包括以下步骤：
- en: '**Register for Google Play**: Visit and register it at [https://play.google.com/](https://play.google.com/).
    It requires $25 USD to register, and is fairly straightforward and can take a
    few days until you get the final access.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册Google Play**: 访问并注册[https://play.google.com/](https://play.google.com/)。注册需要25美元，过程相当直接，可能需要几天时间才能获得最终访问权限。'
- en: '**Uploading APK**: Once the registration is over, the users have to log in
    and upload the APK file using the **Upload Application** link. Also, they have
    to upload the required assets, and edit the listing details, the one users will
    see when they browse the application in store.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上传APK**: 注册完成后，用户需要登录并使用**上传应用**链接上传APK文件。此外，他们还需要上传所需的资源，并编辑列表详情，这些是用户在商店浏览应用时将看到的内容。'
- en: Finish up the task by using the **publish** button.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**发布**按钮来完成这项任务。
- en: Getting help
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取帮助
- en: 'For more information and help on signing and publishing, refer to following
    links:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有关签名和发布的更多信息和支持，请参考以下链接：
- en: '[http://developer.android.com/tools/publishing/app-signing.html](http://developer.android.com/tools/publishing/app-signing.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[应用签名](http://developer.android.com/tools/publishing/app-signing.html)'
- en: '[http://developer.android.com/tools/publishing/versioning.html](http://developer.android.com/tools/publishing/versioning.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[版本管理](http://developer.android.com/tools/publishing/versioning.html)'
- en: '[http://developer.android.com/tools/publishing/preparing.html](http://developer.android.com/tools/publishing/preparing.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准备发布](http://developer.android.com/tools/publishing/preparing.html)'
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the steps involved in signing and distribution
    of APK, and how it can be achieved using the Eclipse ADT easily.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了签名和分发APK涉及的步骤，以及如何通过Eclipse ADT轻松实现这一过程。
