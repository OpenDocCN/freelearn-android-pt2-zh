- en: Chapter 4. Installation on the UDOO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：在 UDOO 上的安装
- en: 'In order to continue our exploration, we will need to get a tangible system
    in place to work with. In this chapter, we will:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续我们的探索，我们需要建立一个实际的系统来操作。在本章中，我们将：
- en: Build Android 4.3 for the UDOO from source
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码为 UDOO 构建 Android 4.3
- en: Flash an SD card with our boot images
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们的启动镜像刷写 SD 卡
- en: Get the UDOO running while capturing logs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在捕获日志的同时让 UDOO 运行
- en: Establish an `adb` connection to the UDOO
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立与 UDOO 的 `adb` 连接
- en: Rebuild the kernel with SELinux support
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新构建带有 SELinux 支持的内核
- en: Verify our SELinux UDOO image works as expected
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证我们的 SELinux UDOO 镜像是否按预期工作
- en: We will start with the publicly available UDOO Android 4.3 Jelly Bean source
    code, which can be downloaded from [http://www.udoo.org/downloads/](http://www.udoo.org/downloads/).
    It is assumed you have a UDOO and have verified that it is functional. It is recommended
    you follow the instructions on the UDOO website for getting started with the Android
    4.3 prebuilt image as an initial test (for more information, refer to [http://www.udoo.org/getting-started/](http://www.udoo.org/getting-started/)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从公开可用的 UDOO Android 4.3 Jelly Bean 源代码开始，可以从[http://www.udoo.org/downloads/](http://www.udoo.org/downloads/)下载。假设你已经有一个
    UDOO 并确认它是可用的。建议你按照 UDOO 网站上的说明，使用 Android 4.3 预构建的镜像作为初步测试（更多信息，请参考[http://www.udoo.org/getting-started/](http://www.udoo.org/getting-started/)）。
- en: You will also need an appropriate development system for working with Android
    and a UDOO, but the details of this are beyond the scope of this chapter. An appendix
    has been provided detailing the setup of a standard Ubuntu Linux 12.04 system
    to ensure you have the highest probability of success duplicating the work in
    this book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个适合使用 Android 和 UDOO 的开发系统，但这个细节超出了本章的范围。附录中提供了一个标准 Ubuntu Linux 12.04
    系统的设置详情，以确保你有最大的可能性成功复制本书中的工作。
- en: Retrieving the source
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取源代码
- en: 'Let''s start this exercise by downloading the Android 4.3 Jellybean source
    code from the download links given in the preceding section, and extract the download
    into a workspace using the following commands:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载前文给出的链接中的 Android 4.3 Jellybean 源代码开始这项练习，并使用以下命令将下载的文件解压到工作空间中：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once this is done, you should review the UDOO documentation and the Android
    source code building instructions at the following URLs:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，你应该查看以下 URL 上的 UDOO 文档和 Android 源代码构建说明：
- en: '[http://www.elinux.org/UDOO_compile_android_4-2-2_from_sources](http://www.elinux.org/UDOO_compile_android_4-2-2_from_sources)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.elinux.org/UDOO_compile_android_4-2-2_from_sources](http://www.elinux.org/UDOO_compile_android_4-2-2_from_sources)'
- en: '[http://source.android.com/source/initializing.html](http://source.android.com/source/initializing.html)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://source.android.com/source/initializing.html](http://source.android.com/source/initializing.html)'
- en: The instructions provided by the preceding URL discuss how to build Android
    with Open JDK 7\. However, these instructions are for the current release of Android
    (L preview) and are not 100 percent relevant. For Android 4.3, you must build
    with Oracle Java 6, which is archived by Oracle and found at [http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个 URL 提供的说明讨论了如何使用 Open JDK 7 构建 Android。然而，这些说明适用于当前发布的 Android（L 预览版）并不完全相关。对于
    Android 4.3，你必须使用 Oracle Java 6 进行构建，Oracle 已经将 Java 6 归档，可以在[http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html)找到。
- en: It is assumed that you have a duplicate of the system detailed in the [Appendix](apa.html
    "Appendix A. The Development Environment"), *The Development Environment*. That
    appendix, among other things, walks you through the setup of Oracle Java 6 as
    your only Java instance. However, for those who prefer to work from their existing
    systems, particularly those with multiple Java SDKs, please keep in mind you will
    need to ensure your system is using the Oracle Java 6 tools when working through
    the rest of this book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经有了附录中详细描述的系统的副本，*开发环境*。该附录，除了其他事项，还指导你设置 Oracle Java 6 作为你唯一的 Java 实例。然而，对于那些希望从现有系统中工作的人，特别是那些拥有多个
    Java SDK 的人，请记住，在阅读本书的其余部分时，你需要确保你的系统在使用 Oracle Java 6 工具。
- en: 'Finish setting up your environment by changing to the root of your UDOO source
    tree and execute the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过切换到你的 UDOO 源代码树的根目录并执行以下命令来完成环境设置：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the environment is configured, we need to build the `bootloader`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完环境后，我们需要构建`bootloader`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A graphical menu will appear. Ensure the settings are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将会出现一个图形菜单。确保设置如下：
- en: '**DDR Size**: Select 1 Giga, bus size 64, and active CS \ 1 (256Mx4)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DDR大小**：选择1吉字节，总线大小64，激活CS \ 1（256Mx4）'
- en: '**Board Type**: Select UDOO'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主板类型**：选择UDOO'
- en: '**CPU type**: Select quad-core or dual-core option, dependent on which system
    you have. We happen to be using the quad-core system.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU类型**：根据你拥有的系统选择四核或双核选项。我们碰巧使用的是四核系统。'
- en: '**OS type**: Select **Android**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统类型**：选择**Android**'
- en: '**Environment device**: Must select **SD/MMC**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境设备**：必须选择**SD/MMC**'
- en: '**Extra options**: **CLEAN** should be selected'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外选项**：应选择**清理**（**CLEAN**）'
- en: '**Compiler options**: Paths to tool chains can be selected here; just take
    the defaults'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编译器选项**：在这里可以选择工具链的路径；只需采用默认设置'
- en: 'The following screenshot shows the graphical menu displayed by the preceding
    command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了前一个命令显示的图形菜单：
- en: '![Retrieving the source](img/0594OS_04_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![获取源码](img/0594OS_04_01.jpg)'
- en: 'When you exit, be sure to save. Then start the compilation:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 退出时，请确保保存。然后开始编译：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Just to be safe, verify your build was successful by using `ls u-boot.bin`
    to ensure the `bootloader` image now exists. Now, build Android using the following
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保险起见，使用`ls u-boot.bin`验证你的构建是否成功，以确保现在存在`bootloader`镜像。现在，使用以下命令构建Android：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first command is something that was sourced in the setup scripts for Android
    and takes us back to the root of our project tree. The second command, `make`,
    builds the system. You should set the option for `j` to twice your CPU/core count
    in most cases. Because many of you might have a dual-core machine, we'll use `–j4`.
    One of the authors of this book uses 8 CPU cores, for example, and uses the flag
    `-j16`. The file redirection and `tee` commands capture the build output to a
    file. This is important to help and debug any build issues. This build, depending
    on your system can take a long, long time. On the previously mentioned 8-core
    system with 16GB RAM, this took a little over 35 minutes. On other systems, we've
    experienced build times over 3 hours.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令是Android设置脚本中引入的内容，可以让我们返回到项目树的根目录。第二个命令`make`构建系统。大多数情况下，你应该将`j`的选项设置为CPU/核心数的两倍。由于你们许多人可能使用的是双核机器，我们将使用`–j4`。例如，这本书的其中一位作者使用8个CPU核心，并使用`-j16`标志。文件重定向和`tee`命令将构建输出捕获到一个文件中。这对于帮助调试构建问题非常重要。这个构建过程，根据你的系统，可能需要很长时间。在之前提到的8核系统（16GB内存）上，这需要超过35分钟。在其他系统上，我们经历过超过3小时的构建时间。
- en: 'In this case, capturing the logs proved very useful. The build terminated with
    an error, and by searching the logs for `error`, we found the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，捕获日志证明非常有用。构建以错误结束，通过搜索日志中的`error`，我们找到了以下内容：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By evaluating those errors, we discover we are missing headers for `uuid` and
    `lzo1x`. We can also open the Android makefile, `external/mtd-utils/mkfs.ubifs/Android.mk`,
    and determine the likely libraries involved from the line `LOCAL_LDLIBS:= -lz
    -llzo2 -lm -luuid -m64`. Searching reveals the specific Ubuntu package we''re
    missing; we will install them and build again. The `$` character at the end of
    the search string ensures we only get results ending in `uuid/uuid.h`. Without
    it, we might match files ending in `.html` or `.hpp`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过评估这些错误，我们发现缺少了`uuid`和`lzo1x`的头文件。我们还可以打开Android的makefile，`external/mtd-utils/mkfs.ubifs/Android.mk`，从行`LOCAL_LDLIBS:=
    -lz -llzo2 -lm -luuid -m64`确定可能涉及的库。搜索揭示了我们缺少的特定Ubuntu包；我们将安装它们并重新构建。搜索字符串末尾的`$`字符确保我们只得到以`uuid/uuid.h`结尾的结果。没有它，我们可能会匹配以`.html`或`.hpp`结尾的文件：
- en: $ sudo apt-file search -x "uuid/uuid.h$"
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt-file search -x "uuid/uuid.h$"
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A successful build should produce some final output similar to the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的构建应该产生一些类似以下的最终输出：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Flashing image on an SD card
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在SD卡上刷新镜像
- en: 'With the `bootloader`, Android userspace, and Linux kernel built, it''s time
    to insert an SD card and flash the images. Insert an SD card into your host computer,
    and ensure it''s unmounted. In Ubuntu, removable media are mounted automatically,
    so you''ll need to find the `/dev/sd*` device that is your flash drive, and `umount`
    it. For the remainder of the text, we will use `/dev/sdd` as the flash drive,
    but it is important to use the correct device for your system. If you have used
    this SD card for installing UDOO before, the card will contain multiple partitions,
    so you might see `/dev/sdd<num>` mounted numerous times:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当`bootloader`、Android用户空间和Linux内核构建完成后，是时候插入SD卡并刷入镜像了。将SD卡插入你的主机电脑，并确保它未被挂载。在Ubuntu中，可移动媒体会被自动挂载，因此你需要找到你的U盘的`/dev/sd*`设备，并执行`umount`命令。在本文剩余部分，我们将使用`/dev/sdd`作为U盘，但重要的是要使用适合你系统的正确设备。如果你之前使用这张SD卡安装过UDOO，这张卡将包含多个分区，所以你可能会看到多次挂载`/dev/sdd<num>`：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the SD card is properly unmounted, we can flash our image:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦SD卡被正确卸载，我们可以刷入我们的镜像：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You must use the `-E` parameter on `sudo` to preserve all the exported variables
    from the Android build. You must be in the same terminal session you built Android
    in. Otherwise you will see the error `No OUT export variable found! Setup not
    called in advance…`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须在`sudo`中使用`-E`参数以保留Android构建中导出的所有变量。你必须处于构建Android的同一个终端会话中。否则你会看到错误`No
    OUT export variable found! Setup not called in advance…`。
- en: Once this completes (it will take a while), it's important to flush the block
    device caches back to the disk with the command, `sudo sync`. Then, you can remove
    the SD card, insert it into the UDOO, and boot!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后（这将需要一段时间），重要的是使用命令`sudo sync`将块设备缓存刷新回磁盘。然后，你可以取出SD卡，将其插入UDOO并启动！
- en: UDOO serial and Android Debug Bridge
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UDOO串行和Android调试桥
- en: Now that the UDOO is booting into Android, we want to make sure we can access
    it using the serial port as well as the **Android Debug Bridge** (**adb**). You'll
    need the UDOO serial drivers appropriate for your system. The details of this
    for Mac, Linux, and Windows can be found at
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 既然UDOO正在启动到Android，我们希望确保我们也能通过串行端口以及**Android调试桥**（**adb**）访问它。你需要适合你系统的UDOO串行驱动程序。有关Mac、Linux和Windows的详细信息可以在
- en: '[http://www.udoo.org/ProjectsAndTutorials/connecting-via-serial-cable/](http://www.udoo.org/ProjectsAndTutorials/connecting-via-serial-cable/).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.udoo.org/ProjectsAndTutorials/connecting-via-serial-cable/](http://www.udoo.org/ProjectsAndTutorials/connecting-via-serial-cable/)。'
- en: The serial port is the first form of communication that will come from the system,
    and it is initialized by the `bootloader`. It is a critical link for debugging
    any kernel or system issues that you encounter later on. It's also required in
    order to configure the USB port to allow `adb` connections across CN3 (the USB
    OTG port on the UDOO). To configure the port, we need to configure and use minicom
    to connect a shell to the device. Start by plugging a micro USB cable from CN6
    (the micro USB port closest to the power button) to the host machine. Next, let's
    find the serial connection by looking through `dmesg` for the connection message
    of a TTY over USB.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 串行端口是系统将使用的第一种通信方式，它由`bootloader`初始化。它是调试你稍后可能遇到的任何内核或系统问题的关键链接。它还用于配置USB端口，以便通过CN3（UDOO上的USB
    OTG端口）进行`adb`连接。为了配置端口，我们需要配置并使用minicom将shell连接到设备。首先，将一根micro USB线从CN6（靠近电源按钮的micro
    USB端口）连接到主机。接下来，让我们通过查看`dmesg`中的TTY通过USB的连接信息来查找串行连接。
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our TTY terminal is on the last line. Let''s connect through it with `minicom`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的TTY终端在最后一行。让我们通过它使用`minicom`进行连接：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Select **Serial Port Setup**, type `a`, change **Serial Device** to `/dev/ttyUSB0`,
    and type `f` to toggle the hardware flow control off:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**串行端口设置**，输入`a`，将**串行设备**更改为`/dev/ttyUSB0`，并输入`f`以关闭硬件流控制：
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![UDOO串行和Android调试桥](img/0594OS_04_02.jpg)'
- en: 'To exit, hit *Enter*, select **Save Setup and DFL**, then select **Exit from
    Minicom**, and press *Enter*. Now run `minicom` to connect to your UDOO, and watch
    it boot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出，请按*回车键*，选择**保存设置和DFL**，然后选择**从Minicom退出**，并按*回车键*。现在运行`minicom`以连接到你的UDOO，并观察它启动：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the device is booted and running, you''ll get a friendly root shell:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备启动并运行，你将得到一个友好的root shell：
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![UDOO串行和Android调试桥](img/0594OS_04_03.jpg)'
- en: 'If it''s booting, you''ll see the logs. Just wait for the root shell prompt:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它正在启动，你会看到日志。只需等待root shell提示：
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![UDOO串行和Android调试桥](img/0594OS_04_04.jpg)'
- en: 'Now we need to flip some GPIO pins to move the CN3 micro USB into debug mode:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要翻转一些GPIO引脚，将CN3 micro USB设置为调试模式：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, reset the SAM3X8E processor that was using that bus, by removing and
    replacing the J16 jumper. Now plug in a micro USB cable from the host to CN3\.
    You should now see a USB device as well as `adb`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过移除并重新插入J16跳线，重置使用该总线的SAM3X8E处理器。现在从宿主到CN3连接一根micro USB线缆。你现在应该能看到一个USB设备以及`adb`：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You need to select **Allow USB debugging** when the prompt appears on the UDOO
    Android side. When you do this, the device should go from offline to online; this
    way you can use `adb`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当UDOO Android端出现提示时，你需要选择**允许USB调试**。当你这样做时，设备应该从离线状态变为在线状态；这样你就可以使用`adb`。
- en: 'Now test the connection and grab the screenshot over `adb`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试连接并通过`adb`获取截图：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is the screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一张截图：
- en: '![UDOO serial and Android Debug Bridge](img/0594OS_04_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![UDOO串行和Android调试桥](img/0594OS_04_05.jpg)'
- en: At this point, we have a working development system. We have early boot logs
    and a rescue shell through the serial console. We also have an `adb` bridge with
    which we can use the standard Android debugging tools! There's nothing left to
    do but get this system secured with SELinux!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们拥有了一个可用的开发系统。我们通过串行控制台拥有了早期的启动日志和救援shell。我们还拥有一个`adb`桥接，通过它我们可以使用标准的Android调试工具！现在要做的就是用SELinux来增强这个系统的安全性！
- en: Flipping the switch
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻转开关
- en: 'Now that we are enabling SELinux on the UDOO, we need to verify it isn''t turned
    on. The way to do this is to check the known `filesystem` types in the `/proc`
    filesystem. SELinux has its own psuedo-filesystem, so if it''s enabled, we should
    see it in the list:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们现在要在UDOO上启用SELinux，我们需要确认它没有被开启。做到这一点的方法是检查`/proc`文件系统中的已知`filesystem`类型。SELinux有自己的伪文件系统，所以如果它被启用了，我们应该能在列表中看到它：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There is no evidence of SELinux here, so let''s find the kernel configuration
    and turn it on. Execute this command from the `~/udoo/kernel_imx` directory, and
    eventually you will be greeted with a graphical editing screen:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有发现SELinux的踪迹，因此让我们找到内核配置并将其开启。从`~/udoo/kernel_imx`目录执行这个命令，最终你会看到一个图形化编辑界面：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First, you will need to enable **Auditing support**, as this is a dependency
    of SELinux. Under **General setup** | **Auditing Support**, enable **Audit Support**
    and **Enable system-call auditing**. Use the up and down arrow keys to highlight
    an entry, and press the spacebar to enable it. When an item is enabled, you will
    see an asterisk (*****) next to it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要启用**审计支持**，因为这是SELinux的依赖项。在**通用设置** | **审计支持**下，启用**审计支持**和**启用系统调用审计**。使用上下箭头键来高亮一个条目，并按空格键启用它。当一个项目被启用时，你会在它旁边看到一个星号（*****）：
- en: '![Flipping the switch](img/0594OS_04_06.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![翻转开关](img/0594OS_04_06.jpg)'
- en: 'Go back to the main menu by selecting **Exit**... it''s not very intuitive.
    Enter the **File systems** menu, and for each of the three filesystems, **Ext2**,
    **Ext3**, and **Ext4**, ensure that **Extended attributes** and **Security Labels**
    are enabled. Then, go back to the main menu by selecting **Exit**:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**退出**回到主菜单...这并不是很直观。进入**文件系统**菜单，对于三个文件系统中的每一个——**Ext2**、**Ext3**和**Ext4**，确保启用了**扩展属性**和**安全标签**。然后，通过选择**退出**回到主菜单：
- en: '![Flipping the switch](img/0594OS_04_07.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![翻转开关](img/0594OS_04_07.jpg)'
- en: 'From that screen, exit back to the main menu and go to **Security Options**.
    Once in the **Security Options** submenu, enable the **Enable different security
    models** and **Socket and Networking Security Hooks** options:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从那个屏幕退出回到主菜单，然后转到**安全选项**。一旦进入**安全选项**子菜单，启用**启用不同的安全模型**和**套接字和网络安全性钩子**选项：
- en: '![Flipping the switch](img/0594OS_04_08.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![翻转开关](img/0594OS_04_08.jpg)'
- en: 'Once these are enabled, more options will appear. Enable **NSA SELinux Support**
    and ensure the other selections and values from the following screenshot are duplicated:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 启用这些之后，会出现更多选项。启用**NSA SELinux支持**并确保从以下截图中复制其他的选择和值：
- en: '![Flipping the switch](img/0594OS_04_09.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![翻转开关](img/0594OS_04_09.jpg)'
- en: 'Finally, set **Default security module** to SELinux:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将**默认安全模块**设置为SELinux：
- en: '![Flipping the switch](img/0594OS_04_10.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![翻转开关](img/0594OS_04_10.jpg)'
- en: 'Once you select **Default security module**, a new window will appear from
    which you can select **SELinux**. Exit the configuration menus by selecting **Exit**
    until you are asked to save your new configuration:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择**默认安全模块**，一个新的窗口将出现，从中你可以选择**SELinux**。通过选择**退出**退出配置菜单，直到你被要求保存新的配置：
- en: '![Flipping the switch](img/0594OS_04_11.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![切换开关](img/0594OS_04_11.jpg)'
- en: 'Save the new configuration and write these changes to the originating kernel
    configuration file. Otherwise, it will be overwritten on subsequent builds. To
    do this, we''ll need to discover which configuration file was used in the default
    build, which we built earlier before we made our own configuration with `make
    menuconfig`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 保存新的配置并将这些更改写入原始内核配置文件。否则，在后续构建时它将被覆盖。为此，我们需要找出在默认构建中使用了哪个配置文件，这是我们之前在使用`make
    menuconfig`制作我们自己的配置之前构建的：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can see that `imx6_udoo_android_defconfig` was used as the default configuration.
    Copy your custom configuration and build again:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`imx6_udoo_android_defconfig`被用作默认配置。复制你的自定义配置并再次构建：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A quick sanity check of the log file is always a good idea to verify SELinux
    was actually built into the kernel:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 快速检查日志文件以验证SELinux实际上是否已构建到内核中，这总是一个好主意：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, with a built kernel supporting SELinux, insert the SD card into the host
    and run the following commands:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用支持SELinux的构建内核，将SD卡插入主机并运行以下命令：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget to umount any automounted partitions from the SD card as we did
    before.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记像之前一样从SD卡卸载任何自动挂载的分区。
- en: 'Plug the SD card into the UDOO, and fire it up. You should see logs over the
    serial console as we did before:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将SD卡插入UDOO并启动它。你应该会像之前一样在串行控制台看到日志：
- en: '![Flipping the switch](img/0594OS_04_12.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![切换开关](img/0594OS_04_12.jpg)'
- en: Eventually, the serial connection should take us to a root shell.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，串行连接应该能让我们进入根shell。
- en: It's alive
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是活的
- en: 'How do we know that we have successfully enabled SELinux in the kernel? Earlier
    in this chapter, you ran the command, `adb shell cat /proc/filesystems`. We''re
    going to do the same thing and look for a new filesystem called `selinuxfs`. If
    that is present, it indicates we have enabled SELinux successfully. Run the following
    command in the serial terminal:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何知道我们已经成功在内核中启用了SELinux？在本章早些时候，你运行了命令`adb shell cat /proc/filesystems`。我们将做同样的事情并寻找一个名为`selinuxfs`的新文件系统。如果它存在，那就表明我们已经成功启用了SELinux。在串行终端运行以下命令：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can see that `selinuxfs` is present! Another common practice is to check
    `dmesg` for any SELinux output. To do this, execute the following command via
    the serial terminal:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`selinuxfs`是存在的！另一种常见的做法是检查`dmesg`中是否有任何SELinux的输出。为此，通过串行终端执行以下命令：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: This was a very exciting chapter. You learned how to enable SELinux in the kernel
    configuration, boot the "secured" system, and how to verify its presence. We also
    learned how to flash and build images for the UDOO in general and how to connect
    to it via serial and `adb` connections. In the next chapters, we will focus on
    how to make the UDOO usable with SE for Android capabilities.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常令人兴奋的章节。你学会了如何在内核配置中启用SELinux，启动“安全”系统，以及如何验证其存在。我们还了解了如何为UDOO刷写和构建通用镜像以及如何通过串行和`adb`连接到它。在接下来的章节中，我们将重点介绍如何使用SE
    for Android功能使UDOO可用。
