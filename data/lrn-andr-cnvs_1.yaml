- en: Chapter 1. Getting Started with Android Canvas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 开始使用Android Canvas
- en: In this chapter we will learn a little about Android Canvas, why we need it,
    and what it provides. We will create a simple Android application displaying an
    image on the screen. We will test the application on an emulator. Then we will
    discuss each section of the application and things that the reader needs to know
    about while working with Android Canvas. By the end of this chapter, the reader
    will have learned to create a basic Android application that will display an image
    using one of the simple techniques provided by Canvas and some additional information
    and good conventions to deal with graphics in applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解有关Android Canvas的一些信息，为什么需要它，以及它提供了什么。我们将创建一个简单的Android应用程序，在屏幕上显示一张图片。我们将在模拟器上测试该应用程序。然后，我们将讨论应用程序的每个部分以及读者在使用Android
    Canvas时需要了解的事项。在本章结束时，读者将学会使用Canvas提供的一种简单技术创建一个基本的Android应用程序，以显示图片，并获得一些额外的信息和处理应用程序中图形的良好约定。
- en: Android Canvas
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Canvas
- en: Android Canvas provides the developer with the ability to create and modify
    2D images and shapes. Moreover, the Canvas can be used to create and render our
    own 2D objects as this class provides various drawing methods to do so. Canvas
    can also be used to create some basic animations such as frame-by-frame animations
    or to create certain `Drawable` objects such as buttons with textures and shapes
    such as circles, ovals, squares, polygons, and lines. Android also provides hardware
    acceleration to increase the performance of the drawing done by Canvas. Now we
    know what we want to develop, why we need to know about graphics, what our graphic
    needs are, and what we will use. We also know what Android Canvas is and what
    it provides us with. In short, Android Canvas is the answer to all our questions
    as it provides all the right ingredients for our graphics and some basic animation
    to get the job done. For 3D graphics, Android provides support for OpenGL; but
    in the context of this book, we will not cover 3D graphics and so will not discuss
    OpenGL. However, interested readers can check the details on [http://developer.android.com/guide/topics/graphics/opengl.html](http://developer.android.com/guide/topics/graphics/opengl.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Android Canvas为开发者提供了创建和修改2D图像和形状的能力。此外，Canvas可用于创建和渲染我们自己的2D对象，因为此类提供了各种绘图方法。Canvas还可以用来创建一些基本动画，比如逐帧动画，或者创建某些`Drawable`对象，例如带有纹理和形状的按钮，如圆形、椭圆形、正方形、多边形和线条。Android还提供了硬件加速，以提高Canvas绘制的性能。现在我们知道我们要开发什么，为什么需要了解图形，我们的图形需求是什么，以及我们将使用什么。我们也知道Android
    Canvas是什么以及它为我们提供了什么。简而言之，Android Canvas是我们所有问题的答案，因为它为我们的图形提供了所有正确的元素，以及一些基本动画来完成工作。对于3D图形，Android提供了对OpenGL的支持；但在本书的范围内，我们不涉及3D图形，因此不会讨论OpenGL。不过，感兴趣的读者可以查看[http://developer.android.com/guide/topics/graphics/opengl.html](http://developer.android.com/guide/topics/graphics/opengl.html)的详细信息。
- en: Our first Android Canvas application
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一款Android Canvas应用程序
- en: Our goal in this section will be to create a very simple application that will
    display an image on the screen. Do not get frightened. It might seem too early
    to start developing Canvas—and it is—but our first application will not involve
    any coding or any complicated stuff. We will go through the different steps of
    creating an application. We will look into SDK versions and available APIs and
    what we are going to use. You may not understand certain sections of the applications
    or the steps that we are performing, but after performing each step we will explain
    what's going on in that step. We have only talked up to this point; let's start
    some real work. We will start by opening Eclipse and starting a new Android application
    project. To do this, in Eclipse we will navigate to **File** | **New** | **Android
    Application Project**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分我们的目标是创建一个非常简单的应用程序，用以在屏幕上显示一张图片。不要害怕，现在开始开发Canvas似乎为时尚早——确实如此——但我们的第一个应用程序不涉及任何编码或复杂的内容。我们将逐步完成创建应用程序的不同步骤。我们会了解SDK版本和可用的API，以及我们将使用哪些内容。你可能会对我们执行的应用程序中的某些部分或步骤不理解，但每执行一步，我们都会解释该步骤中发生的情况。至此我们仅仅是讨论，让我们开始真正的工作吧。我们将从打开Eclipse并开始一个新的Android应用程序项目开始。为此，在Eclipse中，我们将导航至**文件**
    | **新建** | **Android Application Project**。
- en: 'The following screenshot shows the new application window in Eclipse:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了Eclipse中新建应用程序的窗口：
- en: '![Our first Android Canvas application](img/5396OS_01_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![我们的第一个Android Canvas应用程序](img/5396OS_01_01.jpg)'
- en: This is the first screen that appears. We will name our application `MyFirstCanvasApp`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是首先出现的屏幕。我们将应用命名为 `MyFirstCanvasApp`。
- en: Application Name
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用名称
- en: '**Application Name** is shown in the **Manage Application** list in **Settings**;
    if we publish our application on **Play Store**, the same string will be displayed
    there. So the name should be attractive and meaningful.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用名称**将显示在**设置**中的**管理应用**列表里；如果我们把应用发布到**Play 商店**，同样的字符串也会在那里显示。因此，名称应当吸引人且有意义。'
- en: Project Name
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目名称
- en: '**Project Name** is only used by Eclipse, but it should be unique within the
    workspace. It can be the same as the application name.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目名称**仅由 Eclipse 使用，但它应该在 workspace 中是唯一的。它可以与应用名称相同。'
- en: Package Name
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包名称
- en: '**Package Name** must be a unique identifier of our application. It is not
    shown to the users, but it should stay the same throughout the life of the application.
    The package name is something with the help of which different versions of the
    same applications are identified. Our package name will be `com.learningandroidcanvasmini.myfirstcanvasapp`.
    This specific syntax is not a hard and fast rule to define package names, but
    it''s a good way to avoid package name collisions. For example, if we have two
    applications with the same exact name, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**包名称**必须是应用的唯一标识符。它不会展示给用户，但应该在应用的整个生命周期中保持不变。包名称是用来识别同一应用的不同版本的依据。我们的包名称将是
    `com.learningandroidcanvasmini.myfirstcanvasapp`。这种特定的语法不是定义包名称的硬性规定，但它是避免包名称冲突的好方法。例如，如果我们有两个应用具有完全相同的名称，如下：'
- en: '`com.learningandroidcanvasmini.myfirstcanvasapp`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.learningandroidcanvasmini.myfirstcanvasapp`'
- en: '`com.learningandroidcanvasmini.myfirstcancasapp`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.learningandroidcanvasmini.myfirstcancasapp`'
- en: 'Let''s say that the first application is just a simple application displaying
    some images and the second application is a simple paint application with freehand
    drawing. If we want to publish them on Google Play Store, a package name collision
    will occur and the second application will not be allowed to get published because
    there will already be an application with the same exact name. There are two solutions
    to avoid this situation. First, changing the package name so that there is no
    collision in package names and the second application is considered as an all
    new application. For example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设第一个应用只是一个简单的展示一些图片的应用，而第二个应用是一个带有自由手绘功能的简单绘图应用。如果我们想将它们发布到 Google Play 商店，将会发生包名称冲突，第二个应用将不允许发布，因为已经有一个完全相同名称的应用存在。有两种方法可以避免这种情况。第一，更改包名称，以避免包名称冲突，第二个应用被视为全新的应用。例如：
- en: '`com.learningcandroidcanvasmini.picdisplayapp`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.learningcandroidcanvasmini.picdisplayapp`'
- en: '`com.learningandroidcanvasmini.paintapp`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.learningandroidcanvasmini.paintapp`'
- en: Second, we can keep the package name the same but change the `android:version`
    code and `android:version` name. Publishing will be successful, giving the impression
    that the first application is the core application (like `myfirstcanvasapp` Version
    1.0) and the second application is the updated version of the same app (like `myfirstcanvasapp`
    Version 2.0). For more details and better understanding of publishing applications
    on Google Play Store, follow the link [http://developer.android.com/distribute/googleplay/publish/preparing.html](http://developer.android.com/distribute/googleplay/publish/preparing.html).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，我们可以保持包名称不变，但更改 `android:version` 代码和 `android:version` 名称。这样发布将会成功，给用户的感觉是第一个应用是核心应用（如
    `myfirstcanvasapp` 1.0 版）而第二个应用是同一应用的更新版本（如 `myfirstcanvasapp` 2.0 版）。有关在 Google
    Play 商店发布应用的更多详情和更好理解，请参考链接 [http://developer.android.com/distribute/googleplay/publish/preparing.html](http://developer.android.com/distribute/googleplay/publish/preparing.html)。
- en: Least possible version of SDK
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小可能的 SDK 版本
- en: Selecting a lower possible required SDK means that our application will be able
    to run on the maximum available devices but with the limitation that if we select
    a very low version of Android, we won't be able to use hardware acceleration as
    it is not available on the lower versions of Android. If we don't require hardware
    acceleration, we can go for lower versions to target more devices, but if we are
    using some animations and graphics that may require hardware accelerations, we
    need to use a little higher version of Android.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选择尽可能低的所需 SDK 意味着我们的应用程序能够在尽可能多的设备上运行，但局限性在于，如果我们选择一个非常低版本的 Android，将无法使用硬件加速，因为低版本的
    Android 不支持硬件加速。如果我们不需要硬件加速，可以选择更低版本以覆盖更多设备，但如果我们使用的一些动画和图形可能需要硬件加速，就需要使用稍高版本的
    Android。
- en: Target SDK
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标 SDK
- en: This is the highest API level our application will work with, but applications
    are generally forward compatible and will even work with SDK levels higher than
    our target SDK if the libraries used are not changed. This is a rare scenario
    but sometimes some libraries in the new versions are changed and that affects
    calls to different methods and properties of different classes, and this results
    in abnormal functions of the application. This attribute informs the system that
    we have tested the application against the target API and the system should not
    create any compatibility issues. Moreover, the application will have backward
    compatibility till the Minimum Required SDK. We will select the highest available
    SDK as we won't like our application to look outdated as lower versions will lack
    some new features (such as lack of hardware acceleration).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的应用程序能够工作的最高 API 级别，但应用程序通常是向前兼容的，即使所使用的 SDK 高于我们的目标 SDK，只要使用的库没有改变，应用程序也能工作。这是一个罕见的情况，但有时新版本中的一些库会发生变化，这会影响对不同类的方法和属性的调用，导致应用程序功能异常。这个属性通知系统我们已经针对目标
    API 测试了应用程序，系统不应产生任何兼容性问题。此外，应用程序将向后兼容到最低所需 SDK。我们将选择最高的可用 SDK，因为我们不希望应用程序因缺少新功能（如缺少硬件加速）而显得过时。
- en: Theme
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: Theme is the last option. We will keep the default selection for this, as at
    this point it is not important.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 主题是最后一个选项。我们将保留此选项的默认选择，因为目前它并不重要。
- en: After this, we will click on **Next** and the following screen will appear.
    This is the **Configure Project** screen.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将点击**下一步**，随后会出现以下屏幕。这是**配置项目**的界面。
- en: 'The following screenshot shows the new application''s configuration screen:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了新应用程序的配置界面：
- en: '![Theme](img/5396OS_01_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![主题](img/5396OS_01_02.jpg)'
- en: 'Here we will check whether we want a custom launcher icon or not. On selecting
    **Create Activity**, the system will create a default activity for us automatically.
    Also configure where to create the project; mostly, it''s in our workspace. If
    we have selected the **Create custom launcher icon** checkbox, clicking on **Next**
    will take us to the following screen, the icon configuration screen:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将检查是否需要自定义启动器图标。选择**创建活动**后，系统将自动为我们创建一个默认活动。同时配置创建项目的位置；通常是在我们的工作区。如果我们勾选了**创建自定义启动器图标**的复选框，点击**下一步**将带我们进入以下屏幕，即图标配置屏幕：
- en: '![Theme](img/5396OS_01_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![主题](img/5396OS_01_03.jpg)'
- en: On this screen, we will configure the custom launcher icon attributes, such
    as the path from where it should read the source image. We will configure the
    icon's foreground, shape, and background color. Click on **Next** to move to the
    next screen. We have selected a randomly downloaded Canvas image from the web
    as our source. The image is in PNG format. PNG images support transparency; for
    example, a completely transparent image or with some transparent background. Select
    the **Shape** as **Round** and the **Background Color** as dark gray. Other options
    are to make the shape **Square** or **None**. For more details about icons, follow
    the link [http://developer.android.com/design/style/iconography.html](http://developer.android.com/design/style/iconography.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个界面上，我们将配置自定义启动器图标属性，比如它应该从哪里读取源图像的路径。我们将配置图标的前景、形状和背景颜色。点击**下一步**进入下一个屏幕。我们选择了一个从网上随机下载的
    Canvas 图像作为我们的源图像。该图像为 PNG 格式。PNG 图像支持透明度，例如完全透明的图像或带有部分透明背景。选择**形状**为**圆形**，**背景颜色**为深灰色。其他选项是将形状设置为**方形**或**无**。关于图标更多详情，请参考链接：[http://developer.android.com/design/style/iconography.html](http://developer.android.com/design/style/iconography.html)。
- en: The form shows different sizes of the image to the right with **mdpi**, **hdpi**,
    **xhdpi**, and **xxhdpi** written on top of each; `dpi` is dots per inch, `m`
    is medium, and `h` is high. These are the different sizes of our image for different
    screen sizes. Android devices come in different screen sizes and resolutions.
    If we want our application to have support for multiple screen sizes, starting
    from old to new devices, we should gather some information about their dpis, screen
    sizes, screen resolutions, screen densities, and so on; as we are dealing with
    graphics here, we should know about them. However, we will come to this at the
    end of this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表单右侧显示了不同大小的图像，上方分别写着**mdpi**、**hdpi**、**xhdpi**和**xxhdpi**；`dpi`是每英寸点数，`m`表示中等，`h`表示高。这些是我们图像的不同尺寸，用于不同的屏幕尺寸。安卓设备具有不同的屏幕尺寸和分辨率。如果我们希望我们的应用程序支持多种屏幕尺寸，从旧设备到新设备，我们应该收集一些关于它们的
    dpis、屏幕尺寸、屏幕分辨率、屏幕密度等信息；由于我们在这里处理的是图形，我们应该了解它们。然而，我们将在本章的末尾讨论这个问题。
- en: 'The following screenshot shows selecting the default activity screen:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了选择默认活动屏幕的过程：
- en: '![Theme](img/5396OS_01_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![主题](img/5396OS_01_04.jpg)'
- en: 'On this form, the wizard gives us options to create an application with a **Blank
    Activity**, **Fullscreen Activity**, or **Master/Detail Flow** activity form.
    We will move forward with a blank activity by selecting **Blank Activity** and
    clicking on **Next**. Now the wizard will take us to the following form, the default
    activity form:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表单上，向导为我们提供了创建应用程序的选项，可以选择**空白活动**、**全屏活动**或**主/细节流程**活动表单。我们将选择**空白活动**并点击**下一步**继续操作。现在，向导将带我们进入以下表单，即默认活动表单：
- en: '![Theme](img/5396OS_01_05.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![主题](img/5396OS_01_05.jpg)'
- en: On this form, we will name our activity as `MyFirstCanvasAppMainActivity`. The
    **Layout Name** will be populated automatically for us and **Navigation Type**
    should be selected as **None** because at this point we are not interested in
    any navigation complications in our application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在此表单上，我们将把我们的活动命名为`MyFirstCanvasAppMainActivity`。**布局名称**将会自动为我们填充，而**导航类型**应选择为**无**，因为目前我们不希望应用程序中出现任何导航上的复杂性。
- en: 'Clicking on **Finish** will close the wizard and we will be taken back to Eclipse
    with the screen as shown in the following screenshot, which shows our application
    in the **Design** mode.The following screenshot shows the first Eclipse view of
    our project after the wizard has completed execution successfully:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**完成**将关闭向导，我们将回到 Eclipse，屏幕显示如下截图所示，它显示我们的应用程序处于**设计**模式。以下截图显示了向导成功完成后，我们项目的第一次
    Eclipse 视图：
- en: '![Theme](img/5396OS_01_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![主题](img/5396OS_01_06.jpg)'
- en: Here we will create an **Android Virtual Device** (**AVD**) and our emulator
    from the AVD Manager with the configuration of Target SDK Ver. 4.2.2 to test our
    application. To do this, we will right-click on our project in the **Package Explorer**
    panel that appears on the left side by default. From the menu that appears, we
    will navigate to **Run As** | **Run Configurations**. In this window, we will
    select our project in the **Android** tab. Then we will navigate to the **Target**
    tab and select the AVD that we created earlier to test our application and click
    on **Run**. This will trigger the emulator to run and our application will be
    shown in the emulator as shown in following screenshot.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在 AVD 管理器中创建一个**安卓虚拟设备**（**AVD**）以及我们的模拟器，配置目标 SDK 版本为 4.2.2 以测试我们的应用程序。为此，我们将在默认出现在左侧的**包资源管理器**面板中，对我们的项目右键点击。在出现的菜单中，我们将导航至**运行方式**
    | **运行配置**。在此窗口中，我们将在**安卓**标签下选择我们的项目。然后，我们将进入**目标**标签，选择我们之前创建的 AVD 来测试我们的应用程序，并点击**运行**。这将触发模拟器运行，我们的应用程序将显示在模拟器中，如下面的截图所示。
- en: If we click on the Home key on the emulator and then click on the menu to see
    all the applications installed on the emulator, we will see that our custom launcher
    icon is also present in the menu as shown in the following screenshot. To give
    a good impression of our application, we must design an attractive, relevant icon
    for us. For this, Photoshop or any other graphic a design tool can be used. This
    step can be skipped if the developers own an actual device and it's configured
    for testing in Eclipse.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在模拟器上点击主键，然后点击菜单查看模拟器上安装的所有应用程序，我们会看到我们的自定义启动图标也出现在菜单中，如下面的截图所示。为了给我们的应用程序留下好印象，我们必须设计一个有吸引力且相关的图标。为此，可以使用
    Photoshop 或其他图形设计工具。如果开发人员拥有实际设备并将其配置为在 Eclipse 中进行测试，则可以跳过此步骤。
- en: 'The following screenshot shows the first default activity with **Hello world!**
    displayed:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了第一个默认活动，显示**Hello world!**：
- en: '![Theme](img/5396OS_01_07.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![主题](img/5396OS_01_07.jpg)'
- en: 'The following screenshot shows our application icon in the fourth row from
    top:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了我们应用程序图标在从顶部数第四行：
- en: '![Theme](img/5396OS_01_08.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![主题](img/5396OS_01_08.jpg)'
- en: Now that we have our first application up and running, we will try to understand
    the most important sections of our project in Eclipse. After understanding the
    important sections, we will meet our goal; that is, displaying an image on the
    screen.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经让第一个应用程序运行起来，我们将尝试了解Eclipse中项目的最重要部分。了解重要部分之后，我们将达到我们的目标；即在屏幕上显示一张图片。
- en: Mining our first application
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开采我们的第一个应用程序
- en: For starters, in every Android application there are three files that need our
    special attention; without understanding these three files, we won't be able to
    develop applications for Android. The following sections talk about these files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在每一个Android应用程序中，有三个文件需要我们特别注意；如果不理解这三个文件，我们将无法开发Android应用。以下部分将讨论这些文件。
- en: The configuration file
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件
- en: The main configuration file in every Android Application is `AndroidManifest.xml`.
    This is an XML file and can be seen at the root level of the project in **Package
    Explorer**. This is the main configuration file of our application and one of
    the most important files of our project. This file contains the information of
    the package or our application, the minimum and maximum SDKs used by our application,
    the activities used in our application, and permissions that our application needs
    to run or perform certain specific tasks. Whenever an application is about to
    get installed on an Android device, this is the file that provides the system
    with all the details about the permissions to resources that the application will
    require and the activities used in it. After reading this file, the system knows
    about the package name of this application, what the compatible SDKs are, what
    activities the application contains, and what permissions the application needs
    to run or perform certain tasks.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Android应用程序中的主配置文件是`AndroidManifest.xml`。这是一个XML文件，可以在**Package Explorer**中的项目根目录看到。这是我们应用程序的主要配置文件，也是项目中最重要的文件之一。这个文件包含了应用程序包的信息，应用程序使用的最小和最大SDK，应用程序中使用的活动以及应用程序运行或执行特定任务所需的权限。每当应用程序即将在Android设备上安装时，这个文件会向系统提供应用程序将需要的权限和资源以及其中使用的活动的所有详细信息。系统读取这个文件后，会知道应用程序的包名称，兼容的SDK是什么，应用程序包含哪些活动，以及应用程序运行或执行某些任务所需的权限。
- en: The layout file
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局文件
- en: The layout file in our application is `activity_my_first_canvas_app_main.xml`
    and is located in the `layout` folder that's inside the `res` folder. So the complete
    path is `res/layout/activity_my_first_canvas_app_main.xml` in our project in **Package
    Explorer**. This is an XML file that is responsible for the layout of our activity
    and the views that appear on the activity in our application. Other activities
    can be laid out using the same XML format using the same XML layout files.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中的布局文件是`activity_my_first_canvas_app_main.xml`，位于`res`文件夹内的`layout`文件夹中。所以在**Package
    Explorer**中的完整路径是`res/layout/activity_my_first_canvas_app_main.xml`。这是一个XML文件，负责我们活动的布局以及应用程序中活动上出现的视图。其他活动可以使用相同的XML格式和相同的XML布局文件进行布局。
- en: The code file
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码文件
- en: The main activity code file in our application is `MyFirstCanvasAppMainActivity.java`.
    This is the coding file of our activity where we code all our functionality. This
    file is located in the package folder of our project; that is, inside the `src`
    folder, so the path inside the project in the **Package Explorer** becomes `src/com.learningandroidcanvasmini.myfirstcanvasapp/MyFirstCanvasAppMainActivity.java`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中的主活动代码文件是`MyFirstCanvasAppMainActivity.java`。这是我们活动的编码文件，在这里编写所有的功能。这个文件位于项目中的包文件夹内，即在`src`文件夹中，所以在**Package
    Explorer**中的项目路径变为`src/com.learningandroidcanvasmini.myfirstcanvasapp/MyFirstCanvasAppMainActivity.java`。
- en: 'The following screenshot shows it clearly:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图清晰地展示了这一点：
- en: '![The code file](img/5396OS_01_09.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![代码文件](img/5396OS_01_09.jpg)'
- en: 'Besides the preceding files, we will discuss the `res` folder. The `res` folder
    contains the following `Drawable` folders:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述文件，我们还将讨论`res`文件夹。`res`文件夹包含以下`Drawable`文件夹：
- en: '`drawable-hdpi`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawable-hdpi`'
- en: '`drawable-ldpi`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawable-ldpi`'
- en: '`drawable-mdpi`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawable-mdpi`'
- en: '`drawable-xhdpi`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawable-xhdpi`'
- en: '`drawable-xxhdpi`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawable-xxhdpi`'
- en: The following screenshot displays the `drawable-xxhdpi` folder inside our `res`
    folder. This is where our icon is placed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了我们`res`文件夹内的`drawable-xxhdpi`文件夹。这就是我们放置图标的地方。
- en: '![The code file](img/5396OS_01_10.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![代码文件](img/5396OS_01_10.jpg)'
- en: If we check all these folders, we will find that each one contains an image
    by the name `ic_launcher.png` that is in fact the Canvas image we used during
    the creation of our application. The image is the same in each folder, but the
    size is different. Now let's say we want the original Canvas image to be displayed
    on the screen. We will copy our original Canvas image to one of these folders;
    let's say we copy the image to the `drawable-xhdpi` folder. Refresh the folders
    in the Package Explorer and then go to the **Design** view of our activity that
    is displaying the **Hello world** string. Select the string and delete it. In
    the Palette, click on **Images & Media** to expand it. Drag-and-drop an ImageView
    on the activity in the **Design** view. We will be prompted by a dialog box to
    select the source image for the ImageView.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查所有这些文件夹，会发现每个文件夹中都有一个名为`ic_launcher.png`的图像，实际上这是我们在创建应用时使用的Canvas图像。每个文件夹中的图像都是相同的，但大小不同。现在，假设我们想要在屏幕上显示原始的Canvas图像。我们将原始的Canvas图像复制到这些文件夹中的一个；假设我们将图像复制到`drawable-xhdpi`文件夹。在Package
    Explorer中刷新文件夹，然后转到显示**Hello world**字符串的活动**Design**视图。选择字符串并删除它。在Palette中，点击**Images
    & Media**展开它。在**Design**视图中将ImageView拖放到活动上。系统会弹出一个对话框，提示我们为拖放的活动选择ImageView的源图像。
- en: 'The following screenshot shows the dialog box that prompts us to select the
    source image for the ImageView that we have dragged-and-dropped on the activity
    in the **Design** mode:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了提示我们在**Design**模式下拖放到活动上的ImageView选择源图像的对话框：
- en: '![The code file](img/5396OS_01_11.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![代码文件](img/5396OS_01_11.jpg)'
- en: We will select our Canvas image and click on **OK**. Our Canvas image will appear
    on the screen.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择Canvas图像并点击**确定**。我们的Canvas图像将显示在屏幕上。
- en: 'The following screen shows the image that appears on the screen in the **Design**
    mode:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕显示了在**Design**模式下屏幕上显示的图像：
- en: '![The code file](img/5396OS_01_12.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![代码文件](img/5396OS_01_12.jpg)'
- en: 'We will run the application. The following is what we will get on the emulator
    – our application with the image drawn on an ImageView that uses Canvas:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行应用程序。以下是在模拟器上得到的结果——我们的应用程序在用Canvas绘制的ImageView上显示图像：
- en: '![The code file](img/5396OS_01_13.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![代码文件](img/5396OS_01_13.jpg)'
- en: 'This is something we need to be very careful about: when we are saving image
    files in the `res` folder, we need to rename our image files carefully. Although
    the image filename may not make any difference outside this project, in Eclipse
    the image filename will give you errors if one of the following mistakes is made:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要非常小心的事情：当我们在`res`文件夹中保存图像文件时，需要仔细重命名图像文件。尽管图像文件名在这个项目之外可能没有影响，但在Eclipse中，如果出现以下错误，图像文件名会给你带来错误：
- en: 'Filenames containing spaces; for example, `our canvas.png`:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含空格的文件名；例如，`our canvas.png`：
- en: This will return an error and will not be shown in the Package Explorer pane
    in our project files. Filenames containing special characters other than `_` and
    `.`; for example, `our-canvas(1).png` will also return an error.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回一个错误，并且不会在我们项目文件中的Package Explorer窗格中显示。包含除`_`和`.`以外的特殊字符的文件名也会返回错误，例如`our-canvas(1).png`。
- en: 'The following screenshot displays the error that will be shown:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的截图显示了将会显示的错误：
- en: '![The code file](img/5396OS_01_14.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![代码文件](img/5396OS_01_14.jpg)'
- en: Filenames that don't start with alphabet characters; for example, `886_1_Canvas.png`.
    This will return an error.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不以字母字符开头的文件名；例如，`886_1_Canvas.png`。这将返回一个错误。
- en: The best convention to name image files is to start with alphabet characters;
    numbers can be included after that. Use only `_` and `.` among the special characters;
    for example, `our_canvas_1.png`. This filename will be accepted and we will be
    able to use this image in our application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 命名图像文件的最佳约定是先用字母字符开头；之后可以包含数字。在特殊字符中只使用`_`和`.`；例如，`our_canvas_1.png`。这个文件名会被接受，我们也能在应用中使用这个图像。
- en: 'We have now completed the goal of this chapter, but we need to understand a
    few more things if we don''t want to have any issues with the graphics of our
    application on different screen sizes and resolutions. If we want our application
    to support multiple screens, we need to understand the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了本章的目标，但如果我们不想让应用程序在不同屏幕尺寸和分辨率上的图形出现问题，我们需要了解一些额外的事情。如果我们希望应用程序支持多屏幕，我们需要了解以下内容：
- en: '**Screen size**: This is the physical screen size, normally measured in inches
    diagonally. Android has four groups for all displays: small, normal, large, and
    extra large.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕尺寸**：这是物理屏幕尺寸，通常以对角线英寸为单位测量。Android对所有显示设备分为四组：小、正常、大和超大。'
- en: '**Screen density**: This is the dpi (dots per inch). These are the number of
    pixels on a physical area. This means that a 3-inch high-density screen will have
    more pixels than a 6-inch low-density screen. Lower dpis means low-density screens
    and higher dpis means high-density screens. Android has four groups for densities:
    low, medium, high, and extra high. This is where `ldpi`, `hdpi`, `mdpi`, `xhdpi`
    come in. For more details on screen size and density, follow this link: [http://developer.android.com/guide/practices/screens_support.html](http://developer.android.com/guide/practices/screens_support.html).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕密度**：这是每英寸的点数（dpi）。这是物理区域上的像素数量。这意味着一个3英寸的高密度屏幕将比一个6英寸的低密度屏幕拥有更多的像素。较低的dpi表示低密度屏幕，较高的dpi表示高密度屏幕。Android有四个密度组：低、中、高和超高。这里就涉及到了`ldpi`、`hdpi`、`mdpi`、`xhdpi`。有关屏幕尺寸和密度的更多详细信息，请点击此链接：[http://developer.android.com/guide/practices/screens_support.html](http://developer.android.com/guide/practices/screens_support.html)。'
- en: '**Orientation**: This is the orientation of the screen. This is either portrait
    or landscape. We need to take care of this because different devices operate in
    different modes and orientation can be changed at run time by the user. So, if
    we are only designing for one of them, we have to lock the orientation of the
    screen. Then, even if the user rotates the screen, the graphics of our UI stay
    the same. It is best to design layouts and graphics for both orientations.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕方向**：这是屏幕的方向。它可以是纵向或横向。我们需要注意这一点，因为不同的设备在不同的模式下运行，用户可以在运行时改变方向。因此，如果我们只设计其中一种，我们就必须锁定屏幕的方向。这样，即使用户旋转屏幕，我们UI的图形也会保持不变。最好为两种方向设计布局和图形。'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter we have learned the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了以下内容：
- en: The need to learn about Android Canvas
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Android Canvas的必要性
- en: What Android Canvas is and what it provides us
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Android Canvas以及它为我们提供了什么
- en: Creating a simple and basic application displaying an image on the screen
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的应用程序，在屏幕上显示图像
- en: Understanding important files and sections of our first application
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解我们第一个应用程序的重要文件和部分。
- en: Some additional information about screen sizes, densities, and orientations
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于屏幕尺寸、密度和方向的更多信息
- en: By the end of this chapter the reader will know the basics of working with graphics
    in Android. The reader will be able to create a simple application displaying
    an image on the screen and will have a basic understanding of the different sections
    of the project. He/she will also have gained knowledge about which file to use
    for what purpose and where to find it. The reader will also have gained some basic
    knowledge of screens and densities; thus, while designing and using graphics in
    an application, the reader will use this information to make better decisions
    about designing the user interface of the application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，读者将了解在Android中处理图形的基础知识。读者将能够创建一个简单的应用程序，在屏幕上显示图像，并对项目不同部分有一个基本的了解。他/她还将了解哪些文件用于什么目的以及在哪里找到它们。读者还将获得一些关于屏幕和密度的基本知识；因此，在设计应用程序中的图形时，读者将使用这些信息来更好地决定设计用户界面。
- en: In the next chapter we will discuss threads, their importance, how can they
    be used in drawing in Canvas, and the performance tradeoff our application gets
    while using threads.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论线程，它们的重要性，如何在Canvas中使用它们进行绘图，以及使用线程时应用程序的性能权衡。
