- en: 'Chapter 11. Final Considerations: Application Compilation and Distribution'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章. 最后考虑：应用程序编译和分发
- en: 'This chapter will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将涵盖以下内容：
- en: Generating a code-signing certificate using Flash Professional
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flash Professional 生成代码签名证书
- en: Generating a code-signing certificate using Flash Builder
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flash Builder 生成代码签名证书
- en: Generating a code-signing certificate using FDT
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FDT 生成代码签名证书
- en: Generating a code-signing certificate using the AIR Developer Tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AIR 开发工具生成代码签名证书
- en: Preparing Icon Files for distribution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备图标文件以供分发
- en: Compiling an application using Flash Professional
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flash Professional 编译应用程序
- en: Compiling an application using Flash Builder
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flash Builder 编译应用程序
- en: Compiling an application using FDT
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FDT 编译应用程序
- en: Compiling an application using the AIR Developer Tool
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AIR 开发工具编译应用程序
- en: Submitting an application to the Android Market
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序提交到 Android Market
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When deploying a mobile Flash application (`.swf`) to the Web, the process is
    very similar to what it is on desktop; embed your `.swf` into an HTML container,
    and you are done. Deploying an AIR application to the Android Market, however,
    is quite a different experience. In this chapter, we will discover how to prepare
    an application for distribution to the Android Market, the generation of appropriate
    code signing certificates, and details around the compilation and submission process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当将移动 Flash 应用程序（`.swf`）部署到 Web 上时，这个过程与桌面版非常相似；将你的 `.swf` 嵌入 HTML 容器中，就完成了。然而，将
    AIR 应用程序部署到 Android Market 上则完全不同。在本章中，我们将了解如何准备一个应用程序以分发给 Android Market，生成适当的代码签名证书，以及编译和提交过程的相关细节。
- en: Generating a code-signing certificate using Flash Professional
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flash Professional 生成代码签名证书
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using Flash Professional
    within this recipe.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Market 上分发的应用程序必须使用 25 年有效期的代码签名证书进行数字签名。我们有多种不同的方法来生成 Android 应用程序的代码签名证书。在本食谱中，我们将演示如何使用
    Flash Professional 生成此类证书。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In Flash Professional, perform the following actions to create a self-signed
    digital certificate:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flash Professional 中，执行以下操作以创建自签名数字证书：
- en: With a project open which targets **AIR for Android**, open the **Properties**
    panel and click the little wrench icon beside the **Player selection** box. This
    will open the **AIR for Android Settings** dialog:![How to do it...](img/1420_11_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个针对 **AIR for Android** 的项目，打开 **属性** 面板，并点击 **播放器选择** 框旁边的扳手图标。这将打开 **AIR
    for Android 设置** 对话框：![如何操作...](img/1420_11_01.jpg)
- en: Within the **AIR for Android Settings** dialog, click the **Create** button
    to open the **Create Self-Signed Digital Certificate** dialog window:![How to
    do it...](img/1420_11_02.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **AIR for Android 设置** 对话框中，点击 **创建** 按钮以打开 **创建自签名数字证书** 对话窗口：![如何操作...](img/1420_11_02.jpg)
- en: Now that the **Create Self-Signed Digital Certificate** dialog is before us,
    we will enter the required information and choose a name and location for the
    certificate. When everything has been entered properly, we will click **OK** to
    have Flash Professional generate the certificate. Be sure to enter 25 years in
    the **Validity period** input for Android:![How to do it...](img/1420_11_03.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 **创建自签名数字证书** 对话框出现在我们面前时，我们将输入所需的信息并为证书选择名称和位置。正确输入所有信息后，我们将点击 **确定** 以便
    Flash Professional 生成证书。确保在 **有效期** 输入框中输入 25 年，以适用于 Android：![如何操作...](img/1420_11_03.jpg)
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. Flash Professional
    provides a simple way to generate the appropriate certificate type and apply it
    to our applications for distribution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成有效的数字代码签名证书，我们可以正确地为提交到 Android Market 的 Android 应用程序签名。Flash Professional
    提供了一个简单的方法来生成适当的证书类型并将其应用于我们的分发应用程序。
- en: Generating a code-signing certificate using Flash Builder
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flash Builder 生成代码签名证书
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using Flash Builder within
    this recipe.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Market 上分发的应用程序必须使用 25 年有效期的代码签名证书进行数字签名。我们有多种不同的方法可以为 Android 应用程序生成代码签名证书。在本食谱中，我们将演示如何使用
    Flash Builder 生成此类证书。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In Flash Builder, perform the following actions to create a self-signed digital
    certificate:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flash Builder 中，执行以下操作以创建自签名数字证书：
- en: With a mobile project selected in the **Package Explorer**, enter the **File**
    menu and select **Properties**. The **Properties** dialog will appear for this
    project.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**包资源管理器**中选择移动项目，进入**文件**菜单并选择**属性**。将为此项目显示**属性**对话框。
- en: Within the **Properties** dialog, scroll down the **Flex Build Packaging** or
    **ActionScript Build Packaging** item (depending upon the type of project selected)
    and choose **Google Android**. With the **Digital Signature** tab selected, click
    the **Create** button to open the **Create Self-Signed Digital Certificate** dialog:![How
    to do it...](img/1420_11_04.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**对话框中，根据所选项目的类型，向下滚动至**Flex 构建打包**或**ActionScript 构建打包**项，并选择**Google
    Android**。选择**数字签名**标签后，点击**创建**按钮以打开**创建自签名数字证书**对话框：![如何操作...](img/1420_11_04.jpg)
- en: All that is now needed is to enter the required information and choose a name
    and location for the certificate. When everything has been entered properly, we
    will click **OK** to have Flash Builder generate the certificate:![How to do it...](img/1420_11_05.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在需要做的就是输入所需信息并为证书选择名称和位置。正确输入所有信息后，我们将点击**确定**，让 Flash Builder 生成证书：![如何操作...](img/1420_11_05.jpg)
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. Flash Professional
    provides a simple way to generate the appropriate certificate type and apply it
    to our applications for distribution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成有效的数字代码签名证书，我们可以正确地为提交到 Android Market 的 Android 应用程序签名。Flash Professional
    提供了一种简单的方法来生成适当的证书类型，并将其应用于我们分发的应用程序。
- en: Generating a code-signing certificate using FDT
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FDT 生成代码签名证书
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using PowerFlasher FDT
    within this recipe.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Market 上分发的应用程序必须使用 25 年有效期的代码签名证书进行数字签名。我们有多种不同的方法可以为 Android 应用程序生成代码签名证书。在本食谱中，我们将演示如何使用
    PowerFlasher FDT 生成此类证书。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In FDT, perform the following actions to create a self-signed digital certificate:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FDT 中，执行以下操作以创建自签名数字证书：
- en: Click upon the small arrow next to the **Run** icon in the top menu and choose
    **Run Configurations** from the sub menu that appears. This will open the **Run
    Configurations** dialog:![How to do it...](img/1420_11_07.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部菜单中**运行**图标旁边的小箭头，并从出现的子菜单中选择**运行配置**。这将打开**运行配置**对话框：![如何操作...](img/1420_11_07.jpg)
- en: With the **Run Configurations** dialog window now open, double-click the **FDT
    AIR Application Release** menu item to create a new configuration. Choose the
    **Certificate** tab and to enter the required information, choosing a name and
    location for the certificate. Once everything has been entered properly, we will
    click **Create Certificate** to have FDT generate the certificate for us:![How
    to do it...](img/1420_11_08.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**运行配置**对话框窗口，双击**FDT AIR 应用程序发布**菜单项以创建新配置。选择**证书**标签，并输入所需信息，为证书选择名称和位置。正确输入所有信息后，我们将点击**创建证书**，让
    FDT 为我们生成证书：![如何操作...](img/1420_11_08.jpg)
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. FDT provides
    a simple way to generate the appropriate certificate type and apply it to our
    applications for distribution.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成有效的数字代码签名证书，我们可以正确地为提交到 Android Market 的 Android 应用程序签名。FDT 提供了一种简单的方法来生成适当的证书类型，并将其应用于我们分发的应用程序。
- en: Generating a code-signing certificate using the AIR Developer Tool
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AIR 开发者工具生成代码签名证书
- en: Applications distributed on the Android Market are required to have been digitally
    signed with a 25 year code signing certificate. There are a number of different
    ways we can go about generating a code signing certificate for Android applications.
    We will demonstrate how to generate such a certificate using ADT command line
    tool within this recipe.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Android Market 上发布的应用程序必须使用 25 年代码签名证书进行数字签名。我们有多种方法可以生成 Android 应用程序的代码签名证书。在本食谱中，我们将演示如何使用
    ADT 命令行工具生成此类证书。
- en: Getting ready…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中…
- en: 'For steps on configuring ADT within your particular environment, take a look
    at [Chapter 1](ch01.html "Chapter 1. Getting Ready to Work with Android: Development
    Environment and Project Setup"), *Getting Ready to Work with Android: Development
    Environment and Project Setup.*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在特定环境中配置 ADT，请查看[第 1 章](ch01.html "第 1 章. 准备使用 Android：开发环境和项目设置")，*准备使用
    Android：开发环境和项目设置。*
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Using the ADT command line tool, perform the following actions to create a
    self-signed digital certificate:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ADT 命令行工具，执行以下操作以创建自签名的数字证书：
- en: 'For this example, we will assume the following:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此示例，我们将假设以下情况：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open a command prompt or terminal (depending upon the operating system) and
    type in the command string to generate our certificate:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符或终端（取决于操作系统），并输入生成我们证书的命令字符串：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The ADT utility will now process the command and complete the certificate generation
    process. If there is a problem with our command, ADT will print out error messages
    here, letting us know something went wrong:![How to do it...](img/1420_11_09.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ADT 实用程序现在将处理命令并完成证书生成过程。如果我们的命令有问题，ADT 将在这里打印错误信息，让我们知道出现了错误：![如何操作...](img/1420_11_09.jpg)
- en: We can now browse to the location specified within the command string to locate
    our newly created certificate and can use this to sign our AIR for Android applications:![How
    to do it...](img/1420_11_10.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以浏览到命令字符串中指定的位置来找到我们新创建的证书，并使用它来签署我们的 AIR for Android 应用程序：![如何操作...](img/1420_11_10.jpg)
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By generating a valid digital code signing certificate, we are able to correctly
    sign our Android application for submission to the Android Market. Using the ADT
    tools bundled with the AIR SDK, we can generate the appropriate certificate type
    for distribution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成有效的数字代码签名证书，我们可以正确签署我们的 Android 应用程序以便提交到 Android Market。使用与 AIR SDK 捆绑的
    ADT 工具，我们可以生成适合分发的适当证书类型。
- en: Preparing icon files for distribution
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备分发图标文件
- en: 'When we compile an application for distribution in the Android Market, we must
    include a set of standard icon images along with our application. The locations
    for these icons are defined within our AIR application descriptor file. Android
    expects a set of three icons: 36x36, 48x48, and 72x72\. Each icon is used for
    a different screen density and should all be included as standard PNG files.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为在 Android Market 上发布的应用程序编译应用程序时，我们必须包括一组标准图标图像以及我们的应用程序。这些图标的位置在我们的 AIR
    应用程序描述符文件中定义。Android 期望一组三个图标：36x36、48x48 和 72x72。每个图标用于不同的屏幕密度，并且都应该包括为标准的 PNG
    文件。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Depending on which tool is being used, this task can be approached in different
    ways. We will demonstrate how to include these icons within an application with
    Flash Professional CS5.5 and through direct modification of the AIR application
    descriptor file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的工具不同，这项任务可以有不同的处理方式。我们将演示如何使用 Flash Professional CS5.5 在应用程序中包含这些图标，以及如何通过直接修改
    AIR 应用程序描述符文件来实现。
- en: Using Flash Professional CS5.5
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Flash Professional CS5.5
- en: With a project open which targets **AIR for Android**, open the **Properties**
    panel and click the little wrench icon beside the **Player selection** box. This
    will open the **AIR for Android Settings** dialog:![Using Flash Professional CS5.5](img/1420_11_11.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个针对**AIR for Android**的项目，打开**属性**面板，点击**播放器选择**框旁边的扳手图标。这将打开**AIR for Android
    设置**对话框：![使用 Flash Professional CS5.5](img/1420_11_11.jpg)
- en: Within the **AIR for Android Settings** dialog, click the **Icon** tab. To specify
    specific icons for our project, we simply need to select each icon entry in the
    list and to browse to locate a file to be used for each one through use of the
    folder and magnifying glass icon:![Using Flash Professional CS5.5](img/1420_11_12.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **AIR for Android 设置** 对话框中，点击 **图标** 选项卡。要为我们的项目指定特定图标，我们只需在列表中选择每个图标条目，并通过使用文件夹和放大镜图标浏览来定位每个图标要使用的文件：
- en: Direct modification of the AIR descriptor file
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接修改 AIR 描述符文件
- en: Locate the AIR descriptor file in your project. It is normally named something
    like `{MyProject}-app.xml` and resides at the project root.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目中找到 AIR 描述符文件。它通常命名为类似 `{MyProject}-app.xml` 的名称，并位于项目根目录下。
- en: Browse the file for a node named `<icon>within` this document. This node contains
    many default settings dealing with the visual aspects of our application window.
    If it has been commented out, we must uncomment it before proceeding.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本文档中浏览名为`<icon>`的节点。此节点包含许多与我们的应用程序窗口视觉方面相关的默认设置。如果它被注释掉了，我们必须在继续之前取消注释。
- en: 'We now must now make sure that the following three child nodes exist within
    the `<icon>` node. Be sure that the paths to our icon files are correct. If they
    are not correct, the compiler will let us know once we attempt to compile this
    application:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在必须确保在`<icon>`节点内存在以下三个子节点。确保我们的图标文件路径正确。如果它们不正确，在我们尝试编译此应用程序时编译器会告知我们：
- en: '[PRE2]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As an example, here is a set of three icons that are valid for use in an Android
    application, along with their pixel measurements:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是适用于 Android 应用程序的一组三个图标及其像素测量值：
- en: '![Direct modification of the AIR descriptor file](img/1420_11_13.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![直接修改 AIR 描述符文件](img/1420_11_13.jpg)'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Including a set of icons within an Android application package is essential
    when distributing the application through the Android Market. It also adds an
    easily recognizable visual cue for the user once the application is installed
    upon a device. Take some time to come up with a set of icons that really reflect
    the application they will represent.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 应用程序包中包含一组图标对于通过 Android Market 分发应用程序至关重要。它还能在应用程序安装到设备上后为用户提供一个容易识别的视觉提示。花点时间设计一组真正能反映应用程序代表的图标。
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If the application is to be published onto the Android Market, there are also
    a variety of other images that we will need to produce to properly brand our application.
    Check the Android Market for details on what images are currently required at
    [https://market.android.com/](http://https://market.android.com/).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序要发布到 Android Market，我们还需要制作多种其他图像来正确地为我们的应用程序品牌。查看 Android Market 以了解当前需要哪些图像的详细信息，请访问[https://market.android.com/](http://https://market.android.com/)。
- en: Compiling an application using Flash Professional
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flash Professional 编译应用程序
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application to the Android Market or some other channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will use the tools available within Flash Professional to compile
    and package our application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目编译为 Android 发布版本 `.apk` 文件是在将应用程序分发到 Android Market 或其他渠道之前的最后一步。根据使用的工具不同，有许多方法可以做到这一点。在本食谱中，我们将使用
    Flash Professional 中的工具来编译和打包我们的应用程序。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To compile an `.apk` from Flash Professional, we will take the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Flash Professional 编译 `.apk`，我们将采取以下步骤：
- en: With a project open which targets **AIR for Android**, open the **Properties**
    panel and click the **Publish Settings** button. This will open the **Publish
    Settings** dialog:![How to do it...](img/1420_11_15.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开针对 **AIR for Android** 的项目，打开 **属性** 面板并点击 **发布设置** 按钮。这将打开 **发布设置** 对话框：
- en: We can look over our settings here and even simply click **Publish** if we know
    for certain everything is configured appropriately. To verify all of the settings
    are in place to publish to Android, click the little wrench icon for our **Player
    selection** box, which should be set to **AIR for Android**. This will provide
    access to the **AIR for Android Settings** dialog:![How to do it...](img/1420_11_16.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在这里检查我们的设置，如果我们确定一切配置正确，甚至可以直接点击**发布**。要验证所有设置是否都已就绪以发布到Android，请点击我们的**播放器选择**框的小扳手图标，它应该设置为**适用于Android的AIR**。这将提供对**适用于Android的AIR设置**对话框的访问：![如何操作...](img/1420_11_16.jpg)
- en: With the **AIR for Android Settings** dialog now open, we can go about verifying
    our **specific configuration** options before deciding to publish. The **General**
    tab contains a number of important inputs including the path to the generated
    `.apk` file, the application name, version, ID, and other required configuration
    settings. We can also choose to include files other than the compiled `.swf` and
    AIR descriptor file, such as external image assets. The **Icons** tab allows us
    to include icon files with a basic GUI, and the **Permissions** tab will allow
    us to set application permissions specific to Android.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**适用于Android的AIR设置**对话框后，我们可以验证我们的**特定配置**选项，然后再决定发布。**常规**标签包含许多重要输入，包括生成的`.apk`文件的路径、应用程序名称、版本、ID和其他必需的配置设置。我们还可以选择包含除了编译的`.swf`和AIR描述文件之外的其他文件，例如外部图像资源。**图标**标签允许我们使用基本的GUI包含图标文件，而**权限**标签将允许我们设置特定于Android的应用程序权限。
- en: Note
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These settings all modify the application descriptor file, which in turn generates
    the Android manifest document. We can think of these settings as a GUI for these
    files.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些设置都会修改应用程序描述文件，进而生成Android清单文档。我们可以将这些设置视为这些文件的图形用户界面。
- en: As a final step, click on the **Deployment** tab:![How to do it...](img/1420_11_17.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后一步，点击**部署**标签：![如何操作...](img/1420_11_17.jpg)
- en: Within the **Deployment** tab exists a setting for deployment type and the chance
    to sign our application with a self-signed certificate. This is very important
    because the Android Market will not accept unsigned applications or applications
    which to not fulfill the requirements set for by Android Market terms.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**部署**标签中存在一个部署类型设置，以及使用自签名证书为应用程序签名的机会。这非常重要，因为Android市场不接受未签名的应用程序或不符合Android市场条款设置要求的应用程序。
- en: Be sure to provide both App name, used to identify the application by a user
    once installed upon a device, and a unique App ID. The `App ID` is very important,
    as this is the primary identifier for your application within the Android Market.
    It must be unique in order for application updates to function correctly and it
    is recommended that developers take special care to use reverse domain notation
    to retain this uniqueness.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一定要提供应用名称，用于用户在设备上安装后识别应用程序，以及一个唯一的应用ID。`App ID`非常重要，因为这是Android Market中应用程序的主要标识符。为了使应用程序更新正常工作，它必须是唯一的，建议开发人员特别小心地使用反向域名表示法以保持这种唯一性。
- en: 'We will need to be sure that the Get AIR runtime from selection indicates the
    particular distribution market we are targeting. For the general Android Market,
    we choose Google Android Market. This dialog also provides us with the option
    of compiling an application build for different purposes through the Android deployment
    type settings:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要确保从选择获取AIR运行时的选项指示我们正在定位的具体分发市场。对于一般的Android市场，我们选择谷歌Android市场。此对话框还通过Android部署类型设置为我们提供了编译用于不同目的的应用程序版本的选择：
- en: '**Device release:** This is the option we will need to select when we want
    to distribute our application through the Android Market'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备发布：**当我们想通过Android市场分发我们的应用程序时，需要选择的选项'
- en: '**Emulator release:** Generates a release compatible with the Android SDK emulator
    and the emulator build of the AIR runtime'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟器发布：**生成与Android SDK模拟器和AIR运行时的模拟器版本兼容的发布版本'
- en: '**Debug:** This option generates a release specifically for debugging the application'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试：**此选项生成专门用于调试应用程序的发布版本'
- en: Once we are satisfied with all of our configuration settings, we can exit back
    out to the **Publish Settings** dialog and hit **Publish**, or simply click the
    **Publish** button here. We can also publish using traditional methods available
    in Flash Professional, so long as we've previously gone through these configuration
    steps.![How to do it...](img/1420_11_18.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们对所有配置设置感到满意，我们可以退出到**发布设置**对话框并点击**发布**，或者直接在此处点击**发布**按钮。只要我们之前已经完成这些配置步骤，我们也可以使用
    Flash Professional 中提供的传统发布方法。![如何操作...](img/1420_11_18.jpg)
- en: We now have a fully compiled, validly signed `.apk` file ready for distribution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个完全编译、有效签名的`.apk`文件，准备进行分发。
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The configuration settings we change through the Flash Professional GUI dialogs
    are actually modifying the AIR descriptor file behind-the-scenes. Once we choose
    to publish our application, Flash Professional will use this file to compile and
    package everything into a valid `.apk` ready for distribution on the Android Market.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 Flash Professional GUI 对话框更改的配置设置实际上是在幕后修改 AIR 描述符文件。一旦我们选择发布应用程序，Flash
    Professional 将使用此文件来编译并将所有内容打包成一个有效的`.apk`文件，以便在 Android Market 上分发。
- en: Compiling an application using Flash Builder
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flash Builder 编译应用程序
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application over the Android Market or some other channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will use the tools available within Flash Builder to compile and
    package our application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目编译为 Android 发布版本`.apk`文件是分发应用程序到 Android Market 或其他渠道之前的最后一步。根据使用的工具不同，有许多方法可以做到这一点。在本教程中，我们将使用
    Flash Builder 中的工具来编译和打包我们的应用程序。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To compile an `.apk` from Flash Builder, take the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Flash Builder 编译`.apk`，请执行以下步骤：
- en: Within a mobile ActionScript or Flex project, navigate to the Flash Builder
    menu and choose the **Project** menu item. This will reveal a submenu with a number
    of options. From this menu, choose **Export Release Build** opening the **Export
    Release Build** dialog window:![How to do it...](img/1420_11_19.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在移动 ActionScript 或 Flex 项目中，导航到 Flash Builder 菜单，选择**项目**菜单项。这将显示一个包含多个选项的子菜单。从该菜单中，选择**导出发布构建**，打开**导出发布构建**对话框窗口：![如何操作...](img/1420_11_19.jpg)
- en: Within this window, we are given the option to specify the project and specific
    application within that project we wish to perform a release build upon, decide
    which platforms to target, specify the path, and filename of our build, and choose
    what sort of application to export as. For Android, we will choose **Signed packages**
    for each target platform. So long as we have selected **Google Android** as a
    target platform, this will open the **Packaging** Settings dialog once we click
    **Next:**![How to do it...](img/1420_11_20.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此窗口中，我们可以选择要执行发布构建的项目以及该项目中的具体应用程序，决定要定位的平台，指定构建的路径和文件名，以及选择要导出哪种类型的应用程序。对于
    Android，我们将在每个目标平台上选择**签名包**。只要我们选择了**Google Android**作为目标平台，点击**下一步**后，这将打开**打包**设置对话框：![如何操作...](img/1420_11_20.jpg)
- en: Now, we are able to configure some advanced properties for the build. Click
    on the **Package Contents** tab to verify that all required files are to be included
    in the build. If we want to package additional files, or even exclude certain
    assets, we can do so through use of the checkboxes aside each item. Click the
    **Digital Signature** tab to continue:![How to do it...](img/1420_11_21.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以为构建配置一些高级属性。点击**包内容**标签，以验证构建中是否包含所有必需的文件。如果我们想打包其他文件，甚至排除某些资源，我们可以通过使用每个项目旁边的复选框来完成。点击**数字签名**标签以继续：![如何操作...](img/1420_11_21.jpg)
- en: The final task will be to choose a signing certificate in order to digitally
    sign our application for distribution on the Android Market. Select a certificate
    and type in the associated password. Clicking **Finish** will perform the build
    and save a compiled `.apk` into the location we had previously chosen. If we wish,
    we can include external files through the **Package Contents** tab and choose
    to deploy to any connected devices through the **Deployment** tab:![How to do
    it...](img/1420_11_22.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的任务是选择一个签名证书，以便在Android Market上发布我们的应用程序时进行数字签名。选择一个证书并输入关联的密码。点击**完成**将执行构建，并将编译的`.apk`保存到我们之前选择的位置。如果我们愿意，可以通过**包内容**标签包含外部文件，并通过**部署**标签选择部署到任何连接的设备：![如何操作...](img/1420_11_22.jpg)
- en: We now have a fully compiled, validly signed `.apk` file ready for distribution.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有一个完全编译、有效签名的`.apk`文件，准备进行分发。
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Flash Builder provides the concept of a target platform when exporting the release
    build of a project. If we choose Google Android for a target platform, we are
    given additional options specific to Android that we can modify based on the needs
    of our particular project. The additional dialog elements allow us to compile
    and package everything into a valid `.apk` ready for distribution on the Android
    Market.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Flash Builder在导出项目的发布版本时提供了目标平台的概念。如果我们选择Google Android作为目标平台，我们会得到一些特定于Android的附加选项，我们可以根据特定项目的需求进行修改。额外的对话框元素允许我们将所有内容编译并打包成一个有效的`.apk`，准备在Android
    Market上发布。
- en: Compiling an application when using FDT
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FDT时编译应用程序
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application over the Android Market or some alternate channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will discuss three popular methods available to us when using
    Powerflasher FDT to compile and package our application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目编译为Android发布版本的`.apk`文件是在Android Market或其他渠道发布应用程序之前的最后一步。根据使用的工具不同，有许多方法可以做到这一点。在这个食谱中，我们将讨论在使用Powerflasher
    FDT编译和打包应用程序时可用的三种流行方法。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As of this writing, FDT does not support working with AIR for Android in a direct
    way. There are, however, three main methods in which FDT users can compile their
    projects for Android distribution.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，FDT不支持直接与Android的AIR一起工作。然而，FDT用户可以通过三种主要方法编译他们的项目以进行Android分发。
- en: Using a mobile project template
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用移动项目模板
- en: The FDT community has produced a number of mobile project templates that support
    AIR for Android. These templates work with the new template system used by all
    FDT projects and add varying levels of functionality to the workflow. Most of
    these also include ANT scripts, which compile an `.apk` using the AIR Developer
    Tool.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: FDT社区制作了许多支持Android的AIR移动项目模板。这些模板适用于所有FDT项目使用的新模板系统，并为工作流程添加不同级别的功能。其中大多数还包括ANT脚本，使用AIR开发者工具编译`.apk`。
- en: Using ANT
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ANT
- en: This is by far the most flexible method of compiling a project for Android,
    as it is actually IDE-agnostic and can be used by anyone. ANT comes packaged along
    with a standard installation of FDT and many starter scripts deploying AIR for
    Android can be found online through the community. To get started using ANT with
    FDT, have a look at [http://fdt.powerflasher.com/docs/FDT_Ant_Tasks](http://fdt.powerflasher.com/docs/FDT_Ant_Tasks).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，这是编译Android项目最灵活的方法，因为它实际上与IDE无关，任何人都可以使用。ANT随FDT的标准安装一起打包，网上社区有许多启动脚本可以部署Android的AIR。若要开始使用FDT中的ANT，请查看[http://fdt.powerflasher.com/docs/FDT_Ant_Tasks](http://fdt.powerflasher.com/docs/FDT_Ant_Tasks)。
- en: Using ADT through CLI
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过CLI使用ADT
- en: The most basic method is to simply develop a mobile project using FDT and then
    package it as an `.apk` using the AIR Developer Tool through command line interface.
    The next recipe actually details how this is accomplished.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的方法是直接使用FDT开发一个移动项目，然后通过命令行界面使用AIR开发者工具将其打包成`.apk`。下一个食谱将详细介绍如何实现这一过程。
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Whichever method is chosen, the goal is the same—compile and package everything
    into a valid `.apk` ready for distribution on the Android Market. One of the strengths
    of FDT is that it does not restrict developers to do things in one specific way.
    When producing release builds for Android, we have many choices with which to
    do so.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 无论选择哪种方法，目标都是相同的——编译和打包所有内容到一个有效的 `.apk`，准备在 Android Market 上分发。FDT 的一个优点是它不限制开发者只能用一种特定的方式做事。在为
    Android 生成发布版本时，我们有多种选择。
- en: Compiling an application using the AIR Developer Tool
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AIR 开发者工具编译应用程序
- en: Compiling a project to an Android release version `.apk` file is the final step
    before distributing an application over the Android Market or some other channel.
    There are many methods of doing this depending upon what tool is being used. In
    this recipe, we will use the **AIR Developer Tool** (**ADT**) command line utility
    to compile and package our application.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目编译为 Android 发布版本 `.apk` 文件是分发应用程序到 Android Market 或其他渠道之前的最后一步。根据使用的工具不同，有许多方法可以做到这一点。在本教程中，我们将使用
    **AIR 开发者工具** (**ADT**) 命令行实用程序来编译和打包我们的应用程序。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To compile an `.apk` from a mobile AIR project using the ADT command line tools,
    we will take the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 ADT 命令行工具从移动 AIR 项目编译 `.apk`，我们将执行以下步骤：
- en: 'For this example, we will assume the following:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此示例中，我们将假定以下内容：
- en: '**Certificate:** android.p12'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书：** `android.p12`'
- en: '**Desired APK:** `mobileAIR.apk`'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**期望的 APK：** `mobileAIR.apk`'
- en: '**AIR Descriptor:** `mobileAIR\src\mobileAIR-app.xml`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AIR 描述符：** `mobileAIR\src\mobileAIR-app.xml`'
- en: '**SWF File:** `mobileAIR\src\mobileAIR.swf`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SWF 文件：** `mobileAIR\src\mobileAIR.swf`'
- en: 'Open a command prompt or terminal (depending upon the operating system) and
    type in the command string to generate our certificate. In this case, we will
    set the target type to `.apk` for a release build. We could also set this to apk-debug
    for a debug build, or apk-emulator for installation on an emulator:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符或终端（取决于操作系统），输入命令字符串以生成我们的证书。在这种情况下，我们将目标类型设置为 `.apk` 以进行发布构建。我们也可以将其设置为
    apk-debug 以进行调试构建，或者设置为 apk-emulator 以在模拟器上安装：
- en: '[PRE3]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Any other files such as assets or icons can be included after the .swf entry,
    delimited by whitespaces:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他文件，如资源或图标，可以在 .swf 条目之后包含，用空白分隔：
- en: '[PRE4]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The ADT utility will now process the command and complete the `.apk` compilation
    process. If there is a problem with our command, ADT will print out error messages
    here, letting us know something went wrong. Normally, if something does go wrong,
    it will be a problem with the AIR descriptor file or an incorrect file path to
    an expected input file.![How to do it...](img/1420_11_23.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在 ADT 实用程序将处理该命令并完成 `.apk` 编译过程。如果我们的命令有问题，ADT 将在这里打印错误信息，让我们知道出了问题。通常，如果出现问题，可能是
    AIR 描述符文件有问题，或者预期输入文件的路径不正确。![如何操作...](img/1420_11_23.jpg)
- en: We can now browse to the result location specified within the command string
    to locate our newly created `.apk` file, which can be installed directly upon
    an Android device or distributed through the Android Market:![How to do it...](img/1420_11_24.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以浏览到命令字符串中指定的结果位置，找到我们新创建的 `.apk` 文件，该文件可以直接安装在 Android 设备上，也可以通过 Android
    Market 进行分发：![如何操作...](img/1420_11_24.jpg)
- en: We now have a fully compiled, validly signed `.apk` file ready for distribution.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有一个完全编译、有效签名的 `.apk` 文件，准备进行分发。
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Assuming we have configured our application properly, ADT will compile, sign,
    and package all of our project files into an `.apk` for us. ADT has many different
    utilities and configuration options available to perform many actions upon a project.
    Have a look at [http://help.adobe.com/en_US/air/build/](http://help.adobe.com/en_US/air/build/)
    and click **AIR Developer Tool** (**ADT**) in the menu for full documentation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经正确配置了我们的应用程序，ADT 将为我们编译、签名并打包所有的项目文件到一个 `.apk` 中。ADT 有许多不同的实用程序和配置选项，可以对项目执行许多操作。请查看
    [http://help.adobe.com/en_US/air/build/](http://help.adobe.com/en_US/air/build/)
    并在菜单中选择 **AIR 开发者工具** (**ADT**) 以获取完整文档。
- en: See also…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'For steps on configuring ADT within your particular environment, take a look
    at [Chapter 1](ch01.html "Chapter 1. Getting Ready to Work with Android: Development
    Environment and Project Setup"), *Getting Ready to Work with Android: Development
    Environment and Project Setup.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在特定环境中配置 ADT，请查看[第1章](ch01.html "第1章. 准备使用Android：开发环境和项目设置")，*准备使用Android：开发环境和项目设置*。
- en: Submitting an application to the Android Market
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序提交到 Android 市场
- en: Google makes it very easy to register as an Android Developer and publish applications
    to the Android Market. This recipe will detail the steps necessary to do so, after
    compiling a completed `.apk`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Google使注册成为Android开发者和在Android市场上发布应用程序变得非常容易。这个指南将详细说明在编译完成`.apk`之后进行这些操作的必要步骤。
- en: Getting ready...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪...
- en: Before a developer is able to submit anything to the Android Market, a developer
    account must be created. The process can be completed in minutes, is simple, and
    inexpensive.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者能够向Android市场提交任何内容之前，必须创建一个开发者账户。这个过程可以在几分钟内完成，既简单又实惠。
- en: 'To register as an Android developer:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册成为Android开发者：
- en: Use a web browser and go to [http://market.android.com/publish/signup](http://market.android.com/publish/signup).
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器，前往 [http://market.android.com/publish/signup](http://market.android.com/publish/signup)。
- en: Sign in with your Google Account (or create a new account).
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的Google账户登录（或创建新账户）。
- en: Complete the registration form and pay the one time setup fee of $25.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写注册表单并支付一次性的25美元设置费用。
- en: Congratulations on becoming an Android Developer!
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜您成为Android开发者！
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 1 Upload a compiled and signed `.apk` file to the Android Market for worldwide
    distribution.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1 将编译并签名的`.apk`文件上传到Android市场，以供全球分发。
- en: Sign in to the Android Market at [https://market.android.com/publish/](http://https://market.android.com/publish/)
    using your Android Developer credentials.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的Android开发者凭据在[https://market.android.com/publish/](http://https://market.android.com/publish/)登录Android市场。
- en: Click on the button in the lower right that says **Upload Application:**![How
    to do it...](img/1420_11_25.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右下角标有**上传应用程序：**的按钮![如何操作...](img/1420_11_25.jpg)
- en: We are now presented with a rather lengthy form which allows us to include all
    sorts of information about our application. We can categorize our application,
    add descriptive and promotional text, update release notes, and choose whether
    we will charge users for the application or allow free downloads. If we decide
    to require payment, we must first establish a Google Merchant account from the
    provided link on this page.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在展现给我们的是一个相当长的表单，它允许我们包含有关我们应用程序的各种信息。我们可以对应用程序进行分类，添加描述性和促销文本，更新发行说明，并选择是否向用户收费或允许免费下载。如果我们决定要求付费，我们必须首先通过此页面上提供的链接建立Google商家账户。
- en: In addition to textual entries and other input choices, we also have the opportunity
    to upload a wide variety of images which will represent our application in the
    Android Market. Specific image attributes are detailed within this form:![How
    to do it...](img/1420_11_26.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了文本条目和其他输入选择外，我们还有机会上传各种图片，这些图片将代表我们的应用程序在Android市场中的形象。具体的图片属性在此表单中有详细说明：![如何操作...](img/1420_11_26.jpg)
- en: At the bottom of this page are three buttons. We can click **Save** to save
    our application profile for later editing. Clicking the **Delete** button will
    allow us to remove an application from the Android Market completely. To publish
    our application, we will click the **Publish** button.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页底部有三个按钮。我们可以点击**保存**以保存我们的应用程序资料以供以后编辑。点击**删除**按钮，将允许我们从Android市场完全移除一个应用程序。要发布我们的应用程序，我们将点击**发布**按钮。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Once you publish an application, this button will read as **Unpublish**, and
    the **Delete** button will no longer appear as an option if users have installed
    the application.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发布应用程序，此按钮将显示为**取消发布**，如果用户已安装应用程序，则**删除**按钮将不再作为选项出现。
- en: '![How to do it...](img/1420_11_27.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1420_11_27.jpg)'
- en: The application has now been published to the Android Market and is available
    to millions of users worldwide.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在已发布到Android市场，可供全球数百万用户使用。
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Uploading and publishing an application to the Android Market will allow users
    to download and install the application. We have full control over the application
    description, versioning information, and associated image assets. We are also
    able to track rating and comments from the developer area, as well as manage a
    merchant account, if necessary to our application. Publication to the Android
    Market is immediate. There is no approval and disapproval process like there is
    with other application marketplaces.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序上传并发布到Android市场，将允许用户下载并安装应用程序。我们对应用程序描述、版本信息以及相关图像资产拥有完全控制权。我们还能够从开发者区域跟踪评分和评论，并在必要时管理商家账户。发布到Android市场是即时的。没有像其他应用程序市场那样的审批和拒绝过程。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Updating an application to a new version is much simpler than setting up an
    entirely new application:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序更新到新版本比设置一个全新的应用程序简单得多：
- en: Once in the Android Market, click the name of an existing application. This
    will allow you to edit any of the images or text associated with it.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入安卓市场，点击现有应用程序的名称。这将允许你编辑与其相关的任何图片或文本。
- en: To actually publish a new version of the application, we must click the link
    `[Upload Upgrade]`. This will cause a new set of form controls to appear.![There's
    more...](img/1420_11_28.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实际发布应用程序的新版本，我们必须点击`[上传升级]`的链接。这将导致出现一组新的表单控件。![还有更多...](img/1420_11_28.jpg)
- en: Click **Choose File** and browse for the new `.apk` file. Now click **Upload**
    to submit the file to Google servers.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择文件**并浏览新的`.apk`文件。现在点击**上传**将文件提交到谷歌服务器。
- en: The new file will be parsed for versioning information and to verify the contents
    are valid. Any changes to the version number, application icon, requested permissions,
    and so forth will be reflected in the draft.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新文件将被解析以获取版本信息并验证内容是否有效。对版本号、应用图标、请求的权限等所做的任何更改都将在草稿中反映出来。
- en: The version number defined within the application descriptor file must be of
    a higher version than that of the previously submitted build in order to have
    a valid upgrade. We can also perform additional edits to the general application
    information on this page, if necessary. Clicking **Publish** at the bottom of
    the page will make the new version immediately available in the Android Market.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用描述文件中定义的版本号必须高于之前提交的版本，以便进行有效的升级。如果需要，我们还可以在此页面对一般应用信息进行额外编辑。点击页面底部的**发布**，新版本将立即在安卓市场可用。
