- en: Sharing Our Custom View
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享我们的自定义视图
- en: We've been building our custom view, or many of them, in these last chapters.
    We've seen how to interact with them, how to draw 2D and 3D primitives, and we
    want somebody else to be able to use it. That is a great idea! It might be for
    ourselves, we might reuse it in a future project, or it might be a project by
    one of our colleagues. If we aim higher, it might be a project by the Android
    community.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经构建了我们的自定义视图，或者其中许多。我们已经了解了如何与它们互动，如何绘制2D和3D原始图形，现在我们希望其他人也能使用它。这是一个很好的想法！这可能是为了我们自己，我们可能会在未来的项目中重用，或者可能是我们同事的一个项目。如果我们目标更高，它可能是Android社区的一个项目。
- en: One of the things that makes the Android community awesome is that there are
    lots of open source libraries. All these contributions by developers have helped
    many other developers get started in Android development, learn to get a deeper
    understanding of some concepts, or be able to build their applications in the
    first place.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让Android社区变得出色的一件事是有大量的开源库。开发者们的所有这些贡献帮助许多其他开发者开始了Android开发，深入理解某些概念，或者能够首先构建他们的应用程序。
- en: Firstly, publishing your custom view or, for instance, an Android library, is
    one of the methods that contributes to this amazing community. Secondly, by doing
    so, it's a great way to advertise yourself, show the openness of your employer,
    and also attract talent to your company.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，发布你的自定义视图，或者一个Android库，是贡献给这个惊人社区的方法之一。其次，这样做是宣传自己、展示雇主的开放性以及吸引公司人才的好方法。
- en: In this chapter, we'll see what we should take into consideration if we want
    to share our custom view and how to do it. We'll also put into practice some of
    the important recommendations we've given in the previous chapters. Even more
    importantly, we want other developers to use our custom view.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解如果想要分享我们的自定义视图应该考虑什么，以及如何做到这一点。我们还将实践一些在前面章节中给出的重要建议。更重要的是，我们希望其他开发者能使用我们的自定义视图。
- en: 'In more detail, we''ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细地说，我们将涵盖以下主题：
- en: Recommendations and best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议和最佳实践
- en: Publishing your custom view
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布你的自定义视图
- en: Almost all recommendations given can be applied not only to custom views but
    to any Android library we'd like to share or we want to make reusable for our
    colleagues or other projects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有给出的建议不仅适用于自定义视图，也适用于我们想要分享或希望让同事或其他项目可重用的任何Android库。
- en: Best practices for sharing our custom view
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享自定义视图的最佳实践
- en: We should always aim for the highest quality possible, even though we're building
    a custom view or component only for ourselves or for a small application. However,
    there are some additional checks and best practices that we've to take into account
    if we want to share our custom view so others can use it. If that is our goal,
    and we'd like to get as many developers as possible using it in their applications
    or contributing to it, it'll be quite challenging to involve them if we ignore
    these basic recommendations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们只是在为自己或一个小型应用构建自定义视图或组件，我们也应该始终追求尽可能高的质量。然而，如果我们想要分享我们的自定义视图，让其他人也能使用它，我们需要考虑一些额外的检查和最佳实践。如果我们目标是让尽可能多的开发者在他们的应用中使用它或为它贡献，那么如果我们忽视这些建议，将很难吸引他们参与。
- en: Considerations and recommendations
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑事项和建议
- en: Something we should consider is that once we share our custom view, it might
    be used for many Android applications. If our custom view has errors and crashes,
    it'll crash the application using it. The application's users will not consider
    the custom view at fault but rather the application itself. The application developer,
    or developers, might try to open an issue or even submit a pull request to fix
    it, but if the custom view gives them too much trouble, they'll just replace it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该考虑的一件事是，一旦我们分享了自定义视图，它可能会被许多Android应用使用。如果我们的自定义视图有错误并且崩溃了，它将导致使用它的应用崩溃。应用的用户不会认为是自定义视图的问题，而是应用本身的问题。应用开发者可能会尝试提出问题，甚至提交一个pull请求来修复它，但如果自定义视图给他们带来太多麻烦，他们只会替换它。
- en: This applies to your own applications as well; you don't want to use an unstable
    component or custom view as you might end up either rewriting it or patching it
    up. As we've just mentioned, we should always aim for the highest quality. If
    our custom view is only used in one single application, the impact of finding
    a critical issue once it's at the production stage or the application is published
    to the store or stores only affects one application. However, if it's used by
    several applications, the impact and cost of maintenance increases. You can imagine
    the impact of detecting a highly critical issue of an open source component and
    having to make new releases of all the applications using it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于你自己的应用程序；你不想使用一个不稳定的组件或自定义视图，因为你可能最终要重写它或修补它。正如我们刚刚提到的，我们应始终追求最高质量。如果我们的自定义视图只在一个应用程序中使用，那么在生产阶段或应用程序发布到商店时发现一个关键问题的影响只影响一个应用程序。但是，如果它在多个应用程序中使用，维护的影响和成本就会增加。你可以想象，在开源组件中发现一个高度关键的问题，并不得不为所有使用它的应用程序发布新版本的影响。
- en: In addition, you should try to keep your code clean, well-organized, properly
    tested, and reasonably documented. It'll be easier for you, as well as your colleagues
    if you're sharing the custom view at your company, to maintain the custom view,
    and if it's open source, it will encourage contributions and won't actually scare
    external contributors. As with many other things, common sense applies. Don't
    over-document your custom view as basically nobody will read it; keep it as simple
    as possible and straight to the point.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你应该尽量保持代码干净、组织有序、测试充分且文档合理。这对于你以及如果你在公司分享自定义视图的同事来说，将更容易维护自定义视图。如果它是开源的，这将鼓励贡献，并且实际上不会吓跑外部贡献者。与其他许多事情一样，常识适用。不要过度文档化你的自定义视图，因为基本上没人会去读它；尽量保持简单明了，直击要点。
- en: 'In the following screenshot, we can see the open issues of the `retrofit` library,
    an open source Android library widely used in many applications:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到`retrofit`库的开放问题，这是一个在许多应用程序中广泛使用的开源Android库：
- en: '![](img/4bb8375c-bb14-4472-85f1-04a41e1a0ff6.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bb8375c-bb14-4472-85f1-04a41e1a0ff6.png)'
- en: 'Also, we can see there are many pull requests submitted by several developers,
    either fixing issues or adding functionality or features. In the following screenshot
    is an example of a pull request submitted to the `retrofit` library:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们可以看到有几位开发者提交了许多拉取请求，他们要么在修复问题，要么在添加功能或特性。以下截图是提交给`retrofit`库的一个拉取请求示例：
- en: '![](img/bb39c47e-3b26-478e-87ff-987e1559c293.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb39c47e-3b26-478e-87ff-987e1559c293.png)'
- en: We've previously covered it already, but it's also important that the custom
    view behaves properly. Not only must it be crash-free but it also has to work
    properly on several devices and resolutions and have good performance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经提到过，但自定义视图的行为正确也很重要。它不仅必须保证不崩溃，还必须在多种设备和分辨率下正常工作，并且具有良好的性能。
- en: 'We can sum up the list of recommendations with the following points:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下要点总结建议列表：
- en: Stable
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定
- en: Work across devices and resolutions
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多种设备和分辨率下工作
- en: Performant
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优良
- en: Developed applying best code practices and standard style
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用最佳代码实践和标准风格开发
- en: Properly documented and easy to use
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档齐全且易于使用
- en: Configurable
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可配置
- en: We've explained in [Chapter 2](20734a38-fcba-4c21-b85a-ec328252e678.xhtml),
    *Implementing Your First Custom View*, how to parameterize a custom view. We've
    created it because it might serve a very specific purpose, but in general the
    more configurable it is, the more likely it will be used somewhere else.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](20734a38-fcba-4c21-b85a-ec328252e678.xhtml)，*实现你的第一个自定义视图*中，我们解释了如何参数化自定义视图。我们创建它是因为它可能服务于一个非常具体的目的，但一般来说，它配置得越灵活，就越有可能在其他地方被使用。
- en: Imagine we're building a progress bar. If our custom view always draws a horizontal
    red bar, it'll have its uses but not many as it's too specific. If we allow the
    developer of the application using this custom view to customize the color of
    the bar, we'd add several other use cases for it. If, in addition, we also allow
    developers to configure the background color or what kind of primitive we're drawing
    instead of a horizontal bar, we'll cover even more different scenarios with our
    custom view.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们正在构建一个进度条。如果我们的自定义视图总是绘制一个水平红色条，它会有其用途，但不会太多，因为它太具体了。如果我们允许使用这个自定义视图的应用程序的开发者自定义条的颜色，我们就会为它增加几个其他用例。此外，如果我们还允许开发者配置背景颜色或者绘制水平条之外的哪种原始图形，我们的自定义视图将涵盖更多不同的场景。
- en: We need to be careful as well; adding so many options will also increase the
    complexity of the code and the component itself. Configuring colors is straightforward
    and doesn't have that much impact, but being able to change the drawing primitive,
    for example, might be slightly trickier. Adding complexity might impact on performance,
    stability, and our ability to test and verify all scenarios are working fine when
    publishing it or making a new release.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也需要注意；添加太多选项也会增加代码和组件本身的复杂性。配置颜色是直接的，影响并不大，但例如能够更改绘图原语可能稍微有点复杂。增加复杂性可能会影响性能、稳定性，以及我们在发布或制作新版本时测试和验证所有场景是否正常工作的能力。
- en: Publishing our custom view
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布我们的自定义视图
- en: Once we're happy with our custom view and the way it is, we're ready to share
    it. If we've also followed the best practices and recommendations, we might be
    additionally confident. Even if you haven't, the best way to learn is to get feedback
    from the community as soon as possible. Don't be afraid of making mistakes; you'll
    learn on the way.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对自定义视图及其现状感到满意，我们就可以准备分享了。如果我们也遵循了最佳实践和推荐，我们可能会更有信心。即使没有，最好的学习方式就是尽快从社区获得反馈。不要害怕犯错误；你会在过程中学到东西的。
- en: 'There are many ways of publishing a custom view: we can open source it, for
    example, or we can just publish a compiled binary as a SDK or Android library.
    Most of the recommendations above are given for the open source approach or internal
    reuse, either for yourself or your colleagues, but many of them, not all, also
    apply if your goal is to publish a closed SDK or just the compiled binary as a
    library.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 发布自定义视图的方法有很多：我们可以选择开源，例如，或者我们可以只发布编译后的二进制文件作为SDK或Android库。以上大多数建议针对的是开源方法或内部重用，无论是为了自己还是同事，但其中许多（并非全部）也适用于你的目标是发布一个封闭的SDK或只作为库发布编译后的二进制文件。
- en: Open sourcing our custom view
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源我们自定义的视图
- en: Open sourcing a custom view or, alternatively, an Android library, is pretty
    easy and straightforward. You need to make sure you perform some additional steps
    but the process itself is very simple.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 开源一个自定义视图或者，作为替代，一个Android库，是相当简单和直接的。你需要确保你执行了一些额外的步骤，但整个过程非常简单。
- en: We've been using GitHub to share the source code of the examples of this book.
    This is not a coincidence. GitHub is one of the most widely used tools for sharing
    source code and open source libraries and projects. It's also the tool we will
    recommend and will use in this chapter to explain how to publish our custom view.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用GitHub分享本书示例的源代码。这并非巧合。GitHub是分享源代码、开源库和项目最广泛使用的工具之一。它也是我们将在本章推荐并使用的工具，来解释如何发布我们的自定义视图。
- en: First things first; if we don't have a GitHub account, we've to register ourselves
    and create it. Creating an account is free as long as we want to host only public
    repositories or publicly accessible code. If we want to use it to store private
    code repositories, we've the paid option. For the scope of this book, we've more
    than enough with the free option.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首要任务是，如果我们还没有GitHub账户，就需要注册并创建一个。只要我们只想托管公开的仓库或公开可访问的代码，创建账户是免费的。如果我们想要用它来存储私有代码仓库，就有付费选项。就本书的范围而言，免费选项已经足够了。
- en: 'We can register directly from the home page: [https://www.github.com](https://www.github.com)
    or from:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接从主页注册：[https://www.github.com](https://www.github.com) 或者从以下链接：
- en: '[https://github.com/join](https://github.com/join)[.](https://github.com/join)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[加入GitHub](https://github.com/join)'
- en: 'Once we have made the account, we create a code repository to store the code.
    We can do so at:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建账户后，我们创建一个代码仓库来存储代码。我们可以在以下位置进行操作：
- en: '[https://github.com/new.](https://github.com/new) As shown in following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[新建GitHub仓库](https://github.com/new)。如下截图所示：'
- en: '![](img/e9830572-a781-4551-8d37-b69f139b3e88.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9830572-a781-4551-8d37-b69f139b3e88.png)（图片无需翻译，直接复制原文）'
- en: We must choose a repository name. It is highly recommended to add a description
    so its easier for everyone else to understand what our component or library is
    doing. We also have the option of adding a `.gitignore` file and adding a license.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须选择一个仓库名称。强烈建议添加描述，这样其他人更容易理解我们的组件或库的功能。我们还可以选择添加一个 `.gitignore` 文件和许可证。
- en: The `.gitignore` is quite a useful file. All files mentioned here won't be uploaded
    to GitHub. For instance, there is no need to upload all the temporary files, builds,
    intermediate build files, or configuration files from Android Studio that hold
    information about the project specifically to our local computer. It won't be
    useful to anybody to know that we're storing the project in `\Users\raimon\development\AndroidCustomView`
    for instance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gitignore`是一个非常有用的文件。这里提到的所有文件都不会上传到GitHub。例如，没有必要上传所有临时文件、构建文件、中间构建文件或Android
    Studio的配置文件，这些文件包含有关项目的特定信息，仅保存在我们的本地计算机上。例如，知道我们将项目存储在`\Users\raimon\development\AndroidCustomView`没有任何用。'
- en: 'Adding a license is very important to determine what rights we are granting
    to those using our source code. Some of the most common licenses for open source
    projects are Apache 2.0, MIT, and GPLv3 licenses:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 添加许可证对于确定我们授予使用源代码者的权利非常重要。开源项目中最常见的许可证有Apache 2.0、MIT和GPLv3许可证：
- en: MIT is the less restrictive and permissive license. It allows other parties
    to use the source in any way they want as long as they include the license and
    copyright notice.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIT是最少限制和最宽容的许可证。只要其他方在使用源代码时包含许可证和版权声明，就可以以任何方式使用源代码。
- en: Apache 2.0 is also quite permissive. Like the MIT license, it allows other parties
    to use the source in any way they want as long as they include the license and
    copyright notice and state the changes done to the original files.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache 2.0许可证同样非常宽容。与MIT许可证一样，只要其他方在使用源代码时包含许可证和版权声明，并说明对原始文件的更改，就可以以任何方式使用源代码。
- en: GPLv3 is slightly more restrictive as it forces anyone using your source code
    to distribute the source code of the application using it under the same license.
    This might be a restriction for some companies as they'd like to preserve the
    IP of their source code.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPLv3稍微严格一些，因为它要求任何使用你源代码的人必须按照相同的许可证发布使用该源代码的应用程序源代码。这对于一些希望保留源代码知识产权的公司来说可能是一种限制。
- en: All three licenses limit the liability of the original developer and do not
    provide any warranty. They all provide the software or source code as is.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种许可证都限制了原始开发者的责任，并不提供任何担保。它们都是将软件或源代码“按现状”提供。
- en: Many Android libraries use either the MIT or Apache 2.0 license and it's our
    recommendation to use either for your custom view.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Android库使用MIT或Apache 2.0许可证，我们建议您的自定义视图也使用这两个许可证之一。
- en: Once the repository is created and initialized, we can upload our code. We can
    use any Git client we prefer or simply use the command-line interface.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库创建并初始化后，我们可以上传代码。我们可以使用任何偏好的Git客户端，或者直接使用命令行界面。
- en: 'First, we clone the repository we''ve just created-just as reference, not a
    real repository:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们克隆刚才创建的仓库——仅作为参考，并非真实的仓库：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Checking connectivity. Done.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 检查连接。完成。
- en: 'If we already have the directory created with our source code inside, Git will
    complain it can''t create the directory:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经有了一个包含源代码的目录，Git会报错，无法创建目录：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'fatal: destination path `androidcustomview` already exists and is not an empty
    directory.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'fatal: destination path `androidcustomview` already exists and is not an empty
    directory.'
- en: 'In this case, we''ve to use a different approach. First, we have to initialize
    the local repository:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们必须使用不同的方法。首先，我们必须初始化本地仓库：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then add the remote repository:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加远程仓库：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, pull the content from the master branch:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从主分支拉取内容：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we can add all the files we''d like to add to the GitHub repository. In
    this case, we''ll add everything and Git will automatically ignore those files
    matching the patterns on the `.gitignore` file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加所有希望添加到GitHub仓库的文件。在这个例子中，我们将添加所有内容，Git会自动忽略与`.gitignore`文件中模式匹配的文件：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can commit to the local repository now. Always use a meaningful commit message
    or description as it will be useful later on to know what was changed:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将改动提交到本地仓库。一定要使用有意义的提交信息或描述，因为这将有助于以后了解都更改了什么。
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When this is done, we''re ready to push those commits to the remote repository,
    at [https://github.com/](https://github.com/) in this example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，我们就可以将提交推送到远程仓库，本例中的远程仓库位于[https://github.com/](https://github.com/)：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For more information about Git go to:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多关于Git的信息，请访问：
- en: '[https://en.wikipedia.org/wiki/Git](https://en.wikipedia.org/wiki/Git).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Git](https://en.wikipedia.org/wiki/Git).'
- en: 'When creating a repository, GitHub also asks us if we wants to create a `README.md`
    file. This `README.md` file is what will be shown on the repository page as documentation.
    It''s formatted using markdown, which is why the extension is `.md`, and it''s
    important to keep it up-to-date with information about the project, how to use
    it, a quick example, and a mention of the license and authors. The most important
    part here is that anyone who wants to use your custom view can check quite quickly
    how to do so, if the license is appropriate, and how to contact you for support
    and help. This last part is optional as they can always open an issue on GitHub,
    but it''s nice to have. We can even edit and preview the changes directly from:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建仓库时，GitHub 会询问我们是否要创建一个`README.md`文件。这个`README.md`文件将显示在仓库页面上作为文档。它使用 markdown
    格式，这就是扩展名为`.md`的原因，并且重要的是要将其与项目信息保持同步，包括如何使用、一个快速示例、以及关于许可和作者的信息。这里最重要的部分是，任何想要使用你的自定义视图的人都可以快速查看如何操作，许可是否合适，以及如何联系你寻求支持和帮助。这部分是可选的，因为他们总是可以在
    GitHub 上提出问题，但这样更好。我们甚至可以直接从以下位置编辑和预览更改：
- en: '[https://github.com/](https://github.com/).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/](https://github.com/)。'
- en: It's not only important to keep the documentation up-to-date, it's also important
    to keep the library maintained and up-to-date. There are bugs that need addressing,
    new features to add, new versions of Android that break, deprecate, improve or
    add new method, and other developers opening issues or asking questions. When
    looking for a custom view or Android library, if there are no recent updates or,
    at least, not in the last few months, it looks abandoned and it greatly decreases
    the chances somebody else will use it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅要保持文档更新，保持库的维护和更新也很重要。有一些需要解决的错误，需要添加的新功能，新的 Android 版本可能会破坏、弃用、改进或添加新的方法，以及其他开发者提出问题或询问。当寻找自定义视图或
    Android 库时，如果没有最近的更新，或者至少在过去的几个月内没有，它看起来像是被遗弃了，这大大降低了其他人使用它的机会。
- en: Creating a binary artifact
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建二进制工件
- en: We've been talking about shared custom views and Android libraries as if they
    were the same. The most suitable way to share a custom view is as an Android library.
    The main difference between an Android application and an Android library is that
    the latter cannot be run by itself on a device or emulator and will only produce
    an `.aar` file. This `.aar` file can, later on, be added as a dependency in an
    Android application project or other libraries. We could also have sub-modules
    inside the same project and have dependencies between them. To see how this works,
    we'll convert a custom view project into an Android library and we'll add a test
    application project to quickly test it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在谈论共享自定义视图和 Android 库，好像它们是同一回事。分享自定义视图最合适的方式是作为 Android 库。Android 应用程序和
    Android 库之间的主要区别在于，后者不能在设备或模拟器上独立运行，并且只会生成一个`.aar`文件。这个`.aar`文件稍后可以作为依赖项添加到 Android
    应用程序项目或其他库中。我们还可以在同一个项目内拥有子模块，并且它们之间可以有依赖关系。为了了解这是如何工作的，我们将把自定义视图项目转换成 Android
    库，并且将添加一个测试应用程序项目以快速测试它。
- en: 'First, once we have an Android application, we can convert it to a library
    by just performing two simple steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一旦我们有了 Android 应用程序，我们可以通过执行两个简单的步骤将其转换为库：
- en: Remove the line mentioning the `applicationId` on the app module `build.gradle`
    file.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 app 模块的`build.gradle`文件中删除提到`applicationId`的行。
- en: Change the plugin applied from `com.android.application` to `com.android.library`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用的插件从`com.android.application`更改为`com.android.library`。
- en: 'Basically changing the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上更改以下内容：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change to the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下内容：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In our example, we've also refactored the app module name to lib.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，还将应用模块名称重构为 lib。
- en: 'More information on how to convert an Android application to an Android library
    can be found at the developer Android documentation page:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何将 Android 应用程序转换为 Android 库的更多信息可以在开发者 Android 文档页面找到：
- en: '[https://developer.android.com/studio/projects/android-library.html](https://developer.android.com/studio/projects/android-library.html).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/studio/projects/android-library.html](https://developer.android.com/studio/projects/android-library.html)。'
- en: If we're developing or extending this library, we'd recommend adding a new module
    inside the project as a test application. It would considerably speed up developing
    and testing of the custom view.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在开发或扩展这个库，我们建议在项目中添加一个新的模块作为测试应用程序。这将大大加快自定义视图的开发和测试速度。
- en: 'We can add a new module using the Android Studio File menu: File | New | New
    Module:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Android Studio 文件菜单添加一个新模块：文件 | 新建 | 新模块：
- en: '![](img/98fafcf5-8182-4ee6-82b8-f3f24f3c6d6c.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98fafcf5-8182-4ee6-82b8-f3f24f3c6d6c.png)'
- en: 'Once we''ve added a test application module, we add a dependency to the library.
    In the `build.gradle` file of the new module, add a dependency to the local lib
    module:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 添加测试应用模块后，我们向库添加一个依赖项。在新模块的`build.gradle`文件中，添加对本地库模块的依赖：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now you can add the custom view to this new test application layout and test
    it. In addition, we can also produce a library binary to distribute. It''ll only
    include the library or the lib module. We can do so by executing the `lib:assembleRelease`
    task on gradle:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将自定义视图添加到这个新的测试应用布局中并测试它。此外，我们还可以生成一个库二进制文件以供分发。它只包含库或lib模块。我们可以通过在gradle上执行`lib:assembleRelease`任务来实现：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We'll get the `.aar` file in our project folder at `lib/build/outputs/aar/lib-release.aar`.
    Using the `lib:assembleDebug` task, we'll produce the debug library, or simply
    using `lib:assembleDebug` we'll get both debug and release versions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在项目的`lib/build/outputs/aar/lib-release.aar`文件夹中获取`.aar`文件。使用`lib:assembleDebug`任务，我们将生成调试库，或者简单地使用`lib:assembleDebug`来获取调试和发布版本。
- en: 'You can distribute the binary in any way you prefer, but one recommendation
    is to upload to an artifact platform. Many companies are using internal artifact
    or software repositories for their enterprise libraries and artifacts in general,
    but if you want to make it available to the wider public, you can upload it to
    `JCenter`, for example. If we check our topmost `build.gradle` file from any Android
    project, we will see there is a dependency on `JCenter` to look for libraries:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以任何你喜欢的方式发布二进制文件，但一个建议是上传到构件平台。许多公司都在使用内部构件或软件仓库来存储企业库和一般的构件，但如果你想要向更广泛的公众开放，你可以上传到例如`JCenter`。如果我们检查任何Android项目中的最顶层的`build.gradle`文件，我们会看到有一个依赖于`JCenter`来查找库的依赖项：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can easily do so from Bintray: [https://bintray.com](https://bintray.com),
    for example. Once we''ve registered, we could create projects, import them from
    GitHub, create releases and versions, and even publish it to `JCenter` if our
    project is accepted.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Bintray轻松完成此操作，例如：[https://bintray.com](https://bintray.com)。注册后，我们可以创建项目，从GitHub导入它们，创建发布和版本，如果我们的项目被接受，甚至可以发布到`JCenter`。
- en: 'For more information about the Bintray gradle plugin, go to:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关Bintray gradle插件的更多信息，请访问：
- en: '[https://github.com/bintray/gradle-bintray-plugin#readme](https://github.com/bintray/gradle-bintray-plugin#readme).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[关于bintray的gradle插件更多信息](https://github.com/bintray/gradle-bintray-plugin#readme)。'
- en: To simplify our lives, there are some open source examples and code that will
    make this process way simpler. But first, let's create a repository on Bintray.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化我们的工作，有一些开源示例和代码可以使这个过程变得简单得多。但首先，让我们在Bintray上创建一个仓库。
- en: 'We''ll name it `AndroidCustomView`, set it up as a Maven repository, and add
    a default Apache 2.0 license:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其命名为`AndroidCustomView`，将其设置为Maven仓库，并添加默认的Apache 2.0许可证：
- en: '![](img/4395fe16-075f-408a-82c0-4399e53c9837.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4395fe16-075f-408a-82c0-4399e53c9837.png)'
- en: 'Once we have it, we can create versions or we can add them directly from our
    gradle build scripts. In order to do so, we must add some dependencies to our
    topmost `build.gradle`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有了它之后，我们可以创建版本，或者直接从我们的gradle构建脚本中添加。为此，我们必须向最顶层的`build.gradle`添加一些依赖项：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can take advantage of some open source gradle build scripts already
    created. Instead of copying and pasting or adding more code to our build script,
    we can simply apply it directly from GitHub. Let''s add these two lines to the
    very end of our library `build.gradle` file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以利用一些已经创建的开源gradle构建脚本。我们不需要复制粘贴或向我们的构建脚本中添加更多代码，可以直接从GitHub应用它。让我们在库`build.gradle`文件的最后添加这两行：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After applying these two gradle build scripts, we end up having an additional
    task: `bintrayUpload`. We need to add the artifact configuration first, so let''s
    add it at the very beginning of the file, just after the apply library line on
    the library module `build.gradle` file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 应用了这两个gradle构建脚本之后，我们最终会得到一个额外的任务：`bintrayUpload`。我们需要首先添加构件配置，所以在库模块`build.gradle`文件的apply库行后面最前面添加它：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We need to add the Bintray user and API key information to our `local.properties`
    file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将Bintray用户和API密钥信息添加到我们的`local.properties`文件中：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `bintrayRepo` variable has to match the repository where we'd like to store
    our binaries or otherwise the build script will fail.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`bintrayRepo`变量必须与我们要存储二进制文件的仓库相匹配，否则构建脚本将失败。'
- en: Now that we've all the configuration in place, we can build a new version of
    the library by using `./gradlew` install and uploading it to Bintray by using
    `./gradlew bintrayUpload`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有配置，我们可以使用`./gradlew` install构建库的新版本，并使用`./gradlew bintrayUpload`上传到Bintray。
- en: Keep in mind that versions are read-only when they've been uploaded, so we'll
    not be able to override them and we'll get an error when executing our gradle
    script unless we update the version number and upload a different version.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，版本一旦被上传后就是只读的，因此我们将无法覆盖它们，除非我们更新版本号并上传不同的版本，否则在执行我们的gradle脚本时将会出现错误。
- en: 'Once we''ve uploaded a version, we''ll have something close to the following
    screen:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们上传了一个版本，我们将看到类似下面的屏幕：
- en: '![](img/7cdbb2cd-2346-4235-b885-0407f7fcecb4.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cdbb2cd-2346-4235-b885-0407f7fcecb4.png)'
- en: 'We can also inspect the files of an uploaded version to see what has been uploaded.
    If we go to a version and to the Files menu, we''ll see the `.aar` Android library
    and all the other files the script has uploaded for us:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查已上传版本中的文件，以了解已上传了哪些内容。如果我们进入某个版本，并点击文件菜单，我们会看到`.aar`的Android库文件以及脚本为我们上传的所有其他文件。
- en: '![](img/f3eb44c2-92da-4150-b9ad-e965e72d1f53.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3eb44c2-92da-4150-b9ad-e965e72d1f53.png)'
- en: As we can see, it also packaged and uploaded the source code, the `Javadoc`
    and created a `.pom` file as it's hosted as a Maven repository.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，它还打包并上传了源代码、`Javadoc`并创建了一个`.pom`文件，因为它是作为Maven仓库托管的。
- en: After doing all these steps, we can upload it to `JCenter` directly from the
    artifact repository page by pressing Add to JCenter. Once approved, anyone wanting
    to use our library can simply define a dependency on `com.rrafols.packt.androidcustomview`
    and directly get it from `JCenter`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些步骤后，我们可以直接从构件仓库页面通过点击添加到JCenter将库上传到`JCenter`。一旦获得批准，任何想要使用我们库的人只需在`com.rrafols.packt.androidcustomview`上定义一个依赖项，就可以直接从`JCenter`获取。
- en: 'For more information about this process and the author of these gradle build
    scripts, go to:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解关于这个过程以及这些gradle构建脚本的作者更多信息，请访问：
- en: '[https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en](https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en](https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en)。'
- en: Something we haven't mentioned but is also quite important is how to version
    our library. Whenever we're creating a new release, we create a version number.
    It is highly recommended to use semantic versioning, `MAJOR.MINOR.PATCH`, when
    versioning our custom view. This way we can easily indicate if changes in one
    version are introducing incompatibilities or not. For instance, using semantic
    versioning, if we change the major number, we're indicating we've introduced incompatibilities
    with previous versions, or by changing the minor number, we indicate we've added
    new functionality without introducing any incompatibility. This is important for
    third-parties or other developers using our library, so they know what to expect
    from one version to the next.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有提到但同样重要的是，如何对我们的库进行版本控制。每当我们创建一个新的发布版本时，都会创建一个版本号。强烈建议在为自定义视图版本控制时使用语义版本`MAJOR.MINOR.PATCH`。这样我们可以轻松地指示一个版本中的更改是否引入了不兼容性。例如，使用语义版本控制，如果我们更改了主要版本号，就表示我们引入了与先前版本的不兼容性；或者通过更改次要版本号，表示我们添加了新功能但没有引入任何不兼容性。这对于使用我们库的第三方或其他开发人员来说非常重要，这样他们可以知道从一个版本到下一个版本应该期待什么。
- en: 'For more information on Semantic Versioning, go to:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多关于语义版本控制的信息，请访问：
- en: '[http://semver.org/](http://semver.org/).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://semver.org/](http://semver.org/)。'
- en: Check also the full source code of this example in the `Example32-Library` folder
    on the GitHub repository.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 也请查看此示例的完整源代码，位于GitHub仓库中的`Example32-Library`文件夹。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen the recommendations for sharing our custom view
    and how we can actually do it. There are many benefits from open sourcing our
    custom views or sharing them internally at our company, for example. We'll not
    only pay more attention to quality and to details, but we will also foster collaborations
    and enrich the Android developer community.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了分享我们的自定义视图的建议以及如何实际操作。开源我们的自定义视图或在公司内部分享它们有很多好处。我们不仅会更关注质量和细节，而且还将促进合作并丰富Android开发者社区。
- en: In the next chapters, we will see how we can put all the information we have
    been covering these last chapters and build some more complex custom views that
    we can use and include directly in our applications.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何把我们最近几章所涵盖的所有信息综合起来，构建一些更复杂的自定义视图，以便在我们的应用程序中直接使用和包含。
