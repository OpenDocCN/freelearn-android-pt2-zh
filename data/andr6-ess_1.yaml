- en: Chapter 1. Android Marshmallow Permissions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Android棉花糖权限
- en: '**Android permissions** have been there for as long as we can remember—since
    Android 1.0, to be exact. Through the years and with the evolvement of platforms,
    the Android permissions model has been modified by adding new permissions and
    trying to allow more granular control over the part of the device hardware/data
    the application has.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android权限**自从我们记忆中的Android 1.0版本以来就一直存在。多年来，随着平台的演变，Android权限模型通过添加新权限，试图允许更细粒度地控制应用程序对设备硬件/数据的访问部分。'
- en: In this chapter, we will review a bit of the Android permissions model that
    was prior to **Android Marshmallow**, and we'll focus on the changes it brings
    to the table. We will also explain the changes that you as a developer must do
    in order to handle all the other changes and make sure your applications work
    as intended on Android Marshmallow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾一下**Android棉花糖**之前的Android权限模型，并关注它带来的变化。我们还将解释作为开发人员你必须做的更改，以处理所有其他变化，并确保你的应用程序在Android棉花糖上按预期工作。
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: An overview of Android permissions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android权限概述
- en: Understanding Android Marshmallow permissions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Android棉花糖权限
- en: Handling code permissions with best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最佳实践处理代码权限
- en: An overview of Android permissions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android权限概述
- en: In Android, each application runs with distinct system IDs known as **Linux
    user ID** and **Group ID**. The system parts are also separated into distinct
    IDs, forming isolated zones for applications—from each other and from the system.
    As part of this isolated life cycle scheme, accessing services or other applications'
    data requires that you declare this desire in advance by requesting a permission.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android操作系统中，每个应用程序都使用独特的系统ID运行，这些ID被称为**Linux用户ID**和**组ID**。系统的各个部分也被分配了不同的ID，为应用程序形成了与其他应用及系统隔离的区域。作为这一隔离生命周期方案的一部分，访问服务或其他应用程序数据需要提前声明这一需求，即请求相应的权限。
- en: This is done by adding the `uses-permission` element to your `AndroidManifest.xml`
    file. Your manifest may have zero or more `uses-permission` elements, and all
    of them must be the direct children of the root <`manifest>` element.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过在`AndroidManifest.xml`文件中添加`uses-permission`元素来实现。你的清单可以有零个或多个`uses-permission`元素，它们都必须是根元素<`manifest`>的直接子元素。
- en: Trying to access data or features without proper permission would give out a
    security exception (using a `SecurityException` class), informing us about the
    missing permission in most cases.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在没有适当权限的情况下访问数据或功能，通常会抛出安全异常（使用`SecurityException`类），告知我们缺少权限。
- en: The `sendBroadcast(Intent)` method is exceptional as it checks permissions after
    the method call has returned, so we will not receive an exception if there are
    permission failures. A **permission failure** should be printed to the system
    log. Note that in Android versions prior to Marshmallow, missing permissions were
    due to missing declarations in the manifest. Hence, it is important that you keep
    permissions in mind when you come up with the feature list for your app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendBroadcast(Intent)`方法比较特殊，因为它在方法调用返回后检查权限，所以如果出现权限失败，我们不会收到异常。**权限失败**应该被记录到系统日志中。需要注意的是，在Android棉花糖版本之前，缺失权限是由于在清单中缺少声明。因此，在制定应用功能列表时，你应牢记权限问题。'
- en: Permissions
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限
- en: When using Android platform as an app, you have restrictions preventing access
    to some hardware, system APIs, private user data, and application data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Android平台作为应用程序时，你将受到限制，无法访问某些硬件、系统API、私人用户数据和应用程序数据。
- en: Permission is needed in order to allow access to a specific API, data, or hardware;
    it was asked upon the installation of your app up until Android Marshmallow. Most
    permissions are used to restrict access. When a permission is granted, you then
    have access to that specific restricted area. A feature can be protected by one
    permission at most.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许访问特定的API、数据或硬件，需要权限；在安装应用直到Android棉花糖版本时，会请求权限。大多数权限用于限制访问。当权限被授予时，你就可以访问到特定的受限区域。一个功能最多可以被一个权限保护。
- en: 'The `uses-permission` element takes a name attribute, `android:name`, which
    is the name of the permission your application requires:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`uses-permission`元素需要一个名为`android:name`的属性，这是你的应用程序所需的权限名称：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Did you know that the `android:maxSdkVersion` attribute, added in API level
    19, is used to notify the version of the API from which this permission *should
    not* be granted? This is useful if a permission is no longer needed on higher
    versions of the API. For example, take a look at the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道在API级别19中添加的`android:maxSdkVersion`属性，用于通知从哪个API版本开始不再授予此权限吗？如果权限在更高版本的API中不再需要，这很有用。例如，请看以下内容：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In API 19, your app doesn't need to ask for this permission—it's granted to
    you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在API 19中，你的应用无需请求此权限——它会自动授予你。
- en: Your application can also protect its own components, such as activities, services,
    broadcast receivers, and content providers with permissions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用还可以通过权限保护自己的组件，如活动、服务、广播接收器和内容提供者。
- en: It can employ any of the permissions defined by Android and declared by other
    applications, or it can define its own.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以使用Android定义的任何权限，也可以使用其他应用声明的权限，或者可以定义自己的权限。
- en: For more information on permissions, you can read [http://developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有关权限的更多信息，你可以阅读[http://developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html)。
- en: Permission group definitions
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限组定义
- en: Permissions are divided into groups. According to Google, we can say that a
    **permission group** puts together related permissions in a single name/tag. You
    can group permissions together using the `permissionGroup` attribute inside the
    `<permission>` element.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 权限被划分为多个组。根据谷歌的说法，我们可以认为**权限组**是将相关权限组合在一起的单个名称/标签。你可以在`<permission>`元素内的`permissionGroup`属性中组合权限。
- en: Permissions grouped in the same permission group are shown as one group when
    approving permissions or when checking an app for its permissions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当批准权限或检查应用的权限时，同一权限组中的权限将显示为一个组。
- en: 'The permission group is what you see when installing an application from the
    Play Store; for example, take a look at the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 权限组是在从Play商店安装应用时你所看到的内容；例如，请看以下截图：
- en: '![Permission group definitions](img/00002.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![权限组定义](img/00002.jpeg)'
- en: 'Let''s take a look at the structure of the `permission-group` tag:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`permission-group`标签的结构：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The elements of the preceding structure can be explained as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前述结构的元素可以解释如下：
- en: '`android:description`: This refers to simple text used to describe the group.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:description`：这指的是用于描述该组的简单文本。'
- en: '`android:icon`: This refers to an icon from a drawable resource that represents
    the permission.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon`：这指的是一个可绘制资源中的图标，代表该权限。'
- en: '`android:label`: This refers to a simple text name for the group.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:label`：这指的是一个简单文本名称，用于标识该组。'
- en: '`android:name`: This is the name of the group. It is used to assign permissions
    to a specific group.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:name`：这是组的名称。它用于将权限分配给特定的组。'
- en: 'The following table shows you the various categories of permissions that are
    there in a permissions group:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了权限组中存在的各种权限类别：
- en: '| Permissions group |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 权限组 |'
- en: '| --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| In-app purchases | Device and app history |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 应用内购买 | 设备和应用历史 |'
- en: '| Contacts | Calendar |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 联系人 | 日历 |'
- en: '| Phone | Photos, media, and files |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 电话 | 照片、媒体和文件 |'
- en: '| Wi-Fi connection information | Bluetooth connection information |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| Wi-Fi连接信息 | 蓝牙连接信息 |'
- en: '| Identity | Cellular data settings |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 身份 | 移动数据设置 |'
- en: '| SMS | Location |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 短信 | 位置 |'
- en: '| Microphone | Camera |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 麦克风 | 相机 |'
- en: '| Device ID and call information | Wearable sensors/activity data |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 设备ID和通话信息 | 可穿戴传感器/活动数据 |'
- en: '| Other |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 其他 |'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Any permissions that are not part of a permissions group will be shown as **Other**.
    When an app is updated, there may be changes to the permissions group for that
    app.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 任何不属于权限组的权限将被显示为**其他**。当应用更新时，该应用的权限组可能会有所变化。
- en: Permissions that imply feature requirements
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暗示功能需求的权限
- en: Some permissions are implied by feature requirements; we will cover this next.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 某些权限是由功能需求暗示的；我们将在下一部分介绍这一点。
- en: When declaring a feature in the manifest, we must also request the permissions
    that we need.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当在清单中声明一个功能时，我们还必须请求所需的权限。
- en: Let's say, for example, that we want to have a feature that sets pictures for
    our contacts. If we want to take a picture via the `Camera` API, then we must
    request a `Camera` permission.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，如果我们想要有一个为联系人设置图片的功能。如果我们想通过`Camera` API拍照，那么我们就必须请求一个`Camera`权限。
- en: The `<users-feature>` tag makes sure we declare that we need devices that support
    the required feature for our application to work and use that feature. If this
    feature is not a required feature and our app can work without it but with fewer
    features, we can use `android:required="false"`, keeping it in mind that this
    feature is optional.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`<users-feature>`标签确保我们声明需要支持我们应用程序工作并使用该功能所需特性的设备。如果这个特性不是必需的，并且我们的应用程序可以在没有它的情况下工作但功能较少，我们可以使用`android:required="false"`，记住这个特性是可选的。'
- en: The `<uses-feature>` declarations always take precedence over features implied
    by permissions. The complete list of permission categories that imply feature
    requirements can be found at [http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions](http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`<uses-feature>`声明总是优先于由权限暗示的特性。可以在此找到暗示特性要求的权限类别完整列表：[http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions](http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions)。'
- en: Viewing the permissions for each app
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看每个应用程序的权限
- en: You can look at the permissions for each app using the settings app or the `adb`
    shell command.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用设置应用程序或`adb` shell命令查看每个应用程序的权限。
- en: 'To use the settings app, go to **Settings** | **Apps**. Pick an app and scroll
    down to see the permissions that the app uses You can see the Lollipop version
    in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用设置应用程序，请转到**设置** | **应用**。选择一个应用程序，向下滚动以查看应用程序使用的权限。你可以在以下截图中看到Lollipop版本：
- en: '![Viewing the permissions for each app](img/00003.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![查看每个应用程序的权限](img/00003.jpeg)'
- en: In Android Marshmallow, the UI is different.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android棉花糖系统中，用户界面是不同的。
- en: '![Viewing the permissions for each app](img/00004.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![查看每个应用程序的权限](img/00004.jpeg)'
- en: 'The second option is to use the `adb` shell commands with the `aapt` command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项是使用`adb` shell命令与`aapt`命令：
- en: 'List all the applications along with their installation paths. As an example,
    let''s try to find out Facebook groups'' app permissions using the following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有应用程序及其安装路径。例如，让我们尝试使用以下命令找出Facebook群组应用程序的权限：
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can use the `-3` flag to just show the third-party apps instead of the entire
    list.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用`-3`标志仅显示第三方应用程序，而不是整个列表。
- en: 'Once we get the package location (`apk`), we need to pull it from the device
    via the `adb` pull:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们获取到包位置（`apk`），我们需要通过`adb` pull从设备中提取它：
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our final step to show permissions is to use `aapt` found in the `build-tools`
    folder of your specific build tools version:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们最后一步显示权限是使用`aapt`，在你的特定构建工具版本的`build-tools`文件夹中可以找到：
- en: '[PRE5]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This gives us the following screenshot as a result:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这给我们以下截图作为结果：
- en: '![Viewing the permissions for each app](img/00005.jpeg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![查看每个应用程序的权限](img/00005.jpeg)'
- en: 'To view the permissions for the entire device, take a look at the following
    screenshot:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查看整个设备的权限，请查看以下截图：
- en: '![Viewing the permissions for each app](img/00006.jpeg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![查看每个应用程序的权限](img/00006.jpeg)'
- en: 'Using an `adb` command, you can print all known permissions on the device.
    The package manager (`pm`) command inside the `adb` command looks something like
    the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`adb`命令，你可以打印出设备上所有已知的权限。`adb`命令中的包管理器（`pm`）命令如下所示：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: List permissions get the `[options]` and `<GROUP>` arguments (both optional).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 列出权限获取`[options]`和`<GROUP>`参数（都是可选的）。
- en: 'Here, `options` can be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`options`可以是以下内容：
- en: '`-g`: This refers to a list of permissions organized by a group'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-g`：这指的是按组组织权限的列表'
- en: '`-f`: This prints all the information'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`：这将打印出所有信息'
- en: '`-s`: This prints a short summary, and this is what the user sees on screen
    when checking permissions or approving them'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`：这将打印简短的摘要，这是用户在检查权限或批准权限时在屏幕上看到的内容'
- en: '`-d`: This looks up and prints only permissions that are considered dangerous'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`：这会查找并只打印出被认为危险的权限'
- en: '`-u`: This lists permissions visible to the user only'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-u`：这仅列出用户可见的权限'
- en: Understanding Android Marshmallow permissions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Android棉花糖权限
- en: Android Marshmallow introduces a new application permissions model, allowing
    a simpler process for users when installing and/or upgrading applications. Applications
    running on Marshmallow should work according to a new permissions model, where
    the user can grant or revoke permissions after the installation—permissions are
    not given until there is user acceptance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Android Marshmallow引入了一个新的应用权限模型，使用户在安装和/或升级应用时过程更加简单。在Marshmallow上运行的应用应该遵循新的权限模型，在该模型下，用户可以在安装后授予或撤销权限——权限只有在用户接受的情况下才会被授予。
- en: Supporting the new permissions model is backward-compatible, which means your
    apps can still be installed and run on devices running older versions of Android
    using the old permissions model on those devices.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 新的权限模型支持向后兼容，这意味着你的应用仍然可以在运行旧版本Android的设备上安装和运行，并在这些设备上使用旧的权限模型。
- en: An overview
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: With the Android Marshmallow version, a new application permissions model has
    been introduced.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Marshmallow版本中，引入了新的应用权限模型。
- en: 'Let''s review it a bit more thoroughly:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解一下：
- en: '**Declaring permissions**: All permissions an app needs are declared in the
    manifest, which is done to preserve backward compatibility in a manner similar
    to earlier Android platform versions.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明权限**：应用需要的所有权限都在清单文件中声明，这样做是为了以类似早期Android平台版本的方式保持向后兼容性。'
- en: '**Permission groups**: As discussed previously, permissions are divided into
    permission groups based on their functionalities:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限组**：如前所述，权限根据其功能被划分为权限组：'
- en: '**PROTECTION_NORMAL permissions**: Some of the permissions are granted when
    users install the app. Upon installation, the system checks your app''s manifest
    and automatically grants permissions that match the `PROTECTION_NORMAL` group.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PROTECTION_NORMAL权限**：有些权限在用户安装应用时授予。在安装过程中，系统会检查应用的清单文件，并自动授予匹配`PROTECTION_NORMAL`组的权限。'
- en: '**INTERNET permission**: One important permission is the `INTERNET` permission,
    which will be granted upon installation, and the user can''t revoke it.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INTERNET权限**：一个重要的权限是`INTERNET`权限，该权限在安装时授予，用户无法撤销。'
- en: '**App signature permissions granted**: The user is not prompted to grant any
    permissions at the time of installation.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用签名权限已授予**：在安装时，系统不会提示用户授予任何权限。'
- en: '**Permissions granted by users at runtime**: You as an app developer need to
    request a permission in your app; a system dialog is shown to the user, and the
    user response is passed back to your app, notifying whether the permission is
    granted.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户在运行时授予的权限**：作为应用开发者，你需要在自己的应用中请求权限；系统会向用户显示一个对话框，用户的回应会传递回你的应用，通知权限是否被授予。'
- en: '**Permissions can be revoked**: Users can revoke permissions that were granted
    previously. We must learn how to handle these cases, as we''ll learn later on.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限可以被撤销**：用户可以撤销之前授予的权限。我们必须学会如何处理这些情况，稍后会详细介绍。'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If an app targets an Android Marshmallow version, it must use the new permissions
    model.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用的目标是Android Marshmallow版本，则必须使用新的权限模型。
- en: Permission groups
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限组
- en: When working with permissions, we divide them into groups. This division is
    done for fast user interaction when reviewing and approving permissions. Granting
    is done only once per permission group. If you add a new permission or request
    a new permission from the same permission group and the user has already approved
    that group, the system will grant you the added permission without bothering the
    user about the approval.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理权限时，我们将它们划分为不同的组。这种划分是为了在使用户审查和批准权限时能够快速交互。每个权限组只需授权一次。如果你添加了新的权限或请求同一权限组内的权限，而用户已经批准了该组，系统将自动授予你新增的权限，而无需用户再次审批。
- en: For more information on this, visit [https://developer.android.com/reference/android/content/pm/PermissionInfo.html#constants](https://developer.android.com/reference/android/content/pm/PermissionInfo.html#constants).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请访问[https://developer.android.com/reference/android/content/pm/PermissionInfo.html#constants](https://developer.android.com/reference/android/content/pm/PermissionInfo.html#constants)。
- en: When the user installs an app, the app is granted only those permissions that
    are listed in the manifest that belongs to the `PROTECTION_NORMAL` group.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用户安装应用时，只有那些在清单文件中列出的属于`PROTECTION_NORMAL`组的权限会被授予。
- en: Requesting permissions from the `PROTECTION_SIGNATURE` group will be granted
    only if the application is signed with the same certificate as the app with the
    declared permission.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用与声明权限的应用程序相同的证书签名，那么来自`PROTECTION_SIGNATURE`组的权限请求将被授予。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apps cannot request signature permissions at runtime.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序在运行时不能请求签名权限。
- en: System components automatically receive all the permissions listed in their
    manifests.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 系统组件自动接收其清单中列出的所有权限。
- en: Runtime permissions
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时权限
- en: Android Marshmallow showcased a new permissions model where users were able
    to directly manage app permissions at application runtime. Google has altered
    the old permissions model, mostly to enable easier and frictionless installations
    and auto-updates for users as well as for app developers. This allows users to
    install the app without the need to preapprove each permission the application
    needs. The user can install the app without going through the phase of checking
    each permission and declining the installation due to a single permission.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Android Marshmallow展示了一个新的权限模型，用户可以直接在应用程序运行时管理应用权限。谷歌改变了旧的权限模型，主要是为了使用户和应用程序开发者的安装和自动更新更加容易和无摩擦。这使得用户无需预先批准应用程序需要的每个权限即可安装应用程序。用户可以在不检查每个权限并因为一个权限而拒绝安装的情况下安装应用程序。
- en: Users can grant or revoke permissions for installed apps, leaving the tweaking
    and the freedom of choice in the users' hands.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以为已安装的应用程序授予或撤销权限，将调整和选择的自由留在用户手中。
- en: Most of the applications will need to address these issues when updating the
    target API to 23.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序在将目标API更新到23时需要解决这些问题。
- en: Taking coding permissions into account
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑编码权限
- en: 'Well, after all the explanations, we''ve reached the coding part, and this
    is where we will get our coding hands dirty. The following are key methods used
    for handling permissions:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，经过所有解释之后，我们来到了编码部分，这里我们将亲自动手编码。以下是用于处理权限的关键方法：
- en: '`Context.checkSelfPermission()`: This checks whether your app has been granted
    a permission'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Context.checkSelfPermission()`: 这检查你的应用程序是否被授予了权限'
- en: '`Activity.requestPermission()`: This requests a permission at runtime'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Activity.requestPermission()`: 这在运行时请求一个权限'
- en: Even if your app is not yet targeting Android Marshmallow, you should test your
    app and prepare to support it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你的应用程序还没有针对Android Marshmallow，你也应该测试你的应用程序并准备支持它。
- en: Testing permissions
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试权限
- en: In the Android Marshmallow permissions model, your app must ask the user for
    individual permissions at runtime. There is limited compatibility support for
    legacy apps, and you should test your app and also test a version to make sure
    it's supported.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Marshmallow的权限模型中，你的应用程序必须在运行时向用户请求单个权限。对于遗留应用程序有有限的兼容性支持，你应该测试你的应用程序，并确保它得到支持。
- en: 'You can use the following test guide and conduct app testing with the new behavior:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下测试指南，用新的行为进行应用程序测试：
- en: Map your app's permissions
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射你应用程序的权限
- en: Test flows with permissions granted and revoked
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试权限被授予和撤销的流程
- en: 'The `adb` command shell can be quite helpful to check for permissions:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`adb`命令行可以非常有助于检查权限：'
- en: 'Listing application permissions and status by group can be done using the following
    `adb` command:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用以下`adb`命令按组列出应用程序的权限和状态：
- en: '[PRE7]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can grant or revoke permissions using the following `adb` syntax:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用以下`adb`语法授予或撤销权限：
- en: '[PRE8]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can grant permissions and install `apk` using the following `adb` command:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用以下`adb`命令授予权限并安装`apk`：
- en: '[PRE9]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Coding for runtime permissions
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为运行时权限进行编码
- en: 'When we want to adjust our application to the new model, we need to make sure
    that we organize our steps and leave no permission stranded:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要调整应用程序以适应新模型时，我们需要确保我们组织好步骤，不要遗漏任何权限：
- en: '**Check what platform the app is running on**: When running a piece of code
    that is sensitive at the API level, we start by checking the version/API level
    that we are running on.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查应用程序运行的平台**：当我们运行对API级别敏感的代码片段时，我们从检查我们正在运行的版本/API级别开始。'
- en: By now, you should be familiar with `Build.VERSION.SDK_INT`.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到现在，你应该熟悉`Build.VERSION.SDK_INT`。
- en: '**Check whether the app has the required permission**: Here, we get ourselves
    a brand new API call:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查应用程序是否具有所需的权限**：在这里，我们得到了一个全新的API调用：'
- en: '`Context.checkSelfPermission(String permission_name)`.'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Context.checkSelfPermission(String permission_name)`。'
- en: With this, we silently check whether permissions are granted or not.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过这种方式，我们默默地检查权限是否被授予。
- en: This method returns immediately, so any permission-related controls/flows should
    be dealt with by checking this first.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个方法立即返回，因此任何与权限相关的控制/流程都应该首先通过检查这个方法来处理。
- en: '**Prompting for permissions**: We have a new API call, `Activity.requestPermissions
    (String[] permissions, int requestCode)`. This call triggers the system to show
    the dialog requesting a permission. This method functions asynchronously.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求权限**：我们有一个新的 API 调用，`Activity.requestPermissions (String[] permissions,
    int requestCode)`。这个调用会触发系统显示请求权限的对话框。这个方法是异步工作的。'
- en: You can request more than one permission at once. The second argument is a simple
    request code returned in the callback so that you can recognize the calls. This
    is just like how we've been dealing with `startActivityForResult()` and `onActivityResult()`
    for years.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以一次性请求多个权限。第二个参数是一个简单的请求代码，在回调中返回，以便你可以识别这些调用。这就像多年来我们处理 `startActivityForResult()`
    和 `onActivityResult()` 一样。
- en: Another new API is `Activity.shouldShowRequestPermissionRationale(String permission)`.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个新的 API 是 `Activity.shouldShowRequestPermissionRationale(String permission)`。
- en: This method returns `true` when you have requested a permission and the user
    denied the request. It's considered a good practice after verifying that you explain
    to the user why you need that exact permission. The user can decide to turn down
    the permission request and select the *Don't ask again* option; then, this method
    will return `false`.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你请求权限并且用户拒绝请求时，此方法返回 `true`。在确认后，向用户解释为什么需要这个权限被认为是最佳实践。用户可以选择拒绝权限请求并选择*不再询问*选项；然后，此方法将返回
    `false`。
- en: 'The following sample code checks whether the app has permission to read the
    user''s contacts. It requests the permission if required, and the result callback
    returns to `onRequestPermissionsResult`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例代码检查应用是否有读取用户联系人的权限。如果需要，它会请求权限，结果回调返回到 `onRequestPermissionsResult`：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Just to make sure we all know the constants used, here''s the explanation:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们都知道使用的常量，以下是解释：
- en: '`public static final int PERMISSION_DENIED=-1`:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static final int PERMISSION_DENIED=-1`：'
- en: Since it's API level 1, permission has not been granted to the given package
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 API 级别 1 起，给定的包未获得权限
- en: '`public static final int PERMISSION_GRANTED=0`:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static final int PERMISSION_GRANTED=0`：'
- en: Since it's API level 1, permission has been granted to the given package.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 API 级别 1 起，给定的包已获得权限。
- en: If the user denies your permission request, your app should take the appropriate
    action, such as notifying the user why this permission is required or explaining
    that the feature can't work without it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户拒绝你的权限请求，你的应用应该采取适当的行动，比如通知用户为什么需要这个权限，或者解释没有这个权限功能无法工作。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Your app cannot assume user interaction has taken place because the user can
    choose to reject granting a permission along with the *do not show again* option;
    your permission request is automatically rejected and `onRequestPermissionsResult`
    gets the result back.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用不能假设用户已经进行了交互，因为用户可以选择拒绝授予权限并选择*不再显示*选项；你的权限请求会被自动拒绝，`onRequestPermissionsResult`会收到结果。
- en: Best practices and usage notes
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最佳实践和用法说明
- en: The new permissions model has brought to life a smoother experience for users
    and a bit more code-handling for developers. It makes it easier to install and
    update apps and feel comfortable with what the apps are doing.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 新的权限模型为用户带来了更流畅的体验，同时也为开发者带来了一些额外的代码处理。它使得安装和更新应用更加容易，让用户对应用的操作感到舒适。
- en: Minimalism is a great option
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 极简主义是一个很好的选择
- en: Don't be a permission hog! In our application life cycle, we should try to minimize
    our permission requests. Asking for a lot of permissions and maintaining them
    can seem hazardous for some, and we should try and make the feature smooth and
    ask for the smallest number of permissions as far as possible in order to allow
    relaxed, undisturbed usage. Consider using intents whenever possible—rely on other
    applications doing some of the work for us (fewer permissions means less friction,
    turning a good app into a great one).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不要贪求过多的权限！在我们的应用生命周期中，应尽量减少权限请求。请求大量权限并维护它们可能会让一些用户感到危险，我们应当尽可能减少权限请求，让功能运行顺畅，以便用户能够轻松无忧地使用。在可能的情况下，考虑使用意图——依赖其他应用为我们完成一些工作（减少权限意味着减少摩擦，将好的应用变成卓越的应用）。
- en: Asking for too many permissions at once
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次性请求过多权限
- en: Users can get distracted by too many dialogs popping up, asking them for more
    and more permissions. Instead, you should ask for permissions as and when you
    need them.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能会因为太多弹出的对话框而分心，这些对话框要求他们授予越来越多的权限。相反，你应该在需要时请求权限。
- en: However, we have some exceptions to every rule. Your app may require a few permissions
    to begin with, such as a camera application showing the camera permissions right
    at the beginning. However, setting the photo to your contact can be done and requested
    only when the user triggers that specific action. Try to map your flow and make
    it easier for users to understand what is going on. Users will understand that
    you've requested permissions for contacts if they have asked to set information
    to a contact via your app.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每条规则都有一些例外。你的应用可能一开始就需要一些权限，比如相机应用一开始就显示相机权限。但是，将照片设置到联系人可以在用户触发该特定操作时完成和请求。尝试映射你的流程，让用户更容易理解正在发生的事情。如果用户通过你的应用请求将信息设置到联系人，他们将理解你请求了联系人的权限。
- en: 'One more suggestion: apps with a tutorial can integrate the essential permissions''
    request in the tutorial, allowing the users to better understand the flow and
    why each permission is used.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 再提供一个建议：带教程的应用可以在教程中整合必要的权限请求，让用户更好地理解流程以及为什么需要每个权限。
- en: Honesty can be a great policy
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 诚实可能是一项极好的政策
- en: 'When asking for a permission, the system shows a dialog stating which permission
    your app wants, but it doesn''t say why. Consider users who hate being left in
    the dark thinking why this permission is needed now or users who deny the permissions
    due to speculation. Things can be even worse: sometimes, a user''s cursor may
    be 2 cm away from the 1-star rating or the uninstall button.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求权限时，系统会显示一个对话框，告知用户你的应用需要哪个权限，但不会说明原因。考虑一下那些不喜欢被蒙在鼓里，想知道为什么现在需要这个权限的用户，或者因为猜测而拒绝权限的用户。情况可能更糟：有时，用户的鼠标可能离一星评价或卸载按钮只有2厘米远。
- en: This is why it's a good idea to explain why your app wants the permissions before
    calling `requestPermissions()`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在调用`requestPermissions()`之前解释你的应用为什么需要权限是个好主意。
- en: Keep in mind that most developers will choose a tutorial but a lot of users
    may choose to skip tutorials whenever possible, so you must make sure that you
    can provide information about permissions, apart from the ones in the tutorial.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，大多数开发者会选择一个教程，但很多用户可能会选择尽可能跳过教程，所以你必须确保除了教程中的内容外，你还能提供关于权限的信息。
- en: Need support handling runtime permissions?
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要支持处理运行时权限吗？
- en: Managing permissions is easier with the latest revision of the **v4** or **v13**
    support libraries (23, which is the same as the Android Marshmallow API version,
    so it's easy to remember)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最新修订的**v4**或**v13**支持库（23，与Android Marshmallow API版本相同，因此容易记住）管理权限更容易。
- en: The support libraries now provide several new methods to manage permissions
    and work properly on any device that can use these libraries. This, for instance,
    saves you the time required to check for a sufficient API level regardless of
    whether the device runs Android Marshmallow or not. If an app is installed on
    a device running Android Marshmallow, proper behavior is achieved—as if you're
    running the same framework calls. Even when running on lower versions, you get
    the expected behavior from the support library methods.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 支持库现在提供了几种新方法来管理权限，并且可以在任何可以使用这些库的设备上正常工作。例如，这为你节省了检查足够API级别的时间，无论设备是否运行Android
    Marshmallow。如果应用安装在运行Android Marshmallow的设备上，就能实现正确的行为——就像运行相同的框架调用一样。即使在较低版本上运行，你也可以从支持库方法中得到预期的行为。
- en: 'The v4 support library has the following methods:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: v4支持库有以下方法：
- en: '`ActivityCompat.checkSelfPermission (Context context, String permission)`:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityCompat.checkSelfPermission (Context context, String permission)`：'
- en: This checks whether your app has a permission. `PERMISSION_GRANTED` is returned
    if the app has the permission; otherwise, `PERMISSION_DENIED` is returned.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会检查你的应用是否拥有一个权限。如果应用有该权限，则返回`PERMISSION_GRANTED`；否则，返回`PERMISSION_DENIED`。
- en: '`ActivityCompat.requestPermissions (Activity activity, String[] permissions,
    int requestCode`:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityCompat.requestPermissions (Activity activity, String[] permissions,
    int requestCode`：'
- en: This requests permissions, if required. If the device is not running Android
    6.0, you will get a callback.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，这会请求权限。如果设备没有运行Android 6.0，你会得到一个回调。
- en: '`ActivityCompat.OnRequestPermissionsResultCallback(int requestCode, String[]
    permissions, int[] grantResults)`:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityCompat.OnRequestPermissionsResultCallback(int requestCode, String[]
    permissions, int[] grantResults)`：'
- en: This passes `PERMISSION_GRANTED` if the app already has the specified permission
    and `PERMISSION_DENIED` if it does not.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果应用已经拥有指定权限，这将传递`PERMISSION_GRANTED`；如果没有，则传递`PERMISSION_DENIED`。
- en: '`ActivityCompat.shouldShowRequestPermissionRationale (Activity activity, String
    permission)`:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityCompat.shouldShowRequestPermissionRationale (Activity activity, String
    permission)`：'
- en: This returns `true` if the user has denied a permission request at least once
    and has not yet selected the *Don't ask again* option.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果用户至少拒绝了一次权限请求并且还没有选择*不再询问*选项，这将返回`true`。
- en: According to the design patterns, we should now give our users more information
    about the feature and why these permissions are so important to the app.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 根据设计模式，我们现在应该向用户提供更多关于此功能的信息以及为什么这些权限对应用如此重要。
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the device is not running Android Marshmallow, `shouldShowRequestPermissionRationale`
    will always return `false`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备未运行Android棉花糖版本，`shouldShowRequestPermissionRationale`将始终返回`false`。
- en: The `PermissionChecker` class is also included in v4.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`PermissionChecker`类也包含在v4中。'
- en: This class provides several methods for apps that use IPC to check whether a
    particular package has a specified permission when IPC calls are made.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类为使用IPC的应用提供了几种方法，在IPC调用时检查特定包是否具有指定权限。
- en: Android has a compatibility mode, allowing users to revoke access to permission-protected
    methods for legacy apps. When a user revokes access in the compatibility mode,
    the app's permissions remain the same but access to the APIs is restricted.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓有一个兼容模式，允许用户为遗留应用撤销对受权限保护方法的访问。当用户在兼容模式下撤销访问时，应用的权限保持不变，但对API的访问受到限制。
- en: The `PermissionChecker` method verifies app permissions in normal as well as
    legacy modes.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`PermissionChecker`方法可以在正常和遗留模式下验证应用权限。'
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your app acts as a middleman on behalf of other apps and needs to call platform
    methods that require runtime permissions, you should use the appropriate `PermissionChecker`
    method in order to ensure that the other app is allowed to perform the operation.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用代表其他应用作为中介，并且需要调用需要运行时权限的平台方法，则应使用适当的`PermissionChecker`方法，以确保其他应用被允许执行该操作。
- en: 'The v13 support library provides the following permission methods:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: v13支持库提供了以下权限方法：
- en: '`FragmentCompat.requestPermissions()`:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FragmentCompat.requestPermissions()`：'
- en: This requests permissions, if required. If the device is not running Android
    6.0, you will get a callback.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，这将请求权限。如果设备未运行Android 6.0，你将得到一个回调。
- en: '`FragmentCompat.OnRequestPermissionsResultCallback`:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FragmentCompat.OnRequestPermissionsResultCallback`：'
- en: This passes `PERMISSION_GRANTED` if the app already has the specified permission
    and `PERMISSION_DENIED` if it does not.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果应用已经拥有指定权限，这将传递`PERMISSION_GRANTED`；如果没有，则传递`PERMISSION_DENIED`。
- en: '`FragmentCompat.shouldShowRequestPermissionRationale()`:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FragmentCompat.shouldShowRequestPermissionRationale()`：'
- en: This returns `true` if the user has denied a permission request at least once
    and has not yet selected the *Don't ask again* option.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果用户至少拒绝了一次权限请求并且还没有选择*不再询问*选项，这将返回`true`。
- en: According to the design patterns, we should now give our users more information
    about the feature and why this permission is so important to the app.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 根据设计模式，我们现在应该向用户提供更多关于此功能的信息以及为什么这些权限对应用如此重要。
- en: Note
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the device is not running Android Marshmallow, it will always return `false`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备未运行Android棉花糖版本，它将始终返回`false`。
- en: 'You can check out the sample project for the three ways to handle permissions:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看示例项目，了解处理权限的三种方法：
- en: '[https://github.com/MaTriXy/PermissionMigrationGuide](https://github.com/MaTriXy/PermissionMigrationGuide)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MaTriXy/PermissionMigrationGuide](https://github.com/MaTriXy/PermissionMigrationGuide)'
- en: For more information on permission design patterns, read *Patterns – Permissions*
    by Google at [https://www.google.com/design/spec/patterns/permissions.html](https://www.google.com/design/spec/patterns/permissions.html).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关权限设计模式的更多信息，请阅读谷歌的*模式 - 权限*，链接为[https://www.google.com/design/spec/patterns/permissions.html](https://www.google.com/design/spec/patterns/permissions.html)。
- en: Some permissions are normal and safer to use
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些权限是正常且更安全的用法
- en: The Android system flags permissions according to their protection levels. The
    levels are describes at [http://developer.android.com/reference/android/content/pm/PermissionInfo.html](http://developer.android.com/reference/android/content/pm/PermissionInfo.html).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓系统会根据权限的保护级别来标记权限。级别描述可以在[http://developer.android.com/reference/android/content/pm/PermissionInfo.html](http://developer.android.com/reference/android/content/pm/PermissionInfo.html)找到。
- en: The level that is relevant to our discussion is `PROTECTION_NORMAL`, in which
    permissions are considered to have little or no risk when applications have them.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的相关级别是`PROTECTION_NORMAL`，当应用程序拥有这些权限时，被认为是几乎没有风险的。
- en: Let's say you want to build a flashlight app; allowing your app to turn on the
    flash is not considered a huge risk to privacy or security, and this is why flashlight
    permission is flagged `PROTECTION_NORMAL`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想构建一个手电筒应用；允许你的应用打开闪光灯被认为对隐私或安全没有巨大风险，这就是为什么手电筒权限被标记为`PROTECTION_NORMAL`。
- en: When you declare normal permissions in the manifest, the system grants these
    permissions automatically at the time of installation. There is no prompt to grant
    permissions for a normal permissions group, and these permissions can't be revoked
    by users.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在清单中声明普通权限时，系统会在安装时自动授予这些权限。对于普通权限组，不会有授权提示，且用户无法撤销这些权限。
- en: This means that you can be sure that normal permissions are granted at the time
    of installation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以确信，普通权限在安装时会被授予。
- en: 'Currently, the permissions classified as `PROTECTION_NORMAL` are as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，被归类为`PROTECTION_NORMAL`的权限如下：
- en: '`android.permission.ACCESS_LOCATION_EXTRA_COMMANDS`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_LOCATION_EXTRA_COMMANDS`'
- en: '`android.permission.ACCESS_NETWORK_STATE`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_NETWORK_STATE`'
- en: '`android.permission.ACCESS_WIFI_STATE`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_WIFI_STATE`'
- en: '`android.permission.ACCESS_WIMAX_STATE`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.ACCESS_WIMAX_STATE`'
- en: '`android.permission.BLUETOOTH`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BLUETOOTH`'
- en: '`android.permission.BLUETOOTH_ADMIN`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BLUETOOTH_ADMIN`'
- en: '`android.permission.BROADCAST_STICKY`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.BROADCAST_STICKY`'
- en: '`android.permission.CHANGE_NETWORK_STATE`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CHANGE_NETWORK_STATE`'
- en: '`android.permission.CHANGE_WIFI_MULTICAST_STATE`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CHANGE_WIFI_MULTICAST_STATE`'
- en: '`android.permission.CHANGE_WIFI_STATE`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.CHANGE_WIFI_STATE`'
- en: '`android.permission.DISABLE_KEYGUARD`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.DISABLE_KEYGUARD`'
- en: '`android.permission.EXPAND_STATUS_BAR`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.EXPAND_STATUS_BAR`'
- en: '`android.permission.FLASHLIGHT`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.FLASHLIGHT`'
- en: '`android.permission.GET_ACCOUNTS`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.GET_ACCOUNTS`'
- en: '`android.permission.GET_PACKAGE_SIZE`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.GET_PACKAGE_SIZE`'
- en: '`android.permission.INTERNET`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.INTERNET`'
- en: '`android.permission.KILL_BACKGROUND_PROCESSES`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.KILL_BACKGROUND_PROCESSES`'
- en: '`android.permission.MODIFY_AUDIO_SETTINGS`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.MODIFY_AUDIO_SETTINGS`'
- en: '`android.permission.NFC`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.NFC`'
- en: '`android.permission.PERSISTENT_ACTIVITY`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.PERSISTENT_ACTIVITY`'
- en: '`android.permission.READ_SYNC_SETTINGS`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_SYNC_SETTINGS`'
- en: '`android.permission.READ_SYNC_STATS`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_SYNC_STATS`'
- en: '`android.permission.READ_USER_DICTIONARY`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.READ_USER_DICTIONARY`'
- en: '`android.permission.RECEIVE_BOOT_COMPLETED`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.RECEIVE_BOOT_COMPLETED`'
- en: '`android.permission.REORDER_TASKS`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.REORDER_TASKS`'
- en: '`android.permission.SET_TIME_ZONE`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_TIME_ZONE`'
- en: '`android.permission.SET_WALLPAPER`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_WALLPAPER`'
- en: '`android.permission.SET_WALLPAPER_HINTS`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SET_WALLPAPER_HINTS`'
- en: '`android.permission.SUBSCRIBED_FEEDS_READ`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.SUBSCRIBED_FEEDS_READ`'
- en: '`android.permission.TRANSMIT_IR`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.TRANSMIT_IR`'
- en: '`android.permission.VIBRATE`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.VIBRATE`'
- en: '`android.permission.WAKE_LOCK`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WAKE_LOCK`'
- en: '`android.permission.WRITE_SETTINGS`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_SETTINGS`'
- en: '`android.permission.WRITE_SYNC_SETTINGS`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_SYNC_SETTINGS`'
- en: '`android.permission.WRITE_USER_DICTIONARY`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.permission.WRITE_USER_DICTIONARY`'
- en: '`com.android.alarm.permission.SET_ALARM`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.android.alarm.permission.SET_ALARM`'
- en: '`com.android.launcher.permission.INSTALL_SHORTCUT`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.android.launcher.permission.INSTALL_SHORTCUT`'
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As you saw, the Android permission system and model is vast and has introduced
    a few changes that can help app developers and applications gain more traction
    and installations and give the users the ability to decide when your applications
    will be able to use each permission-dependent feature. Keep in mind, though, that
    this is just a starting point and Android Marshmallow still needs to gain market
    share and get adopted by OEMs, enabling users with freedom of choice. You as an
    app developer must prepare in advance and make sure your application development
    is forward-facing, allowing new users to enjoy the latest updates as soon as possible
    while maintaining a high level of performance for your applications.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，Android权限系统和模型非常广泛，引入了一些变化，可以帮助应用开发者和应用程序获得更多的牵引力和安装量，并让用户决定你的应用程序何时能够使用每个依赖权限的功能。但请记住，这只是一个起点，Android
    Marshmallow还需要获得市场份额并得到OEM的采用，让用户拥有选择的自由。作为应用开发者，你必须提前做好准备，确保你的应用开发面向未来，让新用户尽快享受最新的更新，同时保持你的应用高性能。
- en: 'In the next chapter, we will go over a small yet important feature in the Android
    Marshmallow version: app linking.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细介绍 Android Marshmallow 版本中的一个虽小但重要的特性：应用链接。
